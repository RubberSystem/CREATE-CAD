//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The FormShell class represent the main form of your application.
// 
// The default Form supplied in this guidance package provides basic UI elements 
// like:
//      - A MenuStrip
//      - A ToolStrip
//      - A StatusStrip
//      - 2 WorkSpaces (left and right) separated by a spliter
//
// There is also a subscription to the "StatusUpdate" event topic used to change the
// content of the StatusStrip
//
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;

using CustomControls;
using ErrorReportCommon;
using Extensions.CustomControls;
using log4net;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using Microsoft.Practices.CompositeUI.SmartParts;
using Naro.Infrastructure.Interface;
using Naro.Infrastructure.Interface.Constants;
using Naro.Infrastructure.Library;
using Naro.Infrastructure.Shell.Constants;
using Naro.Layout;
using NaroStarter;
using WeifenLuo.WinFormsUI.Docking;

namespace Naro.Infrastructure.Shell
{
    /// <summary>
    /// Main application shell view.
    /// </summary>
    public partial class ShellForm : Form, ISmartPartInfoProvider
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(ShellForm));

        private DeserializeDockContent _deserializeDockContent;
        private WorkItem rootWorkItem;
        private DockContentMdiWorkspace mdiWorkspace;
        private PropertyView _propertyView = new PropertyView();
        private ObjectsTreeView _objectsTreeView = new ObjectsTreeView();
        private CommandLineView _commandLineView = new CommandLineView();
        private HelpView _helpView = new HelpView();

        /// <summary>
        /// Default class initializer.
        /// </summary>
        public ShellForm([ServiceDependency] WorkItem workItem)
        {
            InitializeComponent();

            rootWorkItem = workItem;
            mdiWorkspace = new DockContentMdiWorkspace(this.dockPanel);
            rootWorkItem.Workspaces.Add(mdiWorkspace, WorkspaceNames.SceneWorkspace);
            rootWorkItem.Items.Add(_propertyView);
            rootWorkItem.Items.Add(_objectsTreeView);
            rootWorkItem.Items.Add(_commandLineView);
            rootWorkItem.Items.Add(_helpView);

            // Load the layout from the config file
            _deserializeDockContent = new DeserializeDockContent(GetContentFromPersistString);
            string configFile = Path.Combine(Path.GetDirectoryName(Application.ExecutablePath), "DockPanel.config");

            // Load the layout form the config file
            if (File.Exists(configFile))
            {
                try
                {
                    dockPanel.LoadFromXml(configFile, _deserializeDockContent);
                }
                catch(Exception e)
                {
                    log.Debug("Failed at loading the DockPanel.config:" + configFile + Environment.NewLine + "Exception: " + e.Message);
                    throw;
                }
            }

            // Add the Property, the Object and the CommandLine views
            _propertyView.Show(dockPanel);
            _objectsTreeView.Show(dockPanel);
            _commandLineView.Show(dockPanel);
            _helpView.Show(dockPanel);
        }

        /// <summary>
        /// Save the layout to the config file.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ShellClosing(object sender, FormClosingEventArgs e)
        {
            string configFile = Path.Combine(Path.GetDirectoryName(Application.ExecutablePath), "DockPanel.config");
            dockPanel.SaveAsXml(configFile);
            OptionsManager.Instance.SaveOptionsToFile(NaroAppConstantNames.OptionsFile);
        }

        private IDockContent GetContentFromPersistString(string persistString)
        {
            if (persistString == typeof(PropertyView).ToString())
                return _propertyView;
            else if (persistString == typeof(ObjectsTreeView).ToString())
                return _objectsTreeView;
            else if (persistString == typeof(CommandLineView).ToString())
                return _commandLineView;
            else if (persistString == typeof(HelpView).ToString())
                return _helpView;
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Close the application.
        /// </summary>
        private void OnFileExit(object sender, EventArgs e)
        {
            Close();
        }

        public Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            // Implement ISmartPartInfoProvider in the containing smart part. Required in order for contained smart part infos to work.
            Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfoProvider ensureProvider = this;
            return this.infoProvider.GetSmartPartInfo(smartPartInfoType);
        }
        
        void ShellFormShown(object sender, EventArgs e)
        {
        	Text = NaroAppConstantNames.AppName + " - " + NaroAppConstantNames.Version;
            OptionsManager.Instance.RestoreOptions(NaroAppConstantNames.OptionsFile);
            SplashForm.Instance.Dispose();
            Activate();
            /// PreJIT all assemblies.
            /// 
            /// Look here for details:
            /// http://www.codeproject.com/KB/dotnet/pre_JIT.aspx?msg=2823768
         	//PreJit();
        }
        
        void PreJit()
        {
        	Thread jitter = new Thread(() =>
			{
	            Assembly[] appAssemblies = AppDomain.CurrentDomain.GetAssemblies (); 
	            foreach (Assembly assembly in appAssemblies )
	            { 
					  foreach (var type in assembly.GetTypes())
					  {
						    foreach (var method in type.GetMethods(BindingFlags.DeclaredOnly | 
						                        BindingFlags.NonPublic | 
						                        BindingFlags.Public | BindingFlags.Instance | 
						                        BindingFlags.Static))
						    {
						  		try{
						  			System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(method.MethodHandle);
						  		}
						  		catch {}
					  		}
					  }
					  
	            }
			});

            jitter.Priority = ThreadPriority.Lowest;
			jitter.Start();
        }

        public IPropertyView PropertyWindow
        {
            get { return _propertyView; }
        }

        public IObjectsTreeView ObjectsTreeWindow
        {
            get { return _objectsTreeView; }
        }

        public ICommandLineView CommandLineWindow
        {
            get { return _commandLineView; }
        }

        public IHelpView HelpWindow
        {
            get { return _helpView; }
        }

        private void KeyDownEvent(object sender, KeyEventArgs e)
        {
            rootWorkItem.EventTopics[Interface.Constants.EventTopicNames.KeyDownEvent].Fire(this, e, null, PublicationScope.Global);
        }
        
        private void KeyUpEvent(object sender, KeyEventArgs e)
        {
        	rootWorkItem.EventTopics[Interface.Constants.EventTopicNames.KeyUpEvent].Fire(this, e, null, PublicationScope.Global);        	
        }

        private void naroCADWebsiteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start(NaroAppConstantNames.Website);
        }

        private void developerBlogToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start(NaroAppConstantNames.BlogWebsite);
        }

        private void sourceForgeToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Process.Start(NaroAppConstantNames.SourceForgeWebsite);
        }

        private void openCascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process.Start(NaroAppConstantNames.OpenCascadeWebSite);
        }
        
        void ToolStripMenuItem1Click(object sender, EventArgs e)
        {
        	try
        	{
        		Process.Start(NaroAppConstantNames.TutorialFile);
        	}
        	catch(Exception ex)
        	{
        		MessageBox.Show(ex.Message);
        	}
        }
        bool _fullScreen;
        void ToolStripButton3Click(object sender, EventArgs e)
        {
        	_fullScreen = !_fullScreen;
        	if(_fullScreen)
        	{
        		this.mainMenuStrip.Visible = false;
        		this.FormBorderStyle = FormBorderStyle.None;
	            this.Left = (Screen.PrimaryScreen.Bounds.Width/2 - this.Width/2);
	            this.Top = (Screen.PrimaryScreen.Bounds.Height/2 - this.Height/2);
	            fullScreenToolStripButton.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText;
	            fullScreenToolStripButton.Text = "Exit FullScreen"; 
        	}
        	else
        	{
        		this.mainMenuStrip.Visible = true;
        		this.FormBorderStyle = FormBorderStyle.Sizable;
        		fullScreenToolStripButton.DisplayStyle = ToolStripItemDisplayStyle.Image;
        		fullScreenToolStripButton.Text = "FullScreen";
        	}
        }

        private void reportABugToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ReportingForm form = new ReportingForm();
            form.checkBoxRestart.Checked = false;
            form.checkBoxRestart.Visible = false;
            form.FileNames.Add(NaroAppConstantNames.LogFileName);
            form.FileNames.Add(NaroAppConstantNames.AutoSaveFileName);
            form.ShowDialog();
            if (form.DialogResult == DialogResult.OK)
            {
                var sent = StarterUtils.SendReportToSf(form, form.FileNames);
                if (!sent)
                {
                    MessageBox.Show("Error seding the log to internet. There may be internet problems");
                }
            }
        }
    }
}
