//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;

namespace Naro.Sketcher
{
    public partial class SketcherView : UserControl, ISketcherView
    {
        public SketcherView()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
        }

        public Control GetView()
        {
            return this;
        }

        private void ViewPaint(object sender, PaintEventArgs e)
        {
            if (_presenter != null)
            {
                _presenter.PaintHandler(sender, e);
            }
        }

        //
        // Notify listeners about the mouse events that appear
        //
        private void MouseDownEvent(object sender, MouseEventArgs e)
        {
            if (_presenter != null)
            {
                _presenter.MouseDownHandler(sender, e);
            }
        }

        private void MouseMoveEvent(object sender, MouseEventArgs e)
        {
            if (_presenter != null)
            {
                _presenter.MouseMoveHandler(sender, e);
            }
        }

        private void MouseUpEvent(object sender, MouseEventArgs e)
        {
            if (_presenter != null)
            {
                _presenter.MouseUpHandler(sender, e);
            }
        }
    }
}
