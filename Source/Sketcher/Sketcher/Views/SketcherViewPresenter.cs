//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;

using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;

using Naro.Infrastructure.Interface;

namespace Naro.Sketcher
{
    public partial class SketcherViewPresenter : Presenter<ISketcherView>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it has been loaded.
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public override void OnCloseView()
        {
            base.CloseView();
        }

        public void PaintHandler(object sender, PaintEventArgs e)
        {
            WorkItem.EventTopics[Constants.EventTopicNames.SketcherRepaintView].Fire(this, e, WorkItem, PublicationScope.WorkItem);
        }

        public void MouseDownHandler(object sender, MouseEventArgs e)
        {
            WorkItem.EventTopics[Constants.EventTopicNames.SketcherMouseDownEvent].Fire(this, e, WorkItem, PublicationScope.WorkItem);
        }

        public void MouseUpHandler(object sender, MouseEventArgs e)
        {
            WorkItem.EventTopics[Constants.EventTopicNames.SketcherMouseUpEvent].Fire(this, e, WorkItem, PublicationScope.WorkItem);
        }

        public void MouseMoveHandler(object sender, MouseEventArgs e)
        {
            WorkItem.EventTopics[Constants.EventTopicNames.SketcherMouseMoveEvent].Fire(this, e, WorkItem, PublicationScope.WorkItem);
        }

        public void ResizeHandler(object sender, EventArgs e)
        {
            WorkItem.EventTopics[Constants.EventTopicNames.SketcherResizeView].Fire(this, e, WorkItem, PublicationScope.WorkItem);
        }
    }
}
