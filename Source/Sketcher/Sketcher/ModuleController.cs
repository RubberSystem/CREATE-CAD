//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Resources;
using System.Windows.Forms;
using Naro.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Microsoft.Practices.CompositeUI.SmartParts;
using Naro.Infrastructure.Interface.Constants;
using Naro.Infrastructure.Interface.Services;
using Naro.Sketcher.Resources;
using log4net;

namespace Naro.Sketcher
{
    public class ModuleController : WorkItemController
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(ModuleController));

        private ControlledWorkItem<SketcherViewWorkItemController> _controlledWorkItem;

        public override void Run()
        {
            log.Debug("Sketcher.ModuleController.ModuleLostFocus");
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();

            // Display the toolstrips
            DisplaySketcherActionsToolstrip();
            DisplaySketcherDrawingToolstrip();

            // Start the use case
            _controlledWorkItem = WorkItem.WorkItems.AddNew<ControlledWorkItem<SketcherViewWorkItemController>>();
            _controlledWorkItem.Controller.Run();
        }

        public void ResumeRunning()
        {
            log.Debug("Sketcher.ModuleController.ResumeRunning");
            ShowToolstrips(true);
            _controlledWorkItem.Controller.ResumeRunning();
        }

        public void SuspendRunning()
        {
            log.Debug("Sketcher.ModuleController.SuspendRunning");
            ShowToolstrips(false);
            _controlledWorkItem.Controller.SuspendRunning();
        }

        void ShowToolstrips(bool visible)
        {
            //IShellExtensionService extensionService = this.WorkItem.Services.Get<IShellExtensionService>();
            //if (visible == true)
            //{
            //    extensionService.ShowToolstrip(this.WorkItem, Constants.UIExtensionSiteNames.SketcherToolstrip);
            //    extensionService.ShowToolstrip(this.WorkItem, Constants.UIExtensionSiteNames.SketcherDrawingToolstrip);
            //}
            //else
            //{
            //    extensionService.HideToolstrip(this.WorkItem, Constants.UIExtensionSiteNames.SketcherToolstrip);
            //    extensionService.HideToolstrip(this.WorkItem, Constants.UIExtensionSiteNames.SketcherDrawingToolstrip);

            //}
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-340-Showing_UIElements.htm
        }

        private void DisplaySketcherActionsToolstrip()
        {
            //ResourceManager resources = new ResourceManager(typeof(SketcherResources));
            //UIExtensionSite sketcherToolstrip;

            //// If the SketcherToolstrip doesn't exist create it else get it from the UIExtensionSites
            //if (this.WorkItem.UIExtensionSites.Contains(Constants.UIExtensionSiteNames.SketcherToolstrip))
            //{
            //    sketcherToolstrip = this.WorkItem.UIExtensionSites[Constants.UIExtensionSiteNames.SketcherToolstrip];
            //}
            //else
            //{
            //    // Get the Service that allows creating new Toolstrips
            //    IShellExtensionService extensionService = this.WorkItem.Services.Get<IShellExtensionService>();
            //    extensionService.AddToolstrip(this.WorkItem, Constants.UIExtensionSiteNames.SketcherToolstrip, false);
            //    // Retrieve the newly created toolstrip
            //    sketcherToolstrip = this.WorkItem.UIExtensionSites[Constants.UIExtensionSiteNames.SketcherToolstrip];

            //    // Add the cursor Button to the Sketcher toolbar
            //    ToolStripButton cursor = new ToolStripButton();
            //    cursor.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    cursor.Image = ((System.Drawing.Image)(resources.GetObject("cursorButton")));
            //    cursor.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    cursor.Name = "cursorButton";
            //    cursor.AutoSize = false;
            //    cursor.ImageScaling = ToolStripItemImageScaling.None;
            //    cursor.Size = new System.Drawing.Size(32, 32);
            //    cursor.Text = "Selection cursor";

            //    sketcherToolstrip.Add(cursor);
            //    this.WorkItem.Commands[Constants.CommandNames.Cursor].AddInvoker(cursor, "Click");

            //    // Add the FitAll Button to the Sketcher toolbar
            //    ToolStripButton fitAll = new ToolStripButton();
            //    fitAll.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    fitAll.Image = ((System.Drawing.Image)(resources.GetObject("fitAllButton")));
            //    fitAll.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    fitAll.Name = "fitAllButton";
            //    fitAll.AutoSize = false;
            //    fitAll.ImageScaling = ToolStripItemImageScaling.None;
            //    fitAll.Size = new System.Drawing.Size(32, 32);
            //    fitAll.Text = "Fit All";

            //    sketcherToolstrip.Add(fitAll);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherFitAll].AddInvoker(fitAll, "Click");

            //    // Add the ZoomWindow Button to the Sketcher toolbar
            //    ToolStripButton zoomWnd = new ToolStripButton();
            //    zoomWnd.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    zoomWnd.Image = ((System.Drawing.Image)(resources.GetObject("zoomWindowButton")));
            //    zoomWnd.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    zoomWnd.Name = "zoomWndButton";
            //    zoomWnd.AutoSize = false;
            //    zoomWnd.ImageScaling = ToolStripItemImageScaling.None;
            //    zoomWnd.Size = new System.Drawing.Size(32, 32);
            //    zoomWnd.Text = "Zoom Window";

            //    sketcherToolstrip.Add(zoomWnd);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherZoomWindow].AddInvoker(zoomWnd, "Click");

            //    // Add the FitAll Button to the Sketcher toolbar
            //    ToolStripButton dynZoom = new ToolStripButton();
            //    dynZoom.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    dynZoom.Image = ((System.Drawing.Image)(resources.GetObject("dynamicZoomButton")));
            //    dynZoom.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    dynZoom.Name = "dynamicZoomButton";
            //    dynZoom.AutoSize = false;
            //    dynZoom.ImageScaling = ToolStripItemImageScaling.None;
            //    dynZoom.Size = new System.Drawing.Size(32, 32);
            //    dynZoom.Text = "Dynamic Zooming";

            //    sketcherToolstrip.Add(dynZoom);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherDynamicZooming].AddInvoker(dynZoom, "Click");

            //    // Separator
            //    ToolStripSeparator toolStripSeparator = new ToolStripSeparator();
            //    toolStripSeparator.Name = "ToolStripSeparator";
            //    toolStripSeparator.Size = new System.Drawing.Size(6, 25);

            //    sketcherToolstrip.Add(toolStripSeparator);

            //    // Add the FitAll Button to the Sketcher toolbar
            //    ToolStripButton dynPan = new ToolStripButton();
            //    dynPan.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    dynPan.Image = ((System.Drawing.Image)(resources.GetObject("dynamicPanningButton")));
            //    dynPan.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    dynPan.Name = "dynamicPanningButton";
            //    dynPan.AutoSize = false;
            //    dynPan.ImageScaling = ToolStripItemImageScaling.None;
            //    dynPan.Size = new System.Drawing.Size(32, 32);
            //    dynPan.Text = "Dynamic Panning";

            //    sketcherToolstrip.Add(dynPan);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherDynamicPanning].AddInvoker(dynPan, "Click");

            //    // Add the FitAll Button to the Sketcher toolbar
            //    ToolStripButton globalPan = new ToolStripButton();
            //    globalPan.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    globalPan.Image = ((System.Drawing.Image)(resources.GetObject("globalPanningButton")));
            //    globalPan.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    globalPan.Name = "globalPanningButton";
            //    globalPan.AutoSize = false;
            //    globalPan.ImageScaling = ToolStripItemImageScaling.None;
            //    globalPan.Size = new System.Drawing.Size(32, 32);
            //    globalPan.Text = "Global Panning";

            //    sketcherToolstrip.Add(globalPan);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherGlobalPanning].AddInvoker(globalPan, "Click");

            //    // Separator
            //    ToolStripSeparator toolStripSeparator2 = new ToolStripSeparator();
            //    toolStripSeparator2.Name = "ToolStripSeparator";
            //    toolStripSeparator2.Size = new System.Drawing.Size(6, 25);
            //    sketcherToolstrip.Add(toolStripSeparator2);

            //    // Add the GridLines Button to the Sketcher toolbar
            //    ToolStripButton gridLines = new ToolStripButton();
            //    gridLines.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    gridLines.Image = ((System.Drawing.Image)(resources.GetObject("gridLinesButton")));
            //    gridLines.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    gridLines.Name = "gridLinesButton";
            //    gridLines.AutoSize = false;
            //    gridLines.ImageScaling = ToolStripItemImageScaling.None;
            //    gridLines.Size = new System.Drawing.Size(32, 32);
            //    gridLines.Text = "Rectangular grid with lines";

            //    sketcherToolstrip.Add(gridLines);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherGridLines].AddInvoker(gridLines, "Click");

            //    // Add the GridPoints Button to the Sketcher toolbar
            //    ToolStripButton gridPoints = new ToolStripButton();
            //    gridPoints.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    gridPoints.Image = ((System.Drawing.Image)(resources.GetObject("gridPointsButton")));
            //    gridPoints.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    gridPoints.Name = "gridPointsButton";
            //    gridPoints.AutoSize = false;
            //    gridPoints.ImageScaling = ToolStripItemImageScaling.None;
            //    gridPoints.Size = new System.Drawing.Size(32, 32);
            //    gridPoints.Text = "Rectangular grid with points";

            //    sketcherToolstrip.Add(gridPoints);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherGridPoints].AddInvoker(gridPoints, "Click");

            //    // Add the CircularGrid Button to the Sketcher toolbar
            //    ToolStripButton circularGrid = new ToolStripButton();
            //    circularGrid.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    circularGrid.Image = ((System.Drawing.Image)(resources.GetObject("circularGridButton")));
            //    circularGrid.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    circularGrid.Name = "circularGridButton";
            //    circularGrid.AutoSize = false;
            //    circularGrid.ImageScaling = ToolStripItemImageScaling.None;
            //    circularGrid.Size = new System.Drawing.Size(32, 32);
            //    circularGrid.Text = "Circular grid with lines";

            //    sketcherToolstrip.Add(circularGrid);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherCircularGrid].AddInvoker(circularGrid, "Click");
 
            //    // Add the CircularPoints Button to the Sketcher toolbar
            //    ToolStripButton circularPoints = new ToolStripButton();
            //    circularPoints.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    circularPoints.Image = ((System.Drawing.Image)(resources.GetObject("gridCircularPointsButton")));
            //    circularPoints.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    circularPoints.Name = "gridCircularPointsButton";
            //    circularPoints.AutoSize = false;
            //    circularPoints.ImageScaling = ToolStripItemImageScaling.None;
            //    circularPoints.Size = new System.Drawing.Size(32, 32);
            //    circularPoints.Text = "Circular grid with points";

            //    sketcherToolstrip.Add(circularPoints);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherCircularGridPoints].AddInvoker(circularPoints, "Click");

            //    // Add the EditGrid Button to the Sketcher toolbar
            //    ToolStripButton editGrid = new ToolStripButton();
            //    editGrid.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    editGrid.Image = ((System.Drawing.Image)(resources.GetObject("gridEditButton")));
            //    editGrid.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    editGrid.Name = "gridEditButton";
            //    editGrid.AutoSize = false;
            //    editGrid.ImageScaling = ToolStripItemImageScaling.None;
            //    editGrid.Size = new System.Drawing.Size(32, 32);
            //    editGrid.Text = "Edit grid";

            //    sketcherToolstrip.Add(editGrid);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherEditGrid].AddInvoker(editGrid, "Click");

            //    // Add the EraseGrid Button to the Sketcher toolbar
            //    ToolStripButton eraseGrid = new ToolStripButton();
            //    eraseGrid.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    eraseGrid.Image = ((System.Drawing.Image)(resources.GetObject("gridEraseButton")));
            //    eraseGrid.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    eraseGrid.Name = "gridEraseButton";
            //    eraseGrid.AutoSize = false;
            //    eraseGrid.ImageScaling = ToolStripItemImageScaling.None;
            //    eraseGrid.Size = new System.Drawing.Size(32, 32);
            //    eraseGrid.Text = "Erase grid";

            //    sketcherToolstrip.Add(eraseGrid);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherEraseGrid].AddInvoker(eraseGrid, "Click");
            //}
        }

        private void DisplaySketcherDrawingToolstrip()
        {
            //ResourceManager resources = new ResourceManager(typeof(SketcherResources));
            //UIExtensionSite sketcherDrawingToolstrip;

            //// If the SketcherToolstrip doesn't exist create it else get it from the UIExtensionSites
            //if (this.WorkItem.UIExtensionSites.Contains(Constants.UIExtensionSiteNames.SketcherDrawingToolstrip))
            //{
            //    sketcherDrawingToolstrip = this.WorkItem.UIExtensionSites[Constants.UIExtensionSiteNames.SketcherDrawingToolstrip];
            //}
            //else
            //{
            //    // Get the Service that allows creating new Toolstrips
            //    IShellExtensionService extensionService = this.WorkItem.Services.Get<IShellExtensionService>();
            //    extensionService.AddToolstrip(this.WorkItem, Constants.UIExtensionSiteNames.SketcherDrawingToolstrip, false);
            //    // Retrieve the newly created toolstrip
            //    sketcherDrawingToolstrip = this.WorkItem.UIExtensionSites[Constants.UIExtensionSiteNames.SketcherDrawingToolstrip];

            //    // Add the draw RectangleShape Button to the Sketcher toolbar
            //    ToolStripButton rectangleShape = new ToolStripButton();
            //    rectangleShape.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    rectangleShape.Image = ((System.Drawing.Image)(resources.GetObject("rectangleShapeButton")));
            //    rectangleShape.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    rectangleShape.Name = "rectangleShapeButton";
            //    rectangleShape.AutoSize = false;
            //    rectangleShape.ImageScaling = ToolStripItemImageScaling.None;
            //    rectangleShape.Size = new System.Drawing.Size(32, 32);
            //    rectangleShape.Text = "Draw rectangle";

            //    sketcherDrawingToolstrip.Add(rectangleShape);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherDrawRectangle].AddInvoker(rectangleShape, "Click");
                
            //    // Add the draw LineShape Button to the Sketcher toolbar
            //    ToolStripButton lineShape = new ToolStripButton();
            //    lineShape.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    lineShape.Image = ((System.Drawing.Image)(resources.GetObject("lineShapeButton")));
            //    lineShape.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    lineShape.Name = "lineShapeButton";
            //    lineShape.AutoSize = false;
            //    lineShape.ImageScaling = ToolStripItemImageScaling.None;
            //    lineShape.Size = new System.Drawing.Size(32, 32);
            //    lineShape.Text = "Draw line";
                
            //    sketcherDrawingToolstrip.Add(lineShape);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherDrawLine].AddInvoker(lineShape, "Click");

            //    // Add the draw CircleShape Button to the Sketcher toolbar
            //    ToolStripButton circleShape = new ToolStripButton();
            //    circleShape.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            //    circleShape.Image = ((System.Drawing.Image)(resources.GetObject("circleShapeButton")));
            //    circleShape.ImageTransparentColor = System.Drawing.Color.Magenta;
            //    circleShape.Name = "circleShapeButton";
            //    circleShape.AutoSize = false;
            //    circleShape.ImageScaling = ToolStripItemImageScaling.None;
            //    circleShape.Size = new System.Drawing.Size(32, 32);
            //    circleShape.Text = "Draw circle";
                
            //    sketcherDrawingToolstrip.Add(circleShape);
            //    this.WorkItem.Commands[Constants.CommandNames.SketcherDrawCircle].AddInvoker(circleShape, "Click");

            //}
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm

            // To create and add a view you can customize the following sentence
            // SampleView view = ShowViewInWorkspace<SampleView>(WorkspaceNames.SampleWorkspace);

        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-350-Registering_Commands.htm
        //		See: ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm
    }
}
