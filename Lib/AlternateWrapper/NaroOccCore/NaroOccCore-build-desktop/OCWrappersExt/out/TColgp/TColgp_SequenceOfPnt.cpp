// File generated by CPPExt (CPP file)
//

#include "TColgp_SequenceOfPnt.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"
#include "TColgp_SequenceNodeOfSequenceOfPnt.h"


using namespace OCNaroWrappers;

OCTColgp_SequenceOfPnt::OCTColgp_SequenceOfPnt(TColgp_SequenceOfPnt* nativeHandle) : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCTColgp_SequenceOfPnt::OCTColgp_SequenceOfPnt() : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  nativeHandle = new TColgp_SequenceOfPnt();
}

OCTColgp_SequenceOfPnt^ OCTColgp_SequenceOfPnt::Assign(OCNaroWrappers::OCTColgp_SequenceOfPnt^ Other)
{
  TColgp_SequenceOfPnt* tmp = new TColgp_SequenceOfPnt();
  *tmp = ((TColgp_SequenceOfPnt*)nativeHandle)->Assign(*((TColgp_SequenceOfPnt*)Other->Handle));
  return gcnew OCTColgp_SequenceOfPnt(tmp);
}

 void OCTColgp_SequenceOfPnt::Append(OCNaroWrappers::OCgp_Pnt^ T)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->Append(*((gp_Pnt*)T->Handle));
}

 void OCTColgp_SequenceOfPnt::Append(OCNaroWrappers::OCTColgp_SequenceOfPnt^ S)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->Append(*((TColgp_SequenceOfPnt*)S->Handle));
}

 void OCTColgp_SequenceOfPnt::Prepend(OCNaroWrappers::OCgp_Pnt^ T)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->Prepend(*((gp_Pnt*)T->Handle));
}

 void OCTColgp_SequenceOfPnt::Prepend(OCNaroWrappers::OCTColgp_SequenceOfPnt^ S)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->Prepend(*((TColgp_SequenceOfPnt*)S->Handle));
}

 void OCTColgp_SequenceOfPnt::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ T)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->InsertBefore(Index, *((gp_Pnt*)T->Handle));
}

 void OCTColgp_SequenceOfPnt::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCTColgp_SequenceOfPnt^ S)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->InsertBefore(Index, *((TColgp_SequenceOfPnt*)S->Handle));
}

 void OCTColgp_SequenceOfPnt::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ T)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->InsertAfter(Index, *((gp_Pnt*)T->Handle));
}

 void OCTColgp_SequenceOfPnt::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCTColgp_SequenceOfPnt^ S)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->InsertAfter(Index, *((TColgp_SequenceOfPnt*)S->Handle));
}

OCgp_Pnt^ OCTColgp_SequenceOfPnt::First()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((TColgp_SequenceOfPnt*)nativeHandle)->First();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCTColgp_SequenceOfPnt::Last()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((TColgp_SequenceOfPnt*)nativeHandle)->Last();
  return gcnew OCgp_Pnt(tmp);
}

 void OCTColgp_SequenceOfPnt::Split(Standard_Integer Index, OCNaroWrappers::OCTColgp_SequenceOfPnt^ Sub)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->Split(Index, *((TColgp_SequenceOfPnt*)Sub->Handle));
}

OCgp_Pnt^ OCTColgp_SequenceOfPnt::Value(Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((TColgp_SequenceOfPnt*)nativeHandle)->Value(Index);
  return gcnew OCgp_Pnt(tmp);
}

 void OCTColgp_SequenceOfPnt::SetValue(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ I)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->SetValue(Index, *((gp_Pnt*)I->Handle));
}

OCgp_Pnt^ OCTColgp_SequenceOfPnt::ChangeValue(Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((TColgp_SequenceOfPnt*)nativeHandle)->ChangeValue(Index);
  return gcnew OCgp_Pnt(tmp);
}

 void OCTColgp_SequenceOfPnt::Remove(Standard_Integer Index)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->Remove(Index);
}

 void OCTColgp_SequenceOfPnt::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  ((TColgp_SequenceOfPnt*)nativeHandle)->Remove(FromIndex, ToIndex);
}


