// File generated by CPPExt (CPP file)
//

#include "TColgp_SequenceOfXYZ.h"
#include "../Converter.h"
#include "../gp/gp_XYZ.h"
#include "TColgp_SequenceNodeOfSequenceOfXYZ.h"


using namespace OCNaroWrappers;

OCTColgp_SequenceOfXYZ::OCTColgp_SequenceOfXYZ(TColgp_SequenceOfXYZ* nativeHandle) : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCTColgp_SequenceOfXYZ::OCTColgp_SequenceOfXYZ() : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  nativeHandle = new TColgp_SequenceOfXYZ();
}

OCTColgp_SequenceOfXYZ^ OCTColgp_SequenceOfXYZ::Assign(OCNaroWrappers::OCTColgp_SequenceOfXYZ^ Other)
{
  TColgp_SequenceOfXYZ* tmp = new TColgp_SequenceOfXYZ();
  *tmp = ((TColgp_SequenceOfXYZ*)nativeHandle)->Assign(*((TColgp_SequenceOfXYZ*)Other->Handle));
  return gcnew OCTColgp_SequenceOfXYZ(tmp);
}

 void OCTColgp_SequenceOfXYZ::Append(OCNaroWrappers::OCgp_XYZ^ T)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->Append(*((gp_XYZ*)T->Handle));
}

 void OCTColgp_SequenceOfXYZ::Append(OCNaroWrappers::OCTColgp_SequenceOfXYZ^ S)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->Append(*((TColgp_SequenceOfXYZ*)S->Handle));
}

 void OCTColgp_SequenceOfXYZ::Prepend(OCNaroWrappers::OCgp_XYZ^ T)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->Prepend(*((gp_XYZ*)T->Handle));
}

 void OCTColgp_SequenceOfXYZ::Prepend(OCNaroWrappers::OCTColgp_SequenceOfXYZ^ S)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->Prepend(*((TColgp_SequenceOfXYZ*)S->Handle));
}

 void OCTColgp_SequenceOfXYZ::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCgp_XYZ^ T)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->InsertBefore(Index, *((gp_XYZ*)T->Handle));
}

 void OCTColgp_SequenceOfXYZ::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCTColgp_SequenceOfXYZ^ S)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->InsertBefore(Index, *((TColgp_SequenceOfXYZ*)S->Handle));
}

 void OCTColgp_SequenceOfXYZ::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCgp_XYZ^ T)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->InsertAfter(Index, *((gp_XYZ*)T->Handle));
}

 void OCTColgp_SequenceOfXYZ::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCTColgp_SequenceOfXYZ^ S)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->InsertAfter(Index, *((TColgp_SequenceOfXYZ*)S->Handle));
}

OCgp_XYZ^ OCTColgp_SequenceOfXYZ::First()
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((TColgp_SequenceOfXYZ*)nativeHandle)->First();
  return gcnew OCgp_XYZ(tmp);
}

OCgp_XYZ^ OCTColgp_SequenceOfXYZ::Last()
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((TColgp_SequenceOfXYZ*)nativeHandle)->Last();
  return gcnew OCgp_XYZ(tmp);
}

 void OCTColgp_SequenceOfXYZ::Split(Standard_Integer Index, OCNaroWrappers::OCTColgp_SequenceOfXYZ^ Sub)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->Split(Index, *((TColgp_SequenceOfXYZ*)Sub->Handle));
}

OCgp_XYZ^ OCTColgp_SequenceOfXYZ::Value(Standard_Integer Index)
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((TColgp_SequenceOfXYZ*)nativeHandle)->Value(Index);
  return gcnew OCgp_XYZ(tmp);
}

 void OCTColgp_SequenceOfXYZ::SetValue(Standard_Integer Index, OCNaroWrappers::OCgp_XYZ^ I)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->SetValue(Index, *((gp_XYZ*)I->Handle));
}

OCgp_XYZ^ OCTColgp_SequenceOfXYZ::ChangeValue(Standard_Integer Index)
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((TColgp_SequenceOfXYZ*)nativeHandle)->ChangeValue(Index);
  return gcnew OCgp_XYZ(tmp);
}

 void OCTColgp_SequenceOfXYZ::Remove(Standard_Integer Index)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->Remove(Index);
}

 void OCTColgp_SequenceOfXYZ::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  ((TColgp_SequenceOfXYZ*)nativeHandle)->Remove(FromIndex, ToIndex);
}


