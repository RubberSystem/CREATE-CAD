// File generated by CPPExt (Transient)
//
#ifndef _TDataStd_Variable_OCWrappers_HeaderFile
#define _TDataStd_Variable_OCWrappers_HeaderFile

// include the wrapped class
#include <TDataStd_Variable.hxx>
#include "../Converter.h"

#include "../TDF/TDF_Attribute.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "TDataStd_RealEnum.h"


namespace OCNaroWrappers
{

ref class OCStandard_GUID;
ref class OCTDF_Label;
ref class OCTCollection_ExtendedString;
ref class OCTDataStd_Real;
ref class OCTDataStd_Expression;
ref class OCTCollection_AsciiString;
ref class OCTDF_Attribute;
ref class OCTDF_RelocationTable;
ref class OCTDF_DataSet;


//! Variable attribute. <br>
//!          ================== <br>
//! <br>
//!           * A variable is  associated to a TDataStd_Real (which <br>
//!          contains its    current  value) and  a   TDataStd_Name <br>
//!          attribute (which  contains  its name).  It  contains a <br>
//!          constant flag, and a Unit <br>
//! <br>
//!          * An  expression may  be assigned  to a variable.   In <br>
//!          thatcase the expression  is handled by the  associated <br>
//!          Expression Attribute  and the Variable returns True to <br>
//!          the method <IsAssigned>. <br>
public ref class OCTDataStd_Variable : OCTDF_Attribute {

protected:
  // dummy constructor;
  OCTDataStd_Variable(OCDummy^) : OCTDF_Attribute((OCDummy^)nullptr) {};

public:

// constructor from native
OCTDataStd_Variable(Handle(TDataStd_Variable)* nativeHandle);

// Methods PUBLIC

//! class methods <br>
//!          ============= <br>
static /*instead*/  OCStandard_GUID^ GetID() ;

//! Find, or create, a  Variable attribute. <br>//! Real methods <br>
//!          ============ <br>
static /*instead*/  OCTDataStd_Variable^ Set(OCNaroWrappers::OCTDF_Label^ label) ;


OCTDataStd_Variable();

//!  set or change the name  of the variable, in myUnknown <br>
//!           and my associated Name attribute. <br>
 /*instead*/  void Name(OCNaroWrappers::OCTCollection_ExtendedString^ string) ;

//! returns    string   stored  in   the  associated  Name <br>
//!          attribute. <br>
 /*instead*/  OCTCollection_ExtendedString^ Name() ;

//! retrieve or create  the associated real attribute  and <br>
//!          set the  value  <value>.   if creation, dimension   is <br>
//!          written. <br>
 /*instead*/  void Set(Standard_Real value, OCTDataStd_RealEnum dimension) ;

//! returns True if a Real attribute is associated. <br>
 /*instead*/  System::Boolean IsValued() ;

//! returns value stored in associated Real attribute. <br>
 /*instead*/  Standard_Real Get() ;

//! returns associated Real attribute. <br>
 /*instead*/  OCTDataStd_Real^ Real() ;

//! returns True if an Expression attribute is associated. <br>//! create(if doesn't exist), set and returns the assigned <br>
//!          expression attribute. <br>
 /*instead*/  System::Boolean IsAssigned() ;

//! create(if  doesn't exist)  and  returns  the  assigned <br>
//!           expression  attribute. fill it after. <br>
 /*instead*/  OCTDataStd_Expression^ Assign() ;

//! if <me> is  assigned delete the associated  expression <br>
//!          attribute. <br>
 /*instead*/  void Desassign() ;

//! if <me>  is  assigned, returns  associated  Expression <br>
//!          attribute. <br>
 /*instead*/  OCTDataStd_Expression^ Expression() ;

//! shortcut for <Real()->IsCaptured()> <br>
 /*instead*/  System::Boolean IsCaptured() ;

//! A constant value is not modified by regeneration. <br>
 /*instead*/  System::Boolean IsConstant() ;


 /*instead*/  void Unit(OCNaroWrappers::OCTCollection_AsciiString^ unit) ;

//! to read/write fields <br>
//!          =================== <br>
 /*instead*/  OCTCollection_AsciiString^ Unit() ;

//!  if  <status> is   True, this  variable  will not   be <br>
//!          modified by the solver. <br>
 /*instead*/  void Constant(System::Boolean status) ;


 /*instead*/  OCStandard_GUID^ ID() ;


 /*instead*/  void Restore(OCNaroWrappers::OCTDF_Attribute^ With) ;


 /*instead*/  OCTDF_Attribute^ NewEmpty() ;


 /*instead*/  void Paste(OCNaroWrappers::OCTDF_Attribute^ Into, OCNaroWrappers::OCTDF_RelocationTable^ RT) ;

//! to export reference to the associated Name attribute. <br>
virtual /*instead*/  void References(OCNaroWrappers::OCTDF_DataSet^ DS) override;


virtual /*instead*/  Standard_OStream& Dump(Standard_OStream& anOS) override;

~OCTDataStd_Variable()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
