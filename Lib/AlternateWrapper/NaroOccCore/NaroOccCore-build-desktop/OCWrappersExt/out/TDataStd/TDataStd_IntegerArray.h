// File generated by CPPExt (Transient)
//
#ifndef _TDataStd_IntegerArray_OCWrappers_HeaderFile
#define _TDataStd_IntegerArray_OCWrappers_HeaderFile

// include the wrapped class
#include <TDataStd_IntegerArray.hxx>
#include "../Converter.h"

#include "../TDF/TDF_Attribute.h"



namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfInteger;
ref class OCTDataStd_DeltaOnModificationOfIntArray;
ref class OCStandard_GUID;
ref class OCTDF_Label;
ref class OCTDF_Attribute;
ref class OCTDF_RelocationTable;
ref class OCTDF_DeltaOnModification;


//! Contains an array of integers. <br>
public ref class OCTDataStd_IntegerArray : OCTDF_Attribute {

protected:
  // dummy constructor;
  OCTDataStd_IntegerArray(OCDummy^) : OCTDF_Attribute((OCDummy^)nullptr) {};

public:

// constructor from native
OCTDataStd_IntegerArray(Handle(TDataStd_IntegerArray)* nativeHandle);

// Methods PUBLIC

//! class methods <br>
//!          ============= <br>//! Returns the GUID for arrays of integers. <br>
static /*instead*/  OCStandard_GUID^ GetID() ;

//! Finds or creates on the <label> an integer array attribute <br>
//! with the specified <lower> and <upper> boundaries. <br>
//! If <isDelta> == False, DefaultDeltaOnModification is used. <br>
//! If attribute is already set, all input parameters are refused and the found <br>
//! attribute is returned. <br>
static /*instead*/  OCTDataStd_IntegerArray^ Set(OCNaroWrappers::OCTDF_Label^ label, Standard_Integer lower, Standard_Integer upper, System::Boolean isDelta) ;

//! Initialize the inner array with bounds from <lower> to <upper> <br>
 /*instead*/  void Init(Standard_Integer lower, Standard_Integer upper) ;

//! Sets  the   <Index>th  element  of   the  array to <Value> <br>
 /*instead*/  void SetValue(Standard_Integer Index, Standard_Integer Value) ;

//! Return the value of  the  <Index>th element of the array <br>
 /*instead*/  Standard_Integer Value(Standard_Integer Index) ;

//!  Returns the lower boundary of this array of integers. <br>
 /*instead*/  Standard_Integer Lower() ;

//! Return the upper boundary of this array of integers. <br>
 /*instead*/  Standard_Integer Upper() ;

//! Returns the length of this array of integers in <br>
//!          terms of the number of elements it contains. <br>
 /*instead*/  Standard_Integer Length() ;

//! Sets the inner array <myValue>  of the IntegerArray attribute to <br>
//! <newArray>. If value of <newArray> differs from <myValue>, Backup performed <br>
//! and myValue refers to new instance of HArray1OfInteger that holds <newArray> <br>
//! values <br>
//! If <isCheckItems> equal True each item of <newArray> will be checked with each <br>
//! item of <myValue> for coincidence (to avoid backup). <br>
 /*instead*/  void ChangeArray(OCNaroWrappers::OCTColStd_HArray1OfInteger^ newArray, System::Boolean isCheckItems) ;

//! Return the inner array of the IntegerArray attribute <br>
 /*instead*/  OCTColStd_HArray1OfInteger^ Array() ;


 /*instead*/  System::Boolean GetDelta() ;

//! for  internal  use  only! <br>
 /*instead*/  void SetDelta(System::Boolean isDelta) ;


OCTDataStd_IntegerArray();


 /*instead*/  OCStandard_GUID^ ID() ;


 /*instead*/  void Restore(OCNaroWrappers::OCTDF_Attribute^ With) ;


 /*instead*/  OCTDF_Attribute^ NewEmpty() ;

//! Note. Uses inside ChangeArray() method <br>
 /*instead*/  void Paste(OCNaroWrappers::OCTDF_Attribute^ Into, OCNaroWrappers::OCTDF_RelocationTable^ RT) ;


virtual /*instead*/  Standard_OStream& Dump(Standard_OStream& anOS) override;

//! Makes a DeltaOnModification between <me> and <br>
//!         <anOldAttribute>. <br>
virtual /*instead*/  OCTDF_DeltaOnModification^ DeltaOnModification(OCNaroWrappers::OCTDF_Attribute^ anOldAttribute) override;

~OCTDataStd_IntegerArray()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
