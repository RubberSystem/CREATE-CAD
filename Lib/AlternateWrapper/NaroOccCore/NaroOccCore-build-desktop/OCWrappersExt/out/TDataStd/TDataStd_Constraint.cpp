// File generated by CPPExt (CPP file)
//

#include "TDataStd_Constraint.h"
#include "../Converter.h"
#include "TDataStd_Real.h"
#include "../TDF/TDF_Attribute.h"
#include "../Standard/Standard_GUID.h"
#include "../TDF/TDF_Label.h"
#include "../TNaming/TNaming_NamedShape.h"
#include "../TDF/TDF_LabelList.h"
#include "../TDF/TDF_RelocationTable.h"
#include "../TDF/TDF_DataSet.h"


using namespace OCNaroWrappers;

OCTDataStd_Constraint::OCTDataStd_Constraint(Handle(TDataStd_Constraint)* nativeHandle) : OCTDF_Attribute((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TDataStd_Constraint(*nativeHandle);
}

OCStandard_GUID^ OCTDataStd_Constraint::GetID()
{
  Standard_GUID* tmp = new Standard_GUID();
  *tmp = TDataStd_Constraint::GetID();
  return gcnew OCStandard_GUID(tmp);
}

OCTDataStd_Constraint^ OCTDataStd_Constraint::Set(OCNaroWrappers::OCTDF_Label^ label)
{
  Handle(TDataStd_Constraint) tmp = TDataStd_Constraint::Set(*((TDF_Label*)label->Handle));
  return gcnew OCTDataStd_Constraint(&tmp);
}

OCTDataStd_Constraint::OCTDataStd_Constraint() : OCTDF_Attribute((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TDataStd_Constraint(new TDataStd_Constraint());
}

 void OCTDataStd_Constraint::Set(OCTDataStd_ConstraintEnum type, OCNaroWrappers::OCTNaming_NamedShape^ G1)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Set((TDataStd_ConstraintEnum)type, *((Handle_TNaming_NamedShape*)G1->Handle));
}

 void OCTDataStd_Constraint::Set(OCTDataStd_ConstraintEnum type, OCNaroWrappers::OCTNaming_NamedShape^ G1, OCNaroWrappers::OCTNaming_NamedShape^ G2)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Set((TDataStd_ConstraintEnum)type, *((Handle_TNaming_NamedShape*)G1->Handle), *((Handle_TNaming_NamedShape*)G2->Handle));
}

 void OCTDataStd_Constraint::Set(OCTDataStd_ConstraintEnum type, OCNaroWrappers::OCTNaming_NamedShape^ G1, OCNaroWrappers::OCTNaming_NamedShape^ G2, OCNaroWrappers::OCTNaming_NamedShape^ G3)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Set((TDataStd_ConstraintEnum)type, *((Handle_TNaming_NamedShape*)G1->Handle), *((Handle_TNaming_NamedShape*)G2->Handle), *((Handle_TNaming_NamedShape*)G3->Handle));
}

 void OCTDataStd_Constraint::Set(OCTDataStd_ConstraintEnum type, OCNaroWrappers::OCTNaming_NamedShape^ G1, OCNaroWrappers::OCTNaming_NamedShape^ G2, OCNaroWrappers::OCTNaming_NamedShape^ G3, OCNaroWrappers::OCTNaming_NamedShape^ G4)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Set((TDataStd_ConstraintEnum)type, *((Handle_TNaming_NamedShape*)G1->Handle), *((Handle_TNaming_NamedShape*)G2->Handle), *((Handle_TNaming_NamedShape*)G3->Handle), *((Handle_TNaming_NamedShape*)G4->Handle));
}

 System::Boolean OCTDataStd_Constraint::Verified()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_Constraint*)nativeHandle))->Verified());
}

 OCTDataStd_ConstraintEnum OCTDataStd_Constraint::GetType()
{
  return (OCTDataStd_ConstraintEnum)((*((Handle_TDataStd_Constraint*)nativeHandle))->GetType());
}

 System::Boolean OCTDataStd_Constraint::IsPlanar()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_Constraint*)nativeHandle))->IsPlanar());
}

OCTNaming_NamedShape^ OCTDataStd_Constraint::GetPlane()
{
  Handle(TNaming_NamedShape) tmp = (*((Handle_TDataStd_Constraint*)nativeHandle))->GetPlane();
  return gcnew OCTNaming_NamedShape(&tmp);
}

 System::Boolean OCTDataStd_Constraint::IsDimension()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_Constraint*)nativeHandle))->IsDimension());
}

OCTDataStd_Real^ OCTDataStd_Constraint::GetValue()
{
  Handle(TDataStd_Real) tmp = (*((Handle_TDataStd_Constraint*)nativeHandle))->GetValue();
  return gcnew OCTDataStd_Real(&tmp);
}

 Standard_Integer OCTDataStd_Constraint::NbGeometries()
{
  return (*((Handle_TDataStd_Constraint*)nativeHandle))->NbGeometries();
}

OCTNaming_NamedShape^ OCTDataStd_Constraint::GetGeometry(Standard_Integer Index)
{
  Handle(TNaming_NamedShape) tmp = (*((Handle_TDataStd_Constraint*)nativeHandle))->GetGeometry(Index);
  return gcnew OCTNaming_NamedShape(&tmp);
}

 void OCTDataStd_Constraint::ClearGeometries()
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->ClearGeometries();
}

 void OCTDataStd_Constraint::SetType(OCTDataStd_ConstraintEnum CTR)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->SetType((TDataStd_ConstraintEnum)CTR);
}

 void OCTDataStd_Constraint::SetPlane(OCNaroWrappers::OCTNaming_NamedShape^ plane)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->SetPlane(*((Handle_TNaming_NamedShape*)plane->Handle));
}

 void OCTDataStd_Constraint::SetValue(OCNaroWrappers::OCTDataStd_Real^ V)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->SetValue(*((Handle_TDataStd_Real*)V->Handle));
}

 void OCTDataStd_Constraint::SetGeometry(Standard_Integer Index, OCNaroWrappers::OCTNaming_NamedShape^ G)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->SetGeometry(Index, *((Handle_TNaming_NamedShape*)G->Handle));
}

 void OCTDataStd_Constraint::Verified(System::Boolean status)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Verified(OCConverter::BooleanToStandardBoolean(status));
}

 void OCTDataStd_Constraint::Inverted(System::Boolean status)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Inverted(OCConverter::BooleanToStandardBoolean(status));
}

 System::Boolean OCTDataStd_Constraint::Inverted()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_Constraint*)nativeHandle))->Inverted());
}

 void OCTDataStd_Constraint::Reversed(System::Boolean status)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Reversed(OCConverter::BooleanToStandardBoolean(status));
}

 System::Boolean OCTDataStd_Constraint::Reversed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_Constraint*)nativeHandle))->Reversed());
}

 void OCTDataStd_Constraint::CollectChildConstraints(OCNaroWrappers::OCTDF_Label^ aLabel, OCNaroWrappers::OCTDF_LabelList^ TheList)
{
  TDataStd_Constraint::CollectChildConstraints(*((TDF_Label*)aLabel->Handle), *((TDF_LabelList*)TheList->Handle));
}

OCStandard_GUID^ OCTDataStd_Constraint::ID()
{
  Standard_GUID* tmp = new Standard_GUID();
  *tmp = (*((Handle_TDataStd_Constraint*)nativeHandle))->ID();
  return gcnew OCStandard_GUID(tmp);
}

 void OCTDataStd_Constraint::Restore(OCNaroWrappers::OCTDF_Attribute^ With)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Restore(*((Handle_TDF_Attribute*)With->Handle));
}

OCTDF_Attribute^ OCTDataStd_Constraint::NewEmpty()
{
  Handle(TDF_Attribute) tmp = (*((Handle_TDataStd_Constraint*)nativeHandle))->NewEmpty();
  return gcnew OCTDF_Attribute(&tmp);
}

 void OCTDataStd_Constraint::Paste(OCNaroWrappers::OCTDF_Attribute^ Into, OCNaroWrappers::OCTDF_RelocationTable^ RT)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->Paste(*((Handle_TDF_Attribute*)Into->Handle), *((Handle_TDF_RelocationTable*)RT->Handle));
}

 Standard_OStream& OCTDataStd_Constraint::Dump(Standard_OStream& anOS)
{
  return (*((Handle_TDataStd_Constraint*)nativeHandle))->Dump(anOS);
}

 void OCTDataStd_Constraint::References(OCNaroWrappers::OCTDF_DataSet^ DS)
{
  (*((Handle_TDataStd_Constraint*)nativeHandle))->References(*((Handle_TDF_DataSet*)DS->Handle));
}


