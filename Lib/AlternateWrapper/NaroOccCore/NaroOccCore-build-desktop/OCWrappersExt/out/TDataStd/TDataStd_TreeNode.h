// File generated by CPPExt (Transient)
//
#ifndef _TDataStd_TreeNode_OCWrappers_HeaderFile
#define _TDataStd_TreeNode_OCWrappers_HeaderFile

// include the wrapped class
#include <TDataStd_TreeNode.hxx>
#include "../Converter.h"

#include "../TDF/TDF_Attribute.h"

#include "../Standard/Standard_GUID.h"


namespace OCNaroWrappers
{

ref class OCTDataStd_ChildNodeIterator;
ref class OCTDF_Label;
ref class OCStandard_GUID;
ref class OCTDF_AttributeDelta;
ref class OCTDF_Attribute;
ref class OCTDF_RelocationTable;
ref class OCTDF_DataSet;


//! Allows you to define an explicit tree of labels <br>
//! which you can also edit. <br>
//! Without this class, the data structure cannot be fully edited. <br>
//! This service is required if for presentation <br>
//! purposes, you want to create an application with <br>
//! a tree which allows you to organize and link data <br>
//! as a function of application features. <br>
public ref class OCTDataStd_TreeNode : OCTDF_Attribute {

protected:
  // dummy constructor;
  OCTDataStd_TreeNode(OCDummy^) : OCTDF_Attribute((OCDummy^)nullptr) {};

public:

// constructor from native
OCTDataStd_TreeNode(Handle(TDataStd_TreeNode)* nativeHandle);

// Methods PUBLIC

//! class  methods working on the node <br>
//!          =================================== <br>//!  Returns true if the tree node T is found on the label L. <br>
//!           Otherwise, false is returned. <br>
static /*instead*/  System::Boolean Find(OCNaroWrappers::OCTDF_Label^ L, OCNaroWrappers::OCTDataStd_TreeNode^ T) ;

//! Finds or Creates a TreeNode attribute on the label <L> <br>
//!           with  the  default tree  ID,   returned by the method <br>
//!          <GetDefaultTreeID>.  Returns the created/found     TreeNode <br>
//!          attribute. <br>
static /*instead*/  OCTDataStd_TreeNode^ Set(OCNaroWrappers::OCTDF_Label^ L) ;

//! Finds  or Creates a   TreeNode attribute on  the label <br>
//!          <L>, with an   explicit tree ID.  <ExplicitTreeID>  is <br>
//!          the  ID   returned by    <TDF_Attribute::ID>   method. <br>
//!          Returns the found/created TreeNode attribute. <br>
static /*instead*/  OCTDataStd_TreeNode^ Set(OCNaroWrappers::OCTDF_Label^ L, OCNaroWrappers::OCStandard_GUID^ ExplicitTreeID) ;

//!  returns a default  tree ID.  this  ID is  used by the <br>
//!          <Set> method without explicit tree ID. <br>//! Instance methods: <br>
//!          ================ <br>
static /*instead*/  OCStandard_GUID^ GetDefaultTreeID() ;


OCTDataStd_TreeNode();

//! Insert the TreeNode <Child> as last  child of <me>. If <br>
//!         the insertion is successful <me> becomes the Father of <Child>. <br>
 /*instead*/  System::Boolean Append(OCNaroWrappers::OCTDataStd_TreeNode^ Child) ;

//!  Insert the   the TreeNode <Child>  as  first child of <br>
//!          <me>. If the insertion is successful <me> becomes the Father of <Child> <br>
 /*instead*/  System::Boolean Prepend(OCNaroWrappers::OCTDataStd_TreeNode^ Child) ;

//! Inserts the TreeNode  <Node> before <me>. If insertion is successful <me> <br>
//!          and <Node> belongs to the same Father. <br>
 /*instead*/  System::Boolean InsertBefore(OCNaroWrappers::OCTDataStd_TreeNode^ Node) ;

//! Inserts the TreeNode <Node>  after <me>. If insertion is successful  <me> <br>
//!          and <Node> belongs to the same Father. <br>
 /*instead*/  System::Boolean InsertAfter(OCNaroWrappers::OCTDataStd_TreeNode^ Node) ;

//! Removes this tree node attribute from its father <br>
//!          node. The result is that this attribute becomes a root node. <br>
 /*instead*/  System::Boolean Remove() ;

//!  Returns the depth of this tree node in the overall tree node structure. <br>
//!           In other words, the number of father tree nodes of this one is returned. <br>
 /*instead*/  Standard_Integer Depth() ;

//!  Returns the number of child nodes. <br>
//!           If <allLevels> is true, the method counts children of all levels <br>
//!           (children of children ...) <br>
 /*instead*/  Standard_Integer NbChildren(System::Boolean allLevels) ;

//! Returns true if this tree node attribute is an <br>
//!          ascendant of of. In other words, if it is a father or <br>
//!          the father of a father of of. <br>
 /*instead*/  System::Boolean IsAscendant(OCNaroWrappers::OCTDataStd_TreeNode^ of) ;

//! Returns true if this tree node attribute is a <br>
//!          descendant of of. In other words, if it is a child or <br>
//!          the child of a child of of. <br>
 /*instead*/  System::Boolean IsDescendant(OCNaroWrappers::OCTDataStd_TreeNode^ of) ;

//! Returns true if this tree node attribute is the <br>
//!          ultimate father in the tree. <br>
 /*instead*/  System::Boolean IsRoot() ;

//! Returns the ultimate father of this tree node attribute. <br>
 /*instead*/  OCTDataStd_TreeNode^ Root() ;

//! Returns true if this tree node attribute is a father of of. <br>
 /*instead*/  System::Boolean IsFather(OCNaroWrappers::OCTDataStd_TreeNode^ of) ;

//! Returns true if this tree node attribute is a child of of. <br>
 /*instead*/  System::Boolean IsChild(OCNaroWrappers::OCTDataStd_TreeNode^ of) ;

//! Returns true if this tree node attribute has a father tree node. <br>
 /*instead*/  System::Boolean HasFather() ;

//! Returns the father TreeNode of <me>. Null if root. <br>
 /*instead*/  OCTDataStd_TreeNode^ Father() ;

//! Returns true if this tree node attribute has a next tree node. <br>
 /*instead*/  System::Boolean HasNext() ;

//!  Returns the next tree node in this tree node attribute. <br>
//!           Warning <br>
//!           This tree node is null if it is the last one in this <br>
//!           tree node attribute.Returns the next TreeNode of <me>. Null if last. <br>
 /*instead*/  OCTDataStd_TreeNode^ Next() ;

//! Returns true if this tree node attribute has a previous tree node. <br>
 /*instead*/  System::Boolean HasPrevious() ;

//! Returns the previous tree node of this tree node attribute. <br>
//!          Warning <br>
//!          This tree node is null if it is the first one in this tree node attribute. <br>
 /*instead*/  OCTDataStd_TreeNode^ Previous() ;

//! Returns true if this tree node attribute has a first child tree node. <br>
 /*instead*/  System::Boolean HasFirst() ;

//! Returns the first child tree node in this tree node object. <br>
 /*instead*/  OCTDataStd_TreeNode^ First() ;

//! Returns true if this tree node attribute has a last child tree node. <br>
 /*instead*/  System::Boolean HasLast() ;

//! Returns the last child tree node in this tree node object. <br>
 /*instead*/  OCTDataStd_TreeNode^ Last() ;

//! Returns the last child tree node in this tree node object. <br>//! to set fields <br>
//!          ============= <br>
 /*instead*/  OCTDataStd_TreeNode^ FindLast() ;


 /*instead*/  void SetTreeID(OCNaroWrappers::OCStandard_GUID^ explicitID) ;


 /*instead*/  void SetFather(OCNaroWrappers::OCTDataStd_TreeNode^ F) ;


 /*instead*/  void SetNext(OCNaroWrappers::OCTDataStd_TreeNode^ F) ;


 /*instead*/  void SetPrevious(OCNaroWrappers::OCTDataStd_TreeNode^ F) ;


 /*instead*/  void SetFirst(OCNaroWrappers::OCTDataStd_TreeNode^ F) ;

//! TreeNode callback: <br>
//!          ================== <br>
 /*instead*/  void SetLast(OCNaroWrappers::OCTDataStd_TreeNode^ F) ;

//! Connect the TreeNode to its father child list <br>
virtual /*instead*/  void AfterAddition() override;

//! Disconnect the TreeNode from its Father child list <br>
virtual /*instead*/  void BeforeForget() override;

//! Reconnect the TreeNode to its father child list. <br>
virtual /*instead*/  void AfterResume() override;

//! Disconnect the TreeNode, if necessary. <br>
virtual /*instead*/  System::Boolean BeforeUndo(OCNaroWrappers::OCTDF_AttributeDelta^ anAttDelta, System::Boolean forceIt) override;

//! Reconnect the TreeNode, if necessary. <br>//! Implementation of Attribute methods: <br>
//!          =================================== <br>
virtual /*instead*/  System::Boolean AfterUndo(OCNaroWrappers::OCTDF_AttributeDelta^ anAttDelta, System::Boolean forceIt) override;

//! Returns the tree ID (default or explicit one depending <br>
//!          onthe Set method used). <br>
 /*instead*/  OCStandard_GUID^ ID() ;


virtual /*instead*/  void Restore(OCNaroWrappers::OCTDF_Attribute^ with) ;


virtual /*instead*/  void Paste(OCNaroWrappers::OCTDF_Attribute^ into, OCNaroWrappers::OCTDF_RelocationTable^ RT) ;


virtual /*instead*/  OCTDF_Attribute^ NewEmpty() ;


virtual /*instead*/  void References(OCNaroWrappers::OCTDF_DataSet^ aDataSet) override;


virtual /*instead*/  Standard_OStream& Dump(Standard_OStream& anOS) override;

~OCTDataStd_TreeNode()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
