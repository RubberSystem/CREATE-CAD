// File generated by CPPExt (Transient)
//
#ifndef _TDataStd_Point_OCWrappers_HeaderFile
#define _TDataStd_Point_OCWrappers_HeaderFile

// include the wrapped class
#include <TDataStd_Point.hxx>
#include "../Converter.h"

#include "../TDF/TDF_Attribute.h"



namespace OCNaroWrappers
{

ref class OCStandard_GUID;
ref class OCTDF_Label;
ref class OCgp_Pnt;
ref class OCTDF_Attribute;
ref class OCTDF_RelocationTable;



//! The basis to define a point attribute. <br>
//! The topological attribute must contain a vertex. <br>
//! You use this class to create reference points in a design. <br>
//! <br>
//!  Warning:  Use TDataStd_Geometry  attribute  to retrieve the <br>
//!          gp_Pnt of the Point attribute <br>
public ref class OCTDataStd_Point : OCTDF_Attribute {

protected:
  // dummy constructor;
  OCTDataStd_Point(OCDummy^) : OCTDF_Attribute((OCDummy^)nullptr) {};

public:

// constructor from native
OCTDataStd_Point(Handle(TDataStd_Point)* nativeHandle);

// Methods PUBLIC

//! class methods <br>
//!          ============= <br>
//! Returns the GUID for point attributes. <br>
static /*instead*/  OCStandard_GUID^ GetID() ;


//! Sets the label Label as a point attribute. <br>
//! If no object is found, a point attribute is created. <br>
static /*instead*/  OCTDataStd_Point^ Set(OCNaroWrappers::OCTDF_Label^ label) ;


//! Sets the label Label as a point attribute containing the point P. <br>
//! If no object is found, a point attribute is created. <br>//! Point methods <br>
//!          ============= <br>
static /*instead*/  OCTDataStd_Point^ Set(OCNaroWrappers::OCTDF_Label^ label, OCNaroWrappers::OCgp_Pnt^ P) ;


OCTDataStd_Point();


 /*instead*/  OCStandard_GUID^ ID() ;


 /*instead*/  void Restore(OCNaroWrappers::OCTDF_Attribute^ With) ;


 /*instead*/  OCTDF_Attribute^ NewEmpty() ;


 /*instead*/  void Paste(OCNaroWrappers::OCTDF_Attribute^ Into, OCNaroWrappers::OCTDF_RelocationTable^ RT) ;


virtual /*instead*/  Standard_OStream& Dump(Standard_OStream& anOS) override;

~OCTDataStd_Point()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
