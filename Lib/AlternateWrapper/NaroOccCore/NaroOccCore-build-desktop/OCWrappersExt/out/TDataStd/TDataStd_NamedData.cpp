// File generated by CPPExt (CPP file)
//

#include "TDataStd_NamedData.h"
#include "../Converter.h"
#include "TDataStd_HDataMapOfStringInteger.h"
#include "TDataStd_HDataMapOfStringReal.h"
#include "TDataStd_HDataMapOfStringString.h"
#include "TDataStd_HDataMapOfStringByte.h"
#include "TDataStd_HDataMapOfStringHArray1OfInteger.h"
#include "TDataStd_HDataMapOfStringHArray1OfReal.h"
#include "../Standard/Standard_GUID.h"
#include "../TDF/TDF_Label.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../TColStd/TColStd_DataMapOfStringInteger.h"
#include "TDataStd_DataMapOfStringReal.h"
#include "TDataStd_DataMapOfStringString.h"
#include "TDataStd_DataMapOfStringByte.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "TDataStd_DataMapOfStringHArray1OfInteger.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "TDataStd_DataMapOfStringHArray1OfReal.h"
#include "../TDF/TDF_Attribute.h"
#include "../TDF/TDF_RelocationTable.h"


using namespace OCNaroWrappers;

OCTDataStd_NamedData::OCTDataStd_NamedData(Handle(TDataStd_NamedData)* nativeHandle) : OCTDF_Attribute((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TDataStd_NamedData(*nativeHandle);
}

OCStandard_GUID^ OCTDataStd_NamedData::GetID()
{
  Standard_GUID* tmp = new Standard_GUID();
  *tmp = TDataStd_NamedData::GetID();
  return gcnew OCStandard_GUID(tmp);
}

OCTDataStd_NamedData^ OCTDataStd_NamedData::Set(OCNaroWrappers::OCTDF_Label^ label)
{
  Handle(TDataStd_NamedData) tmp = TDataStd_NamedData::Set(*((TDF_Label*)label->Handle));
  return gcnew OCTDataStd_NamedData(&tmp);
}

OCTDataStd_NamedData::OCTDataStd_NamedData() : OCTDF_Attribute((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TDataStd_NamedData(new TDataStd_NamedData());
}

 System::Boolean OCTDataStd_NamedData::HasIntegers()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasIntegers());
}

 System::Boolean OCTDataStd_NamedData::HasInteger(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasInteger(*((TCollection_ExtendedString*)theName->Handle)));
}

 Standard_Integer OCTDataStd_NamedData::GetInteger(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return (*((Handle_TDataStd_NamedData*)nativeHandle))->GetInteger(*((TCollection_ExtendedString*)theName->Handle));
}

 void OCTDataStd_NamedData::SetInteger(OCNaroWrappers::OCTCollection_ExtendedString^ theName, Standard_Integer theInteger)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->SetInteger(*((TCollection_ExtendedString*)theName->Handle), theInteger);
}

OCTColStd_DataMapOfStringInteger^ OCTDataStd_NamedData::GetIntegersContainer()
{
  TColStd_DataMapOfStringInteger* tmp = new TColStd_DataMapOfStringInteger(0);
  *tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetIntegersContainer();
  return gcnew OCTColStd_DataMapOfStringInteger(tmp);
}

 void OCTDataStd_NamedData::ChangeIntegers(OCNaroWrappers::OCTColStd_DataMapOfStringInteger^ theIntegers)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->ChangeIntegers(*((TColStd_DataMapOfStringInteger*)theIntegers->Handle));
}

 System::Boolean OCTDataStd_NamedData::HasReals()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasReals());
}

 System::Boolean OCTDataStd_NamedData::HasReal(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasReal(*((TCollection_ExtendedString*)theName->Handle)));
}

 Standard_Real OCTDataStd_NamedData::GetReal(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return (*((Handle_TDataStd_NamedData*)nativeHandle))->GetReal(*((TCollection_ExtendedString*)theName->Handle));
}

 void OCTDataStd_NamedData::SetReal(OCNaroWrappers::OCTCollection_ExtendedString^ theName, Standard_Real theReal)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->SetReal(*((TCollection_ExtendedString*)theName->Handle), theReal);
}

OCTDataStd_DataMapOfStringReal^ OCTDataStd_NamedData::GetRealsContainer()
{
  TDataStd_DataMapOfStringReal* tmp = new TDataStd_DataMapOfStringReal(0);
  *tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetRealsContainer();
  return gcnew OCTDataStd_DataMapOfStringReal(tmp);
}

 void OCTDataStd_NamedData::ChangeReals(OCNaroWrappers::OCTDataStd_DataMapOfStringReal^ theReals)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->ChangeReals(*((TDataStd_DataMapOfStringReal*)theReals->Handle));
}

 System::Boolean OCTDataStd_NamedData::HasStrings()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasStrings());
}

 System::Boolean OCTDataStd_NamedData::HasString(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasString(*((TCollection_ExtendedString*)theName->Handle)));
}

OCTCollection_ExtendedString^ OCTDataStd_NamedData::GetString(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetString(*((TCollection_ExtendedString*)theName->Handle));
  return gcnew OCTCollection_ExtendedString(tmp);
}

 void OCTDataStd_NamedData::SetString(OCNaroWrappers::OCTCollection_ExtendedString^ theName, OCNaroWrappers::OCTCollection_ExtendedString^ theString)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->SetString(*((TCollection_ExtendedString*)theName->Handle), *((TCollection_ExtendedString*)theString->Handle));
}

OCTDataStd_DataMapOfStringString^ OCTDataStd_NamedData::GetStringsContainer()
{
  TDataStd_DataMapOfStringString* tmp = new TDataStd_DataMapOfStringString(0);
  *tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetStringsContainer();
  return gcnew OCTDataStd_DataMapOfStringString(tmp);
}

 void OCTDataStd_NamedData::ChangeStrings(OCNaroWrappers::OCTDataStd_DataMapOfStringString^ theStrings)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->ChangeStrings(*((TDataStd_DataMapOfStringString*)theStrings->Handle));
}

 System::Boolean OCTDataStd_NamedData::HasBytes()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasBytes());
}

 System::Boolean OCTDataStd_NamedData::HasByte(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasByte(*((TCollection_ExtendedString*)theName->Handle)));
}

 Standard_Byte OCTDataStd_NamedData::GetByte(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return (*((Handle_TDataStd_NamedData*)nativeHandle))->GetByte(*((TCollection_ExtendedString*)theName->Handle));
}

 void OCTDataStd_NamedData::SetByte(OCNaroWrappers::OCTCollection_ExtendedString^ theName, Standard_Byte theByte)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->SetByte(*((TCollection_ExtendedString*)theName->Handle), theByte);
}

OCTDataStd_DataMapOfStringByte^ OCTDataStd_NamedData::GetBytesContainer()
{
  TDataStd_DataMapOfStringByte* tmp = new TDataStd_DataMapOfStringByte(0);
  *tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetBytesContainer();
  return gcnew OCTDataStd_DataMapOfStringByte(tmp);
}

 void OCTDataStd_NamedData::ChangeBytes(OCNaroWrappers::OCTDataStd_DataMapOfStringByte^ theBytes)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->ChangeBytes(*((TDataStd_DataMapOfStringByte*)theBytes->Handle));
}

 System::Boolean OCTDataStd_NamedData::HasArraysOfIntegers()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasArraysOfIntegers());
}

 System::Boolean OCTDataStd_NamedData::HasArrayOfIntegers(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasArrayOfIntegers(*((TCollection_ExtendedString*)theName->Handle)));
}

OCTColStd_HArray1OfInteger^ OCTDataStd_NamedData::GetArrayOfIntegers(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  Handle(TColStd_HArray1OfInteger) tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetArrayOfIntegers(*((TCollection_ExtendedString*)theName->Handle));
  return gcnew OCTColStd_HArray1OfInteger(&tmp);
}

 void OCTDataStd_NamedData::SetArrayOfIntegers(OCNaroWrappers::OCTCollection_ExtendedString^ theName, OCNaroWrappers::OCTColStd_HArray1OfInteger^ theArrayOfIntegers)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->SetArrayOfIntegers(*((TCollection_ExtendedString*)theName->Handle), *((Handle_TColStd_HArray1OfInteger*)theArrayOfIntegers->Handle));
}

OCTDataStd_DataMapOfStringHArray1OfInteger^ OCTDataStd_NamedData::GetArraysOfIntegersContainer()
{
  TDataStd_DataMapOfStringHArray1OfInteger* tmp = new TDataStd_DataMapOfStringHArray1OfInteger(0);
  *tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetArraysOfIntegersContainer();
  return gcnew OCTDataStd_DataMapOfStringHArray1OfInteger(tmp);
}

 void OCTDataStd_NamedData::ChangeArraysOfIntegers(OCNaroWrappers::OCTDataStd_DataMapOfStringHArray1OfInteger^ theArraysOfIntegers)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->ChangeArraysOfIntegers(*((TDataStd_DataMapOfStringHArray1OfInteger*)theArraysOfIntegers->Handle));
}

 System::Boolean OCTDataStd_NamedData::HasArraysOfReals()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasArraysOfReals());
}

 System::Boolean OCTDataStd_NamedData::HasArrayOfReals(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDataStd_NamedData*)nativeHandle))->HasArrayOfReals(*((TCollection_ExtendedString*)theName->Handle)));
}

OCTColStd_HArray1OfReal^ OCTDataStd_NamedData::GetArrayOfReals(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  Handle(TColStd_HArray1OfReal) tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetArrayOfReals(*((TCollection_ExtendedString*)theName->Handle));
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

 void OCTDataStd_NamedData::SetArrayOfReals(OCNaroWrappers::OCTCollection_ExtendedString^ theName, OCNaroWrappers::OCTColStd_HArray1OfReal^ theArrayOfReals)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->SetArrayOfReals(*((TCollection_ExtendedString*)theName->Handle), *((Handle_TColStd_HArray1OfReal*)theArrayOfReals->Handle));
}

OCTDataStd_DataMapOfStringHArray1OfReal^ OCTDataStd_NamedData::GetArraysOfRealsContainer()
{
  TDataStd_DataMapOfStringHArray1OfReal* tmp = new TDataStd_DataMapOfStringHArray1OfReal(0);
  *tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->GetArraysOfRealsContainer();
  return gcnew OCTDataStd_DataMapOfStringHArray1OfReal(tmp);
}

 void OCTDataStd_NamedData::ChangeArraysOfReals(OCNaroWrappers::OCTDataStd_DataMapOfStringHArray1OfReal^ theArraysOfReals)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->ChangeArraysOfReals(*((TDataStd_DataMapOfStringHArray1OfReal*)theArraysOfReals->Handle));
}

OCStandard_GUID^ OCTDataStd_NamedData::ID()
{
  Standard_GUID* tmp = new Standard_GUID();
  *tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->ID();
  return gcnew OCStandard_GUID(tmp);
}

 void OCTDataStd_NamedData::Restore(OCNaroWrappers::OCTDF_Attribute^ With)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->Restore(*((Handle_TDF_Attribute*)With->Handle));
}

OCTDF_Attribute^ OCTDataStd_NamedData::NewEmpty()
{
  Handle(TDF_Attribute) tmp = (*((Handle_TDataStd_NamedData*)nativeHandle))->NewEmpty();
  return gcnew OCTDF_Attribute(&tmp);
}

 void OCTDataStd_NamedData::Paste(OCNaroWrappers::OCTDF_Attribute^ Into, OCNaroWrappers::OCTDF_RelocationTable^ RT)
{
  (*((Handle_TDataStd_NamedData*)nativeHandle))->Paste(*((Handle_TDF_Attribute*)Into->Handle), *((Handle_TDF_RelocationTable*)RT->Handle));
}

 Standard_OStream& OCTDataStd_NamedData::Dump(Standard_OStream& anOS)
{
  return (*((Handle_TDataStd_NamedData*)nativeHandle))->Dump(anOS);
}


