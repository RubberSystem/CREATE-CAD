// File generated by CPPExt (Transient)
//
#ifndef _TDataStd_Current_OCWrappers_HeaderFile
#define _TDataStd_Current_OCWrappers_HeaderFile

// include the wrapped class
#include <TDataStd_Current.hxx>
#include "../Converter.h"

#include "../TDF/TDF_Attribute.h"

#include "../TDF/TDF_Label.h"


namespace OCNaroWrappers
{

ref class OCStandard_GUID;
ref class OCTDF_Label;
ref class OCTDF_Attribute;
ref class OCTDF_RelocationTable;


//! this attribute,  located at root label,  manage an <br>
//!          access to a current label. <br>
public ref class OCTDataStd_Current : OCTDF_Attribute {

protected:
  // dummy constructor;
  OCTDataStd_Current(OCDummy^) : OCTDF_Attribute((OCDummy^)nullptr) {};

public:

// constructor from native
OCTDataStd_Current(Handle(TDataStd_Current)* nativeHandle);

// Methods PUBLIC

//! class methods <br>
//!          ============= <br>
static /*instead*/  OCStandard_GUID^ GetID() ;

//! Set <L> as current of <L> Framework. <br>
static /*instead*/  void Set(OCNaroWrappers::OCTDF_Label^ L) ;

//! returns current of <acces> Framework. raise if (!Has) <br>
static /*instead*/  OCTDF_Label^ Get(OCNaroWrappers::OCTDF_Label^ acces) ;

//! returns True if a  current label is managed in <acces> <br>
//!          Framework. <br>//! class methods <br>
//!          ============= <br>
static /*instead*/  System::Boolean Has(OCNaroWrappers::OCTDF_Label^ acces) ;


OCTDataStd_Current();


 /*instead*/  void SetLabel(OCNaroWrappers::OCTDF_Label^ current) ;


 /*instead*/  OCTDF_Label^ GetLabel() ;


 /*instead*/  OCStandard_GUID^ ID() ;


 /*instead*/  void Restore(OCNaroWrappers::OCTDF_Attribute^ With) ;


 /*instead*/  OCTDF_Attribute^ NewEmpty() ;


 /*instead*/  void Paste(OCNaroWrappers::OCTDF_Attribute^ Into, OCNaroWrappers::OCTDF_RelocationTable^ RT) ;


virtual /*instead*/  Standard_OStream& Dump(Standard_OStream& anOS) override;

~OCTDataStd_Current()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
