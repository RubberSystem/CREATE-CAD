// File generated by CPPExt (CPP file)
//

#include "Intrv_Interval.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCIntrv_Interval::OCIntrv_Interval(Intrv_Interval* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntrv_Interval::OCIntrv_Interval() 
{
  nativeHandle = new Intrv_Interval();
}

OCIntrv_Interval::OCIntrv_Interval(Standard_Real Start, Standard_Real End) 
{
  nativeHandle = new Intrv_Interval(Start, End);
}

OCIntrv_Interval::OCIntrv_Interval(Standard_Real Start, Standard_ShortReal TolStart, Standard_Real End, Standard_ShortReal TolEnd) 
{
  nativeHandle = new Intrv_Interval(Start, TolStart, End, TolEnd);
}

 Standard_Real OCIntrv_Interval::Start()
{
  return ((Intrv_Interval*)nativeHandle)->Start();
}

 Standard_Real OCIntrv_Interval::End()
{
  return ((Intrv_Interval*)nativeHandle)->End();
}

 Standard_ShortReal OCIntrv_Interval::TolStart()
{
  return ((Intrv_Interval*)nativeHandle)->TolStart();
}

 Standard_ShortReal OCIntrv_Interval::TolEnd()
{
  return ((Intrv_Interval*)nativeHandle)->TolEnd();
}

 void OCIntrv_Interval::Bounds(Standard_Real& Start, Standard_ShortReal& TolStart, Standard_Real& End, Standard_ShortReal& TolEnd)
{
  ((Intrv_Interval*)nativeHandle)->Bounds(Start, TolStart, End, TolEnd);
}

 void OCIntrv_Interval::SetStart(Standard_Real Start, Standard_ShortReal TolStart)
{
  ((Intrv_Interval*)nativeHandle)->SetStart(Start, TolStart);
}

 void OCIntrv_Interval::FuseAtStart(Standard_Real Start, Standard_ShortReal TolStart)
{
  ((Intrv_Interval*)nativeHandle)->FuseAtStart(Start, TolStart);
}

 void OCIntrv_Interval::CutAtStart(Standard_Real Start, Standard_ShortReal TolStart)
{
  ((Intrv_Interval*)nativeHandle)->CutAtStart(Start, TolStart);
}

 void OCIntrv_Interval::SetEnd(Standard_Real End, Standard_ShortReal TolEnd)
{
  ((Intrv_Interval*)nativeHandle)->SetEnd(End, TolEnd);
}

 void OCIntrv_Interval::FuseAtEnd(Standard_Real End, Standard_ShortReal TolEnd)
{
  ((Intrv_Interval*)nativeHandle)->FuseAtEnd(End, TolEnd);
}

 void OCIntrv_Interval::CutAtEnd(Standard_Real End, Standard_ShortReal TolEnd)
{
  ((Intrv_Interval*)nativeHandle)->CutAtEnd(End, TolEnd);
}

 System::Boolean OCIntrv_Interval::IsProbablyEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsProbablyEmpty());
}

 OCIntrv_Position OCIntrv_Interval::Position(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return (OCIntrv_Position)(((Intrv_Interval*)nativeHandle)->Position(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsBefore(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsBefore(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsAfter(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsAfter(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsInside(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsInside(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsEnclosing(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsEnclosing(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsJustEnclosingAtStart(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsJustEnclosingAtStart(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsJustEnclosingAtEnd(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsJustEnclosingAtEnd(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsJustBefore(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsJustBefore(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsJustAfter(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsJustAfter(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsOverlappingAtStart(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsOverlappingAtStart(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsOverlappingAtEnd(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsOverlappingAtEnd(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsJustOverlappingAtStart(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsJustOverlappingAtStart(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsJustOverlappingAtEnd(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsJustOverlappingAtEnd(*((Intrv_Interval*)Other->Handle)));
}

 System::Boolean OCIntrv_Interval::IsSimilar(OCNaroWrappers::OCIntrv_Interval^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intrv_Interval*)nativeHandle)->IsSimilar(*((Intrv_Interval*)Other->Handle)));
}


