// File generated by CPPExt (MPV)
//
#ifndef _Intrv_Interval_OCWrappers_HeaderFile
#define _Intrv_Interval_OCWrappers_HeaderFile

// include native header
#include <Intrv_Interval.hxx>
#include "../Converter.h"


#include "Intrv_Position.h"


namespace OCNaroWrappers
{




//!               **-----------****             Other <br>
//!   ***---*                                   IsBefore <br>
//!   ***----------*                            IsJustBefore <br>
//!   ***---------------*                       IsOverlappingAtStart <br>
//!   ***------------------------*              IsJustEnclosingAtEnd <br>
//!   ***-----------------------------------*   IsEnclosing <br>
//!              ***----*                       IsJustOverlappingAtStart <br>
//!              ***-------------*              IsSimilar <br>
//!              ***------------------------*   IsJustEnclosingAtStart <br>
//!                     ***-*                   IsInside <br>
//!                     ***------*              IsJustOverlappingAtEnd <br>
//!                     ***-----------------*   IsOverlappingAtEnd <br>
//!                              ***--------*   IsJustAfter <br>
//!                                   ***---*   IsAfter <br>
public ref class OCIntrv_Interval  {

protected:
  Intrv_Interval* nativeHandle;
  OCIntrv_Interval(OCDummy^) {};

public:
  property Intrv_Interval* Handle
  {
    Intrv_Interval* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntrv_Interval(Intrv_Interval* nativeHandle);

// Methods PUBLIC


OCIntrv_Interval();


OCIntrv_Interval(Standard_Real Start, Standard_Real End);


OCIntrv_Interval(Standard_Real Start, Standard_ShortReal TolStart, Standard_Real End, Standard_ShortReal TolEnd);


 /*instead*/  Standard_Real Start() ;


 /*instead*/  Standard_Real End() ;


 /*instead*/  Standard_ShortReal TolStart() ;


 /*instead*/  Standard_ShortReal TolEnd() ;


 /*instead*/  void Bounds(Standard_Real& Start, Standard_ShortReal& TolStart, Standard_Real& End, Standard_ShortReal& TolEnd) ;


 /*instead*/  void SetStart(Standard_Real Start, Standard_ShortReal TolStart) ;


//!             ****+****-------------------->      Old one <br>
//!         ****+****------------------------>      New one to fuse <br>
//!         <<<     <<< <br>
//!         ****+****------------------------>      result <br>
 /*instead*/  void FuseAtStart(Standard_Real Start, Standard_ShortReal TolStart) ;


//!                      ****+****----------->      Old one <br>
//!         <----------**+**                        Tool for cutting <br>
//!                    >>>     >>> <br>
//!                      ****+****----------->      result <br>
 /*instead*/  void CutAtStart(Standard_Real Start, Standard_ShortReal TolStart) ;


 /*instead*/  void SetEnd(Standard_Real End, Standard_ShortReal TolEnd) ;


//!         <---------------------****+****      Old one <br>
//!         <-----------------**+**              New one to fuse <br>
//!                             >>>     >>> <br>
//!         <---------------------****+****      result <br>
 /*instead*/  void FuseAtEnd(Standard_Real End, Standard_ShortReal TolEnd) ;


//!         <-----****+****                      Old one <br>
//!                     **+**------>             Tool for cutting <br>
//!               <<<     <<< <br>
//!         <-----****+****                      result <br>
 /*instead*/  void CutAtEnd(Standard_Real End, Standard_ShortReal TolEnd) ;

//! True if myStart+myTolStart > myEnd-myTolEnd <br>
//!            or if myEnd+myTolEnd > myStart-myTolStart <br>
 /*instead*/  System::Boolean IsProbablyEmpty() ;

//! True if me is Before Other <br>
//!                 **-----------****             Other <br>
//!   ***-----*                                   Before <br>
//!   ***------------*                            JustBefore <br>
//!   ***-----------------*                       OverlappingAtStart <br>
//!   ***--------------------------*              JustEnclosingAtEnd <br>
//!   ***-------------------------------------*   Enclosing <br>
//!                ***----*                       JustOverlappingAtStart <br>
//!                ***-------------*              Similar <br>
//!                ***------------------------*   JustEnclosingAtStart <br>
//!                       ***-*                   Inside <br>
//!                       ***------*              JustOverlappingAtEnd <br>
//!                       ***-----------------*   OverlappingAtEnd <br>
//!                                ***--------*   JustAfter <br>
//!                                     ***---*   After <br>
 /*instead*/  OCIntrv_Position Position(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is Before Other <br>
//!          ***----------------**                              me <br>
//!                                  **-----------****          Other <br>
 /*instead*/  System::Boolean IsBefore(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is After Other <br>
//!                                  **-----------****          me <br>
//!          ***----------------**                              Other <br>
 /*instead*/  System::Boolean IsAfter(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is Inside Other <br>
//!                  **-----------****                          me <br>
//!          ***--------------------------**                    Other <br>
 /*instead*/  System::Boolean IsInside(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is Enclosing Other <br>
//!        ***----------------------------****                  me <br>
//!              ***------------------**                        Other <br>
 /*instead*/  System::Boolean IsEnclosing(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is just Enclosing Other at start <br>
//!               ***---------------------------****            me <br>
//!              ***------------------**                        Other <br>
 /*instead*/  System::Boolean IsJustEnclosingAtStart(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is just Enclosing Other at End <br>
//!        ***----------------------------****                  me <br>
//!                  ***-----------------****                   Other <br>
 /*instead*/  System::Boolean IsJustEnclosingAtEnd(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is just before Other <br>
//!        ***--------****                                      me <br>
//!                     ***-----------**                        Other <br>
 /*instead*/  System::Boolean IsJustBefore(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is just after Other <br>
//!                     ****-------****                         me <br>
//!        ***-----------**                                     Other <br>
 /*instead*/  System::Boolean IsJustAfter(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is overlapping Other at start <br>
//!        ***---------------***                                me <br>
//!                     ***-----------**                        Other <br>
 /*instead*/  System::Boolean IsOverlappingAtStart(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is overlapping Other at end <br>
//!                     ***-----------**                        me <br>
//!        ***---------------***                                Other <br>
 /*instead*/  System::Boolean IsOverlappingAtEnd(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is just overlapping Other at start <br>
//!        ***-----------***                                    me <br>
//!        ***------------------------**                        Other <br>
 /*instead*/  System::Boolean IsJustOverlappingAtStart(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me is just overlapping Other at end <br>
//!                     ***-----------*                         me <br>
//!        ***------------------------**                        Other <br>
 /*instead*/  System::Boolean IsJustOverlappingAtEnd(OCNaroWrappers::OCIntrv_Interval^ Other) ;

//! True if me and Other have the same bounds <br>
//!         *----------------***                                me <br>
//!        ***-----------------**                               Other <br>
 /*instead*/  System::Boolean IsSimilar(OCNaroWrappers::OCIntrv_Interval^ Other) ;

~OCIntrv_Interval()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
