// File generated by CPPExt (MPV)
//
#ifndef _TopTrans_CurveTransition_OCWrappers_HeaderFile
#define _TopTrans_CurveTransition_OCWrappers_HeaderFile

// include native header
#include <TopTrans_CurveTransition.hxx>
#include "../Converter.h"


#include "../gp/gp_Dir.h"
#include "../TopAbs/TopAbs_Orientation.h"
#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{

ref class OCgp_Dir;


//! This algorithm  is used to  compute the transition <br>
//!          of a Curve intersecting a curvilinear boundary. <br>
//! <br>
//!          The geometric  elements  are described locally  at <br>
//!          the   intersection   point  by    a   second order <br>
//!          development. <br>
//! <br>
//!          The curve is described  by the intersection point, <br>
//!          the tangent vector and the curvature. <br>
//! <br>
//!          The  boundary  is described  by   a set  of  curve <br>
//!          elements, a curve element is either : <br>
//! <br>
//!          - A curve. <br>
//! <br>
//!          - A curve and an orientation  called a half-curve, <br>
//!          the boundary  of the curve is  before or after the <br>
//!          intersection point depending on the orientation. <br>
//! <br>
public ref class OCTopTrans_CurveTransition  {

protected:
  TopTrans_CurveTransition* nativeHandle;
  OCTopTrans_CurveTransition(OCDummy^) {};

public:
  property TopTrans_CurveTransition* Handle
  {
    TopTrans_CurveTransition* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopTrans_CurveTransition(TopTrans_CurveTransition* nativeHandle);

// Methods PUBLIC

//! Create an empty  Curve Transition. <br>
OCTopTrans_CurveTransition();

//! Initialize a Transition with the local description <br>
//!          of a Curve. <br>
 /*instead*/  void Reset(OCNaroWrappers::OCgp_Dir^ Tgt, OCNaroWrappers::OCgp_Dir^ Norm, Standard_Real Curv) ;

//! Initialize a Transition with the local description <br>
//!          of a straigth line. <br>
 /*instead*/  void Reset(OCNaroWrappers::OCgp_Dir^ Tgt) ;

//! Add  a curve element to the  boundary.    If Or is <br>
//!          REVERSED  the curve  is   before the intersection, <br>
//!          else if  Or  is FORWARD  the   curv  is after  the <br>
//!          intersection   and    if   Or  is   INTERNAL   the <br>
//!          intersection is in the middle of the curv. <br>
 /*instead*/  void Compare(Standard_Real Tole, OCNaroWrappers::OCgp_Dir^ Tang, OCNaroWrappers::OCgp_Dir^ Norm, Standard_Real Curv, OCTopAbs_Orientation S, OCTopAbs_Orientation Or) ;

//! returns   the  state   of  the   curve  before the <br>
//!          intersection, this is the position relative to the <br>
//!          boundary of a point very close to the intersection <br>
//!          on the negative side of the tangent. <br>
 /*instead*/  OCTopAbs_State StateBefore() ;

//! returns  the    state of  the  curve   after   the <br>
//!          intersection, this is the position relative to the <br>
//!          boundary of a point very close to the intersection <br>
//!          on the positive side of the tangent. <br>
 /*instead*/  OCTopAbs_State StateAfter() ;

~OCTopTrans_CurveTransition()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
