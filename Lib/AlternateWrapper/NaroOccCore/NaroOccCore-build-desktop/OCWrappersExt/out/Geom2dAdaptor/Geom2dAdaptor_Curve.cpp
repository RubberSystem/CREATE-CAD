// File generated by CPPExt (CPP file)
//

#include "Geom2dAdaptor_Curve.h"
#include "../Converter.h"
#include "../Geom2d/Geom2d_Curve.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"
#include "../Geom2d/Geom2d_BezierCurve.h"
#include "../Geom2d/Geom2d_BSplineCurve.h"


using namespace OCNaroWrappers;

OCGeom2dAdaptor_Curve::OCGeom2dAdaptor_Curve(Geom2dAdaptor_Curve* nativeHandle) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCGeom2dAdaptor_Curve::OCGeom2dAdaptor_Curve() : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Geom2dAdaptor_Curve();
}

OCGeom2dAdaptor_Curve::OCGeom2dAdaptor_Curve(OCNaroWrappers::OCGeom2d_Curve^ C) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Geom2dAdaptor_Curve(*((Handle_Geom2d_Curve*)C->Handle));
}

OCGeom2dAdaptor_Curve::OCGeom2dAdaptor_Curve(OCNaroWrappers::OCGeom2d_Curve^ C, Standard_Real UFirst, Standard_Real ULast) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Geom2dAdaptor_Curve(*((Handle_Geom2d_Curve*)C->Handle), UFirst, ULast);
}

 void OCGeom2dAdaptor_Curve::Load(OCNaroWrappers::OCGeom2d_Curve^ C)
{
  ((Geom2dAdaptor_Curve*)nativeHandle)->Load(*((Handle_Geom2d_Curve*)C->Handle));
}

 void OCGeom2dAdaptor_Curve::Load(OCNaroWrappers::OCGeom2d_Curve^ C, Standard_Real UFirst, Standard_Real ULast)
{
  ((Geom2dAdaptor_Curve*)nativeHandle)->Load(*((Handle_Geom2d_Curve*)C->Handle), UFirst, ULast);
}

OCGeom2d_Curve^ OCGeom2dAdaptor_Curve::Curve()
{
  Handle(Geom2d_Curve) tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Curve();
  return gcnew OCGeom2d_Curve(&tmp);
}

 Standard_Real OCGeom2dAdaptor_Curve::FirstParameter()
{
  return ((Geom2dAdaptor_Curve*)nativeHandle)->FirstParameter();
}

 Standard_Real OCGeom2dAdaptor_Curve::LastParameter()
{
  return ((Geom2dAdaptor_Curve*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCGeom2dAdaptor_Curve::Continuity()
{
  return (OCGeomAbs_Shape)(((Geom2dAdaptor_Curve*)nativeHandle)->Continuity());
}

 Standard_Integer OCGeom2dAdaptor_Curve::NbIntervals(OCGeomAbs_Shape S)
{
  return ((Geom2dAdaptor_Curve*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCGeom2dAdaptor_Curve::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((Geom2dAdaptor_Curve*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor2d_HCurve2d^ OCGeom2dAdaptor_Curve::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor2d_HCurve2d) tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

 System::Boolean OCGeom2dAdaptor_Curve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dAdaptor_Curve*)nativeHandle)->IsClosed());
}

 System::Boolean OCGeom2dAdaptor_Curve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dAdaptor_Curve*)nativeHandle)->IsPeriodic());
}

 Standard_Real OCGeom2dAdaptor_Curve::Period()
{
  return ((Geom2dAdaptor_Curve*)nativeHandle)->Period();
}

OCgp_Pnt2d^ OCGeom2dAdaptor_Curve::Value(Standard_Real U)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Value(U);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCGeom2dAdaptor_Curve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((Geom2dAdaptor_Curve*)nativeHandle)->D0(U, *((gp_Pnt2d*)P->Handle));
}

 void OCGeom2dAdaptor_Curve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((Geom2dAdaptor_Curve*)nativeHandle)->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V->Handle));
}

 void OCGeom2dAdaptor_Curve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  ((Geom2dAdaptor_Curve*)nativeHandle)->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCGeom2dAdaptor_Curve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  ((Geom2dAdaptor_Curve*)nativeHandle)->D3(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCGeom2dAdaptor_Curve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 Standard_Real OCGeom2dAdaptor_Curve::Resolution(Standard_Real Ruv)
{
  return ((Geom2dAdaptor_Curve*)nativeHandle)->Resolution(Ruv);
}

 OCGeomAbs_CurveType OCGeom2dAdaptor_Curve::GetType()
{
  return (OCGeomAbs_CurveType)(((Geom2dAdaptor_Curve*)nativeHandle)->GetType());
}

OCgp_Lin2d^ OCGeom2dAdaptor_Curve::Line()
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Line();
  return gcnew OCgp_Lin2d(tmp);
}

OCgp_Circ2d^ OCGeom2dAdaptor_Curve::Circle()
{
  gp_Circ2d* tmp = new gp_Circ2d();
  *tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Circle();
  return gcnew OCgp_Circ2d(tmp);
}

OCgp_Elips2d^ OCGeom2dAdaptor_Curve::Ellipse()
{
  gp_Elips2d* tmp = new gp_Elips2d();
  *tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips2d(tmp);
}

OCgp_Hypr2d^ OCGeom2dAdaptor_Curve::Hyperbola()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr2d(tmp);
}

OCgp_Parab2d^ OCGeom2dAdaptor_Curve::Parabola()
{
  gp_Parab2d* tmp = new gp_Parab2d();
  *tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab2d(tmp);
}

 Standard_Integer OCGeom2dAdaptor_Curve::Degree()
{
  return ((Geom2dAdaptor_Curve*)nativeHandle)->Degree();
}

 System::Boolean OCGeom2dAdaptor_Curve::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dAdaptor_Curve*)nativeHandle)->IsRational());
}

 Standard_Integer OCGeom2dAdaptor_Curve::NbPoles()
{
  return ((Geom2dAdaptor_Curve*)nativeHandle)->NbPoles();
}

 Standard_Integer OCGeom2dAdaptor_Curve::NbKnots()
{
  return ((Geom2dAdaptor_Curve*)nativeHandle)->NbKnots();
}

OCGeom2d_BezierCurve^ OCGeom2dAdaptor_Curve::Bezier()
{
  Handle(Geom2d_BezierCurve) tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->Bezier();
  return gcnew OCGeom2d_BezierCurve(&tmp);
}

OCGeom2d_BSplineCurve^ OCGeom2dAdaptor_Curve::BSpline()
{
  Handle(Geom2d_BSplineCurve) tmp = ((Geom2dAdaptor_Curve*)nativeHandle)->BSpline();
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}


