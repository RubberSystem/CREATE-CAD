// File generated by CPPExt (Package)
//

#ifndef _BndLib_OCWrappers_HeaderFile
#define _BndLib_OCWrappers_HeaderFile

// Include the wrapped header
#include <BndLib.hxx>

#include "BndLib_Add3dCurve.h"
#include "BndLib_Add2dCurve.h"
#include "BndLib_AddSurface.h"


namespace OCNaroWrappers
{
//! The BndLib package provides functions to add a geometric primitive to a bounding box. <br>
//!     Note: these functions work with gp objects, optionally <br>
//!     limited by parameter values. If the curves and surfaces <br>
//!     provided by the gp package are not explicitly <br>
//!     parameterized, they still have an implicit parameterization, <br>
//!     similar to that which they infer for the equivalent Geom or Geom2d objects. <br>
//!     Add : Package to compute the bounding boxes for elementary <br>
//!           objects from gp in 2d and 3d . <br>
//! <br>
//!     AddCurve2d : A class to compute the bounding box for a curve <br>
//!     in 2d dimensions ;the curve is defined by a tool <br>
//! <br>
//!     AddCurve : A class to compute the bounding box for a curve <br>
//!     in 3d dimensions ;the curve is defined by a tool <br>
//! <br>
//!     AddSurface : A class to compute the bounding box for a surface. <br>
//!     The surface is defined by a tool for the geometry and another <br>
//!     tool for the topology (only the edges in 2d dimensions) <br>
public ref class OCBndLib abstract sealed
{

public:
// Methods

//! Adds the segment of the line L limited by the two <br>
//! parameter values P1 and P2, to the bounding box B, and <br>
//! then enlarges B by the tolerance value Tol. <br>
//! Tol is the tolerance value to enlarge the minimun and maximum dimension <br>
//! P1 and P2 may represent infinite values. <br>
//! Exceptions <br>
//! Standard_Failure if P1 and P2 are either two negative <br>
//! infinite real numbers, or two positive infinite real numbers. <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Lin^ L, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box2d^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Circ^ C, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//!  P2-P1 can be in [0,2*pi] <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Circ^ C, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Circ2d^ C, Standard_Real Tol, OCNaroWrappers::OCBnd_Box2d^ B) ;

//! Adds the circle C, or the arc of the circle C <br>
//! limited by the two parameter values P1 and P2, <br>
//! to the bounding box B, and then enlarges B by the tolerance value Tol. <br>
//! P2-P1 can be in [0,2*pi] <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Circ2d^ C, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box2d^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Elips^ C, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//!  P2-P1 can be in [0,2*pi] <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Elips^ C, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Elips2d^ C, Standard_Real Tol, OCNaroWrappers::OCBnd_Box2d^ B) ;

//! Adds the ellipse E, or the arc of the ellipse E <br>
//! limited by the two parameter values P1 and P2, <br>
//! to the bounding box B, and then enlarges B by the tolerance value Tol. <br>
//! P2-P1 can be in [0,2*pi] <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Elips2d^ C, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box2d^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Parab^ P, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//! Adds the arc of the parabola P limited by the two <br>
//! parameter values P1 and P2, to the bounding box B, and <br>
//! then enlarges B by the tolerance value Tol. <br>
//! P1 and P2 may represent infinite values. <br>
//! Exceptions <br>
//! Standard_Failure if P1 and P2 are either two negative <br>
//! infinite real numbers, or two positive infinite real numbers. <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Parab2d^ P, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box2d^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Hypr^ H, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//! Adds the arc of the branch of hyperbola H limited by the <br>
//! two parameter values P1 and P2, to the bounding box B, <br>
//! and then enlarges B by the tolerance value Tol. <br>
//! P1 and P2 may represent infinite values. <br>
//! Exceptions <br>
//! Standard_Failure if P1 and P2 are either two negative <br>
//! infinite real numbers, or two positive infinite real numbers. <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Hypr2d^ H, Standard_Real P1, Standard_Real P2, Standard_Real Tol, OCNaroWrappers::OCBnd_Box2d^ B) ;

//!  UMax -UMin can be in [0,2*pi] <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Cylinder^ S, Standard_Real UMin, Standard_Real UMax, Standard_Real VMin, Standard_Real VMax, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//! Adds to the bounding box B, the patch of the cylinder S limited <br>
//! -   in the v parametric direction, by the two parameter <br>
//!   values VMin and VMax <br>
//! -   and optionally in the u parametric direction, by the two <br>
//!   parameter values UMin and UMax. <br>
//! B is then enlarged by the tolerance value Tol. <br>
//! VMin and VMax may represent infinite values. <br>
//! Exceptions <br>
//! Standard_Failure if VMin and VMax are either two <br>
//! negative infinite real numbers, or two positive infinite real numbers. <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Cylinder^ S, Standard_Real VMin, Standard_Real VMax, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//!  UMax-UMin can be in [0,2*pi] <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Cone^ S, Standard_Real UMin, Standard_Real UMax, Standard_Real VMin, Standard_Real VMax, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//! Adds to the bounding box B, the patch of the cone S limited <br>
//! -   in the v parametric direction, by the two parameter <br>
//!   values VMin and VMax <br>
//! -   and optionally in the u parametric direction, by the two <br>
//!   parameter values UMin and UMax, <br>
//! B is then enlarged by the tolerance value Tol. <br>
//! VMin and VMax may represent infinite values. <br>
//! Exceptions <br>
//! Standard_Failure if VMin and VMax are either two <br>
//! negative infinite real numbers, or two positive infinite real numbers. <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Cone^ S, Standard_Real VMin, Standard_Real VMax, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Sphere^ S, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//! Adds to the bounding box B the sphere S, or <br>
//! -   the patch of the sphere S, limited in the u parametric <br>
//!   direction, by the two parameter values UMin and UMax, <br>
//!   and in the v parametric direction, by the two parameter <br>
//!   values VMin and VMax. <br>
//! B is then enlarged by the tolerance value Tol. <br>
//! UMax-UMin can be in [0,2*pi] <br>
//!           VMin,VMax can be [-pi/2,pi/2] <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Sphere^ S, Standard_Real UMin, Standard_Real UMax, Standard_Real VMin, Standard_Real VMax, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;


static /*instead*/  void Add(OCNaroWrappers::OCgp_Torus^ P, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;

//! Adds to the bounding box B <br>
//! -   the torus S, or <br>
//! -   the patch of the torus S, limited in the u parametric <br>
//!   direction, by the two parameter values UMin and UMax, <br>
//!   and in the v parametric direction, by the two parameter <br>
//!   values VMin and VMax. <br>
//! B is then enlarged by the tolerance value Tol. <br>
//! UMax-UMin can be in [0,2*pi], <br>
//!           VMin,VMax can be [-pi/2,pi/2] <br>
static /*instead*/  void Add(OCNaroWrappers::OCgp_Torus^ P, Standard_Real UMin, Standard_Real UMax, Standard_Real VMin, Standard_Real VMax, Standard_Real Tol, OCNaroWrappers::OCBnd_Box^ B) ;


};

}; // OCNaroWrappers

#endif
