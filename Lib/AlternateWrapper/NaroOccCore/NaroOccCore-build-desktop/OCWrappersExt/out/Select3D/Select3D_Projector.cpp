// File generated by CPPExt (CPP file)
//

#include "Select3D_Projector.h"
#include "../Converter.h"
#include "../V3d/V3d_View.h"
#include "../gp/gp_Ax2.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_GTrsf.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Lin.h"


using namespace OCNaroWrappers;

OCSelect3D_Projector::OCSelect3D_Projector(Handle(Select3D_Projector)* nativeHandle) : OCStandard_Transient((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Select3D_Projector(*nativeHandle);
}

OCSelect3D_Projector::OCSelect3D_Projector(OCNaroWrappers::OCV3d_View^ aView) : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_Projector(new Select3D_Projector(*((Handle_V3d_View*)aView->Handle)));
}

OCSelect3D_Projector::OCSelect3D_Projector() : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_Projector(new Select3D_Projector());
}

OCSelect3D_Projector::OCSelect3D_Projector(OCNaroWrappers::OCgp_Ax2^ CS) : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_Projector(new Select3D_Projector(*((gp_Ax2*)CS->Handle)));
}

OCSelect3D_Projector::OCSelect3D_Projector(OCNaroWrappers::OCgp_Ax2^ CS, Standard_Real Focus) : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_Projector(new Select3D_Projector(*((gp_Ax2*)CS->Handle), Focus));
}

OCSelect3D_Projector::OCSelect3D_Projector(OCNaroWrappers::OCgp_Trsf^ T, System::Boolean Persp, Standard_Real Focus) : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_Projector(new Select3D_Projector(*((gp_Trsf*)T->Handle), OCConverter::BooleanToStandardBoolean(Persp), Focus));
}

OCSelect3D_Projector::OCSelect3D_Projector(OCNaroWrappers::OCgp_GTrsf^ GT, System::Boolean Persp, Standard_Real Focus) : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_Projector(new Select3D_Projector(*((gp_GTrsf*)GT->Handle), OCConverter::BooleanToStandardBoolean(Persp), Focus));
}

 void OCSelect3D_Projector::Set(OCNaroWrappers::OCgp_Trsf^ T, System::Boolean Persp, Standard_Real Focus)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Set(*((gp_Trsf*)T->Handle), OCConverter::BooleanToStandardBoolean(Persp), Focus);
}

 void OCSelect3D_Projector::SetView(OCNaroWrappers::OCV3d_View^ V)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->SetView(*((Handle_V3d_View*)V->Handle));
}

OCV3d_View^ OCSelect3D_Projector::View()
{
  Handle(V3d_View) tmp = (*((Handle_Select3D_Projector*)nativeHandle))->View();
  return gcnew OCV3d_View(&tmp);
}

 void OCSelect3D_Projector::Scaled(System::Boolean On)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Scaled(OCConverter::BooleanToStandardBoolean(On));
}

 System::Boolean OCSelect3D_Projector::Perspective()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_Projector*)nativeHandle))->Perspective());
}

OCgp_GTrsf^ OCSelect3D_Projector::Transformation()
{
  gp_GTrsf* tmp = new gp_GTrsf();
  *tmp = (*((Handle_Select3D_Projector*)nativeHandle))->Transformation();
  return gcnew OCgp_GTrsf(tmp);
}

OCgp_GTrsf^ OCSelect3D_Projector::InvertedTransformation()
{
  gp_GTrsf* tmp = new gp_GTrsf();
  *tmp = (*((Handle_Select3D_Projector*)nativeHandle))->InvertedTransformation();
  return gcnew OCgp_GTrsf(tmp);
}

OCgp_Trsf^ OCSelect3D_Projector::FullTransformation()
{
  gp_Trsf* tmp = new gp_Trsf();
  *tmp = (*((Handle_Select3D_Projector*)nativeHandle))->FullTransformation();
  return gcnew OCgp_Trsf(tmp);
}

 Standard_Real OCSelect3D_Projector::Focus()
{
  return (*((Handle_Select3D_Projector*)nativeHandle))->Focus();
}

 void OCSelect3D_Projector::Transform(OCNaroWrappers::OCgp_Vec^ D)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Transform(*((gp_Vec*)D->Handle));
}

 void OCSelect3D_Projector::Transform(OCNaroWrappers::OCgp_Pnt^ Pnt)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Transform(*((gp_Pnt*)Pnt->Handle));
}

 void OCSelect3D_Projector::Project(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Pnt2d^ Pout)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Project(*((gp_Pnt*)P->Handle), *((gp_Pnt2d*)Pout->Handle));
}

 void OCSelect3D_Projector::Project(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real& X, Standard_Real& Y, Standard_Real& Z)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Project(*((gp_Pnt*)P->Handle), X, Y, Z);
}

 void OCSelect3D_Projector::Project(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1, OCNaroWrappers::OCgp_Pnt2d^ Pout, OCNaroWrappers::OCgp_Vec2d^ D1out)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Project(*((gp_Pnt*)P->Handle), *((gp_Vec*)D1->Handle), *((gp_Pnt2d*)Pout->Handle), *((gp_Vec2d*)D1out->Handle));
}

OCgp_Lin^ OCSelect3D_Projector::Shoot(Standard_Real X, Standard_Real Y)
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = (*((Handle_Select3D_Projector*)nativeHandle))->Shoot(X, Y);
  return gcnew OCgp_Lin(tmp);
}

 Standard_Real OCSelect3D_Projector::DepthMin()
{
  return (*((Handle_Select3D_Projector*)nativeHandle))->DepthMin();
}

 Standard_Real OCSelect3D_Projector::DepthMax()
{
  return (*((Handle_Select3D_Projector*)nativeHandle))->DepthMax();
}

 void OCSelect3D_Projector::DepthMinMax(Standard_Real theDepthMin, Standard_Real theDepthMax)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->DepthMinMax(theDepthMin, theDepthMax);
}

 void OCSelect3D_Projector::Transform(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_GTrsf^ T)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Transform(*((gp_Pnt*)P->Handle), *((gp_GTrsf*)T->Handle));
}

 void OCSelect3D_Projector::Transform(OCNaroWrappers::OCgp_Lin^ D, OCNaroWrappers::OCgp_GTrsf^ T)
{
  (*((Handle_Select3D_Projector*)nativeHandle))->Transform(*((gp_Lin*)D->Handle), *((gp_GTrsf*)T->Handle));
}


