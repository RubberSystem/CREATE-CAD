// File generated by CPPExt (Transient)
//
#ifndef _Select3D_SensitiveTriangulation_OCWrappers_HeaderFile
#define _Select3D_SensitiveTriangulation_OCWrappers_HeaderFile

// include the wrapped class
#include <Select3D_SensitiveTriangulation.hxx>
#include "../Converter.h"

#include "Select3D_SensitiveEntity.h"

#include "../TopLoc/TopLoc_Location.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_Pnt.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../gp/gp_Pnt2d.h"
#include "../Bnd/Bnd_Box2d.h"


namespace OCNaroWrappers
{

ref class OCPoly_Triangulation;
ref class OCTColStd_HArray1OfInteger;
ref class OCSelectBasics_EntityOwner;
ref class OCTopLoc_Location;
ref class OCgp_Pnt;
ref class OCSelect3D_Projector;
ref class OCSelectBasics_ListOfBox2d;
ref class OCSelect3D_SensitiveEntity;
ref class OCTColgp_Array1OfPnt2d;
ref class OCBnd_Box2d;
ref class OCgp_Lin;
ref class OCgp_Pnt2d;
ref class OCgp_XY;


//! A framework to define selection of a sensitive entity made of a set of triangles. <br>
public ref class OCSelect3D_SensitiveTriangulation : OCSelect3D_SensitiveEntity {

protected:
  // dummy constructor;
  OCSelect3D_SensitiveTriangulation(OCDummy^) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelect3D_SensitiveTriangulation(Handle(Select3D_SensitiveTriangulation)* nativeHandle);

// Methods PUBLIC

//! Constructs a sensitive triangulation object defined by <br>
//! the owner OwnerId, the triangulation aTriangulation, <br>
//! the location aLoc, and the flag InteriorFlag. <br>
OCSelect3D_SensitiveTriangulation(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCPoly_Triangulation^ aTriangulation, OCNaroWrappers::OCTopLoc_Location^ aLoc, System::Boolean InteriorFlag);

//! Constructs a sensitive triangulation object defined by <br>
//! the owner OwnerId, the triangulation aTriangulation, <br>
//! the location aLoc, the array of free edges <br>
//! thefreeedges, the center of gravity theCDG, and the flag InteriorFlag. <br>
//! As free edges and the center of gravity do not have <br>
//! to be computed later, this syntax reduces computation time. <br>
OCSelect3D_SensitiveTriangulation(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCPoly_Triangulation^ aTriangulation, OCNaroWrappers::OCTopLoc_Location^ aLoc, OCNaroWrappers::OCTColStd_HArray1OfInteger^ thefreeedges, OCNaroWrappers::OCgp_Pnt^ theCDG, System::Boolean InteriorFlag);

//! projection of the sensitive primitive in order to <br>
//!          get 2D boxes for the Sort Algorithm <br>
virtual /*instead*/  void Project(OCNaroWrappers::OCSelect3D_Projector^ aProjector) override;

//! stores in <boxes> the 2D Boxes which represent the sensitive face <br>
//!          in the selection algorithm. <br>
virtual /*instead*/  void Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ boxes) ;


virtual /*instead*/  OCSelect3D_SensitiveEntity^ GetConnected(OCNaroWrappers::OCTopLoc_Location^ aLocation) override;


virtual /*instead*/  System::Boolean Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin) override;


virtual /*instead*/  System::Boolean Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol) override;


virtual /*instead*/  System::Boolean Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol) override;

//! give the depht of the last detected triangle <br>
//!          (center of gravity) <br>
virtual /*instead*/  Standard_Real ComputeDepth(OCNaroWrappers::OCgp_Lin^ EyeLine) ;

//! Returns the detected three nodes P1, P2, P3 constituting a triangle. <br>
//! This triangle is a component of the overall sensitive <br>
//! triangulation created at construction time. <br>
 /*instead*/  Standard_Integer DetectedTriangle() ;

//! Returns the triangulation used at the time of construction. <br>
 /*instead*/  OCPoly_Triangulation^ Triangulation() ;

//! Returns the 3D center of gravity used at the time of construction. <br>
 /*instead*/  OCgp_Pnt^ CDG3D() ;

//! Returns the 2D center of gravity used at the time of construction. <br>
 /*instead*/  OCgp_Pnt2d^ CDG2D() ;

//! Dmin gives the distance between the cdg and aPoint <br>
 /*instead*/  Standard_Integer Status(OCNaroWrappers::OCgp_XY^ p0, OCNaroWrappers::OCgp_XY^ p1, OCNaroWrappers::OCgp_XY^ p2, OCNaroWrappers::OCgp_XY^ aPoint, Standard_Real aTol, Standard_Real& Dmin) ;


 /*instead*/  System::Boolean HasInitLocation() ;


 /*instead*/  OCTopLoc_Location^ GetInitLocation() ;


virtual /*instead*/  void ResetLocation() override;


virtual /*instead*/  void SetLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc) override;


virtual /*instead*/  void Dump(Standard_OStream& S, System::Boolean FullDump) override;

//! gives the vertices of detected triangle... <br>
 /*instead*/  System::Boolean DetectedTriangle(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3) ;

//! Gets 2D nodes computed by entity using 3D nodes and viewer <br>
//!          parameters (see Project() method) <br>
 /*instead*/  System::Boolean DetectedTriangle2d(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2, OCNaroWrappers::OCgp_Pnt2d^ P3) ;

~OCSelect3D_SensitiveTriangulation()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
