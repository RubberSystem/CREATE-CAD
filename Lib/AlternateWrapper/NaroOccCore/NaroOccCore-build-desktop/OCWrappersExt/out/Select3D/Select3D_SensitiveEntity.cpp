// File generated by CPPExt (CPP file)
//

#include "Select3D_SensitiveEntity.h"
#include "../Converter.h"
#include "Select3D_Projector.h"
#include "../SelectBasics/SelectBasics_EntityOwner.h"
#include "../TopLoc/TopLoc_Location.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../Bnd/Bnd_Box2d.h"
#include "../gp/gp_Lin.h"


using namespace OCNaroWrappers;

OCSelect3D_SensitiveEntity::OCSelect3D_SensitiveEntity(Handle(Select3D_SensitiveEntity)* nativeHandle) : OCSelectBasics_SensitiveEntity((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Select3D_SensitiveEntity(*nativeHandle);
}

OCSelect3D_SensitiveEntity::OCSelect3D_SensitiveEntity(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId) : OCSelectBasics_SensitiveEntity((OCDummy^)nullptr)

{}

 System::Boolean OCSelect3D_SensitiveEntity::NeedsConversion()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveEntity*)nativeHandle))->NeedsConversion());
}

 System::Boolean OCSelect3D_SensitiveEntity::Is3D()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveEntity*)nativeHandle))->Is3D());
}

 void OCSelect3D_SensitiveEntity::Project(OCNaroWrappers::OCSelect3D_Projector^ aProjector)
{
  (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->Project(*((Handle_Select3D_Projector*)aProjector->Handle));
}

 Standard_Integer OCSelect3D_SensitiveEntity::MaxBoxes()
{
  return (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->MaxBoxes();
}

OCSelect3D_SensitiveEntity^ OCSelect3D_SensitiveEntity::GetConnected(OCNaroWrappers::OCTopLoc_Location^ aLocation)
{
  Handle(Select3D_SensitiveEntity) tmp = (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->GetConnected(*((TopLoc_Location*)aLocation->Handle));
  return gcnew OCSelect3D_SensitiveEntity(&tmp);
}

 System::Boolean OCSelect3D_SensitiveEntity::Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveEntity*)nativeHandle))->Matches(X, Y, aTol, DMin));
}

 System::Boolean OCSelect3D_SensitiveEntity::Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveEntity*)nativeHandle))->Matches(XMin, YMin, XMax, YMax, aTol));
}

 System::Boolean OCSelect3D_SensitiveEntity::Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveEntity*)nativeHandle))->Matches(*((TColgp_Array1OfPnt2d*)Polyline->Handle), *((Bnd_Box2d*)aBox->Handle), aTol));
}

OCgp_Lin^ OCSelect3D_SensitiveEntity::GetEyeLine(Standard_Real X, Standard_Real Y)
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->GetEyeLine(X, Y);
  return gcnew OCgp_Lin(tmp);
}

 Standard_Real OCSelect3D_SensitiveEntity::Depth()
{
  return (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->Depth();
}

 System::Boolean OCSelect3D_SensitiveEntity::HasLocation()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveEntity*)nativeHandle))->HasLocation());
}

OCTopLoc_Location^ OCSelect3D_SensitiveEntity::Location()
{
  TopLoc_Location* tmp = new TopLoc_Location();
  *tmp = (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->Location();
  return gcnew OCTopLoc_Location(tmp);
}

 void OCSelect3D_SensitiveEntity::ResetLocation()
{
  (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->ResetLocation();
}

 void OCSelect3D_SensitiveEntity::SetLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc)
{
  (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->SetLocation(*((TopLoc_Location*)aLoc->Handle));
}

 void OCSelect3D_SensitiveEntity::Dump(Standard_OStream& S, System::Boolean FullDump)
{
  (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->Dump(S, OCConverter::BooleanToStandardBoolean(FullDump));
}

 void OCSelect3D_SensitiveEntity::DumpBox(Standard_OStream& S, OCNaroWrappers::OCBnd_Box2d^ abox)
{
  Select3D_SensitiveEntity::DumpBox(S, *((Bnd_Box2d*)abox->Handle));
}

 void OCSelect3D_SensitiveEntity::UpdateLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc)
{
  (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->UpdateLocation(*((TopLoc_Location*)aLoc->Handle));
}

 void OCSelect3D_SensitiveEntity::SetLastPrj(OCNaroWrappers::OCSelect3D_Projector^ aPrj)
{
  (*((Handle_Select3D_SensitiveEntity*)nativeHandle))->SetLastPrj(*((Handle_Select3D_Projector*)aPrj->Handle));
}


