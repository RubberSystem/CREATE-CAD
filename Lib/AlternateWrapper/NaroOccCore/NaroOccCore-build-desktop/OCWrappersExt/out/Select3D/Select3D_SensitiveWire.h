// File generated by CPPExt (Transient)
//
#ifndef _Select3D_SensitiveWire_OCWrappers_HeaderFile
#define _Select3D_SensitiveWire_OCWrappers_HeaderFile

// include the wrapped class
#include <Select3D_SensitiveWire.hxx>
#include "../Converter.h"

#include "Select3D_SensitiveEntity.h"

#include "Select3D_SensitiveEntitySequence.h"


namespace OCNaroWrappers
{

ref class OCSelectBasics_EntityOwner;
ref class OCSelect3D_SensitiveEntity;
ref class OCSelect3D_Projector;
ref class OCSelectBasics_ListOfBox2d;
ref class OCTopLoc_Location;
ref class OCSelect3D_SensitiveEntitySequence;
ref class OCTColgp_Array1OfPnt2d;
ref class OCBnd_Box2d;
ref class OCgp_Lin;


//! A framework to define selection of a wire owner by an <br>
//! elastic wire band. <br>
public ref class OCSelect3D_SensitiveWire : OCSelect3D_SensitiveEntity {

protected:
  // dummy constructor;
  OCSelect3D_SensitiveWire(OCDummy^) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelect3D_SensitiveWire(Handle(Select3D_SensitiveWire)* nativeHandle);

// Methods PUBLIC

//! Constructs a sensitive wire object defined by the <br>
//! owner OwnerId, and the maximum number of <br>
//! sensitive rectangles MaxRect. <br>
OCSelect3D_SensitiveWire(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, Standard_Integer MaxRect);

//! Adds the sensitive entity aSensitive to this framework. <br>
 /*instead*/  void Add(OCNaroWrappers::OCSelect3D_SensitiveEntity^ aSensitive) ;

//! projection of the sensitive primitive in order to <br>
//!          get 2D boxes for the Sort Algorithm <br>
virtual /*instead*/  void Project(OCNaroWrappers::OCSelect3D_Projector^ aProjector) override;

//! gives the 2D boxes which represent the segment in the <br>
//!          selection process... <br>
virtual /*instead*/  void Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ boxes) ;


virtual /*instead*/  OCSelect3D_SensitiveEntity^ GetConnected(OCNaroWrappers::OCTopLoc_Location^ aLocation) override;

//! returns the sensitive edges stored in this wire <br>
 /*instead*/  void GetEdges(OCNaroWrappers::OCSelect3D_SensitiveEntitySequence^ theEdges) ;

//!  propagation of location on all the sensitive inside... <br>
virtual /*instead*/  void SetLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc) override;

//!  propagation of location on all the sensitive inside... <br>
virtual /*instead*/  void ResetLocation() override;

//! projection of the sensitive primitive in order to <br>
//!          get 2D boxes for the Sort Algorithm <br>
virtual /*instead*/  System::Boolean Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin) override;


virtual /*instead*/  System::Boolean Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol) override;


virtual /*instead*/  System::Boolean Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol) override;

//! returns the depth of the touched entity <br>
virtual /*instead*/  Standard_Real ComputeDepth(OCNaroWrappers::OCgp_Lin^ EyeLine) ;

//!returns <mymaxrect> <br>
virtual /*instead*/  Standard_Integer MaxBoxes() override;


virtual /*instead*/  void Dump(Standard_OStream& S, System::Boolean FullDump) override;

//! Sets the owner for all entities in wire <br>
virtual /*instead*/  void Set(OCNaroWrappers::OCSelectBasics_EntityOwner^ TheOwnerId) override;


virtual /*instead*/  void SetLastPrj(OCNaroWrappers::OCSelect3D_Projector^ aPrj) override;

//!returns <mymaxrect> <br>
 /*instead*/  OCSelect3D_SensitiveEntity^ GetLastDetected() ;

~OCSelect3D_SensitiveWire()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
