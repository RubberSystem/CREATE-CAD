// File generated by CPPExt (CPP file)
//

#include "Select3D_SensitiveSegment.h"
#include "../Converter.h"
#include "../SelectBasics/SelectBasics_EntityOwner.h"
#include "../gp/gp_Pnt.h"
#include "Select3D_Projector.h"
#include "../SelectBasics/SelectBasics_ListOfBox2d.h"
#include "Select3D_SensitiveEntity.h"
#include "../TopLoc/TopLoc_Location.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../Bnd/Bnd_Box2d.h"
#include "../gp/gp_Lin.h"


using namespace OCNaroWrappers;

OCSelect3D_SensitiveSegment::OCSelect3D_SensitiveSegment(Handle(Select3D_SensitiveSegment)* nativeHandle) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Select3D_SensitiveSegment(*nativeHandle);
}

OCSelect3D_SensitiveSegment::OCSelect3D_SensitiveSegment(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCgp_Pnt^ FirstP, OCNaroWrappers::OCgp_Pnt^ LastP, Standard_Integer MaxRect) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_SensitiveSegment(new Select3D_SensitiveSegment(*((Handle_SelectBasics_EntityOwner*)OwnerId->Handle), *((gp_Pnt*)FirstP->Handle), *((gp_Pnt*)LastP->Handle), MaxRect));
}

 void OCSelect3D_SensitiveSegment::Set(Standard_Integer MaxRect)
{
  (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->Set(MaxRect);
}

 void OCSelect3D_SensitiveSegment::StartPoint(OCNaroWrappers::OCgp_Pnt^ aPt)
{
  (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->StartPoint(*((gp_Pnt*)aPt->Handle));
}

 void OCSelect3D_SensitiveSegment::EndPoint(OCNaroWrappers::OCgp_Pnt^ aPt)
{
  (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->EndPoint(*((gp_Pnt*)aPt->Handle));
}

OCgp_Pnt^ OCSelect3D_SensitiveSegment::StartPoint()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->StartPoint();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCSelect3D_SensitiveSegment::EndPoint()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->EndPoint();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt2d^ OCSelect3D_SensitiveSegment::StartPoint2d()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->StartPoint2d();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Pnt2d^ OCSelect3D_SensitiveSegment::EndPoint2d()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->EndPoint2d();
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCSelect3D_SensitiveSegment::Project(OCNaroWrappers::OCSelect3D_Projector^ aProjector)
{
  (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->Project(*((Handle_Select3D_Projector*)aProjector->Handle));
}

 void OCSelect3D_SensitiveSegment::Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ boxes)
{
  (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->Areas(*((SelectBasics_ListOfBox2d*)boxes->Handle));
}

OCSelect3D_SensitiveEntity^ OCSelect3D_SensitiveSegment::GetConnected(OCNaroWrappers::OCTopLoc_Location^ aLocation)
{
  Handle(Select3D_SensitiveEntity) tmp = (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->GetConnected(*((TopLoc_Location*)aLocation->Handle));
  return gcnew OCSelect3D_SensitiveEntity(&tmp);
}

 System::Boolean OCSelect3D_SensitiveSegment::Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveSegment*)nativeHandle))->Matches(X, Y, aTol, DMin));
}

 System::Boolean OCSelect3D_SensitiveSegment::Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveSegment*)nativeHandle))->Matches(XMin, YMin, XMax, YMax, aTol));
}

 System::Boolean OCSelect3D_SensitiveSegment::Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveSegment*)nativeHandle))->Matches(*((TColgp_Array1OfPnt2d*)Polyline->Handle), *((Bnd_Box2d*)aBox->Handle), aTol));
}

 Standard_Real OCSelect3D_SensitiveSegment::ComputeDepth(OCNaroWrappers::OCgp_Lin^ EyeLine)
{
  return (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->ComputeDepth(*((gp_Lin*)EyeLine->Handle));
}

 Standard_Integer OCSelect3D_SensitiveSegment::MaxBoxes()
{
  return (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->MaxBoxes();
}

 void OCSelect3D_SensitiveSegment::Dump(Standard_OStream& S, System::Boolean FullDump)
{
  (*((Handle_Select3D_SensitiveSegment*)nativeHandle))->Dump(S, OCConverter::BooleanToStandardBoolean(FullDump));
}


