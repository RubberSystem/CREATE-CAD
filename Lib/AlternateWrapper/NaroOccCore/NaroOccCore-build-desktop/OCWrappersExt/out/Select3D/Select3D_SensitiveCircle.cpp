// File generated by CPPExt (CPP file)
//

#include "Select3D_SensitiveCircle.h"
#include "../Converter.h"
#include "../Geom/Geom_Circle.h"
#include "../SelectBasics/SelectBasics_EntityOwner.h"
#include "../TColgp/TColgp_HArray1OfPnt.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../Bnd/Bnd_Box2d.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Pnt.h"
#include "Select3D_SensitiveEntity.h"
#include "../TopLoc/TopLoc_Location.h"
#include "Select3D_Projector.h"


using namespace OCNaroWrappers;

OCSelect3D_SensitiveCircle::OCSelect3D_SensitiveCircle(Handle(Select3D_SensitiveCircle)* nativeHandle) : OCSelect3D_SensitivePoly((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Select3D_SensitiveCircle(*nativeHandle);
}

OCSelect3D_SensitiveCircle::OCSelect3D_SensitiveCircle(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCGeom_Circle^ TheCircle, System::Boolean FilledCircle, Standard_Integer NbOfPoints) : OCSelect3D_SensitivePoly((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_SensitiveCircle(new Select3D_SensitiveCircle(*((Handle_SelectBasics_EntityOwner*)OwnerId->Handle), *((Handle_Geom_Circle*)TheCircle->Handle), OCConverter::BooleanToStandardBoolean(FilledCircle), NbOfPoints));
}

OCSelect3D_SensitiveCircle::OCSelect3D_SensitiveCircle(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCGeom_Circle^ TheCircle, Standard_Real u1, Standard_Real u2, System::Boolean FilledCircle, Standard_Integer NbOfPoints) : OCSelect3D_SensitivePoly((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_SensitiveCircle(new Select3D_SensitiveCircle(*((Handle_SelectBasics_EntityOwner*)OwnerId->Handle), *((Handle_Geom_Circle*)TheCircle->Handle), u1, u2, OCConverter::BooleanToStandardBoolean(FilledCircle), NbOfPoints));
}

OCSelect3D_SensitiveCircle::OCSelect3D_SensitiveCircle(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCTColgp_HArray1OfPnt^ apolyg3d, System::Boolean FilledCircle) : OCSelect3D_SensitivePoly((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_SensitiveCircle(new Select3D_SensitiveCircle(*((Handle_SelectBasics_EntityOwner*)OwnerId->Handle), *((Handle_TColgp_HArray1OfPnt*)apolyg3d->Handle), OCConverter::BooleanToStandardBoolean(FilledCircle)));
}

OCSelect3D_SensitiveCircle::OCSelect3D_SensitiveCircle(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCTColgp_Array1OfPnt^ apolyg3d, System::Boolean FilledCircle) : OCSelect3D_SensitivePoly((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_SensitiveCircle(new Select3D_SensitiveCircle(*((Handle_SelectBasics_EntityOwner*)OwnerId->Handle), *((TColgp_Array1OfPnt*)apolyg3d->Handle), OCConverter::BooleanToStandardBoolean(FilledCircle)));
}

 System::Boolean OCSelect3D_SensitiveCircle::Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveCircle*)nativeHandle))->Matches(X, Y, aTol, DMin));
}

 System::Boolean OCSelect3D_SensitiveCircle::Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveCircle*)nativeHandle))->Matches(XMin, YMin, XMax, YMax, aTol));
}

 System::Boolean OCSelect3D_SensitiveCircle::Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveCircle*)nativeHandle))->Matches(*((TColgp_Array1OfPnt2d*)Polyline->Handle), *((Bnd_Box2d*)aBox->Handle), aTol));
}

 Standard_Real OCSelect3D_SensitiveCircle::ComputeDepth(OCNaroWrappers::OCgp_Lin^ EyeLine)
{
  return (*((Handle_Select3D_SensitiveCircle*)nativeHandle))->ComputeDepth(*((gp_Lin*)EyeLine->Handle));
}

 void OCSelect3D_SensitiveCircle::ArrayBounds(Standard_Integer& Low, Standard_Integer& Up)
{
  (*((Handle_Select3D_SensitiveCircle*)nativeHandle))->ArrayBounds(Low, Up);
}

OCgp_Pnt^ OCSelect3D_SensitiveCircle::GetPoint3d(Standard_Integer rank)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Select3D_SensitiveCircle*)nativeHandle))->GetPoint3d(rank);
  return gcnew OCgp_Pnt(tmp);
}

 void OCSelect3D_SensitiveCircle::Dump(Standard_OStream& S, System::Boolean FullDump)
{
  (*((Handle_Select3D_SensitiveCircle*)nativeHandle))->Dump(S, OCConverter::BooleanToStandardBoolean(FullDump));
}

OCSelect3D_SensitiveEntity^ OCSelect3D_SensitiveCircle::GetConnected(OCNaroWrappers::OCTopLoc_Location^ theLocation)
{
  Handle(Select3D_SensitiveEntity) tmp = (*((Handle_Select3D_SensitiveCircle*)nativeHandle))->GetConnected(*((TopLoc_Location*)theLocation->Handle));
  return gcnew OCSelect3D_SensitiveEntity(&tmp);
}

 void OCSelect3D_SensitiveCircle::Project(OCNaroWrappers::OCSelect3D_Projector^ aProjector)
{
  (*((Handle_Select3D_SensitiveCircle*)nativeHandle))->Project(*((Handle_Select3D_Projector*)aProjector->Handle));
}


