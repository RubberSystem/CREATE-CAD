// File generated by CPPExt (Transient)
//
#ifndef _Select3D_SensitiveTriangle_OCWrappers_HeaderFile
#define _Select3D_SensitiveTriangle_OCWrappers_HeaderFile

// include the wrapped class
#include <Select3D_SensitiveTriangle.hxx>
#include "../Converter.h"

#include "Select3D_SensitivePoly.h"

#include "Select3D_TypeOfSensitivity.h"


namespace OCNaroWrappers
{

ref class OCSelectBasics_EntityOwner;
ref class OCgp_Pnt;
ref class OCTColgp_Array1OfPnt2d;
ref class OCBnd_Box2d;
ref class OCgp_Lin;
ref class OCgp_XY;
ref class OCSelect3D_SensitiveEntity;
ref class OCTopLoc_Location;


//! A framework to define selection of triangles in a view. <br>
//! This comes into play in the detection of meshing and triangulation in surfaces. <br>
//! In some cases this class can raise Standard_ConstructionError and <br>
//! Standard_OutOfRange exceptions. For more details see Select3D_SensitivePoly. <br>
public ref class OCSelect3D_SensitiveTriangle : OCSelect3D_SensitivePoly {

protected:
  // dummy constructor;
  OCSelect3D_SensitiveTriangle(OCDummy^) : OCSelect3D_SensitivePoly((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelect3D_SensitiveTriangle(Handle(Select3D_SensitiveTriangle)* nativeHandle);

// Methods PUBLIC

//! Constructs a sensitive triangle object defined by the <br>
//! owner OwnerId, the points P1, P2, P3, and the type of sensitivity Sensitivity. <br>
OCSelect3D_SensitiveTriangle(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3, OCSelect3D_TypeOfSensitivity Sensitivity);


virtual /*instead*/  System::Boolean Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin) override;


virtual /*instead*/  System::Boolean Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol) override;


virtual /*instead*/  System::Boolean Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol) override;


virtual /*instead*/  Standard_Real ComputeDepth(OCNaroWrappers::OCgp_Lin^ EyeLine) ;

//! Returns the 3D points P1, P2, P3 used at the time of construction. <br>
 /*instead*/  void Points3D(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3) ;

//! Returns the center point of the sensitive triangle created at construction time. <br>
 /*instead*/  OCgp_Pnt^ Center3D() ;

//! WARNING : the returned Values are the original values <br>
//!          without the stored  location (if there's one). <br>
//!          To get the genuine value, One must apply this location <br>
//!          (Method Location() ) <br>
 /*instead*/  OCgp_XY^ Center2D() ;


 /*instead*/  Standard_Integer Status(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& Dmin) ;

//! Dmin gives the distance between the cdg and aPoint return <br>
static /*instead*/  Standard_Integer Status(OCNaroWrappers::OCgp_XY^ p0, OCNaroWrappers::OCgp_XY^ p1, OCNaroWrappers::OCgp_XY^ p2, OCNaroWrappers::OCgp_XY^ aPoint, Standard_Real aTol, Standard_Real& Dmin) ;


virtual /*instead*/  void Dump(Standard_OStream& S, System::Boolean FullDump) override;

//! Returns the copy of this <br>
virtual /*instead*/  OCSelect3D_SensitiveEntity^ GetConnected(OCNaroWrappers::OCTopLoc_Location^ theLocation) override;

~OCSelect3D_SensitiveTriangle()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
