// File generated by CPPExt (CPP file)
//

#include "Select3D_SensitiveBox.h"
#include "../Converter.h"
#include "../SelectBasics/SelectBasics_EntityOwner.h"
#include "../Bnd/Bnd_Box.h"
#include "Select3D_Projector.h"
#include "../SelectBasics/SelectBasics_ListOfBox2d.h"
#include "Select3D_SensitiveEntity.h"
#include "../TopLoc/TopLoc_Location.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../Bnd/Bnd_Box2d.h"
#include "../gp/gp_Lin.h"


using namespace OCNaroWrappers;

OCSelect3D_SensitiveBox::OCSelect3D_SensitiveBox(Handle(Select3D_SensitiveBox)* nativeHandle) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Select3D_SensitiveBox(*nativeHandle);
}

OCSelect3D_SensitiveBox::OCSelect3D_SensitiveBox(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCBnd_Box^ BoundingBox) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_SensitiveBox(new Select3D_SensitiveBox(*((Handle_SelectBasics_EntityOwner*)OwnerId->Handle), *((Bnd_Box*)BoundingBox->Handle)));
}

OCSelect3D_SensitiveBox::OCSelect3D_SensitiveBox(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, Standard_Real XMin, Standard_Real YMin, Standard_Real ZMin, Standard_Real XMax, Standard_Real YMax, Standard_Real ZMax) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Select3D_SensitiveBox(new Select3D_SensitiveBox(*((Handle_SelectBasics_EntityOwner*)OwnerId->Handle), XMin, YMin, ZMin, XMax, YMax, ZMax));
}

 void OCSelect3D_SensitiveBox::Project(OCNaroWrappers::OCSelect3D_Projector^ aProjector)
{
  (*((Handle_Select3D_SensitiveBox*)nativeHandle))->Project(*((Handle_Select3D_Projector*)aProjector->Handle));
}

 void OCSelect3D_SensitiveBox::Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ boxes)
{
  (*((Handle_Select3D_SensitiveBox*)nativeHandle))->Areas(*((SelectBasics_ListOfBox2d*)boxes->Handle));
}

OCSelect3D_SensitiveEntity^ OCSelect3D_SensitiveBox::GetConnected(OCNaroWrappers::OCTopLoc_Location^ aLocation)
{
  Handle(Select3D_SensitiveEntity) tmp = (*((Handle_Select3D_SensitiveBox*)nativeHandle))->GetConnected(*((TopLoc_Location*)aLocation->Handle));
  return gcnew OCSelect3D_SensitiveEntity(&tmp);
}

 System::Boolean OCSelect3D_SensitiveBox::Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveBox*)nativeHandle))->Matches(X, Y, aTol, DMin));
}

 System::Boolean OCSelect3D_SensitiveBox::Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveBox*)nativeHandle))->Matches(XMin, YMin, XMax, YMax, aTol));
}

 System::Boolean OCSelect3D_SensitiveBox::Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Select3D_SensitiveBox*)nativeHandle))->Matches(*((TColgp_Array1OfPnt2d*)Polyline->Handle), *((Bnd_Box2d*)aBox->Handle), aTol));
}

 Standard_Real OCSelect3D_SensitiveBox::ComputeDepth(OCNaroWrappers::OCgp_Lin^ EyeLine)
{
  return (*((Handle_Select3D_SensitiveBox*)nativeHandle))->ComputeDepth(*((gp_Lin*)EyeLine->Handle));
}

 void OCSelect3D_SensitiveBox::Dump(Standard_OStream& S, System::Boolean FullDump)
{
  (*((Handle_Select3D_SensitiveBox*)nativeHandle))->Dump(S, OCConverter::BooleanToStandardBoolean(FullDump));
}

OCBnd_Box^ OCSelect3D_SensitiveBox::Box()
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = (*((Handle_Select3D_SensitiveBox*)nativeHandle))->Box();
  return gcnew OCBnd_Box(tmp);
}


