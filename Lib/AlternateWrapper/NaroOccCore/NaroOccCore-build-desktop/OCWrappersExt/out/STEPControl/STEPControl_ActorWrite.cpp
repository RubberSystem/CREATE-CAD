// File generated by CPPExt (CPP file)
//

#include "STEPControl_ActorWrite.h"
#include "../Converter.h"
#include "../Transfer/Transfer_Finder.h"
#include "../Transfer/Transfer_Binder.h"
#include "../Transfer/Transfer_FinderProcess.h"
#include "../StepShape/StepShape_ShapeDefinitionRepresentation.h"
#include "../StepGeom/StepGeom_Axis2Placement3d.h"
#include "../TopTools/TopTools_HSequenceOfShape.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../StepShape/StepShape_NonManifoldSurfaceShapeRepresentation.h"


using namespace OCNaroWrappers;

OCSTEPControl_ActorWrite::OCSTEPControl_ActorWrite(Handle(STEPControl_ActorWrite)* nativeHandle) : OCTransfer_ActorOfFinderProcess((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_STEPControl_ActorWrite(*nativeHandle);
}

OCSTEPControl_ActorWrite::OCSTEPControl_ActorWrite() : OCTransfer_ActorOfFinderProcess((OCDummy^)nullptr)

{
  nativeHandle = new Handle_STEPControl_ActorWrite(new STEPControl_ActorWrite());
}

 System::Boolean OCSTEPControl_ActorWrite::Recognize(OCNaroWrappers::OCTransfer_Finder^ start)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_STEPControl_ActorWrite*)nativeHandle))->Recognize(*((Handle_Transfer_Finder*)start->Handle)));
}

OCTransfer_Binder^ OCSTEPControl_ActorWrite::Transfer(OCNaroWrappers::OCTransfer_Finder^ start, OCNaroWrappers::OCTransfer_FinderProcess^ FP)
{
  Handle(Transfer_Binder) tmp = (*((Handle_STEPControl_ActorWrite*)nativeHandle))->Transfer(*((Handle_Transfer_Finder*)start->Handle), *((Handle_Transfer_FinderProcess*)FP->Handle));
  return gcnew OCTransfer_Binder(&tmp);
}

OCTransfer_Binder^ OCSTEPControl_ActorWrite::TransferSubShape(OCNaroWrappers::OCTransfer_Finder^ start, OCNaroWrappers::OCStepShape_ShapeDefinitionRepresentation^ SDR, OCNaroWrappers::OCStepGeom_Axis2Placement3d^ AX1, OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCTopTools_HSequenceOfShape^ shapeGroup, System::Boolean isManifold)
{
  Handle(Transfer_Binder) tmp = (*((Handle_STEPControl_ActorWrite*)nativeHandle))->TransferSubShape(*((Handle_Transfer_Finder*)start->Handle), *((StepShape_ShapeDefinitionRepresentation*)SDR->Handle), *((StepGeom_Axis2Placement3d*)AX1->Handle), *((Handle_Transfer_FinderProcess*)FP->Handle), *((Handle_TopTools_HSequenceOfShape*)shapeGroup->Handle), OCConverter::BooleanToStandardBoolean(isManifold));
  return gcnew OCTransfer_Binder(&tmp);
}

OCTransfer_Binder^ OCSTEPControl_ActorWrite::TransferShape(OCNaroWrappers::OCTransfer_Finder^ start, OCNaroWrappers::OCStepShape_ShapeDefinitionRepresentation^ SDR, OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCTopTools_HSequenceOfShape^ shapeGroup, System::Boolean isManifold)
{
  Handle(Transfer_Binder) tmp = (*((Handle_STEPControl_ActorWrite*)nativeHandle))->TransferShape(*((Handle_Transfer_Finder*)start->Handle), *((StepShape_ShapeDefinitionRepresentation*)SDR->Handle), *((Handle_Transfer_FinderProcess*)FP->Handle), *((Handle_TopTools_HSequenceOfShape*)shapeGroup->Handle), OCConverter::BooleanToStandardBoolean(isManifold));
  return gcnew OCTransfer_Binder(&tmp);
}

OCTransfer_Binder^ OCSTEPControl_ActorWrite::TransferCompound(OCNaroWrappers::OCTransfer_Finder^ start, OCNaroWrappers::OCStepShape_ShapeDefinitionRepresentation^ SDR, OCNaroWrappers::OCTransfer_FinderProcess^ FP)
{
  Handle(Transfer_Binder) tmp = (*((Handle_STEPControl_ActorWrite*)nativeHandle))->TransferCompound(*((Handle_Transfer_Finder*)start->Handle), *((StepShape_ShapeDefinitionRepresentation*)SDR->Handle), *((Handle_Transfer_FinderProcess*)FP->Handle));
  return gcnew OCTransfer_Binder(&tmp);
}

 void OCSTEPControl_ActorWrite::SetMode(OCSTEPControl_StepModelType M)
{
  (*((Handle_STEPControl_ActorWrite*)nativeHandle))->SetMode((STEPControl_StepModelType)M);
}

 OCSTEPControl_StepModelType OCSTEPControl_ActorWrite::Mode()
{
  return (OCSTEPControl_StepModelType)((*((Handle_STEPControl_ActorWrite*)nativeHandle))->Mode());
}

 void OCSTEPControl_ActorWrite::SetGroupMode(Standard_Integer mode)
{
  (*((Handle_STEPControl_ActorWrite*)nativeHandle))->SetGroupMode(mode);
}

 Standard_Integer OCSTEPControl_ActorWrite::GroupMode()
{
  return (*((Handle_STEPControl_ActorWrite*)nativeHandle))->GroupMode();
}

 void OCSTEPControl_ActorWrite::SetTolerance(Standard_Real Tol)
{
  (*((Handle_STEPControl_ActorWrite*)nativeHandle))->SetTolerance(Tol);
}

 System::Boolean OCSTEPControl_ActorWrite::IsAssembly(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_STEPControl_ActorWrite*)nativeHandle))->IsAssembly(*((TopoDS_Shape*)S->Handle)));
}


