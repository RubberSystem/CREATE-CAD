// File generated by CPPExt (Transient)
//
#ifndef _Xw_MarkMap_OCWrappers_HeaderFile
#define _Xw_MarkMap_OCWrappers_HeaderFile

// include the wrapped class
#include <Xw_MarkMap.hxx>
#include "../Converter.h"

#include "../Standard/Standard_Transient.h"



namespace OCNaroWrappers
{

ref class OCXw_GraphicDevice;
ref class OCAspect_MarkMapEntry;
ref class OCAspect_MarkMap;


//! This class defines a MarkMap object. <br>
public ref class OCXw_MarkMap : OCStandard_Transient {

protected:
  // dummy constructor;
  OCXw_MarkMap(OCDummy^) : OCStandard_Transient((OCDummy^)nullptr) {};

public:

// constructor from native
OCXw_MarkMap(Handle(Xw_MarkMap)* nativeHandle);

// Methods PUBLIC

//! Creates a MarkMap with unallocated MarkMapEntry. <br>
//!  Warning: Raises if MarkMap creation failed according <br>
//!	    to the supported hardware <br>
OCXw_MarkMap(System::String^ Connexion);

//! Modifies an entry already defined or Add the Entry <br>
//!	    in the marker map <me> if it don't exist. <br>
//!  Warning: Raises if MarkMap size is exceeded, <br>
//!	    or MarkMap is not defined properly, <br>
//!	    or MarkMapEntry Index is out of range according <br>
//!	    to the supported hardware <br>
virtual /*instead*/  void SetEntry(OCNaroWrappers::OCAspect_MarkMapEntry^ anEntry) ;

//! Modifies all entries from a new Markmap <br>
//!  Warning: Raises if MarkMap size is exceeded, <br>
//!	    or MarkMap is not defined properly, <br>
//!	    or One of new MarkMapEntry Index is out of range according <br>
//!	    to the supported hardware <br>
virtual /*instead*/  void SetEntries(OCNaroWrappers::OCAspect_MarkMap^ aMarkmap) ;

//! Returns the Number of Free Marks in the Typemap <br>
//!	    depending of the HardWare <br>
//!  Warning: Raises if MarkMap is not defined properly <br>
 /*instead*/  Standard_Integer FreeMarkers() ;

~OCXw_MarkMap()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
