// File generated by CPPExt (CPP file)
//

#include "Xw_Driver.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "Xw_HListOfMFTFonts.h"
#include "../TShort/TShort_HArray1OfShortReal.h"
#include "Xw_TextManager.h"
#include "Xw_Window.h"
#include "../Aspect/Aspect_ColorMap.h"
#include "../Aspect/Aspect_TypeMap.h"
#include "../Aspect/Aspect_WidthMap.h"
#include "../Aspect/Aspect_FontMap.h"
#include "../Aspect/Aspect_MarkMap.h"
#include "../Standard/Standard_Transient.h"
#include "../TShort/TShort_Array1OfShortReal.h"
#include "../TCollection/TCollection_ExtendedString.h"


using namespace OCNaroWrappers;

OCXw_Driver::OCXw_Driver(Handle(Xw_Driver)* nativeHandle) : OCAspect_WindowDriver((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Xw_Driver(*nativeHandle);
}

OCXw_Driver::OCXw_Driver(OCNaroWrappers::OCXw_Window^ aWindow) : OCAspect_WindowDriver((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Xw_Driver(new Xw_Driver(*((Handle_Xw_Window*)aWindow->Handle)));
}

 void OCXw_Driver::BeginDraw(System::Boolean DoubleBuffer, Standard_Integer aRetainBuffer)
{
  (*((Handle_Xw_Driver*)nativeHandle))->BeginDraw(OCConverter::BooleanToStandardBoolean(DoubleBuffer), aRetainBuffer);
}

 void OCXw_Driver::EndDraw(System::Boolean Synchronize)
{
  (*((Handle_Xw_Driver*)nativeHandle))->EndDraw(OCConverter::BooleanToStandardBoolean(Synchronize));
}

 OCAspect_TypeOfResize OCXw_Driver::ResizeSpace()
{
  return (OCAspect_TypeOfResize)((*((Handle_Xw_Driver*)nativeHandle))->ResizeSpace());
}

 void OCXw_Driver::SetDrawMode(OCAspect_TypeOfDrawMode aMode)
{
  (*((Handle_Xw_Driver*)nativeHandle))->SetDrawMode((Aspect_TypeOfDrawMode)aMode);
}

 void OCXw_Driver::SetLineAttrib(Standard_Integer ColorIndex, Standard_Integer TypeIndex, Standard_Integer WidthIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->SetLineAttrib(ColorIndex, TypeIndex, WidthIndex);
}

 void OCXw_Driver::SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->SetTextAttrib(ColorIndex, FontIndex);
}

 void OCXw_Driver::SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex, Quantity_PlaneAngle aSlant, Quantity_Factor aHScale, Quantity_Factor aWScale, System::Boolean isUnderlined)
{
  (*((Handle_Xw_Driver*)nativeHandle))->SetTextAttrib(ColorIndex, FontIndex, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined));
}

 void OCXw_Driver::SetPolyAttrib(Standard_Integer ColorIndex, Standard_Integer TileIndex, System::Boolean DrawEdgeFlag)
{
  (*((Handle_Xw_Driver*)nativeHandle))->SetPolyAttrib(ColorIndex, TileIndex, OCConverter::BooleanToStandardBoolean(DrawEdgeFlag));
}

 void OCXw_Driver::SetMarkerAttrib(Standard_Integer ColorIndex, Standard_Integer EdgeWidthIndex, System::Boolean FillMarker)
{
  (*((Handle_Xw_Driver*)nativeHandle))->SetMarkerAttrib(ColorIndex, EdgeWidthIndex, OCConverter::BooleanToStandardBoolean(FillMarker));
}

 System::Boolean OCXw_Driver::IsKnownImage(OCNaroWrappers::OCStandard_Transient^ anImage)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Driver*)nativeHandle))->IsKnownImage(*((Handle_Standard_Transient*)anImage->Handle)));
}

 System::Boolean OCXw_Driver::SizeOfImageFile(System::String^ anImageFile, Standard_Integer& aWidth, Standard_Integer& aHeight)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Driver*)nativeHandle))->SizeOfImageFile(OCConverter::StringToStandardCString(anImageFile), aWidth, aHeight));
}

 void OCXw_Driver::ClearImage(OCNaroWrappers::OCStandard_Transient^ anImageId)
{
  (*((Handle_Xw_Driver*)nativeHandle))->ClearImage(*((Handle_Standard_Transient*)anImageId->Handle));
}

 void OCXw_Driver::ClearImageFile(System::String^ anImageFile)
{
  (*((Handle_Xw_Driver*)nativeHandle))->ClearImageFile(OCConverter::StringToStandardCString(anImageFile));
}

 void OCXw_Driver::DrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY);
}

 void OCXw_Driver::DrawImageFile(System::String^ anImageFile, Standard_ShortReal aX, Standard_ShortReal aY, Quantity_Factor aScale)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawImageFile(OCConverter::StringToStandardCString(anImageFile), aX, aY, aScale);
}

 void OCXw_Driver::FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer Width, Standard_Integer Height, Standard_Address anArrayOfPixels)
{
  (*((Handle_Xw_Driver*)nativeHandle))->FillAndDrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY, Width, Height, anArrayOfPixels);
}

 void OCXw_Driver::FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer anIndexOfLine, Standard_Integer Width, Standard_Integer Height, Standard_Address anArrayOfPixels)
{
  (*((Handle_Xw_Driver*)nativeHandle))->FillAndDrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY, anIndexOfLine, Width, Height, anArrayOfPixels);
}

 void OCXw_Driver::DrawPolyline(OCNaroWrappers::OCTShort_Array1OfShortReal^ ListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ ListY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawPolyline(*((TShort_Array1OfShortReal*)ListX->Handle), *((TShort_Array1OfShortReal*)ListY->Handle));
}

 void OCXw_Driver::DrawPolygon(OCNaroWrappers::OCTShort_Array1OfShortReal^ ListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ ListY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawPolygon(*((TShort_Array1OfShortReal*)ListX->Handle), *((TShort_Array1OfShortReal*)ListY->Handle));
}

 void OCXw_Driver::DrawSegment(Standard_ShortReal X1, Standard_ShortReal Y1, Standard_ShortReal X2, Standard_ShortReal Y2)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawSegment(X1, Y1, X2, Y2);
}

 void OCXw_Driver::DrawText(OCNaroWrappers::OCTCollection_ExtendedString^ Text, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Standard_ShortReal anAngle, OCAspect_TypeOfText aType)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawText(*((TCollection_ExtendedString*)Text->Handle), Xpos, Ypos, anAngle, (Aspect_TypeOfText)aType);
}

 void OCXw_Driver::DrawText(System::String^ Text, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Standard_ShortReal anAngle, OCAspect_TypeOfText aType)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawText(OCConverter::StringToStandardCString(Text), Xpos, Ypos, anAngle, (Aspect_TypeOfText)aType);
}

 void OCXw_Driver::DrawPolyText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Quantity_Ratio aMarge, Standard_ShortReal anAngle, OCAspect_TypeOfText aType)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawPolyText(*((TCollection_ExtendedString*)aText->Handle), Xpos, Ypos, aMarge, anAngle, (Aspect_TypeOfText)aType);
}

 void OCXw_Driver::DrawPolyText(System::String^ aText, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Quantity_Ratio aMarge, Standard_ShortReal anAngle, OCAspect_TypeOfText aType)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawPolyText(OCConverter::StringToStandardCString(aText), Xpos, Ypos, aMarge, anAngle, (Aspect_TypeOfText)aType);
}

 void OCXw_Driver::DrawPoint(Standard_ShortReal X, Standard_ShortReal Y)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawPoint(X, Y);
}

 void OCXw_Driver::DrawMarker(Standard_Integer aMarker, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Standard_ShortReal Width, Standard_ShortReal Height, Standard_ShortReal Angle)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawMarker(aMarker, Xpos, Ypos, Width, Height, Angle);
}

 System::Boolean OCXw_Driver::DrawArc(Standard_ShortReal X, Standard_ShortReal Y, Standard_ShortReal aXradius, Standard_ShortReal aYradius, Standard_ShortReal aStartAngle, Standard_ShortReal anOpenAngle)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Driver*)nativeHandle))->DrawArc(X, Y, aXradius, aYradius, aStartAngle, anOpenAngle));
}

 System::Boolean OCXw_Driver::DrawPolyArc(Standard_ShortReal X, Standard_ShortReal Y, Standard_ShortReal anXradius, Standard_ShortReal anYradius, Standard_ShortReal aStartAngle, Standard_ShortReal anOpenAngle)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Driver*)nativeHandle))->DrawPolyArc(X, Y, anXradius, anYradius, aStartAngle, anOpenAngle));
}

 void OCXw_Driver::BeginPolyline(Standard_Integer aNumber)
{
  (*((Handle_Xw_Driver*)nativeHandle))->BeginPolyline(aNumber);
}

 void OCXw_Driver::BeginPolygon(Standard_Integer aNumber)
{
  (*((Handle_Xw_Driver*)nativeHandle))->BeginPolygon(aNumber);
}

 void OCXw_Driver::BeginSegments()
{
  (*((Handle_Xw_Driver*)nativeHandle))->BeginSegments();
}

 void OCXw_Driver::BeginArcs()
{
  (*((Handle_Xw_Driver*)nativeHandle))->BeginArcs();
}

 void OCXw_Driver::BeginPolyArcs()
{
  (*((Handle_Xw_Driver*)nativeHandle))->BeginPolyArcs();
}

 void OCXw_Driver::BeginMarkers()
{
  (*((Handle_Xw_Driver*)nativeHandle))->BeginMarkers();
}

 void OCXw_Driver::BeginPoints()
{
  (*((Handle_Xw_Driver*)nativeHandle))->BeginPoints();
}

 void OCXw_Driver::ClosePrimitive()
{
  (*((Handle_Xw_Driver*)nativeHandle))->ClosePrimitive();
}

 System::Boolean OCXw_Driver::OpenBuffer(Standard_Integer aRetainBuffer, Standard_ShortReal aPivotX, Standard_ShortReal aPivotY, Standard_Integer aWidthIndex, Standard_Integer aColorIndex, Standard_Integer aFontIndex, OCAspect_TypeOfDrawMode aDrawMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Driver*)nativeHandle))->OpenBuffer(aRetainBuffer, aPivotX, aPivotY, aWidthIndex, aColorIndex, aFontIndex, (Aspect_TypeOfDrawMode)aDrawMode));
}

 void OCXw_Driver::CloseBuffer(Standard_Integer aRetainBuffer)
{
  (*((Handle_Xw_Driver*)nativeHandle))->CloseBuffer(aRetainBuffer);
}

 void OCXw_Driver::ClearBuffer(Standard_Integer aRetainBuffer)
{
  (*((Handle_Xw_Driver*)nativeHandle))->ClearBuffer(aRetainBuffer);
}

 void OCXw_Driver::DrawBuffer(Standard_Integer aRetainBuffer)
{
  (*((Handle_Xw_Driver*)nativeHandle))->DrawBuffer(aRetainBuffer);
}

 void OCXw_Driver::EraseBuffer(Standard_Integer aRetainBuffer)
{
  (*((Handle_Xw_Driver*)nativeHandle))->EraseBuffer(aRetainBuffer);
}

 void OCXw_Driver::MoveBuffer(Standard_Integer aRetainBuffer, Standard_ShortReal aPivotX, Standard_ShortReal aPivotY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->MoveBuffer(aRetainBuffer, aPivotX, aPivotY);
}

 void OCXw_Driver::ScaleBuffer(Standard_Integer aRetainBuffer, Quantity_Factor aScaleX, Quantity_Factor aScaleY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->ScaleBuffer(aRetainBuffer, aScaleX, aScaleY);
}

 void OCXw_Driver::RotateBuffer(Standard_Integer aRetainBuffer, Quantity_PlaneAngle anAngle)
{
  (*((Handle_Xw_Driver*)nativeHandle))->RotateBuffer(aRetainBuffer, anAngle);
}

 void OCXw_Driver::WorkSpace(Quantity_Length& Width, Quantity_Length& Heigth)
{
  (*((Handle_Xw_Driver*)nativeHandle))->WorkSpace(Width, Heigth);
}

 void OCXw_Driver::TextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_Integer aFontIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->TextSize(*((TCollection_ExtendedString*)aText->Handle), aWidth, aHeight, aFontIndex);
}

 void OCXw_Driver::TextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_ShortReal& anXoffset, Standard_ShortReal& anYoffset, Standard_Integer aFontIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->TextSize(*((TCollection_ExtendedString*)aText->Handle), aWidth, aHeight, anXoffset, anYoffset, aFontIndex);
}

 void OCXw_Driver::TextSize(System::String^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_ShortReal& anXoffset, Standard_ShortReal& anYoffset, Standard_Integer aFontIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->TextSize(OCConverter::StringToStandardCString(aText), aWidth, aHeight, anXoffset, anYoffset, aFontIndex);
}

 System::String^ OCXw_Driver::FontSize(Quantity_PlaneAngle& aSlant, Standard_ShortReal& aSize, Standard_ShortReal& aBheight, Standard_Integer aFontIndex)
{
  return OCConverter::StandardCStringToString((*((Handle_Xw_Driver*)nativeHandle))->FontSize(aSlant, aSize, aBheight, aFontIndex));
}

 Quantity_Length OCXw_Driver::Convert(Standard_Integer PV)
{
  return (*((Handle_Xw_Driver*)nativeHandle))->Convert(PV);
}

 Standard_Integer OCXw_Driver::Convert(Quantity_Length DV)
{
  return (*((Handle_Xw_Driver*)nativeHandle))->Convert(DV);
}

 void OCXw_Driver::Convert(Standard_Integer PX, Standard_Integer PY, Quantity_Length& DX, Quantity_Length& DY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->Convert(PX, PY, DX, DY);
}

 void OCXw_Driver::Convert(Quantity_Length DX, Quantity_Length DY, Standard_Integer& PX, Standard_Integer& PY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->Convert(DX, DY, PX, PY);
}

 System::Boolean OCXw_Driver::BufferIsOpen(Standard_Integer aRetainBuffer)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Driver*)nativeHandle))->BufferIsOpen(aRetainBuffer));
}

 System::Boolean OCXw_Driver::BufferIsEmpty(Standard_Integer aRetainBuffer)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Driver*)nativeHandle))->BufferIsEmpty(aRetainBuffer));
}

 System::Boolean OCXw_Driver::BufferIsDrawn(Standard_Integer aRetainBuffer)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Driver*)nativeHandle))->BufferIsDrawn(aRetainBuffer));
}

 void OCXw_Driver::AngleOfBuffer(Standard_Integer aRetainBuffer, Quantity_PlaneAngle& anAngle)
{
  (*((Handle_Xw_Driver*)nativeHandle))->AngleOfBuffer(aRetainBuffer, anAngle);
}

 void OCXw_Driver::ScaleOfBuffer(Standard_Integer aRetainBuffer, Quantity_Factor& aScaleX, Quantity_Factor& aScaleY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->ScaleOfBuffer(aRetainBuffer, aScaleX, aScaleY);
}

 void OCXw_Driver::PositionOfBuffer(Standard_Integer aRetainBuffer, Standard_ShortReal& aPivotX, Standard_ShortReal& aPivotY)
{
  (*((Handle_Xw_Driver*)nativeHandle))->PositionOfBuffer(aRetainBuffer, aPivotX, aPivotY);
}

 void OCXw_Driver::ColorBoundIndexs(Standard_Integer& aMinIndex, Standard_Integer& aMaxIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->ColorBoundIndexs(aMinIndex, aMaxIndex);
}

 Standard_Integer OCXw_Driver::LocalColorIndex(Standard_Integer anIndex)
{
  return (*((Handle_Xw_Driver*)nativeHandle))->LocalColorIndex(anIndex);
}

 void OCXw_Driver::FontBoundIndexs(Standard_Integer& aMinIndex, Standard_Integer& aMaxIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->FontBoundIndexs(aMinIndex, aMaxIndex);
}

 Standard_Integer OCXw_Driver::LocalFontIndex(Standard_Integer anIndex)
{
  return (*((Handle_Xw_Driver*)nativeHandle))->LocalFontIndex(anIndex);
}

 void OCXw_Driver::TypeBoundIndexs(Standard_Integer& aMinIndex, Standard_Integer& aMaxIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->TypeBoundIndexs(aMinIndex, aMaxIndex);
}

 Standard_Integer OCXw_Driver::LocalTypeIndex(Standard_Integer anIndex)
{
  return (*((Handle_Xw_Driver*)nativeHandle))->LocalTypeIndex(anIndex);
}

 void OCXw_Driver::WidthBoundIndexs(Standard_Integer& aMinIndex, Standard_Integer& aMaxIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->WidthBoundIndexs(aMinIndex, aMaxIndex);
}

 Standard_Integer OCXw_Driver::LocalWidthIndex(Standard_Integer anIndex)
{
  return (*((Handle_Xw_Driver*)nativeHandle))->LocalWidthIndex(anIndex);
}

 void OCXw_Driver::MarkBoundIndexs(Standard_Integer& aMinIndex, Standard_Integer& aMaxIndex)
{
  (*((Handle_Xw_Driver*)nativeHandle))->MarkBoundIndexs(aMinIndex, aMaxIndex);
}

 Standard_Integer OCXw_Driver::LocalMarkIndex(Standard_Integer anIndex)
{
  return (*((Handle_Xw_Driver*)nativeHandle))->LocalMarkIndex(anIndex);
}


