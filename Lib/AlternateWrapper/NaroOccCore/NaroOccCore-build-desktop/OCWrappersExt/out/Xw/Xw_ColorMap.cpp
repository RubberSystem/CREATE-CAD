// File generated by CPPExt (CPP file)
//

#include "Xw_ColorMap.h"
#include "../Converter.h"
#include "Xw_GraphicDevice.h"
#include "Xw_Window.h"
#include "../Aspect/Aspect_ColorMapEntry.h"
#include "../Aspect/Aspect_ColorMap.h"
#include "../Quantity/Quantity_Color.h"


using namespace OCNaroWrappers;

OCXw_ColorMap::OCXw_ColorMap(Handle(Xw_ColorMap)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Xw_ColorMap(*nativeHandle);
}

OCXw_ColorMap::OCXw_ColorMap(System::String^ Connexion, OCXw_TypeOfVisual Visual, OCXw_TypeOfMapping Mapping, Standard_Integer Ncolors, System::Boolean UseDefault) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Xw_ColorMap(new Xw_ColorMap(OCConverter::StringToStandardCString(Connexion), (Xw_TypeOfVisual)Visual, (Xw_TypeOfMapping)Mapping, Ncolors, OCConverter::BooleanToStandardBoolean(UseDefault)));
}

 void OCXw_ColorMap::SetEntry(Standard_Integer Index, Standard_Real Red, Standard_Real Green, Standard_Real Blue)
{
  (*((Handle_Xw_ColorMap*)nativeHandle))->SetEntry(Index, Red, Green, Blue);
}

 void OCXw_ColorMap::SetEntry(OCNaroWrappers::OCAspect_ColorMapEntry^ Entry)
{
  (*((Handle_Xw_ColorMap*)nativeHandle))->SetEntry(*((Aspect_ColorMapEntry*)Entry->Handle));
}

 void OCXw_ColorMap::SetEntries(OCNaroWrappers::OCAspect_ColorMap^ Colormap)
{
  (*((Handle_Xw_ColorMap*)nativeHandle))->SetEntries(*((Handle_Aspect_ColorMap*)Colormap->Handle));
}

 void OCXw_ColorMap::SetHighlightColor(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_Xw_ColorMap*)nativeHandle))->SetHighlightColor(*((Quantity_Color*)aColor->Handle));
}

OCQuantity_Color^ OCXw_ColorMap::HighlightColor()
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = (*((Handle_Xw_ColorMap*)nativeHandle))->HighlightColor();
  return gcnew OCQuantity_Color(tmp);
}

 Standard_Integer OCXw_ColorMap::PixelOfColor(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->PixelOfColor(*((Quantity_Color*)aColor->Handle));
}

 Standard_Integer OCXw_ColorMap::AllocatesPixelOfColor()
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->AllocatesPixelOfColor();
}

 void OCXw_ColorMap::FreePixelOfColor(Standard_Integer aPixel)
{
  (*((Handle_Xw_ColorMap*)nativeHandle))->FreePixelOfColor(aPixel);
}

 System::Boolean OCXw_ColorMap::SetColorOfPixel(Standard_Integer aPixel, OCNaroWrappers::OCQuantity_Color^ aColor)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_ColorMap*)nativeHandle))->SetColorOfPixel(aPixel, *((Quantity_Color*)aColor->Handle)));
}

 Standard_Integer OCXw_ColorMap::Entry(Standard_Integer Index, Standard_Real& Red, Standard_Real& Green, Standard_Real& Blue)
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->Entry(Index, Red, Green, Blue);
}

 Standard_Integer OCXw_ColorMap::HighlightPixel()
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->HighlightPixel();
}

 Standard_Integer OCXw_ColorMap::MaxColors()
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->MaxColors();
}

 Standard_Integer OCXw_ColorMap::MaxOverlayColors()
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->MaxOverlayColors();
}

 System::IntPtr OCXw_ColorMap::XColorMap()
{
  return System::IntPtr((*((Handle_Xw_ColorMap*)nativeHandle))->XColorMap());
}

 System::Boolean OCXw_ColorMap::XColorCube(System::IntPtr& ColormapID, Standard_Integer& VisualID, Standard_Integer& BasePixel, Standard_Integer& RedMax, Standard_Integer& RedMult, Standard_Integer& GreenMax, Standard_Integer& GreenMult, Standard_Integer& BlueMax, Standard_Integer& BlueMult)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_ColorMap*)nativeHandle))->XColorCube(ColormapID.ToPointer(), VisualID, BasePixel, RedMax, RedMult, GreenMax, GreenMult, BlueMax, BlueMult));
}

 System::Boolean OCXw_ColorMap::XGrayRamp(System::IntPtr& ColormapID, Standard_Integer& VisualID, Standard_Integer& BasePixel, Standard_Integer& GrayMax, Standard_Integer& GrayMult)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_ColorMap*)nativeHandle))->XGrayRamp(ColormapID.ToPointer(), VisualID, BasePixel, GrayMax, GrayMult));
}

 System::IntPtr OCXw_ColorMap::XOverlayColorMap()
{
  return System::IntPtr((*((Handle_Xw_ColorMap*)nativeHandle))->XOverlayColorMap());
}

 Standard_Address OCXw_ColorMap::XVisual()
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->XVisual();
}

 Standard_Address OCXw_ColorMap::XOverlayVisual()
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->XOverlayVisual();
}

 OCXw_TypeOfVisual OCXw_ColorMap::VisualClass()
{
  return (OCXw_TypeOfVisual)((*((Handle_Xw_ColorMap*)nativeHandle))->VisualClass());
}

 OCXw_TypeOfVisual OCXw_ColorMap::OverlayVisualClass()
{
  return (OCXw_TypeOfVisual)((*((Handle_Xw_ColorMap*)nativeHandle))->OverlayVisualClass());
}

 Standard_Integer OCXw_ColorMap::VisualID()
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->VisualID();
}

 Standard_Integer OCXw_ColorMap::OverlayVisualID()
{
  return (*((Handle_Xw_ColorMap*)nativeHandle))->OverlayVisualID();
}


