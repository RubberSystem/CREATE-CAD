// File generated by CPPExt (CPP file)
//

#include "Xw_Window.h"
#include "../Converter.h"
#include "Xw_ColorMap.h"
#include "Xw_TypeMap.h"
#include "Xw_WidthMap.h"
#include "Xw_FontMap.h"
#include "Xw_MarkMap.h"
#include "Xw_Driver.h"
#include "Xw_IconBox.h"
#include "Xw_GraphicDevice.h"
#include "../Aspect/Aspect_Background.h"
#include "../Quantity/Quantity_Color.h"
#include "../Aspect/Aspect_GradientBackground.h"


using namespace OCNaroWrappers;

OCXw_Window::OCXw_Window(Handle(Xw_Window)* nativeHandle) : OCAspect_Window((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Xw_Window(*nativeHandle);
}

OCXw_Window::OCXw_Window(OCNaroWrappers::OCXw_GraphicDevice^ Device) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Xw_Window(new Xw_Window(*((Handle_Xw_GraphicDevice*)Device->Handle)));
}

OCXw_Window::OCXw_Window(OCNaroWrappers::OCXw_GraphicDevice^ Device, Standard_Integer aPart1, Standard_Integer aPart2, OCXw_WindowQuality aQuality, OCQuantity_NameOfColor BackColor) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Xw_Window(new Xw_Window(*((Handle_Xw_GraphicDevice*)Device->Handle), aPart1, aPart2, (Xw_WindowQuality)aQuality, (Quantity_NameOfColor)BackColor));
}

OCXw_Window::OCXw_Window(OCNaroWrappers::OCXw_GraphicDevice^ Device, System::IntPtr aWindow, OCXw_WindowQuality aQuality, OCQuantity_NameOfColor BackColor) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Xw_Window(new Xw_Window(*((Handle_Xw_GraphicDevice*)Device->Handle), aWindow.ToPointer(), (Xw_WindowQuality)aQuality, (Quantity_NameOfColor)BackColor));
}

OCXw_Window::OCXw_Window(OCNaroWrappers::OCXw_GraphicDevice^ Device, System::String^ Title, Quantity_Parameter Xc, Quantity_Parameter Yc, Quantity_Parameter Width, Quantity_Parameter Height, OCXw_WindowQuality Quality, OCQuantity_NameOfColor BackColor, System::IntPtr Parent) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Xw_Window(new Xw_Window(*((Handle_Xw_GraphicDevice*)Device->Handle), OCConverter::StringToStandardCString(Title), Xc, Yc, Width, Height, (Xw_WindowQuality)Quality, (Quantity_NameOfColor)BackColor, Parent.ToPointer()));
}

OCXw_Window::OCXw_Window(OCNaroWrappers::OCXw_GraphicDevice^ theDevice, System::String^ theTitle, Standard_Integer thePxLeft, Standard_Integer thePxTop, Standard_Integer thePxWidth, Standard_Integer thePxHeight, OCXw_WindowQuality theQuality, OCQuantity_NameOfColor theBackColor, System::IntPtr theParent) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Xw_Window(new Xw_Window(*((Handle_Xw_GraphicDevice*)theDevice->Handle), OCConverter::StringToStandardCString(theTitle), thePxLeft, thePxTop, thePxWidth, thePxHeight, (Xw_WindowQuality)theQuality, (Quantity_NameOfColor)theBackColor, theParent.ToPointer()));
}

 void OCXw_Window::SetBackground(OCNaroWrappers::OCAspect_Background^ Background)
{
  (*((Handle_Xw_Window*)nativeHandle))->SetBackground(*((Aspect_Background*)Background->Handle));
}

 void OCXw_Window::SetBackground(OCQuantity_NameOfColor BackColor)
{
  (*((Handle_Xw_Window*)nativeHandle))->SetBackground((Quantity_NameOfColor)BackColor);
}

 void OCXw_Window::SetBackground(OCNaroWrappers::OCQuantity_Color^ color)
{
  (*((Handle_Xw_Window*)nativeHandle))->SetBackground(*((Quantity_Color*)color->Handle));
}

 void OCXw_Window::SetBackground(System::IntPtr aPixmap)
{
  (*((Handle_Xw_Window*)nativeHandle))->SetBackground(aPixmap.ToPointer());
}

 System::Boolean OCXw_Window::SetBackground(System::String^ aName, OCAspect_FillMethod aMethod)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->SetBackground(OCConverter::StringToStandardCString(aName), (Aspect_FillMethod)aMethod));
}

 void OCXw_Window::SetBackground(OCNaroWrappers::OCAspect_GradientBackground^ Background)
{
  (*((Handle_Xw_Window*)nativeHandle))->SetBackground(*((Aspect_GradientBackground*)Background->Handle));
}

 void OCXw_Window::SetBackground(OCNaroWrappers::OCQuantity_Color^ aCol1, OCNaroWrappers::OCQuantity_Color^ aCol2, OCAspect_GradientFillMethod aMethod)
{
  (*((Handle_Xw_Window*)nativeHandle))->SetBackground(*((Quantity_Color*)aCol1->Handle), *((Quantity_Color*)aCol2->Handle), (Aspect_GradientFillMethod)aMethod);
}

 void OCXw_Window::SetDoubleBuffer(System::Boolean DBmode)
{
  (*((Handle_Xw_Window*)nativeHandle))->SetDoubleBuffer(OCConverter::BooleanToStandardBoolean(DBmode));
}

 void OCXw_Window::Flush()
{
  (*((Handle_Xw_Window*)nativeHandle))->Flush();
}

 void OCXw_Window::Map()
{
  (*((Handle_Xw_Window*)nativeHandle))->Map();
}

 void OCXw_Window::Unmap()
{
  (*((Handle_Xw_Window*)nativeHandle))->Unmap();
}

 OCAspect_TypeOfResize OCXw_Window::DoResize()
{
  return (OCAspect_TypeOfResize)((*((Handle_Xw_Window*)nativeHandle))->DoResize());
}

 System::Boolean OCXw_Window::DoMapping()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->DoMapping());
}

 void OCXw_Window::Destroy()
{
  (*((Handle_Xw_Window*)nativeHandle))->Destroy();
}

 void OCXw_Window::Clear()
{
  (*((Handle_Xw_Window*)nativeHandle))->Clear();
}

 void OCXw_Window::ClearArea(Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height)
{
  (*((Handle_Xw_Window*)nativeHandle))->ClearArea(Xc, Yc, Width, Height);
}

 void OCXw_Window::Restore()
{
  (*((Handle_Xw_Window*)nativeHandle))->Restore();
}

 void OCXw_Window::RestoreArea(Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height)
{
  (*((Handle_Xw_Window*)nativeHandle))->RestoreArea(Xc, Yc, Width, Height);
}

 System::Boolean OCXw_Window::Dump(System::String^ aFilename, Standard_Real aGammaValue)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->Dump(OCConverter::StringToStandardCString(aFilename), aGammaValue));
}

 System::Boolean OCXw_Window::DumpArea(System::String^ aFilename, Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height, Standard_Real aGammaValue)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->DumpArea(OCConverter::StringToStandardCString(aFilename), Xc, Yc, Width, Height, aGammaValue));
}

 System::Boolean OCXw_Window::ToPixMap(Image_PixMap& theImage)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->ToPixMap(theImage));
}

 System::Boolean OCXw_Window::Load(System::String^ aFilename)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->Load(OCConverter::StringToStandardCString(aFilename)));
}

 System::Boolean OCXw_Window::LoadArea(System::String^ aFilename, Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->LoadArea(OCConverter::StringToStandardCString(aFilename), Xc, Yc, Width, Height));
}

 void OCXw_Window::SetCursor(Standard_Integer anId, OCQuantity_NameOfColor aColor)
{
  (*((Handle_Xw_Window*)nativeHandle))->SetCursor(anId, (Quantity_NameOfColor)aColor);
}

 System::Boolean OCXw_Window::BackingStore()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->BackingStore());
}

 System::Boolean OCXw_Window::DoubleBuffer()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->DoubleBuffer());
}

 System::Boolean OCXw_Window::IsMapped()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->IsMapped());
}

 Quantity_Ratio OCXw_Window::Ratio()
{
  return (*((Handle_Xw_Window*)nativeHandle))->Ratio();
}

 void OCXw_Window::Position(Quantity_Parameter& X1, Quantity_Parameter& Y1, Quantity_Parameter& X2, Quantity_Parameter& Y2)
{
  (*((Handle_Xw_Window*)nativeHandle))->Position(X1, Y1, X2, Y2);
}

 void OCXw_Window::Position(Standard_Integer& X1, Standard_Integer& Y1, Standard_Integer& X2, Standard_Integer& Y2)
{
  (*((Handle_Xw_Window*)nativeHandle))->Position(X1, Y1, X2, Y2);
}

 void OCXw_Window::Size(Quantity_Parameter& Width, Quantity_Parameter& Height)
{
  (*((Handle_Xw_Window*)nativeHandle))->Size(Width, Height);
}

 void OCXw_Window::Size(Standard_Integer& Width, Standard_Integer& Height)
{
  (*((Handle_Xw_Window*)nativeHandle))->Size(Width, Height);
}

 void OCXw_Window::MMSize(Standard_Real& Width, Standard_Real& Height)
{
  (*((Handle_Xw_Window*)nativeHandle))->MMSize(Width, Height);
}

 Quantity_Parameter OCXw_Window::Convert(Standard_Integer PV)
{
  return (*((Handle_Xw_Window*)nativeHandle))->Convert(PV);
}

 Standard_Integer OCXw_Window::Convert(Quantity_Parameter DV)
{
  return (*((Handle_Xw_Window*)nativeHandle))->Convert(DV);
}

 void OCXw_Window::Convert(Standard_Integer PX, Standard_Integer PY, Quantity_Parameter& DX, Quantity_Parameter& DY)
{
  (*((Handle_Xw_Window*)nativeHandle))->Convert(PX, PY, DX, DY);
}

 void OCXw_Window::Convert(Quantity_Parameter DX, Quantity_Parameter DY, Standard_Integer& PX, Standard_Integer& PY)
{
  (*((Handle_Xw_Window*)nativeHandle))->Convert(DX, DY, PX, PY);
}

 System::IntPtr OCXw_Window::XWindow()
{
  return System::IntPtr((*((Handle_Xw_Window*)nativeHandle))->XWindow());
}

 void OCXw_Window::XWindow(Standard_Integer& aPart1, Standard_Integer& aPart2)
{
  (*((Handle_Xw_Window*)nativeHandle))->XWindow(aPart1, aPart2);
}

 System::IntPtr OCXw_Window::XParentWindow()
{
  return System::IntPtr((*((Handle_Xw_Window*)nativeHandle))->XParentWindow());
}

 void OCXw_Window::XParentWindow(Standard_Integer& aPart1, Standard_Integer& aPart2)
{
  (*((Handle_Xw_Window*)nativeHandle))->XParentWindow(aPart1, aPart2);
}

 System::IntPtr OCXw_Window::XPixmap()
{
  return System::IntPtr((*((Handle_Xw_Window*)nativeHandle))->XPixmap());
}

 System::Boolean OCXw_Window::PointerPosition(Standard_Integer& X, Standard_Integer& Y)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->PointerPosition(X, Y));
}

OCXw_ColorMap^ OCXw_Window::ColorMap()
{
  Handle(Xw_ColorMap) tmp = (*((Handle_Xw_Window*)nativeHandle))->ColorMap();
  return gcnew OCXw_ColorMap(&tmp);
}

OCXw_TypeMap^ OCXw_Window::TypeMap()
{
  Handle(Xw_TypeMap) tmp = (*((Handle_Xw_Window*)nativeHandle))->TypeMap();
  return gcnew OCXw_TypeMap(&tmp);
}

OCXw_WidthMap^ OCXw_Window::WidthMap()
{
  Handle(Xw_WidthMap) tmp = (*((Handle_Xw_Window*)nativeHandle))->WidthMap();
  return gcnew OCXw_WidthMap(&tmp);
}

OCXw_FontMap^ OCXw_Window::FontMap()
{
  Handle(Xw_FontMap) tmp = (*((Handle_Xw_Window*)nativeHandle))->FontMap();
  return gcnew OCXw_FontMap(&tmp);
}

OCXw_MarkMap^ OCXw_Window::MarkMap()
{
  Handle(Xw_MarkMap) tmp = (*((Handle_Xw_Window*)nativeHandle))->MarkMap();
  return gcnew OCXw_MarkMap(&tmp);
}

 System::IntPtr OCXw_Window::XColorMap()
{
  return System::IntPtr((*((Handle_Xw_Window*)nativeHandle))->XColorMap());
}

 Standard_Address OCXw_Window::XVisual()
{
  return (*((Handle_Xw_Window*)nativeHandle))->XVisual();
}

 OCXw_TypeOfVisual OCXw_Window::VisualClass()
{
  return (OCXw_TypeOfVisual)((*((Handle_Xw_Window*)nativeHandle))->VisualClass());
}

 Standard_Integer OCXw_Window::VisualDepth()
{
  return (*((Handle_Xw_Window*)nativeHandle))->VisualDepth();
}

 Standard_Integer OCXw_Window::VisualID()
{
  return (*((Handle_Xw_Window*)nativeHandle))->VisualID();
}

 OCXw_WindowQuality OCXw_Window::Quality()
{
  return (OCXw_WindowQuality)((*((Handle_Xw_Window*)nativeHandle))->Quality());
}

 System::Boolean OCXw_Window::PixelOfColor(OCQuantity_NameOfColor aColor, Standard_Integer& aPixel)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->PixelOfColor((Quantity_NameOfColor)aColor, aPixel));
}

 System::Boolean OCXw_Window::PixelOfColor(OCNaroWrappers::OCQuantity_Color^ aColor, Standard_Integer& aPixel)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->PixelOfColor(*((Quantity_Color*)aColor->Handle), aPixel));
}

 System::Boolean OCXw_Window::BackgroundPixel(Standard_Integer& aPixel)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Xw_Window*)nativeHandle))->BackgroundPixel(aPixel));
}


