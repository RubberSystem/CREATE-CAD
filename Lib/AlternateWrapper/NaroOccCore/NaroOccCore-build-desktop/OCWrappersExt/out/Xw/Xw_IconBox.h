// File generated by CPPExt (Transient)
//
#ifndef _Xw_IconBox_OCWrappers_HeaderFile
#define _Xw_IconBox_OCWrappers_HeaderFile

// include the wrapped class
#include <Xw_IconBox.hxx>
#include "../Converter.h"

#include "Xw_Window.h"

#include "../Quantity/Quantity_NameOfColor.h"
#include "Xw_WindowQuality.h"


namespace OCNaroWrappers
{

ref class OCXw_GraphicDevice;
ref class OCXw_Window;


//! This class defines a X11 IconBox <br>
//!  Warning: The IconBox is not visible at the creation time . <br>
//!	    To show the Icon Box use the method Show () . <br>
//!	    In this case the Icon Box appears at the DSU position <br>
//!	    specified given in [0,1] space . <br>
//!	    The size of the Icon Box grows depending of the number <br>
//!	    of the Icons loaded inside . <br>
public ref class OCXw_IconBox : OCXw_Window {

protected:
  // dummy constructor;
  OCXw_IconBox(OCDummy^) : OCXw_Window((OCDummy^)nullptr) {};

public:

// constructor from native
OCXw_IconBox(Handle(Xw_IconBox)* nativeHandle);

// Methods PUBLIC

//! Creates a IconBox n Preferred PseudoColor Visual <br>
//!	    defined by his Center in DSU and connects it to the <br>
//!	    X server at the first call depending of the GraphicDevice <br>
//!	    connexion . <br>
//!	    ALL Icons are loaded from the Icon File Directory Name : <br>
//!	    "[$SYMBOL]xxxxxxx[.ifd]" <br>
//!  Warning: Raises if the Position is out of the Screen Space <br>
//!	    or the Icon File Directory Name don't exist <br>
OCXw_IconBox(OCNaroWrappers::OCXw_GraphicDevice^ Device, System::String^ Name, Standard_Real Xc, Standard_Real Yc, OCQuantity_NameOfColor BackColor, OCXw_WindowQuality aQuality);

//! Loads Icon Box from an Other Icon File Directory Name <br>
//!  and returns the loaded icons number. <br>
//!  Warning: The Icons previously loaded are NOT cleared . <br>
 /*instead*/  Standard_Integer LoadIcons(System::String^ Name) ;

//! Shows Icon Box to the screen <br>
//!  Warning: The Icon Box is displayed at the centered position <br>
//!	    specified at the creation time and the size depend <br>
//!	    of the Icon number really loaded inside . <br>
 /*instead*/  void Show() ;

//! Unloads All previously loaded Icons in the IconBox <br>
//!  and returns the unloaded icons number. <br>
 /*instead*/  Standard_Integer UnloadIcons(System::String^ Name) ;

//! Adds an Icon of Size aWidth,aHeight given in PIXEL <br>
//!  to the Icon Box from a FULL Existing Window <br>
//!  NOTE that if aWidth or aHeight is 0 the default icon size is taken. <br>
 /*instead*/  void AddIcon(OCNaroWrappers::OCXw_Window^ W, System::String^ Name, Standard_Integer aWidth, Standard_Integer aHeight) ;

//!  Saves all new created Icons as iconname.xwd file in the user <br>
//!  directory and returns the saved icons number. <br>
 /*instead*/  Standard_Integer SaveIcons() ;

//! Returns the Number of Icons loaded in the Icon Box . <br>
 /*instead*/  Standard_Integer IconNumber() ;

//! Returns the Name of the N ime Icon <br>
//!  Warning: Raises if Index if out of range depending of the <br>
//!	    Number of Loaded Icons . <br>
 /*instead*/  System::String^ IconName(Standard_Integer Index) ;

//! Returns the Pixmap Size attached to the Icon Name <br>
//!  Warning: May return FALSE if Icon doesn't exist in the IconBox . <br>
 /*instead*/  System::Boolean IconSize(System::String^ Name, Standard_Integer& Width, Standard_Integer& Height) ;

//! Returns the Pixmap attached to the Icon Name <br>
//!  Warning: May return 0 if Icon doesn't exist in the IconBox . <br>
 /*instead*/  System::IntPtr IconPixmap(System::String^ Name) ;

//! Returns the Centered part of the Pixmap of required Size <br>
//!	    attached to the Icon Name <br>
//!  Warning: May return 0 if Icon doesn't exist in the IconBox . <br>
 /*instead*/  System::IntPtr IconPixmap(System::String^ Name, Standard_Integer Width, Standard_Integer Height) ;

~OCXw_IconBox()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
