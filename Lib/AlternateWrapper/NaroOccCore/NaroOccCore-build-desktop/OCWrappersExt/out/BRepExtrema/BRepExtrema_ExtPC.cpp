// File generated by CPPExt (CPP file)
//

#include "BRepExtrema_ExtPC.h"
#include "../Converter.h"
#include "../BRepAdaptor/BRepAdaptor_HCurve.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCBRepExtrema_ExtPC::OCBRepExtrema_ExtPC(BRepExtrema_ExtPC* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepExtrema_ExtPC::OCBRepExtrema_ExtPC() 
{
  nativeHandle = new BRepExtrema_ExtPC();
}

OCBRepExtrema_ExtPC::OCBRepExtrema_ExtPC(OCNaroWrappers::OCTopoDS_Vertex^ V, OCNaroWrappers::OCTopoDS_Edge^ E) 
{
  nativeHandle = new BRepExtrema_ExtPC(*((TopoDS_Vertex*)V->Handle), *((TopoDS_Edge*)E->Handle));
}

 void OCBRepExtrema_ExtPC::Initialize(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  ((BRepExtrema_ExtPC*)nativeHandle)->Initialize(*((TopoDS_Edge*)E->Handle));
}

 void OCBRepExtrema_ExtPC::Perform(OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  ((BRepExtrema_ExtPC*)nativeHandle)->Perform(*((TopoDS_Vertex*)V->Handle));
}

 System::Boolean OCBRepExtrema_ExtPC::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((BRepExtrema_ExtPC*)nativeHandle)->IsDone());
}

 Standard_Integer OCBRepExtrema_ExtPC::NbExt()
{
  return ((BRepExtrema_ExtPC*)nativeHandle)->NbExt();
}

 System::Boolean OCBRepExtrema_ExtPC::IsMin(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean(((BRepExtrema_ExtPC*)nativeHandle)->IsMin(N));
}

 Standard_Real OCBRepExtrema_ExtPC::Value(Standard_Integer N)
{
  return ((BRepExtrema_ExtPC*)nativeHandle)->Value(N);
}

 Standard_Real OCBRepExtrema_ExtPC::Parameter(Standard_Integer N)
{
  return ((BRepExtrema_ExtPC*)nativeHandle)->Parameter(N);
}

OCgp_Pnt^ OCBRepExtrema_ExtPC::Point(Standard_Integer N)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BRepExtrema_ExtPC*)nativeHandle)->Point(N);
  return gcnew OCgp_Pnt(tmp);
}

 void OCBRepExtrema_ExtPC::TrimmedDistances(Standard_Real& dist1, Standard_Real& dist2, OCNaroWrappers::OCgp_Pnt^ pnt1, OCNaroWrappers::OCgp_Pnt^ pnt2)
{
  ((BRepExtrema_ExtPC*)nativeHandle)->TrimmedDistances(dist1, dist2, *((gp_Pnt*)pnt1->Handle), *((gp_Pnt*)pnt2->Handle));
}


