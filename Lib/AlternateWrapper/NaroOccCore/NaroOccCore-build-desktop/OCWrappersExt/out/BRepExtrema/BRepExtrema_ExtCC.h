// File generated by CPPExt (MPV)
//
#ifndef _BRepExtrema_ExtCC_OCWrappers_HeaderFile
#define _BRepExtrema_ExtCC_OCWrappers_HeaderFile

// include native header
#include <BRepExtrema_ExtCC.hxx>
#include "../Converter.h"


#include "../Extrema/Extrema_ExtCC.h"


namespace OCNaroWrappers
{

ref class OCBRepAdaptor_HCurve;
ref class OCTopoDS_Edge;
ref class OCgp_Pnt;



public ref class OCBRepExtrema_ExtCC  {

protected:
  BRepExtrema_ExtCC* nativeHandle;
  OCBRepExtrema_ExtCC(OCDummy^) {};

public:
  property BRepExtrema_ExtCC* Handle
  {
    BRepExtrema_ExtCC* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepExtrema_ExtCC(BRepExtrema_ExtCC* nativeHandle);

// Methods PUBLIC


OCBRepExtrema_ExtCC();

//! It calculates all the distances. <br>
OCBRepExtrema_ExtCC(OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2);


 /*instead*/  void Initialize(OCNaroWrappers::OCTopoDS_Edge^ E2) ;

//! An exception is raised if the fields have not been <br>
//!          initialized. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCTopoDS_Edge^ E1) ;

//! True if the distances are found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the number of extremum distances. <br>
 /*instead*/  Standard_Integer NbExt() ;

//! Returns True if E1 and E2 are parallel. <br>
 /*instead*/  System::Boolean IsParallel() ;

//! Returns the value of the <N>th extremum distance. <br>
 /*instead*/  Standard_Real Value(Standard_Integer N) ;

//! Returns the parameter  on the first edge  of the  <N>th <br>
//!          extremum distance. <br>
 /*instead*/  Standard_Real ParameterOnE1(Standard_Integer N) ;

//! Returns the Point of the <N>th extremum distance <br>
//!          on the edge E1. <br>
 /*instead*/  OCgp_Pnt^ PointOnE1(Standard_Integer N) ;

//! Returns the parameter  on the second edge  of the  <N>th <br>
//!          extremum distance. <br>
 /*instead*/  Standard_Real ParameterOnE2(Standard_Integer N) ;

//! Returns the Point of the <N>th extremum distance <br>
//!          on the edge E2. <br>
 /*instead*/  OCgp_Pnt^ PointOnE2(Standard_Integer N) ;

//! if the edges is a trimmed curve, <br>
//!          dist11 is the distance between the point on E1 <br>
//!          of parameter FirstParameter and the point of <br>
//!          parameter FirstParameter on E2. <br>
 /*instead*/  void TrimmedDistances(Standard_Real& dist11, Standard_Real& distP12, Standard_Real& distP21, Standard_Real& distP22, OCNaroWrappers::OCgp_Pnt^ P11, OCNaroWrappers::OCgp_Pnt^ P12, OCNaroWrappers::OCgp_Pnt^ P21, OCNaroWrappers::OCgp_Pnt^ P22) ;

~OCBRepExtrema_ExtCC()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
