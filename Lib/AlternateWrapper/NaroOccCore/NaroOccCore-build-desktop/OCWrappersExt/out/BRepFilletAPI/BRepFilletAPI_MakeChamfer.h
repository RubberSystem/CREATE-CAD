// File generated by CPPExt (MPV)
//
#ifndef _BRepFilletAPI_MakeChamfer_OCWrappers_HeaderFile
#define _BRepFilletAPI_MakeChamfer_OCWrappers_HeaderFile

// include native header
#include <BRepFilletAPI_MakeChamfer.hxx>
#include "../Converter.h"

#include "BRepFilletAPI_LocalOperation.h"

#include "../ChFi3d/ChFi3d_ChBuilder.h"
#include "../TopTools/TopTools_MapOfShape.h"
#include "BRepFilletAPI_LocalOperation.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopoDS_Edge;
ref class OCTopoDS_Face;
ref class OCTopoDS_Vertex;
ref class OCTopOpeBRepBuild_HBuilder;
ref class OCTopTools_ListOfShape;
ref class OCChFiDS_SecHArray1;


//! Describes functions to build chamfers on edges of a shell or solid. <br>
//!  Chamfered Edge of a Shell or Solid <br>
//! A MakeChamfer object provides a framework for: <br>
//! -   initializing the construction algorithm with a given shape, <br>
//! -   acquiring the data characterizing the chamfers, <br>
//! -   building the chamfers and constructing the resulting shape, and <br>
//! -   consulting the result. <br>
public ref class OCBRepFilletAPI_MakeChamfer  : public OCBRepFilletAPI_LocalOperation {

protected:
  // dummy constructor;
  OCBRepFilletAPI_MakeChamfer(OCDummy^) : OCBRepFilletAPI_LocalOperation((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepFilletAPI_MakeChamfer(BRepFilletAPI_MakeChamfer* nativeHandle);

// Methods PUBLIC

//! Initializes an algorithm for computing chamfers on the shape S. <br>
//! The edges on which chamfers are built are defined using the Add function. <br>
OCBRepFilletAPI_MakeChamfer(OCNaroWrappers::OCTopoDS_Shape^ S);

//! Adds edge E to the table of edges used by this <br>
//! algorithm to build chamfers, where the parameters <br>
//!      of the chamfer must be set after the <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Adds edge E to the table of edges used by this <br>
//! algorithm to build chamfers, where <br>
//!        the parameters of the chamfer are given by the two <br>
//!   distances Dis1 and Dis2; the face F identifies the side <br>
//!   where Dis1 is measured. <br>
//! The Add function results in a contour being built by <br>
//! propagation from the edge E (i.e. the contour contains at <br>
//! least this edge). This contour is composed of edges of <br>
//! the shape which are tangential to one another and <br>
//! which delimit two series of tangential faces, with one <br>
//! series of faces being located on either side of the contour. <br>
//! Warning <br>
//! Nothing is done if edge E or the face F does not belong to the initial shape. <br>
 /*instead*/  void Add(Standard_Real Dis, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Sets the distances Dis1 and Dis2 which give the <br>
//! parameters of the chamfer along the contour of index <br>
//! IC generated using the Add function in the internal <br>
//! data structure of this algorithm. The face F identifies <br>
//! the side where Dis1 is measured. <br>
//! Warning <br>
//! Nothing is done if either the edge E or the face F <br>
//! does not belong to the initial shape. <br>
 /*instead*/  void SetDist(Standard_Real Dis, Standard_Integer IC, OCNaroWrappers::OCTopoDS_Face^ F) ;


 /*instead*/  void GetDist(Standard_Integer IC, Standard_Real& Dis) ;

//! Adds a  fillet contour in  the  builder  (builds a <br>
//!           contour  of tangent edges to <E> and sets the two <br>
//!           distances <Dis1> and <Dis2> ( parameters of the chamfer ) ). <br>
 /*instead*/  void Add(Standard_Real Dis1, Standard_Real Dis2, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Sets the distances Dis1 and Dis2 which give the <br>
//! parameters of the chamfer along the contour of index <br>
//! IC generated using the Add function in the internal <br>
//! data structure of this algorithm. The face F identifies <br>
//! the side where Dis1 is measured. <br>
//! Warning <br>
//! Nothing is done if either the edge E or the face F <br>
//! does not belong to the initial shape. <br>
 /*instead*/  void SetDists(Standard_Real Dis1, Standard_Real Dis2, Standard_Integer IC, OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Returns the distances Dis1 and Dis2 which give the <br>
//! parameters of the chamfer along the contour of index IC <br>
//! in the internal data structure of this algorithm. <br>
//! Warning <br>
//! -1. is returned if IC is outside the bounds of the table of contours. <br>
 /*instead*/  void Dists(Standard_Integer IC, Standard_Real& Dis1, Standard_Real& Dis2) ;

//! Adds a  fillet contour in  the  builder  (builds a <br>
//!           contour  of tangent edges to <E> and sets the <br>
//!           distance <Dis1> and angle <Angle> ( parameters of the chamfer ) ). <br>
 /*instead*/  void AddDA(Standard_Real Dis, Standard_Real Angle, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F) ;

//! set the distance <Dis> and <Angle> of the fillet <br>
//!          contour of index <IC> in the DS with <Dis> on <F>. <br>//! if the face <F> is not one of common faces <br>
//!          of an edge of the contour <IC> <br>
 /*instead*/  void SetDistAngle(Standard_Real Dis, Standard_Real Angle, Standard_Integer IC, OCNaroWrappers::OCTopoDS_Face^ F) ;

//! gives the distances <Dis> and <Angle> of the fillet <br>
//!          contour of index <IC> in the DS <br>
 /*instead*/  void GetDistAngle(Standard_Integer IC, Standard_Real& Dis, Standard_Real& Angle, System::Boolean& DisOnFace1) ;

//! return True if chamfer symetric false else. <br>
 /*instead*/  System::Boolean IsSymetric(Standard_Integer IC) ;

//! return True if chamfer is made with two distances false else. <br>
 /*instead*/  System::Boolean IsTwoDistances(Standard_Integer IC) ;

//! return True if chamfer is made with distance and angle false else. <br>
 /*instead*/  System::Boolean IsDistanceAngle(Standard_Integer IC) ;

//! Erases the chamfer parameters on the contour of <br>
//! index IC in the internal data structure of this algorithm. <br>
//! Use the SetDists function to reset this data. <br>
//! Warning <br>
//! Nothing is done if IC is outside the bounds of the table of contours. <br>
 /*instead*/  void ResetContour(Standard_Integer IC) ;

//! Returns the number of contours generated using the <br>
//! Add function in the internal data structure of this algorithm. <br>
 /*instead*/  Standard_Integer NbContours() ;

//! Returns the index of the contour in the internal data <br>
//! structure of this algorithm, which contains the edge E of the shape. <br>
//! This function returns 0 if the edge E does not belong to any contour. <br>
//! Warning <br>
//! This index can change if a contour is removed from the <br>
//! internal data structure of this algorithm using the function Remove. <br>
 /*instead*/  Standard_Integer Contour(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Returns the number of edges in the contour of index I in <br>
//! the internal data structure of this algorithm. <br>
//! Warning <br>
//! Returns 0 if I is outside the bounds of the table of contours. <br>
 /*instead*/  Standard_Integer NbEdges(Standard_Integer I) ;

//! Returns the edge of index J in the contour of index I in <br>
//! the internal data structure of this algorithm. <br>
//! Warning <br>
//! Returns a null shape if: <br>
//! -   I is outside the bounds of the table of contours, or <br>
//! -   J is outside the bounds of the table of edges of the contour of index I. <br>
 /*instead*/  OCTopoDS_Edge^ Edge(Standard_Integer I, Standard_Integer J) ;

//! Removes the contour in the internal data structure of <br>
//! this algorithm which contains the edge E of the shape. <br>
//! Warning <br>
//! Nothing is done if the edge E does not belong to the <br>
//! contour in the internal data structure of this algorithm. <br>
 /*instead*/  void Remove(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Returns the length of the contour of index IC in the <br>
//! internal data structure of this algorithm. <br>
//! Warning <br>
//! Returns -1. if IC is outside the bounds of the table of contours. <br>
 /*instead*/  Standard_Real Length(Standard_Integer IC) ;

//! Returns the first vertex of the contour of index IC <br>
//! in the internal data structure of this algorithm. <br>
//! Warning <br>
//! Returns a null shape if IC is outside the bounds of the table of contours. <br>
 /*instead*/  OCTopoDS_Vertex^ FirstVertex(Standard_Integer IC) ;

//! Returns the last vertex of the contour of index IC <br>
//! in the internal data structure of this algorithm. <br>
//! Warning <br>
//! Returns a null shape if IC is outside the bounds of the table of contours. <br>
 /*instead*/  OCTopoDS_Vertex^ LastVertex(Standard_Integer IC) ;

//! Returns the curvilinear abscissa of the vertex V on the <br>
//! contour of index IC in the internal data structure of this algorithm. <br>
//! Warning <br>
//! Returns -1. if: <br>
//! -   IC is outside the bounds of the table of contours, or <br>
//! -   V is not on the contour of index IC. <br>
 /*instead*/  Standard_Real Abscissa(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V) ;

//! Returns the relative curvilinear abscissa (i.e. between 0 <br>
//! and 1) of the vertex V on the contour of index IC in the <br>
//! internal data structure of this algorithm. <br>
//! Warning <br>
//! Returns -1. if: <br>
//! -   IC is outside the bounds of the table of contours, or <br>
//! -   V is not on the contour of index IC. <br>
 /*instead*/  Standard_Real RelativeAbscissa(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V) ;

//! eturns true if the contour of index IC in the internal <br>
//! data structure of this algorithm is closed and tangential at the point of closure. <br>
//! Warning <br>
//! Returns false if IC is outside the bounds of the table of contours. <br>
 /*instead*/  System::Boolean ClosedAndTangent(Standard_Integer IC) ;

//! Returns true if the contour of index IC in the internal <br>
//! data structure of this algorithm is closed. <br>
//! Warning <br>
//! Returns false if IC is outside the bounds of the table of contours. <br>
 /*instead*/  System::Boolean Closed(Standard_Integer IC) ;

//! Builds the chamfers on all the contours in the internal <br>
//! data structure of this algorithm and constructs the resulting shape. <br>
//! Use the function IsDone to verify that the chamfered <br>
//! shape is built. Use the function Shape to retrieve the chamfered shape. <br>
//! Warning <br>
//! The construction of chamfers implements highly complex <br>
//! construction algorithms. Consequently, there may be <br>
//! instances where the algorithm fails, for example if the <br>
//! data defining the parameters of the chamfer is not <br>
//! compatible with the geometry of the initial shape. There <br>
//! is no initial analysis of errors and these only become <br>
//! evident at the construction stage. <br>
//! Additionally, in the current software release, the following <br>
//! cases are not handled: <br>
//! -   the end point of the contour is the point of <br>
//!   intersection of 4 or more edges of the shape, or <br>
//! -   the intersection of the chamfer with a face which <br>
//!   limits the contour is not fully contained in this face. <br>
virtual /*instead*/  void Build() override;

//! Reinitializes this algorithm, thus canceling the effects of the Build function. <br>
//! This function allows modifications to be made to the <br>
//! contours and chamfer parameters in order to rebuild the shape. <br>
 /*instead*/  void Reset() ;

//! Returns the internal filleting algorithm. <br>
 /*instead*/  OCTopOpeBRepBuild_HBuilder^ Builder() ;

//! Returns the  list   of shapes generated   from the <br>
//!          shape <EorV>. <br>
virtual /*instead*/  OCTopTools_ListOfShape^ Generated(OCNaroWrappers::OCTopoDS_Shape^ EorV) override;

//! Returns the list  of shapes modified from the shape <br>
//!          <F>. <br>
virtual /*instead*/  OCTopTools_ListOfShape^ Modified(OCNaroWrappers::OCTopoDS_Shape^ F) override;


virtual /*instead*/  System::Boolean IsDeleted(OCNaroWrappers::OCTopoDS_Shape^ F) override;


 /*instead*/  void Simulate(Standard_Integer IC) ;


 /*instead*/  Standard_Integer NbSurf(Standard_Integer IC) ;


 /*instead*/  OCChFiDS_SecHArray1^ Sect(Standard_Integer IC, Standard_Integer IS) ;

~OCBRepFilletAPI_MakeChamfer()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
