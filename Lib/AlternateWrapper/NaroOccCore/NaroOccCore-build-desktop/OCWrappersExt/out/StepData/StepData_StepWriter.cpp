// File generated by CPPExt (CPP file)
//

#include "StepData_StepWriter.h"
#include "../Converter.h"
#include "StepData_StepModel.h"
#include "../TColStd/TColStd_HSequenceOfHAsciiString.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../Interface/Interface_FloatWriter.h"
#include "StepData_Protocol.h"
#include "StepData_WriterLib.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "StepData_Field.h"
#include "StepData_PDescr.h"
#include "StepData_SelectMember.h"
#include "StepData_FieldList.h"
#include "StepData_ESDescr.h"
#include "../Standard/Standard_Transient.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../Interface/Interface_CheckIterator.h"


using namespace OCNaroWrappers;

OCStepData_StepWriter::OCStepData_StepWriter(StepData_StepWriter* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCStepData_StepWriter::OCStepData_StepWriter(OCNaroWrappers::OCStepData_StepModel^ amodel) 
{
  nativeHandle = new StepData_StepWriter(*((Handle_StepData_StepModel*)amodel->Handle));
}

 Standard_Integer OCStepData_StepWriter::LabelMode()
{
  return ((StepData_StepWriter*)nativeHandle)->LabelMode();
}

 Standard_Integer OCStepData_StepWriter::TypeMode()
{
  return ((StepData_StepWriter*)nativeHandle)->TypeMode();
}

OCInterface_FloatWriter^ OCStepData_StepWriter::FloatWriter()
{
  Interface_FloatWriter* tmp = new Interface_FloatWriter(0);
  *tmp = ((StepData_StepWriter*)nativeHandle)->FloatWriter();
  return gcnew OCInterface_FloatWriter(tmp);
}

 void OCStepData_StepWriter::SetScope(Standard_Integer numscope, Standard_Integer numin)
{
  ((StepData_StepWriter*)nativeHandle)->SetScope(numscope, numin);
}

 System::Boolean OCStepData_StepWriter::IsInScope(Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean(((StepData_StepWriter*)nativeHandle)->IsInScope(num));
}

 void OCStepData_StepWriter::SendModel(OCNaroWrappers::OCStepData_Protocol^ protocol, System::Boolean headeronly)
{
  ((StepData_StepWriter*)nativeHandle)->SendModel(*((Handle_StepData_Protocol*)protocol->Handle), OCConverter::BooleanToStandardBoolean(headeronly));
}

 void OCStepData_StepWriter::SendHeader()
{
  ((StepData_StepWriter*)nativeHandle)->SendHeader();
}

 void OCStepData_StepWriter::SendData()
{
  ((StepData_StepWriter*)nativeHandle)->SendData();
}

 void OCStepData_StepWriter::SendEntity(Standard_Integer nument, OCNaroWrappers::OCStepData_WriterLib^ lib)
{
  ((StepData_StepWriter*)nativeHandle)->SendEntity(nument, *((StepData_WriterLib*)lib->Handle));
}

 void OCStepData_StepWriter::EndSec()
{
  ((StepData_StepWriter*)nativeHandle)->EndSec();
}

 void OCStepData_StepWriter::EndFile()
{
  ((StepData_StepWriter*)nativeHandle)->EndFile();
}

 void OCStepData_StepWriter::NewLine(System::Boolean evenempty)
{
  ((StepData_StepWriter*)nativeHandle)->NewLine(OCConverter::BooleanToStandardBoolean(evenempty));
}

 void OCStepData_StepWriter::JoinLast(System::Boolean newline)
{
  ((StepData_StepWriter*)nativeHandle)->JoinLast(OCConverter::BooleanToStandardBoolean(newline));
}

 void OCStepData_StepWriter::Indent(System::Boolean onent)
{
  ((StepData_StepWriter*)nativeHandle)->Indent(OCConverter::BooleanToStandardBoolean(onent));
}

 void OCStepData_StepWriter::SendIdent(Standard_Integer ident)
{
  ((StepData_StepWriter*)nativeHandle)->SendIdent(ident);
}

 void OCStepData_StepWriter::SendScope()
{
  ((StepData_StepWriter*)nativeHandle)->SendScope();
}

 void OCStepData_StepWriter::SendEndscope()
{
  ((StepData_StepWriter*)nativeHandle)->SendEndscope();
}

 void OCStepData_StepWriter::Comment(System::Boolean mode)
{
  ((StepData_StepWriter*)nativeHandle)->Comment(OCConverter::BooleanToStandardBoolean(mode));
}

 void OCStepData_StepWriter::SendComment(OCNaroWrappers::OCTCollection_HAsciiString^ text)
{
  ((StepData_StepWriter*)nativeHandle)->SendComment(*((Handle_TCollection_HAsciiString*)text->Handle));
}

 void OCStepData_StepWriter::SendComment(System::String^ text)
{
  ((StepData_StepWriter*)nativeHandle)->SendComment(OCConverter::StringToStandardCString(text));
}

 void OCStepData_StepWriter::StartEntity(OCNaroWrappers::OCTCollection_AsciiString^ atype)
{
  ((StepData_StepWriter*)nativeHandle)->StartEntity(*((TCollection_AsciiString*)atype->Handle));
}

 void OCStepData_StepWriter::StartComplex()
{
  ((StepData_StepWriter*)nativeHandle)->StartComplex();
}

 void OCStepData_StepWriter::EndComplex()
{
  ((StepData_StepWriter*)nativeHandle)->EndComplex();
}

 void OCStepData_StepWriter::SendField(OCNaroWrappers::OCStepData_Field^ fild, OCNaroWrappers::OCStepData_PDescr^ descr)
{
  ((StepData_StepWriter*)nativeHandle)->SendField(*((StepData_Field*)fild->Handle), *((Handle_StepData_PDescr*)descr->Handle));
}

 void OCStepData_StepWriter::SendSelect(OCNaroWrappers::OCStepData_SelectMember^ sm, OCNaroWrappers::OCStepData_PDescr^ descr)
{
  ((StepData_StepWriter*)nativeHandle)->SendSelect(*((Handle_StepData_SelectMember*)sm->Handle), *((Handle_StepData_PDescr*)descr->Handle));
}

 void OCStepData_StepWriter::SendList(OCNaroWrappers::OCStepData_FieldList^ list, OCNaroWrappers::OCStepData_ESDescr^ descr)
{
  ((StepData_StepWriter*)nativeHandle)->SendList(*((StepData_FieldList*)list->Handle), *((Handle_StepData_ESDescr*)descr->Handle));
}

 void OCStepData_StepWriter::OpenSub()
{
  ((StepData_StepWriter*)nativeHandle)->OpenSub();
}

 void OCStepData_StepWriter::OpenTypedSub(System::String^ subtype)
{
  ((StepData_StepWriter*)nativeHandle)->OpenTypedSub(OCConverter::StringToStandardCString(subtype));
}

 void OCStepData_StepWriter::CloseSub()
{
  ((StepData_StepWriter*)nativeHandle)->CloseSub();
}

 void OCStepData_StepWriter::AddParam()
{
  ((StepData_StepWriter*)nativeHandle)->AddParam();
}

 void OCStepData_StepWriter::Send(Standard_Integer val)
{
  ((StepData_StepWriter*)nativeHandle)->Send(val);
}

 void OCStepData_StepWriter::Send(Standard_Real val)
{
  ((StepData_StepWriter*)nativeHandle)->Send(val);
}

 void OCStepData_StepWriter::Send(OCNaroWrappers::OCTCollection_AsciiString^ val)
{
  ((StepData_StepWriter*)nativeHandle)->Send(*((TCollection_AsciiString*)val->Handle));
}

 void OCStepData_StepWriter::Send(OCNaroWrappers::OCStandard_Transient^ val)
{
  ((StepData_StepWriter*)nativeHandle)->Send(*((Handle_Standard_Transient*)val->Handle));
}

 void OCStepData_StepWriter::SendBoolean(System::Boolean val)
{
  ((StepData_StepWriter*)nativeHandle)->SendBoolean(OCConverter::BooleanToStandardBoolean(val));
}

 void OCStepData_StepWriter::SendLogical(OCStepData_Logical val)
{
  ((StepData_StepWriter*)nativeHandle)->SendLogical((StepData_Logical)val);
}

 void OCStepData_StepWriter::SendString(OCNaroWrappers::OCTCollection_AsciiString^ val)
{
  ((StepData_StepWriter*)nativeHandle)->SendString(*((TCollection_AsciiString*)val->Handle));
}

 void OCStepData_StepWriter::SendString(System::String^ val)
{
  ((StepData_StepWriter*)nativeHandle)->SendString(OCConverter::StringToStandardCString(val));
}

 void OCStepData_StepWriter::SendEnum(OCNaroWrappers::OCTCollection_AsciiString^ val)
{
  ((StepData_StepWriter*)nativeHandle)->SendEnum(*((TCollection_AsciiString*)val->Handle));
}

 void OCStepData_StepWriter::SendEnum(System::String^ val)
{
  ((StepData_StepWriter*)nativeHandle)->SendEnum(OCConverter::StringToStandardCString(val));
}

 void OCStepData_StepWriter::SendArrReal(OCNaroWrappers::OCTColStd_HArray1OfReal^ anArr)
{
  ((StepData_StepWriter*)nativeHandle)->SendArrReal(*((Handle_TColStd_HArray1OfReal*)anArr->Handle));
}

 void OCStepData_StepWriter::SendUndef()
{
  ((StepData_StepWriter*)nativeHandle)->SendUndef();
}

 void OCStepData_StepWriter::SendDerived()
{
  ((StepData_StepWriter*)nativeHandle)->SendDerived();
}

 void OCStepData_StepWriter::EndEntity()
{
  ((StepData_StepWriter*)nativeHandle)->EndEntity();
}

OCInterface_CheckIterator^ OCStepData_StepWriter::CheckList()
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = ((StepData_StepWriter*)nativeHandle)->CheckList();
  return gcnew OCInterface_CheckIterator(tmp);
}

 Standard_Integer OCStepData_StepWriter::NbLines()
{
  return ((StepData_StepWriter*)nativeHandle)->NbLines();
}

OCTCollection_HAsciiString^ OCStepData_StepWriter::Line(Standard_Integer num)
{
  Handle(TCollection_HAsciiString) tmp = ((StepData_StepWriter*)nativeHandle)->Line(num);
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 System::Boolean OCStepData_StepWriter::Print(Standard_OStream& S)
{
  return OCConverter::StandardBooleanToBoolean(((StepData_StepWriter*)nativeHandle)->Print(S));
}


