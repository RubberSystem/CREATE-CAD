// File generated by CPPExt (Transient)
//
#ifndef _StepData_Protocol_OCWrappers_HeaderFile
#define _StepData_Protocol_OCWrappers_HeaderFile

// include the wrapped class
#include <StepData_Protocol.hxx>
#include "../Converter.h"

#include "../Interface/Interface_Protocol.h"

#include "../Interface/Interface_DataMapOfTransientInteger.h"


namespace OCNaroWrappers
{

ref class OCDico_DictionaryOfTransient;
ref class OCInterface_Protocol;
ref class OCStandard_Transient;
ref class OCStandard_Type;
ref class OCInterface_InterfaceModel;
ref class OCStepData_EDescr;
ref class OCStepData_ESDescr;
ref class OCStepData_ECDescr;
ref class OCTColStd_SequenceOfAsciiString;
ref class OCStepData_PDescr;


//! Description of Basic Protocol for Step <br>
//!           The class Protocol from StepData itself describes a default <br>
//!           Protocol, which recognizes only UnknownEntities. <br>
//!           Sub-classes will redefine CaseNumber and, if necessary, <br>
//!           NbResources and Resources. <br>
public ref class OCStepData_Protocol : OCInterface_Protocol {

protected:
  // dummy constructor;
  OCStepData_Protocol(OCDummy^) : OCInterface_Protocol((OCDummy^)nullptr) {};

public:

// constructor from native
OCStepData_Protocol(Handle(StepData_Protocol)* nativeHandle);

// Methods PUBLIC


OCStepData_Protocol();

//! Gives the count of Protocols used as Resource (can be zero) <br>
//!           Here, No resource <br>
 /*instead*/  Standard_Integer NbResources() ;

//! Returns a Resource, given a rank. Here, none <br>
 /*instead*/  OCInterface_Protocol^ Resource(Standard_Integer num) ;

//! Returns a unique positive number for any recognized entity <br>
//!           Redefined to work by calling both TypeNumber and, for a <br>
//!           Described Entity (late binding) DescrNumber <br>
virtual /*instead*/  Standard_Integer CaseNumber(OCNaroWrappers::OCStandard_Transient^ obj) override;

//! Returns a Case Number, specific of each recognized Type <br>
//!           Here, only Unknown Entity is recognized <br>
 /*instead*/  Standard_Integer TypeNumber(OCNaroWrappers::OCStandard_Type^ atype) ;

//! Returns the Schema Name attached to each class of Protocol <br>
//!           To be redefined by each sub-class <br>
//!           Here, SchemaName returns "(DEFAULT)" <br>
//! was C++ : return const <br>
virtual /*instead*/  System::String^ SchemaName() ;

//! Creates an empty Model for Step Norm <br>
 /*instead*/  OCInterface_InterfaceModel^ NewModel() ;

//! Returns True if <model> is a Model of Step Norm <br>
 /*instead*/  System::Boolean IsSuitableModel(OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! Creates a new Unknown Entity for Step (UndefinedEntity) <br>
 /*instead*/  OCStandard_Transient^ UnknownEntity() ;

//! Returns True if <ent> is an Unknown Entity for the Norm, i.e. <br>
//!           Type UndefinedEntity, status Unknown <br>
 /*instead*/  System::Boolean IsUnknownEntity(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns a unique positive CaseNumber for types described by <br>
//!           an EDescr (late binding) <br>
//!  Warning : TypeNumber and DescrNumber must give together a unique <br>
//!           positive case number for each distinct case, type or descr <br>
virtual /*instead*/  Standard_Integer DescrNumber(OCNaroWrappers::OCStepData_EDescr^ adescr) ;

//! Records an EDescr with its case number <br>
//!           Also records its name for an ESDescr (simple type): an ESDescr <br>
//!           is then used, for case number, or for type name <br>
 /*instead*/  void AddDescr(OCNaroWrappers::OCStepData_EDescr^ adescr, Standard_Integer CN) ;

//! Tells if a Protocol brings at least one ESDescr, i.e. if it <br>
//!           defines at least one entity description by ESDescr mechanism <br>
 /*instead*/  System::Boolean HasDescr() ;

//! Returns the description attached to a case number, or null <br>
 /*instead*/  OCStepData_EDescr^ Descr(Standard_Integer num) ;

//! Returns a description according to its name <br>
//!           <anylevel> True (D) : for <me> and its resources <br>
//!           <anylevel> False : for <me> only <br>
 /*instead*/  OCStepData_EDescr^ Descr(System::String^ name, System::Boolean anylevel) ;

//! Idem as Descr but cast to simple description <br>
 /*instead*/  OCStepData_ESDescr^ ESDescr(System::String^ name, System::Boolean anylevel) ;

//! Returns a complex description according to list of names <br>
//!           <anylevel> True (D) : for <me> and its resources <br>
//!           <anylevel> False : for <me> only <br>
 /*instead*/  OCStepData_ECDescr^ ECDescr(OCNaroWrappers::OCTColStd_SequenceOfAsciiString^ names, System::Boolean anylevel) ;

//! Records an PDescr <br>
 /*instead*/  void AddPDescr(OCNaroWrappers::OCStepData_PDescr^ pdescr) ;

//! Returns a parameter description according to its name <br>
//!           <anylevel> True (D) : for <me> and its resources <br>
//!           <anylevel> False : for <me> only <br>
 /*instead*/  OCStepData_PDescr^ PDescr(System::String^ name, System::Boolean anylevel) ;

//! Records an ESDescr, intended to build complex descriptions <br>
 /*instead*/  void AddBasicDescr(OCNaroWrappers::OCStepData_ESDescr^ esdescr) ;

//! Returns a basic description according to its name <br>
//!           <anylevel> True (D) : for <me> and its resources <br>
//!           <anylevel> False : for <me> only <br>
 /*instead*/  OCStepData_EDescr^ BasicDescr(System::String^ name, System::Boolean anylevel) ;

~OCStepData_Protocol()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
