// File generated by CPPExt (CPP file)
//

#include "StepData_StepModel.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../Standard/Standard_Transient.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Interface/Interface_EntityIterator.h"
#include "../Standard/Standard_Type.h"
#include "../Interface/Interface_Check.h"
#include "../Message/Message_Messenger.h"
#include "../TCollection/TCollection_HAsciiString.h"


using namespace OCNaroWrappers;

OCStepData_StepModel::OCStepData_StepModel(Handle(StepData_StepModel)* nativeHandle) : OCInterface_InterfaceModel((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepData_StepModel(*nativeHandle);
}

OCStepData_StepModel::OCStepData_StepModel() : OCInterface_InterfaceModel((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepData_StepModel(new StepData_StepModel());
}

OCStandard_Transient^ OCStepData_StepModel::Entity(Standard_Integer num)
{
  Handle(Standard_Transient) tmp = (*((Handle_StepData_StepModel*)nativeHandle))->Entity(num);
  return gcnew OCStandard_Transient(&tmp);
}

 void OCStepData_StepModel::GetFromAnother(OCNaroWrappers::OCInterface_InterfaceModel^ other)
{
  (*((Handle_StepData_StepModel*)nativeHandle))->GetFromAnother(*((Handle_Interface_InterfaceModel*)other->Handle));
}

OCInterface_InterfaceModel^ OCStepData_StepModel::NewEmptyModel()
{
  Handle(Interface_InterfaceModel) tmp = (*((Handle_StepData_StepModel*)nativeHandle))->NewEmptyModel();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

OCInterface_EntityIterator^ OCStepData_StepModel::Header()
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = (*((Handle_StepData_StepModel*)nativeHandle))->Header();
  return gcnew OCInterface_EntityIterator(tmp);
}

 System::Boolean OCStepData_StepModel::HasHeaderEntity(OCNaroWrappers::OCStandard_Type^ atype)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepModel*)nativeHandle))->HasHeaderEntity(*((Handle_Standard_Type*)atype->Handle)));
}

OCStandard_Transient^ OCStepData_StepModel::HeaderEntity(OCNaroWrappers::OCStandard_Type^ atype)
{
  Handle(Standard_Transient) tmp = (*((Handle_StepData_StepModel*)nativeHandle))->HeaderEntity(*((Handle_Standard_Type*)atype->Handle));
  return gcnew OCStandard_Transient(&tmp);
}

 void OCStepData_StepModel::ClearHeader()
{
  (*((Handle_StepData_StepModel*)nativeHandle))->ClearHeader();
}

 void OCStepData_StepModel::AddHeaderEntity(OCNaroWrappers::OCStandard_Transient^ ent)
{
  (*((Handle_StepData_StepModel*)nativeHandle))->AddHeaderEntity(*((Handle_Standard_Transient*)ent->Handle));
}

 void OCStepData_StepModel::VerifyCheck(OCNaroWrappers::OCInterface_Check^ ach)
{
  (*((Handle_StepData_StepModel*)nativeHandle))->VerifyCheck(*((Handle_Interface_Check*)ach->Handle));
}

 void OCStepData_StepModel::DumpHeader(OCNaroWrappers::OCMessage_Messenger^ S, Standard_Integer level)
{
  (*((Handle_StepData_StepModel*)nativeHandle))->DumpHeader(*((Handle_Message_Messenger*)S->Handle), level);
}

 void OCStepData_StepModel::ClearLabels()
{
  (*((Handle_StepData_StepModel*)nativeHandle))->ClearLabels();
}

 void OCStepData_StepModel::SetIdentLabel(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer ident)
{
  (*((Handle_StepData_StepModel*)nativeHandle))->SetIdentLabel(*((Handle_Standard_Transient*)ent->Handle), ident);
}

 Standard_Integer OCStepData_StepModel::IdentLabel(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return (*((Handle_StepData_StepModel*)nativeHandle))->IdentLabel(*((Handle_Standard_Transient*)ent->Handle));
}

 void OCStepData_StepModel::PrintLabel(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_StepData_StepModel*)nativeHandle))->PrintLabel(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Message_Messenger*)S->Handle));
}

OCTCollection_HAsciiString^ OCStepData_StepModel::StringLabel(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepData_StepModel*)nativeHandle))->StringLabel(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTCollection_HAsciiString(&tmp);
}


