// File generated by CPPExt (MPV)
//
#ifndef _StepData_Field_OCWrappers_HeaderFile
#define _StepData_Field_OCWrappers_HeaderFile

// include native header
#include <StepData_Field.hxx>
#include "../Converter.h"


#include "StepData_Logical.h"


namespace OCNaroWrappers
{

ref class OCStandard_Transient;
ref class OCStepData_SelectMember;


//! Defines a generally defined Field for STEP data : can be used <br>
//!           either in any kind of entity to implement it or in free format <br>
//!           entities in a "late-binding" mode <br>
//!           A field can have : no value (or derived), a single value of <br>
//!           any kind, a list of value : single or double list <br>
//! <br>
//!           When a field is set, this defines its new kind (Integer etc..) <br>
//!           A single value is immediately set. A list of value is, firstly <br>
//!           declared as for a kind (Integer String etc), then declared as <br>
//!           a list with its initial size, after this its items are set <br>
//!           Also it can be set in once if the HArray is ready <br>
public ref class OCStepData_Field  {

protected:
  StepData_Field* nativeHandle;
  OCStepData_Field(OCDummy^) {};

public:
  property StepData_Field* Handle
  {
    StepData_Field* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStepData_Field(StepData_Field* nativeHandle);

// Methods PUBLIC

//! Creates a Field, empty ("no value defined") <br>
OCStepData_Field();

//! Creates a Field from another one. If <copy> is True, Handled <br>
//!           data (Select,String,List, not entities) are copied <br>
OCStepData_Field(OCNaroWrappers::OCStepData_Field^ other, System::Boolean copy);

//! Gets the copy of the values of another field <br>
 /*instead*/  void CopyFrom(OCNaroWrappers::OCStepData_Field^ other) ;

//! Clears the field, to set it as "no value defined" <br>
//!           Just before SetList, predeclares it as "any" <br>
//!           A Kind can be directly set here to declare a type <br>
 /*instead*/  void Clear(Standard_Integer kind) ;

//! Codes a Field as derived (no proper value) <br>
 /*instead*/  void SetDerived() ;

//! Directly sets the Integer value, if its Kind matches <br>
//!           Integer, Boolean, Logical, or Enum (does not change Kind) <br>
 /*instead*/  void SetInt(Standard_Integer val) ;

//! Sets an Integer value (before SetList* declares it as Integer) <br>
 /*instead*/  void SetInteger(Standard_Integer val) ;

//! Sets a Boolean value (or predeclares a list as boolean) <br>
 /*instead*/  void SetBoolean(System::Boolean val) ;

//! Sets a Logical Value (or predeclares a list as logical) <br>
 /*instead*/  void SetLogical(OCStepData_Logical val) ;

//! Sets a Real    Value (or predeclares a list as Real); <br>
 /*instead*/  void SetReal(Standard_Real val) ;

//! Sets a String  Value (or predeclares a list as String) <br>
//!           Does not redefine the Kind if it is alread String or Enum <br>
 /*instead*/  void SetString(System::String^ val) ;

//! Sets an Enum Value (as its integer counterpart) <br>
//!           (or predeclares a list as Enum) <br>
//!           If <text> is given , also sets its textual expression <br>
//!           <val> negative means unknown (known values begin at 0) <br>
 /*instead*/  void SetEnum(Standard_Integer val, System::String^ text) ;

//! Sets a SelectMember (for Integer,Boolean,Enum,Real,Logical) <br>
//!           Hence, the value of the field is accessed through this member <br>
 /*instead*/  void SetSelectMember(OCNaroWrappers::OCStepData_SelectMember^ val) ;

//! Sets an Entity Value <br>
 /*instead*/  void SetEntity(OCNaroWrappers::OCStandard_Transient^ val) ;

//! Predeclares a list as of entity <br>
 /*instead*/  void SetEntity() ;

//! Declares a field as a list, with an initial size <br>
//!           Initial lower is defaulted as 1, can be defined <br>
//!           The list starts empty, typed by the last Set* <br>
//!           If no Set* before, sets it as "any" (transient/select) <br>
 /*instead*/  void SetList(Standard_Integer size, Standard_Integer first) ;

//! Declares a field as an homogeneous square list, with initial\ <br>
//!           sizes, and initial lowers <br>
 /*instead*/  void SetList2(Standard_Integer siz1, Standard_Integer siz2, Standard_Integer f1, Standard_Integer f2) ;

//! Sets an undetermined value : can be String, SelectMember, <br>
//!           HArray(1-2) ... else, an Entity <br>
//!           In case of an HArray, determines and records its size(s) <br>
 /*instead*/  void Set(OCNaroWrappers::OCStandard_Transient^ val) ;

//! Declares an item of the list as undefined <br>
//!           (ignored if list not defined as String,Entity or Any) <br>
 /*instead*/  void ClearItem(Standard_Integer num) ;

//! Internal access to an Integer Value for a list, plus its kind <br>
 /*instead*/  void SetInt(Standard_Integer num, Standard_Integer val, Standard_Integer kind) ;

//! Sets an Integer Value for a list (rank num) <br>
//!           (recognizes a SelectMember) <br>
 /*instead*/  void SetInteger(Standard_Integer num, Standard_Integer val) ;


 /*instead*/  void SetBoolean(Standard_Integer num, System::Boolean val) ;


 /*instead*/  void SetLogical(Standard_Integer num, OCStepData_Logical val) ;

//! Sets an Enum Value (Integer counterpart), also its text <br>
//!           expression if known (if list has been set as "any") <br>
 /*instead*/  void SetEnum(Standard_Integer num, Standard_Integer val, System::String^ text) ;


 /*instead*/  void SetReal(Standard_Integer num, Standard_Real val) ;


 /*instead*/  void SetString(Standard_Integer num, System::String^ val) ;


 /*instead*/  void SetEntity(Standard_Integer num, OCNaroWrappers::OCStandard_Transient^ val) ;


 /*instead*/  System::Boolean IsSet(Standard_Integer n1, Standard_Integer n2) ;

//! Returns the kind of an item in a list or double list <br>
//!           It is the kind of the list, except if it is "Any", in such a <br>
//!           case the true kind is determined and returned <br>
 /*instead*/  Standard_Integer ItemKind(Standard_Integer n1, Standard_Integer n2) ;

//! Returns the kind of the field <br>
//!           <type> True (D) : returns only the type itself <br>
//!           else, returns the complete kind <br>
 /*instead*/  Standard_Integer Kind(System::Boolean type) ;


 /*instead*/  Standard_Integer Arity() ;


 /*instead*/  Standard_Integer Length(Standard_Integer index) ;


 /*instead*/  Standard_Integer Lower(Standard_Integer index) ;


 /*instead*/  Standard_Integer Int() ;


 /*instead*/  Standard_Integer Integer(Standard_Integer n1, Standard_Integer n2) ;


 /*instead*/  System::Boolean Boolean(Standard_Integer n1, Standard_Integer n2) ;


 /*instead*/  OCStepData_Logical Logical(Standard_Integer n1, Standard_Integer n2) ;


 /*instead*/  Standard_Real Real(Standard_Integer n1, Standard_Integer n2) ;


 /*instead*/  System::String^ String(Standard_Integer n1, Standard_Integer n2) ;


 /*instead*/  Standard_Integer Enum(Standard_Integer n1, Standard_Integer n2) ;


 /*instead*/  System::String^ EnumText(Standard_Integer n1, Standard_Integer n2) ;


 /*instead*/  OCStandard_Transient^ Entity(Standard_Integer n1, Standard_Integer n2) ;


 /*instead*/  OCStandard_Transient^ Transient() ;

~OCStepData_Field()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
