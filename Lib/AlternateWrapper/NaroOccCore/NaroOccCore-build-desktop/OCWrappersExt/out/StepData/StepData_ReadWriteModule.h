// File generated by CPPExt (Transient)
//
#ifndef _StepData_ReadWriteModule_OCWrappers_HeaderFile
#define _StepData_ReadWriteModule_OCWrappers_HeaderFile

// include the wrapped class
#include <StepData_ReadWriteModule.hxx>
#include "../Converter.h"

#include "../Interface/Interface_ReaderModule.h"



namespace OCNaroWrappers
{

ref class OCInterface_FileReaderData;
ref class OCTCollection_AsciiString;
ref class OCTColStd_SequenceOfAsciiString;
ref class OCInterface_Check;
ref class OCStandard_Transient;
ref class OCStepData_StepReaderData;
ref class OCStepData_StepWriter;


//! Defines basic File Access Module (Recognize, Read, Write) <br>
//!           That is : ReaderModule (Recognize & Read) + Write for <br>
//!           StepWriter (for a more centralized description) <br>
//!  Warning : A sub-class of ReadWriteModule, which belongs to a particular <br>
//!           Protocol, must use the same definition for Case Numbers (give <br>
//!           the same Value for a StepType defined as a String from a File <br>
//!           as the Protocol does for the corresponding Entity) <br>
public ref class OCStepData_ReadWriteModule : OCInterface_ReaderModule {

protected:
  // dummy constructor;
  OCStepData_ReadWriteModule(OCDummy^) : OCInterface_ReaderModule((OCDummy^)nullptr) {};

public:

// constructor from native
OCStepData_ReadWriteModule(Handle(StepData_ReadWriteModule)* nativeHandle);

// Methods PUBLIC

//! Translate the Type of record <num> in <data> to a positive <br>
//!           Case Number, or 0 if failed. <br>
//!           Works with a StepReaderData, in which the Type of an Entity <br>
//!           is defined as a String : Reads the RecordType <num> then calls <br>
//!           CaseNum (this type) <br>
//!  Warning : The methods CaseStep, StepType and Recognize, <br>
//!           must be in phase (triplets CaseNum-StepType-Type of Object) <br>
 /*instead*/  Standard_Integer CaseNum(OCNaroWrappers::OCInterface_FileReaderData^ data, Standard_Integer num) ;

//! Same a above but for a Complex Type Entity ("Plex") <br>
//!           The provided Default recognizes nothing <br>
virtual /*instead*/  Standard_Integer CaseStep(OCNaroWrappers::OCTColStd_SequenceOfAsciiString^ types) ;

//! Returns True if the Case Number corresponds to a Complex Type <br>
//!           ("Plex"). Remember that all possible combinations must be <br>
//!           aknowledged to be processed <br>
//!           Default is False for all cases. For a Protocol which defines <br>
//!           possible Plexes, this method must be redefined. <br>
virtual /*instead*/  System::Boolean IsComplex(Standard_Integer CN) ;

//! Function specific to STEP. Some STEP Types have a short form <br>
//!           This method can be redefined to fill it <br>
//!           By default, returns an empty string, which is then interpreted <br>
//!           to take normal form from StepType <br>
virtual /*instead*/  OCTCollection_AsciiString^ ShortType(Standard_Integer CN) ;

//! Function specific to STEP, which delivers the list of types <br>
//!           which corresponds to a complex type. If <CN> is not for a <br>
//!           complex type, this method returns False. Else it returns True <br>
//!           and fills the list in alphabetic order. <br>
//!           The default returns False. To be redefined as required. <br>
virtual /*instead*/  System::Boolean ComplexType(Standard_Integer CN, OCNaroWrappers::OCTColStd_SequenceOfAsciiString^ types) ;

//! General Read Function, calls ReadStep <br>
 /*instead*/  void Read(Standard_Integer CN, OCNaroWrappers::OCInterface_FileReaderData^ data, Standard_Integer num, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStandard_Transient^ ent) ;

~OCStepData_ReadWriteModule()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
