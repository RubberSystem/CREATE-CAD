// File generated by CPPExt (MPV)
//
#ifndef _StepData_EnumTool_OCWrappers_HeaderFile
#define _StepData_EnumTool_OCWrappers_HeaderFile

// include native header
#include <StepData_EnumTool.hxx>
#include "../Converter.h"


#include "../TColStd/TColStd_SequenceOfAsciiString.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;


//! This class gives a way of conversion between the value of an <br>
//!           enumeration and its representation in STEP <br>
//!           An enumeration corresponds to an integer with reserved values, <br>
//!           which begin to 0 <br>
//!           In STEP, it is represented by a name in capital letter and <br>
//!           limited by two dots, e.g. .UNKNOWN. <br>
//! <br>
//!           EnumTool works with integers, it is just required to cast <br>
//!           between an integer and an enumeration of required type. <br>
//! <br>
//!           Its definition is intended to allow static creation in once, <br>
//!           without having to recreate once for each use. <br>
//! <br>
//!           It is possible to define subclasses on it, which directly give <br>
//!           the good list of definition texts, and accepts a enumeration <br>
//!           of the good type instead of an integer <br>
public ref class OCStepData_EnumTool  {

protected:
  StepData_EnumTool* nativeHandle;
  OCStepData_EnumTool(OCDummy^) {};

public:
  property StepData_EnumTool* Handle
  {
    StepData_EnumTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStepData_EnumTool(StepData_EnumTool* nativeHandle);

// Methods PUBLIC

//! Creates an EnumTool with definitions given by e0 .. e<max> <br>
//!           Each definition string can bring one term, or several <br>
//!           separated by blanks. Each term corresponds to one value of the <br>
//!           enumeration, if dots are not presents they are added <br>
//! <br>
//!           Such a static constructor allows to build a static description <br>
//!            as : static StepData_EnumTool myenumtool("e0","e1"...); <br>
//!            then use it without having to initialise it <br>
//! <br>
//!           A null definition can be input by given "$" :the corresponding <br>
//!           position is attached to "null/undefined" value (as one <br>
//!           particular item of the enumeration list) <br>
OCStepData_EnumTool(System::String^ e0, System::String^ e1, System::String^ e2, System::String^ e3, System::String^ e4, System::String^ e5, System::String^ e6, System::String^ e7, System::String^ e8, System::String^ e9, System::String^ e10, System::String^ e11, System::String^ e12, System::String^ e13, System::String^ e14, System::String^ e15, System::String^ e16, System::String^ e17, System::String^ e18, System::String^ e19, System::String^ e20, System::String^ e21, System::String^ e22, System::String^ e23, System::String^ e24, System::String^ e25, System::String^ e26, System::String^ e27, System::String^ e28, System::String^ e29, System::String^ e30, System::String^ e31, System::String^ e32, System::String^ e33, System::String^ e34, System::String^ e35, System::String^ e36, System::String^ e37, System::String^ e38, System::String^ e39);

//! Processes a definition, splits it according blanks if any <br>
//!           empty definitions are ignored <br>
//!           A null definition can be input by given "$" :the corresponding <br>
//!           position is attached to "null/undefined" value (as one <br>
//!           particular item of the enumeration list) <br>
//!           See also IsSet <br>
 /*instead*/  void AddDefinition(System::String^ term) ;

//! Returns True if at least one definition has been entered after <br>
//!           creation time (i.e. by AddDefinition only) <br>
//! <br>
//!           This allows to build a static description by a first pass : <br>
//!           static StepData_EnumTool myenumtool("e0" ...); <br>
//!           ... <br>
//!           if (!myenumtool.IsSet()) {             for further inits <br>
//!             myenumtool.AddDefinition("e21"); <br>
//!             ... <br>
//!           } <br>
 /*instead*/  System::Boolean IsSet() ;

//! Returns the maximum integer for a suitable value <br>
//!           Remark : while values begin at zero, MaxValue is the count of <br>
//!           recorded values minus one <br>
 /*instead*/  Standard_Integer MaxValue() ;

//! Sets or Unsets the EnumTool to accept undefined value (for <br>
//!           optional field). Ignored if no null value is defined (by "$") <br>
//!           Can be changed during execution (to read each field), <br>
//!           Default is True (if a null value is defined) <br>
 /*instead*/  void Optional(System::Boolean mode) ;

//! Returns the value attached to "null/undefined value" <br>
//!           If none is specified or if Optional has been set to False, <br>
//!             returns -1 <br>
//!           Null Value has been specified by definition "$" <br>
 /*instead*/  Standard_Integer NullValue() ;

//! Returns the text which corresponds to a given numeric value <br>
//!           It is limited by dots <br>
//!           If num is out of range, returns an empty string <br>
 /*instead*/  OCTCollection_AsciiString^ Text(Standard_Integer num) ;

//! Returns the numeric value found for a text <br>
//!           The text must be in capitals and limited by dots <br>
//!           A non-suitable text gives a negative value to be returned <br>
 /*instead*/  Standard_Integer Value(System::String^ txt) ;

//! Same as above but works on an AsciiString <br>
 /*instead*/  Standard_Integer Value(OCNaroWrappers::OCTCollection_AsciiString^ txt) ;

~OCStepData_EnumTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
