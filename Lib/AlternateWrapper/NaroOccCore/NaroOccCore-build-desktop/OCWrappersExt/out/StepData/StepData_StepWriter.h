// File generated by CPPExt (MPV)
//
#ifndef _StepData_StepWriter_OCWrappers_HeaderFile
#define _StepData_StepWriter_OCWrappers_HeaderFile

// include native header
#include <StepData_StepWriter.hxx>
#include "../Converter.h"


#include "../Interface/Interface_LineBuffer.h"
#include "../Interface/Interface_FloatWriter.h"
#include "../Interface/Interface_CheckIterator.h"
#include "StepData_Logical.h"


namespace OCNaroWrappers
{

ref class OCStepData_StepModel;
ref class OCTColStd_HSequenceOfHAsciiString;
ref class OCTColStd_HArray1OfInteger;
ref class OCInterface_FloatWriter;
ref class OCStepData_Protocol;
ref class OCStepData_WriterLib;
ref class OCTCollection_AsciiString;
ref class OCTCollection_HAsciiString;
ref class OCStepData_Field;
ref class OCStepData_PDescr;
ref class OCStepData_SelectMember;
ref class OCStepData_FieldList;
ref class OCStepData_ESDescr;
ref class OCStandard_Transient;
ref class OCTColStd_HArray1OfReal;
ref class OCInterface_CheckIterator;


//! manages atomic file writing, under control of StepModel (for <br>
//!           general organisation of file) and each class of Transient <br>
//!           (for its own parameters) : prepares text to be written then <br>
//!           writes it <br>
//!           A stream cannot be used because Step limits line length at 72 <br>
//!           In more, a specific object offers more appropriate functions <br>
public ref class OCStepData_StepWriter  {

protected:
  StepData_StepWriter* nativeHandle;
  OCStepData_StepWriter(OCDummy^) {};

public:
  property StepData_StepWriter* Handle
  {
    StepData_StepWriter* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStepData_StepWriter(StepData_StepWriter* nativeHandle);

// Methods PUBLIC

//! Creates an empty StepWriter from a StepModel. The StepModel <br>
//!           provides the Number of Entities, as identifiers for File <br>
OCStepData_StepWriter(OCNaroWrappers::OCStepData_StepModel^ amodel);

//! ModeLabel controls how to display entity ids : <br>
//!           0 (D) gives entity number in the model <br>
//!           1 gives the already recorded label (else, its number) <br>
//!  Warning : conflicts are not controlled <br>
 /*instead*/  Standard_Integer LabelMode() ;

//! TypeMode  controls the type form to use : <br>
//!           0 (D) for normal long form <br>
//!           1 for short form (if a type name has no short form, normal <br>
//!             long form is then used) <br>
 /*instead*/  Standard_Integer TypeMode() ;

//! Returns the embedded FloatWriter, which controls sending Reals <br>
//!           Use this method to access FloatWriter in order to consult or <br>
//!           change its options (MainFormat, FormatForRange,ZeroSuppress), <br>
//!           because it is returned as the address of its field <br>
 /*instead*/  OCInterface_FloatWriter^ FloatWriter() ;

//! Declares the Entity Number <numscope> to correspond to a Scope <br>
//!           which contains the Entity Number <numin>. Several calls to the <br>
//!           same <numscope> add Entities in this Scope, in this order. <br>//!           Error if <numin> is already declared in the Scope <br>
//!  Warning : the declaration of the Scopes is assumed to be consistent, <br>
//!           i.e. <numin> is not referenced from outside this Scope <br>
//!           (not checked here) <br>
 /*instead*/  void SetScope(Standard_Integer numscope, Standard_Integer numin) ;

//! Returns True if an Entity identified by its Number is in a Scope <br>
 /*instead*/  System::Boolean IsInScope(Standard_Integer num) ;

//! Sends the complete Model, included HEADER and DATA Sections <br>
//!           Works with a WriterLib defined through a Protocol <br>
//!           If <headeronly> is given True, only the HEADER Section is sent <br>
//!           (used to Dump the Header of a StepModel) <br>
 /*instead*/  void SendModel(OCNaroWrappers::OCStepData_Protocol^ protocol, System::Boolean headeronly) ;

//! Begins model header <br>
 /*instead*/  void SendHeader() ;

//! Begins data section; error if EndSec was not set <br>
 /*instead*/  void SendData() ;

//! Send an Entity of the Data Section. If it corresponds to a <br>
//!           Scope, also Sends the Scope informations and contained Items <br>
 /*instead*/  void SendEntity(Standard_Integer nument, OCNaroWrappers::OCStepData_WriterLib^ lib) ;

//! sets end of section; to be done before passing to next one <br>
 /*instead*/  void EndSec() ;

//! sets end of file; error is EndSec was not set <br>
 /*instead*/  void EndFile() ;

//! flushes current line; if empty, flushes it (defines a new <br>
//!           empty line) if evenempty is True; else, skips it <br>
 /*instead*/  void NewLine(System::Boolean evenempty) ;

//! joins current line to last one, only if new length is 72 max <br>
//!           if newline is True, a new current line begins; else, current <br>
//!           line is set to the last line (once joined) itself an can be <br>
//!           completed <br>
 /*instead*/  void JoinLast(System::Boolean newline) ;

//! asks that further indentations will begin at position of <br>
//!           entity first opening bracket; else they begin at zero (def) <br>
//!           for each sublist level, two more blancks are added at beginning <br>
//!           (except for text continuation, which must begin at true zero) <br>
 /*instead*/  void Indent(System::Boolean onent) ;

//! begins an entity with an ident plus '=' (at beginning of line) <br>
//!           entity ident is its Number given by the containing Model <br>
//!  Warning : <ident> must be, either Number or Label, according LabelMode <br>
 /*instead*/  void SendIdent(Standard_Integer ident) ;

//! sets a begin of Scope (ends this line) <br>
 /*instead*/  void SendScope() ;

//! sets an end of Scope  (on a separate line) <br>
 /*instead*/  void SendEndscope() ;

//! sets a comment mark : if mode is True, begins Comment zone, <br>
//!           if mode is False, ends Comment zone (if one is begun) <br>
 /*instead*/  void Comment(System::Boolean mode) ;

//! sends a comment. Error if we are not inside a comment zone <br>
 /*instead*/  void SendComment(OCNaroWrappers::OCTCollection_HAsciiString^ text) ;

//! same as above but accepts a CString (ex.: "..." directly) <br>
 /*instead*/  void SendComment(System::String^ text) ;

//! sets entity's StepType, opens brakets, starts param no to 0 <br>
//!           params are separated by comma <br>
//!           Remark : for a Multiple Type Entity (see Express ANDOR clause) <br>
//!           StartComplex must be called before sending componants, then <br>
//!           each "Componant" must be send separately (one call to <br>
//!           StartEntity for each one) : the Type which preceeds is then <br>
//!           automaticaly closed. Once all the componants have been sent, <br>
//!           EndComplex must be called, then and only then EndEntity <br>
 /*instead*/  void StartEntity(OCNaroWrappers::OCTCollection_AsciiString^ atype) ;

//! sends the start of a complex entity, which is a simple open <br>
//!           bracket (without increasing braket level) <br>
//!           It must be called JUST AFTER SendEntity and BEFORE sending <br>
//!           componants, each one begins by StartEntity <br>
 /*instead*/  void StartComplex() ;

//! sends the end of a complex entity : a simple closed bracket <br>
//!           It must be called AFTER sending all the componants and BEFORE <br>
//!           the final call to EndEntity <br>
 /*instead*/  void EndComplex() ;

//! Sends the content of a field, controlled by its descriptor <br>
//!           If the descriptor is not defined, follows the description <br>
//!           detained by the field itself <br>
 /*instead*/  void SendField(OCNaroWrappers::OCStepData_Field^ fild, OCNaroWrappers::OCStepData_PDescr^ descr) ;

//! Sends a SelectMember, which cab be named or not <br>
 /*instead*/  void SendSelect(OCNaroWrappers::OCStepData_SelectMember^ sm, OCNaroWrappers::OCStepData_PDescr^ descr) ;

//! Send the content of an entity as being a FieldList controlled <br>
//!           by its descriptor. This includes start and end brackets but <br>
//!           not the entity type <br>
 /*instead*/  void SendList(OCNaroWrappers::OCStepData_FieldList^ list, OCNaroWrappers::OCStepData_ESDescr^ descr) ;

//! open a sublist by a '(' <br>
 /*instead*/  void OpenSub() ;

//! open a sublist with its type then a '(' <br>
 /*instead*/  void OpenTypedSub(System::String^ subtype) ;

//! closes a sublist by a ')' <br>
 /*instead*/  void CloseSub() ;

//! prepares adding a parameter (that is, adds ',' except for <br>
//!           first one); normally for internal use; can be used to send <br>
//!           a totally empty parameter (with no litteral value) <br>
 /*instead*/  void AddParam() ;

//! sends an integer parameter <br>
 /*instead*/  void Send(Standard_Integer val) ;

//! sends a real parameter (wroks with FloatWriter) <br>
 /*instead*/  void Send(Standard_Real val) ;

//! sends a text given as string (it will be set between '...') <br>
 /*instead*/  void Send(OCNaroWrappers::OCTCollection_AsciiString^ val) ;

//! sends a reference to an entity (its identifier with '#') <br>
//!           REMARK 1 : a Null <val> is interpreted as "Undefined" <br>
//!           REMARK 2 : for an HAsciiString which is not recorded in the <br>
//!           Model, it is send as its String Content, between quotes <br>
 /*instead*/  void Send(OCNaroWrappers::OCStandard_Transient^ val) ;

//! sends a Boolean as .T. for True or .F. for False <br>
//!           (it is an useful case of Enum, which is built-in) <br>
 /*instead*/  void SendBoolean(System::Boolean val) ;

//! sends a Logical as .T. or .F. or .U. according its Value <br>
//!           (it is a standard case of Enum for Step, and is built-in) <br>
 /*instead*/  void SendLogical(OCStepData_Logical val) ;

//! sends a string exactly as it is given <br>
 /*instead*/  void SendString(OCNaroWrappers::OCTCollection_AsciiString^ val) ;

//! sends a string exactly as it is given <br>
 /*instead*/  void SendString(System::String^ val) ;

//! sends an enum given by String (litteral expression) <br>
//!           adds '.' around it if not done <br>
//!           Remark : val can be computed by class EnumTool from StepData: <br>
//!             StepWriter.SendEnum (myenum.Text(enumval)); <br>
 /*instead*/  void SendEnum(OCNaroWrappers::OCTCollection_AsciiString^ val) ;

//! sends an enum given by String (litteral expression) <br>
//!           adds '.' around it if not done <br>
 /*instead*/  void SendEnum(System::String^ val) ;

//! sends an array of real <br>
 /*instead*/  void SendArrReal(OCNaroWrappers::OCTColStd_HArray1OfReal^ anArr) ;

//! sends an undefined (optionnal absent) parameter (by '$') <br>
 /*instead*/  void SendUndef() ;

//! sends a "Derived" parameter (by '*'). A Derived Parameter has <br>
//!           been inherited from a Super-Type then redefined as being <br>
//!           computed by a function. Hence its value in file is senseless. <br>
 /*instead*/  void SendDerived() ;

//! sends end of entity (closing bracket plus ';') <br>
//!           Error if count of opened-closed brackets is not null <br>
 /*instead*/  void EndEntity() ;

//! Returns the check-list, which has received possible checks : <br>
//!           for unknown entities, badly loaded ones, null or unknown <br>
//!           references <br>
 /*instead*/  OCInterface_CheckIterator^ CheckList() ;

//! Returns count of Lines <br>
 /*instead*/  Standard_Integer NbLines() ;

//! Returns a Line given its rank in the File <br>
 /*instead*/  OCTCollection_HAsciiString^ Line(Standard_Integer num) ;

//! writes result on an output defined as an OStream <br>
//!           then clears it <br>
 /*instead*/  System::Boolean Print(Standard_OStream& S) ;

~OCStepData_StepWriter()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
