// File generated by CPPExt (MPV)
//
#ifndef _StepData_SelectType_OCWrappers_HeaderFile
#define _StepData_SelectType_OCWrappers_HeaderFile

// include native header
#include <StepData_SelectType.hxx>
#include "../Converter.h"


#include "StepData_Logical.h"


namespace OCNaroWrappers
{

ref class OCStandard_Transient;
ref class OCStandard_Type;
ref class OCStepData_PDescr;
ref class OCStepData_SelectMember;


//! SelectType is the basis used for SELECT_TYPE definitions from <br>
//!           the EXPRESS form. A SELECT_TYPE in EXPRESS is an enumeration <br>
//!           of Types, it corresponds in a way to a Super-Type, but with <br>
//!           no specific Methods, and no exclusivity (a given Type can be <br>
//!           member of several SELECT_TYPES, plus be itself a SUB_TYPE). <br>
//! <br>
//!           A SelectType can be field of a Transient Entity (it is itself <br>
//!           Storable) or only used to control an input Argument <br>
//! <br>
//!           This class implies to designate each member Type by a Case <br>
//!           Number which is a positive Integer value (this allows a faster <br>
//!           treatement). <br>
//! <br>
//!           With this class, a specific SelectType can : <br>
//!           - recognize an Entity as complying or not with its definition, <br>
//!           - storing it, with the garanty that the stored Entity complies <br>
//!             with the definition of the SelectType <br>
//!           - and (if judged useful) give the stored Entity under the good <br>
//!             Type rather than simply "Transient". <br>
public ref class OCStepData_SelectType  {

protected:
  StepData_SelectType* nativeHandle;
  OCStepData_SelectType(OCDummy^) {};

public:
  property StepData_SelectType* Handle
  {
    StepData_SelectType* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStepData_SelectType(StepData_SelectType* nativeHandle);

// Methods PUBLIC

//! Returns True if the Type of an Entity complies with the <br>
//!           definition list of the SelectType. <br>
//!           Also checks for a SelectMember <br>
//!           Default Implementation looks for CaseNum  or CaseMem positive <br>
 /*instead*/  System::Boolean Matches(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Stores an Entity. This allows to define a specific SelectType <br>
//!           class with one read method per member Type, which returns the <br>
//!           Value casted with the good Type. <br>
 /*instead*/  void SetValue(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Nullifies the Stored Entity <br>
 /*instead*/  void Nullify() ;

//! Returns the Stored Entity. Can be used to define specific <br>
//!           read methods (see above) <br>
 /*instead*/  OCStandard_Transient^ Value() ;

//! Returns True if there is no Stored Entity (i.e. it is Null) <br>
 /*instead*/  System::Boolean IsNull() ;

//! Returns the Effective (Dynamic) Type of the Stored Entity <br>
//!           If it is Null, returns TYPE(Transient) <br>
 /*instead*/  OCStandard_Type^ Type() ;

//! Recognizes the Type of the stored Entity, or zero if it is <br>
//!           Null or SelectMember. Calls the first method CaseNum on Value <br>
 /*instead*/  Standard_Integer CaseNumber() ;

//! Returns the Description which corresponds to <me> <br>
//!           Null if no specific description to give. This description is <br>
//!           used to control reading an check validity. <br>
//!           Default returns a Null Handle, i.e. undefined description <br>
//!           It can suffice if CaseNum and CaseMem give enough control <br>
virtual /*instead*/  OCStepData_PDescr^ Description() ;

//! Returns a preferred SelectMember. Default returns a Null <br>
//!           By default, a SelectMember can be set according to data type <br>
//!           and Name : it is a SelectNamed if Name is defined <br>
//! <br>
//!           This method allows to define, for a specific SelectType, a <br>
//!           specific SelectMember than SelectNamed. For instance for a <br>
//!           Real plus a Name, a SelectReal plus a case number is a good <br>
//!           solution, lighter than SelectNamed which is very multipurpose <br>
virtual /*instead*/  OCStepData_SelectMember^ NewMember() ;

//! Recognize a SelectMember (kind, name). Returns a positive <br>
//!           value which identifies the case in the List of immediate cases <br>
//!           (distinct from the List of Entity Types). Zero if not <br>
//!           recognizes <br>
//!           Default returns 0, saying that no immediate value is allowed <br>
virtual /*instead*/  Standard_Integer CaseMem(OCNaroWrappers::OCStepData_SelectMember^ ent) ;

//! Returns the Type of the stored SelectMember, or zero if it is <br>
//!            Null or Entity. Calls the method CaseMem on Value <br>
 /*instead*/  Standard_Integer CaseMember() ;

//! Returns Value as a SelectMember. Null if not a SelectMember <br>
 /*instead*/  OCStepData_SelectMember^ Member() ;

//! Returns the type name of SelectMember. If no SelectMember or <br>
//!           with no type name, returns an empty string <br>
//!           To change it, pass through the SelectMember itself <br>
 /*instead*/  System::String^ SelectName() ;

//! This internal method gives access to a value implemented by an <br>
//!           Integer (to read it) <br>
 /*instead*/  Standard_Integer Int() ;

//! This internal method gives access to a value implemented by an <br>
//!           Integer (to set it) : a SelectMember MUST ALREADY BE THERE ! <br>
 /*instead*/  void SetInt(Standard_Integer val) ;

//! Gets the value as an Integer <br>
 /*instead*/  Standard_Integer Integer() ;

//! Sets a new Integer value, with an optional type name <br>
//!  Warning : If a SelectMember is already set, works on it : value and <br>
//!           name must then be accepted by this SelectMember <br>
 /*instead*/  void SetInteger(Standard_Integer val, System::String^ name) ;


 /*instead*/  System::Boolean Boolean() ;


 /*instead*/  void SetBoolean(System::Boolean val, System::String^ name) ;


 /*instead*/  OCStepData_Logical Logical() ;


 /*instead*/  void SetLogical(OCStepData_Logical val, System::String^ name) ;


 /*instead*/  Standard_Real Real() ;


 /*instead*/  void SetReal(Standard_Real val, System::String^ name) ;


virtual /*instead*/  void Destroy() ;

~OCStepData_SelectType()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
