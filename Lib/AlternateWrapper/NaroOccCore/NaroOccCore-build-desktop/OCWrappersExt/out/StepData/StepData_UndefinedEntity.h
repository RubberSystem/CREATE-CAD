// File generated by CPPExt (Transient)
//
#ifndef _StepData_UndefinedEntity_OCWrappers_HeaderFile
#define _StepData_UndefinedEntity_OCWrappers_HeaderFile

// include the wrapped class
#include <StepData_UndefinedEntity.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCTCollection_HAsciiString;
ref class OCInterface_UndefinedContent;
ref class OCStepData_StepReaderData;
ref class OCInterface_Check;
ref class OCStepData_StepWriter;
ref class OCInterface_CopyTool;
ref class OCInterface_EntityIterator;


//! Undefined entity specific to Step Interface, in which StepType <br>
//!           is defined at each instance, or is a SubList of another one <br>
//!           Uses an UndefinedContent, that from Interface is suitable. <br>
//!           Also an Entity defined by STEP can be "Complex Type" (see <br>
//!           ANDOR clause in Express). <br>
public ref class OCStepData_UndefinedEntity : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCStepData_UndefinedEntity(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCStepData_UndefinedEntity(Handle(StepData_UndefinedEntity)* nativeHandle);

// Methods PUBLIC

//! creates an Unknown entity <br>
OCStepData_UndefinedEntity();

//! Creates a SubList of an Unknown entity : it is an Unknown <br>
//!           Entity with no Type, but flagged as "SUB" if issub is True <br>
OCStepData_UndefinedEntity(System::Boolean issub);

//! Returns the UndefinedContent which brings the Parameters <br>
 /*instead*/  OCInterface_UndefinedContent^ UndefinedContent() ;

//! Returns True if an Unndefined Entity is SubPart of another one <br>
 /*instead*/  System::Boolean IsSub() ;

//! Returns the "super-entity" of a sub-part <br>
 /*instead*/  OCStepData_UndefinedEntity^ Super() ;

//! Returns True if <me> defines a Multiple Type Entity (see ANDOR) <br>
 /*instead*/  System::Boolean IsComplex() ;

//! For a Multiple Type Entity, returns the Next "Componant" <br>
//!           For more than two Types, iterative definition (Next->Next...) <br>
//!           Returns a Null Handle for the end of the List <br>
 /*instead*/  OCStepData_UndefinedEntity^ Next() ;

//! gives entity type, read from file <br>
//!           For a Complex Type Entity, gives the first Type read, each <br>
//!           "Next" gives its "partial" type <br>
//! was C++ : return const <br>
 /*instead*/  System::String^ StepType() ;

//! reads data from StepReaderData (i.e. from file), by filling <br>
//!           StepType and parameters stored in the UndefinedContent <br>
 /*instead*/  void ReadRecord(OCNaroWrappers::OCStepData_StepReaderData^ SR, Standard_Integer num, OCNaroWrappers::OCInterface_Check^ ach) ;

//! write data to StepWriter, taken from UndefinedContent <br>
 /*instead*/  void WriteParams(OCNaroWrappers::OCStepData_StepWriter^ SW) ;

//! reads another UndefinedEntity from StepData <br>
 /*instead*/  void GetFromAnother(OCNaroWrappers::OCStepData_UndefinedEntity^ other, OCNaroWrappers::OCInterface_CopyTool^ TC) ;

//! Fills the list of shared entities <br>
 /*instead*/  void FillShared(OCNaroWrappers::OCInterface_EntityIterator^ list) ;

~OCStepData_UndefinedEntity()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
