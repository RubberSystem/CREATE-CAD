// File generated by CPPExt (CPP file)
//

#include "StepData_PDescr.h"
#include "../Converter.h"
#include "../Standard/Standard_Type.h"
#include "StepData_EDescr.h"
#include "StepData_Field.h"
#include "../Interface/Interface_Check.h"


using namespace OCNaroWrappers;

OCStepData_PDescr::OCStepData_PDescr(Handle(StepData_PDescr)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepData_PDescr(*nativeHandle);
}

OCStepData_PDescr::OCStepData_PDescr() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepData_PDescr(new StepData_PDescr());
}

 void OCStepData_PDescr::SetName(System::String^ name)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetName(OCConverter::StringToStandardCString(name));
}

 System::String^ OCStepData_PDescr::Name()
{
  return OCConverter::StandardCStringToString((*((Handle_StepData_PDescr*)nativeHandle))->Name());
}

 void OCStepData_PDescr::SetSelect()
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetSelect();
}

 void OCStepData_PDescr::AddMember(OCNaroWrappers::OCStepData_PDescr^ member)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->AddMember(*((Handle_StepData_PDescr*)member->Handle));
}

 void OCStepData_PDescr::SetMemberName(System::String^ memname)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetMemberName(OCConverter::StringToStandardCString(memname));
}

 void OCStepData_PDescr::SetInteger()
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetInteger();
}

 void OCStepData_PDescr::SetReal()
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetReal();
}

 void OCStepData_PDescr::SetString()
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetString();
}

 void OCStepData_PDescr::SetBoolean()
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetBoolean();
}

 void OCStepData_PDescr::SetLogical()
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetLogical();
}

 void OCStepData_PDescr::SetEnum()
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetEnum();
}

 void OCStepData_PDescr::AddEnumDef(System::String^ enumdef)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->AddEnumDef(OCConverter::StringToStandardCString(enumdef));
}

 void OCStepData_PDescr::SetType(OCNaroWrappers::OCStandard_Type^ atype)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetType(*((Handle_Standard_Type*)atype->Handle));
}

 void OCStepData_PDescr::SetDescr(System::String^ dscnam)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetDescr(OCConverter::StringToStandardCString(dscnam));
}

 void OCStepData_PDescr::AddArity(Standard_Integer arity)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->AddArity(arity);
}

 void OCStepData_PDescr::SetArity(Standard_Integer arity)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetArity(arity);
}

 void OCStepData_PDescr::SetFrom(OCNaroWrappers::OCStepData_PDescr^ other)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetFrom(*((Handle_StepData_PDescr*)other->Handle));
}

 void OCStepData_PDescr::SetOptional(System::Boolean opt)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetOptional(OCConverter::BooleanToStandardBoolean(opt));
}

 void OCStepData_PDescr::SetDerived(System::Boolean der)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetDerived(OCConverter::BooleanToStandardBoolean(der));
}

 void OCStepData_PDescr::SetField(System::String^ name, Standard_Integer rank)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->SetField(OCConverter::StringToStandardCString(name), rank);
}

 System::Boolean OCStepData_PDescr::IsSelect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsSelect());
}

OCStepData_PDescr^ OCStepData_PDescr::Member(System::String^ name)
{
  Handle(StepData_PDescr) tmp = (*((Handle_StepData_PDescr*)nativeHandle))->Member(OCConverter::StringToStandardCString(name));
  return gcnew OCStepData_PDescr(&tmp);
}

 System::Boolean OCStepData_PDescr::IsInteger()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsInteger());
}

 System::Boolean OCStepData_PDescr::IsReal()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsReal());
}

 System::Boolean OCStepData_PDescr::IsString()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsString());
}

 System::Boolean OCStepData_PDescr::IsBoolean()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsBoolean());
}

 System::Boolean OCStepData_PDescr::IsLogical()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsLogical());
}

 System::Boolean OCStepData_PDescr::IsEnum()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsEnum());
}

 Standard_Integer OCStepData_PDescr::EnumMax()
{
  return (*((Handle_StepData_PDescr*)nativeHandle))->EnumMax();
}

 Standard_Integer OCStepData_PDescr::EnumValue(System::String^ name)
{
  return (*((Handle_StepData_PDescr*)nativeHandle))->EnumValue(OCConverter::StringToStandardCString(name));
}

 System::String^ OCStepData_PDescr::EnumText(Standard_Integer val)
{
  return OCConverter::StandardCStringToString((*((Handle_StepData_PDescr*)nativeHandle))->EnumText(val));
}

 System::Boolean OCStepData_PDescr::IsEntity()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsEntity());
}

 System::Boolean OCStepData_PDescr::IsType(OCNaroWrappers::OCStandard_Type^ atype)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsType(*((Handle_Standard_Type*)atype->Handle)));
}

OCStandard_Type^ OCStepData_PDescr::Type()
{
  Handle(Standard_Type) tmp = (*((Handle_StepData_PDescr*)nativeHandle))->Type();
  return gcnew OCStandard_Type(&tmp);
}

 System::Boolean OCStepData_PDescr::IsDescr(OCNaroWrappers::OCStepData_EDescr^ descr)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsDescr(*((Handle_StepData_EDescr*)descr->Handle)));
}

 System::String^ OCStepData_PDescr::DescrName()
{
  return OCConverter::StandardCStringToString((*((Handle_StepData_PDescr*)nativeHandle))->DescrName());
}

 Standard_Integer OCStepData_PDescr::Arity()
{
  return (*((Handle_StepData_PDescr*)nativeHandle))->Arity();
}

OCStepData_PDescr^ OCStepData_PDescr::Simple()
{
  Handle(StepData_PDescr) tmp = (*((Handle_StepData_PDescr*)nativeHandle))->Simple();
  return gcnew OCStepData_PDescr(&tmp);
}

 System::Boolean OCStepData_PDescr::IsOptional()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsOptional());
}

 System::Boolean OCStepData_PDescr::IsDerived()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsDerived());
}

 System::Boolean OCStepData_PDescr::IsField()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_PDescr*)nativeHandle))->IsField());
}

 System::String^ OCStepData_PDescr::FieldName()
{
  return OCConverter::StandardCStringToString((*((Handle_StepData_PDescr*)nativeHandle))->FieldName());
}

 Standard_Integer OCStepData_PDescr::FieldRank()
{
  return (*((Handle_StepData_PDescr*)nativeHandle))->FieldRank();
}

 void OCStepData_PDescr::Check(OCNaroWrappers::OCStepData_Field^ afild, OCNaroWrappers::OCInterface_Check^ ach)
{
  (*((Handle_StepData_PDescr*)nativeHandle))->Check(*((StepData_Field*)afild->Handle), *((Handle_Interface_Check*)ach->Handle));
}


