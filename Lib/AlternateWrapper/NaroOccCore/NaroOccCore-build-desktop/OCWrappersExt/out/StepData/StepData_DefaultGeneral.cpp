// File generated by CPPExt (CPP file)
//

#include "StepData_DefaultGeneral.h"
#include "../Converter.h"
#include "../Standard/Standard_Transient.h"
#include "../Interface/Interface_EntityIterator.h"
#include "../Interface/Interface_ShareTool.h"
#include "../Interface/Interface_Check.h"
#include "../Interface/Interface_CopyTool.h"


using namespace OCNaroWrappers;

OCStepData_DefaultGeneral::OCStepData_DefaultGeneral(Handle(StepData_DefaultGeneral)* nativeHandle) : OCStepData_GeneralModule((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepData_DefaultGeneral(*nativeHandle);
}

OCStepData_DefaultGeneral::OCStepData_DefaultGeneral() : OCStepData_GeneralModule((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepData_DefaultGeneral(new StepData_DefaultGeneral());
}

 void OCStepData_DefaultGeneral::FillSharedCase(Standard_Integer casenum, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_EntityIterator^ iter)
{
  (*((Handle_StepData_DefaultGeneral*)nativeHandle))->FillSharedCase(casenum, *((Handle_Standard_Transient*)ent->Handle), *((Interface_EntityIterator*)iter->Handle));
}

 void OCStepData_DefaultGeneral::CheckCase(Standard_Integer casenum, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_ShareTool^ shares, OCNaroWrappers::OCInterface_Check^ ach)
{
  (*((Handle_StepData_DefaultGeneral*)nativeHandle))->CheckCase(casenum, *((Handle_Standard_Transient*)ent->Handle), *((Interface_ShareTool*)shares->Handle), *((Handle_Interface_Check*)ach->Handle));
}

 System::Boolean OCStepData_DefaultGeneral::NewVoid(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ entto)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_DefaultGeneral*)nativeHandle))->NewVoid(CN, *((Handle_Standard_Transient*)entto->Handle)));
}

 void OCStepData_DefaultGeneral::CopyCase(Standard_Integer casenum, OCNaroWrappers::OCStandard_Transient^ entfrom, OCNaroWrappers::OCStandard_Transient^ entto, OCNaroWrappers::OCInterface_CopyTool^ TC)
{
  (*((Handle_StepData_DefaultGeneral*)nativeHandle))->CopyCase(casenum, *((Handle_Standard_Transient*)entfrom->Handle), *((Handle_Standard_Transient*)entto->Handle), *((Interface_CopyTool*)TC->Handle));
}


