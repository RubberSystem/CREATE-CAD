// File generated by CPPExt (Transient)
//
#ifndef _StepData_FreeFormEntity_OCWrappers_HeaderFile
#define _StepData_FreeFormEntity_OCWrappers_HeaderFile

// include the wrapped class
#include <StepData_FreeFormEntity.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCStepData_HArray1OfField;
ref class OCTColStd_HSequenceOfAsciiString;
ref class OCStepData_Field;


//! A Free Form Entity allows to record any kind of STEP <br>
//!           parameters, in any way of typing <br>
//!           It is implemented with an array of fields <br>
//!           A Complex entity can be defined, as a chain of FreeFormEntity <br>
//!           (see Next and As) <br>
public ref class OCStepData_FreeFormEntity : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCStepData_FreeFormEntity(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCStepData_FreeFormEntity(Handle(StepData_FreeFormEntity)* nativeHandle);

// Methods PUBLIC

//! Creates a FreeFormEntity, with no field, no type <br>
OCStepData_FreeFormEntity();

//! Sets the type of an entity <br>
//!           For a complex one, the type of this member <br>
 /*instead*/  void SetStepType(System::String^ typenam) ;

//! Returns the recorded StepType <br>
//!           For a complex one, the type of this member <br>
 /*instead*/  System::String^ StepType() ;

//! Sets a next member, in order to define or complete a Complex <br>
//!           entity <br>
//!           If <last> is True (D), this next will be set as last of list <br>
//!           Else, it is inserted just as next of <me> <br>
//!           If <next> is Null, Next is cleared <br>
 /*instead*/  void SetNext(OCNaroWrappers::OCStepData_FreeFormEntity^ next, System::Boolean last) ;

//! Returns the next member of a Complex entity <br>
//!           (remark : the last member has none) <br>
 /*instead*/  OCStepData_FreeFormEntity^ Next() ;

//! Returns True if a FreeFormEntity is Complex (i.e. has Next) <br>
 /*instead*/  System::Boolean IsComplex() ;

//! Returns the member of a FreeFormEntity of which the type name <br>
//!           is given (exact match, no sub-type) <br>
 /*instead*/  OCStepData_FreeFormEntity^ Typed(System::String^ typenam) ;

//! Returns the list of types (one type for a simple entity), <br>
//!           as is (non reordered) <br>
 /*instead*/  OCTColStd_HSequenceOfAsciiString^ TypeList() ;

//! Reorders a Complex entity if required, i.e. if member types <br>
//!           are not in alphabetic order <br>
//!           Returns False if nothing done (order was OK or simple entity), <br>
//!           True plus modified <ent> if <ent> has been reordered <br>
static /*instead*/  System::Boolean Reorder(OCNaroWrappers::OCStepData_FreeFormEntity^ ent) ;

//! Sets a count of Fields, from scratch <br>
 /*instead*/  void SetNbFields(Standard_Integer nb) ;

//! Returns the count of fields <br>
 /*instead*/  Standard_Integer NbFields() ;

//! Returns a field from its rank, for read-only use <br>
 /*instead*/  OCStepData_Field^ Field(Standard_Integer num) ;

//! Returns a field from its rank, in order to modify it <br>
 /*instead*/  OCStepData_Field^ CField(Standard_Integer num) ;

~OCStepData_FreeFormEntity()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
