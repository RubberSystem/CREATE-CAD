// File generated by CPPExt (CPP file)
//

#include "StepData_StepReaderData.h"
#include "../Converter.h"
#include "../Interface/Interface_Check.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../TColStd/TColStd_SequenceOfAsciiString.h"
#include "StepData_PDescr.h"
#include "../Standard/Standard_Transient.h"
#include "StepData_SelectMember.h"
#include "StepData_Field.h"
#include "StepData_ESDescr.h"
#include "StepData_FieldList.h"
#include "../Standard/Standard_Type.h"
#include "StepData_SelectType.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "StepData_EnumTool.h"


using namespace OCNaroWrappers;

OCStepData_StepReaderData::OCStepData_StepReaderData(Handle(StepData_StepReaderData)* nativeHandle) : OCInterface_FileReaderData((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepData_StepReaderData(*nativeHandle);
}

OCStepData_StepReaderData::OCStepData_StepReaderData(Standard_Integer nbheader, Standard_Integer nbtotal, Standard_Integer nbpar) : OCInterface_FileReaderData((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepData_StepReaderData(new StepData_StepReaderData(nbheader, nbtotal, nbpar));
}

 void OCStepData_StepReaderData::SetRecord(Standard_Integer num, System::String^ ident, System::String^ type, Standard_Integer nbpar)
{
  (*((Handle_StepData_StepReaderData*)nativeHandle))->SetRecord(num, OCConverter::StringToStandardCString(ident), OCConverter::StringToStandardCString(type), nbpar);
}

 void OCStepData_StepReaderData::AddStepParam(Standard_Integer num, System::String^ aval, OCInterface_ParamType atype, Standard_Integer nument)
{
  (*((Handle_StepData_StepReaderData*)nativeHandle))->AddStepParam(num, OCConverter::StringToStandardCString(aval), (Interface_ParamType)atype, nument);
}

OCTCollection_AsciiString^ OCStepData_StepReaderData::RecordType(Standard_Integer num)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_StepData_StepReaderData*)nativeHandle))->RecordType(num);
  return gcnew OCTCollection_AsciiString(tmp);
}

 System::String^ OCStepData_StepReaderData::CType(Standard_Integer num)
{
  return OCConverter::StandardCStringToString((*((Handle_StepData_StepReaderData*)nativeHandle))->CType(num));
}

 Standard_Integer OCStepData_StepReaderData::RecordIdent(Standard_Integer num)
{
  return (*((Handle_StepData_StepReaderData*)nativeHandle))->RecordIdent(num);
}

 Standard_Integer OCStepData_StepReaderData::SubListNumber(Standard_Integer num, Standard_Integer nump, System::Boolean aslast)
{
  return (*((Handle_StepData_StepReaderData*)nativeHandle))->SubListNumber(num, nump, OCConverter::BooleanToStandardBoolean(aslast));
}

 System::Boolean OCStepData_StepReaderData::IsComplex(Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->IsComplex(num));
}

 void OCStepData_StepReaderData::ComplexType(Standard_Integer num, OCNaroWrappers::OCTColStd_SequenceOfAsciiString^ types)
{
  (*((Handle_StepData_StepReaderData*)nativeHandle))->ComplexType(num, *((TColStd_SequenceOfAsciiString*)types->Handle));
}

 Standard_Integer OCStepData_StepReaderData::NextForComplex(Standard_Integer num)
{
  return (*((Handle_StepData_StepReaderData*)nativeHandle))->NextForComplex(num);
}

 System::Boolean OCStepData_StepReaderData::NamedForComplex(System::String^ name, Standard_Integer num0, Standard_Integer& num, OCNaroWrappers::OCInterface_Check^ ach)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->NamedForComplex(OCConverter::StringToStandardCString(name), num0, num, *((Handle_Interface_Check*)ach->Handle)));
}

 System::Boolean OCStepData_StepReaderData::CheckNbParams(Standard_Integer num, Standard_Integer nbreq, OCNaroWrappers::OCInterface_Check^ ach, System::String^ mess)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->CheckNbParams(num, nbreq, *((Handle_Interface_Check*)ach->Handle), OCConverter::StringToStandardCString(mess)));
}

 System::Boolean OCStepData_StepReaderData::ReadSubList(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, Standard_Integer& numsub, System::Boolean optional, Standard_Integer lenmin, Standard_Integer lenmax)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadSubList(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), numsub, OCConverter::BooleanToStandardBoolean(optional), lenmin, lenmax));
}

 Standard_Integer OCStepData_StepReaderData::ReadSub(Standard_Integer numsub, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStepData_PDescr^ descr, OCNaroWrappers::OCStandard_Transient^ val)
{
  return (*((Handle_StepData_StepReaderData*)nativeHandle))->ReadSub(numsub, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), *((Handle_StepData_PDescr*)descr->Handle), *((Handle_Standard_Transient*)val->Handle));
}

 System::Boolean OCStepData_StepReaderData::ReadMember(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStepData_SelectMember^ val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadMember(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), *((Handle_StepData_SelectMember*)val->Handle)));
}

 System::Boolean OCStepData_StepReaderData::ReadField(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStepData_PDescr^ descr, OCNaroWrappers::OCStepData_Field^ fild)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadField(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), *((Handle_StepData_PDescr*)descr->Handle), *((StepData_Field*)fild->Handle)));
}

 System::Boolean OCStepData_StepReaderData::ReadList(Standard_Integer num, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStepData_ESDescr^ descr, OCNaroWrappers::OCStepData_FieldList^ list)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadList(num, *((Handle_Interface_Check*)ach->Handle), *((Handle_StepData_ESDescr*)descr->Handle), *((StepData_FieldList*)list->Handle)));
}

 System::Boolean OCStepData_StepReaderData::ReadAny(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStepData_PDescr^ descr, OCNaroWrappers::OCStandard_Transient^ val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadAny(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), *((Handle_StepData_PDescr*)descr->Handle), *((Handle_Standard_Transient*)val->Handle)));
}

 System::Boolean OCStepData_StepReaderData::ReadXY(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, Standard_Real& X, Standard_Real& Y)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadXY(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), X, Y));
}

 System::Boolean OCStepData_StepReaderData::ReadXYZ(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, Standard_Real& X, Standard_Real& Y, Standard_Real& Z)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadXYZ(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), X, Y, Z));
}

 System::Boolean OCStepData_StepReaderData::ReadReal(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, Standard_Real& val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadReal(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), val));
}

 System::Boolean OCStepData_StepReaderData::ReadEntity(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStandard_Type^ atype, OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadEntity(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), *((Handle_Standard_Type*)atype->Handle), *((Handle_Standard_Transient*)ent->Handle)));
}

 System::Boolean OCStepData_StepReaderData::ReadEntity(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStepData_SelectType^ sel)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadEntity(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), *((StepData_SelectType*)sel->Handle)));
}

 System::Boolean OCStepData_StepReaderData::ReadInteger(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, Standard_Integer& val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadInteger(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), val));
}

 System::Boolean OCStepData_StepReaderData::ReadBoolean(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, System::Boolean& flag)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadBoolean(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), (Standard_Boolean&)(flag)));
}

 System::Boolean OCStepData_StepReaderData::ReadLogical(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCStepData_Logical& flag)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadLogical(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), (StepData_Logical&)flag));
}

 System::Boolean OCStepData_StepReaderData::ReadString(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCTCollection_HAsciiString^ val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadString(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), *((Handle_TCollection_HAsciiString*)val->Handle)));
}

 System::Boolean OCStepData_StepReaderData::ReadEnumParam(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, System::String^& text)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadEnumParam(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), OCConverter::StringToStandardCString(text)));
}

 void OCStepData_StepReaderData::FailEnumValue(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach)
{
  (*((Handle_StepData_StepReaderData*)nativeHandle))->FailEnumValue(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle));
}

 System::Boolean OCStepData_StepReaderData::ReadEnum(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStepData_EnumTool^ enumtool, Standard_Integer& val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadEnum(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), *((StepData_EnumTool*)enumtool->Handle), val));
}

 System::Boolean OCStepData_StepReaderData::ReadTypedParam(Standard_Integer num, Standard_Integer nump, System::Boolean mustbetyped, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, Standard_Integer& numr, Standard_Integer& numrp, OCNaroWrappers::OCTCollection_AsciiString^ typ)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->ReadTypedParam(num, nump, OCConverter::BooleanToStandardBoolean(mustbetyped), OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), numr, numrp, *((TCollection_AsciiString*)typ->Handle)));
}

 System::Boolean OCStepData_StepReaderData::CheckDerived(Standard_Integer num, Standard_Integer nump, System::String^ mess, OCNaroWrappers::OCInterface_Check^ ach, System::Boolean errstat)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_StepReaderData*)nativeHandle))->CheckDerived(num, nump, OCConverter::StringToStandardCString(mess), *((Handle_Interface_Check*)ach->Handle), OCConverter::BooleanToStandardBoolean(errstat)));
}

 Standard_Integer OCStepData_StepReaderData::NbEntities()
{
  return (*((Handle_StepData_StepReaderData*)nativeHandle))->NbEntities();
}

 Standard_Integer OCStepData_StepReaderData::FindNextRecord(Standard_Integer num)
{
  return (*((Handle_StepData_StepReaderData*)nativeHandle))->FindNextRecord(num);
}

 void OCStepData_StepReaderData::SetEntityNumbers(System::Boolean withmap)
{
  (*((Handle_StepData_StepReaderData*)nativeHandle))->SetEntityNumbers(OCConverter::BooleanToStandardBoolean(withmap));
}

 Standard_Integer OCStepData_StepReaderData::FindNextHeaderRecord(Standard_Integer num)
{
  return (*((Handle_StepData_StepReaderData*)nativeHandle))->FindNextHeaderRecord(num);
}

 void OCStepData_StepReaderData::PrepareHeader()
{
  (*((Handle_StepData_StepReaderData*)nativeHandle))->PrepareHeader();
}

OCInterface_Check^ OCStepData_StepReaderData::GlobalCheck()
{
  Handle(Interface_Check) tmp = (*((Handle_StepData_StepReaderData*)nativeHandle))->GlobalCheck();
  return gcnew OCInterface_Check(&tmp);
}


