// File generated by CPPExt (MPV)
//
#ifndef _StepData_StepDumper_OCWrappers_HeaderFile
#define _StepData_StepDumper_OCWrappers_HeaderFile

// include native header
#include <StepData_StepDumper.hxx>
#include "../Converter.h"


#include "../Interface/Interface_GeneralLib.h"
#include "StepData_WriterLib.h"
#include "StepData_StepWriter.h"


namespace OCNaroWrappers
{

ref class OCStepData_StepModel;
ref class OCStepData_Protocol;
ref class OCStepData_StepWriter;
ref class OCMessage_Messenger;
ref class OCStandard_Transient;


//! Provides a way to dump entities processed through STEP, with <br>
//!           these features : <br>
//!           - same form as for writing a STEP File (because it is clear <br>
//!             and compact enough, even if the names of the fields do not <br>
//!             appear) : thus, no additionnal resource is required <br>
//!           - possibility to look for an entity itself (only its Type or <br>
//!             with its content), an entity and it shared items (one level) <br>
//!             or all the entities its refers to, directly or recursively. <br>
public ref class OCStepData_StepDumper  {

protected:
  StepData_StepDumper* nativeHandle;
  OCStepData_StepDumper(OCDummy^) {};

public:
  property StepData_StepDumper* Handle
  {
    StepData_StepDumper* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStepData_StepDumper(StepData_StepDumper* nativeHandle);

// Methods PUBLIC

//! Creates a StepDumper, able to work on a given StepModel <br>
//!           (which defines the total scope for dumping entities) and <br>
//!           a given Protocol from Step (which defines the authorized <br>
//!           types to be dumped) <br>
//!           <mode> commands what is to be displayed (number or label) <br>
//!           0 for number (and corresponding labels  are displayed apart) <br>
//!           1 for label  (and corresponding numbers are displayed apart) <br>
//!           2 for label without anymore <br>
OCStepData_StepDumper(OCNaroWrappers::OCStepData_StepModel^ amodel, OCNaroWrappers::OCStepData_Protocol^ protocol, Standard_Integer mode);

//! Gives an access to the tool which is used to work : this allow <br>
//!           to acts on some parameters : Floating Format, Scopes ... <br>
 /*instead*/  OCStepData_StepWriter^ StepWriter() ;

//! Dumps a Entity on an Messenger. Returns True if <br>
//!           sucess, False, if the entity to dump has not been recognized <br>
//!           by the Protocol. <level> can have one of these values : <br>
//!           - 0 : prints the TYPE only, as known in STEP Files (StepType) <br>
//!             If <ent> has not been regognized by the Protocol, or if its <br>
//!             type is Complex, the StepType is replaced by the display of <br>
//!             the cdl type. Complex Type are well processed by level 1. <br>
//!           - 1 : dumps the entity, completely (whatever it has simple or <br>
//!             complex type) but alone. <br>
//!           - 2 : dumps the entity completely, plus the item its refers to <br>
//!                 at first level (a header message designates the starting <br>
//!                 entity of the dump) <Lists Shared and Implied> <br>
//!           - 3 : dumps the entity and its refered items at any levels <br>
//! <br>
//!           For levels 1,2,3, the numbers displayed (form #nnn) are the <br>
//!           numbers of the corresponding entities in the Model <br>
 /*instead*/  System::Boolean Dump(OCNaroWrappers::OCMessage_Messenger^ S, OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level) ;

//! Works as Dump with a Transient, but directly takes the <br>
//!           entity designated by its number in the Model <br>
//!           Returns False, also if <num> is out of range <br>
 /*instead*/  System::Boolean Dump(OCNaroWrappers::OCMessage_Messenger^ S, Standard_Integer num, Standard_Integer level) ;

~OCStepData_StepDumper()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
