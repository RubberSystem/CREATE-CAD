// File generated by CPPExt (CPP file)
//

#include "StepData_Plex.h"
#include "../Converter.h"
#include "StepData_ECDescr.h"
#include "StepData_Simple.h"
#include "StepData_Field.h"
#include "../TColStd/TColStd_HSequenceOfAsciiString.h"
#include "../Interface/Interface_Check.h"
#include "../Interface/Interface_EntityIterator.h"


using namespace OCNaroWrappers;

OCStepData_Plex::OCStepData_Plex(Handle(StepData_Plex)* nativeHandle) : OCStepData_Described((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepData_Plex(*nativeHandle);
}

OCStepData_Plex::OCStepData_Plex(OCNaroWrappers::OCStepData_ECDescr^ descr) : OCStepData_Described((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepData_Plex(new StepData_Plex(*((Handle_StepData_ECDescr*)descr->Handle)));
}

 void OCStepData_Plex::Add(OCNaroWrappers::OCStepData_Simple^ member)
{
  (*((Handle_StepData_Plex*)nativeHandle))->Add(*((Handle_StepData_Simple*)member->Handle));
}

OCStepData_ECDescr^ OCStepData_Plex::ECDescr()
{
  Handle(StepData_ECDescr) tmp = (*((Handle_StepData_Plex*)nativeHandle))->ECDescr();
  return gcnew OCStepData_ECDescr(&tmp);
}

 System::Boolean OCStepData_Plex::IsComplex()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_Plex*)nativeHandle))->IsComplex());
}

 System::Boolean OCStepData_Plex::Matches(System::String^ steptype)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_Plex*)nativeHandle))->Matches(OCConverter::StringToStandardCString(steptype)));
}

OCStepData_Simple^ OCStepData_Plex::As(System::String^ steptype)
{
  Handle(StepData_Simple) tmp = (*((Handle_StepData_Plex*)nativeHandle))->As(OCConverter::StringToStandardCString(steptype));
  return gcnew OCStepData_Simple(&tmp);
}

 System::Boolean OCStepData_Plex::HasField(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepData_Plex*)nativeHandle))->HasField(OCConverter::StringToStandardCString(name)));
}

OCStepData_Field^ OCStepData_Plex::Field(System::String^ name)
{
  StepData_Field* tmp = new StepData_Field();
  *tmp = (*((Handle_StepData_Plex*)nativeHandle))->Field(OCConverter::StringToStandardCString(name));
  return gcnew OCStepData_Field(tmp);
}

OCStepData_Field^ OCStepData_Plex::CField(System::String^ name)
{
  StepData_Field* tmp = new StepData_Field();
  *tmp = (*((Handle_StepData_Plex*)nativeHandle))->CField(OCConverter::StringToStandardCString(name));
  return gcnew OCStepData_Field(tmp);
}

 Standard_Integer OCStepData_Plex::NbMembers()
{
  return (*((Handle_StepData_Plex*)nativeHandle))->NbMembers();
}

OCStepData_Simple^ OCStepData_Plex::Member(Standard_Integer num)
{
  Handle(StepData_Simple) tmp = (*((Handle_StepData_Plex*)nativeHandle))->Member(num);
  return gcnew OCStepData_Simple(&tmp);
}

OCTColStd_HSequenceOfAsciiString^ OCStepData_Plex::TypeList()
{
  Handle(TColStd_HSequenceOfAsciiString) tmp = (*((Handle_StepData_Plex*)nativeHandle))->TypeList();
  return gcnew OCTColStd_HSequenceOfAsciiString(&tmp);
}

 void OCStepData_Plex::Check(OCNaroWrappers::OCInterface_Check^ ach)
{
  (*((Handle_StepData_Plex*)nativeHandle))->Check(*((Handle_Interface_Check*)ach->Handle));
}

 void OCStepData_Plex::Shared(OCNaroWrappers::OCInterface_EntityIterator^ list)
{
  (*((Handle_StepData_Plex*)nativeHandle))->Shared(*((Interface_EntityIterator*)list->Handle));
}


