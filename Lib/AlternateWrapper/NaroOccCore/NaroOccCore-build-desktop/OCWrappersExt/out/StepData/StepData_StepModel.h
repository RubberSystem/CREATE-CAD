// File generated by CPPExt (Transient)
//
#ifndef _StepData_StepModel_OCWrappers_HeaderFile
#define _StepData_StepModel_OCWrappers_HeaderFile

// include the wrapped class
#include <StepData_StepModel.hxx>
#include "../Converter.h"

#include "../Interface/Interface_InterfaceModel.h"

#include "../Interface/Interface_EntityList.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfInteger;
ref class OCStandard_Transient;
ref class OCInterface_InterfaceModel;
ref class OCInterface_EntityIterator;
ref class OCStandard_Type;
ref class OCInterface_Check;
ref class OCMessage_Messenger;
ref class OCTCollection_HAsciiString;


//! Gives access to <br>
//! - entities in a STEP file, <br>
//! - the STEP file header. <br>
public ref class OCStepData_StepModel : OCInterface_InterfaceModel {

protected:
  // dummy constructor;
  OCStepData_StepModel(OCDummy^) : OCInterface_InterfaceModel((OCDummy^)nullptr) {};

public:

// constructor from native
OCStepData_StepModel(Handle(StepData_StepModel)* nativeHandle);

// Methods PUBLIC

//! Creates an empty STEP model with an empty header. <br>
OCStepData_StepModel();

//! returns entity given its rank. <br>
//!           Same as InterfaceEntity, but with a shorter name <br>
 /*instead*/  OCStandard_Transient^ Entity(Standard_Integer num) ;

//! gets header from another Model (uses Header Protocol) <br>
 /*instead*/  void GetFromAnother(OCNaroWrappers::OCInterface_InterfaceModel^ other) ;

//! Returns a New Empty Model, same type as <me>, i.e. StepModel <br>
 /*instead*/  OCInterface_InterfaceModel^ NewEmptyModel() ;

//! returns Header entities under the form of an iterator <br>
 /*instead*/  OCInterface_EntityIterator^ Header() ;

//! says if a Header entity has a specifed type <br>
 /*instead*/  System::Boolean HasHeaderEntity(OCNaroWrappers::OCStandard_Type^ atype) ;

//! Returns Header entity with specified type, if there is <br>
 /*instead*/  OCStandard_Transient^ HeaderEntity(OCNaroWrappers::OCStandard_Type^ atype) ;

//! Clears the Header <br>
 /*instead*/  void ClearHeader() ;

//! Adds an Entity to the Header <br>
 /*instead*/  void AddHeaderEntity(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Specific Check, checks Header Items with HeaderProtocol <br>
virtual /*instead*/  void VerifyCheck(OCNaroWrappers::OCInterface_Check^ ach) override;

//! Dumps the Header, with the Header Protocol of StepData. <br>
//!           If the Header Protocol is not defined, for each Header Entity, <br>
//!           prints its Type. Else sends the Header under the form of <br>
//!           HEADER Section of an Ascii Step File <br>
//!           <level> is not used because Header is not so big <br>
 /*instead*/  void DumpHeader(OCNaroWrappers::OCMessage_Messenger^ S, Standard_Integer level) ;

//! erases specific labels, i.e. clears the map (entity-ident) <br>
 /*instead*/  void ClearLabels() ;

//! Attaches an ident to an entity to produce a label <br>
//!           (does nothing if <ent> is not in <me>) <br>
 /*instead*/  void SetIdentLabel(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer ident) ;

//! returns the label ident attached to an entity, 0 if not in me <br>
 /*instead*/  Standard_Integer IdentLabel(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Prints label specific to STEP norm for a given entity, i.e. <br>
//!           if a LabelIdent has been recorded, its value with '#', else <br>
//!           the number in the model with '#' and between () <br>
 /*instead*/  void PrintLabel(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Returns a string with the label attached to a given entity, <br>
//!           same form as for PrintLabel <br>
 /*instead*/  OCTCollection_HAsciiString^ StringLabel(OCNaroWrappers::OCStandard_Transient^ ent) ;

~OCStepData_StepModel()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
