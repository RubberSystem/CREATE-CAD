// File generated by CPPExt (CPP file)
//

#include "Approx_FitAndDivide.h"
#include "../Converter.h"
#include "../AppCont/AppCont_Function.h"
#include "../AppCont/AppCont_FunctionTool.h"
#include "Approx_MyLeastSquareOfFitAndDivide.h"
#include "../AppParCurves/AppParCurves_MultiCurve.h"


using namespace OCNaroWrappers;

OCApprox_FitAndDivide::OCApprox_FitAndDivide(Approx_FitAndDivide* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCApprox_FitAndDivide::OCApprox_FitAndDivide(OCNaroWrappers::OCAppCont_Function^ Line, Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, System::Boolean cutting, OCAppParCurves_Constraint FirstC, OCAppParCurves_Constraint LastC) 
{
  nativeHandle = new Approx_FitAndDivide(*((AppCont_Function*)Line->Handle), degreemin, degreemax, Tolerance3d, Tolerance2d, OCConverter::BooleanToStandardBoolean(cutting), (AppParCurves_Constraint)FirstC, (AppParCurves_Constraint)LastC);
}

OCApprox_FitAndDivide::OCApprox_FitAndDivide(Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, System::Boolean cutting, OCAppParCurves_Constraint FirstC, OCAppParCurves_Constraint LastC) 
{
  nativeHandle = new Approx_FitAndDivide(degreemin, degreemax, Tolerance3d, Tolerance2d, OCConverter::BooleanToStandardBoolean(cutting), (AppParCurves_Constraint)FirstC, (AppParCurves_Constraint)LastC);
}

 void OCApprox_FitAndDivide::Perform(OCNaroWrappers::OCAppCont_Function^ Line)
{
  ((Approx_FitAndDivide*)nativeHandle)->Perform(*((AppCont_Function*)Line->Handle));
}

 void OCApprox_FitAndDivide::SetDegrees(Standard_Integer degreemin, Standard_Integer degreemax)
{
  ((Approx_FitAndDivide*)nativeHandle)->SetDegrees(degreemin, degreemax);
}

 void OCApprox_FitAndDivide::SetTolerances(Standard_Real Tolerance3d, Standard_Real Tolerance2d)
{
  ((Approx_FitAndDivide*)nativeHandle)->SetTolerances(Tolerance3d, Tolerance2d);
}

 void OCApprox_FitAndDivide::SetConstraints(OCAppParCurves_Constraint FirstC, OCAppParCurves_Constraint LastC)
{
  ((Approx_FitAndDivide*)nativeHandle)->SetConstraints((AppParCurves_Constraint)FirstC, (AppParCurves_Constraint)LastC);
}

 System::Boolean OCApprox_FitAndDivide::IsAllApproximated()
{
  return OCConverter::StandardBooleanToBoolean(((Approx_FitAndDivide*)nativeHandle)->IsAllApproximated());
}

 System::Boolean OCApprox_FitAndDivide::IsToleranceReached()
{
  return OCConverter::StandardBooleanToBoolean(((Approx_FitAndDivide*)nativeHandle)->IsToleranceReached());
}

 void OCApprox_FitAndDivide::Error(Standard_Integer Index, Standard_Real& tol3d, Standard_Real& tol2d)
{
  ((Approx_FitAndDivide*)nativeHandle)->Error(Index, tol3d, tol2d);
}

 Standard_Integer OCApprox_FitAndDivide::NbMultiCurves()
{
  return ((Approx_FitAndDivide*)nativeHandle)->NbMultiCurves();
}

OCAppParCurves_MultiCurve^ OCApprox_FitAndDivide::Value(Standard_Integer Index)
{
  AppParCurves_MultiCurve* tmp = new AppParCurves_MultiCurve();
  *tmp = ((Approx_FitAndDivide*)nativeHandle)->Value(Index);
  return gcnew OCAppParCurves_MultiCurve(tmp);
}

 void OCApprox_FitAndDivide::Parameters(Standard_Integer Index, Standard_Real& firstp, Standard_Real& lastp)
{
  ((Approx_FitAndDivide*)nativeHandle)->Parameters(Index, firstp, lastp);
}


