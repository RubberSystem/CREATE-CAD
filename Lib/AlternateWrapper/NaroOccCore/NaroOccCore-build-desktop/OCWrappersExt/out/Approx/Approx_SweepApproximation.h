// File generated by CPPExt (MPV)
//
#ifndef _Approx_SweepApproximation_OCWrappers_HeaderFile
#define _Approx_SweepApproximation_OCWrappers_HeaderFile

// include native header
#include <Approx_SweepApproximation.hxx>
#include "../Converter.h"


#include "../TColgp/TColgp_SequenceOfArray1OfPnt2d.h"
#include "../gp/gp_Vec.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCApprox_SweepFunction;
ref class OCTColgp_HArray2OfPnt;
ref class OCTColStd_HArray2OfReal;
ref class OCTColStd_HArray1OfReal;
ref class OCTColStd_HArray1OfInteger;
ref class OCApprox_HArray1OfGTrsf2d;
ref class OCTColgp_HArray1OfPnt;
ref class OCTColgp_HArray1OfPnt2d;
ref class OCTColgp_HArray1OfVec;
ref class OCTColgp_HArray1OfVec2d;
ref class OCAdvApprox_Cutting;
ref class OCTColgp_Array2OfPnt;
ref class OCTColStd_Array2OfReal;
ref class OCTColStd_Array1OfReal;
ref class OCTColStd_Array1OfInteger;
ref class OCTColgp_Array1OfPnt2d;


//!  Approximation  of  an  Surface   S(u,v) <br>
//!          (and eventually associate  2d Curves) defined <br>
//!           by section's law. <br>
//! <br>
//!            This surface is defined by a function F(u, v) <br>
//!            where Ft(u) = F(u, t) is a bspline curve. <br>
//!            To use this algorithme, you  have to implement Ft(u) <br>
//!            as a derivative class  of Approx_SweepFunction. <br>
//!            This algorithm can be used by blending, sweeping... <br>
public ref class OCApprox_SweepApproximation  {

protected:
  Approx_SweepApproximation* nativeHandle;
  OCApprox_SweepApproximation(OCDummy^) {};

public:
  property Approx_SweepApproximation* Handle
  {
    Approx_SweepApproximation* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCApprox_SweepApproximation(Approx_SweepApproximation* nativeHandle);

// Methods PUBLIC


OCApprox_SweepApproximation(OCNaroWrappers::OCApprox_SweepFunction^ Func);

//! Perform the Approximation <br>
//!    [First, Last] : Approx_SweepApproximation.cdl <br>
//!    Tol3d : Tolerance to surface approximation <br>
//!    Tol2d : Tolerance used to perform curve approximation <br>
//!            Normaly the 2d curve are approximated with a <br>
//!            tolerance given by the resolution on support surfaces, <br>
//!            but if this tolerance is too large Tol2d is used. <br>
//!    TolAngular : Tolerance (in radian) to control the angle <br>
//!                 beetween tangents on the section law and <br>
//!                 tangent of iso-v on approximed surface <br>
//!    Continuity : The continuity in v waiting on the surface <br>
//!    Degmax     : The maximum degree in v requiered on the surface <br>
//!    Segmax     : The maximum number of span in v requiered on <br>
//!                 the surface <br>
//!   Warning : The continuity ci can be obtained only if Ft is Ci <br>
 /*instead*/  void Perform(Standard_Real First, Standard_Real Last, Standard_Real Tol3d, Standard_Real BoundTol, Standard_Real Tol2d, Standard_Real TolAngular, OCGeomAbs_Shape Continuity, Standard_Integer Degmax, Standard_Integer Segmax) ;

//! The EvaluatorFunction from AdvApprox; <br>
 /*instead*/  Standard_Integer Eval(Standard_Real Parameter, Standard_Integer DerivativeRequest, Standard_Real First, Standard_Real Last, Standard_Real& Result) ;

//! returns if we have an result <br>
 /*instead*/  System::Boolean IsDone() ;


 /*instead*/  void SurfShape(Standard_Integer& UDegree, Standard_Integer& VDegree, Standard_Integer& NbUPoles, Standard_Integer& NbVPoles, Standard_Integer& NbUKnots, Standard_Integer& NbVKnots) ;


 /*instead*/  void Surface(OCNaroWrappers::OCTColgp_Array2OfPnt^ TPoles, OCNaroWrappers::OCTColStd_Array2OfReal^ TWeights, OCNaroWrappers::OCTColStd_Array1OfReal^ TUKnots, OCNaroWrappers::OCTColStd_Array1OfReal^ TVKnots, OCNaroWrappers::OCTColStd_Array1OfInteger^ TUMults, OCNaroWrappers::OCTColStd_Array1OfInteger^ TVMults) ;


 /*instead*/  Standard_Integer UDegree() ;


 /*instead*/  Standard_Integer VDegree() ;


 /*instead*/  OCTColgp_Array2OfPnt^ SurfPoles() ;


 /*instead*/  OCTColStd_Array2OfReal^ SurfWeights() ;


 /*instead*/  OCTColStd_Array1OfReal^ SurfUKnots() ;


 /*instead*/  OCTColStd_Array1OfReal^ SurfVKnots() ;


 /*instead*/  OCTColStd_Array1OfInteger^ SurfUMults() ;


 /*instead*/  OCTColStd_Array1OfInteger^ SurfVMults() ;

//! returns the maximum error in the suface approximation. <br>
 /*instead*/  Standard_Real MaxErrorOnSurf() ;

//! returns the average error in the suface approximation. <br>
 /*instead*/  Standard_Real AverageErrorOnSurf() ;


 /*instead*/  Standard_Integer NbCurves2d() ;


 /*instead*/  void Curves2dShape(Standard_Integer& Degree, Standard_Integer& NbPoles, Standard_Integer& NbKnots) ;


 /*instead*/  void Curve2d(Standard_Integer Index, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ TPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ TKnots, OCNaroWrappers::OCTColStd_Array1OfInteger^ TMults) ;


 /*instead*/  Standard_Integer Curves2dDegree() ;


 /*instead*/  OCTColgp_Array1OfPnt2d^ Curve2dPoles(Standard_Integer Index) ;


 /*instead*/  OCTColStd_Array1OfReal^ Curves2dKnots() ;


 /*instead*/  OCTColStd_Array1OfInteger^ Curves2dMults() ;

//! returns the maximum error of the <Index> <br>
//!          2d curve approximation. <br>
 /*instead*/  Standard_Real Max2dError(Standard_Integer Index) ;

//! returns the average error of the <Index> <br>
//!          2d curve approximation. <br>
 /*instead*/  Standard_Real Average2dError(Standard_Integer Index) ;

//!  returns the  maximum 3d  error  of the  <Index> <br>
//!           2d curve approximation on the Surface. <br>
 /*instead*/  Standard_Real TolCurveOnSurf(Standard_Integer Index) ;

//! display information on approximation. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCApprox_SweepApproximation()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
