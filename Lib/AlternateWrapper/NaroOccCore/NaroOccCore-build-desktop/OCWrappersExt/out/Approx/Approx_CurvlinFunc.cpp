// File generated by CPPExt (CPP file)
//

#include "Approx_CurvlinFunc.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "../TColStd/TColStd_Array1OfReal.h"


using namespace OCNaroWrappers;

OCApprox_CurvlinFunc::OCApprox_CurvlinFunc(Handle(Approx_CurvlinFunc)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Approx_CurvlinFunc(*nativeHandle);
}

OCApprox_CurvlinFunc::OCApprox_CurvlinFunc(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real Tol) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Approx_CurvlinFunc(new Approx_CurvlinFunc(*((Handle_Adaptor3d_HCurve*)C->Handle), Tol));
}

OCApprox_CurvlinFunc::OCApprox_CurvlinFunc(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C2D, OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real Tol) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Approx_CurvlinFunc(new Approx_CurvlinFunc(*((Handle_Adaptor2d_HCurve2d*)C2D->Handle), *((Handle_Adaptor3d_HSurface*)S->Handle), Tol));
}

OCApprox_CurvlinFunc::OCApprox_CurvlinFunc(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C2D1, OCNaroWrappers::OCAdaptor2d_HCurve2d^ C2D2, OCNaroWrappers::OCAdaptor3d_HSurface^ S1, OCNaroWrappers::OCAdaptor3d_HSurface^ S2, Standard_Real Tol) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Approx_CurvlinFunc(new Approx_CurvlinFunc(*((Handle_Adaptor2d_HCurve2d*)C2D1->Handle), *((Handle_Adaptor2d_HCurve2d*)C2D2->Handle), *((Handle_Adaptor3d_HSurface*)S1->Handle), *((Handle_Adaptor3d_HSurface*)S2->Handle), Tol));
}

 void OCApprox_CurvlinFunc::SetTol(Standard_Real Tol)
{
  (*((Handle_Approx_CurvlinFunc*)nativeHandle))->SetTol(Tol);
}

 Standard_Real OCApprox_CurvlinFunc::FirstParameter()
{
  return (*((Handle_Approx_CurvlinFunc*)nativeHandle))->FirstParameter();
}

 Standard_Real OCApprox_CurvlinFunc::LastParameter()
{
  return (*((Handle_Approx_CurvlinFunc*)nativeHandle))->LastParameter();
}

 Standard_Integer OCApprox_CurvlinFunc::NbIntervals(OCGeomAbs_Shape S)
{
  return (*((Handle_Approx_CurvlinFunc*)nativeHandle))->NbIntervals((GeomAbs_Shape)S);
}

 void OCApprox_CurvlinFunc::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  (*((Handle_Approx_CurvlinFunc*)nativeHandle))->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 void OCApprox_CurvlinFunc::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  (*((Handle_Approx_CurvlinFunc*)nativeHandle))->Trim(First, Last, Tol);
}

 void OCApprox_CurvlinFunc::Length()
{
  (*((Handle_Approx_CurvlinFunc*)nativeHandle))->Length();
}

 Standard_Real OCApprox_CurvlinFunc::Length(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real FirstU, Standard_Real LasrU)
{
  return (*((Handle_Approx_CurvlinFunc*)nativeHandle))->Length(*((Adaptor3d_Curve*)C->Handle), FirstU, LasrU);
}

 Standard_Real OCApprox_CurvlinFunc::GetLength()
{
  return (*((Handle_Approx_CurvlinFunc*)nativeHandle))->GetLength();
}

 Standard_Real OCApprox_CurvlinFunc::GetUParameter(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real S, Standard_Integer NumberOfCurve)
{
  return (*((Handle_Approx_CurvlinFunc*)nativeHandle))->GetUParameter(*((Adaptor3d_Curve*)C->Handle), S, NumberOfCurve);
}

 Standard_Real OCApprox_CurvlinFunc::GetSParameter(Standard_Real U)
{
  return (*((Handle_Approx_CurvlinFunc*)nativeHandle))->GetSParameter(U);
}

 System::Boolean OCApprox_CurvlinFunc::EvalCase1(Standard_Real S, Standard_Integer Order, OCNaroWrappers::OCTColStd_Array1OfReal^ Result)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Approx_CurvlinFunc*)nativeHandle))->EvalCase1(S, Order, *((TColStd_Array1OfReal*)Result->Handle)));
}

 System::Boolean OCApprox_CurvlinFunc::EvalCase2(Standard_Real S, Standard_Integer Order, OCNaroWrappers::OCTColStd_Array1OfReal^ Result)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Approx_CurvlinFunc*)nativeHandle))->EvalCase2(S, Order, *((TColStd_Array1OfReal*)Result->Handle)));
}

 System::Boolean OCApprox_CurvlinFunc::EvalCase3(Standard_Real S, Standard_Integer Order, OCNaroWrappers::OCTColStd_Array1OfReal^ Result)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Approx_CurvlinFunc*)nativeHandle))->EvalCase3(S, Order, *((TColStd_Array1OfReal*)Result->Handle)));
}


