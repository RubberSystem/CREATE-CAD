// File generated by CPPExt (CPP file)
//

#include "Approx_CurvilinearParameter.h"
#include "../Converter.h"
#include "../Geom/Geom_BSplineCurve.h"
#include "../Geom2d/Geom2d_BSplineCurve.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"


using namespace OCNaroWrappers;

OCApprox_CurvilinearParameter::OCApprox_CurvilinearParameter(Approx_CurvilinearParameter* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCApprox_CurvilinearParameter::OCApprox_CurvilinearParameter(OCNaroWrappers::OCAdaptor3d_HCurve^ C3D, Standard_Real Tol, OCGeomAbs_Shape Order, Standard_Integer MaxDegree, Standard_Integer MaxSegments) 
{
  nativeHandle = new Approx_CurvilinearParameter(*((Handle_Adaptor3d_HCurve*)C3D->Handle), Tol, (GeomAbs_Shape)Order, MaxDegree, MaxSegments);
}

OCApprox_CurvilinearParameter::OCApprox_CurvilinearParameter(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C2D, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf, Standard_Real Tol, OCGeomAbs_Shape Order, Standard_Integer MaxDegree, Standard_Integer MaxSegments) 
{
  nativeHandle = new Approx_CurvilinearParameter(*((Handle_Adaptor2d_HCurve2d*)C2D->Handle), *((Handle_Adaptor3d_HSurface*)Surf->Handle), Tol, (GeomAbs_Shape)Order, MaxDegree, MaxSegments);
}

OCApprox_CurvilinearParameter::OCApprox_CurvilinearParameter(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C2D1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor2d_HCurve2d^ C2D2, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, Standard_Real Tol, OCGeomAbs_Shape Order, Standard_Integer MaxDegree, Standard_Integer MaxSegments) 
{
  nativeHandle = new Approx_CurvilinearParameter(*((Handle_Adaptor2d_HCurve2d*)C2D1->Handle), *((Handle_Adaptor3d_HSurface*)Surf1->Handle), *((Handle_Adaptor2d_HCurve2d*)C2D2->Handle), *((Handle_Adaptor3d_HSurface*)Surf2->Handle), Tol, (GeomAbs_Shape)Order, MaxDegree, MaxSegments);
}

 System::Boolean OCApprox_CurvilinearParameter::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Approx_CurvilinearParameter*)nativeHandle)->IsDone());
}

 System::Boolean OCApprox_CurvilinearParameter::HasResult()
{
  return OCConverter::StandardBooleanToBoolean(((Approx_CurvilinearParameter*)nativeHandle)->HasResult());
}

OCGeom_BSplineCurve^ OCApprox_CurvilinearParameter::Curve3d()
{
  Handle(Geom_BSplineCurve) tmp = ((Approx_CurvilinearParameter*)nativeHandle)->Curve3d();
  return gcnew OCGeom_BSplineCurve(&tmp);
}

 Standard_Real OCApprox_CurvilinearParameter::MaxError3d()
{
  return ((Approx_CurvilinearParameter*)nativeHandle)->MaxError3d();
}

OCGeom2d_BSplineCurve^ OCApprox_CurvilinearParameter::Curve2d1()
{
  Handle(Geom2d_BSplineCurve) tmp = ((Approx_CurvilinearParameter*)nativeHandle)->Curve2d1();
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}

 Standard_Real OCApprox_CurvilinearParameter::MaxError2d1()
{
  return ((Approx_CurvilinearParameter*)nativeHandle)->MaxError2d1();
}

OCGeom2d_BSplineCurve^ OCApprox_CurvilinearParameter::Curve2d2()
{
  Handle(Geom2d_BSplineCurve) tmp = ((Approx_CurvilinearParameter*)nativeHandle)->Curve2d2();
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}

 Standard_Real OCApprox_CurvilinearParameter::MaxError2d2()
{
  return ((Approx_CurvilinearParameter*)nativeHandle)->MaxError2d2();
}

 void OCApprox_CurvilinearParameter::Dump(Standard_OStream& o)
{
  ((Approx_CurvilinearParameter*)nativeHandle)->Dump(o);
}


