// File generated by CPPExt (MPV)
//
#ifndef _BRep_Builder_OCWrappers_HeaderFile
#define _BRep_Builder_OCWrappers_HeaderFile

// include native header
#include <BRep_Builder.hxx>
#include "../Converter.h"

#include "../TopoDS/TopoDS_Builder.h"

#include "../TopoDS/TopoDS_Builder.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Face;
ref class OCGeom_Surface;
ref class OCTopLoc_Location;
ref class OCPoly_Triangulation;
ref class OCTopoDS_Edge;
ref class OCGeom_Curve;
ref class OCPoly_Polygon3D;
ref class OCPoly_PolygonOnTriangulation;
ref class OCGeom2d_Curve;
ref class OCgp_Pnt2d;
ref class OCPoly_Polygon2D;
ref class OCTopoDS_Vertex;
ref class OCgp_Pnt;


//! A framework providing advanced tolerance control. <br>
//! If tolerance control is required, you are advised to: <br>
//! 1. build a default precision for topology, using the <br>
//! classes provided in the BRepAPI package <br>
//! 2. update the tolerance of the resulting shape. <br>
//! Note that only vertices, edges and faces have <br>
//! meaningful tolerance control. The tolerance value <br>
//! must always comply with the condition that face <br>
//! tolerances are more restrictive than edge tolerances <br>
//! which are more restrictive than vertex tolerances. In <br>
//! other words: Tol(Vertex) >= Tol(Edge) >= Tol(Face). <br>
//! Other rules in setting tolerance include: <br>
//! - you can open up tolerance but should never restrict it <br>
//! - an edge cannot be included within the fusion of the <br>
//!   tolerance spheres of two vertices <br>
public ref class OCBRep_Builder  : public OCTopoDS_Builder {

protected:
  // dummy constructor;
  OCBRep_Builder(OCDummy^) : OCTopoDS_Builder((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRep_Builder(BRep_Builder* nativeHandle);

// Methods PUBLIC

//! Makes an undefined Face. <br>
 /*instead*/  void MakeFace(OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Makes a Face with a surface. <br>
 /*instead*/  void MakeFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCGeom_Surface^ S, Standard_Real Tol) ;

//! Makes a Face with a surface and a location. <br>
 /*instead*/  void MakeFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol) ;

//! Makes a Face with a triangulation. The triangulation <br>
//!          is in the same reference system than the TFace. <br>
//! <br>
 /*instead*/  void MakeFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCPoly_Triangulation^ T) ;

//! Updates the face F using the tolerance value Tol, <br>
//! surface S and location Location. <br>
 /*instead*/  void UpdateFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol) ;

//! Changes a  face triangulation. <br>
//! <br>
//!          A null Triangulation removes the triangulation. <br>
//! <br>
 /*instead*/  void UpdateFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCPoly_Triangulation^ T) ;

//! Updates the face Tolerance. <br>
 /*instead*/  void UpdateFace(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real Tol) ;

//! Sets the  NaturalRestriction flag of  the face. <br>
 /*instead*/  void NaturalRestriction(OCNaroWrappers::OCTopoDS_Face^ F, System::Boolean N) ;

//! Makes an undefined Edge (no geometry). <br>
 /*instead*/  void MakeEdge(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Makes an Edge with a curve. <br>
 /*instead*/  void MakeEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom_Curve^ C, Standard_Real Tol) ;

//! Makes an Edge with a curve and a location. <br>
 /*instead*/  void MakeEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom_Curve^ C, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol) ;

//! Makes an Edge with a polygon 3d. <br>
 /*instead*/  void MakeEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_Polygon3D^ P) ;

//! makes an Edge polygon on Triangulation. <br>
 /*instead*/  void MakeEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_PolygonOnTriangulation^ N, OCNaroWrappers::OCPoly_Triangulation^ T) ;

//! makes an Edge polygon on Triangulation. <br>
 /*instead*/  void MakeEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_PolygonOnTriangulation^ N, OCNaroWrappers::OCPoly_Triangulation^ T, OCNaroWrappers::OCTopLoc_Location^ L) ;

//! Sets a 3D curve for the edge. <br>
//!          If <C> is a null handle, remove any existing 3d curve. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom_Curve^ C, Standard_Real Tol) ;

//! Sets a 3D curve for the edge. <br>
//!          If <C> is a null handle, remove any existing 3d curve. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom_Curve^ C, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol) ;

//! Sets a pcurve for the edge on the face. <br>
//!          If <C> is a null handle, remove any existing pcurve. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom2d_Curve^ C, OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real Tol) ;

//! Sets pcurves for the edge on the  closed face.  If <br>
//!          <C1> or <C2> is a null handle, remove any existing <br>
//!          pcurve. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom2d_Curve^ C1, OCNaroWrappers::OCGeom2d_Curve^ C2, OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real Tol) ;

//! Sets a pcurve for the edge on the face. <br>
//!          If <C> is a null handle, remove any existing pcurve. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom2d_Curve^ C, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol) ;

//! Sets a pcurve for the edge on the face. <br>
//!          If <C> is a null handle, remove any existing pcurve. <br>
//!          Sets UV bounds for curve repsentation <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom2d_Curve^ C, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol, OCNaroWrappers::OCgp_Pnt2d^ Pf, OCNaroWrappers::OCgp_Pnt2d^ Pl) ;

//! Sets pcurves for the edge on the closed surface. <br>
//!          <C1> or <C2> is a null handle, remove any existing <br>
//!          pcurve. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom2d_Curve^ C1, OCNaroWrappers::OCGeom2d_Curve^ C2, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol) ;

//! Sets pcurves for the edge on the closed surface. <br>
//!          <C1> or <C2> is a null handle, remove any existing <br>
//!          pcurve. <br>
//!          Sets UV bounds for curve repsentation <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom2d_Curve^ C1, OCNaroWrappers::OCGeom2d_Curve^ C2, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol, OCNaroWrappers::OCgp_Pnt2d^ Pf, OCNaroWrappers::OCgp_Pnt2d^ Pl) ;

//! Changes an Edge 3D polygon. <br>
//!          A null Polygon removes the 3d Polygon. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_Polygon3D^ P) ;

//! Changes an Edge 3D polygon. <br>
//!          A null Polygon removes the 3d Polygon. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_Polygon3D^ P, OCNaroWrappers::OCTopLoc_Location^ L) ;

//! Changes an Edge polygon on Triangulation. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_PolygonOnTriangulation^ N, OCNaroWrappers::OCPoly_Triangulation^ T) ;

//! Changes an Edge polygon on Triangulation. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_PolygonOnTriangulation^ N, OCNaroWrappers::OCPoly_Triangulation^ T, OCNaroWrappers::OCTopLoc_Location^ L) ;

//! Changes an Edge polygon on Triangulation. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_PolygonOnTriangulation^ N1, OCNaroWrappers::OCPoly_PolygonOnTriangulation^ N2, OCNaroWrappers::OCPoly_Triangulation^ T) ;

//! Changes an Edge polygon on Triangulation. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_PolygonOnTriangulation^ N1, OCNaroWrappers::OCPoly_PolygonOnTriangulation^ N2, OCNaroWrappers::OCPoly_Triangulation^ T, OCNaroWrappers::OCTopLoc_Location^ L) ;

//! Changes Edge polygon on a face. <br>
//! <br>
//! <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_Polygon2D^ P, OCNaroWrappers::OCTopoDS_Face^ S) ;

//! Changes Edge polygon on a face. <br>
//! <br>
//! <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_Polygon2D^ P, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ T) ;

//! Changes Edge polygons on a face. <br>
//! <br>
//!          A null Polygon removes the 2d Polygon. <br>
//! <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_Polygon2D^ P1, OCNaroWrappers::OCPoly_Polygon2D^ P2, OCNaroWrappers::OCTopoDS_Face^ S) ;

//! Changes Edge polygons on a face. <br>
//! <br>
//!          A null Polygon removes the 2d Polygon. <br>
//! <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCPoly_Polygon2D^ P1, OCNaroWrappers::OCPoly_Polygon2D^ P2, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L) ;

//! Updates the edge tolerance. <br>
 /*instead*/  void UpdateEdge(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real Tol) ;

//! Sets the geometric continuity on the edge. <br>
 /*instead*/  void Continuity(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCGeomAbs_Shape C) ;

//! Sets the geometric continuity on the edge. <br>
 /*instead*/  void Continuity(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom_Surface^ S1, OCNaroWrappers::OCGeom_Surface^ S2, OCNaroWrappers::OCTopLoc_Location^ L1, OCNaroWrappers::OCTopLoc_Location^ L2, OCGeomAbs_Shape C) ;

//! Sets the same parameter flag for the edge <E>. <br>
 /*instead*/  void SameParameter(OCNaroWrappers::OCTopoDS_Edge^ E, System::Boolean S) ;

//! Sets the same range flag for the edge <E>. <br>
 /*instead*/  void SameRange(OCNaroWrappers::OCTopoDS_Edge^ E, System::Boolean S) ;

//! Sets the degenerated flag for the edge <E>. <br>
 /*instead*/  void Degenerated(OCNaroWrappers::OCTopoDS_Edge^ E, System::Boolean D) ;

//! Sets the range of the 3d curve if Only3d=TRUE, <br>
//!          otherwise sets the range to all the representations <br>
 /*instead*/  void Range(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real First, Standard_Real Last, System::Boolean Only3d) ;

//! Sets the range  of the edge  on the pcurve on  the <br>
//!          surface. <br>
 /*instead*/  void Range(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real First, Standard_Real Last) ;

//! Sets the range of the edge on the pcurve on the face. <br>
 /*instead*/  void Range(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real First, Standard_Real Last) ;

//! Add  to <Eout>  the  geometric representations  of <br>
//!          <Ein>. <br>
 /*instead*/  void Transfert(OCNaroWrappers::OCTopoDS_Edge^ Ein, OCNaroWrappers::OCTopoDS_Edge^ Eout) ;

//! Makes an udefined vertex without geometry. <br>
 /*instead*/  void MakeVertex(OCNaroWrappers::OCTopoDS_Vertex^ V) ;

//! Makes a vertex from a 3D point. <br>
 /*instead*/  void MakeVertex(OCNaroWrappers::OCTopoDS_Vertex^ V, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Tol) ;

//! Sets a 3D point on the vertex. <br>
 /*instead*/  void UpdateVertex(OCNaroWrappers::OCTopoDS_Vertex^ V, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Tol) ;

//! Sets  the parameter  for the   vertex on the  edge <br>
//!          curves. <br>
 /*instead*/  void UpdateVertex(OCNaroWrappers::OCTopoDS_Vertex^ V, Standard_Real P, OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real Tol) ;

//! Sets  the parameter  for the  vertex  on the  edge <br>
//!          pcurve  on the face. <br>
 /*instead*/  void UpdateVertex(OCNaroWrappers::OCTopoDS_Vertex^ V, Standard_Real P, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real Tol) ;

//! Sets  the parameter  for the  vertex  on the  edge <br>
//!          pcurve  on the surface. <br>
 /*instead*/  void UpdateVertex(OCNaroWrappers::OCTopoDS_Vertex^ V, Standard_Real P, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real Tol) ;

//! Sets the parameters for the vertex on the face. <br>
 /*instead*/  void UpdateVertex(OCNaroWrappers::OCTopoDS_Vertex^ Ve, Standard_Real U, Standard_Real V, OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real Tol) ;

//! Updates the vertex tolerance. <br>
 /*instead*/  void UpdateVertex(OCNaroWrappers::OCTopoDS_Vertex^ V, Standard_Real Tol) ;

//! Transfert the parameters  of   Vin on  Ein as  the <br>
//!          parameter of Vout on Eout. <br>
 /*instead*/  void Transfert(OCNaroWrappers::OCTopoDS_Edge^ Ein, OCNaroWrappers::OCTopoDS_Edge^ Eout, OCNaroWrappers::OCTopoDS_Vertex^ Vin, OCNaroWrappers::OCTopoDS_Vertex^ Vout) ;

~OCBRep_Builder()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
