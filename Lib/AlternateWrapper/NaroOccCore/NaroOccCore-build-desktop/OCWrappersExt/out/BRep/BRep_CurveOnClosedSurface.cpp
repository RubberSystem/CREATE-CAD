// File generated by CPPExt (CPP file)
//

#include "BRep_CurveOnClosedSurface.h"
#include "../Converter.h"
#include "../Geom2d/Geom2d_Curve.h"
#include "../Geom/Geom_Surface.h"
#include "../TopLoc/TopLoc_Location.h"
#include "../gp/gp_Pnt2d.h"
#include "BRep_CurveRepresentation.h"


using namespace OCNaroWrappers;

OCBRep_CurveOnClosedSurface::OCBRep_CurveOnClosedSurface(Handle(BRep_CurveOnClosedSurface)* nativeHandle) : OCBRep_CurveOnSurface((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_BRep_CurveOnClosedSurface(*nativeHandle);
}

OCBRep_CurveOnClosedSurface::OCBRep_CurveOnClosedSurface(OCNaroWrappers::OCGeom2d_Curve^ PC1, OCNaroWrappers::OCGeom2d_Curve^ PC2, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, OCGeomAbs_Shape C) : OCBRep_CurveOnSurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_BRep_CurveOnClosedSurface(new BRep_CurveOnClosedSurface(*((Handle_Geom2d_Curve*)PC1->Handle), *((Handle_Geom2d_Curve*)PC2->Handle), *((Handle_Geom_Surface*)S->Handle), *((TopLoc_Location*)L->Handle), (GeomAbs_Shape)C));
}

 void OCBRep_CurveOnClosedSurface::SetUVPoints2(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->SetUVPoints2(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

 void OCBRep_CurveOnClosedSurface::UVPoints2(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->UVPoints2(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

 System::Boolean OCBRep_CurveOnClosedSurface::IsCurveOnClosedSurface()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->IsCurveOnClosedSurface());
}

 System::Boolean OCBRep_CurveOnClosedSurface::IsRegularity()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->IsRegularity());
}

 System::Boolean OCBRep_CurveOnClosedSurface::IsRegularity(OCNaroWrappers::OCGeom_Surface^ S1, OCNaroWrappers::OCGeom_Surface^ S2, OCNaroWrappers::OCTopLoc_Location^ L1, OCNaroWrappers::OCTopLoc_Location^ L2)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->IsRegularity(*((Handle_Geom_Surface*)S1->Handle), *((Handle_Geom_Surface*)S2->Handle), *((TopLoc_Location*)L1->Handle), *((TopLoc_Location*)L2->Handle)));
}

OCGeom2d_Curve^ OCBRep_CurveOnClosedSurface::PCurve2()
{
  Handle(Geom2d_Curve) tmp = (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->PCurve2();
  return gcnew OCGeom2d_Curve(&tmp);
}

OCGeom_Surface^ OCBRep_CurveOnClosedSurface::Surface2()
{
  Handle(Geom_Surface) tmp = (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->Surface2();
  return gcnew OCGeom_Surface(&tmp);
}

OCTopLoc_Location^ OCBRep_CurveOnClosedSurface::Location2()
{
  TopLoc_Location* tmp = new TopLoc_Location();
  *tmp = (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->Location2();
  return gcnew OCTopLoc_Location(tmp);
}

 OCGeomAbs_Shape OCBRep_CurveOnClosedSurface::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->Continuity());
}

 void OCBRep_CurveOnClosedSurface::Continuity(OCGeomAbs_Shape C)
{
  (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->Continuity((GeomAbs_Shape)C);
}

 void OCBRep_CurveOnClosedSurface::PCurve2(OCNaroWrappers::OCGeom2d_Curve^ C)
{
  (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->PCurve2(*((Handle_Geom2d_Curve*)C->Handle));
}

OCBRep_CurveRepresentation^ OCBRep_CurveOnClosedSurface::Copy()
{
  Handle(BRep_CurveRepresentation) tmp = (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->Copy();
  return gcnew OCBRep_CurveRepresentation(&tmp);
}

 void OCBRep_CurveOnClosedSurface::Update()
{
  (*((Handle_BRep_CurveOnClosedSurface*)nativeHandle))->Update();
}


