// File generated by CPPExt (Transient)
//
#ifndef _AIS2D_InteractiveContext_OCWrappers_HeaderFile
#define _AIS2D_InteractiveContext_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS2D_InteractiveContext.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "AIS2D_DataMapOfIOStatus.h"
#include "AIS2D_TypeOfDetection.h"
#include "../Graphic2d/Graphic2d_PickMode.h"
#include "../Quantity/Quantity_NameOfColor.h"
#include "AIS2D_DataMapOfLC.h"
#include "AIS2D_StatusOfDetection.h"
#include "AIS2D_StatusOfPick.h"
#include "AIS2D_DisplayStatus.h"
#include "../Aspect/Aspect_TypeOfLine.h"
#include "../Aspect/Aspect_WidthOfLine.h"
#include "../Aspect/Aspect_TypeOfMarker.h"


namespace OCNaroWrappers
{

ref class OCV2d_Viewer;
ref class OCAIS2D_InteractiveObject;
ref class OCAIS2D_HSequenceOfIO;
ref class OCV2d_View;
ref class OCAspect_GenericColorMap;
ref class OCAspect_TypeMap;
ref class OCAspect_WidthMap;
ref class OCAspect_MarkMap;
ref class OCAspect_FontMap;
ref class OCAIS2D_LocalContext;
ref class OCGraphic2d_DisplayList;
ref class OCMMgt_TShared;
ref class OCTCollection_ExtendedString;
ref class OCAIS2D_ListOfIO;
ref class OCQuantity_Color;
ref class OCAspect_FontStyle;
ref class OCGraphic2d_TransientManager;
ref class OCGraphic2d_Primitive;


//! The InteractiveContext class allows you to manage <br>
//!          graphic behavior and selection of Interactive Objects <br>
//!          in one or more viewers. <br>
public ref class OCAIS2D_InteractiveContext : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCAIS2D_InteractiveContext(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS2D_InteractiveContext(Handle(AIS2D_InteractiveContext)* nativeHandle);

// Methods PUBLIC

//! Initiates <MainViewer> <br>
OCAIS2D_InteractiveContext(OCNaroWrappers::OCV2d_Viewer^ MainViewer);

//! Initiates the principal viewer and Collector(trash) viewer together <br>
OCAIS2D_InteractiveContext(OCNaroWrappers::OCV2d_Viewer^ MainViewer, OCNaroWrappers::OCV2d_Viewer^ aCollector);

//! Display when no local context is opened. <br>
//!          if <anIObj> has no proper display mode, the defaut <br>
//!          display mode of the session is used <br>
//!          Same for the selection Mode (by default =0) <br>
 /*instead*/  void Display(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean UpdateVwr) ;

//! Use only if a local context is opened. Displays the <br>
//!          <aDispMode> the presentation of interactive object, <br>
//!          activates the selection mode <aSelectMode> if <br>
//!          <UpdateVwr> =  Standard_False,  the  object is <br>
//!          displayed but no viewer will be updated; CONVENTION : <br>
//!          <aSelectMode> = -1 means no activation for <anIObj> <br>
//!          : it will be displayed but not  selectable.  (Option <br>
//!          only available for local context...) <br>
//!          <AllowDecomp>  = true  means  that <anIObj>  is <br>
//!          able to have subshapes detected by selection mechanisms. <br>
//!          2 conditions: <anIObj> must be able to give a shape <br>
//!          selection modes fit the AIS2D_Shape <br>
//!          selection modes ( 1->vertex, 2->edges, 3->wires...) <br>
 /*instead*/  void Display(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, Standard_Integer aDispMode, Standard_Integer aSelectMode, System::Boolean UpdateVwr, System::Boolean AllowDecomp) ;

//! Available when opened local contexts only; <br>
//!          option to load in the selector objects which will <br>
//!          be selectable but not displayed. Nevertheless, they <br>
//!          will be hilighted when detected by the selector. <br>
//!          ex : be able to select center of a line without <br>
//!               displaying all centers before selection process <br>
 /*instead*/  void Load(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, Standard_Integer SelMode, System::Boolean AllowDecomp) ;

//! Erases presentations in current local context, <br>
//!          or failing that, in other local contexts which allow erasing. <br>
//!          If <PutInCollector> is false, the object is erased but <br>
//!          not put in the Collector. <br>
 /*instead*/  void Erase(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean UpdateVwr, System::Boolean PutInCollector) ;

//! Every erased object goes into the Collector viewer <br>
 /*instead*/  void EraseAll(System::Boolean PutInCollector, System::Boolean updateVwr) ;

//! Displays all erased objects, in other words, <br>
//!          all objects in the Collector viewer. <br>
 /*instead*/  void DisplayAll(System::Boolean OnlyFromCollector, System::Boolean updateVwr) ;

//! Erases selected objects if a local context is open. <br>
//!          Erases current objects if there is no active local context. <br>
//!          If a local context is open and if <updateVwr> equals <br>
//!          Standard_False, the presentation of the Interactive Object <br>
//!          activates the selection mode; the object is displayed but <br>
//!          no viewer will be updated. <br>
 /*instead*/  void EraseSelected(System::Boolean PutInCollector, System::Boolean updateVwr) ;

//! Displays or erases selected objects if a local <br>
//!  context is open. If no active local context is found, <br>
//!  only current objects can be displayed or erased. <br>
 /*instead*/  void DisplaySelected(System::Boolean updateVwr) ;

//! Changes the status of a temporary object it will be -- <br>
//!          kept at the  neutral point, i.e.   put in the list  of <br>
//!           displayed  objects,  with  its  temporary  attributes <br>
//!          (displaymode,selection  mode) returns true  if done -- <br>
//!          inWhichLocal means that gives   the local context   in <br>
//!          which <anIObj> is displayed.  By default, -1 means the <br>
//!          last opened one <br>
 /*instead*/  System::Boolean KeepTemporary(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, Standard_Integer InWhichLocal) ;

//! Forces Recompute of the seen presentations of the object; <br>
//!          if <allModes>= True -> recomputes all the <br>
//!          presentations . <br>
 /*instead*/  void Redisplay(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean updateVwr, System::Boolean allModes) ;

//! Finds the current selected entity <anIObj> in Neutral Point. <br>
 /*instead*/  System::Boolean IsCurrent(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj) ;

//! Confirms selection. Returns true if <anIObj> is selected in the interactive context <br>
 /*instead*/  System::Boolean IsSelected(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj) ;

//! Updates the display in the viewer to take dynamic detection <br>
//!          into account. <br>
//!          If a local context is open and if <updateVwr> equals Standard_False, <br>
//!          the presentation of the Interactive Object activates the selection <br>
//!          mode; the object is displayed but no viewer will be updated. <br>
 /*instead*/  void Highlight(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean updateVwr) ;

//! Changes the color of the object in view <anIObj>. <br>
//!          It paints this object the color passed as the argument <aCol> <br>
//!          If a local context is open and if <updateVwr> equals Standard_False, <br>
//!          the presentation of the Interactive Object activates the selection <br>
//!          mode; the object is displayed but no viewer will be updated. <br>
 /*instead*/  void HighlightWithColor(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, OCQuantity_NameOfColor aCol, System::Boolean updateVwr) ;

//! Removes hilighting from the entity <anIObj>. Updates the viewer. <br>
//!          If a local context is open and if <updateVwr> equals Standard_False, <br>
//!          the presentation of the Interactive Object activates the selection <br>
//!          mode; the object is displayed but no viewer will be updated. <br>
 /*instead*/  void Unhighlight(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean updateVwr) ;

//! Sets the precision of detection <br>
 /*instead*/  void SetPrecision(Standard_Integer aPrec) ;

//! Returns the precision of detection <br>
 /*instead*/  Standard_Integer DetectPrecision() ;

//! Places object <anIO> to the pixel position (XPix, YPix) <br>
//!          in the view <aView> is using TransientManager. <br>
//!          It's possible to use without preliminary application of  Display method. <br>
 /*instead*/  void Place(Standard_Integer XPix, Standard_Integer YPix, OCNaroWrappers::OCV2d_View^ aView, OCNaroWrappers::OCAIS2D_InteractiveObject^ anIO, System::Boolean isTemporary) ;

//! Places selected objects  to the pixel position (XPix, YPix) <br>
//!          in the view <aView>. If <isTemporary> is True,  is used TransientManager. <br>
 /*instead*/  void Drag(Standard_Integer XPix, Standard_Integer YPix, OCNaroWrappers::OCV2d_View^ aView, System::Boolean isTemporary) ;

//! Relays mouse position in pixels XPix and YPix to the <br>
//!          interactive context selectors. This is done by the view <aView> <br>
//!          passing this position to the main viewer and updating it. <br>
//!          Functions in both Neutral Point and local contexts. <br>
 /*instead*/  OCAIS2D_StatusOfDetection MoveTo(Standard_Integer XPix, Standard_Integer YPix, OCNaroWrappers::OCV2d_View^ aView) ;

//! Relays mouse position in circle <XPix, YPix> and <Radius> to the <br>
//!          interactive context selectors. This is done by the view <aView> <br>
//!          passing this position to the main viewer and updating it. <br>
//!          Functions in both Neutral Point and local contexts. <br>
 /*instead*/  OCAIS2D_StatusOfDetection MoveCircleTo(Standard_Integer XPix, Standard_Integer YPix, Standard_Integer Radius, OCNaroWrappers::OCV2d_View^ aView) ;

//! Relays mouse position in rectangle Xmin, Ymin, Xmax, Ymax to the <br>
//!          interactive context selectors. This is done by the view <aView> <br>
//!          passing this position to the main viewer and updating it. <br>
//!          Functions in both Neutral Point and local contexts. <br>
 /*instead*/  OCAIS2D_StatusOfDetection MoveTo(Standard_Integer Xmin, Standard_Integer Ymin, Standard_Integer Xmax, Standard_Integer Ymax, OCNaroWrappers::OCV2d_View^ aView) ;

//! Stores  and hilights the previous detected; Unhilights <br>
//!          the previous picked. <br>
 /*instead*/  OCAIS2D_StatusOfPick Select(System::Boolean UpdateVwr) ;

//! adds the last detected to the list of previous picked. <br>
//!          if the last detected was already declared as picked, <br>
//!          removes it from the Picked List. <br>
 /*instead*/  OCAIS2D_StatusOfPick ShiftSelect(System::Boolean UpdateVwr) ;

//! rectangle  of selection  ; adds new detected entities into the <br>
//!          picked list, removes the detected entities that were already stored... <br>
 /*instead*/  OCAIS2D_StatusOfPick ShiftSelect(Standard_Integer XPMin, Standard_Integer YPMin, Standard_Integer XPMax, Standard_Integer YPMax, OCNaroWrappers::OCV2d_View^ aView, System::Boolean UpdateVwr) ;

//! Allows to set the color used to show highlighted entities, <br>
//!          that is, entities picked out by the mouse. <br>
 /*instead*/  void SetHighlightColor(OCQuantity_NameOfColor aCol) ;

//! Sets the color used to show selected entities <br>
 /*instead*/  void SetSelectionColor(OCQuantity_NameOfColor aCol) ;

//! Allows you to set the color used to show that an object <br>
//!          is not currently selected <br>
 /*instead*/  void SetSubIntensityColor(OCQuantity_NameOfColor aCol) ;

//! Returns the display mode setting <br>
 /*instead*/  Standard_Integer DisplayMode() ;

//! Returns the name of the color used to show highlighted entities, <br>
//!          that is, entities picked out by the mouse <br>
 /*instead*/  OCQuantity_NameOfColor HighlightColor() ;

//! Returns the name of the color used to show selected entities. <br>
 /*instead*/  OCQuantity_NameOfColor SelectionColor() ;

//! Returns the name of the color used to show <br>
//!          that an object is not currently selected. <br>
 /*instead*/  OCQuantity_NameOfColor SubIntensityColor() ;

//! Highlights, and removes highlights from, the displayed object <br>
//!          <anIObj> which is displayed at Neutral Point with subintensity <br>
//!          color; available only for active local context. <br>
//!          There is no effect if there is no local context. <br>
 /*instead*/  void SubIntensityOn(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean UpdateVwr) ;

//! Removes the subintensity option for the entity <anIObj>. <br>
 /*instead*/  void SubIntensityOff(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean UpdateVwr) ;


 /*instead*/  System::Boolean IsCollectorClosed() ;

//! Allows to close Collector <br>
 /*instead*/  void CloseCollector() ;

//! Allows to open Collector <br>
 /*instead*/  void OpenCollector() ;

//! Opens a local context of display and selection <br>
//!          returns the index of new opened local context. <br>
//!          Must be stored and used to close the local context. <br>
 /*instead*/  Standard_Integer OpenLocalContext(System::Boolean UseDispObj, System::Boolean AllowDecomposit, System::Boolean AcceptEraseOfObj) ;

//! close the current opened local context. <br>
//!          Use <ind> to be sure to close the local context you Opened ! <br>
//!          if <ind> == -1 the current local context is closed <br>
//!          WITHOUT VERIFICATION. <br>
//!          if <ind> is greater than the current opened local context, <br>
//!          nothing is done. <br>
 /*instead*/  void CloseLocalContext(Standard_Integer ind, System::Boolean updateVwr) ;

//! returns -1 if no opened local context. <br>
 /*instead*/  Standard_Integer IndexOfCurrentLocal() ;

//! Allows to close all local contexts at one go and return to <br>
//!          Neutral Point. <br>
 /*instead*/  void CloseAllContext(System::Boolean updateVwr) ;

//! Updates the view of the current object in open context. <br>
//!          Objects selected when there is no open local context <br>
//!          are called current objects; those selected in open local context, <br>
//!          selected objects. <br>
 /*instead*/  void SetCurrentObject(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean UpdateVwr) ;

//! Allows to add a current object to the list of current objects <br>
//!          or remove it from that list. <br>
//!          Objects selected when there is no open local context are called <br>
//!          current objects; those selected in open local context, <br>
//!          selected objects. <br>
 /*instead*/  void AddOrRemoveCurObject(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean UpdateVwr) ;

//! updates the list of current objects <br>
//!          i.e. hilights new current objects, <br>
//!          unhighlights old current objects <br>
//! <br>
 /*instead*/  void UpdateCurrent() ;

//! Returns the first current object in the list of current objects. <br>
 /*instead*/  void SetOkCurrent() ;

//! Highlights current objects. <br>
 /*instead*/  void HighlightCurrent(System::Boolean UpdateVwr) ;

//! Unhighlights current objects. <br>
 /*instead*/  void UnhighlightCurrent(System::Boolean UpdateVwr) ;

//! Empties previous current objects in order to get the current <br>
//!          objects detected by the selector using UpdateCurrent. <br>
 /*instead*/  void ClearCurrent(System::Boolean UpdateVwr) ;

//! Puts the selected <anIObj> in the current objects list. <br>
 /*instead*/  void SetSelected(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean UpdateVwr) ;

//! Puts the selected list in the current objects list. <br>
 /*instead*/  void SetSelectedCurrent() ;

//! Updates the list of selected objects, i.e. hilights <br>
//!          new selected objects, removes hilighting from former <br>
//!          selected objects. <br>
 /*instead*/  void UpdateSelected(System::Boolean UpdateVwr) ;

//! Allows you to add a selected object <anIObj> to the list of selected <br>
//!          objects or remove it from that list. <br>
 /*instead*/  void AddOrRemoveSelected(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean UpdateVwr) ;

//! Highlights selected objects. <br>
 /*instead*/  void HighlightSelected(System::Boolean UpdateVwr) ;

//! UnHighlights selected objects. <br>
 /*instead*/  void UnhighlightSelected(System::Boolean UpdateVwr) ;

//! Empties previous selected objects in order to get <br>
//!          the selected objects detected by the selector using UpdateSelected. <br>
 /*instead*/  void ClearSelected(System::Boolean UpdateVwr) ;

//!  Returns  number of objects selected  in <br>
//!          local context ( if opened ) or in neutral context <br>
 /*instead*/  Standard_Integer NbSelected() ;

//!  Iteration <br>
 /*instead*/  void InitSelected() ;

//!  Iteration <br>
 /*instead*/  System::Boolean MoreSelected() ;

//!  Iteration <br>
 /*instead*/  void NextSelected() ;

//!  Returns  current  selected  object  (  see  InitSelected()  ..  ) <br>
//!           The  object type depends  on  highlight  mode <br>
//!           (  OBJECT,  PRIMITIVE  etc  ) <br>
 /*instead*/  OCMMgt_TShared^ SelectedObject() ;

//! Returns the display status of the entity <anIObj>. <br>
 /*instead*/  OCAIS2D_DisplayStatus DisplayStatus(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj) ;

//! Returns the list of active display modes for the entity <anIObj> <br>
 /*instead*/  AIS2D_PToListOfInt DisplayedModes(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj) ;

//! Returns true if <anIObj> is displayed in the interactive context <br>
 /*instead*/  System::Boolean IsDisplayed(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj) ;

//! Returns true if <anIObj> is displayed in the interactive context with <aMode> display mode <br>
 /*instead*/  System::Boolean IsDisplayed(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, Standard_Integer aMode) ;

//! Returns true if the Interactive Object <anIObj> <br>
//!          is highlighted in the interactive context. <br>
 /*instead*/  System::Boolean IsHighlighted(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj) ;

//! if <anIObj> is highlighted with a specific color <br>
//!          <WithColor> will be returned TRUE <br>
//!          <theHiCol> gives the name of the hilightcolor <br>
 /*instead*/  System::Boolean IsHighlighted(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, System::Boolean& WithColor, OCQuantity_NameOfColor& theHiCol) ;

//! Returns true if the entity <anIObj> is in the Collector viewer. <br>
 /*instead*/  System::Boolean IsInCollector(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj) ;

//! Modified the status of the entity <anIObj> <br>
 /*instead*/  void Status(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, OCNaroWrappers::OCTCollection_ExtendedString^ aStatus) ;

//! Updates the current viewer, the viewer in Neutral Point. <br>
 /*instead*/  void UpdateCurrentViewer() ;

//! Updates the Collector viewer <br>
 /*instead*/  void UpdateCollector() ;

//! Returns the current viewer. <br>
 /*instead*/  OCV2d_Viewer^ CurrentViewer() ;

//! Returns true if there is an open context. <br>
 /*instead*/  System::Boolean HasOpenedContext() ;

//! gives the list of displayed objects in the main viewer. <br>
 /*instead*/  void DisplayedObjects(OCNaroWrappers::OCAIS2D_ListOfIO^ aListOfIO, System::Boolean OnlyFromNeutral) ;

//! Allows to provide settings for pick mode. <br>
 /*instead*/  void SetPickMode(OCGraphic2d_PickMode aMode) ;

//! Returns the pick mode <br>
 /*instead*/  OCGraphic2d_PickMode GetPickMode() ;


 /*instead*/  Standard_Integer HighestIndex() ;

//! Initialize <aColor> in the color map <br>
 /*instead*/  Standard_Integer InitializeColor(OCNaroWrappers::OCQuantity_Color^ aColor) ;

//! Initialize <aType> in the type map <br>
 /*instead*/  Standard_Integer InitializeStyle(OCAspect_TypeOfLine aType) ;

//! Initialize <aWidth> in the width map <br>
 /*instead*/  Standard_Integer InitializeWidth(OCAspect_WidthOfLine aWidth) ;

//! Initialize <aMark> in the mark map <br>
 /*instead*/  Standard_Integer InitializeMarker(OCAspect_TypeOfMarker aMark) ;

//! Initialize <aFont> in the font map <br>
 /*instead*/  Standard_Integer InitializeFont(OCNaroWrappers::OCAspect_FontStyle^ aFont) ;

//! to be used only with no  opened <br>
//!        local context..  displays and activates objects in their <br>
//!        original state before local contexts were opened... <br>
 /*instead*/  void ResetOriginalState(System::Boolean updateVwr) ;

//!  switches on immediate mode <br>
 /*instead*/  void BeginImmediateDraw(OCNaroWrappers::OCV2d_View^ aView) ;

//! draws object <anIObj> into immediate mode <br>
 /*instead*/  void ImmediateDraw(OCNaroWrappers::OCAIS2D_InteractiveObject^ anIObj, OCNaroWrappers::OCV2d_View^ aView) ;

//! switches of immediate mode <br>
 /*instead*/  void EndImmediateDraw(OCNaroWrappers::OCV2d_View^ aView) ;

//! returns true if immediate mode is on <br>
 /*instead*/  System::Boolean IsImmediateModeOn(OCNaroWrappers::OCV2d_View^ aView) ;


 /*instead*/  void SetDetectionMode(OCAIS2D_TypeOfDetection mode) ;

~OCAIS2D_InteractiveContext()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
