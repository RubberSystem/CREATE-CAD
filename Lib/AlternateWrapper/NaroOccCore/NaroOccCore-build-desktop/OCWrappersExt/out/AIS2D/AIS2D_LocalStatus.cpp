// File generated by CPPExt (CPP file)
//

#include "AIS2D_LocalStatus.h"
#include "../Converter.h"
#include "../Standard/Standard_Transient.h"


using namespace OCNaroWrappers;

OCAIS2D_LocalStatus::OCAIS2D_LocalStatus(Handle(AIS2D_LocalStatus)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AIS2D_LocalStatus(*nativeHandle);
}

OCAIS2D_LocalStatus::OCAIS2D_LocalStatus(System::Boolean isTemporary, System::Boolean Decompose, Standard_Integer DMode, Standard_Integer SMode, OCAIS2D_TypeOfDetection HMode, System::Boolean SubIntensity, OCQuantity_NameOfColor HighlCol) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS2D_LocalStatus(new AIS2D_LocalStatus(OCConverter::BooleanToStandardBoolean(isTemporary), OCConverter::BooleanToStandardBoolean(Decompose), DMode, SMode, (AIS2D_TypeOfDetection)HMode, OCConverter::BooleanToStandardBoolean(SubIntensity), (Quantity_NameOfColor)HighlCol));
}

 System::Boolean OCAIS2D_LocalStatus::Decomposed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS2D_LocalStatus*)nativeHandle))->Decomposed());
}

 System::Boolean OCAIS2D_LocalStatus::IsTemporary()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS2D_LocalStatus*)nativeHandle))->IsTemporary());
}

 Standard_Integer OCAIS2D_LocalStatus::DisplayMode()
{
  return (*((Handle_AIS2D_LocalStatus*)nativeHandle))->DisplayMode();
}

 AIS2D_PToListOfInt OCAIS2D_LocalStatus::SelectionModes()
{
  return (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SelectionModes();
}

 System::Boolean OCAIS2D_LocalStatus::IsActivated(Standard_Integer aSelMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS2D_LocalStatus*)nativeHandle))->IsActivated(aSelMode));
}

 OCAIS2D_TypeOfDetection OCAIS2D_LocalStatus::HighlightMode()
{
  return (OCAIS2D_TypeOfDetection)((*((Handle_AIS2D_LocalStatus*)nativeHandle))->HighlightMode());
}

 System::Boolean OCAIS2D_LocalStatus::IsSubIntensityOn()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS2D_LocalStatus*)nativeHandle))->IsSubIntensityOn());
}

 OCQuantity_NameOfColor OCAIS2D_LocalStatus::HighlightColor()
{
  return (OCQuantity_NameOfColor)((*((Handle_AIS2D_LocalStatus*)nativeHandle))->HighlightColor());
}

 System::Boolean OCAIS2D_LocalStatus::IsFirstDisplay()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS2D_LocalStatus*)nativeHandle))->IsFirstDisplay());
}

 void OCAIS2D_LocalStatus::SetDecomposition(System::Boolean aStatus)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SetDecomposition(OCConverter::BooleanToStandardBoolean(aStatus));
}

 void OCAIS2D_LocalStatus::SetTemporary(System::Boolean aStatus)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SetTemporary(OCConverter::BooleanToStandardBoolean(aStatus));
}

 void OCAIS2D_LocalStatus::SetDisplayMode(Standard_Integer aMode)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SetDisplayMode(aMode);
}

 void OCAIS2D_LocalStatus::SetFirstDisplay(System::Boolean aStatus)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SetFirstDisplay(OCConverter::BooleanToStandardBoolean(aStatus));
}

 void OCAIS2D_LocalStatus::AddSelectionMode(Standard_Integer aMode)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->AddSelectionMode(aMode);
}

 void OCAIS2D_LocalStatus::RemoveSelectionMode(Standard_Integer aMode)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->RemoveSelectionMode(aMode);
}

 void OCAIS2D_LocalStatus::ClearSelectionModes()
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->ClearSelectionModes();
}

 System::Boolean OCAIS2D_LocalStatus::IsSelModeIn(Standard_Integer aMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS2D_LocalStatus*)nativeHandle))->IsSelModeIn(aMode));
}

 void OCAIS2D_LocalStatus::SetHighlightMode(OCAIS2D_TypeOfDetection aMode)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SetHighlightMode((AIS2D_TypeOfDetection)aMode);
}

 void OCAIS2D_LocalStatus::SetHighlightColor(OCQuantity_NameOfColor aHiCol)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SetHighlightColor((Quantity_NameOfColor)aHiCol);
}

 void OCAIS2D_LocalStatus::SubIntensityOn()
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SubIntensityOn();
}

 void OCAIS2D_LocalStatus::SubIntensityOff()
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SubIntensityOff();
}

 void OCAIS2D_LocalStatus::SetPreviousState(OCNaroWrappers::OCStandard_Transient^ aStatus)
{
  (*((Handle_AIS2D_LocalStatus*)nativeHandle))->SetPreviousState(*((Handle_Standard_Transient*)aStatus->Handle));
}

OCStandard_Transient^ OCAIS2D_LocalStatus::PreviousState()
{
  Handle(Standard_Transient) tmp = (*((Handle_AIS2D_LocalStatus*)nativeHandle))->PreviousState();
  return gcnew OCStandard_Transient(&tmp);
}


