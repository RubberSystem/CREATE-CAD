// File generated by CPPExt (Transient)
//
#ifndef _AlienImage_AidaAlienImage_OCWrappers_HeaderFile
#define _AlienImage_AidaAlienImage_OCWrappers_HeaderFile

// include the wrapped class
#include <AlienImage_AidaAlienImage.hxx>
#include "../Converter.h"

#include "AlienImage_AlienUserImage.h"

#include "../Image/Image_DitheringMethod.h"


namespace OCNaroWrappers
{

ref class OCAlienImage_AidaAlienData;
ref class OCImage_Image;
ref class OCOSD_File;
ref class OCAspect_ColorMap;


//! This class defines an Aida Alien image ( BYTEMAPS ). <br>
public ref class OCAlienImage_AidaAlienImage : OCAlienImage_AlienUserImage {

protected:
  // dummy constructor;
  OCAlienImage_AidaAlienImage(OCDummy^) : OCAlienImage_AlienUserImage((OCDummy^)nullptr) {};

public:

// constructor from native
OCAlienImage_AidaAlienImage(Handle(AlienImage_AidaAlienImage)* nativeHandle);

// Methods PUBLIC


OCAlienImage_AidaAlienImage();

//! Frees memory allocated by AidaAlienImage <br>
 /*instead*/  void Clear() ;

//! convert a AidaAlienImage object to a Image object. <br>
 /*instead*/  OCImage_Image^ ToImage() ;

//! convert a Image object to a AidaAlienImage object. <br>
 /*instead*/  void FromImage(OCNaroWrappers::OCImage_Image^ anImage) ;

//! Read content of a AidaAlienImage object from a file . <br>
//!          Returns True if file is a Aida file . <br>
 /*instead*/  System::Boolean Read(OCNaroWrappers::OCOSD_File^ afile) ;

//! Write content of a  AidaAlienImage object to a file . <br>
 /*instead*/  System::Boolean Write(OCNaroWrappers::OCOSD_File^ afile) ;

//! Set the ImageDitheringMethod and the ColorMap when <br>
//!          FromImage is called with a ColorImage . <br>
//!	      Aida BYTEMAPS file handle only PseudoColorImage . <br>
//!          Default value is DM_NearestColor, <br>
//!		ColorCubeColorMap( 40, 5,1, 8,6, 3,54 ) <br>
 /*instead*/  void SetColorImageDitheringMethod(OCImage_DitheringMethod aMethod, OCNaroWrappers::OCAspect_ColorMap^ aColorMap) ;

~OCAlienImage_AidaAlienImage()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
