// File generated by CPPExt (MPV)
//
#ifndef _MeshShape_Vertex_OCWrappers_HeaderFile
#define _MeshShape_Vertex_OCWrappers_HeaderFile

// include native header
#include <MeshShape_Vertex.hxx>
#include "../Converter.h"


#include "../MeshDS/MeshDS_DegreeOfFreedom.h"


namespace OCNaroWrappers
{

ref class OCgp_XY;



public ref class OCMeshShape_Vertex  {

protected:
  MeshShape_Vertex* nativeHandle;
  OCMeshShape_Vertex(OCDummy^) {};

public:
  property MeshShape_Vertex* Handle
  {
    MeshShape_Vertex* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCMeshShape_Vertex(MeshShape_Vertex* nativeHandle);

// Methods PUBLIC

//! Vertex with only 2d representation. <br>
//!          (Super maille Delaunay) <br>
OCMeshShape_Vertex(OCNaroWrappers::OCgp_XY^ UV, OCMeshDS_DegreeOfFreedom Move);

//! Vertex with 3d representation. <br>
OCMeshShape_Vertex(OCNaroWrappers::OCgp_XY^ UV, Standard_Integer Locat3d, Standard_Integer Domain, OCMeshDS_DegreeOfFreedom Move);


 /*instead*/  OCgp_XY^ Coord() ;


 /*instead*/  Standard_Integer Location3d() ;


 /*instead*/  Standard_Integer Domain() ;


 /*instead*/  OCMeshDS_DegreeOfFreedom Movability() ;


 /*instead*/  void SetMovability(OCMeshDS_DegreeOfFreedom Move) ;


 /*instead*/  Standard_Integer HashCode(Standard_Integer Upper) ;


 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCMeshShape_Vertex^ Other) ;

~OCMeshShape_Vertex()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
