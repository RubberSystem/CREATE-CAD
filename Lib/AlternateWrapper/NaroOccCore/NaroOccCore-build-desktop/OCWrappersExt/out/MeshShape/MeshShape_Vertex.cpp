// File generated by CPPExt (CPP file)
//

#include "MeshShape_Vertex.h"
#include "../Converter.h"
#include "../gp/gp_XY.h"


using namespace OCNaroWrappers;

OCMeshShape_Vertex::OCMeshShape_Vertex(MeshShape_Vertex* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCMeshShape_Vertex::OCMeshShape_Vertex(OCNaroWrappers::OCgp_XY^ UV, OCMeshDS_DegreeOfFreedom Move) 
{}

OCMeshShape_Vertex::OCMeshShape_Vertex(OCNaroWrappers::OCgp_XY^ UV, Standard_Integer Locat3d, Standard_Integer Domain, OCMeshDS_DegreeOfFreedom Move) 
{}

OCgp_XY^ OCMeshShape_Vertex::Coord()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((MeshShape_Vertex*)nativeHandle)->Coord();
  return gcnew OCgp_XY(tmp);
}

 Standard_Integer OCMeshShape_Vertex::Location3d()
{
  return ((MeshShape_Vertex*)nativeHandle)->Location3d();
}

 Standard_Integer OCMeshShape_Vertex::Domain()
{
  return ((MeshShape_Vertex*)nativeHandle)->Domain();
}

 OCMeshDS_DegreeOfFreedom OCMeshShape_Vertex::Movability()
{
  return (OCMeshDS_DegreeOfFreedom)(((MeshShape_Vertex*)nativeHandle)->Movability());
}

 void OCMeshShape_Vertex::SetMovability(OCMeshDS_DegreeOfFreedom Move)
{
  ((MeshShape_Vertex*)nativeHandle)->SetMovability((MeshDS_DegreeOfFreedom)Move);
}

 Standard_Integer OCMeshShape_Vertex::HashCode(Standard_Integer Upper)
{
  return ((MeshShape_Vertex*)nativeHandle)->HashCode(Upper);
}

 System::Boolean OCMeshShape_Vertex::IsEqual(OCNaroWrappers::OCMeshShape_Vertex^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((MeshShape_Vertex*)nativeHandle)->IsEqual(*((MeshShape_Vertex*)Other->Handle)));
}


