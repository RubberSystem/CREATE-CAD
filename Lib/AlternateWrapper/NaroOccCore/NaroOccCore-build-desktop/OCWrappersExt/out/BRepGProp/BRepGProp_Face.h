// File generated by CPPExt (MPV)
//
#ifndef _BRepGProp_Face_OCWrappers_HeaderFile
#define _BRepGProp_Face_OCWrappers_HeaderFile

// include native header
#include <BRepGProp_Face.hxx>
#include "../Converter.h"


#include "../BRepAdaptor/BRepAdaptor_Surface.h"
#include "../Geom2dAdaptor/Geom2dAdaptor_Curve.h"
#include "../gp/gp_Pnt2d.h"
#include "../GeomAbs/GeomAbs_IsoType.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Face;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCTopoDS_Edge;
ref class OCgp_Pnt2d;
ref class OCgp_Vec2d;
ref class OCTColStd_HArray1OfReal;



public ref class OCBRepGProp_Face  {

protected:
  BRepGProp_Face* nativeHandle;
  OCBRepGProp_Face(OCDummy^) {};

public:
  property BRepGProp_Face* Handle
  {
    BRepGProp_Face* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepGProp_Face(BRepGProp_Face* nativeHandle);

// Methods PUBLIC

//! Constructor. Initializes the object with a flag IsUseSpan <br>
//!          that says if it is necessary to define spans on a face. <br>
//!          This option has an effect only for BSpline faces. Spans <br>
//!          are returned by the methods GetUKnots and GetTKnots. <br>
OCBRepGProp_Face(System::Boolean IsUseSpan);

//! Constructor. Initializes the object with the face and the <br>
//!          flag IsUseSpan that says if it is necessary to define <br>
//!          spans on a face. This option has an effect only for <br>
//!          BSpline faces. Spans are returned by the methods GetUKnots <br>
//!          and GetTKnots. <br>
OCBRepGProp_Face(OCNaroWrappers::OCTopoDS_Face^ F, System::Boolean IsUseSpan);


 /*instead*/  void Load(OCNaroWrappers::OCTopoDS_Face^ F) ;


 /*instead*/  Standard_Integer VIntegrationOrder() ;

//! Returns Standard_True if the face is not trimmed. <br>
 /*instead*/  System::Boolean NaturalRestriction() ;

//! Returns the value of the boundary curve of the face. <br>
 /*instead*/  OCgp_Pnt2d^ Value2d(Standard_Real U) ;


 /*instead*/  Standard_Integer SIntOrder(Standard_Real Eps) ;


 /*instead*/  Standard_Integer SVIntSubs() ;


 /*instead*/  Standard_Integer SUIntSubs() ;


 /*instead*/  void UKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots) ;


 /*instead*/  void VKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots) ;


 /*instead*/  Standard_Integer LIntOrder(Standard_Real Eps) ;


 /*instead*/  Standard_Integer LIntSubs() ;


 /*instead*/  void LKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots) ;

//! Returns the number of points required to do the <br>
//!          integration in the U parametric direction with <br>
//!          a good accuracy. <br>
 /*instead*/  Standard_Integer UIntegrationOrder() ;

//! Returns the parametric bounds of the Face. <br>
 /*instead*/  void Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2) ;

//! Computes the point of parameter U, V on the Face <S> and <br>
//!          the normal to the face at this point. <br>
 /*instead*/  void Normal(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ VNor) ;

//! Loading the boundary arc. <br>
 /*instead*/  void Load(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Returns the parametric value of the start point of <br>
//!          the current arc of curve. <br>
 /*instead*/  Standard_Real FirstParameter() ;

//! Returns the parametric value of the end point of <br>
//!          the current arc of curve. <br>
 /*instead*/  Standard_Real LastParameter() ;

//! Returns the number of points required to do the <br>
//!          integration along the parameter of curve. <br>
 /*instead*/  Standard_Integer IntegrationOrder() ;

//! Returns the point of parameter U and the first derivative <br>
//!          at this point of a boundary curve. <br>
 /*instead*/  void D12d(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1) ;

//! Loading the boundary arc. This arc is either a top, bottom, <br>
//!          left or right bound of a UV rectangle in which the <br>
//!          parameters of surface are defined. <br>
//!          If IsFirstParam is equal to Standard_True, the face is <br>
//!          initialized by either left of bottom bound. Otherwise it is <br>
//!          initialized by the top or right one. <br>
//!          If theIsoType is equal to GeomAbs_IsoU, the face is <br>
//!          initialized with either left or right bound. Otherwise - <br>
//!          with either top or bottom one. <br>
 /*instead*/  void Load(System::Boolean IsFirstParam, OCGeomAbs_IsoType theIsoType) ;

//! Returns an array of U knots of the face. The first and last <br>
//!          elements of the array will be theUMin and theUMax. The <br>
//!          middle elements will be the U Knots of the face greater <br>
//!          then theUMin and lower then theUMax in increasing order. <br>
//!          If the face is not a BSpline, the array initialized with <br>
//!          theUMin and theUMax only. <br>
 /*instead*/  void GetUKnots(Standard_Real theUMin, Standard_Real theUMax, OCNaroWrappers::OCTColStd_HArray1OfReal^ theUKnots) ;

//! Returns an array of combination of T knots of the arc and <br>
//!          V knots of the face. The first and last elements of the <br>
//!          array will be theTMin and theTMax. The middle elements will <br>
//!          be the Knots of the arc and the values of parameters of <br>
//!          arc on which the value points have V coordinates close to V <br>
//!          knots of face. All the parameter will be greater then <br>
//!          theTMin and lower then theTMax in increasing order. <br>
//!          If the face is not a BSpline, the array initialized with <br>
//!          theTMin and theTMax only. <br>
 /*instead*/  void GetTKnots(Standard_Real theTMin, Standard_Real theTMax, OCNaroWrappers::OCTColStd_HArray1OfReal^ theTKnots) ;

~OCBRepGProp_Face()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
