// File generated by CPPExt (CPP file)
//

#include "BRepGProp_Face.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../TColStd/TColStd_HArray1OfReal.h"


using namespace OCNaroWrappers;

OCBRepGProp_Face::OCBRepGProp_Face(BRepGProp_Face* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepGProp_Face::OCBRepGProp_Face(System::Boolean IsUseSpan) 
{
  nativeHandle = new BRepGProp_Face(OCConverter::BooleanToStandardBoolean(IsUseSpan));
}

OCBRepGProp_Face::OCBRepGProp_Face(OCNaroWrappers::OCTopoDS_Face^ F, System::Boolean IsUseSpan) 
{
  nativeHandle = new BRepGProp_Face(*((TopoDS_Face*)F->Handle), OCConverter::BooleanToStandardBoolean(IsUseSpan));
}

 void OCBRepGProp_Face::Load(OCNaroWrappers::OCTopoDS_Face^ F)
{
  ((BRepGProp_Face*)nativeHandle)->Load(*((TopoDS_Face*)F->Handle));
}

 Standard_Integer OCBRepGProp_Face::VIntegrationOrder()
{
  return ((BRepGProp_Face*)nativeHandle)->VIntegrationOrder();
}

 System::Boolean OCBRepGProp_Face::NaturalRestriction()
{
  return OCConverter::StandardBooleanToBoolean(((BRepGProp_Face*)nativeHandle)->NaturalRestriction());
}

OCgp_Pnt2d^ OCBRepGProp_Face::Value2d(Standard_Real U)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((BRepGProp_Face*)nativeHandle)->Value2d(U);
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Integer OCBRepGProp_Face::SIntOrder(Standard_Real Eps)
{
  return ((BRepGProp_Face*)nativeHandle)->SIntOrder(Eps);
}

 Standard_Integer OCBRepGProp_Face::SVIntSubs()
{
  return ((BRepGProp_Face*)nativeHandle)->SVIntSubs();
}

 Standard_Integer OCBRepGProp_Face::SUIntSubs()
{
  return ((BRepGProp_Face*)nativeHandle)->SUIntSubs();
}

 void OCBRepGProp_Face::UKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots)
{
  ((BRepGProp_Face*)nativeHandle)->UKnots(*((TColStd_Array1OfReal*)Knots->Handle));
}

 void OCBRepGProp_Face::VKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots)
{
  ((BRepGProp_Face*)nativeHandle)->VKnots(*((TColStd_Array1OfReal*)Knots->Handle));
}

 Standard_Integer OCBRepGProp_Face::LIntOrder(Standard_Real Eps)
{
  return ((BRepGProp_Face*)nativeHandle)->LIntOrder(Eps);
}

 Standard_Integer OCBRepGProp_Face::LIntSubs()
{
  return ((BRepGProp_Face*)nativeHandle)->LIntSubs();
}

 void OCBRepGProp_Face::LKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots)
{
  ((BRepGProp_Face*)nativeHandle)->LKnots(*((TColStd_Array1OfReal*)Knots->Handle));
}

 Standard_Integer OCBRepGProp_Face::UIntegrationOrder()
{
  return ((BRepGProp_Face*)nativeHandle)->UIntegrationOrder();
}

 void OCBRepGProp_Face::Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2)
{
  ((BRepGProp_Face*)nativeHandle)->Bounds(U1, U2, V1, V2);
}

 void OCBRepGProp_Face::Normal(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ VNor)
{
  ((BRepGProp_Face*)nativeHandle)->Normal(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)VNor->Handle));
}

 void OCBRepGProp_Face::Load(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  ((BRepGProp_Face*)nativeHandle)->Load(*((TopoDS_Edge*)E->Handle));
}

 Standard_Real OCBRepGProp_Face::FirstParameter()
{
  return ((BRepGProp_Face*)nativeHandle)->FirstParameter();
}

 Standard_Real OCBRepGProp_Face::LastParameter()
{
  return ((BRepGProp_Face*)nativeHandle)->LastParameter();
}

 Standard_Integer OCBRepGProp_Face::IntegrationOrder()
{
  return ((BRepGProp_Face*)nativeHandle)->IntegrationOrder();
}

 void OCBRepGProp_Face::D12d(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1)
{
  ((BRepGProp_Face*)nativeHandle)->D12d(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle));
}

 void OCBRepGProp_Face::Load(System::Boolean IsFirstParam, OCGeomAbs_IsoType theIsoType)
{
  ((BRepGProp_Face*)nativeHandle)->Load(OCConverter::BooleanToStandardBoolean(IsFirstParam), (GeomAbs_IsoType)theIsoType);
}

 void OCBRepGProp_Face::GetUKnots(Standard_Real theUMin, Standard_Real theUMax, OCNaroWrappers::OCTColStd_HArray1OfReal^ theUKnots)
{
  ((BRepGProp_Face*)nativeHandle)->GetUKnots(theUMin, theUMax, *((Handle_TColStd_HArray1OfReal*)theUKnots->Handle));
}

 void OCBRepGProp_Face::GetTKnots(Standard_Real theTMin, Standard_Real theTMax, OCNaroWrappers::OCTColStd_HArray1OfReal^ theTKnots)
{
  ((BRepGProp_Face*)nativeHandle)->GetTKnots(theTMin, theTMax, *((Handle_TColStd_HArray1OfReal*)theTKnots->Handle));
}


