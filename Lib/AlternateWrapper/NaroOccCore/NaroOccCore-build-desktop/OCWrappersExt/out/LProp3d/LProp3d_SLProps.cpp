// File generated by CPPExt (CPP file)
//

#include "LProp3d_SLProps.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "LProp3d_SurfaceTool.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Dir.h"


using namespace OCNaroWrappers;

OCLProp3d_SLProps::OCLProp3d_SLProps(LProp3d_SLProps* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCLProp3d_SLProps::OCLProp3d_SLProps(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real U, Standard_Real V, Standard_Integer N, Standard_Real Resolution) 
{
  nativeHandle = new LProp3d_SLProps(*((Handle_Adaptor3d_HSurface*)S->Handle), U, V, N, Resolution);
}

OCLProp3d_SLProps::OCLProp3d_SLProps(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Integer N, Standard_Real Resolution) 
{
  nativeHandle = new LProp3d_SLProps(*((Handle_Adaptor3d_HSurface*)S->Handle), N, Resolution);
}

OCLProp3d_SLProps::OCLProp3d_SLProps(Standard_Integer N, Standard_Real Resolution) 
{
  nativeHandle = new LProp3d_SLProps(N, Resolution);
}

 void OCLProp3d_SLProps::SetSurface(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  ((LProp3d_SLProps*)nativeHandle)->SetSurface(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 void OCLProp3d_SLProps::SetParameters(Standard_Real U, Standard_Real V)
{
  ((LProp3d_SLProps*)nativeHandle)->SetParameters(U, V);
}

OCgp_Pnt^ OCLProp3d_SLProps::Value()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((LProp3d_SLProps*)nativeHandle)->Value();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Vec^ OCLProp3d_SLProps::D1U()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((LProp3d_SLProps*)nativeHandle)->D1U();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCLProp3d_SLProps::D1V()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((LProp3d_SLProps*)nativeHandle)->D1V();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCLProp3d_SLProps::D2U()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((LProp3d_SLProps*)nativeHandle)->D2U();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCLProp3d_SLProps::D2V()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((LProp3d_SLProps*)nativeHandle)->D2V();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCLProp3d_SLProps::DUV()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((LProp3d_SLProps*)nativeHandle)->DUV();
  return gcnew OCgp_Vec(tmp);
}

 System::Boolean OCLProp3d_SLProps::IsTangentUDefined()
{
  return OCConverter::StandardBooleanToBoolean(((LProp3d_SLProps*)nativeHandle)->IsTangentUDefined());
}

 void OCLProp3d_SLProps::TangentU(OCNaroWrappers::OCgp_Dir^ D)
{
  ((LProp3d_SLProps*)nativeHandle)->TangentU(*((gp_Dir*)D->Handle));
}

 System::Boolean OCLProp3d_SLProps::IsTangentVDefined()
{
  return OCConverter::StandardBooleanToBoolean(((LProp3d_SLProps*)nativeHandle)->IsTangentVDefined());
}

 void OCLProp3d_SLProps::TangentV(OCNaroWrappers::OCgp_Dir^ D)
{
  ((LProp3d_SLProps*)nativeHandle)->TangentV(*((gp_Dir*)D->Handle));
}

 System::Boolean OCLProp3d_SLProps::IsNormalDefined()
{
  return OCConverter::StandardBooleanToBoolean(((LProp3d_SLProps*)nativeHandle)->IsNormalDefined());
}

OCgp_Dir^ OCLProp3d_SLProps::Normal()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((LProp3d_SLProps*)nativeHandle)->Normal();
  return gcnew OCgp_Dir(tmp);
}

 System::Boolean OCLProp3d_SLProps::IsCurvatureDefined()
{
  return OCConverter::StandardBooleanToBoolean(((LProp3d_SLProps*)nativeHandle)->IsCurvatureDefined());
}

 System::Boolean OCLProp3d_SLProps::IsUmbilic()
{
  return OCConverter::StandardBooleanToBoolean(((LProp3d_SLProps*)nativeHandle)->IsUmbilic());
}

 Standard_Real OCLProp3d_SLProps::MaxCurvature()
{
  return ((LProp3d_SLProps*)nativeHandle)->MaxCurvature();
}

 Standard_Real OCLProp3d_SLProps::MinCurvature()
{
  return ((LProp3d_SLProps*)nativeHandle)->MinCurvature();
}

 void OCLProp3d_SLProps::CurvatureDirections(OCNaroWrappers::OCgp_Dir^ MaxD, OCNaroWrappers::OCgp_Dir^ MinD)
{
  ((LProp3d_SLProps*)nativeHandle)->CurvatureDirections(*((gp_Dir*)MaxD->Handle), *((gp_Dir*)MinD->Handle));
}

 Standard_Real OCLProp3d_SLProps::MeanCurvature()
{
  return ((LProp3d_SLProps*)nativeHandle)->MeanCurvature();
}

 Standard_Real OCLProp3d_SLProps::GaussianCurvature()
{
  return ((LProp3d_SLProps*)nativeHandle)->GaussianCurvature();
}


