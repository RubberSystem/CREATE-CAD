// File generated by CPPExt (CPP file)
//

#include "AppDef_Compute.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../AppParCurves/AppParCurves_HArray1OfConstraintCouple.h"
#include "AppDef_MultiLine.h"
#include "AppDef_MyLineTool.h"
#include "AppDef_MyGradientOfCompute.h"
#include "AppDef_ParLeastSquareOfMyGradientOfCompute.h"
#include "AppDef_ResConstraintOfMyGradientOfCompute.h"
#include "AppDef_ParFunctionOfMyGradientOfCompute.h"
#include "AppDef_Gradient_BFGSOfMyGradientOfCompute.h"
#include "../math/math_Vector.h"
#include "../AppParCurves/AppParCurves_MultiCurve.h"
#include "../AppParCurves/AppParCurves_MultiBSpCurve.h"
#include "../TColStd/TColStd_Array1OfReal.h"


using namespace OCNaroWrappers;

OCAppDef_Compute::OCAppDef_Compute(AppDef_Compute* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCAppDef_Compute::OCAppDef_Compute(OCNaroWrappers::OCAppDef_MultiLine^ Line, Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, OCApprox_ParametrizationType parametrization, System::Boolean Squares) 
{
  nativeHandle = new AppDef_Compute(*((AppDef_MultiLine*)Line->Handle), degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), (Approx_ParametrizationType)parametrization, OCConverter::BooleanToStandardBoolean(Squares));
}

OCAppDef_Compute::OCAppDef_Compute(OCNaroWrappers::OCAppDef_MultiLine^ Line, OCNaroWrappers::OCmath_Vector^ Parameters, Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, System::Boolean Squares) 
{
  nativeHandle = new AppDef_Compute(*((AppDef_MultiLine*)Line->Handle), *((math_Vector*)Parameters->Handle), degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), OCConverter::BooleanToStandardBoolean(Squares));
}

OCAppDef_Compute::OCAppDef_Compute(OCNaroWrappers::OCmath_Vector^ Parameters, Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, System::Boolean Squares) 
{
  nativeHandle = new AppDef_Compute(*((math_Vector*)Parameters->Handle), degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), OCConverter::BooleanToStandardBoolean(Squares));
}

OCAppDef_Compute::OCAppDef_Compute(Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, OCApprox_ParametrizationType parametrization, System::Boolean Squares) 
{
  nativeHandle = new AppDef_Compute(degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), (Approx_ParametrizationType)parametrization, OCConverter::BooleanToStandardBoolean(Squares));
}

 void OCAppDef_Compute::Init(Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, OCApprox_ParametrizationType parametrization, System::Boolean Squares)
{
  ((AppDef_Compute*)nativeHandle)->Init(degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), (Approx_ParametrizationType)parametrization, OCConverter::BooleanToStandardBoolean(Squares));
}

 void OCAppDef_Compute::Perform(OCNaroWrappers::OCAppDef_MultiLine^ Line)
{
  ((AppDef_Compute*)nativeHandle)->Perform(*((AppDef_MultiLine*)Line->Handle));
}

 void OCAppDef_Compute::SetDegrees(Standard_Integer degreemin, Standard_Integer degreemax)
{
  ((AppDef_Compute*)nativeHandle)->SetDegrees(degreemin, degreemax);
}

 void OCAppDef_Compute::SetTolerances(Standard_Real Tolerance3d, Standard_Real Tolerance2d)
{
  ((AppDef_Compute*)nativeHandle)->SetTolerances(Tolerance3d, Tolerance2d);
}

 void OCAppDef_Compute::SetConstraints(OCAppParCurves_Constraint firstC, OCAppParCurves_Constraint lastC)
{
  ((AppDef_Compute*)nativeHandle)->SetConstraints((AppParCurves_Constraint)firstC, (AppParCurves_Constraint)lastC);
}

 System::Boolean OCAppDef_Compute::IsAllApproximated()
{
  return OCConverter::StandardBooleanToBoolean(((AppDef_Compute*)nativeHandle)->IsAllApproximated());
}

 System::Boolean OCAppDef_Compute::IsToleranceReached()
{
  return OCConverter::StandardBooleanToBoolean(((AppDef_Compute*)nativeHandle)->IsToleranceReached());
}

 void OCAppDef_Compute::Error(Standard_Integer Index, Standard_Real& tol3d, Standard_Real& tol2d)
{
  ((AppDef_Compute*)nativeHandle)->Error(Index, tol3d, tol2d);
}

 Standard_Integer OCAppDef_Compute::NbMultiCurves()
{
  return ((AppDef_Compute*)nativeHandle)->NbMultiCurves();
}

OCAppParCurves_MultiCurve^ OCAppDef_Compute::Value(Standard_Integer Index)
{
  AppParCurves_MultiCurve* tmp = new AppParCurves_MultiCurve();
  *tmp = ((AppDef_Compute*)nativeHandle)->Value(Index);
  return gcnew OCAppParCurves_MultiCurve(tmp);
}

OCAppParCurves_MultiCurve^ OCAppDef_Compute::ChangeValue(Standard_Integer Index)
{
  AppParCurves_MultiCurve* tmp = new AppParCurves_MultiCurve();
  *tmp = ((AppDef_Compute*)nativeHandle)->ChangeValue(Index);
  return gcnew OCAppParCurves_MultiCurve(tmp);
}

OCAppParCurves_MultiBSpCurve^ OCAppDef_Compute::SplineValue()
{
  AppParCurves_MultiBSpCurve* tmp = new AppParCurves_MultiBSpCurve();
  *tmp = ((AppDef_Compute*)nativeHandle)->SplineValue();
  return gcnew OCAppParCurves_MultiBSpCurve(tmp);
}

 void OCAppDef_Compute::Parametrization(OCApprox_ParametrizationType& partype)
{
  ((AppDef_Compute*)nativeHandle)->Parametrization((Approx_ParametrizationType&)partype);
}

OCTColStd_Array1OfReal^ OCAppDef_Compute::Parameters(Standard_Integer Index)
{
  TColStd_Array1OfReal* tmp = new TColStd_Array1OfReal(0, 0);
  *tmp = ((AppDef_Compute*)nativeHandle)->Parameters(Index);
  return gcnew OCTColStd_Array1OfReal(tmp);
}


