// File generated by CPPExt (CPP file)
//

#include "AppDef_HArray1OfMultiPointConstraint.h"
#include "../Converter.h"
#include "AppDef_MultiPointConstraint.h"
#include "AppDef_Array1OfMultiPointConstraint.h"


using namespace OCNaroWrappers;

OCAppDef_HArray1OfMultiPointConstraint::OCAppDef_HArray1OfMultiPointConstraint(Handle(AppDef_HArray1OfMultiPointConstraint)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AppDef_HArray1OfMultiPointConstraint(*nativeHandle);
}

OCAppDef_HArray1OfMultiPointConstraint::OCAppDef_HArray1OfMultiPointConstraint(Standard_Integer Low, Standard_Integer Up) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AppDef_HArray1OfMultiPointConstraint(new AppDef_HArray1OfMultiPointConstraint(Low, Up));
}

OCAppDef_HArray1OfMultiPointConstraint::OCAppDef_HArray1OfMultiPointConstraint(Standard_Integer Low, Standard_Integer Up, OCNaroWrappers::OCAppDef_MultiPointConstraint^ V) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AppDef_HArray1OfMultiPointConstraint(new AppDef_HArray1OfMultiPointConstraint(Low, Up, *((AppDef_MultiPointConstraint*)V->Handle)));
}

 void OCAppDef_HArray1OfMultiPointConstraint::Init(OCNaroWrappers::OCAppDef_MultiPointConstraint^ V)
{
  (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->Init(*((AppDef_MultiPointConstraint*)V->Handle));
}

 Standard_Integer OCAppDef_HArray1OfMultiPointConstraint::Length()
{
  return (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->Length();
}

 Standard_Integer OCAppDef_HArray1OfMultiPointConstraint::Lower()
{
  return (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->Lower();
}

 Standard_Integer OCAppDef_HArray1OfMultiPointConstraint::Upper()
{
  return (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->Upper();
}

 void OCAppDef_HArray1OfMultiPointConstraint::SetValue(Standard_Integer Index, OCNaroWrappers::OCAppDef_MultiPointConstraint^ Value)
{
  (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->SetValue(Index, *((AppDef_MultiPointConstraint*)Value->Handle));
}

OCAppDef_MultiPointConstraint^ OCAppDef_HArray1OfMultiPointConstraint::Value(Standard_Integer Index)
{
  AppDef_MultiPointConstraint* tmp = new AppDef_MultiPointConstraint();
  *tmp = (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->Value(Index);
  return gcnew OCAppDef_MultiPointConstraint(tmp);
}

OCAppDef_MultiPointConstraint^ OCAppDef_HArray1OfMultiPointConstraint::ChangeValue(Standard_Integer Index)
{
  AppDef_MultiPointConstraint* tmp = new AppDef_MultiPointConstraint();
  *tmp = (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->ChangeValue(Index);
  return gcnew OCAppDef_MultiPointConstraint(tmp);
}

OCAppDef_Array1OfMultiPointConstraint^ OCAppDef_HArray1OfMultiPointConstraint::Array1()
{
  AppDef_Array1OfMultiPointConstraint* tmp = new AppDef_Array1OfMultiPointConstraint(0, 0);
  *tmp = (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->Array1();
  return gcnew OCAppDef_Array1OfMultiPointConstraint(tmp);
}

OCAppDef_Array1OfMultiPointConstraint^ OCAppDef_HArray1OfMultiPointConstraint::ChangeArray1()
{
  AppDef_Array1OfMultiPointConstraint* tmp = new AppDef_Array1OfMultiPointConstraint(0, 0);
  *tmp = (*((Handle_AppDef_HArray1OfMultiPointConstraint*)nativeHandle))->ChangeArray1();
  return gcnew OCAppDef_Array1OfMultiPointConstraint(tmp);
}


