// File generated by CPPExt (MPV)
//
#ifndef _AppDef_MultiPointConstraint_OCWrappers_HeaderFile
#define _AppDef_MultiPointConstraint_OCWrappers_HeaderFile

// include native header
#include <AppDef_MultiPointConstraint.hxx>
#include "../Converter.h"

#include "../AppParCurves/AppParCurves_MultiPoint.h"

#include "../AppParCurves/AppParCurves_MultiPoint.h"


namespace OCNaroWrappers
{

ref class OCMMgt_TShared;
ref class OCTColgp_Array1OfPnt;
ref class OCTColgp_Array1OfPnt2d;
ref class OCTColgp_Array1OfVec;
ref class OCTColgp_Array1OfVec2d;
ref class OCgp_Vec;
ref class OCgp_Vec2d;


//! Describes a MultiPointConstraint used in a <br>
//! Multiline. MultiPointConstraints are composed <br>
//! of several two or three-dimensional points. <br>
//! The purpose is to define the corresponding <br>
//! points that share a common constraint in order <br>
//! to compute the approximation of several lines in parallel. <br>
//! Notes: <br>
//! -   The order of points of a MultiPointConstraints is very important. <br>
//!   Users must give 3D points first, and then 2D points. <br>
//! -   The constraints for the points included in a <br>
//!   MultiPointConstraint are always identical for <br>
//!   all points, including the parameter. <br>
//! -   If a MultiPointConstraint is a "tangency" <br>
//!   point, the point is also a "passing" point. <br>
public ref class OCAppDef_MultiPointConstraint  : public OCAppParCurves_MultiPoint {

protected:
  // dummy constructor;
  OCAppDef_MultiPointConstraint(OCDummy^) : OCAppParCurves_MultiPoint((OCDummy^)nullptr) {};

public:

// constructor from native
OCAppDef_MultiPointConstraint(AppDef_MultiPointConstraint* nativeHandle);

// Methods PUBLIC

//! creates an undefined MultiPointConstraint. <br>
OCAppDef_MultiPointConstraint();

//! constructs a set of Points used to approximate a Multiline. <br>
//!          These Points can be of 2 or 3 dimensions. <br>
//!          Points will be initialized with SetPoint and SetPoint2d. <br>
OCAppDef_MultiPointConstraint(Standard_Integer NbPoints, Standard_Integer NbPoints2d);

//! creates a MultiPoint only composed of 3D points. <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt^ tabP);

//! creates a MultiPoint only composed of 2D points. <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ tabP);

//! constructs a set of Points used to approximate a Multiline. <br>
//!          These Points can be of 2 or 3 dimensions. <br>
//!          Points will be initialized with SetPoint and SetPoint2d. <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt^ tabP, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ tabP2d);

//! creates a MultiPointConstraint with a constraint of <br>
//!          Curvature. <br>
//!          An exception is raised if <br>
//!          (length of <tabP> + length of <tabP2d> ) is different <br>
//!          from (length of <tabVec> + length of <tabVec2d> ) or <br>
//!          from (length of <tabCur> + length of <tabCur2d> ) <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt^ tabP, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ tabP2d, OCNaroWrappers::OCTColgp_Array1OfVec^ tabVec, OCNaroWrappers::OCTColgp_Array1OfVec2d^ tabVec2d, OCNaroWrappers::OCTColgp_Array1OfVec^ tabCur, OCNaroWrappers::OCTColgp_Array1OfVec2d^ tabCur2d);

//! creates a MultiPointConstraint with a constraint of <br>
//!          Tangency. <br>
//!          An exception is raised if <br>
//!          (length of <tabP> + length of <tabP2d> ) is different <br>
//!          from (length of <tabVec> + length of <tabVec2d> ) <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt^ tabP, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ tabP2d, OCNaroWrappers::OCTColgp_Array1OfVec^ tabVec, OCNaroWrappers::OCTColgp_Array1OfVec2d^ tabVec2d);

//! creates a MultiPointConstraint only composed of 3d points <br>
//!          with constraints of curvature. <br>
//!          An exception is raised if the length of tabP is different <br>
//!          from the length of tabVec or from tabCur. <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt^ tabP, OCNaroWrappers::OCTColgp_Array1OfVec^ tabVec, OCNaroWrappers::OCTColgp_Array1OfVec^ tabCur);

//! creates a MultiPointConstraint only composed of 3d points <br>
//!          with constraints of tangency. <br>
//!          An exception is raised if the length of tabP is different <br>
//!          from the length of tabVec. <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt^ tabP, OCNaroWrappers::OCTColgp_Array1OfVec^ tabVec);

//! creates a MultiPointConstraint only composed of 2d points <br>
//!          with constraints of tangency. <br>
//!          An exception is raised if the length of tabP is different <br>
//!          from the length of tabVec2d. <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ tabP2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ tabVec2d);

//! creates a MultiPointConstraint only composed of 2d points <br>
//!          with constraints of curvature. <br>
//!          An exception is raised if the length of tabP is different <br>
//!          from the length of tabVec2d or from tabCur2d. <br>
OCAppDef_MultiPointConstraint(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ tabP2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ tabVec2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ tabCur2d);

//! sets the value of the tangency of the point of range <br>
//!          Index. <br>
//!          An exception is raised if Index <0 or if Index > number <br>
//!          of 3d points. <br>
//!          An exception is raised if Tang has an incorrect number of <br>
//!          dimensions. <br>
 /*instead*/  void SetTang(Standard_Integer Index, OCNaroWrappers::OCgp_Vec^ Tang) ;

//! returns the tangency value of the point of range Index. <br>
//!          An exception is raised if Index < 0 or if Index > number <br>
//!          of 3d points. <br>
 /*instead*/  OCgp_Vec^ Tang(Standard_Integer Index) ;

//! sets the value of the tangency of the point of range <br>
//!          Index. <br>
//!          An exception is raised if Index <number of 3d points or if <br>
//!          Index > total number of Points <br>
//!          An exception is raised if Tang has an incorrect number of <br>
//!          dimensions. <br>
 /*instead*/  void SetTang2d(Standard_Integer Index, OCNaroWrappers::OCgp_Vec2d^ Tang2d) ;

//! returns the tangency value of the point of range Index. <br>
//!          An exception is raised if Index < number  of 3d points or <br>
//!          if Index > total number of points. <br>
 /*instead*/  OCgp_Vec2d^ Tang2d(Standard_Integer Index) ;

//! Vec sets the value of the normal vector at the <br>
//! point of index Index. The norm of the normal <br>
//! vector at the point of position Index is set to the normal curvature. <br>
//!          An exception is raised if Index <0 or if Index > number <br>
//!          of 3d points. <br>
//!          An exception is raised if Curv has an incorrect number of <br>
//!          dimensions. <br>
 /*instead*/  void SetCurv(Standard_Integer Index, OCNaroWrappers::OCgp_Vec^ Curv) ;

//! returns the normal vector at the point of range Index. <br>
//!          An exception is raised if Index < 0 or if Index > number <br>
//!          of 3d points. <br>
 /*instead*/  OCgp_Vec^ Curv(Standard_Integer Index) ;

//! Vec sets the value of the normal vector at the <br>
//! point of index Index. The norm of the normal <br>
//! vector at the point of position Index is set to the normal curvature. <br>
//!          An exception is raised if Index <0 or if Index > number <br>
//!          of 3d points. <br>
//!          An exception is raised if Curv has an incorrect number of <br>
//!          dimensions. <br>
 /*instead*/  void SetCurv2d(Standard_Integer Index, OCNaroWrappers::OCgp_Vec2d^ Curv2d) ;

//! returns the normal vector at the point of range Index. <br>
//!          An exception is raised if Index < 0 or if Index > number <br>
//!          of 3d points. <br>
 /*instead*/  OCgp_Vec2d^ Curv2d(Standard_Integer Index) ;

//! returns True if the MultiPoint has a tangency value. <br>
 /*instead*/  System::Boolean IsTangencyPoint() ;

//! returns True if the MultiPoint has a curvature value. <br>
 /*instead*/  System::Boolean IsCurvaturePoint() ;

//! Prints on the stream o information on the current <br>
//!          state of the object. <br>
//!          Is used to redefine the operator <<. <br>
virtual /*instead*/  void Dump(Standard_OStream& o) override;

~OCAppDef_MultiPointConstraint()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
