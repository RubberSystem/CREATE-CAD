// File generated by CPPExt (CPP file)
//

#include "AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../AppParCurves/AppParCurves_HArray1OfConstraintCouple.h"
#include "AppDef_MultiLine.h"
#include "AppDef_MyLineTool.h"
#include "AppDef_BSpParLeastSquareOfMyBSplGradientOfBSplineCompute.h"
#include "../math/math_Vector.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../AppParCurves/AppParCurves_MultiBSpCurve.h"
#include "../math/math_Matrix.h"
#include "../math/math_IntegerVector.h"


using namespace OCNaroWrappers;

OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute(AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute* nativeHandle) : OCmath_MultipleVarFunctionWithGradient((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute(OCNaroWrappers::OCAppDef_MultiLine^ SSP, Standard_Integer FirstPoint, Standard_Integer LastPoint, OCNaroWrappers::OCAppParCurves_HArray1OfConstraintCouple^ TheConstraints, OCNaroWrappers::OCmath_Vector^ Parameters, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults, Standard_Integer NbPol) : OCmath_MultipleVarFunctionWithGradient((OCDummy^)nullptr)

{
  nativeHandle = new AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute(*((AppDef_MultiLine*)SSP->Handle), FirstPoint, LastPoint, *((Handle_AppParCurves_HArray1OfConstraintCouple*)TheConstraints->Handle), *((math_Vector*)Parameters->Handle), *((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Mults->Handle), NbPol);
}

 Standard_Integer OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::NbVariables()
{
  return ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->NbVariables();
}

 System::Boolean OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::Value(OCNaroWrappers::OCmath_Vector^ X, Standard_Real& F)
{
  return OCConverter::StandardBooleanToBoolean(((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->Value(*((math_Vector*)X->Handle), F));
}

 System::Boolean OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::Gradient(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ G)
{
  return OCConverter::StandardBooleanToBoolean(((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->Gradient(*((math_Vector*)X->Handle), *((math_Vector*)G->Handle)));
}

 System::Boolean OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::Values(OCNaroWrappers::OCmath_Vector^ X, Standard_Real& F, OCNaroWrappers::OCmath_Vector^ G)
{
  return OCConverter::StandardBooleanToBoolean(((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->Values(*((math_Vector*)X->Handle), F, *((math_Vector*)G->Handle)));
}

OCmath_Vector^ OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::NewParameters()
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->NewParameters();
  return gcnew OCmath_Vector(tmp);
}

OCAppParCurves_MultiBSpCurve^ OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::CurveValue()
{
  AppParCurves_MultiBSpCurve* tmp = new AppParCurves_MultiBSpCurve();
  *tmp = ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->CurveValue();
  return gcnew OCAppParCurves_MultiBSpCurve(tmp);
}

 Standard_Real OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::Error(Standard_Integer IPoint, Standard_Integer CurveIndex)
{
  return ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->Error(IPoint, CurveIndex);
}

 Standard_Real OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::MaxError3d()
{
  return ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->MaxError3d();
}

 Standard_Real OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::MaxError2d()
{
  return ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->MaxError2d();
}

OCmath_Matrix^ OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::FunctionMatrix()
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->FunctionMatrix();
  return gcnew OCmath_Matrix(tmp);
}

OCmath_Matrix^ OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::DerivativeFunctionMatrix()
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->DerivativeFunctionMatrix();
  return gcnew OCmath_Matrix(tmp);
}

OCmath_IntegerVector^ OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::Index()
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->Index();
  return gcnew OCmath_IntegerVector(tmp);
}

 OCAppParCurves_Constraint OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::FirstConstraint(OCNaroWrappers::OCAppParCurves_HArray1OfConstraintCouple^ TheConstraints, Standard_Integer FirstPoint)
{
  return (OCAppParCurves_Constraint)(((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->FirstConstraint(*((Handle_AppParCurves_HArray1OfConstraintCouple*)TheConstraints->Handle), FirstPoint));
}

 OCAppParCurves_Constraint OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::LastConstraint(OCNaroWrappers::OCAppParCurves_HArray1OfConstraintCouple^ TheConstraints, Standard_Integer LastPoint)
{
  return (OCAppParCurves_Constraint)(((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->LastConstraint(*((Handle_AppParCurves_HArray1OfConstraintCouple*)TheConstraints->Handle), LastPoint));
}

 void OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::SetFirstLambda(Standard_Real l1)
{
  ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->SetFirstLambda(l1);
}

 void OCAppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute::SetLastLambda(Standard_Real l2)
{
  ((AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute*)nativeHandle)->SetLastLambda(l2);
}


