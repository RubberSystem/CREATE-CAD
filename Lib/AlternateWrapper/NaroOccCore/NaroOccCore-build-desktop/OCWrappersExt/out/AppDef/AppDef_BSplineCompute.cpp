// File generated by CPPExt (CPP file)
//

#include "AppDef_BSplineCompute.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../AppParCurves/AppParCurves_HArray1OfConstraintCouple.h"
#include "AppDef_MultiLine.h"
#include "AppDef_MyLineTool.h"
#include "AppDef_MyBSplGradientOfBSplineCompute.h"
#include "AppDef_BSpParLeastSquareOfMyBSplGradientOfBSplineCompute.h"
#include "AppDef_BSpParFunctionOfMyBSplGradientOfBSplineCompute.h"
#include "AppDef_BSpGradient_BFGSOfMyBSplGradientOfBSplineCompute.h"
#include "AppDef_MyGradientbisOfBSplineCompute.h"
#include "AppDef_ParLeastSquareOfMyGradientbisOfBSplineCompute.h"
#include "AppDef_ResConstraintOfMyGradientbisOfBSplineCompute.h"
#include "AppDef_ParFunctionOfMyGradientbisOfBSplineCompute.h"
#include "AppDef_Gradient_BFGSOfMyGradientbisOfBSplineCompute.h"
#include "../math/math_Vector.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../AppParCurves/AppParCurves_MultiBSpCurve.h"
#include "../AppParCurves/AppParCurves_MultiCurve.h"


using namespace OCNaroWrappers;

OCAppDef_BSplineCompute::OCAppDef_BSplineCompute(AppDef_BSplineCompute* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCAppDef_BSplineCompute::OCAppDef_BSplineCompute(OCNaroWrappers::OCAppDef_MultiLine^ Line, Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, OCApprox_ParametrizationType parametrization, System::Boolean Squares) 
{
  nativeHandle = new AppDef_BSplineCompute(*((AppDef_MultiLine*)Line->Handle), degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), (Approx_ParametrizationType)parametrization, OCConverter::BooleanToStandardBoolean(Squares));
}

OCAppDef_BSplineCompute::OCAppDef_BSplineCompute(OCNaroWrappers::OCAppDef_MultiLine^ Line, OCNaroWrappers::OCmath_Vector^ Parameters, Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, System::Boolean Squares) 
{
  nativeHandle = new AppDef_BSplineCompute(*((AppDef_MultiLine*)Line->Handle), *((math_Vector*)Parameters->Handle), degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), OCConverter::BooleanToStandardBoolean(Squares));
}

OCAppDef_BSplineCompute::OCAppDef_BSplineCompute(OCNaroWrappers::OCmath_Vector^ Parameters, Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, System::Boolean Squares) 
{
  nativeHandle = new AppDef_BSplineCompute(*((math_Vector*)Parameters->Handle), degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), OCConverter::BooleanToStandardBoolean(Squares));
}

OCAppDef_BSplineCompute::OCAppDef_BSplineCompute(Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, OCApprox_ParametrizationType parametrization, System::Boolean Squares) 
{
  nativeHandle = new AppDef_BSplineCompute(degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), (Approx_ParametrizationType)parametrization, OCConverter::BooleanToStandardBoolean(Squares));
}

 void OCAppDef_BSplineCompute::Interpol(OCNaroWrappers::OCAppDef_MultiLine^ Line)
{
  ((AppDef_BSplineCompute*)nativeHandle)->Interpol(*((AppDef_MultiLine*)Line->Handle));
}

 void OCAppDef_BSplineCompute::Init(Standard_Integer degreemin, Standard_Integer degreemax, Standard_Real Tolerance3d, Standard_Real Tolerance2d, Standard_Integer NbIterations, System::Boolean cutting, OCApprox_ParametrizationType parametrization, System::Boolean Squares)
{
  ((AppDef_BSplineCompute*)nativeHandle)->Init(degreemin, degreemax, Tolerance3d, Tolerance2d, NbIterations, OCConverter::BooleanToStandardBoolean(cutting), (Approx_ParametrizationType)parametrization, OCConverter::BooleanToStandardBoolean(Squares));
}

 void OCAppDef_BSplineCompute::Perform(OCNaroWrappers::OCAppDef_MultiLine^ Line)
{
  ((AppDef_BSplineCompute*)nativeHandle)->Perform(*((AppDef_MultiLine*)Line->Handle));
}

 void OCAppDef_BSplineCompute::SetParameters(OCNaroWrappers::OCmath_Vector^ ThePar)
{
  ((AppDef_BSplineCompute*)nativeHandle)->SetParameters(*((math_Vector*)ThePar->Handle));
}

 void OCAppDef_BSplineCompute::SetKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots)
{
  ((AppDef_BSplineCompute*)nativeHandle)->SetKnots(*((TColStd_Array1OfReal*)Knots->Handle));
}

 void OCAppDef_BSplineCompute::SetKnotsAndMultiplicities(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults)
{
  ((AppDef_BSplineCompute*)nativeHandle)->SetKnotsAndMultiplicities(*((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Mults->Handle));
}

 void OCAppDef_BSplineCompute::SetDegrees(Standard_Integer degreemin, Standard_Integer degreemax)
{
  ((AppDef_BSplineCompute*)nativeHandle)->SetDegrees(degreemin, degreemax);
}

 void OCAppDef_BSplineCompute::SetTolerances(Standard_Real Tolerance3d, Standard_Real Tolerance2d)
{
  ((AppDef_BSplineCompute*)nativeHandle)->SetTolerances(Tolerance3d, Tolerance2d);
}

 void OCAppDef_BSplineCompute::SetContinuity(Standard_Integer C)
{
  ((AppDef_BSplineCompute*)nativeHandle)->SetContinuity(C);
}

 void OCAppDef_BSplineCompute::SetConstraints(OCAppParCurves_Constraint firstC, OCAppParCurves_Constraint lastC)
{
  ((AppDef_BSplineCompute*)nativeHandle)->SetConstraints((AppParCurves_Constraint)firstC, (AppParCurves_Constraint)lastC);
}

 System::Boolean OCAppDef_BSplineCompute::IsAllApproximated()
{
  return OCConverter::StandardBooleanToBoolean(((AppDef_BSplineCompute*)nativeHandle)->IsAllApproximated());
}

 System::Boolean OCAppDef_BSplineCompute::IsToleranceReached()
{
  return OCConverter::StandardBooleanToBoolean(((AppDef_BSplineCompute*)nativeHandle)->IsToleranceReached());
}

 void OCAppDef_BSplineCompute::Error(Standard_Real& tol3d, Standard_Real& tol2d)
{
  ((AppDef_BSplineCompute*)nativeHandle)->Error(tol3d, tol2d);
}

OCAppParCurves_MultiBSpCurve^ OCAppDef_BSplineCompute::Value()
{
  AppParCurves_MultiBSpCurve* tmp = new AppParCurves_MultiBSpCurve();
  *tmp = ((AppDef_BSplineCompute*)nativeHandle)->Value();
  return gcnew OCAppParCurves_MultiBSpCurve(tmp);
}

OCAppParCurves_MultiBSpCurve^ OCAppDef_BSplineCompute::ChangeValue()
{
  AppParCurves_MultiBSpCurve* tmp = new AppParCurves_MultiBSpCurve();
  *tmp = ((AppDef_BSplineCompute*)nativeHandle)->ChangeValue();
  return gcnew OCAppParCurves_MultiBSpCurve(tmp);
}

OCTColStd_Array1OfReal^ OCAppDef_BSplineCompute::Parameters()
{
  TColStd_Array1OfReal* tmp = new TColStd_Array1OfReal(0, 0);
  *tmp = ((AppDef_BSplineCompute*)nativeHandle)->Parameters();
  return gcnew OCTColStd_Array1OfReal(tmp);
}


