// File generated by CPPExt (Package)
//

#ifndef _Geom2dConvert_OCWrappers_HeaderFile
#define _Geom2dConvert_OCWrappers_HeaderFile

// Include the wrapped header
#include <Geom2dConvert.hxx>

#include "Geom2dConvert_BSplineCurveKnotSplitting.h"
#include "Geom2dConvert_BSplineCurveToBezierCurve.h"
#include "Geom2dConvert_CompCurveToBSplineCurve.h"
#include "Geom2dConvert_ApproxCurve.h"


namespace OCNaroWrappers
{

//!  This package provides an implementation of algorithmes to do <br>
//!  the conversion between equivalent geometric entities from <br>
//!  package Geom2d. <br>
//!  It gives the possibility : <br>
//!   . to obtain the B-spline representation of bounded curves. <br>
//!   . to split a B-spline curve into several B-spline curves <br>
//!     with some constraints of continuity, <br>
//!   . to convert a B-spline curve into several Bezier curves <br>
//!     or surfaces. <br>
//!  All the geometric entities used in this package are bounded. <br>
//!   References : <br>
//!  . Generating the Bezier Points of B-spline curves and surfaces <br>
//!    (Wolfgang Bohm) CAGD volume 13 number 6 november 1981 <br>
//!  . On NURBS: A Survey  (Leslie Piegl) IEEE Computer Graphics and <br>
//!    Application January 1991 <br>
//!  . Curve and surface construction using rational B-splines <br>
//!    (Leslie Piegl and Wayne Tiller) CAD Volume 19 number 9 november <br>
//!    1987 <br>
//!  . A survey of curve and surface methods in CAGD (Wolfgang BOHM) <br>
//!    CAGD 1 1984 <br>
public ref class OCGeom2dConvert abstract sealed
{

public:
// Methods

//!  Raised if FromK1 = ToK2 <br>
static /*instead*/  OCGeom2d_BSplineCurve^ SplitBSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ C, Standard_Integer FromK1, Standard_Integer ToK2, System::Boolean SameOrientation) ;


//!  Raised if FromU1 or ToU2 are out of the parametric bounds of the <br>
//!  curve (The tolerance criterion is ParametricTolerance). <br>
//!  Raised if Abs (FromU1 - ToU2) <= ParametricTolerance <br>
//!  Raised if ParametricTolerance < Resolution from gp. <br>
static /*instead*/  OCGeom2d_BSplineCurve^ SplitBSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ C, Standard_Real FromU1, Standard_Real ToU2, Standard_Real ParametricTolerance, System::Boolean SameOrientation) ;


static /*instead*/  OCGeom2d_BSplineCurve^ CurveToBSplineCurve(OCNaroWrappers::OCGeom2d_Curve^ C, OCConvert_ParameterisationType Parameterisation) ;

//! This Method concatenates G1 the ArrayOfCurves as far <br>
//!  as it is possible. <br>
//!  ArrayOfCurves[0..N-1] <br>
//!  ArrayOfToler contains the  biggest tolerance of the two <br>
//!               points shared by two consecutives curves. <br>
//!               Its dimension: [0..N-2] <br>
//!  ClosedTolerance     indicates if the ArrayOfCurves is closed. <br>
//!               In this case ClosedTolerance contains the biggest tolerance <br>
//!               of the two points which are at the closure. <br>
//!               Otherwise its value is 0.0 <br>
static /*instead*/  void ConcatG1(OCNaroWrappers::OCTColGeom2d_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedFlag, Standard_Real ClosedTolerance) ;

//! This Method concatenates C1 the ArrayOfCurves as far <br>
//!  as it is possible. <br>
//!  ArrayOfCurves[0..N-1] <br>
//!  ArrayOfToler contains the  biggest tolerance of the two <br>
//!               points shared by two consecutives curves. <br>
//!               Its dimension: [0..N-2] <br>
//!  ClosedTolerance     indicates if the ArrayOfCurves is closed. <br>
//!               In this case ClosedTolerance contains the biggest tolerance <br>
//!               of the two points which are at the closure. <br>
//!               Otherwise its value is 0.0 <br>
//! <br>
static /*instead*/  void ConcatC1(OCNaroWrappers::OCTColGeom2d_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColStd_HArray1OfInteger^ ArrayOfIndices, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedFlag, Standard_Real ClosedTolerance) ;

//! This Method concatenates C1 the ArrayOfCurves as far <br>
//!  as it is possible. <br>
//!  ArrayOfCurves[0..N-1] <br>
//!  ArrayOfToler contains the  biggest tolerance of the two <br>
//!               points shared by two consecutives curves. <br>
//!               Its dimension: [0..N-2] <br>
//!  ClosedTolerance     indicates if the ArrayOfCurves is closed. <br>
//!               In this case ClosedTolerance contains the biggest tolerance <br>
//!               of the two points which are at the closure. <br>
//!               Otherwise its value is 0.0 <br>
static /*instead*/  void ConcatC1(OCNaroWrappers::OCTColGeom2d_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColStd_HArray1OfInteger^ ArrayOfIndices, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedFlag, Standard_Real ClosedTolerance, Standard_Real AngularTolerance) ;

//!  This Method reduces as   far as it  is possible the <br>
//!  multiplicities of  the  knots of  the BSpline BS.(keeping  the geometry). <br>
//!  It returns a new BSpline which could still be C0. <br>
//!  tolerance is a geometrical tolerance <br>
static /*instead*/  void C0BSplineToC1BSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ BS, Standard_Real Tolerance) ;

//!This Method   reduces as far  as  it is possible  the <br>
//!  multiplicities  of  the knots  of the BSpline  BS.(keeping the geometry). <br>
//!  It returns an array of BSpline C1. <br>
//!  Tolerance is a geometrical tolerance <br>
static /*instead*/  void C0BSplineToArrayOfC1BSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ BS, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ tabBS, Standard_Real Tolerance) ;

//!This Method   reduces as far  as  it is possible  the <br>
//!  multiplicities  of  the knots  of the BSpline  BS.(keeping the geometry). <br>
//!  It returns an array of BSpline C1. <br>
//!  tolerance is a geometrical tolerance <br>
static /*instead*/  void C0BSplineToArrayOfC1BSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ BS, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ tabBS, Standard_Real AngularTolerance, Standard_Real Tolerance) ;


};

}; // OCNaroWrappers

#endif
