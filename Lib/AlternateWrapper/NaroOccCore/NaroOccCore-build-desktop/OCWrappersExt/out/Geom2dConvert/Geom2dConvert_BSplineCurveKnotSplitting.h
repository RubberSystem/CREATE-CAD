// File generated by CPPExt (MPV)
//
#ifndef _Geom2dConvert_BSplineCurveKnotSplitting_OCWrappers_HeaderFile
#define _Geom2dConvert_BSplineCurveKnotSplitting_OCWrappers_HeaderFile

// include native header
#include <Geom2dConvert_BSplineCurveKnotSplitting.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfInteger;
ref class OCGeom2d_BSplineCurve;
ref class OCTColStd_Array1OfInteger;


//! An algorithm to determine points at which a BSpline <br>
//!  curve should be split in order to obtain arcs of the same continuity. <br>
//! If you require curves with a minimum continuity for <br>
//! your computation, it is useful to know the points <br>
//! between which an arc has a continuity of a given <br>
//! order. For a BSpline curve, the discontinuities are <br>
//! localized at the knot values. Between two knot values <br>
//! the BSpline is infinitely and continuously <br>
//! differentiable. At a given knot, the continuity is equal <br>
//! to: Degree - Mult, where Degree is the <br>
//! degree of the BSpline curve and Mult is the multiplicity of the knot. <br>
//! It is possible to compute the arcs which correspond to <br>
//! this splitting using the global function <br>
//! SplitBSplineCurve provided by the package Geom2dConvert. <br>
//! A BSplineCurveKnotSplitting object provides a framework for: <br>
//! -   defining the curve to be analysed and the required degree of continuity, <br>
//! -   implementing the computation algorithm, and <br>
//! -   consulting the results. <br>
public ref class OCGeom2dConvert_BSplineCurveKnotSplitting  {

protected:
  Geom2dConvert_BSplineCurveKnotSplitting* nativeHandle;
  OCGeom2dConvert_BSplineCurveKnotSplitting(OCDummy^) {};

public:
  property Geom2dConvert_BSplineCurveKnotSplitting* Handle
  {
    Geom2dConvert_BSplineCurveKnotSplitting* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeom2dConvert_BSplineCurveKnotSplitting(Geom2dConvert_BSplineCurveKnotSplitting* nativeHandle);

// Methods PUBLIC

//! Determines points at which the BSpline curve <br>
//!  BasisCurve should be split in order to obtain arcs <br>
//!  with a degree of continuity equal to ContinuityRange. <br>
//! These points are knot values of BasisCurve. They <br>
//! are identified by indices in the knots table of BasisCurve. <br>
//! Use the available interrogation functions to access <br>
//! computed values, followed by the global function <br>
//! SplitBSplineCurve (provided by the package <br>
//! Geom2dConvert) to split the curve. <br>
//! Exceptions <br>
//! Standard_RangeError if ContinuityRange is less than zero. <br>
OCGeom2dConvert_BSplineCurveKnotSplitting(OCNaroWrappers::OCGeom2d_BSplineCurve^ BasisCurve, Standard_Integer ContinuityRange);

//!Returns the number of points at which the analysed <br>
//! BSpline curve should be split, in order to obtain arcs <br>
//! with the continuity required by this framework. <br>
//! All these points correspond to knot values. Note that <br>
//! the first and last points of the curve, which bound the <br>
//! first and last arcs, are counted among these splitting points. <br>
 /*instead*/  Standard_Integer NbSplits() ;

//! Loads the SplitValues table with the split knots <br>
//! values computed in this framework. Each value in the <br>
//! table is an index in the knots table of the BSpline <br>
//! curve analysed by this algorithm. <br>
//! The values in SplitValues are given in ascending <br>
//! order and comprise the indices of the knots which <br>
//! give the first and last points of the curve. Use two <br>
//! consecutive values from the table as arguments of the <br>
//! global function SplitBSplineCurve (provided by the <br>
//! package Geom2dConvert) to split the curve. <br>
//! Exceptions <br>
//! Standard_DimensionError if the array SplitValues <br>
//! was not created with the following bounds: <br>
//! -   1, and <br>
//! -   the number of split points computed in this <br>
//!   framework (as given by the function NbSplits). <br>
 /*instead*/  void Splitting(OCNaroWrappers::OCTColStd_Array1OfInteger^ SplitValues) ;

//!Returns the split knot of index Index to the split knots <br>
//! table computed in this framework. The returned value <br>
//! is an index in the knots table of the BSpline curve <br>
//! analysed by this algorithm. <br>
//! Notes: <br>
//! -   If Index is equal to 1, the corresponding knot <br>
//!   gives the first point of the curve. <br>
//! -   If Index is equal to the number of split knots <br>
//!   computed in this framework, the corresponding <br>
//!   point is the last point of the curve. <br>
//! Exceptions <br>
//! Standard_RangeError if Index is less than 1 or <br>
//! greater than the number of split knots computed in this framework. <br>
 /*instead*/  Standard_Integer SplitValue(Standard_Integer Index) ;

~OCGeom2dConvert_BSplineCurveKnotSplitting()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
