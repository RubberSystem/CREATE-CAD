// File generated by CPPExt (CPP file)
//

#include "Geom2dConvert.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



OCGeom2d_BSplineCurve^ OCGeom2dConvert::SplitBSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ C, Standard_Integer FromK1, Standard_Integer ToK2, System::Boolean SameOrientation)
{
  Handle(Geom2d_BSplineCurve) tmp = Geom2dConvert::SplitBSplineCurve(*((Handle_Geom2d_BSplineCurve*)C->Handle), FromK1, ToK2, OCConverter::BooleanToStandardBoolean(SameOrientation));
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}

OCGeom2d_BSplineCurve^ OCGeom2dConvert::SplitBSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ C, Standard_Real FromU1, Standard_Real ToU2, Standard_Real ParametricTolerance, System::Boolean SameOrientation)
{
  Handle(Geom2d_BSplineCurve) tmp = Geom2dConvert::SplitBSplineCurve(*((Handle_Geom2d_BSplineCurve*)C->Handle), FromU1, ToU2, ParametricTolerance, OCConverter::BooleanToStandardBoolean(SameOrientation));
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}

OCGeom2d_BSplineCurve^ OCGeom2dConvert::CurveToBSplineCurve(OCNaroWrappers::OCGeom2d_Curve^ C, OCConvert_ParameterisationType Parameterisation)
{
  Handle(Geom2d_BSplineCurve) tmp = Geom2dConvert::CurveToBSplineCurve(*((Handle_Geom2d_Curve*)C->Handle), (Convert_ParameterisationType)Parameterisation);
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}

 void OCGeom2dConvert::ConcatG1(OCNaroWrappers::OCTColGeom2d_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedFlag, Standard_Real ClosedTolerance)
{
  Geom2dConvert::ConcatG1(*((TColGeom2d_Array1OfBSplineCurve*)ArrayOfCurves->Handle), *((TColStd_Array1OfReal*)ArrayOfToler->Handle), *((Handle_TColGeom2d_HArray1OfBSplineCurve*)ArrayOfConcatenated->Handle), OCConverter::BooleanToStandardBoolean(ClosedFlag), ClosedTolerance);
}

 void OCGeom2dConvert::ConcatC1(OCNaroWrappers::OCTColGeom2d_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColStd_HArray1OfInteger^ ArrayOfIndices, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedFlag, Standard_Real ClosedTolerance)
{
  Geom2dConvert::ConcatC1(*((TColGeom2d_Array1OfBSplineCurve*)ArrayOfCurves->Handle), *((TColStd_Array1OfReal*)ArrayOfToler->Handle), *((Handle_TColStd_HArray1OfInteger*)ArrayOfIndices->Handle), *((Handle_TColGeom2d_HArray1OfBSplineCurve*)ArrayOfConcatenated->Handle), OCConverter::BooleanToStandardBoolean(ClosedFlag), ClosedTolerance);
}

 void OCGeom2dConvert::ConcatC1(OCNaroWrappers::OCTColGeom2d_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColStd_HArray1OfInteger^ ArrayOfIndices, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedFlag, Standard_Real ClosedTolerance, Standard_Real AngularTolerance)
{
  Geom2dConvert::ConcatC1(*((TColGeom2d_Array1OfBSplineCurve*)ArrayOfCurves->Handle), *((TColStd_Array1OfReal*)ArrayOfToler->Handle), *((Handle_TColStd_HArray1OfInteger*)ArrayOfIndices->Handle), *((Handle_TColGeom2d_HArray1OfBSplineCurve*)ArrayOfConcatenated->Handle), OCConverter::BooleanToStandardBoolean(ClosedFlag), ClosedTolerance, AngularTolerance);
}

 void OCGeom2dConvert::C0BSplineToC1BSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ BS, Standard_Real Tolerance)
{
  Geom2dConvert::C0BSplineToC1BSplineCurve(*((Handle_Geom2d_BSplineCurve*)BS->Handle), Tolerance);
}

 void OCGeom2dConvert::C0BSplineToArrayOfC1BSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ BS, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ tabBS, Standard_Real Tolerance)
{
  Geom2dConvert::C0BSplineToArrayOfC1BSplineCurve(*((Handle_Geom2d_BSplineCurve*)BS->Handle), *((Handle_TColGeom2d_HArray1OfBSplineCurve*)tabBS->Handle), Tolerance);
}

 void OCGeom2dConvert::C0BSplineToArrayOfC1BSplineCurve(OCNaroWrappers::OCGeom2d_BSplineCurve^ BS, OCNaroWrappers::OCTColGeom2d_HArray1OfBSplineCurve^ tabBS, Standard_Real AngularTolerance, Standard_Real Tolerance)
{
  Geom2dConvert::C0BSplineToArrayOfC1BSplineCurve(*((Handle_Geom2d_BSplineCurve*)BS->Handle), *((Handle_TColGeom2d_HArray1OfBSplineCurve*)tabBS->Handle), AngularTolerance, Tolerance);
}


