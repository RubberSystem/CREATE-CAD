// File generated by CPPExt (Transient)
//
#ifndef _Adaptor3d_TopolTool_OCWrappers_HeaderFile
#define _Adaptor3d_TopolTool_OCWrappers_HeaderFile

// include the wrapped class
#include <Adaptor3d_TopolTool.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TopAbs/TopAbs_State.h"
#include "../TopAbs/TopAbs_Orientation.h"


namespace OCNaroWrappers
{

ref class OCAdaptor2d_HLine2d;
ref class OCAdaptor3d_HVertex;
ref class OCAdaptor3d_HSurface;
ref class OCTColStd_HArray1OfReal;
ref class OCAdaptor2d_HCurve2d;
ref class OCgp_Pnt2d;
ref class OCgp_Pnt;
ref class OCTColStd_Array1OfReal;


//! This class provides a default topological tool, <br>
//!          based on the Umin,Vmin,Umax,Vmax of an HSurface <br>
//!          from Adaptor3d. <br>
//!          All methods and fields may be redefined when <br>
//!          inheriting from this class. <br>
//!          This class is used to instantiate algorithmes <br>
//!          as Intersection, outlines,... <br>
public ref class OCAdaptor3d_TopolTool : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCAdaptor3d_TopolTool(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCAdaptor3d_TopolTool(Handle(Adaptor3d_TopolTool)* nativeHandle);

// Methods PUBLIC


OCAdaptor3d_TopolTool();


OCAdaptor3d_TopolTool(OCNaroWrappers::OCAdaptor3d_HSurface^ Surface);


virtual /*instead*/  void Initialize() override;


virtual /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


virtual /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_HCurve2d^ Curve) ;


virtual /*instead*/  void Init() ;


virtual /*instead*/  System::Boolean More() ;


virtual /*instead*/  OCAdaptor2d_HCurve2d^ Value() ;


virtual /*instead*/  void Next() ;


virtual /*instead*/  void InitVertexIterator() ;


virtual /*instead*/  System::Boolean MoreVertex() ;


virtual /*instead*/  OCAdaptor3d_HVertex^ Vertex() ;


virtual /*instead*/  void NextVertex() ;


virtual /*instead*/  OCTopAbs_State Classify(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Tol, System::Boolean ReacdreOnPeriodic) ;


virtual /*instead*/  System::Boolean IsThePointOn(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Tol, System::Boolean ReacdreOnPeriodic) ;

//! If the function returns the orientation of the arc. <br>
//!          If the orientation is FORWARD or REVERSED, the arc is <br>
//!          a "real" limit of the surface. <br>
//!          If the orientation is INTERNAL or EXTERNAL, the arc is <br>
//!          considered as an arc on the surface. <br>
virtual /*instead*/  OCTopAbs_Orientation Orientation(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;

//! Returns the orientation of the vertex V. <br>
//!          The vertex has been found with an exploration on <br>
//!          a given arc. The orientation is the orientation <br>
//!          of the vertex on this arc. <br>
virtual /*instead*/  OCTopAbs_Orientation Orientation(OCNaroWrappers::OCAdaptor3d_HVertex^ V) ;

//! Returns True if the vertices V1 and V2 are identical. <br>
//!          This method does not take the orientation of the <br>
//!          vertices in account. <br>
virtual /*instead*/  System::Boolean Identical(OCNaroWrappers::OCAdaptor3d_HVertex^ V1, OCNaroWrappers::OCAdaptor3d_HVertex^ V2) ;

//! answers if arcs and vertices may have 3d representations, <br>
//!          so that we could use Tol3d and Pnt methods. <br>
virtual /*instead*/  System::Boolean Has3d() ;

//! returns 3d tolerance of the arc C <br>
virtual /*instead*/  Standard_Real Tol3d(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;

//! returns 3d tolerance of the vertex V <br>
virtual /*instead*/  Standard_Real Tol3d(OCNaroWrappers::OCAdaptor3d_HVertex^ V) ;

//! returns 3d point of the vertex V <br>
virtual /*instead*/  OCgp_Pnt^ Pnt(OCNaroWrappers::OCAdaptor3d_HVertex^ V) ;


virtual /*instead*/  void ComputeSamplePoints() ;

//! compute the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamplesU() ;

//! compute the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamplesV() ;

//! compute the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamples() ;

//! return the set of U parameters on the surface <br>
//!  obtained by the method SamplePnts <br>
 /*instead*/  void UParameters(OCNaroWrappers::OCTColStd_Array1OfReal^ theArray) ;

//! return the set of V parameters on the surface <br>
//!  obtained by the method SamplePnts <br>
 /*instead*/  void VParameters(OCNaroWrappers::OCTColStd_Array1OfReal^ theArray) ;


virtual /*instead*/  void SamplePoint(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt2d^ P2d, OCNaroWrappers::OCgp_Pnt^ P3d) ;


virtual /*instead*/  System::Boolean DomainIsInfinite() ;


virtual /*instead*/  Standard_Address Edge() ;

//! compute the sample-points for the intersections algorithms <br>
//! by adaptive algorithm for BSpline surfaces. For other surfaces algorithm <br>
//! is the same as in method ComputeSamplePoints(), but only fill arrays of U <br>
//! and V sample parameters; <br>
//! theDefl is a requred deflection <br>
//! theNUmin, theNVmin are minimal nb points for U and V. <br>
virtual /*instead*/  void SamplePnts(Standard_Real theDefl, Standard_Integer theNUmin, Standard_Integer theNVmin) ;

//! compute the sample-points for the intersections algorithms <br>
//! by adaptive algorithm for BSpline surfaces  -  is  used  in  SamplePnts <br>
//! theDefl is a requred deflection <br>
//! theNUmin, theNVmin are minimal nb points for U and V. <br>
virtual /*instead*/  void BSplSamplePnts(Standard_Real theDefl, Standard_Integer theNUmin, Standard_Integer theNVmin) ;

//! Returns true if provide uniform sampling of points. <br>
virtual /*instead*/  System::Boolean IsUniformSampling() ;

~OCAdaptor3d_TopolTool()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
