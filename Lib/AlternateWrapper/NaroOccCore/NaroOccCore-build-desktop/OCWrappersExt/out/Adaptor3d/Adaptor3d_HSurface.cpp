// File generated by CPPExt (CPP file)
//

#include "Adaptor3d_HSurface.h"
#include "../Converter.h"
#include "Adaptor3d_Surface.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../Geom/Geom_BezierSurface.h"
#include "../Geom/Geom_BSplineSurface.h"
#include "Adaptor3d_HCurve.h"


using namespace OCNaroWrappers;

OCAdaptor3d_HSurface::OCAdaptor3d_HSurface(Handle(Adaptor3d_HSurface)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Adaptor3d_HSurface(*nativeHandle);
}

 Standard_Real OCAdaptor3d_HSurface::FirstUParameter()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->FirstUParameter();
}

 Standard_Real OCAdaptor3d_HSurface::LastUParameter()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->LastUParameter();
}

 Standard_Real OCAdaptor3d_HSurface::FirstVParameter()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->FirstVParameter();
}

 Standard_Real OCAdaptor3d_HSurface::LastVParameter()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->LastVParameter();
}

 OCGeomAbs_Shape OCAdaptor3d_HSurface::UContinuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Adaptor3d_HSurface*)nativeHandle))->UContinuity());
}

 OCGeomAbs_Shape OCAdaptor3d_HSurface::VContinuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Adaptor3d_HSurface*)nativeHandle))->VContinuity());
}

 Standard_Integer OCAdaptor3d_HSurface::NbUIntervals(OCGeomAbs_Shape S)
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->NbUIntervals((GeomAbs_Shape)S);
}

 Standard_Integer OCAdaptor3d_HSurface::NbVIntervals(OCGeomAbs_Shape S)
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->NbVIntervals((GeomAbs_Shape)S);
}

 void OCAdaptor3d_HSurface::UIntervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  (*((Handle_Adaptor3d_HSurface*)nativeHandle))->UIntervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 void OCAdaptor3d_HSurface::VIntervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  (*((Handle_Adaptor3d_HSurface*)nativeHandle))->VIntervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor3d_HSurface^ OCAdaptor3d_HSurface::UTrim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HSurface) tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->UTrim(First, Last, Tol);
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

OCAdaptor3d_HSurface^ OCAdaptor3d_HSurface::VTrim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HSurface) tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->VTrim(First, Last, Tol);
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

 System::Boolean OCAdaptor3d_HSurface::IsUClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HSurface*)nativeHandle))->IsUClosed());
}

 System::Boolean OCAdaptor3d_HSurface::IsVClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HSurface*)nativeHandle))->IsVClosed());
}

 System::Boolean OCAdaptor3d_HSurface::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HSurface*)nativeHandle))->IsUPeriodic());
}

 Standard_Real OCAdaptor3d_HSurface::UPeriod()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->UPeriod();
}

 System::Boolean OCAdaptor3d_HSurface::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HSurface*)nativeHandle))->IsVPeriodic());
}

 Standard_Real OCAdaptor3d_HSurface::VPeriod()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->VPeriod();
}

OCgp_Pnt^ OCAdaptor3d_HSurface::Value(Standard_Real U, Standard_Real V)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->Value(U, V);
  return gcnew OCgp_Pnt(tmp);
}

 void OCAdaptor3d_HSurface::D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Adaptor3d_HSurface*)nativeHandle))->D0(U, V, *((gp_Pnt*)P->Handle));
}

 void OCAdaptor3d_HSurface::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Adaptor3d_HSurface*)nativeHandle))->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCAdaptor3d_HSurface::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Adaptor3d_HSurface*)nativeHandle))->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCAdaptor3d_HSurface::D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Adaptor3d_HSurface*)nativeHandle))->D3(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCAdaptor3d_HSurface::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCAdaptor3d_HSurface::UResolution(Standard_Real R3d)
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->UResolution(R3d);
}

 Standard_Real OCAdaptor3d_HSurface::VResolution(Standard_Real R3d)
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->VResolution(R3d);
}

 OCGeomAbs_SurfaceType OCAdaptor3d_HSurface::GetType()
{
  return (OCGeomAbs_SurfaceType)((*((Handle_Adaptor3d_HSurface*)nativeHandle))->GetType());
}

OCgp_Pln^ OCAdaptor3d_HSurface::Plane()
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->Plane();
  return gcnew OCgp_Pln(tmp);
}

OCgp_Cylinder^ OCAdaptor3d_HSurface::Cylinder()
{
  gp_Cylinder* tmp = new gp_Cylinder();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->Cylinder();
  return gcnew OCgp_Cylinder(tmp);
}

OCgp_Cone^ OCAdaptor3d_HSurface::Cone()
{
  gp_Cone* tmp = new gp_Cone();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->Cone();
  return gcnew OCgp_Cone(tmp);
}

OCgp_Sphere^ OCAdaptor3d_HSurface::Sphere()
{
  gp_Sphere* tmp = new gp_Sphere();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->Sphere();
  return gcnew OCgp_Sphere(tmp);
}

OCgp_Torus^ OCAdaptor3d_HSurface::Torus()
{
  gp_Torus* tmp = new gp_Torus();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->Torus();
  return gcnew OCgp_Torus(tmp);
}

 Standard_Integer OCAdaptor3d_HSurface::UDegree()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->UDegree();
}

 Standard_Integer OCAdaptor3d_HSurface::NbUPoles()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->NbUPoles();
}

 Standard_Integer OCAdaptor3d_HSurface::VDegree()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->VDegree();
}

 Standard_Integer OCAdaptor3d_HSurface::NbVPoles()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->NbVPoles();
}

 Standard_Integer OCAdaptor3d_HSurface::NbUKnots()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->NbUKnots();
}

 Standard_Integer OCAdaptor3d_HSurface::NbVKnots()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->NbVKnots();
}

 System::Boolean OCAdaptor3d_HSurface::IsURational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HSurface*)nativeHandle))->IsURational());
}

 System::Boolean OCAdaptor3d_HSurface::IsVRational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HSurface*)nativeHandle))->IsVRational());
}

OCGeom_BezierSurface^ OCAdaptor3d_HSurface::Bezier()
{
  Handle(Geom_BezierSurface) tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->Bezier();
  return gcnew OCGeom_BezierSurface(&tmp);
}

OCGeom_BSplineSurface^ OCAdaptor3d_HSurface::BSpline()
{
  Handle(Geom_BSplineSurface) tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->BSpline();
  return gcnew OCGeom_BSplineSurface(&tmp);
}

OCgp_Ax1^ OCAdaptor3d_HSurface::AxeOfRevolution()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->AxeOfRevolution();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Dir^ OCAdaptor3d_HSurface::Direction()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->Direction();
  return gcnew OCgp_Dir(tmp);
}

OCAdaptor3d_HCurve^ OCAdaptor3d_HSurface::BasisCurve()
{
  Handle(Adaptor3d_HCurve) tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->BasisCurve();
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

OCAdaptor3d_HSurface^ OCAdaptor3d_HSurface::BasisSurface()
{
  Handle(Adaptor3d_HSurface) tmp = (*((Handle_Adaptor3d_HSurface*)nativeHandle))->BasisSurface();
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

 Standard_Real OCAdaptor3d_HSurface::OffsetValue()
{
  return (*((Handle_Adaptor3d_HSurface*)nativeHandle))->OffsetValue();
}


