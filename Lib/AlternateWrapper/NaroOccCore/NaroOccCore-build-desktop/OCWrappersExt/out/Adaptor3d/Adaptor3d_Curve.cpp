// File generated by CPPExt (CPP file)
//

#include "Adaptor3d_Curve.h"
#include "../Converter.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "Adaptor3d_HCurve.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Hypr.h"
#include "../gp/gp_Parab.h"
#include "../Geom/Geom_BezierCurve.h"
#include "../Geom/Geom_BSplineCurve.h"


using namespace OCNaroWrappers;

OCAdaptor3d_Curve::OCAdaptor3d_Curve(Adaptor3d_Curve* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 void OCAdaptor3d_Curve::Delete()
{
  ((Adaptor3d_Curve*)nativeHandle)->Delete();
}

 Standard_Real OCAdaptor3d_Curve::FirstParameter()
{
  return ((Adaptor3d_Curve*)nativeHandle)->FirstParameter();
}

 Standard_Real OCAdaptor3d_Curve::LastParameter()
{
  return ((Adaptor3d_Curve*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCAdaptor3d_Curve::Continuity()
{
  return (OCGeomAbs_Shape)(((Adaptor3d_Curve*)nativeHandle)->Continuity());
}

 Standard_Integer OCAdaptor3d_Curve::NbIntervals(OCGeomAbs_Shape S)
{
  return ((Adaptor3d_Curve*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCAdaptor3d_Curve::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((Adaptor3d_Curve*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor3d_HCurve^ OCAdaptor3d_Curve::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HCurve) tmp = ((Adaptor3d_Curve*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 System::Boolean OCAdaptor3d_Curve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_Curve*)nativeHandle)->IsClosed());
}

 System::Boolean OCAdaptor3d_Curve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_Curve*)nativeHandle)->IsPeriodic());
}

 Standard_Real OCAdaptor3d_Curve::Period()
{
  return ((Adaptor3d_Curve*)nativeHandle)->Period();
}

OCgp_Pnt^ OCAdaptor3d_Curve::Value(Standard_Real U)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Adaptor3d_Curve*)nativeHandle)->Value(U);
  return gcnew OCgp_Pnt(tmp);
}

 void OCAdaptor3d_Curve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  ((Adaptor3d_Curve*)nativeHandle)->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCAdaptor3d_Curve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V)
{
  ((Adaptor3d_Curve*)nativeHandle)->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V->Handle));
}

 void OCAdaptor3d_Curve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  ((Adaptor3d_Curve*)nativeHandle)->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCAdaptor3d_Curve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  ((Adaptor3d_Curve*)nativeHandle)->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCAdaptor3d_Curve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((Adaptor3d_Curve*)nativeHandle)->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCAdaptor3d_Curve::Resolution(Standard_Real R3d)
{
  return ((Adaptor3d_Curve*)nativeHandle)->Resolution(R3d);
}

 OCGeomAbs_CurveType OCAdaptor3d_Curve::GetType()
{
  return (OCGeomAbs_CurveType)(((Adaptor3d_Curve*)nativeHandle)->GetType());
}

OCgp_Lin^ OCAdaptor3d_Curve::Line()
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = ((Adaptor3d_Curve*)nativeHandle)->Line();
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCAdaptor3d_Curve::Circle()
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((Adaptor3d_Curve*)nativeHandle)->Circle();
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCAdaptor3d_Curve::Ellipse()
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((Adaptor3d_Curve*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips(tmp);
}

OCgp_Hypr^ OCAdaptor3d_Curve::Hyperbola()
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = ((Adaptor3d_Curve*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr(tmp);
}

OCgp_Parab^ OCAdaptor3d_Curve::Parabola()
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((Adaptor3d_Curve*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab(tmp);
}

 Standard_Integer OCAdaptor3d_Curve::Degree()
{
  return ((Adaptor3d_Curve*)nativeHandle)->Degree();
}

 System::Boolean OCAdaptor3d_Curve::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_Curve*)nativeHandle)->IsRational());
}

 Standard_Integer OCAdaptor3d_Curve::NbPoles()
{
  return ((Adaptor3d_Curve*)nativeHandle)->NbPoles();
}

 Standard_Integer OCAdaptor3d_Curve::NbKnots()
{
  return ((Adaptor3d_Curve*)nativeHandle)->NbKnots();
}

OCGeom_BezierCurve^ OCAdaptor3d_Curve::Bezier()
{
  Handle(Geom_BezierCurve) tmp = ((Adaptor3d_Curve*)nativeHandle)->Bezier();
  return gcnew OCGeom_BezierCurve(&tmp);
}

OCGeom_BSplineCurve^ OCAdaptor3d_Curve::BSpline()
{
  Handle(Geom_BSplineCurve) tmp = ((Adaptor3d_Curve*)nativeHandle)->BSpline();
  return gcnew OCGeom_BSplineCurve(&tmp);
}


