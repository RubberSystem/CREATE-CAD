// File generated by CPPExt (CPP file)
//

#include "Adaptor3d_OffsetCurve.h"
#include "../Converter.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"
#include "../Geom2d/Geom2d_BezierCurve.h"
#include "../Geom2d/Geom2d_BSplineCurve.h"


using namespace OCNaroWrappers;

OCAdaptor3d_OffsetCurve::OCAdaptor3d_OffsetCurve(Adaptor3d_OffsetCurve* nativeHandle) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCAdaptor3d_OffsetCurve::OCAdaptor3d_OffsetCurve() : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor3d_OffsetCurve();
}

OCAdaptor3d_OffsetCurve::OCAdaptor3d_OffsetCurve(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor3d_OffsetCurve(*((Handle_Adaptor2d_HCurve2d*)C->Handle));
}

OCAdaptor3d_OffsetCurve::OCAdaptor3d_OffsetCurve(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real Offset) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor3d_OffsetCurve(*((Handle_Adaptor2d_HCurve2d*)C->Handle), Offset);
}

OCAdaptor3d_OffsetCurve::OCAdaptor3d_OffsetCurve(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real Offset, Standard_Real WFirst, Standard_Real WLast) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor3d_OffsetCurve(*((Handle_Adaptor2d_HCurve2d*)C->Handle), Offset, WFirst, WLast);
}

 void OCAdaptor3d_OffsetCurve::Load(OCNaroWrappers::OCAdaptor2d_HCurve2d^ S)
{
  ((Adaptor3d_OffsetCurve*)nativeHandle)->Load(*((Handle_Adaptor2d_HCurve2d*)S->Handle));
}

 void OCAdaptor3d_OffsetCurve::Load(Standard_Real Offset)
{
  ((Adaptor3d_OffsetCurve*)nativeHandle)->Load(Offset);
}

 void OCAdaptor3d_OffsetCurve::Load(Standard_Real Offset, Standard_Real WFirst, Standard_Real WLast)
{
  ((Adaptor3d_OffsetCurve*)nativeHandle)->Load(Offset, WFirst, WLast);
}

OCAdaptor2d_HCurve2d^ OCAdaptor3d_OffsetCurve::Curve()
{
  Handle(Adaptor2d_HCurve2d) tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Curve();
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

 Standard_Real OCAdaptor3d_OffsetCurve::Offset()
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->Offset();
}

 Standard_Real OCAdaptor3d_OffsetCurve::FirstParameter()
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->FirstParameter();
}

 Standard_Real OCAdaptor3d_OffsetCurve::LastParameter()
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCAdaptor3d_OffsetCurve::Continuity()
{
  return (OCGeomAbs_Shape)(((Adaptor3d_OffsetCurve*)nativeHandle)->Continuity());
}

 Standard_Integer OCAdaptor3d_OffsetCurve::NbIntervals(OCGeomAbs_Shape S)
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCAdaptor3d_OffsetCurve::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((Adaptor3d_OffsetCurve*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor2d_HCurve2d^ OCAdaptor3d_OffsetCurve::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor2d_HCurve2d) tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

 System::Boolean OCAdaptor3d_OffsetCurve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_OffsetCurve*)nativeHandle)->IsClosed());
}

 System::Boolean OCAdaptor3d_OffsetCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_OffsetCurve*)nativeHandle)->IsPeriodic());
}

 Standard_Real OCAdaptor3d_OffsetCurve::Period()
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->Period();
}

OCgp_Pnt2d^ OCAdaptor3d_OffsetCurve::Value(Standard_Real U)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Value(U);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCAdaptor3d_OffsetCurve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((Adaptor3d_OffsetCurve*)nativeHandle)->D0(U, *((gp_Pnt2d*)P->Handle));
}

 void OCAdaptor3d_OffsetCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((Adaptor3d_OffsetCurve*)nativeHandle)->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V->Handle));
}

 void OCAdaptor3d_OffsetCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  ((Adaptor3d_OffsetCurve*)nativeHandle)->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCAdaptor3d_OffsetCurve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  ((Adaptor3d_OffsetCurve*)nativeHandle)->D3(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCAdaptor3d_OffsetCurve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 Standard_Real OCAdaptor3d_OffsetCurve::Resolution(Standard_Real R3d)
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->Resolution(R3d);
}

 OCGeomAbs_CurveType OCAdaptor3d_OffsetCurve::GetType()
{
  return (OCGeomAbs_CurveType)(((Adaptor3d_OffsetCurve*)nativeHandle)->GetType());
}

OCgp_Lin2d^ OCAdaptor3d_OffsetCurve::Line()
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Line();
  return gcnew OCgp_Lin2d(tmp);
}

OCgp_Circ2d^ OCAdaptor3d_OffsetCurve::Circle()
{
  gp_Circ2d* tmp = new gp_Circ2d();
  *tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Circle();
  return gcnew OCgp_Circ2d(tmp);
}

OCgp_Elips2d^ OCAdaptor3d_OffsetCurve::Ellipse()
{
  gp_Elips2d* tmp = new gp_Elips2d();
  *tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips2d(tmp);
}

OCgp_Hypr2d^ OCAdaptor3d_OffsetCurve::Hyperbola()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr2d(tmp);
}

OCgp_Parab2d^ OCAdaptor3d_OffsetCurve::Parabola()
{
  gp_Parab2d* tmp = new gp_Parab2d();
  *tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab2d(tmp);
}

 Standard_Integer OCAdaptor3d_OffsetCurve::Degree()
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->Degree();
}

 System::Boolean OCAdaptor3d_OffsetCurve::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_OffsetCurve*)nativeHandle)->IsRational());
}

 Standard_Integer OCAdaptor3d_OffsetCurve::NbPoles()
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->NbPoles();
}

 Standard_Integer OCAdaptor3d_OffsetCurve::NbKnots()
{
  return ((Adaptor3d_OffsetCurve*)nativeHandle)->NbKnots();
}

OCGeom2d_BezierCurve^ OCAdaptor3d_OffsetCurve::Bezier()
{
  Handle(Geom2d_BezierCurve) tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->Bezier();
  return gcnew OCGeom2d_BezierCurve(&tmp);
}

OCGeom2d_BSplineCurve^ OCAdaptor3d_OffsetCurve::BSpline()
{
  Handle(Geom2d_BSplineCurve) tmp = ((Adaptor3d_OffsetCurve*)nativeHandle)->BSpline();
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}


