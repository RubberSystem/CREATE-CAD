// File generated by CPPExt (CPP file)
//

#include "Adaptor3d_CurveOnSurface.h"
#include "../Converter.h"
#include "Adaptor3d_HSurface.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "Adaptor3d_HCurve.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Hypr.h"
#include "../gp/gp_Parab.h"
#include "../Geom/Geom_BezierCurve.h"
#include "../Geom/Geom_BSplineCurve.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"


using namespace OCNaroWrappers;

OCAdaptor3d_CurveOnSurface::OCAdaptor3d_CurveOnSurface(Adaptor3d_CurveOnSurface* nativeHandle) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCAdaptor3d_CurveOnSurface::OCAdaptor3d_CurveOnSurface() : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor3d_CurveOnSurface();
}

OCAdaptor3d_CurveOnSurface::OCAdaptor3d_CurveOnSurface(OCNaroWrappers::OCAdaptor3d_HSurface^ S) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor3d_CurveOnSurface(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

OCAdaptor3d_CurveOnSurface::OCAdaptor3d_CurveOnSurface(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, OCNaroWrappers::OCAdaptor3d_HSurface^ S) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor3d_CurveOnSurface(*((Handle_Adaptor2d_HCurve2d*)C->Handle), *((Handle_Adaptor3d_HSurface*)S->Handle));
}

 void OCAdaptor3d_CurveOnSurface::Load(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  ((Adaptor3d_CurveOnSurface*)nativeHandle)->Load(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 void OCAdaptor3d_CurveOnSurface::Load(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C)
{
  ((Adaptor3d_CurveOnSurface*)nativeHandle)->Load(*((Handle_Adaptor2d_HCurve2d*)C->Handle));
}

OCAdaptor2d_HCurve2d^ OCAdaptor3d_CurveOnSurface::GetCurve()
{
  Handle(Adaptor2d_HCurve2d) tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->GetCurve();
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

OCAdaptor3d_HSurface^ OCAdaptor3d_CurveOnSurface::GetSurface()
{
  Handle(Adaptor3d_HSurface) tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->GetSurface();
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

OCAdaptor2d_HCurve2d^ OCAdaptor3d_CurveOnSurface::ChangeCurve()
{
  Handle(Adaptor2d_HCurve2d) tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->ChangeCurve();
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

OCAdaptor3d_HSurface^ OCAdaptor3d_CurveOnSurface::ChangeSurface()
{
  Handle(Adaptor3d_HSurface) tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->ChangeSurface();
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

 Standard_Real OCAdaptor3d_CurveOnSurface::FirstParameter()
{
  return ((Adaptor3d_CurveOnSurface*)nativeHandle)->FirstParameter();
}

 Standard_Real OCAdaptor3d_CurveOnSurface::LastParameter()
{
  return ((Adaptor3d_CurveOnSurface*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCAdaptor3d_CurveOnSurface::Continuity()
{
  return (OCGeomAbs_Shape)(((Adaptor3d_CurveOnSurface*)nativeHandle)->Continuity());
}

 Standard_Integer OCAdaptor3d_CurveOnSurface::NbIntervals(OCGeomAbs_Shape S)
{
  return ((Adaptor3d_CurveOnSurface*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCAdaptor3d_CurveOnSurface::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((Adaptor3d_CurveOnSurface*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor3d_HCurve^ OCAdaptor3d_CurveOnSurface::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HCurve) tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 System::Boolean OCAdaptor3d_CurveOnSurface::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_CurveOnSurface*)nativeHandle)->IsClosed());
}

 System::Boolean OCAdaptor3d_CurveOnSurface::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_CurveOnSurface*)nativeHandle)->IsPeriodic());
}

 Standard_Real OCAdaptor3d_CurveOnSurface::Period()
{
  return ((Adaptor3d_CurveOnSurface*)nativeHandle)->Period();
}

OCgp_Pnt^ OCAdaptor3d_CurveOnSurface::Value(Standard_Real U)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->Value(U);
  return gcnew OCgp_Pnt(tmp);
}

 void OCAdaptor3d_CurveOnSurface::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  ((Adaptor3d_CurveOnSurface*)nativeHandle)->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCAdaptor3d_CurveOnSurface::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V)
{
  ((Adaptor3d_CurveOnSurface*)nativeHandle)->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V->Handle));
}

 void OCAdaptor3d_CurveOnSurface::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  ((Adaptor3d_CurveOnSurface*)nativeHandle)->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCAdaptor3d_CurveOnSurface::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  ((Adaptor3d_CurveOnSurface*)nativeHandle)->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCAdaptor3d_CurveOnSurface::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCAdaptor3d_CurveOnSurface::Resolution(Standard_Real R3d)
{
  return ((Adaptor3d_CurveOnSurface*)nativeHandle)->Resolution(R3d);
}

 OCGeomAbs_CurveType OCAdaptor3d_CurveOnSurface::GetType()
{
  return (OCGeomAbs_CurveType)(((Adaptor3d_CurveOnSurface*)nativeHandle)->GetType());
}

OCgp_Lin^ OCAdaptor3d_CurveOnSurface::Line()
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->Line();
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCAdaptor3d_CurveOnSurface::Circle()
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->Circle();
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCAdaptor3d_CurveOnSurface::Ellipse()
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips(tmp);
}

OCgp_Hypr^ OCAdaptor3d_CurveOnSurface::Hyperbola()
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr(tmp);
}

OCgp_Parab^ OCAdaptor3d_CurveOnSurface::Parabola()
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab(tmp);
}

 Standard_Integer OCAdaptor3d_CurveOnSurface::Degree()
{
  return ((Adaptor3d_CurveOnSurface*)nativeHandle)->Degree();
}

 System::Boolean OCAdaptor3d_CurveOnSurface::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor3d_CurveOnSurface*)nativeHandle)->IsRational());
}

 Standard_Integer OCAdaptor3d_CurveOnSurface::NbPoles()
{
  return ((Adaptor3d_CurveOnSurface*)nativeHandle)->NbPoles();
}

 Standard_Integer OCAdaptor3d_CurveOnSurface::NbKnots()
{
  return ((Adaptor3d_CurveOnSurface*)nativeHandle)->NbKnots();
}

OCGeom_BezierCurve^ OCAdaptor3d_CurveOnSurface::Bezier()
{
  Handle(Geom_BezierCurve) tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->Bezier();
  return gcnew OCGeom_BezierCurve(&tmp);
}

OCGeom_BSplineCurve^ OCAdaptor3d_CurveOnSurface::BSpline()
{
  Handle(Geom_BSplineCurve) tmp = ((Adaptor3d_CurveOnSurface*)nativeHandle)->BSpline();
  return gcnew OCGeom_BSplineCurve(&tmp);
}


