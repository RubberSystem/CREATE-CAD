// File generated by CPPExt (Transient)
//
#ifndef _Adaptor3d_HCurve_OCWrappers_HeaderFile
#define _Adaptor3d_HCurve_OCWrappers_HeaderFile

// include the wrapped class
#include <Adaptor3d_HCurve.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../GeomAbs/GeomAbs_Shape.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Hypr.h"
#include "../gp/gp_Parab.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Curve;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCGeom_BezierCurve;
ref class OCGeom_BSplineCurve;


//! Root class for 3D curves manipulated by handles, on <br>
//! which geometric algorithms work. <br>
//! An adapted curve is an interface between the <br>
//! services provided by a curve and those required of <br>
//! the curve by algorithms which use it. <br>
//! Two derived concrete classes are provided: <br>
//! - GeomAdaptor_HCurve for a curve from the Geom package <br>
//! - Adaptor3d_HCurveOnSurface for a curve lying <br>
//!   on a surface from the Geom package. <br>
public ref class OCAdaptor3d_HCurve : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCAdaptor3d_HCurve(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCAdaptor3d_HCurve(Handle(Adaptor3d_HCurve)* nativeHandle);

// Methods PUBLIC


 /*instead*/  Standard_Real FirstParameter() ;


 /*instead*/  Standard_Real LastParameter() ;


 /*instead*/  OCGeomAbs_Shape Continuity() ;


 /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) ;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
//! <br>
 /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;

//! Returns    a  curve equivalent   of  <me>  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>
//! <br>//! If <First> >= <Last> <br>
 /*instead*/  OCAdaptor3d_HCurve^ Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol) ;


 /*instead*/  System::Boolean IsClosed() ;


 /*instead*/  System::Boolean IsPeriodic() ;


 /*instead*/  Standard_Real Period() ;


 /*instead*/  OCgp_Pnt^ Value(Standard_Real U) ;


 /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


 /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) ;


 /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) ;


 /*instead*/  Standard_Real Resolution(Standard_Real R3d) ;


 /*instead*/  OCGeomAbs_CurveType GetType() ;


 /*instead*/  OCgp_Lin^ Line() ;


 /*instead*/  OCgp_Circ^ Circle() ;


 /*instead*/  OCgp_Elips^ Ellipse() ;


 /*instead*/  OCgp_Hypr^ Hyperbola() ;


 /*instead*/  OCgp_Parab^ Parabola() ;


 /*instead*/  Standard_Integer Degree() ;


 /*instead*/  System::Boolean IsRational() ;


 /*instead*/  Standard_Integer NbPoles() ;


 /*instead*/  Standard_Integer NbKnots() ;


 /*instead*/  OCGeom_BezierCurve^ Bezier() ;


 /*instead*/  OCGeom_BSplineCurve^ BSpline() ;

~OCAdaptor3d_HCurve()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
