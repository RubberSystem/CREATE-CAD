// File generated by CPPExt (MPV)
//
#ifndef _Adaptor3d_Curve_OCWrappers_HeaderFile
#define _Adaptor3d_Curve_OCWrappers_HeaderFile

// include native header
#include <Adaptor3d_Curve.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_Shape.h"
#include "../GeomAbs/GeomAbs_CurveType.h"


namespace OCNaroWrappers
{

ref class OCTColStd_Array1OfReal;
ref class OCAdaptor3d_HCurve;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Lin;
ref class OCgp_Circ;
ref class OCgp_Elips;
ref class OCgp_Hypr;
ref class OCgp_Parab;
ref class OCGeom_BezierCurve;
ref class OCGeom_BSplineCurve;


//! Root class for 3D curves on which geometric <br>
//! algorithms work. <br>
//! An adapted curve is an interface between the <br>
//! services provided by a curve and those required of <br>
//! the curve by algorithms which use it. <br>
//! Two derived concrete classes are provided: <br>
//! - GeomAdaptor_Curve for a curve from the Geom package <br>
//! - Adaptor3d_CurveOnSurface for a curve lying on <br>
//!   a surface from the Geom package. <br>
public ref class OCAdaptor3d_Curve  {

protected:
  Adaptor3d_Curve* nativeHandle;
  OCAdaptor3d_Curve(OCDummy^) {};

public:
  property Adaptor3d_Curve* Handle
  {
    Adaptor3d_Curve* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCAdaptor3d_Curve(Adaptor3d_Curve* nativeHandle);

// Methods PUBLIC


virtual /*instead*/  void Delete() ;


virtual /*instead*/  Standard_Real FirstParameter() ;


virtual /*instead*/  Standard_Real LastParameter() ;


virtual /*instead*/  OCGeomAbs_Shape Continuity() ;

//! Returns  the number  of  intervals for  continuity <br>
//!          <S>. May be one if Continuity(me) >= <S> <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) ;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;

//! Returns    a  curve equivalent   of  <me>  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>//! If <First> >= <Last> <br>
virtual /*instead*/  OCAdaptor3d_HCurve^ Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol) ;


virtual /*instead*/  System::Boolean IsClosed() ;


virtual /*instead*/  System::Boolean IsPeriodic() ;


virtual /*instead*/  Standard_Real Period() ;

//! Computes the point of parameter U on the curve. <br>
virtual /*instead*/  OCgp_Pnt^ Value(Standard_Real U) ;

//! Computes the point of parameter U on the curve. <br>
virtual /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) ;

//! Computes the point of parameter U on the curve with its <br>
//!  first derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C1. <br>
virtual /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V) ;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>//! Raised if the continuity of the current interval <br>
//!  is not C2. <br>
virtual /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


//!  Returns the point P of parameter U, the first, the second <br>
//!  and the third derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C3. <br>
virtual /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) ;


//!  The returned vector gives the value of the derivative for the <br>
//!  order of derivation N. <br>//! Raised if the continuity of the current interval <br>
//!  is not CN. <br>//! Raised if N < 1. <br>
virtual /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) ;

//!  Returns the parametric  resolution corresponding <br>
//!         to the real space resolution <R3d>. <br>
virtual /*instead*/  Standard_Real Resolution(Standard_Real R3d) ;

//! Returns  the  type of the   curve  in the  current <br>
//!          interval :   Line,   Circle,   Ellipse, Hyperbola, <br>
//!          Parabola, BezierCurve, BSplineCurve, OtherCurve. <br>
virtual /*instead*/  OCGeomAbs_CurveType GetType() ;


virtual /*instead*/  OCgp_Lin^ Line() ;


virtual /*instead*/  OCgp_Circ^ Circle() ;


virtual /*instead*/  OCgp_Elips^ Ellipse() ;


virtual /*instead*/  OCgp_Hypr^ Hyperbola() ;


virtual /*instead*/  OCgp_Parab^ Parabola() ;


virtual /*instead*/  Standard_Integer Degree() ;


virtual /*instead*/  System::Boolean IsRational() ;


virtual /*instead*/  Standard_Integer NbPoles() ;


virtual /*instead*/  Standard_Integer NbKnots() ;


virtual /*instead*/  OCGeom_BezierCurve^ Bezier() ;


virtual /*instead*/  OCGeom_BSplineCurve^ BSpline() ;

~OCAdaptor3d_Curve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
