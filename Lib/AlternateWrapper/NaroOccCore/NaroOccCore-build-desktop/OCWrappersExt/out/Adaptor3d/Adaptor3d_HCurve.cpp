// File generated by CPPExt (CPP file)
//

#include "Adaptor3d_HCurve.h"
#include "../Converter.h"
#include "Adaptor3d_Curve.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../Geom/Geom_BezierCurve.h"
#include "../Geom/Geom_BSplineCurve.h"


using namespace OCNaroWrappers;

OCAdaptor3d_HCurve::OCAdaptor3d_HCurve(Handle(Adaptor3d_HCurve)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Adaptor3d_HCurve(*nativeHandle);
}

 Standard_Real OCAdaptor3d_HCurve::FirstParameter()
{
  return (*((Handle_Adaptor3d_HCurve*)nativeHandle))->FirstParameter();
}

 Standard_Real OCAdaptor3d_HCurve::LastParameter()
{
  return (*((Handle_Adaptor3d_HCurve*)nativeHandle))->LastParameter();
}

 OCGeomAbs_Shape OCAdaptor3d_HCurve::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Adaptor3d_HCurve*)nativeHandle))->Continuity());
}

 Standard_Integer OCAdaptor3d_HCurve::NbIntervals(OCGeomAbs_Shape S)
{
  return (*((Handle_Adaptor3d_HCurve*)nativeHandle))->NbIntervals((GeomAbs_Shape)S);
}

 void OCAdaptor3d_HCurve::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor3d_HCurve^ OCAdaptor3d_HCurve::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HCurve) tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Trim(First, Last, Tol);
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 System::Boolean OCAdaptor3d_HCurve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HCurve*)nativeHandle))->IsClosed());
}

 System::Boolean OCAdaptor3d_HCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HCurve*)nativeHandle))->IsPeriodic());
}

 Standard_Real OCAdaptor3d_HCurve::Period()
{
  return (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Period();
}

OCgp_Pnt^ OCAdaptor3d_HCurve::Value(Standard_Real U)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Value(U);
  return gcnew OCgp_Pnt(tmp);
}

 void OCAdaptor3d_HCurve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Adaptor3d_HCurve*)nativeHandle))->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCAdaptor3d_HCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V)
{
  (*((Handle_Adaptor3d_HCurve*)nativeHandle))->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V->Handle));
}

 void OCAdaptor3d_HCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  (*((Handle_Adaptor3d_HCurve*)nativeHandle))->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCAdaptor3d_HCurve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  (*((Handle_Adaptor3d_HCurve*)nativeHandle))->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCAdaptor3d_HCurve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCAdaptor3d_HCurve::Resolution(Standard_Real R3d)
{
  return (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Resolution(R3d);
}

 OCGeomAbs_CurveType OCAdaptor3d_HCurve::GetType()
{
  return (OCGeomAbs_CurveType)((*((Handle_Adaptor3d_HCurve*)nativeHandle))->GetType());
}

OCgp_Lin^ OCAdaptor3d_HCurve::Line()
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Line();
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCAdaptor3d_HCurve::Circle()
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Circle();
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCAdaptor3d_HCurve::Ellipse()
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Ellipse();
  return gcnew OCgp_Elips(tmp);
}

OCgp_Hypr^ OCAdaptor3d_HCurve::Hyperbola()
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Hyperbola();
  return gcnew OCgp_Hypr(tmp);
}

OCgp_Parab^ OCAdaptor3d_HCurve::Parabola()
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Parabola();
  return gcnew OCgp_Parab(tmp);
}

 Standard_Integer OCAdaptor3d_HCurve::Degree()
{
  return (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Degree();
}

 System::Boolean OCAdaptor3d_HCurve::IsRational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Adaptor3d_HCurve*)nativeHandle))->IsRational());
}

 Standard_Integer OCAdaptor3d_HCurve::NbPoles()
{
  return (*((Handle_Adaptor3d_HCurve*)nativeHandle))->NbPoles();
}

 Standard_Integer OCAdaptor3d_HCurve::NbKnots()
{
  return (*((Handle_Adaptor3d_HCurve*)nativeHandle))->NbKnots();
}

OCGeom_BezierCurve^ OCAdaptor3d_HCurve::Bezier()
{
  Handle(Geom_BezierCurve) tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->Bezier();
  return gcnew OCGeom_BezierCurve(&tmp);
}

OCGeom_BSplineCurve^ OCAdaptor3d_HCurve::BSpline()
{
  Handle(Geom_BSplineCurve) tmp = (*((Handle_Adaptor3d_HCurve*)nativeHandle))->BSpline();
  return gcnew OCGeom_BSplineCurve(&tmp);
}


