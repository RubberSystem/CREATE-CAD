// File generated by CPPExt (Transient)
//
#ifndef _Select2D_SensitiveSegment_OCWrappers_HeaderFile
#define _Select2D_SensitiveSegment_OCWrappers_HeaderFile

// include the wrapped class
#include <Select2D_SensitiveSegment.hxx>
#include "../Converter.h"

#include "Select2D_SensitiveEntity.h"

#include "../gp/gp_Pnt2d.h"


namespace OCNaroWrappers
{

ref class OCSelectBasics_EntityOwner;
ref class OCgp_Pnt2d;
ref class OCSelectBasics_ListOfBox2d;


//! A framework to define sensitive areas along a line segment. <br>
public ref class OCSelect2D_SensitiveSegment : OCSelect2D_SensitiveEntity {

protected:
  // dummy constructor;
  OCSelect2D_SensitiveSegment(OCDummy^) : OCSelect2D_SensitiveEntity((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelect2D_SensitiveSegment(Handle(Select2D_SensitiveSegment)* nativeHandle);

// Methods PUBLIC

//! Constructs the sensitive line segment object defined <br>
//! by the owner OwnerId, the 2D starting and ending <br>
//! points FirstPoint and LastPoint and the maximum <br>
//! number of sensitive bounding boxes MaxRect. <br>
//! The parameters can be modified using the functions provided. <br>
OCSelect2D_SensitiveSegment(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCgp_Pnt2d^ FirstP, OCNaroWrappers::OCgp_Pnt2d^ LastP, Standard_Integer MaxRect);

//! Sets the maximum number of 2D sensitive bounding boxes - MaxRect. <br>
 /*instead*/  void Set(Standard_Integer MaxRect) ;

//! changes the start Point of the Segment; <br>
 /*instead*/  void StartPoint(OCNaroWrappers::OCgp_Pnt2d^ aPt) ;

//! changes the end point of the segment <br>
 /*instead*/  void EndPoint(OCNaroWrappers::OCgp_Pnt2d^ aPt) ;

//! gives the 3D start Point of the Segment <br>
 /*instead*/  OCgp_Pnt2d^ StartPoint() ;

//! Returnes the 3D start Point of the Segment <br>
 /*instead*/  OCgp_Pnt2d^ EndPoint() ;


 /*instead*/  void Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ aSeq) ;


 /*instead*/  System::Boolean Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin) ;


 /*instead*/  System::Boolean Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol) ;

//! Returns the max number of sensitive aeas describing the sensitive segment <br>
virtual /*instead*/  Standard_Integer MaxBoxes() override;

~OCSelect2D_SensitiveSegment()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
