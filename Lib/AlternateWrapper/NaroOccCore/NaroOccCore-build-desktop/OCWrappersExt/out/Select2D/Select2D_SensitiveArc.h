// File generated by CPPExt (Transient)
//
#ifndef _Select2D_SensitiveArc_OCWrappers_HeaderFile
#define _Select2D_SensitiveArc_OCWrappers_HeaderFile

// include the wrapped class
#include <Select2D_SensitiveArc.hxx>
#include "../Converter.h"

#include "Select2D_SensitiveEntity.h"

#include "../gp/gp_Ax2d.h"


namespace OCNaroWrappers
{

ref class OCSelectBasics_EntityOwner;
ref class OCgp_Ax2d;
ref class OCSelectBasics_ListOfBox2d;


//! sensitive Areas for an Arc Of Circle <br>
//!          One gives Radius and center,and limits. <br>
//!          or a geometric circle. <br>
public ref class OCSelect2D_SensitiveArc : OCSelect2D_SensitiveEntity {

protected:
  // dummy constructor;
  OCSelect2D_SensitiveArc(OCDummy^) : OCSelect2D_SensitiveEntity((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelect2D_SensitiveArc(Handle(Select2D_SensitiveArc)* nativeHandle);

// Methods PUBLIC

//! Constructs a 2D sensitive arc object defined by the <br>
//! owner OwnerId, the axis of origin OriginAxis, the <br>
//! angle Angle, the radius Radius, and the maximum <br>
//! number of points MaxPoints. <br>
//! <br>
//!               _. <br>
//!       \ angle /| <br>
//!        \_____/ <br>
//!         \   /  direction <br>
//!          \ / <br>
//!	         * <br>
OCSelect2D_SensitiveArc(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCgp_Ax2d^ OriginAxis, Standard_Real Angle, Standard_Real Radius, Standard_Integer MaxPoints);

//! returns the sensitive areas for a circle... <br>
 /*instead*/  void Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ aresul) ;

//! returns true if the minimum distance DMin <br>
//!          between the postion x,y and the circle is less than aTol.. <br>
 /*instead*/  System::Boolean Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin) ;


 /*instead*/  System::Boolean Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol) ;

~OCSelect2D_SensitiveArc()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
