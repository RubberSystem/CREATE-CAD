// File generated by CPPExt (Transient)
//
#ifndef _Select2D_SensitivePoint_OCWrappers_HeaderFile
#define _Select2D_SensitivePoint_OCWrappers_HeaderFile

// include the wrapped class
#include <Select2D_SensitivePoint.hxx>
#include "../Converter.h"

#include "Select2D_SensitiveEntity.h"

#include "../gp/gp_Pnt2d.h"


namespace OCNaroWrappers
{

ref class OCSelectBasics_EntityOwner;
ref class OCgp_Pnt2d;
ref class OCSelectBasics_ListOfBox2d;


//! A framework to define sensitive 2D points. <br>
public ref class OCSelect2D_SensitivePoint : OCSelect2D_SensitiveEntity {

protected:
  // dummy constructor;
  OCSelect2D_SensitivePoint(OCDummy^) : OCSelect2D_SensitiveEntity((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelect2D_SensitivePoint(Handle(Select2D_SensitivePoint)* nativeHandle);

// Methods PUBLIC

//! Constructs the sensitive point object defined by the <br>
//! owner OwnerId, the point Location and the sensitivity InitSensitivity. <br>
//! InitSensitivity allows choice of dimensions in the <br>
//! selectable box around the sensitive point. It is <br>
//! initialized with a null value, and is given a working one by Set. <br>
OCSelect2D_SensitivePoint(OCNaroWrappers::OCSelectBasics_EntityOwner^ OwnerId, OCNaroWrappers::OCgp_Pnt2d^ Location, Standard_Real InitSensitivity);

//! Sets the sensitivity aSensitivity for sensitive <br>
//! primitives to find owners of points. <br>
 /*instead*/  void Set(Standard_Real aSensitivity) ;

//! Returns the 2Dbox around the point (this box) has to be enlarged (sensitivity = 0) <br>
 /*instead*/  void Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ aresul) ;

//! returns the original point. <br>
 /*instead*/  OCgp_Pnt2d^ Location() ;

//! if distance between P <br>
 /*instead*/  System::Boolean Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin) ;


 /*instead*/  System::Boolean Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol) ;

~OCSelect2D_SensitivePoint()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
