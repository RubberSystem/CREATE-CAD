// File generated by CPPExt (CPP file)
//

#include "TopOpeBRepDS_GapTool.h"
#include "../Converter.h"
#include "TopOpeBRepDS_HDataStructure.h"
#include "TopOpeBRepDS_ListOfInterference.h"
#include "TopOpeBRepDS_Interference.h"
#include "TopOpeBRepDS_Curve.h"
#include "../TopoDS/TopoDS_Shape.h"


using namespace OCNaroWrappers;

OCTopOpeBRepDS_GapTool::OCTopOpeBRepDS_GapTool(Handle(TopOpeBRepDS_GapTool)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TopOpeBRepDS_GapTool(*nativeHandle);
}

OCTopOpeBRepDS_GapTool::OCTopOpeBRepDS_GapTool() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TopOpeBRepDS_GapTool(new TopOpeBRepDS_GapTool());
}

OCTopOpeBRepDS_GapTool::OCTopOpeBRepDS_GapTool(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TopOpeBRepDS_GapTool(new TopOpeBRepDS_GapTool(*((Handle_TopOpeBRepDS_HDataStructure*)HDS->Handle)));
}

 void OCTopOpeBRepDS_GapTool::Init(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS)
{
  (*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->Init(*((Handle_TopOpeBRepDS_HDataStructure*)HDS->Handle));
}

OCTopOpeBRepDS_ListOfInterference^ OCTopOpeBRepDS_GapTool::Interferences(Standard_Integer IndexPoint)
{
  TopOpeBRepDS_ListOfInterference* tmp = new TopOpeBRepDS_ListOfInterference();
  *tmp = (*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->Interferences(IndexPoint);
  return gcnew OCTopOpeBRepDS_ListOfInterference(tmp);
}

OCTopOpeBRepDS_ListOfInterference^ OCTopOpeBRepDS_GapTool::SameInterferences(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I)
{
  TopOpeBRepDS_ListOfInterference* tmp = new TopOpeBRepDS_ListOfInterference();
  *tmp = (*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->SameInterferences(*((Handle_TopOpeBRepDS_Interference*)I->Handle));
  return gcnew OCTopOpeBRepDS_ListOfInterference(tmp);
}

OCTopOpeBRepDS_ListOfInterference^ OCTopOpeBRepDS_GapTool::ChangeSameInterferences(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I)
{
  TopOpeBRepDS_ListOfInterference* tmp = new TopOpeBRepDS_ListOfInterference();
  *tmp = (*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->ChangeSameInterferences(*((Handle_TopOpeBRepDS_Interference*)I->Handle));
  return gcnew OCTopOpeBRepDS_ListOfInterference(tmp);
}

 System::Boolean OCTopOpeBRepDS_GapTool::Curve(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, OCNaroWrappers::OCTopOpeBRepDS_Curve^ C)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->Curve(*((Handle_TopOpeBRepDS_Interference*)I->Handle), *((TopOpeBRepDS_Curve*)C->Handle)));
}

 System::Boolean OCTopOpeBRepDS_GapTool::EdgeSupport(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, OCNaroWrappers::OCTopoDS_Shape^ E)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->EdgeSupport(*((Handle_TopOpeBRepDS_Interference*)I->Handle), *((TopoDS_Shape*)E->Handle)));
}

 System::Boolean OCTopOpeBRepDS_GapTool::FacesSupport(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, OCNaroWrappers::OCTopoDS_Shape^ F1, OCNaroWrappers::OCTopoDS_Shape^ F2)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->FacesSupport(*((Handle_TopOpeBRepDS_Interference*)I->Handle), *((TopoDS_Shape*)F1->Handle), *((TopoDS_Shape*)F2->Handle)));
}

 System::Boolean OCTopOpeBRepDS_GapTool::ParameterOnEdge(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, OCNaroWrappers::OCTopoDS_Shape^ E, Standard_Real& U)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->ParameterOnEdge(*((Handle_TopOpeBRepDS_Interference*)I->Handle), *((TopoDS_Shape*)E->Handle), U));
}

 void OCTopOpeBRepDS_GapTool::SetPoint(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, Standard_Integer IndexPoint)
{
  (*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->SetPoint(*((Handle_TopOpeBRepDS_Interference*)I->Handle), IndexPoint);
}

 void OCTopOpeBRepDS_GapTool::SetParameterOnEdge(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, OCNaroWrappers::OCTopoDS_Shape^ E, Standard_Real U)
{
  (*((Handle_TopOpeBRepDS_GapTool*)nativeHandle))->SetParameterOnEdge(*((Handle_TopOpeBRepDS_Interference*)I->Handle), *((TopoDS_Shape*)E->Handle), U);
}


