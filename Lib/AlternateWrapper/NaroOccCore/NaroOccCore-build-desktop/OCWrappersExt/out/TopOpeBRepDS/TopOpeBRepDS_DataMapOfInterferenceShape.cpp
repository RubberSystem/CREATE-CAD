// File generated by CPPExt (CPP file)
//

#include "TopOpeBRepDS_DataMapOfInterferenceShape.h"
#include "../Converter.h"
#include "TopOpeBRepDS_Interference.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TColStd/TColStd_MapTransientHasher.h"
#include "TopOpeBRepDS_DataMapNodeOfDataMapOfInterferenceShape.h"
#include "TopOpeBRepDS_DataMapIteratorOfDataMapOfInterferenceShape.h"


using namespace OCNaroWrappers;

OCTopOpeBRepDS_DataMapOfInterferenceShape::OCTopOpeBRepDS_DataMapOfInterferenceShape(TopOpeBRepDS_DataMapOfInterferenceShape* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRepDS_DataMapOfInterferenceShape::OCTopOpeBRepDS_DataMapOfInterferenceShape(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new TopOpeBRepDS_DataMapOfInterferenceShape(NbBuckets);
}

OCTopOpeBRepDS_DataMapOfInterferenceShape^ OCTopOpeBRepDS_DataMapOfInterferenceShape::Assign(OCNaroWrappers::OCTopOpeBRepDS_DataMapOfInterferenceShape^ Other)
{
  TopOpeBRepDS_DataMapOfInterferenceShape* tmp = new TopOpeBRepDS_DataMapOfInterferenceShape(0);
  *tmp = ((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->Assign(*((TopOpeBRepDS_DataMapOfInterferenceShape*)Other->Handle));
  return gcnew OCTopOpeBRepDS_DataMapOfInterferenceShape(tmp);
}

 void OCTopOpeBRepDS_DataMapOfInterferenceShape::ReSize(Standard_Integer NbBuckets)
{
  ((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCTopOpeBRepDS_DataMapOfInterferenceShape::Bind(OCNaroWrappers::OCTopOpeBRepDS_Interference^ K, OCNaroWrappers::OCTopoDS_Shape^ I)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->Bind(*((Handle_TopOpeBRepDS_Interference*)K->Handle), *((TopoDS_Shape*)I->Handle)));
}

 System::Boolean OCTopOpeBRepDS_DataMapOfInterferenceShape::IsBound(OCNaroWrappers::OCTopOpeBRepDS_Interference^ K)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->IsBound(*((Handle_TopOpeBRepDS_Interference*)K->Handle)));
}

 System::Boolean OCTopOpeBRepDS_DataMapOfInterferenceShape::UnBind(OCNaroWrappers::OCTopOpeBRepDS_Interference^ K)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->UnBind(*((Handle_TopOpeBRepDS_Interference*)K->Handle)));
}

OCTopoDS_Shape^ OCTopOpeBRepDS_DataMapOfInterferenceShape::Find(OCNaroWrappers::OCTopOpeBRepDS_Interference^ K)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->Find(*((Handle_TopOpeBRepDS_Interference*)K->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTopOpeBRepDS_DataMapOfInterferenceShape::ChangeFind(OCNaroWrappers::OCTopOpeBRepDS_Interference^ K)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->ChangeFind(*((Handle_TopOpeBRepDS_Interference*)K->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Address OCTopOpeBRepDS_DataMapOfInterferenceShape::Find1(OCNaroWrappers::OCTopOpeBRepDS_Interference^ K)
{
  return ((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->Find1(*((Handle_TopOpeBRepDS_Interference*)K->Handle));
}

 Standard_Address OCTopOpeBRepDS_DataMapOfInterferenceShape::ChangeFind1(OCNaroWrappers::OCTopOpeBRepDS_Interference^ K)
{
  return ((TopOpeBRepDS_DataMapOfInterferenceShape*)nativeHandle)->ChangeFind1(*((Handle_TopOpeBRepDS_Interference*)K->Handle));
}


