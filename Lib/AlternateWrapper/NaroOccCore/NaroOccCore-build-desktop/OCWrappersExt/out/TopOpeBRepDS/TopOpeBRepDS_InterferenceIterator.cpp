// File generated by CPPExt (CPP file)
//

#include "TopOpeBRepDS_InterferenceIterator.h"
#include "../Converter.h"
#include "TopOpeBRepDS_ListOfInterference.h"
#include "TopOpeBRepDS_Interference.h"
#include "TopOpeBRepDS_ListIteratorOfListOfInterference.h"


using namespace OCNaroWrappers;

OCTopOpeBRepDS_InterferenceIterator::OCTopOpeBRepDS_InterferenceIterator(TopOpeBRepDS_InterferenceIterator* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRepDS_InterferenceIterator::OCTopOpeBRepDS_InterferenceIterator() 
{
  nativeHandle = new TopOpeBRepDS_InterferenceIterator();
}

OCTopOpeBRepDS_InterferenceIterator::OCTopOpeBRepDS_InterferenceIterator(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ L) 
{
  nativeHandle = new TopOpeBRepDS_InterferenceIterator(*((TopOpeBRepDS_ListOfInterference*)L->Handle));
}

 void OCTopOpeBRepDS_InterferenceIterator::Init(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ L)
{
  ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->Init(*((TopOpeBRepDS_ListOfInterference*)L->Handle));
}

 void OCTopOpeBRepDS_InterferenceIterator::GeometryKind(OCTopOpeBRepDS_Kind GK)
{
  ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->GeometryKind((TopOpeBRepDS_Kind)GK);
}

 void OCTopOpeBRepDS_InterferenceIterator::Geometry(Standard_Integer G)
{
  ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->Geometry(G);
}

 void OCTopOpeBRepDS_InterferenceIterator::SupportKind(OCTopOpeBRepDS_Kind ST)
{
  ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->SupportKind((TopOpeBRepDS_Kind)ST);
}

 void OCTopOpeBRepDS_InterferenceIterator::Support(Standard_Integer S)
{
  ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->Support(S);
}

 void OCTopOpeBRepDS_InterferenceIterator::Match()
{
  ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->Match();
}

 System::Boolean OCTopOpeBRepDS_InterferenceIterator::MatchInterference(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->MatchInterference(*((Handle_TopOpeBRepDS_Interference*)I->Handle)));
}

 System::Boolean OCTopOpeBRepDS_InterferenceIterator::More()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->More());
}

 void OCTopOpeBRepDS_InterferenceIterator::Next()
{
  ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->Next();
}

OCTopOpeBRepDS_Interference^ OCTopOpeBRepDS_InterferenceIterator::Value()
{
  Handle(TopOpeBRepDS_Interference) tmp = ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->Value();
  return gcnew OCTopOpeBRepDS_Interference(&tmp);
}

OCTopOpeBRepDS_ListIteratorOfListOfInterference^ OCTopOpeBRepDS_InterferenceIterator::ChangeIterator()
{
  TopOpeBRepDS_ListIteratorOfListOfInterference* tmp = new TopOpeBRepDS_ListIteratorOfListOfInterference();
  *tmp = ((TopOpeBRepDS_InterferenceIterator*)nativeHandle)->ChangeIterator();
  return gcnew OCTopOpeBRepDS_ListIteratorOfListOfInterference(tmp);
}


