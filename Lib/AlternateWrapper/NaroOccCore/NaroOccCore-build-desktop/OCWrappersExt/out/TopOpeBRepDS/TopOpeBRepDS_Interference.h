// File generated by CPPExt (Transient)
//
#ifndef _TopOpeBRepDS_Interference_OCWrappers_HeaderFile
#define _TopOpeBRepDS_Interference_OCWrappers_HeaderFile

// include the wrapped class
#include <TopOpeBRepDS_Interference.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "TopOpeBRepDS_Transition.h"
#include "TopOpeBRepDS_Kind.h"


namespace OCNaroWrappers
{

ref class OCTopOpeBRepDS_Transition;
ref class OCTCollection_AsciiString;


//! An interference    is   the   description  of  the <br>
//!          attachment of  a new  geometry on a  geometry. For <br>
//!          example an intersection point  on an Edge or on  a <br>
//!          Curve. <br>
//! <br>
//!          The Interference contains the following data : <br>
//! <br>
//!          - Transition :  How the interference  separates the <br>
//!          existing geometry in INSIDE and OUTSIDE. <br>
//! <br>
//!          - SupportType : Type of  the object supporting the <br>
//!          interference. (FACE, EDGE, VERTEX, SURFACE, CURVE). <br>
//! <br>
//!          - Support :  Index  in the data  structure  of the <br>
//!          object supporting the interference. <br>
//! <br>
//!          - GeometryType  :   Type  of the  geometry of  the <br>
//!          interference (SURFACE, CURVE, POINT). <br>
//! <br>
//!          - Geometry : Index  in the data structure  of the <br>
//!          geometry. <br>
//! <br>
public ref class OCTopOpeBRepDS_Interference : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCTopOpeBRepDS_Interference(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCTopOpeBRepDS_Interference(Handle(TopOpeBRepDS_Interference)* nativeHandle);

// Methods PUBLIC


OCTopOpeBRepDS_Interference();


OCTopOpeBRepDS_Interference(OCNaroWrappers::OCTopOpeBRepDS_Transition^ Transition, OCTopOpeBRepDS_Kind SupportType, Standard_Integer Support, OCTopOpeBRepDS_Kind GeometryType, Standard_Integer Geometry);


OCTopOpeBRepDS_Interference(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I);


 /*instead*/  OCTopOpeBRepDS_Transition^ Transition() ;


 /*instead*/  OCTopOpeBRepDS_Transition^ ChangeTransition() ;


 /*instead*/  void Transition(OCNaroWrappers::OCTopOpeBRepDS_Transition^ T) ;

//! return GeometryType + Geometry + SupportType + Support <br>
 /*instead*/  void GKGSKS(OCTopOpeBRepDS_Kind& GK, Standard_Integer& G, OCTopOpeBRepDS_Kind& SK, Standard_Integer& S) ;


 /*instead*/  OCTopOpeBRepDS_Kind SupportType() ;


 /*instead*/  Standard_Integer Support() ;


 /*instead*/  OCTopOpeBRepDS_Kind GeometryType() ;


 /*instead*/  Standard_Integer Geometry() ;


 /*instead*/  void SetGeometry(Standard_Integer GI) ;


 /*instead*/  void SupportType(OCTopOpeBRepDS_Kind ST) ;


 /*instead*/  void Support(Standard_Integer S) ;


 /*instead*/  void GeometryType(OCTopOpeBRepDS_Kind GT) ;


 /*instead*/  void Geometry(Standard_Integer G) ;


 /*instead*/  System::Boolean HasSameSupport(OCNaroWrappers::OCTopOpeBRepDS_Interference^ Other) ;


 /*instead*/  System::Boolean HasSameGeometry(OCNaroWrappers::OCTopOpeBRepDS_Interference^ Other) ;


 /*instead*/  Standard_OStream& DumpG(Standard_OStream& OS) ;


 /*instead*/  Standard_OStream& DumpS(Standard_OStream& OS) ;


virtual /*instead*/  Standard_OStream& Dump(Standard_OStream& OS) ;


 /*instead*/  Standard_OStream& Dump(Standard_OStream& OS, OCNaroWrappers::OCTCollection_AsciiString^ s1, OCNaroWrappers::OCTCollection_AsciiString^ s2) ;

~OCTopOpeBRepDS_Interference()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
