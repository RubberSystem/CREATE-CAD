// File generated by CPPExt (Transient)
//
#ifndef _TopOpeBRepDS_HDataStructure_OCWrappers_HeaderFile
#define _TopOpeBRepDS_HDataStructure_OCWrappers_HeaderFile

// include the wrapped class
#include <TopOpeBRepDS_HDataStructure.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "TopOpeBRepDS_DataStructure.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../TopAbs/TopAbs_ShapeEnum.h"
#include "TopOpeBRepDS_Config.h"
#include "TopOpeBRepDS_Kind.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopOpeBRepDS_DataStructure;
ref class OCTopOpeBRepDS_Surface;
ref class OCTopOpeBRepDS_CurveIterator;
ref class OCTopOpeBRepDS_Curve;
ref class OCTopOpeBRepDS_PointIterator;
ref class OCTopOpeBRepDS_Point;
ref class OCTopTools_ListIteratorOfListOfShape;
ref class OCTopOpeBRepDS_SurfaceIterator;
ref class OCTopOpeBRepDS_ListOfInterference;
ref class OCTopOpeBRepDS_ListIteratorOfListOfInterference;
ref class OCTopOpeBRepDS_Interference;



public ref class OCTopOpeBRepDS_HDataStructure : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCTopOpeBRepDS_HDataStructure(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCTopOpeBRepDS_HDataStructure(Handle(TopOpeBRepDS_HDataStructure)* nativeHandle);

// Methods PUBLIC


OCTopOpeBRepDS_HDataStructure();


 /*instead*/  void AddAncestors(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Update  the data structure with  shapes of type T1 <br>
//!          containing a subshape of type T2 which is stored <br>
//!          in the DS. <br>
//!          Used by the previous one. <br>
 /*instead*/  void AddAncestors(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_ShapeEnum T1, OCTopAbs_ShapeEnum T2) ;

//! perform post processing of the DS. <br>
 /*instead*/  void Complete() ;

//! Check the integrity of the DS <br>
 /*instead*/  void ChkIntg() ;


 /*instead*/  OCTopOpeBRepDS_DataStructure^ DS() ;


 /*instead*/  OCTopOpeBRepDS_DataStructure^ ChangeDS() ;


 /*instead*/  Standard_Integer NbSurfaces() ;


 /*instead*/  Standard_Integer NbCurves() ;


 /*instead*/  Standard_Integer NbPoints() ;

//! Returns the surface of index <I>. <br>
 /*instead*/  OCTopOpeBRepDS_Surface^ Surface(Standard_Integer I) ;

//! Returns an iterator  on the curves on  the surface <br>
//!          <I>. <br>
 /*instead*/  OCTopOpeBRepDS_CurveIterator^ SurfaceCurves(Standard_Integer I) ;

//! Returns the Curve of index <I>. <br>
 /*instead*/  OCTopOpeBRepDS_Curve^ Curve(Standard_Integer I) ;

//! Returns the Curve of index <I>. <br>
//! <br>
 /*instead*/  OCTopOpeBRepDS_Curve^ ChangeCurve(Standard_Integer I) ;

//! Returns an iterator   on the points on  the  curve <br>
//!          <I>. <br>
 /*instead*/  OCTopOpeBRepDS_PointIterator^ CurvePoints(Standard_Integer I) ;

//! Returns the point of index <I>. <br>
 /*instead*/  OCTopOpeBRepDS_Point^ Point(Standard_Integer I) ;


 /*instead*/  Standard_Integer NbShapes() ;

//! Returns the shape of index <I> in the DS <br>
 /*instead*/  OCTopoDS_Shape^ Shape(Standard_Integer I, System::Boolean FindKeep) ;

//! Returns the index of shape <S> in the DS <br>
//!          returns 0 if <S> is not in the DS <br>
 /*instead*/  Standard_Integer Shape(OCNaroWrappers::OCTopoDS_Shape^ S, System::Boolean FindKeep) ;

//! Returns True if <S> has new geometries. <br>
 /*instead*/  System::Boolean HasGeometry(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Returns True if <S> has new geometries (SOLID,FACE,EDGE) <br>
//!          or if <S> (SHELL,WIRE) has sub-shape (FACE,EDGE) <br>
//!          with new geometries <br>
 /*instead*/  System::Boolean HasShape(OCNaroWrappers::OCTopoDS_Shape^ S, System::Boolean FindKeep) ;

//! Returns True if <S> share a geometrical domain with <br>
//!          some other shapes. <br>
 /*instead*/  System::Boolean HasSameDomain(OCNaroWrappers::OCTopoDS_Shape^ S, System::Boolean FindKeep) ;

//! Returns an iterator on the SameDomain shapes attached <br>
//!          to the shape <S>. <br>
 /*instead*/  OCTopTools_ListIteratorOfListOfShape^ SameDomain(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Returns orientation of shape <S> compared with its <br>
//!          reference shape <br>
 /*instead*/  OCTopOpeBRepDS_Config SameDomainOrientation(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Returns orientation of shape <S> compared with its <br>
//!          reference shape <br>
 /*instead*/  Standard_Integer SameDomainReference(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Returns an iterator on the  surfaces attached to the <br>
//!          solid <S>. <br>
 /*instead*/  OCTopOpeBRepDS_SurfaceIterator^ SolidSurfaces(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Returns an iterator on the  surfaces attached to the <br>
//!          solid <I>. <br>
 /*instead*/  OCTopOpeBRepDS_SurfaceIterator^ SolidSurfaces(Standard_Integer I) ;

//! Returns an iterator on the  curves attached to the <br>
//!          face <F>. <br>
 /*instead*/  OCTopOpeBRepDS_CurveIterator^ FaceCurves(OCNaroWrappers::OCTopoDS_Shape^ F) ;

//! Returns an iterator on the  curves attached to the <br>
//!          face <I>. <br>
 /*instead*/  OCTopOpeBRepDS_CurveIterator^ FaceCurves(Standard_Integer I) ;

//! Returns an iterator on the points  attached to the <br>
//!          edge <E>. <br>
 /*instead*/  OCTopOpeBRepDS_PointIterator^ EdgePoints(OCNaroWrappers::OCTopoDS_Shape^ E) ;


 /*instead*/  Standard_Integer MakeCurve(OCNaroWrappers::OCTopOpeBRepDS_Curve^ C1, OCNaroWrappers::OCTopOpeBRepDS_Curve^ C2) ;


 /*instead*/  void RemoveCurve(Standard_Integer iC) ;


 /*instead*/  void RemoveShape(Standard_Integer iS) ;


 /*instead*/  Standard_Integer NbGeometry(OCTopOpeBRepDS_Kind K) ;


 /*instead*/  Standard_Integer NbTopology(OCTopOpeBRepDS_Kind K) ;


 /*instead*/  Standard_Integer NbTopology() ;

//! returns True if all the edges stored as shapes in the DS <br>
//!          are SameParameter, otherwise False. <br>
 /*instead*/  System::Boolean EdgesSameParameter() ;


 /*instead*/  void SortOnParameter(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ L1, OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ L2) ;


 /*instead*/  void SortOnParameter(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ L) ;


 /*instead*/  void MinMaxOnParameter(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ L, Standard_Real& Min, Standard_Real& Max) ;


//! Search, among a list of interferences accessed by the iterator <br>
//! <IT>, a geometry <G> whose 3D point is identical to the 3D point <br>
//! of the TheDSPoint <PDS>. <br>
//! returns True if such an interference has been found, False else. <br>
//! if True, iterator It points (by the Value() method) on the first <br>
//! interference accessing an identical 3D point. <br>
 /*instead*/  System::Boolean ScanInterfList(OCNaroWrappers::OCTopOpeBRepDS_ListIteratorOfListOfInterference^ IT, OCNaroWrappers::OCTopOpeBRepDS_Point^ PDS) ;


//! Get the geometry of a DS point <PDS>. <br>
//! Search for it with ScanInterfList (previous method). <br>
//! if found, set <G,K> to the geometry,kind of the interference found. <br>
//! returns the value of ScanInterfList(). <br>
 /*instead*/  System::Boolean GetGeometry(OCNaroWrappers::OCTopOpeBRepDS_ListIteratorOfListOfInterference^ IT, OCNaroWrappers::OCTopOpeBRepDS_Point^ PDS, Standard_Integer& G, OCTopOpeBRepDS_Kind& K) ;


//! Add interference <I> to list <LI>. <br>
 /*instead*/  void StoreInterference(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ LI, OCNaroWrappers::OCTCollection_AsciiString^ str) ;


//! Add interference <I> to list of interference of shape <S>. <br>
 /*instead*/  void StoreInterference(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTCollection_AsciiString^ str) ;


//! Add interference <I> to list of interference of shape <IS>. <br>
 /*instead*/  void StoreInterference(OCNaroWrappers::OCTopOpeBRepDS_Interference^ I, Standard_Integer IS, OCNaroWrappers::OCTCollection_AsciiString^ str) ;


 /*instead*/  void StoreInterferences(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ LI, OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTCollection_AsciiString^ str) ;


 /*instead*/  void StoreInterferences(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ LI, Standard_Integer IS, OCNaroWrappers::OCTCollection_AsciiString^ str) ;


 /*instead*/  void ClearStoreInterferences(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ LI, OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTCollection_AsciiString^ str) ;


 /*instead*/  void ClearStoreInterferences(OCNaroWrappers::OCTopOpeBRepDS_ListOfInterference^ LI, Standard_Integer IS, OCNaroWrappers::OCTCollection_AsciiString^ str) ;

~OCTopOpeBRepDS_HDataStructure()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
