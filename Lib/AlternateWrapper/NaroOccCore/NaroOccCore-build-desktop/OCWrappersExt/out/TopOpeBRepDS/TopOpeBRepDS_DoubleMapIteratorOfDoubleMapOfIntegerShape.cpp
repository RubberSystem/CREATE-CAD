// File generated by CPPExt (CPP file)
//

#include "TopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TColStd/TColStd_MapIntegerHasher.h"
#include "../TopTools/TopTools_ShapeMapHasher.h"
#include "TopOpeBRepDS_DoubleMapOfIntegerShape.h"
#include "TopOpeBRepDS_DoubleMapNodeOfDoubleMapOfIntegerShape.h"


using namespace OCNaroWrappers;

OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape::OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape(TopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape* nativeHandle) : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape::OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape() : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  nativeHandle = new TopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape();
}

OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape::OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape(OCNaroWrappers::OCTopOpeBRepDS_DoubleMapOfIntegerShape^ aMap) : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  nativeHandle = new TopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape(*((TopOpeBRepDS_DoubleMapOfIntegerShape*)aMap->Handle));
}

 void OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape::Initialize(OCNaroWrappers::OCTopOpeBRepDS_DoubleMapOfIntegerShape^ aMap)
{
  ((TopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape*)nativeHandle)->Initialize(*((TopOpeBRepDS_DoubleMapOfIntegerShape*)aMap->Handle));
}

 Standard_Integer OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape::Key1()
{
  return ((TopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape*)nativeHandle)->Key1();
}

OCTopoDS_Shape^ OCTopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape::Key2()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRepDS_DoubleMapIteratorOfDoubleMapOfIntegerShape*)nativeHandle)->Key2();
  return gcnew OCTopoDS_Shape(tmp);
}


