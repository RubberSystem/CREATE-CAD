// File generated by CPPExt (MPV)
//
#ifndef _Standard_Persistent_OCWrappers_HeaderFile
#define _Standard_Persistent_OCWrappers_HeaderFile

// include native header
#include <Standard_Persistent.hxx>
#include "../Converter.h"


#include "Standard_Storable.h"


namespace OCNaroWrappers
{

ref class OCStandard_Type;



//! The root of the entire persistent class hierarchy. <br>
public ref class OCStandard_Persistent  {

protected:
  Handle(Standard_Persistent)* nativeHandle;
  OCStandard_Persistent(OCDummy^) {};

public:
  property Handle(Standard_Persistent)* Handle
  {
    Handle(Standard_Persistent)* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStandard_Persistent(Handle(Standard_Persistent)* nativeHandle);

// Methods PUBLIC

//! Deletes this object. <br>
virtual /*instead*/  void Delete() override;


//! Returns the type object representing the actual type of the object. <br>
//! There is one type object per Persistent-derived class. <br>
virtual /*instead*/  OCStandard_Type^ DynamicType() ;


//! Returns true if the actual type of the object is equal to the given type. <br>
 /*instead*/  System::Boolean IsInstance(OCNaroWrappers::OCStandard_Type^ TheType) ;


//! Returns true if <me> is an instance of <aType> or an <br>
//! instance of any class that inherits from <aType>. <br>
//! All persistent objects are a kind of Object class. <br>
 /*instead*/  System::Boolean IsKind(OCNaroWrappers::OCStandard_Type^ TheType) ;

~OCStandard_Persistent()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
