// File generated by CPPExt (CPP file)
//

#include "Standard_GUID.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCStandard_GUID::OCStandard_GUID(Standard_GUID* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCStandard_GUID::OCStandard_GUID() 
{
  nativeHandle = new Standard_GUID();
}

OCStandard_GUID::OCStandard_GUID(System::String^ aGuid) 
{
  nativeHandle = new Standard_GUID(OCConverter::StringToStandardCString(aGuid));
}

OCStandard_GUID::OCStandard_GUID(System::String^ aGuid) 
{
  nativeHandle = new Standard_GUID(OCConverter::StringToStandardExtString(aGuid));
}

OCStandard_GUID::OCStandard_GUID(Standard_Integer a32b, Standard_ExtCharacter a16b1, Standard_ExtCharacter a16b2, Standard_ExtCharacter a16b3, Standard_Byte a8b1, Standard_Byte a8b2, Standard_Byte a8b3, Standard_Byte a8b4, Standard_Byte a8b5, Standard_Byte a8b6) 
{
  nativeHandle = new Standard_GUID(a32b, a16b1, a16b2, a16b3, a8b1, a8b2, a8b3, a8b4, a8b5, a8b6);
}

OCStandard_GUID::OCStandard_GUID(Standard_UUID aGuid) 
{
  nativeHandle = new Standard_GUID(aGuid);
}

OCStandard_GUID::OCStandard_GUID(OCNaroWrappers::OCStandard_GUID^ aGuid) 
{
  nativeHandle = new Standard_GUID(*((Standard_GUID*)aGuid->Handle));
}

 Standard_UUID OCStandard_GUID::ToUUID()
{
  return ((Standard_GUID*)nativeHandle)->ToUUID();
}

 void OCStandard_GUID::ToCString(Standard_PCharacter aStrGuid)
{
  ((Standard_GUID*)nativeHandle)->ToCString(aStrGuid);
}

 void OCStandard_GUID::ToExtString(Standard_PExtCharacter aStrGuid)
{
  ((Standard_GUID*)nativeHandle)->ToExtString(aStrGuid);
}

 System::Boolean OCStandard_GUID::IsSame(OCNaroWrappers::OCStandard_GUID^ uid)
{
  return OCConverter::StandardBooleanToBoolean(((Standard_GUID*)nativeHandle)->IsSame(*((Standard_GUID*)uid->Handle)));
}

 System::Boolean OCStandard_GUID::IsNotSame(OCNaroWrappers::OCStandard_GUID^ uid)
{
  return OCConverter::StandardBooleanToBoolean(((Standard_GUID*)nativeHandle)->IsNotSame(*((Standard_GUID*)uid->Handle)));
}

 void OCStandard_GUID::Assign(OCNaroWrappers::OCStandard_GUID^ uid)
{
  ((Standard_GUID*)nativeHandle)->Assign(*((Standard_GUID*)uid->Handle));
}

 void OCStandard_GUID::Assign(Standard_UUID uid)
{
  ((Standard_GUID*)nativeHandle)->Assign(uid);
}

 void OCStandard_GUID::ShallowDump(Standard_OStream& aStream)
{
  ((Standard_GUID*)nativeHandle)->ShallowDump(aStream);
}

 System::Boolean OCStandard_GUID::CheckGUIDFormat(System::String^ aGuid)
{
  return OCConverter::StandardBooleanToBoolean(Standard_GUID::CheckGUIDFormat(OCConverter::StringToStandardCString(aGuid)));
}

 Standard_Integer OCStandard_GUID::Hash(Standard_Integer Upper)
{
  return ((Standard_GUID*)nativeHandle)->Hash(Upper);
}

 Standard_Integer OCStandard_GUID::HashCode(OCNaroWrappers::OCStandard_GUID^ aguid, Standard_Integer Upper)
{
  return Standard_GUID::HashCode(*((Standard_GUID*)aguid->Handle), Upper);
}

 System::Boolean OCStandard_GUID::IsEqual(OCNaroWrappers::OCStandard_GUID^ string1, OCNaroWrappers::OCStandard_GUID^ string2)
{
  return OCConverter::StandardBooleanToBoolean(Standard_GUID::IsEqual(*((Standard_GUID*)string1->Handle), *((Standard_GUID*)string2->Handle)));
}


