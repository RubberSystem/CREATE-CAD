// File generated by CPPExt (MPV)
//
#ifndef _Standard_ErrorHandler_OCWrappers_HeaderFile
#define _Standard_ErrorHandler_OCWrappers_HeaderFile

// include native header
#include <Standard_ErrorHandler.hxx>
#include "../Converter.h"


#include "Standard_HandlerStatus.h"


namespace OCNaroWrappers
{

ref class OCStandard_Failure;
ref class OCStandard_ErrorHandlerCallback;
ref class OCStandard_Type;



public ref class OCStandard_ErrorHandler  {

protected:
  Standard_ErrorHandler* nativeHandle;
  OCStandard_ErrorHandler(OCDummy^) {};

public:
  property Standard_ErrorHandler* Handle
  {
    Standard_ErrorHandler* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStandard_ErrorHandler(Standard_ErrorHandler* nativeHandle);

// Methods PUBLIC

//! Create a ErrorHandler (to be used with try{}catch(){}). <br>
//!           It uses the "setjmp" and "longjmp" routines. <br>
OCStandard_ErrorHandler();

//! Removes handler from the handlers list <br>
 /*instead*/  void Unlink() ;

//! Returns "True" if the caught exception has the same type <br>
//!          or inherits from "aType" <br>
 /*instead*/  System::Boolean Catches(OCNaroWrappers::OCStandard_Type^ aType) ;

//! Returns label for jump <br>
 /*instead*/  Standard_JmpBuf& Label() ;

//! Returns the current Error. <br>
 /*instead*/  OCStandard_Failure^ Error() ;

//! Returns the caught exception. <br>
//! <br>
static /*instead*/  OCStandard_Failure^ LastCaughtError() ;

//! Test if the code is currently running in a try block <br>
static /*instead*/  System::Boolean IsInTryBlock() ;

~OCStandard_ErrorHandler()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
