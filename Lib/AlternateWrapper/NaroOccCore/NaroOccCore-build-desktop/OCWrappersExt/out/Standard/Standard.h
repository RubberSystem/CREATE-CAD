// File generated by CPPExt (Package)
//

#ifndef _Standard_OCWrappers_HeaderFile
#define _Standard_OCWrappers_HeaderFile

// Include the wrapped header
#include <Standard.hxx>

#include "Standard_ErrorHandlerCallback.h"
#include "Standard_ErrorHandler.h"
#include "Standard_AncestorIterator.h"
#include "Standard_Storable.h"
#include "Standard_Persistent.h"
#include "Standard_GUID.h"
#include "Standard_Transient.h"
#include "Standard_Type.h"
#include "Standard_Failure.h"


namespace OCNaroWrappers
{

public ref class OCStandard abstract sealed
{

public:
// Methods

//!  Allocates memory blocks <br>
//!           aSize - bytes to  allocate <br>
static /*instead*/  Standard_Address Allocate(Standard_Size aSize) ;

//!  Deallocates memory blocks <br>
//!           aStorage - previously allocated memory block to be freed <br>
static /*instead*/  void Free(Standard_Address& aStorage) ;

//!  Reallocates memory blocks <br>
//!           aStorage - previously allocated memory block <br>
//!           aNewSize - new size in bytes <br>
static /*instead*/  Standard_Address Reallocate(Standard_Address& aStorage, Standard_Size aNewSize) ;

//!  Deallocates the storage retained on the free list <br>
//!           and clears the list. <br>
//!           Returns non-zero if some memory has been actually freed. <br>
static /*instead*/  Standard_Integer Purge() ;

//! Returns boolean flag indicating whether OCCT is <br>
//!          operating in reentrant mode. This flag affects OCCT <br>
//!          memory manager, exception and signal handling, <br>
//!          operations with handles etc., making them thread-safe. <br>
static /*instead*/  System::Boolean IsReentrant() ;

//! Sets boolean flag indicating whether OCCT is <br>
//!          operating in reentrant mode. <br>
//!          See method IsReentrant() for more information. <br>
//!          Note: This method may be called only when no any other <br>
//!                thread using OCCT exists <br>
static /*instead*/  void SetReentrant(System::Boolean isReentrant) ;


};

}; // OCNaroWrappers

#endif
