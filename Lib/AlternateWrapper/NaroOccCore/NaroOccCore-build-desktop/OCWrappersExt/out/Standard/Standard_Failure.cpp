// File generated by CPPExt (CPP file)
//

#include "Standard_Failure.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCStandard_Failure::OCStandard_Failure(Handle(Standard_Failure)* nativeHandle) : OCStandard_Transient((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Standard_Failure(*nativeHandle);
}

OCStandard_Failure::OCStandard_Failure() : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Standard_Failure(new Standard_Failure());
}

OCStandard_Failure::OCStandard_Failure(System::String^ aString) : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Standard_Failure(new Standard_Failure(OCConverter::StringToStandardCString(aString)));
}

 void OCStandard_Failure::Print(Standard_OStream& s)
{
  (*((Handle_Standard_Failure*)nativeHandle))->Print(s);
}

 System::String^ OCStandard_Failure::GetMessageString()
{
  return OCConverter::StandardCStringToString((*((Handle_Standard_Failure*)nativeHandle))->GetMessageString());
}

 void OCStandard_Failure::SetMessageString(System::String^ aMessage)
{
  (*((Handle_Standard_Failure*)nativeHandle))->SetMessageString(OCConverter::StringToStandardCString(aMessage));
}

 void OCStandard_Failure::Reraise()
{
  (*((Handle_Standard_Failure*)nativeHandle))->Reraise();
}

 void OCStandard_Failure::Reraise(System::String^ aMessage)
{
  (*((Handle_Standard_Failure*)nativeHandle))->Reraise(OCConverter::StringToStandardCString(aMessage));
}

 void OCStandard_Failure::Reraise(Standard_SStream aReason)
{
  (*((Handle_Standard_Failure*)nativeHandle))->Reraise(aReason);
}

 void OCStandard_Failure::Raise(System::String^ aMessage)
{
  Standard_Failure::Raise(OCConverter::StringToStandardCString(aMessage));
}

 void OCStandard_Failure::Raise(Standard_SStream aReason)
{
  Standard_Failure::Raise(aReason);
}

OCStandard_Failure^ OCStandard_Failure::NewInstance(System::String^ aMessage)
{
  Handle(Standard_Failure) tmp = Standard_Failure::NewInstance(OCConverter::StringToStandardCString(aMessage));
  return gcnew OCStandard_Failure(&tmp);
}

 void OCStandard_Failure::Jump()
{
  (*((Handle_Standard_Failure*)nativeHandle))->Jump();
}

OCStandard_Failure^ OCStandard_Failure::Caught()
{
  Handle(Standard_Failure) tmp = Standard_Failure::Caught();
  return gcnew OCStandard_Failure(&tmp);
}


