// File generated by CPPExt (MPV)
//
#ifndef _Standard_Storable_OCWrappers_HeaderFile
#define _Standard_Storable_OCWrappers_HeaderFile

// include native header
#include <Standard_Storable.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{



//! This class Storable is an abstract class that allows built-in <br>
//!          primitive types to be extended. They are not themselves <br>
//!          persistent, but are known by the database, therefore can be used <br>
//!         to define the internal representation of persistent objects. <br>
//!         Otherwise, all the fields of subclasses of Object MUST inherit <br>
//!         from Storable. <br>
//! <br>
//!         This class provides also a framework for copying, comparing and <br>
//!         printing. <br>
public ref class OCStandard_Storable  {

protected:
  Standard_Storable* nativeHandle;
  OCStandard_Storable(OCDummy^) {};

public:
  property Standard_Storable* Handle
  {
    Standard_Storable* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStandard_Storable(Standard_Storable* nativeHandle);

// Methods PUBLIC


virtual /*instead*/  void Delete() ;

//! Returns a hashed value denoting <me>. This value is in <br>
//!         the range 1..<Upper>. <br>
virtual /*instead*/  Standard_Integer HashCode(Standard_Integer Upper) ;

//! Returns true if the direct contents of <me> and <br>
//!         <Other> are memberwise equal. <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCStandard_Storable^ Other) ;

//! Returns true if the Deep contents of <me> and <br>
//!         <Other> are memberwise equal. <br>
 /*instead*/  System::Boolean IsSimilar(OCNaroWrappers::OCStandard_Storable^ Other) ;

//! Prints the contents at the first level of <me> on <br>
//!         the stream <s>. The Root version of ShallowDump prints <br>
//!         the name of the class <me> is instance of, followed by <br>
//!         its memory address. <br>
virtual /*instead*/  void ShallowDump(Standard_OStream& S) ;

~OCStandard_Storable()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
