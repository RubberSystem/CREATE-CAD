// File generated by CPPExt (MPV)
//
#ifndef _Standard_GUID_OCWrappers_HeaderFile
#define _Standard_GUID_OCWrappers_HeaderFile

// include native header
#include <Standard_GUID.hxx>
#include "../Converter.h"


#include "Standard_Storable.h"


namespace OCNaroWrappers
{




public ref class OCStandard_GUID  {

protected:
  Standard_GUID* nativeHandle;
  OCStandard_GUID(OCDummy^) {};

public:
  property Standard_GUID* Handle
  {
    Standard_GUID* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCStandard_GUID(Standard_GUID* nativeHandle);

// Methods PUBLIC


OCStandard_GUID();

//! build a GUID from an ascii string with the <br>
//!          following format: <br>
//!          Length : 36 char <br>
//!          "00000000-0000-0000-0000-000000000000" <br>
OCStandard_GUID(System::String^ aGuid);

//! build a GUID from an unicode string with the <br>
//!          following format: <br>
//! <br>
//!          "00000000-0000-0000-0000-000000000000" <br>
OCStandard_GUID(System::String^ aGuid);


OCStandard_GUID(Standard_Integer a32b, Standard_ExtCharacter a16b1, Standard_ExtCharacter a16b2, Standard_ExtCharacter a16b3, Standard_Byte a8b1, Standard_Byte a8b2, Standard_Byte a8b3, Standard_Byte a8b4, Standard_Byte a8b5, Standard_Byte a8b6);


OCStandard_GUID(Standard_UUID aGuid);


OCStandard_GUID(OCNaroWrappers::OCStandard_GUID^ aGuid);


 /*instead*/  Standard_UUID ToUUID() ;

//! translate the GUID into ascii string <br>
//!          the aStrGuid is allocated by user. <br>
//!          the guid have the following format: <br>
//! <br>
//!          "00000000-0000-0000-0000-000000000000" <br>
 /*instead*/  void ToCString(Standard_PCharacter aStrGuid) ;

//! translate the GUID into unicode string <br>
//!          the aStrGuid is allocated by user. <br>
//!          the guid have the following format: <br>
//! <br>
//!          "00000000-0000-0000-0000-000000000000" <br>
 /*instead*/  void ToExtString(Standard_PExtCharacter aStrGuid) ;


 /*instead*/  System::Boolean IsSame(OCNaroWrappers::OCStandard_GUID^ uid) ;


 /*instead*/  System::Boolean IsNotSame(OCNaroWrappers::OCStandard_GUID^ uid) ;


 /*instead*/  void Assign(OCNaroWrappers::OCStandard_GUID^ uid) ;


 /*instead*/  void Assign(Standard_UUID uid) ;

//! Display the GUID with the following format: <br>
//! <br>
//!          "00000000-0000-0000-0000-000000000000" <br>
virtual /*instead*/  void ShallowDump(Standard_OStream& aStream) override;

//! Check the format of a GUID string. <br>
//!          It checks the size, the position of the '-' and the correct size of fields. <br>
static /*instead*/  System::Boolean CheckGUIDFormat(System::String^ aGuid) ;

//! Hash function for GUID. <br>
 /*instead*/  Standard_Integer Hash(Standard_Integer Upper) ;

//! H method used by collections. <br>
static /*instead*/  Standard_Integer HashCode(OCNaroWrappers::OCStandard_GUID^ aguid, Standard_Integer Upper) ;

//! Returns True  when the two GUID are the same. <br>
static /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCStandard_GUID^ string1, OCNaroWrappers::OCStandard_GUID^ string2) ;

~OCStandard_GUID()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
