// File generated by CPPExt (Transient)
//
#ifndef _Standard_Type_OCWrappers_HeaderFile
#define _Standard_Type_OCWrappers_HeaderFile

// include the wrapped class
#include <Standard_Type.hxx>
#include "../Converter.h"

#include "Standard_Transient.h"

#include "Standard_KindOfType.h"


namespace OCNaroWrappers
{

ref class OCStandard_AncestorIterator;



//!   The class <Type> provides services to find out information <br>
//!   about a type defined in CDL. <br>
public ref class OCStandard_Type : OCStandard_Transient {

protected:
  // dummy constructor;
  OCStandard_Type(OCDummy^) : OCStandard_Transient((OCDummy^)nullptr) {};

public:

// constructor from native
OCStandard_Type(Handle(Standard_Type)* nativeHandle);

// Methods PUBLIC


//!   Returns the type name of <me>. <br>
 /*instead*/  System::String^ Name() ;


//!   Returns the size of <me> in bytes. <br>
 /*instead*/  Standard_Integer Size() ;


//!   The constructor for a imported type. <br>
OCStandard_Type(System::String^ aName, Standard_Integer aSize);


//!   The constructor for a primitive. <br>
OCStandard_Type(System::String^ aName, Standard_Integer aSize, Standard_Integer aNumberOfParent, Standard_Address aAncestors);


//!   The constructor for an enumeration. <br>
OCStandard_Type(System::String^ aName, Standard_Integer aSize, Standard_Integer aNumberOfElement, Standard_Integer aNumberOfParent, Standard_Address anAncestors, Standard_Address aElements);


//!   The constructor for a class. <br>
OCStandard_Type(System::String^ aName, Standard_Integer aSize, Standard_Integer aNumberOfParent, Standard_Address anAncestors, Standard_Address aFields);


//!   Returns "True", if <me> is the same as <aOther>, <br>
//!   or inherits from <aOther>. <br>
//!   Note that multiple inheritance is not supported. <br>
 /*instead*/  System::Boolean SubType(OCNaroWrappers::OCStandard_Type^ aOther) ;


//!   Returns "True", if <me> or one of its ancestors has the name <br>
//!   equal to theName. <br>
//!   Note that multiple inheritance is not supported. <br>
 /*instead*/  System::Boolean SubType(System::String^ theName) ;


//!   Returns "True", if the type is imported. <br>
 /*instead*/  System::Boolean IsImported() ;


//!   Returns "True", if the type is a primitive. <br>
 /*instead*/  System::Boolean IsPrimitive() ;


//!   Returns "True", if the type is an "Enumeration". <br>
 /*instead*/  System::Boolean IsEnumeration() ;


//!   Returns "True", if the type is a "Class". <br>
 /*instead*/  System::Boolean IsClass() ;


//!   Returns the number of direct parents of the class. <br>
//! <br>
 /*instead*/  Standard_Integer NumberOfParent() ;


//!   Returns the number of ancestors of the class. <br>
//! <br>
 /*instead*/  Standard_Integer NumberOfAncestor() ;


//!   Prints the Information about type. <br>
 /*instead*/  void ShallowDump() ;


//!   Prints the Information about type. <br>
 /*instead*/  void ShallowDump(Standard_OStream& S) ;


//!   Prints on the stream <s> the name of Type. <br>
//!  Warning: <br>
//!   The operator "OStream& operator<< (Standard_OStream&, <br>
//!                                      Handle(Standard_Type)&)" <br>
//!   is implemented. (This operator uses the method Print) <br>
//! <br>
 /*instead*/  void Print(Standard_OStream& s) ;

~OCStandard_Type()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
