// File generated by CPPExt (CPP file)
//

#include "LProp_CurAndInf.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCLProp_CurAndInf::OCLProp_CurAndInf(LProp_CurAndInf* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCLProp_CurAndInf::OCLProp_CurAndInf() 
{
  nativeHandle = new LProp_CurAndInf();
}

 void OCLProp_CurAndInf::AddInflection(Standard_Real Param)
{
  ((LProp_CurAndInf*)nativeHandle)->AddInflection(Param);
}

 void OCLProp_CurAndInf::AddExtCur(Standard_Real Param, System::Boolean IsMin)
{
  ((LProp_CurAndInf*)nativeHandle)->AddExtCur(Param, OCConverter::BooleanToStandardBoolean(IsMin));
}

 void OCLProp_CurAndInf::Clear()
{
  ((LProp_CurAndInf*)nativeHandle)->Clear();
}

 System::Boolean OCLProp_CurAndInf::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((LProp_CurAndInf*)nativeHandle)->IsEmpty());
}

 Standard_Integer OCLProp_CurAndInf::NbPoints()
{
  return ((LProp_CurAndInf*)nativeHandle)->NbPoints();
}

 Standard_Real OCLProp_CurAndInf::Parameter(Standard_Integer N)
{
  return ((LProp_CurAndInf*)nativeHandle)->Parameter(N);
}

 OCLProp_CIType OCLProp_CurAndInf::Type(Standard_Integer N)
{
  return (OCLProp_CIType)(((LProp_CurAndInf*)nativeHandle)->Type(N));
}


