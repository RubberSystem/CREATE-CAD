// File generated by CPPExt (CPP file)
//

#include "TopLoc_IndexedMapOfLocation.h"
#include "../Converter.h"
#include "TopLoc_Location.h"
#include "TopLoc_MapLocationHasher.h"
#include "TopLoc_IndexedMapNodeOfIndexedMapOfLocation.h"


using namespace OCNaroWrappers;

OCTopLoc_IndexedMapOfLocation::OCTopLoc_IndexedMapOfLocation(TopLoc_IndexedMapOfLocation* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCTopLoc_IndexedMapOfLocation::OCTopLoc_IndexedMapOfLocation(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new TopLoc_IndexedMapOfLocation(NbBuckets);
}

OCTopLoc_IndexedMapOfLocation^ OCTopLoc_IndexedMapOfLocation::Assign(OCNaroWrappers::OCTopLoc_IndexedMapOfLocation^ Other)
{
  TopLoc_IndexedMapOfLocation* tmp = new TopLoc_IndexedMapOfLocation(0);
  *tmp = ((TopLoc_IndexedMapOfLocation*)nativeHandle)->Assign(*((TopLoc_IndexedMapOfLocation*)Other->Handle));
  return gcnew OCTopLoc_IndexedMapOfLocation(tmp);
}

 void OCTopLoc_IndexedMapOfLocation::ReSize(Standard_Integer NbBuckets)
{
  ((TopLoc_IndexedMapOfLocation*)nativeHandle)->ReSize(NbBuckets);
}

 Standard_Integer OCTopLoc_IndexedMapOfLocation::Add(OCNaroWrappers::OCTopLoc_Location^ K)
{
  return ((TopLoc_IndexedMapOfLocation*)nativeHandle)->Add(*((TopLoc_Location*)K->Handle));
}

 void OCTopLoc_IndexedMapOfLocation::Substitute(Standard_Integer I, OCNaroWrappers::OCTopLoc_Location^ K)
{
  ((TopLoc_IndexedMapOfLocation*)nativeHandle)->Substitute(I, *((TopLoc_Location*)K->Handle));
}

 void OCTopLoc_IndexedMapOfLocation::RemoveLast()
{
  ((TopLoc_IndexedMapOfLocation*)nativeHandle)->RemoveLast();
}

 System::Boolean OCTopLoc_IndexedMapOfLocation::Contains(OCNaroWrappers::OCTopLoc_Location^ K)
{
  return OCConverter::StandardBooleanToBoolean(((TopLoc_IndexedMapOfLocation*)nativeHandle)->Contains(*((TopLoc_Location*)K->Handle)));
}

OCTopLoc_Location^ OCTopLoc_IndexedMapOfLocation::FindKey(Standard_Integer I)
{
  TopLoc_Location* tmp = new TopLoc_Location();
  *tmp = ((TopLoc_IndexedMapOfLocation*)nativeHandle)->FindKey(I);
  return gcnew OCTopLoc_Location(tmp);
}

 Standard_Integer OCTopLoc_IndexedMapOfLocation::FindIndex(OCNaroWrappers::OCTopLoc_Location^ K)
{
  return ((TopLoc_IndexedMapOfLocation*)nativeHandle)->FindIndex(*((TopLoc_Location*)K->Handle));
}


