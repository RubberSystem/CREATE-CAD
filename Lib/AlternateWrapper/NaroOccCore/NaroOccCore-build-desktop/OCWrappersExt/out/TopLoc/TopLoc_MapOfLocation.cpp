// File generated by CPPExt (CPP file)
//

#include "TopLoc_MapOfLocation.h"
#include "../Converter.h"
#include "TopLoc_Location.h"
#include "TopLoc_MapLocationHasher.h"
#include "TopLoc_StdMapNodeOfMapOfLocation.h"
#include "TopLoc_MapIteratorOfMapOfLocation.h"


using namespace OCNaroWrappers;

OCTopLoc_MapOfLocation::OCTopLoc_MapOfLocation(TopLoc_MapOfLocation* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCTopLoc_MapOfLocation::OCTopLoc_MapOfLocation(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new TopLoc_MapOfLocation(NbBuckets);
}

OCTopLoc_MapOfLocation^ OCTopLoc_MapOfLocation::Assign(OCNaroWrappers::OCTopLoc_MapOfLocation^ Other)
{
  TopLoc_MapOfLocation* tmp = new TopLoc_MapOfLocation(0);
  *tmp = ((TopLoc_MapOfLocation*)nativeHandle)->Assign(*((TopLoc_MapOfLocation*)Other->Handle));
  return gcnew OCTopLoc_MapOfLocation(tmp);
}

 void OCTopLoc_MapOfLocation::ReSize(Standard_Integer NbBuckets)
{
  ((TopLoc_MapOfLocation*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCTopLoc_MapOfLocation::Add(OCNaroWrappers::OCTopLoc_Location^ aKey)
{
  return OCConverter::StandardBooleanToBoolean(((TopLoc_MapOfLocation*)nativeHandle)->Add(*((TopLoc_Location*)aKey->Handle)));
}

 System::Boolean OCTopLoc_MapOfLocation::Contains(OCNaroWrappers::OCTopLoc_Location^ aKey)
{
  return OCConverter::StandardBooleanToBoolean(((TopLoc_MapOfLocation*)nativeHandle)->Contains(*((TopLoc_Location*)aKey->Handle)));
}

 System::Boolean OCTopLoc_MapOfLocation::Remove(OCNaroWrappers::OCTopLoc_Location^ aKey)
{
  return OCConverter::StandardBooleanToBoolean(((TopLoc_MapOfLocation*)nativeHandle)->Remove(*((TopLoc_Location*)aKey->Handle)));
}


