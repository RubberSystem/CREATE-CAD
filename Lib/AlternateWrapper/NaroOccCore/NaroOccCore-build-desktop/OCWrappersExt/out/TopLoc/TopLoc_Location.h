// File generated by CPPExt (MPV)
//
#ifndef _TopLoc_Location_OCWrappers_HeaderFile
#define _TopLoc_Location_OCWrappers_HeaderFile

// include native header
#include <TopLoc_Location.hxx>
#include "../Converter.h"


#include "TopLoc_SListOfItemLocation.h"


namespace OCNaroWrappers
{

ref class OCgp_Trsf;
ref class OCTopLoc_Datum3D;


//! A Location is a composite transition. It comprises a <br>
//! series of elementary reference coordinates, i.e. <br>
//! objects of type TopLoc_Datum3D, and the powers to <br>
//! which these objects are raised. <br>
public ref class OCTopLoc_Location  {

protected:
  TopLoc_Location* nativeHandle;
  OCTopLoc_Location(OCDummy^) {};

public:
  property TopLoc_Location* Handle
  {
    TopLoc_Location* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopLoc_Location(TopLoc_Location* nativeHandle);

// Methods PUBLIC

//! Constructs an empty local coordinate system object. <br>
//! Note: A Location constructed from a default datum is said to be "empty". <br>
OCTopLoc_Location();

//! Constructs the local coordinate system object defined <br>
//! by the transformation T. T invokes in turn, a TopLoc_Datum3D object. <br>
OCTopLoc_Location(OCNaroWrappers::OCgp_Trsf^ T);

//! Constructs the local coordinate system object defined by the 3D datum D. <br>
//! Exceptions <br>
//! Standard_ConstructionError if the transformation <br>
//! T does not represent a 3D coordinate system. <br>
OCTopLoc_Location(OCNaroWrappers::OCTopLoc_Datum3D^ D);

//! Returns true if this location is equal to the Identity transformation. <br>
 /*instead*/  System::Boolean IsIdentity() ;

//! Resets this location to the Identity transformation. <br>
 /*instead*/  void Identity() ;

//! Returns    the  first   elementary  datum  of  the <br>
//!          Location.  Use the NextLocation function recursively to access <br>
//! the other data comprising this location. <br>
//! Exceptions <br>
//! Standard_NoSuchObject if this location is empty. <br>
 /*instead*/  OCTopLoc_Datum3D^ FirstDatum() ;

//! Returns   the  power  elevation  of    the   first <br>
//!          elementary datum. <br>
//! Exceptions <br>
//! Standard_NoSuchObject if this location is empty. <br>
 /*instead*/  Standard_Integer FirstPower() ;

//! Returns  a Location representing  <me> without the <br>
//!          first datum. We have the relation : <br>
//! <br>
//!            <me> = NextLocation() * FirstDatum() ^ FirstPower() <br>
//!  Exceptions <br>
//!  Standard_NoSuchObject if this location is empty. <br>
 /*instead*/  OCTopLoc_Location^ NextLocation() ;

//! Returns  the transformation    associated  to  the <br>
//!          coordinate system. <br>
//! <br>
 /*instead*/  OCgp_Trsf^ Transformation() ;

//! Returns the inverse of <me>. <br>
//! <br>
//!          <me> * Inverted() is an Identity. <br>
 /*instead*/  OCTopLoc_Location^ Inverted() ;

//! Returns <me> * <Other>, the  elementary datums are <br>
//!          concatenated. <br>
//! <br>
 /*instead*/  OCTopLoc_Location^ Multiplied(OCNaroWrappers::OCTopLoc_Location^ Other) ;

//! Returns  <me> / <Other>. <br>
//! <br>
 /*instead*/  OCTopLoc_Location^ Divided(OCNaroWrappers::OCTopLoc_Location^ Other) ;

//! Returns <Other>.Inverted() * <me>. <br>
 /*instead*/  OCTopLoc_Location^ Predivided(OCNaroWrappers::OCTopLoc_Location^ Other) ;

//! Returns me at the power <pwr>.   If <pwr>  is zero <br>
//!          returns  Identity.  <pwr> can  be lower  than zero <br>
//!          (usual meaning for powers). <br>
 /*instead*/  OCTopLoc_Location^ Powered(Standard_Integer pwr) ;

//! Returns a hashed value for this local coordinate system. <br>
//! This value is used, with map tables, to store and <br>
//! retrieve the object easily, and is in the range [ 1..Upper ]. <br>
 /*instead*/  Standard_Integer HashCode(Standard_Integer Upper) ;

//! Returns true if this location and the location Other <br>
//! have the same elementary data, i.e. contain the same <br>
//! series of TopLoc_Datum3D and respective powers. <br>
//! This method is an alias for operator ==. <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCTopLoc_Location^ Other) ;

//! Returns true if this location and the location Other do <br>
//! not have the same elementary data, i.e. do not <br>
//! contain the same series of TopLoc_Datum3D and respective powers. <br>
//! This method is an alias for operator !=. <br>
 /*instead*/  System::Boolean IsDifferent(OCNaroWrappers::OCTopLoc_Location^ Other) ;

//! Prints the contents of <me> on the stream <s>. <br>
 /*instead*/  void ShallowDump(Standard_OStream& S) ;

~OCTopLoc_Location()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
