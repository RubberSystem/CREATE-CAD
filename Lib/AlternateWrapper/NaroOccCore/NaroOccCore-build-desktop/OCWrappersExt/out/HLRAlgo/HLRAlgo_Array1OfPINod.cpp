// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_Array1OfPINod.h"
#include "../Converter.h"
#include "HLRAlgo_PolyInternalNode.h"


using namespace OCNaroWrappers;

OCHLRAlgo_Array1OfPINod::OCHLRAlgo_Array1OfPINod(HLRAlgo_Array1OfPINod* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCHLRAlgo_Array1OfPINod::OCHLRAlgo_Array1OfPINod(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new HLRAlgo_Array1OfPINod(Low, Up);
}

OCHLRAlgo_Array1OfPINod::OCHLRAlgo_Array1OfPINod(OCNaroWrappers::OCHLRAlgo_PolyInternalNode^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new HLRAlgo_Array1OfPINod(*((Handle_HLRAlgo_PolyInternalNode*)Item->Handle), Low, Up);
}

 void OCHLRAlgo_Array1OfPINod::Init(OCNaroWrappers::OCHLRAlgo_PolyInternalNode^ V)
{
  ((HLRAlgo_Array1OfPINod*)nativeHandle)->Init(*((Handle_HLRAlgo_PolyInternalNode*)V->Handle));
}

 System::Boolean OCHLRAlgo_Array1OfPINod::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((HLRAlgo_Array1OfPINod*)nativeHandle)->IsAllocated());
}

OCHLRAlgo_Array1OfPINod^ OCHLRAlgo_Array1OfPINod::Assign(OCNaroWrappers::OCHLRAlgo_Array1OfPINod^ Other)
{
  HLRAlgo_Array1OfPINod* tmp = new HLRAlgo_Array1OfPINod(0, 0);
  *tmp = ((HLRAlgo_Array1OfPINod*)nativeHandle)->Assign(*((HLRAlgo_Array1OfPINod*)Other->Handle));
  return gcnew OCHLRAlgo_Array1OfPINod(tmp);
}

 Standard_Integer OCHLRAlgo_Array1OfPINod::Length()
{
  return ((HLRAlgo_Array1OfPINod*)nativeHandle)->Length();
}

 Standard_Integer OCHLRAlgo_Array1OfPINod::Lower()
{
  return ((HLRAlgo_Array1OfPINod*)nativeHandle)->Lower();
}

 Standard_Integer OCHLRAlgo_Array1OfPINod::Upper()
{
  return ((HLRAlgo_Array1OfPINod*)nativeHandle)->Upper();
}

 void OCHLRAlgo_Array1OfPINod::SetValue(Standard_Integer Index, OCNaroWrappers::OCHLRAlgo_PolyInternalNode^ Value)
{
  ((HLRAlgo_Array1OfPINod*)nativeHandle)->SetValue(Index, *((Handle_HLRAlgo_PolyInternalNode*)Value->Handle));
}

OCHLRAlgo_PolyInternalNode^ OCHLRAlgo_Array1OfPINod::Value(Standard_Integer Index)
{
  Handle(HLRAlgo_PolyInternalNode) tmp = ((HLRAlgo_Array1OfPINod*)nativeHandle)->Value(Index);
  return gcnew OCHLRAlgo_PolyInternalNode(&tmp);
}

OCHLRAlgo_PolyInternalNode^ OCHLRAlgo_Array1OfPINod::ChangeValue(Standard_Integer Index)
{
  Handle(HLRAlgo_PolyInternalNode) tmp = ((HLRAlgo_Array1OfPINod*)nativeHandle)->ChangeValue(Index);
  return gcnew OCHLRAlgo_PolyInternalNode(&tmp);
}


