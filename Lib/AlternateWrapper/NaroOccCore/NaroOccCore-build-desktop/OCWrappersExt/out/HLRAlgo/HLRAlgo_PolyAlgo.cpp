// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_PolyAlgo.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfTransient.h"
#include "../TColStd/TColStd_Array1OfTransient.h"
#include "HLRAlgo_EdgeStatus.h"


using namespace OCNaroWrappers;

OCHLRAlgo_PolyAlgo::OCHLRAlgo_PolyAlgo(Handle(HLRAlgo_PolyAlgo)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_HLRAlgo_PolyAlgo(*nativeHandle);
}

OCHLRAlgo_PolyAlgo::OCHLRAlgo_PolyAlgo() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_HLRAlgo_PolyAlgo(new HLRAlgo_PolyAlgo());
}

 void OCHLRAlgo_PolyAlgo::Init(OCNaroWrappers::OCTColStd_HArray1OfTransient^ HShell)
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->Init(*((Handle_TColStd_HArray1OfTransient*)HShell->Handle));
}

OCTColStd_Array1OfTransient^ OCHLRAlgo_PolyAlgo::PolyShell()
{
  TColStd_Array1OfTransient* tmp = new TColStd_Array1OfTransient(0, 0);
  *tmp = (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->PolyShell();
  return gcnew OCTColStd_Array1OfTransient(tmp);
}

 void OCHLRAlgo_PolyAlgo::Clear()
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->Clear();
}

 void OCHLRAlgo_PolyAlgo::Update()
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->Update();
}

 void OCHLRAlgo_PolyAlgo::InitHide()
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->InitHide();
}

 System::Boolean OCHLRAlgo_PolyAlgo::MoreHide()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->MoreHide());
}

 void OCHLRAlgo_PolyAlgo::NextHide()
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->NextHide();
}

 void OCHLRAlgo_PolyAlgo::Hide(Standard_Address& Coordinates, OCNaroWrappers::OCHLRAlgo_EdgeStatus^ status, Standard_Integer& Index, System::Boolean& reg1, System::Boolean& regn, System::Boolean& outl, System::Boolean& intl)
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->Hide(Coordinates, *((HLRAlgo_EdgeStatus*)status->Handle), Index, (Standard_Boolean&)(reg1), (Standard_Boolean&)(regn), (Standard_Boolean&)(outl), (Standard_Boolean&)(intl));
}

 void OCHLRAlgo_PolyAlgo::InitShow()
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->InitShow();
}

 System::Boolean OCHLRAlgo_PolyAlgo::MoreShow()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->MoreShow());
}

 void OCHLRAlgo_PolyAlgo::NextShow()
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->NextShow();
}

 void OCHLRAlgo_PolyAlgo::Show(Standard_Address& Coordinates, Standard_Integer& Index, System::Boolean& reg1, System::Boolean& regn, System::Boolean& outl, System::Boolean& intl)
{
  (*((Handle_HLRAlgo_PolyAlgo*)nativeHandle))->Show(Coordinates, Index, (Standard_Boolean&)(reg1), (Standard_Boolean&)(regn), (Standard_Boolean&)(outl), (Standard_Boolean&)(intl));
}


