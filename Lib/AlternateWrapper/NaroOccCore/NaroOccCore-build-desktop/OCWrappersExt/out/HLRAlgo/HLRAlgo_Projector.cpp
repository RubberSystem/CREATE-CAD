// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_Projector.h"
#include "../Converter.h"
#include "../gp/gp_Ax2.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Lin.h"


using namespace OCNaroWrappers;

OCHLRAlgo_Projector::OCHLRAlgo_Projector(HLRAlgo_Projector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCHLRAlgo_Projector::OCHLRAlgo_Projector() 
{
  nativeHandle = new HLRAlgo_Projector();
}

OCHLRAlgo_Projector::OCHLRAlgo_Projector(OCNaroWrappers::OCgp_Ax2^ CS) 
{
  nativeHandle = new HLRAlgo_Projector(*((gp_Ax2*)CS->Handle));
}

OCHLRAlgo_Projector::OCHLRAlgo_Projector(OCNaroWrappers::OCgp_Ax2^ CS, Standard_Real Focus) 
{
  nativeHandle = new HLRAlgo_Projector(*((gp_Ax2*)CS->Handle), Focus);
}

OCHLRAlgo_Projector::OCHLRAlgo_Projector(OCNaroWrappers::OCgp_Trsf^ T, System::Boolean Persp, Standard_Real Focus) 
{
  nativeHandle = new HLRAlgo_Projector(*((gp_Trsf*)T->Handle), OCConverter::BooleanToStandardBoolean(Persp), Focus);
}

OCHLRAlgo_Projector::OCHLRAlgo_Projector(OCNaroWrappers::OCgp_Trsf^ T, System::Boolean Persp, Standard_Real Focus, OCNaroWrappers::OCgp_Vec2d^ v1, OCNaroWrappers::OCgp_Vec2d^ v2, OCNaroWrappers::OCgp_Vec2d^ v3) 
{
  nativeHandle = new HLRAlgo_Projector(*((gp_Trsf*)T->Handle), OCConverter::BooleanToStandardBoolean(Persp), Focus, *((gp_Vec2d*)v1->Handle), *((gp_Vec2d*)v2->Handle), *((gp_Vec2d*)v3->Handle));
}

 void OCHLRAlgo_Projector::Set(OCNaroWrappers::OCgp_Trsf^ T, System::Boolean Persp, Standard_Real Focus)
{
  ((HLRAlgo_Projector*)nativeHandle)->Set(*((gp_Trsf*)T->Handle), OCConverter::BooleanToStandardBoolean(Persp), Focus);
}

 void OCHLRAlgo_Projector::Directions(OCNaroWrappers::OCgp_Vec2d^ D1, OCNaroWrappers::OCgp_Vec2d^ D2, OCNaroWrappers::OCgp_Vec2d^ D3)
{
  ((HLRAlgo_Projector*)nativeHandle)->Directions(*((gp_Vec2d*)D1->Handle), *((gp_Vec2d*)D2->Handle), *((gp_Vec2d*)D3->Handle));
}

 void OCHLRAlgo_Projector::Scaled(System::Boolean On)
{
  ((HLRAlgo_Projector*)nativeHandle)->Scaled(OCConverter::BooleanToStandardBoolean(On));
}

 System::Boolean OCHLRAlgo_Projector::Perspective()
{
  return OCConverter::StandardBooleanToBoolean(((HLRAlgo_Projector*)nativeHandle)->Perspective());
}

OCgp_Trsf^ OCHLRAlgo_Projector::Transformation()
{
  gp_Trsf* tmp = new gp_Trsf();
  *tmp = ((HLRAlgo_Projector*)nativeHandle)->Transformation();
  return gcnew OCgp_Trsf(tmp);
}

OCgp_Trsf^ OCHLRAlgo_Projector::InvertedTransformation()
{
  gp_Trsf* tmp = new gp_Trsf();
  *tmp = ((HLRAlgo_Projector*)nativeHandle)->InvertedTransformation();
  return gcnew OCgp_Trsf(tmp);
}

OCgp_Trsf^ OCHLRAlgo_Projector::FullTransformation()
{
  gp_Trsf* tmp = new gp_Trsf();
  *tmp = ((HLRAlgo_Projector*)nativeHandle)->FullTransformation();
  return gcnew OCgp_Trsf(tmp);
}

 Standard_Real OCHLRAlgo_Projector::Focus()
{
  return ((HLRAlgo_Projector*)nativeHandle)->Focus();
}

 void OCHLRAlgo_Projector::Transform(OCNaroWrappers::OCgp_Vec^ D)
{
  ((HLRAlgo_Projector*)nativeHandle)->Transform(*((gp_Vec*)D->Handle));
}

 void OCHLRAlgo_Projector::Transform(OCNaroWrappers::OCgp_Pnt^ Pnt)
{
  ((HLRAlgo_Projector*)nativeHandle)->Transform(*((gp_Pnt*)Pnt->Handle));
}

 void OCHLRAlgo_Projector::Project(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Pnt2d^ Pout)
{
  ((HLRAlgo_Projector*)nativeHandle)->Project(*((gp_Pnt*)P->Handle), *((gp_Pnt2d*)Pout->Handle));
}

 void OCHLRAlgo_Projector::Project(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real& X, Standard_Real& Y, Standard_Real& Z)
{
  ((HLRAlgo_Projector*)nativeHandle)->Project(*((gp_Pnt*)P->Handle), X, Y, Z);
}

 void OCHLRAlgo_Projector::Project(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1, OCNaroWrappers::OCgp_Pnt2d^ Pout, OCNaroWrappers::OCgp_Vec2d^ D1out)
{
  ((HLRAlgo_Projector*)nativeHandle)->Project(*((gp_Pnt*)P->Handle), *((gp_Vec*)D1->Handle), *((gp_Pnt2d*)Pout->Handle), *((gp_Vec2d*)D1out->Handle));
}

OCgp_Lin^ OCHLRAlgo_Projector::Shoot(Standard_Real X, Standard_Real Y)
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = ((HLRAlgo_Projector*)nativeHandle)->Shoot(X, Y);
  return gcnew OCgp_Lin(tmp);
}


