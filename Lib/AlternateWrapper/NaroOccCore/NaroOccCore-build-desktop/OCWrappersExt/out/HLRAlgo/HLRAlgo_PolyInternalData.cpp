// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_PolyInternalData.h"
#include "../Converter.h"
#include "HLRAlgo_HArray1OfTData.h"
#include "HLRAlgo_HArray1OfPISeg.h"
#include "HLRAlgo_HArray1OfPINod.h"
#include "HLRAlgo_Array1OfTData.h"
#include "HLRAlgo_Array1OfPISeg.h"
#include "HLRAlgo_Array1OfPINod.h"


using namespace OCNaroWrappers;

OCHLRAlgo_PolyInternalData::OCHLRAlgo_PolyInternalData(Handle(HLRAlgo_PolyInternalData)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_HLRAlgo_PolyInternalData(*nativeHandle);
}

OCHLRAlgo_PolyInternalData::OCHLRAlgo_PolyInternalData(Standard_Integer nbNod, Standard_Integer nbTri) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_HLRAlgo_PolyInternalData(new HLRAlgo_PolyInternalData(nbNod, nbTri));
}

 void OCHLRAlgo_PolyInternalData::UpdateLinks(Standard_Address& TData, Standard_Address& PISeg, Standard_Address& PINod)
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->UpdateLinks(TData, PISeg, PINod);
}

 Standard_Integer OCHLRAlgo_PolyInternalData::AddNode(Standard_Address Nod1RValues, Standard_Address Nod2RValues, Standard_Address& PINod1, Standard_Address& PINod2, Standard_Real coef1, Standard_Real X3, Standard_Real Y3, Standard_Real Z3)
{
  return (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->AddNode(Nod1RValues, Nod2RValues, PINod1, PINod2, coef1, X3, Y3, Z3);
}

 void OCHLRAlgo_PolyInternalData::UpdateLinks(Standard_Integer ip1, Standard_Integer ip2, Standard_Integer ip3, Standard_Address& TData1, Standard_Address& TData2, Standard_Address& PISeg1, Standard_Address& PISeg2, Standard_Address& PINod1, Standard_Address& PINod2)
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->UpdateLinks(ip1, ip2, ip3, TData1, TData2, PISeg1, PISeg2, PINod1, PINod2);
}

 void OCHLRAlgo_PolyInternalData::Dump()
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->Dump();
}

 void OCHLRAlgo_PolyInternalData::IncTData(Standard_Address& TData1, Standard_Address& TData2)
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->IncTData(TData1, TData2);
}

 void OCHLRAlgo_PolyInternalData::IncPISeg(Standard_Address& PISeg1, Standard_Address& PISeg2)
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->IncPISeg(PISeg1, PISeg2);
}

 void OCHLRAlgo_PolyInternalData::IncPINod(Standard_Address& PINod1, Standard_Address& PINod2)
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->IncPINod(PINod1, PINod2);
}

 void OCHLRAlgo_PolyInternalData::DecTData()
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->DecTData();
}

 void OCHLRAlgo_PolyInternalData::DecPISeg()
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->DecPISeg();
}

 void OCHLRAlgo_PolyInternalData::DecPINod()
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->DecPINod();
}

 Standard_Integer OCHLRAlgo_PolyInternalData::NbTData()
{
  return (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->NbTData();
}

 Standard_Integer OCHLRAlgo_PolyInternalData::NbPISeg()
{
  return (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->NbPISeg();
}

 Standard_Integer OCHLRAlgo_PolyInternalData::NbPINod()
{
  return (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->NbPINod();
}

 System::Boolean OCHLRAlgo_PolyInternalData::Planar()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->Planar());
}

 void OCHLRAlgo_PolyInternalData::Planar(System::Boolean B)
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->Planar(OCConverter::BooleanToStandardBoolean(B));
}

 System::Boolean OCHLRAlgo_PolyInternalData::IntOutL()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->IntOutL());
}

 void OCHLRAlgo_PolyInternalData::IntOutL(System::Boolean B)
{
  (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->IntOutL(OCConverter::BooleanToStandardBoolean(B));
}

OCHLRAlgo_Array1OfTData^ OCHLRAlgo_PolyInternalData::TData()
{
  HLRAlgo_Array1OfTData* tmp = new HLRAlgo_Array1OfTData(0, 0);
  *tmp = (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->TData();
  return gcnew OCHLRAlgo_Array1OfTData(tmp);
}

OCHLRAlgo_Array1OfPISeg^ OCHLRAlgo_PolyInternalData::PISeg()
{
  HLRAlgo_Array1OfPISeg* tmp = new HLRAlgo_Array1OfPISeg(0, 0);
  *tmp = (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->PISeg();
  return gcnew OCHLRAlgo_Array1OfPISeg(tmp);
}

OCHLRAlgo_Array1OfPINod^ OCHLRAlgo_PolyInternalData::PINod()
{
  HLRAlgo_Array1OfPINod* tmp = new HLRAlgo_Array1OfPINod(0, 0);
  *tmp = (*((Handle_HLRAlgo_PolyInternalData*)nativeHandle))->PINod();
  return gcnew OCHLRAlgo_Array1OfPINod(tmp);
}


