// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_PolyData.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HArray1OfXYZ.h"
#include "HLRAlgo_HArray1OfTData.h"
#include "HLRAlgo_HArray1OfPHDat.h"
#include "../TColgp/TColgp_Array1OfXYZ.h"
#include "HLRAlgo_Array1OfTData.h"
#include "HLRAlgo_Array1OfPHDat.h"
#include "HLRAlgo_EdgeStatus.h"


using namespace OCNaroWrappers;

OCHLRAlgo_PolyData::OCHLRAlgo_PolyData(Handle(HLRAlgo_PolyData)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_HLRAlgo_PolyData(*nativeHandle);
}

OCHLRAlgo_PolyData::OCHLRAlgo_PolyData() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_HLRAlgo_PolyData(new HLRAlgo_PolyData());
}

 void OCHLRAlgo_PolyData::HNodes(OCNaroWrappers::OCTColgp_HArray1OfXYZ^ HNodes)
{
  (*((Handle_HLRAlgo_PolyData*)nativeHandle))->HNodes(*((Handle_TColgp_HArray1OfXYZ*)HNodes->Handle));
}

 void OCHLRAlgo_PolyData::HTData(OCNaroWrappers::OCHLRAlgo_HArray1OfTData^ HTData)
{
  (*((Handle_HLRAlgo_PolyData*)nativeHandle))->HTData(*((Handle_HLRAlgo_HArray1OfTData*)HTData->Handle));
}

 void OCHLRAlgo_PolyData::HPHDat(OCNaroWrappers::OCHLRAlgo_HArray1OfPHDat^ HPHDat)
{
  (*((Handle_HLRAlgo_PolyData*)nativeHandle))->HPHDat(*((Handle_HLRAlgo_HArray1OfPHDat*)HPHDat->Handle));
}

 void OCHLRAlgo_PolyData::FaceIndex(Standard_Integer I)
{
  (*((Handle_HLRAlgo_PolyData*)nativeHandle))->FaceIndex(I);
}

 Standard_Integer OCHLRAlgo_PolyData::FaceIndex()
{
  return (*((Handle_HLRAlgo_PolyData*)nativeHandle))->FaceIndex();
}

OCTColgp_Array1OfXYZ^ OCHLRAlgo_PolyData::Nodes()
{
  TColgp_Array1OfXYZ* tmp = new TColgp_Array1OfXYZ(0, 0);
  *tmp = (*((Handle_HLRAlgo_PolyData*)nativeHandle))->Nodes();
  return gcnew OCTColgp_Array1OfXYZ(tmp);
}

OCHLRAlgo_Array1OfTData^ OCHLRAlgo_PolyData::TData()
{
  HLRAlgo_Array1OfTData* tmp = new HLRAlgo_Array1OfTData(0, 0);
  *tmp = (*((Handle_HLRAlgo_PolyData*)nativeHandle))->TData();
  return gcnew OCHLRAlgo_Array1OfTData(tmp);
}

OCHLRAlgo_Array1OfPHDat^ OCHLRAlgo_PolyData::PHDat()
{
  HLRAlgo_Array1OfPHDat* tmp = new HLRAlgo_Array1OfPHDat(0, 0);
  *tmp = (*((Handle_HLRAlgo_PolyData*)nativeHandle))->PHDat();
  return gcnew OCHLRAlgo_Array1OfPHDat(tmp);
}

 void OCHLRAlgo_PolyData::UpdateGlobalMinMax(Standard_Address ToTMinMax)
{
  (*((Handle_HLRAlgo_PolyData*)nativeHandle))->UpdateGlobalMinMax(ToTMinMax);
}

 System::Boolean OCHLRAlgo_PolyData::Hiding()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_HLRAlgo_PolyData*)nativeHandle))->Hiding());
}

 void OCHLRAlgo_PolyData::HideByPolyData(Standard_Address Coordinates, Standard_Address RealPtr, Standard_Address Indices, System::Boolean HidingShell, OCNaroWrappers::OCHLRAlgo_EdgeStatus^ status)
{
  (*((Handle_HLRAlgo_PolyData*)nativeHandle))->HideByPolyData(Coordinates, RealPtr, Indices, OCConverter::BooleanToStandardBoolean(HidingShell), *((HLRAlgo_EdgeStatus*)status->Handle));
}

 Standard_Address OCHLRAlgo_PolyData::Indices()
{
  return (*((Handle_HLRAlgo_PolyData*)nativeHandle))->Indices();
}


