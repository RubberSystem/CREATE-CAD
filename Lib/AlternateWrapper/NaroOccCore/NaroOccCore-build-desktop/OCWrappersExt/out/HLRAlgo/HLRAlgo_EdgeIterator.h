// File generated by CPPExt (MPV)
//
#ifndef _HLRAlgo_EdgeIterator_OCWrappers_HeaderFile
#define _HLRAlgo_EdgeIterator_OCWrappers_HeaderFile

// include native header
#include <HLRAlgo_EdgeIterator.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCHLRAlgo_EdgeStatus;



public ref class OCHLRAlgo_EdgeIterator  {

protected:
  HLRAlgo_EdgeIterator* nativeHandle;
  OCHLRAlgo_EdgeIterator(OCDummy^) {};

public:
  property HLRAlgo_EdgeIterator* Handle
  {
    HLRAlgo_EdgeIterator* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCHLRAlgo_EdgeIterator(HLRAlgo_EdgeIterator* nativeHandle);

// Methods PUBLIC

//! Iterator  on the  visible or  hidden  parts of  an <br>
//!          edge. <br>
OCHLRAlgo_EdgeIterator();


 /*instead*/  void InitHidden(OCNaroWrappers::OCHLRAlgo_EdgeStatus^ status) ;


 /*instead*/  System::Boolean MoreHidden() ;


 /*instead*/  void NextHidden() ;

//! Returns the bounds and the tolerances <br>
//!          of the current Hidden Interval <br>
 /*instead*/  void Hidden(Standard_Real& Start, Standard_ShortReal& TolStart, Standard_Real& End, Standard_ShortReal& TolEnd) ;


 /*instead*/  void InitVisible(OCNaroWrappers::OCHLRAlgo_EdgeStatus^ status) ;


 /*instead*/  System::Boolean MoreVisible() ;


 /*instead*/  void NextVisible() ;

//! Returns the bounds and the tolerances <br>
//!          of the current Visible Interval <br>
 /*instead*/  void Visible(Standard_Real& Start, Standard_ShortReal& TolStart, Standard_Real& End, Standard_ShortReal& TolEnd) ;

~OCHLRAlgo_EdgeIterator()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
