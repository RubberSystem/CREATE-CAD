// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_Array1OfTData.h"
#include "../Converter.h"
#include "HLRAlgo_TriangleData.h"


using namespace OCNaroWrappers;

OCHLRAlgo_Array1OfTData::OCHLRAlgo_Array1OfTData(HLRAlgo_Array1OfTData* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCHLRAlgo_Array1OfTData::OCHLRAlgo_Array1OfTData(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new HLRAlgo_Array1OfTData(Low, Up);
}

OCHLRAlgo_Array1OfTData::OCHLRAlgo_Array1OfTData(OCNaroWrappers::OCHLRAlgo_TriangleData^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new HLRAlgo_Array1OfTData(*((HLRAlgo_TriangleData*)Item->Handle), Low, Up);
}

 void OCHLRAlgo_Array1OfTData::Init(OCNaroWrappers::OCHLRAlgo_TriangleData^ V)
{
  ((HLRAlgo_Array1OfTData*)nativeHandle)->Init(*((HLRAlgo_TriangleData*)V->Handle));
}

 System::Boolean OCHLRAlgo_Array1OfTData::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((HLRAlgo_Array1OfTData*)nativeHandle)->IsAllocated());
}

OCHLRAlgo_Array1OfTData^ OCHLRAlgo_Array1OfTData::Assign(OCNaroWrappers::OCHLRAlgo_Array1OfTData^ Other)
{
  HLRAlgo_Array1OfTData* tmp = new HLRAlgo_Array1OfTData(0, 0);
  *tmp = ((HLRAlgo_Array1OfTData*)nativeHandle)->Assign(*((HLRAlgo_Array1OfTData*)Other->Handle));
  return gcnew OCHLRAlgo_Array1OfTData(tmp);
}

 Standard_Integer OCHLRAlgo_Array1OfTData::Length()
{
  return ((HLRAlgo_Array1OfTData*)nativeHandle)->Length();
}

 Standard_Integer OCHLRAlgo_Array1OfTData::Lower()
{
  return ((HLRAlgo_Array1OfTData*)nativeHandle)->Lower();
}

 Standard_Integer OCHLRAlgo_Array1OfTData::Upper()
{
  return ((HLRAlgo_Array1OfTData*)nativeHandle)->Upper();
}

 void OCHLRAlgo_Array1OfTData::SetValue(Standard_Integer Index, OCNaroWrappers::OCHLRAlgo_TriangleData^ Value)
{
  ((HLRAlgo_Array1OfTData*)nativeHandle)->SetValue(Index, *((HLRAlgo_TriangleData*)Value->Handle));
}

OCHLRAlgo_TriangleData^ OCHLRAlgo_Array1OfTData::Value(Standard_Integer Index)
{
  HLRAlgo_TriangleData* tmp = new HLRAlgo_TriangleData();
  *tmp = ((HLRAlgo_Array1OfTData*)nativeHandle)->Value(Index);
  return gcnew OCHLRAlgo_TriangleData(tmp);
}

OCHLRAlgo_TriangleData^ OCHLRAlgo_Array1OfTData::ChangeValue(Standard_Integer Index)
{
  HLRAlgo_TriangleData* tmp = new HLRAlgo_TriangleData();
  *tmp = ((HLRAlgo_Array1OfTData*)nativeHandle)->ChangeValue(Index);
  return gcnew OCHLRAlgo_TriangleData(tmp);
}


