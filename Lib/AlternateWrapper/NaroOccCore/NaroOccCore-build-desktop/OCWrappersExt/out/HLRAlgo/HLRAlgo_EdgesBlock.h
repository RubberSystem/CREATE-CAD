// File generated by CPPExt (Transient)
//
#ifndef _HLRAlgo_EdgesBlock_OCWrappers_HeaderFile
#define _HLRAlgo_EdgesBlock_OCWrappers_HeaderFile

// include the wrapped class
#include <HLRAlgo_EdgesBlock.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../TColStd/TColStd_Array1OfBoolean.h"
#include "../TopAbs/TopAbs_Orientation.h"


namespace OCNaroWrappers
{



//! An EdgesBlock is a set of Edges. It is used by the <br>
//!          DataStructure to structure the Edges. <br>
//! <br>
//!          An EdgesBlock contains : <br>
//! <br>
//!          * An Array  of index of Edges. <br>
//! <br>
//!          * An Array of flagsf ( Orientation <br>
//!                                OutLine <br>
//!                                Internal <br>
//!                                Double <br>
//!                                IsoLine) <br>
public ref class OCHLRAlgo_EdgesBlock : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCHLRAlgo_EdgesBlock(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCHLRAlgo_EdgesBlock(Handle(HLRAlgo_EdgesBlock)* nativeHandle);

// Methods PUBLIC

//! Create a Block of Edges for a wire. <br>
OCHLRAlgo_EdgesBlock(Standard_Integer NbEdges);


 /*instead*/  Standard_Integer NbEdges() ;


 /*instead*/  void Edge(Standard_Integer I, Standard_Integer EI) ;


 /*instead*/  Standard_Integer Edge(Standard_Integer I) ;


 /*instead*/  void Orientation(Standard_Integer I, OCTopAbs_Orientation Or) ;


 /*instead*/  OCTopAbs_Orientation Orientation(Standard_Integer I) ;


 /*instead*/  System::Boolean OutLine(Standard_Integer I) ;


 /*instead*/  void OutLine(Standard_Integer I, System::Boolean B) ;


 /*instead*/  System::Boolean Internal(Standard_Integer I) ;


 /*instead*/  void Internal(Standard_Integer I, System::Boolean B) ;


 /*instead*/  System::Boolean Double(Standard_Integer I) ;


 /*instead*/  void Double(Standard_Integer I, System::Boolean B) ;


 /*instead*/  System::Boolean IsoLine(Standard_Integer I) ;


 /*instead*/  void IsoLine(Standard_Integer I, System::Boolean B) ;


 /*instead*/  void UpdateMinMax(Standard_Address TotMinMax) ;


 /*instead*/  Standard_Address MinMax() ;

~OCHLRAlgo_EdgesBlock()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
