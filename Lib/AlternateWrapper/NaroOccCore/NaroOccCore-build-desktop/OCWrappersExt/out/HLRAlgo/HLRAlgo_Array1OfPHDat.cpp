// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_Array1OfPHDat.h"
#include "../Converter.h"
#include "HLRAlgo_PolyHidingData.h"


using namespace OCNaroWrappers;

OCHLRAlgo_Array1OfPHDat::OCHLRAlgo_Array1OfPHDat(HLRAlgo_Array1OfPHDat* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCHLRAlgo_Array1OfPHDat::OCHLRAlgo_Array1OfPHDat(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new HLRAlgo_Array1OfPHDat(Low, Up);
}

OCHLRAlgo_Array1OfPHDat::OCHLRAlgo_Array1OfPHDat(OCNaroWrappers::OCHLRAlgo_PolyHidingData^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new HLRAlgo_Array1OfPHDat(*((HLRAlgo_PolyHidingData*)Item->Handle), Low, Up);
}

 void OCHLRAlgo_Array1OfPHDat::Init(OCNaroWrappers::OCHLRAlgo_PolyHidingData^ V)
{
  ((HLRAlgo_Array1OfPHDat*)nativeHandle)->Init(*((HLRAlgo_PolyHidingData*)V->Handle));
}

 System::Boolean OCHLRAlgo_Array1OfPHDat::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((HLRAlgo_Array1OfPHDat*)nativeHandle)->IsAllocated());
}

OCHLRAlgo_Array1OfPHDat^ OCHLRAlgo_Array1OfPHDat::Assign(OCNaroWrappers::OCHLRAlgo_Array1OfPHDat^ Other)
{
  HLRAlgo_Array1OfPHDat* tmp = new HLRAlgo_Array1OfPHDat(0, 0);
  *tmp = ((HLRAlgo_Array1OfPHDat*)nativeHandle)->Assign(*((HLRAlgo_Array1OfPHDat*)Other->Handle));
  return gcnew OCHLRAlgo_Array1OfPHDat(tmp);
}

 Standard_Integer OCHLRAlgo_Array1OfPHDat::Length()
{
  return ((HLRAlgo_Array1OfPHDat*)nativeHandle)->Length();
}

 Standard_Integer OCHLRAlgo_Array1OfPHDat::Lower()
{
  return ((HLRAlgo_Array1OfPHDat*)nativeHandle)->Lower();
}

 Standard_Integer OCHLRAlgo_Array1OfPHDat::Upper()
{
  return ((HLRAlgo_Array1OfPHDat*)nativeHandle)->Upper();
}

 void OCHLRAlgo_Array1OfPHDat::SetValue(Standard_Integer Index, OCNaroWrappers::OCHLRAlgo_PolyHidingData^ Value)
{
  ((HLRAlgo_Array1OfPHDat*)nativeHandle)->SetValue(Index, *((HLRAlgo_PolyHidingData*)Value->Handle));
}

OCHLRAlgo_PolyHidingData^ OCHLRAlgo_Array1OfPHDat::Value(Standard_Integer Index)
{
  HLRAlgo_PolyHidingData* tmp = new HLRAlgo_PolyHidingData();
  *tmp = ((HLRAlgo_Array1OfPHDat*)nativeHandle)->Value(Index);
  return gcnew OCHLRAlgo_PolyHidingData(tmp);
}

OCHLRAlgo_PolyHidingData^ OCHLRAlgo_Array1OfPHDat::ChangeValue(Standard_Integer Index)
{
  HLRAlgo_PolyHidingData* tmp = new HLRAlgo_PolyHidingData();
  *tmp = ((HLRAlgo_Array1OfPHDat*)nativeHandle)->ChangeValue(Index);
  return gcnew OCHLRAlgo_PolyHidingData(tmp);
}


