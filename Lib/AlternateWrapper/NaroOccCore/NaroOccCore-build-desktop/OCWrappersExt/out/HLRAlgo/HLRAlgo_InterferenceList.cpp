// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_InterferenceList.h"
#include "../Converter.h"
#include "HLRAlgo_ListIteratorOfInterferenceList.h"
#include "HLRAlgo_Interference.h"
#include "HLRAlgo_ListNodeOfInterferenceList.h"


using namespace OCNaroWrappers;

OCHLRAlgo_InterferenceList::OCHLRAlgo_InterferenceList(HLRAlgo_InterferenceList* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCHLRAlgo_InterferenceList::OCHLRAlgo_InterferenceList() 
{
  nativeHandle = new HLRAlgo_InterferenceList();
}

 void OCHLRAlgo_InterferenceList::Assign(OCNaroWrappers::OCHLRAlgo_InterferenceList^ Other)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->Assign(*((HLRAlgo_InterferenceList*)Other->Handle));
}

 Standard_Integer OCHLRAlgo_InterferenceList::Extent()
{
  return ((HLRAlgo_InterferenceList*)nativeHandle)->Extent();
}

 System::Boolean OCHLRAlgo_InterferenceList::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((HLRAlgo_InterferenceList*)nativeHandle)->IsEmpty());
}

 void OCHLRAlgo_InterferenceList::Prepend(OCNaroWrappers::OCHLRAlgo_Interference^ I)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->Prepend(*((HLRAlgo_Interference*)I->Handle));
}

 void OCHLRAlgo_InterferenceList::Prepend(OCNaroWrappers::OCHLRAlgo_Interference^ I, OCNaroWrappers::OCHLRAlgo_ListIteratorOfInterferenceList^ theIt)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->Prepend(*((HLRAlgo_Interference*)I->Handle), *((HLRAlgo_ListIteratorOfInterferenceList*)theIt->Handle));
}

 void OCHLRAlgo_InterferenceList::Prepend(OCNaroWrappers::OCHLRAlgo_InterferenceList^ Other)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->Prepend(*((HLRAlgo_InterferenceList*)Other->Handle));
}

 void OCHLRAlgo_InterferenceList::Append(OCNaroWrappers::OCHLRAlgo_Interference^ I)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->Append(*((HLRAlgo_Interference*)I->Handle));
}

 void OCHLRAlgo_InterferenceList::Append(OCNaroWrappers::OCHLRAlgo_Interference^ I, OCNaroWrappers::OCHLRAlgo_ListIteratorOfInterferenceList^ theIt)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->Append(*((HLRAlgo_Interference*)I->Handle), *((HLRAlgo_ListIteratorOfInterferenceList*)theIt->Handle));
}

 void OCHLRAlgo_InterferenceList::Append(OCNaroWrappers::OCHLRAlgo_InterferenceList^ Other)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->Append(*((HLRAlgo_InterferenceList*)Other->Handle));
}

OCHLRAlgo_Interference^ OCHLRAlgo_InterferenceList::First()
{
  HLRAlgo_Interference* tmp = new HLRAlgo_Interference();
  *tmp = ((HLRAlgo_InterferenceList*)nativeHandle)->First();
  return gcnew OCHLRAlgo_Interference(tmp);
}

OCHLRAlgo_Interference^ OCHLRAlgo_InterferenceList::Last()
{
  HLRAlgo_Interference* tmp = new HLRAlgo_Interference();
  *tmp = ((HLRAlgo_InterferenceList*)nativeHandle)->Last();
  return gcnew OCHLRAlgo_Interference(tmp);
}

 void OCHLRAlgo_InterferenceList::RemoveFirst()
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->RemoveFirst();
}

 void OCHLRAlgo_InterferenceList::Remove(OCNaroWrappers::OCHLRAlgo_ListIteratorOfInterferenceList^ It)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->Remove(*((HLRAlgo_ListIteratorOfInterferenceList*)It->Handle));
}

 void OCHLRAlgo_InterferenceList::InsertBefore(OCNaroWrappers::OCHLRAlgo_Interference^ I, OCNaroWrappers::OCHLRAlgo_ListIteratorOfInterferenceList^ It)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->InsertBefore(*((HLRAlgo_Interference*)I->Handle), *((HLRAlgo_ListIteratorOfInterferenceList*)It->Handle));
}

 void OCHLRAlgo_InterferenceList::InsertBefore(OCNaroWrappers::OCHLRAlgo_InterferenceList^ Other, OCNaroWrappers::OCHLRAlgo_ListIteratorOfInterferenceList^ It)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->InsertBefore(*((HLRAlgo_InterferenceList*)Other->Handle), *((HLRAlgo_ListIteratorOfInterferenceList*)It->Handle));
}

 void OCHLRAlgo_InterferenceList::InsertAfter(OCNaroWrappers::OCHLRAlgo_Interference^ I, OCNaroWrappers::OCHLRAlgo_ListIteratorOfInterferenceList^ It)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->InsertAfter(*((HLRAlgo_Interference*)I->Handle), *((HLRAlgo_ListIteratorOfInterferenceList*)It->Handle));
}

 void OCHLRAlgo_InterferenceList::InsertAfter(OCNaroWrappers::OCHLRAlgo_InterferenceList^ Other, OCNaroWrappers::OCHLRAlgo_ListIteratorOfInterferenceList^ It)
{
  ((HLRAlgo_InterferenceList*)nativeHandle)->InsertAfter(*((HLRAlgo_InterferenceList*)Other->Handle), *((HLRAlgo_ListIteratorOfInterferenceList*)It->Handle));
}


