// File generated by CPPExt (CPP file)
//

#include "HLRAlgo_EdgeStatus.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCHLRAlgo_EdgeStatus::OCHLRAlgo_EdgeStatus(HLRAlgo_EdgeStatus* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCHLRAlgo_EdgeStatus::OCHLRAlgo_EdgeStatus() 
{
  nativeHandle = new HLRAlgo_EdgeStatus();
}

OCHLRAlgo_EdgeStatus::OCHLRAlgo_EdgeStatus(Standard_Real Start, Standard_ShortReal TolStart, Standard_Real End, Standard_ShortReal TolEnd) 
{
  nativeHandle = new HLRAlgo_EdgeStatus(Start, TolStart, End, TolEnd);
}

 void OCHLRAlgo_EdgeStatus::Initialize(Standard_Real Start, Standard_ShortReal TolStart, Standard_Real End, Standard_ShortReal TolEnd)
{
  ((HLRAlgo_EdgeStatus*)nativeHandle)->Initialize(Start, TolStart, End, TolEnd);
}

 void OCHLRAlgo_EdgeStatus::Bounds(Standard_Real& Start, Standard_ShortReal& TolStart, Standard_Real& End, Standard_ShortReal& TolEnd)
{
  ((HLRAlgo_EdgeStatus*)nativeHandle)->Bounds(Start, TolStart, End, TolEnd);
}

 Standard_Integer OCHLRAlgo_EdgeStatus::NbVisiblePart()
{
  return ((HLRAlgo_EdgeStatus*)nativeHandle)->NbVisiblePart();
}

 void OCHLRAlgo_EdgeStatus::VisiblePart(Standard_Integer Index, Standard_Real& Start, Standard_ShortReal& TolStart, Standard_Real& End, Standard_ShortReal& TolEnd)
{
  ((HLRAlgo_EdgeStatus*)nativeHandle)->VisiblePart(Index, Start, TolStart, End, TolEnd);
}

 void OCHLRAlgo_EdgeStatus::Hide(Standard_Real Start, Standard_ShortReal TolStart, Standard_Real End, Standard_ShortReal TolEnd, System::Boolean OnFace, System::Boolean OnBoundary)
{
  ((HLRAlgo_EdgeStatus*)nativeHandle)->Hide(Start, TolStart, End, TolEnd, OCConverter::BooleanToStandardBoolean(OnFace), OCConverter::BooleanToStandardBoolean(OnBoundary));
}

 void OCHLRAlgo_EdgeStatus::HideAll()
{
  ((HLRAlgo_EdgeStatus*)nativeHandle)->HideAll();
}

 void OCHLRAlgo_EdgeStatus::ShowAll()
{
  ((HLRAlgo_EdgeStatus*)nativeHandle)->ShowAll();
}

 System::Boolean OCHLRAlgo_EdgeStatus::AllHidden()
{
  return OCConverter::StandardBooleanToBoolean(((HLRAlgo_EdgeStatus*)nativeHandle)->AllHidden());
}

 void OCHLRAlgo_EdgeStatus::AllHidden(System::Boolean B)
{
  ((HLRAlgo_EdgeStatus*)nativeHandle)->AllHidden(OCConverter::BooleanToStandardBoolean(B));
}

 System::Boolean OCHLRAlgo_EdgeStatus::AllVisible()
{
  return OCConverter::StandardBooleanToBoolean(((HLRAlgo_EdgeStatus*)nativeHandle)->AllVisible());
}

 void OCHLRAlgo_EdgeStatus::AllVisible(System::Boolean B)
{
  ((HLRAlgo_EdgeStatus*)nativeHandle)->AllVisible(OCConverter::BooleanToStandardBoolean(B));
}


