// File generated by CPPExt (Package)
//

#ifndef _HLRAlgo_OCWrappers_HeaderFile
#define _HLRAlgo_OCWrappers_HeaderFile

// Include the wrapped header
#include <HLRAlgo.hxx>

#include "HLRAlgo_BiPoint.h"
#include "HLRAlgo_ListOfBPoint.h"
#include "HLRAlgo_PolyShellData.h"
#include "HLRAlgo_PolyInternalData.h"
#include "HLRAlgo_PolyInternalSegment.h"
#include "HLRAlgo_PolyInternalNode.h"
#include "HLRAlgo_PolyData.h"
#include "HLRAlgo_PolyHidingData.h"
#include "HLRAlgo_TriangleData.h"
#include "HLRAlgo_Array1OfPHDat.h"
#include "HLRAlgo_HArray1OfPHDat.h"
#include "HLRAlgo_Array1OfPISeg.h"
#include "HLRAlgo_HArray1OfPISeg.h"
#include "HLRAlgo_Array1OfPINod.h"
#include "HLRAlgo_HArray1OfPINod.h"
#include "HLRAlgo_Array1OfTData.h"
#include "HLRAlgo_HArray1OfTData.h"
#include "HLRAlgo_PolyAlgo.h"
#include "HLRAlgo_EdgeStatus.h"
#include "HLRAlgo_Projector.h"
#include "HLRAlgo_Intersection.h"
#include "HLRAlgo_Coincidence.h"
#include "HLRAlgo_Interference.h"
#include "HLRAlgo_InterferenceList.h"
#include "HLRAlgo_EdgesBlock.h"
#include "HLRAlgo_WiresBlock.h"
#include "HLRAlgo_EdgeIterator.h"
#include "HLRAlgo_ListNodeOfListOfBPoint.h"
#include "HLRAlgo_ListIteratorOfListOfBPoint.h"
#include "HLRAlgo_ListNodeOfInterferenceList.h"
#include "HLRAlgo_ListIteratorOfInterferenceList.h"


namespace OCNaroWrappers
{
//!        In order to have the precision required in <br>
//! industrial design, drawings need to offer the <br>
//! possibility of removing lines, which are hidden <br>
//! in a given projection. To do this, the Hidden <br>
//! Line Removal component provides two <br>
//!   algorithms: HLRBRep_Algo and HLRBRep_PolyAlgo. <br>
//! These algorithms remove or indicate lines <br>
//! hidden by surfaces. For a given projection, they <br>
//! calculate a set of lines characteristic of the <br>
//! object being represented. They are also used <br>
//! in conjunction with extraction utilities, which <br>
//! reconstruct a new, simplified shape from a <br>
//! selection of calculation results. This new shape <br>
//! is made up of edges, which represent the lines <br>
//! of the visualized shape in a plane. This plane is the projection plane. <br>
//! HLRBRep_Algo takes into account the shape <br>
//! itself. HLRBRep_PolyAlgo works with a <br>
//! polyhedral simplification of the shape. When <br>
//! you use HLRBRep_Algo, you obtain an exact <br>
//! result, whereas, when you use <br>
//! HLRBRep_PolyAlgo, you reduce computation <br>
//! time but obtain polygonal segments. <br>
public ref class OCHLRAlgo abstract sealed
{

public:
// Methods


static /*instead*/  void UpdateMinMax(Standard_Real x, Standard_Real y, Standard_Real z, Standard_Address Min, Standard_Address Max) ;


static /*instead*/  void EnlargeMinMax(Standard_Real tol, Standard_Address Min, Standard_Address Max) ;


static /*instead*/  void InitMinMax(Standard_Real Big, Standard_Address Min, Standard_Address Max) ;


static /*instead*/  void EncodeMinMax(Standard_Address Min, Standard_Address Max, Standard_Address MinMax) ;


static /*instead*/  Standard_Real SizeBox(Standard_Address Min, Standard_Address Max) ;


static /*instead*/  void DecodeMinMax(Standard_Address MinMax, Standard_Address Min, Standard_Address Max) ;


static /*instead*/  void CopyMinMax(Standard_Address IMin, Standard_Address IMax, Standard_Address OMin, Standard_Address OMax) ;


static /*instead*/  void AddMinMax(Standard_Address IMin, Standard_Address IMax, Standard_Address OMin, Standard_Address OMax) ;


};

}; // OCNaroWrappers

#endif
