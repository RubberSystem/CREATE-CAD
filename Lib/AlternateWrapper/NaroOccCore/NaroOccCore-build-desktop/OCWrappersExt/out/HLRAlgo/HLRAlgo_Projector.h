// File generated by CPPExt (MPV)
//
#ifndef _HLRAlgo_Projector_OCWrappers_HeaderFile
#define _HLRAlgo_Projector_OCWrappers_HeaderFile

// include native header
#include <HLRAlgo_Projector.hxx>
#include "../Converter.h"


#include "../gp/gp_Trsf.h"
#include "../gp/gp_Vec2d.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2;
ref class OCgp_Trsf;
ref class OCgp_Vec2d;
ref class OCgp_Vec;
ref class OCgp_Pnt;
ref class OCgp_Pnt2d;
ref class OCgp_Lin;


//! Implements a  projector object. <br>
//! This object is designed to be used in the <br>
//! removal of hidden lines and is returned by the <br>
//! Prs3d_Projector::Projector function. <br>
//! You define the projection of the selected shape <br>
//! by calling one of the following functions: <br>
//! -   HLRBRep_Algo::Projector, or <br>
//! -   HLRBRep_PolyAlgo::Projector <br>
//! The choice depends on the algorithm, which you are using. <br>
//! The parameters of the view are defined at the <br>
//! time of construction of a Prs3d_Projector object. <br>
public ref class OCHLRAlgo_Projector  {

protected:
  HLRAlgo_Projector* nativeHandle;
  OCHLRAlgo_Projector(OCDummy^) {};

public:
  property HLRAlgo_Projector* Handle
  {
    HLRAlgo_Projector* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCHLRAlgo_Projector(HLRAlgo_Projector* nativeHandle);

// Methods PUBLIC


OCHLRAlgo_Projector();

//! Creates   an axonometric  projector.   <CS> is the <br>
//!          viewing coordinate system. <br>
OCHLRAlgo_Projector(OCNaroWrappers::OCgp_Ax2^ CS);

//! Creates  a  perspective  projector.   <CS>  is the <br>
//!          viewing coordinate system. <br>
OCHLRAlgo_Projector(OCNaroWrappers::OCgp_Ax2^ CS, Standard_Real Focus);

//! build a Projector with automatic minmax directions. <br>
OCHLRAlgo_Projector(OCNaroWrappers::OCgp_Trsf^ T, System::Boolean Persp, Standard_Real Focus);

//! build a Projector with given minmax directions. <br>
OCHLRAlgo_Projector(OCNaroWrappers::OCgp_Trsf^ T, System::Boolean Persp, Standard_Real Focus, OCNaroWrappers::OCgp_Vec2d^ v1, OCNaroWrappers::OCgp_Vec2d^ v2, OCNaroWrappers::OCgp_Vec2d^ v3);


 /*instead*/  void Set(OCNaroWrappers::OCgp_Trsf^ T, System::Boolean Persp, Standard_Real Focus) ;


 /*instead*/  void Directions(OCNaroWrappers::OCgp_Vec2d^ D1, OCNaroWrappers::OCgp_Vec2d^ D2, OCNaroWrappers::OCgp_Vec2d^ D3) ;

//! to compute with the given scale and translation. <br>
 /*instead*/  void Scaled(System::Boolean On) ;

//! Returns True if there is a perspective transformation. <br>
 /*instead*/  System::Boolean Perspective() ;

//! Returns the active transformation. <br>
 /*instead*/  OCgp_Trsf^ Transformation() ;

//! Returns the active inverted transformation. <br>
 /*instead*/  OCgp_Trsf^ InvertedTransformation() ;

//! Returns the original transformation. <br>
 /*instead*/  OCgp_Trsf^ FullTransformation() ;

//! Returns the focal length. <br>
 /*instead*/  Standard_Real Focus() ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Vec^ D) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Pnt^ Pnt) ;

//! Transform and apply perspective if needed. <br>
 /*instead*/  void Project(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Pnt2d^ Pout) ;

//! Transform and apply perspective if needed. <br>
 /*instead*/  void Project(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real& X, Standard_Real& Y, Standard_Real& Z) ;

//! Transform and apply perspective if needed. <br>
 /*instead*/  void Project(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1, OCNaroWrappers::OCgp_Pnt2d^ Pout, OCNaroWrappers::OCgp_Vec2d^ D1out) ;

//! return a line going through the eye towards the <br>
//!          2d point <X,Y>. <br>
 /*instead*/  OCgp_Lin^ Shoot(Standard_Real X, Standard_Real Y) ;

~OCHLRAlgo_Projector()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
