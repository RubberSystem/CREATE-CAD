// File generated by CPPExt (CPP file)
//

#include "ProjLib_HSequenceOfHSequenceOfPnt.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HSequenceOfPnt.h"
#include "ProjLib_SequenceOfHSequenceOfPnt.h"


using namespace OCNaroWrappers;

OCProjLib_HSequenceOfHSequenceOfPnt::OCProjLib_HSequenceOfHSequenceOfPnt(Handle(ProjLib_HSequenceOfHSequenceOfPnt)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_ProjLib_HSequenceOfHSequenceOfPnt(*nativeHandle);
}

OCProjLib_HSequenceOfHSequenceOfPnt::OCProjLib_HSequenceOfHSequenceOfPnt() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_ProjLib_HSequenceOfHSequenceOfPnt(new ProjLib_HSequenceOfHSequenceOfPnt());
}

 System::Boolean OCProjLib_HSequenceOfHSequenceOfPnt::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCProjLib_HSequenceOfHSequenceOfPnt::Length()
{
  return (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Length();
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Clear()
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Clear();
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Append(OCNaroWrappers::OCTColgp_HSequenceOfPnt^ anItem)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Append(*((Handle_TColgp_HSequenceOfPnt*)anItem->Handle));
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Append(OCNaroWrappers::OCProjLib_HSequenceOfHSequenceOfPnt^ aSequence)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Append(*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)aSequence->Handle));
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Prepend(OCNaroWrappers::OCTColgp_HSequenceOfPnt^ anItem)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Prepend(*((Handle_TColgp_HSequenceOfPnt*)anItem->Handle));
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Prepend(OCNaroWrappers::OCProjLib_HSequenceOfHSequenceOfPnt^ aSequence)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Prepend(*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)aSequence->Handle));
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Reverse()
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Reverse();
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCTColgp_HSequenceOfPnt^ anItem)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->InsertBefore(anIndex, *((Handle_TColgp_HSequenceOfPnt*)anItem->Handle));
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCProjLib_HSequenceOfHSequenceOfPnt^ aSequence)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->InsertBefore(anIndex, *((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)aSequence->Handle));
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCTColgp_HSequenceOfPnt^ anItem)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->InsertAfter(anIndex, *((Handle_TColgp_HSequenceOfPnt*)anItem->Handle));
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCProjLib_HSequenceOfHSequenceOfPnt^ aSequence)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->InsertAfter(anIndex, *((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)aSequence->Handle));
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Exchange(Standard_Integer anIndex, Standard_Integer anOtherIndex)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Exchange(anIndex, anOtherIndex);
}

OCProjLib_HSequenceOfHSequenceOfPnt^ OCProjLib_HSequenceOfHSequenceOfPnt::Split(Standard_Integer anIndex)
{
  Handle(ProjLib_HSequenceOfHSequenceOfPnt) tmp = (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Split(anIndex);
  return gcnew OCProjLib_HSequenceOfHSequenceOfPnt(&tmp);
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::SetValue(Standard_Integer anIndex, OCNaroWrappers::OCTColgp_HSequenceOfPnt^ anItem)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->SetValue(anIndex, *((Handle_TColgp_HSequenceOfPnt*)anItem->Handle));
}

OCTColgp_HSequenceOfPnt^ OCProjLib_HSequenceOfHSequenceOfPnt::Value(Standard_Integer anIndex)
{
  Handle(TColgp_HSequenceOfPnt) tmp = (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Value(anIndex);
  return gcnew OCTColgp_HSequenceOfPnt(&tmp);
}

OCTColgp_HSequenceOfPnt^ OCProjLib_HSequenceOfHSequenceOfPnt::ChangeValue(Standard_Integer anIndex)
{
  Handle(TColgp_HSequenceOfPnt) tmp = (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->ChangeValue(anIndex);
  return gcnew OCTColgp_HSequenceOfPnt(&tmp);
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Remove(Standard_Integer anIndex)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Remove(anIndex);
}

 void OCProjLib_HSequenceOfHSequenceOfPnt::Remove(Standard_Integer fromIndex, Standard_Integer toIndex)
{
  (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Remove(fromIndex, toIndex);
}

OCProjLib_SequenceOfHSequenceOfPnt^ OCProjLib_HSequenceOfHSequenceOfPnt::Sequence()
{
  ProjLib_SequenceOfHSequenceOfPnt* tmp = new ProjLib_SequenceOfHSequenceOfPnt();
  *tmp = (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->Sequence();
  return gcnew OCProjLib_SequenceOfHSequenceOfPnt(tmp);
}

OCProjLib_SequenceOfHSequenceOfPnt^ OCProjLib_HSequenceOfHSequenceOfPnt::ChangeSequence()
{
  ProjLib_SequenceOfHSequenceOfPnt* tmp = new ProjLib_SequenceOfHSequenceOfPnt();
  *tmp = (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->ChangeSequence();
  return gcnew OCProjLib_SequenceOfHSequenceOfPnt(tmp);
}

OCProjLib_HSequenceOfHSequenceOfPnt^ OCProjLib_HSequenceOfHSequenceOfPnt::ShallowCopy()
{
  Handle(ProjLib_HSequenceOfHSequenceOfPnt) tmp = (*((Handle_ProjLib_HSequenceOfHSequenceOfPnt*)nativeHandle))->ShallowCopy();
  return gcnew OCProjLib_HSequenceOfHSequenceOfPnt(&tmp);
}


