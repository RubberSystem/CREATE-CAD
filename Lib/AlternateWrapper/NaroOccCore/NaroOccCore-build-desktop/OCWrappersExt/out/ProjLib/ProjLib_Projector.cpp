// File generated by CPPExt (CPP file)
//

#include "ProjLib_Projector.h"
#include "../Converter.h"
#include "../Geom2d/Geom2d_BSplineCurve.h"
#include "../Geom2d/Geom2d_BezierCurve.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Parab.h"
#include "../gp/gp_Hypr.h"


using namespace OCNaroWrappers;

OCProjLib_Projector::OCProjLib_Projector(ProjLib_Projector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCProjLib_Projector::OCProjLib_Projector() 
{
  nativeHandle = new ProjLib_Projector();
}

 void OCProjLib_Projector::Delete()
{
  ((ProjLib_Projector*)nativeHandle)->Delete();
}

 System::Boolean OCProjLib_Projector::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_Projector*)nativeHandle)->IsDone());
}

 void OCProjLib_Projector::Done()
{
  ((ProjLib_Projector*)nativeHandle)->Done();
}

 OCGeomAbs_CurveType OCProjLib_Projector::GetType()
{
  return (OCGeomAbs_CurveType)(((ProjLib_Projector*)nativeHandle)->GetType());
}

 void OCProjLib_Projector::SetBSpline(OCNaroWrappers::OCGeom2d_BSplineCurve^ C)
{
  ((ProjLib_Projector*)nativeHandle)->SetBSpline(*((Handle_Geom2d_BSplineCurve*)C->Handle));
}

 void OCProjLib_Projector::SetBezier(OCNaroWrappers::OCGeom2d_BezierCurve^ C)
{
  ((ProjLib_Projector*)nativeHandle)->SetBezier(*((Handle_Geom2d_BezierCurve*)C->Handle));
}

 void OCProjLib_Projector::SetType(OCGeomAbs_CurveType Type)
{
  ((ProjLib_Projector*)nativeHandle)->SetType((GeomAbs_CurveType)Type);
}

 System::Boolean OCProjLib_Projector::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_Projector*)nativeHandle)->IsPeriodic());
}

 void OCProjLib_Projector::SetPeriodic()
{
  ((ProjLib_Projector*)nativeHandle)->SetPeriodic();
}

OCgp_Lin2d^ OCProjLib_Projector::Line()
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((ProjLib_Projector*)nativeHandle)->Line();
  return gcnew OCgp_Lin2d(tmp);
}

OCgp_Circ2d^ OCProjLib_Projector::Circle()
{
  gp_Circ2d* tmp = new gp_Circ2d();
  *tmp = ((ProjLib_Projector*)nativeHandle)->Circle();
  return gcnew OCgp_Circ2d(tmp);
}

OCgp_Elips2d^ OCProjLib_Projector::Ellipse()
{
  gp_Elips2d* tmp = new gp_Elips2d();
  *tmp = ((ProjLib_Projector*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips2d(tmp);
}

OCgp_Hypr2d^ OCProjLib_Projector::Hyperbola()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((ProjLib_Projector*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr2d(tmp);
}

OCgp_Parab2d^ OCProjLib_Projector::Parabola()
{
  gp_Parab2d* tmp = new gp_Parab2d();
  *tmp = ((ProjLib_Projector*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab2d(tmp);
}

OCGeom2d_BezierCurve^ OCProjLib_Projector::Bezier()
{
  Handle(Geom2d_BezierCurve) tmp = ((ProjLib_Projector*)nativeHandle)->Bezier();
  return gcnew OCGeom2d_BezierCurve(&tmp);
}

OCGeom2d_BSplineCurve^ OCProjLib_Projector::BSpline()
{
  Handle(Geom2d_BSplineCurve) tmp = ((ProjLib_Projector*)nativeHandle)->BSpline();
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}

 void OCProjLib_Projector::Project(OCNaroWrappers::OCgp_Lin^ L)
{
  ((ProjLib_Projector*)nativeHandle)->Project(*((gp_Lin*)L->Handle));
}

 void OCProjLib_Projector::Project(OCNaroWrappers::OCgp_Circ^ C)
{
  ((ProjLib_Projector*)nativeHandle)->Project(*((gp_Circ*)C->Handle));
}

 void OCProjLib_Projector::Project(OCNaroWrappers::OCgp_Elips^ E)
{
  ((ProjLib_Projector*)nativeHandle)->Project(*((gp_Elips*)E->Handle));
}

 void OCProjLib_Projector::Project(OCNaroWrappers::OCgp_Parab^ P)
{
  ((ProjLib_Projector*)nativeHandle)->Project(*((gp_Parab*)P->Handle));
}

 void OCProjLib_Projector::Project(OCNaroWrappers::OCgp_Hypr^ H)
{
  ((ProjLib_Projector*)nativeHandle)->Project(*((gp_Hypr*)H->Handle));
}

 void OCProjLib_Projector::UFrame(Standard_Real CFirst, Standard_Real CLast, Standard_Real UFirst, Standard_Real Period)
{
  ((ProjLib_Projector*)nativeHandle)->UFrame(CFirst, CLast, UFirst, Period);
}

 void OCProjLib_Projector::VFrame(Standard_Real CFirst, Standard_Real CLast, Standard_Real VFirst, Standard_Real Period)
{
  ((ProjLib_Projector*)nativeHandle)->VFrame(CFirst, CLast, VFirst, Period);
}


