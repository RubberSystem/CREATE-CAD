// File generated by CPPExt (CPP file)
//

#include "ProjLib_ProjectedCurve.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"
#include "../Geom2d/Geom2d_BezierCurve.h"
#include "../Geom2d/Geom2d_BSplineCurve.h"


using namespace OCNaroWrappers;

OCProjLib_ProjectedCurve::OCProjLib_ProjectedCurve(ProjLib_ProjectedCurve* nativeHandle) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCProjLib_ProjectedCurve::OCProjLib_ProjectedCurve() : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new ProjLib_ProjectedCurve();
}

OCProjLib_ProjectedCurve::OCProjLib_ProjectedCurve(OCNaroWrappers::OCAdaptor3d_HSurface^ S) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new ProjLib_ProjectedCurve(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

OCProjLib_ProjectedCurve::OCProjLib_ProjectedCurve(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCAdaptor3d_HCurve^ C) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new ProjLib_ProjectedCurve(*((Handle_Adaptor3d_HSurface*)S->Handle), *((Handle_Adaptor3d_HCurve*)C->Handle));
}

OCProjLib_ProjectedCurve::OCProjLib_ProjectedCurve(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real Tol) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new ProjLib_ProjectedCurve(*((Handle_Adaptor3d_HSurface*)S->Handle), *((Handle_Adaptor3d_HCurve*)C->Handle), Tol);
}

 void OCProjLib_ProjectedCurve::Load(Standard_Real Tolerance)
{
  ((ProjLib_ProjectedCurve*)nativeHandle)->Load(Tolerance);
}

 void OCProjLib_ProjectedCurve::Load(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  ((ProjLib_ProjectedCurve*)nativeHandle)->Load(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 void OCProjLib_ProjectedCurve::Load(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  ((ProjLib_ProjectedCurve*)nativeHandle)->Load(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

OCAdaptor3d_HSurface^ OCProjLib_ProjectedCurve::GetSurface()
{
  Handle(Adaptor3d_HSurface) tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->GetSurface();
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

OCAdaptor3d_HCurve^ OCProjLib_ProjectedCurve::GetCurve()
{
  Handle(Adaptor3d_HCurve) tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->GetCurve();
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 Standard_Real OCProjLib_ProjectedCurve::GetTolerance()
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->GetTolerance();
}

 Standard_Real OCProjLib_ProjectedCurve::FirstParameter()
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->FirstParameter();
}

 Standard_Real OCProjLib_ProjectedCurve::LastParameter()
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCProjLib_ProjectedCurve::Continuity()
{
  return (OCGeomAbs_Shape)(((ProjLib_ProjectedCurve*)nativeHandle)->Continuity());
}

 Standard_Integer OCProjLib_ProjectedCurve::NbIntervals(OCGeomAbs_Shape S)
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCProjLib_ProjectedCurve::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((ProjLib_ProjectedCurve*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor2d_HCurve2d^ OCProjLib_ProjectedCurve::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor2d_HCurve2d) tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

 System::Boolean OCProjLib_ProjectedCurve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_ProjectedCurve*)nativeHandle)->IsClosed());
}

 System::Boolean OCProjLib_ProjectedCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_ProjectedCurve*)nativeHandle)->IsPeriodic());
}

 Standard_Real OCProjLib_ProjectedCurve::Period()
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->Period();
}

OCgp_Pnt2d^ OCProjLib_ProjectedCurve::Value(Standard_Real U)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->Value(U);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCProjLib_ProjectedCurve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((ProjLib_ProjectedCurve*)nativeHandle)->D0(U, *((gp_Pnt2d*)P->Handle));
}

 void OCProjLib_ProjectedCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((ProjLib_ProjectedCurve*)nativeHandle)->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V->Handle));
}

 void OCProjLib_ProjectedCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  ((ProjLib_ProjectedCurve*)nativeHandle)->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCProjLib_ProjectedCurve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  ((ProjLib_ProjectedCurve*)nativeHandle)->D3(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCProjLib_ProjectedCurve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 Standard_Real OCProjLib_ProjectedCurve::Resolution(Standard_Real R3d)
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->Resolution(R3d);
}

 OCGeomAbs_CurveType OCProjLib_ProjectedCurve::GetType()
{
  return (OCGeomAbs_CurveType)(((ProjLib_ProjectedCurve*)nativeHandle)->GetType());
}

OCgp_Lin2d^ OCProjLib_ProjectedCurve::Line()
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->Line();
  return gcnew OCgp_Lin2d(tmp);
}

OCgp_Circ2d^ OCProjLib_ProjectedCurve::Circle()
{
  gp_Circ2d* tmp = new gp_Circ2d();
  *tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->Circle();
  return gcnew OCgp_Circ2d(tmp);
}

OCgp_Elips2d^ OCProjLib_ProjectedCurve::Ellipse()
{
  gp_Elips2d* tmp = new gp_Elips2d();
  *tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips2d(tmp);
}

OCgp_Hypr2d^ OCProjLib_ProjectedCurve::Hyperbola()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr2d(tmp);
}

OCgp_Parab2d^ OCProjLib_ProjectedCurve::Parabola()
{
  gp_Parab2d* tmp = new gp_Parab2d();
  *tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab2d(tmp);
}

 Standard_Integer OCProjLib_ProjectedCurve::Degree()
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->Degree();
}

 System::Boolean OCProjLib_ProjectedCurve::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_ProjectedCurve*)nativeHandle)->IsRational());
}

 Standard_Integer OCProjLib_ProjectedCurve::NbPoles()
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->NbPoles();
}

 Standard_Integer OCProjLib_ProjectedCurve::NbKnots()
{
  return ((ProjLib_ProjectedCurve*)nativeHandle)->NbKnots();
}

OCGeom2d_BezierCurve^ OCProjLib_ProjectedCurve::Bezier()
{
  Handle(Geom2d_BezierCurve) tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->Bezier();
  return gcnew OCGeom2d_BezierCurve(&tmp);
}

OCGeom2d_BSplineCurve^ OCProjLib_ProjectedCurve::BSpline()
{
  Handle(Geom2d_BSplineCurve) tmp = ((ProjLib_ProjectedCurve*)nativeHandle)->BSpline();
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}


