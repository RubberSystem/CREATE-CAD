// File generated by CPPExt (MPV)
//
#ifndef _ProjLib_PrjResolve_OCWrappers_HeaderFile
#define _ProjLib_PrjResolve_OCWrappers_HeaderFile

// include native header
#include <ProjLib_PrjResolve.hxx>
#include "../Converter.h"


#include "../gp/gp_Pnt2d.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Curve;
ref class OCAdaptor3d_Surface;
ref class OCgp_Pnt2d;



public ref class OCProjLib_PrjResolve  {

protected:
  ProjLib_PrjResolve* nativeHandle;
  OCProjLib_PrjResolve(OCDummy^) {};

public:
  property ProjLib_PrjResolve* Handle
  {
    ProjLib_PrjResolve* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCProjLib_PrjResolve(ProjLib_PrjResolve* nativeHandle);

// Methods PUBLIC


OCProjLib_PrjResolve(OCNaroWrappers::OCAdaptor3d_Curve^ C, OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer Fix);

//! Calculates the ort from  C(t)  to  S  with a close point. <br>
//!          The close point is defined by the parameter values <br>
//!          U0 and V0. <br>
//!          The function F(u,v)=distance(S(u,v),C(t)) has an <br>
//!          extremum when gradient(F)=0. The algorithm searchs <br>
//!          a zero near the close point. <br>
 /*instead*/  void Perform(Standard_Real t, Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt2d^ Tol, OCNaroWrappers::OCgp_Pnt2d^ Inf, OCNaroWrappers::OCgp_Pnt2d^ Sup, Standard_Real FTol, System::Boolean StrictInside) ;

//! Returns True if the distance is found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the point of the extremum distance. <br>
 /*instead*/  OCgp_Pnt2d^ Solution() ;

~OCProjLib_PrjResolve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
