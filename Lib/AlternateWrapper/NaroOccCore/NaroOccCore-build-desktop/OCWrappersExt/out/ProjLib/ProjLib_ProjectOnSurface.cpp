// File generated by CPPExt (CPP file)
//

#include "ProjLib_ProjectOnSurface.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Geom/Geom_BSplineCurve.h"


using namespace OCNaroWrappers;

OCProjLib_ProjectOnSurface::OCProjLib_ProjectOnSurface(ProjLib_ProjectOnSurface* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCProjLib_ProjectOnSurface::OCProjLib_ProjectOnSurface() 
{
  nativeHandle = new ProjLib_ProjectOnSurface();
}

OCProjLib_ProjectOnSurface::OCProjLib_ProjectOnSurface(OCNaroWrappers::OCAdaptor3d_HSurface^ S) 
{
  nativeHandle = new ProjLib_ProjectOnSurface(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 void OCProjLib_ProjectOnSurface::Delete()
{
  ((ProjLib_ProjectOnSurface*)nativeHandle)->Delete();
}

 void OCProjLib_ProjectOnSurface::Load(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  ((ProjLib_ProjectOnSurface*)nativeHandle)->Load(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 void OCProjLib_ProjectOnSurface::Load(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real Tolerance)
{
  ((ProjLib_ProjectOnSurface*)nativeHandle)->Load(*((Handle_Adaptor3d_HCurve*)C->Handle), Tolerance);
}

 System::Boolean OCProjLib_ProjectOnSurface::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_ProjectOnSurface*)nativeHandle)->IsDone());
}

OCGeom_BSplineCurve^ OCProjLib_ProjectOnSurface::BSpline()
{
  Handle(Geom_BSplineCurve) tmp = ((ProjLib_ProjectOnSurface*)nativeHandle)->BSpline();
  return gcnew OCGeom_BSplineCurve(&tmp);
}


