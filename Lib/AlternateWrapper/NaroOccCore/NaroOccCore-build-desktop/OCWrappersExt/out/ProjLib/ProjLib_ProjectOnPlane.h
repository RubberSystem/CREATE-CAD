// File generated by CPPExt (MPV)
//
#ifndef _ProjLib_ProjectOnPlane_OCWrappers_HeaderFile
#define _ProjLib_ProjectOnPlane_OCWrappers_HeaderFile

// include native header
#include <ProjLib_ProjectOnPlane.hxx>
#include "../Converter.h"

#include "../Adaptor3d/Adaptor3d_Curve.h"

#include "../gp/gp_Ax3.h"
#include "../gp/gp_Dir.h"
#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HCurve;
ref class OCGeomAdaptor_HCurve;
ref class OCgp_Ax3;
ref class OCgp_Dir;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Lin;
ref class OCgp_Circ;
ref class OCgp_Elips;
ref class OCgp_Hypr;
ref class OCgp_Parab;
ref class OCGeom_BezierCurve;
ref class OCGeom_BSplineCurve;


//! Class  used  to project  a 3d curve   on a plane.  The <br>
//!          result will be a 3d curve. <br>
//! <br>
//!          You  can ask   the projected curve  to  have  the same <br>
//!          parametrization as the original curve. <br>
//! <br>
//!          The projection can be done  along every direction  not <br>
//!          parallel to the plane. <br>
//! <br>
public ref class OCProjLib_ProjectOnPlane  : public OCAdaptor3d_Curve {

protected:
  // dummy constructor;
  OCProjLib_ProjectOnPlane(OCDummy^) : OCAdaptor3d_Curve((OCDummy^)nullptr) {};

public:

// constructor from native
OCProjLib_ProjectOnPlane(ProjLib_ProjectOnPlane* nativeHandle);

// Methods PUBLIC

//! Empty constructor. <br>
OCProjLib_ProjectOnPlane();

//! The projection will be normal to the Plane defined <br>
//!          by the Ax3 <Pl>. <br>
OCProjLib_ProjectOnPlane(OCNaroWrappers::OCgp_Ax3^ Pl);

//! The projection will be  along the direction <D> on <br>
//!          the plane defined by the Ax3 <Pl>. <br>//! raises  if the direction  <D>  is parallel  to the <br>
//!          plane <Pl>. <br>
OCProjLib_ProjectOnPlane(OCNaroWrappers::OCgp_Ax3^ Pl, OCNaroWrappers::OCgp_Dir^ D);

//! Sets the  Curve  and perform  the projection.   if <br>
//!          <KeepParametrization> is true, the parametrization <br>
//!          of the Projected Curve <PC>  will  be the same  as <br>
//!          the parametrization of the initial  curve <C>.  It <br>
//!          meens: proj(C(u)) = PC(u) for  each u.  Otherwize, <br>
//!          the parametrization may change. <br>
 /*instead*/  void Load(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real Tolerance, System::Boolean KeepParametrization) ;


 /*instead*/  OCgp_Ax3^ GetPlane() ;


 /*instead*/  OCgp_Dir^ GetDirection() ;


 /*instead*/  OCAdaptor3d_HCurve^ GetCurve() ;


virtual /*instead*/  Standard_Real FirstParameter() override;


virtual /*instead*/  Standard_Real LastParameter() override;


virtual /*instead*/  OCGeomAbs_Shape Continuity() override;

//! If necessary,  breaks the  curve in  intervals  of <br>
//!          continuity  <S>.    And  returns   the number   of <br>
//!          intervals. <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) override;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) override;

//! Returns    a  curve equivalent   of  <me>  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>//! If <First> >= <Last> <br>
virtual /*instead*/  OCAdaptor3d_HCurve^ Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol) override;


virtual /*instead*/  System::Boolean IsClosed() override;


virtual /*instead*/  System::Boolean IsPeriodic() override;


virtual /*instead*/  Standard_Real Period() override;

//! Computes the point of parameter U on the curve. <br>
virtual /*instead*/  OCgp_Pnt^ Value(Standard_Real U) override;

//! Computes the point of parameter U on the curve. <br>
virtual /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) override;

//! Computes the point of parameter U on the curve with its <br>
//!  first derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C1. <br>
virtual /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V) override;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>//! Raised if the continuity of the current interval <br>
//!  is not C2. <br>
virtual /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) override;


//!  Returns the point P of parameter U, the first, the second <br>
//!  and the third derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C3. <br>
virtual /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) override;


//!  The returned vector gives the value of the derivative for the <br>
//!  order of derivation N. <br>//! Raised if the continuity of the current interval <br>
//!  is not CN. <br>//! Raised if N < 1. <br>
virtual /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) override;

//!  Returns the parametric  resolution corresponding <br>
//!         to the real space resolution <R3d>. <br>
virtual /*instead*/  Standard_Real Resolution(Standard_Real R3d) override;

//! Returns  the  type of the   curve  in the  current <br>
//!          interval :   Line,   Circle,   Ellipse, Hyperbola, <br>
//!          Parabola, BezierCurve, BSplineCurve, OtherCurve. <br>
virtual /*instead*/  OCGeomAbs_CurveType GetType() override;


virtual /*instead*/  OCgp_Lin^ Line() override;


virtual /*instead*/  OCgp_Circ^ Circle() override;


virtual /*instead*/  OCgp_Elips^ Ellipse() override;


virtual /*instead*/  OCgp_Hypr^ Hyperbola() override;


virtual /*instead*/  OCgp_Parab^ Parabola() override;


virtual /*instead*/  Standard_Integer Degree() override;


virtual /*instead*/  System::Boolean IsRational() override;


virtual /*instead*/  Standard_Integer NbPoles() override;


virtual /*instead*/  Standard_Integer NbKnots() override;

//!  Warning ! this will NOT make a copy of the <br>
//!         Bezier Curve : If you want to modify <br>
//!         the Curve please make a copy yourself <br>
//!         Also it will NOT trim the surface to <br>
//!         myFirst/Last. <br>
virtual /*instead*/  OCGeom_BezierCurve^ Bezier() override;

//!  Warning ! this will NOT make a copy of the <br>
//!         BSpline Curve : If you want to modify <br>
//!         the Curve please make a copy yourself <br>
//!         Also it will NOT trim the surface to <br>
//!         myFirst/Last. <br>
virtual /*instead*/  OCGeom_BSplineCurve^ BSpline() override;

~OCProjLib_ProjectOnPlane()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
