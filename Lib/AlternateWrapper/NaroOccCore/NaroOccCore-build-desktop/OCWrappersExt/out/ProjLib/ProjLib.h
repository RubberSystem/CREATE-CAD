// File generated by CPPExt (Package)
//

#ifndef _ProjLib_OCWrappers_HeaderFile
#define _ProjLib_OCWrappers_HeaderFile

// Include the wrapped header
#include <ProjLib.hxx>

#include "ProjLib_ProjectOnPlane.h"
#include "ProjLib_ProjectOnSurface.h"
#include "ProjLib_ComputeApprox.h"
#include "ProjLib_ComputeApproxOnPolarSurface.h"
#include "ProjLib_ProjectedCurve.h"
#include "ProjLib_HProjectedCurve.h"
#include "ProjLib_SequenceOfHSequenceOfPnt.h"
#include "ProjLib_HSequenceOfHSequenceOfPnt.h"
#include "ProjLib_CompProjectedCurve.h"
#include "ProjLib_HCompProjectedCurve.h"
#include "ProjLib_PrjResolve.h"
#include "ProjLib_PrjFunc.h"
#include "ProjLib_Projector.h"
#include "ProjLib_Plane.h"
#include "ProjLib_Cylinder.h"
#include "ProjLib_Cone.h"
#include "ProjLib_Sphere.h"
#include "ProjLib_Torus.h"
#include "ProjLib_SequenceNodeOfSequenceOfHSequenceOfPnt.h"


namespace OCNaroWrappers
{
//! The  projLib package  first provides projection of <br>
//!          curves on a   plane along a  given Direction.  The <br>
//!          result will be a 3D curve. <br>//! The ProjLib package  provides projection of curves <br>
//!          on surfaces to compute the curve in the parametric <br>
//!          space. <br>
//! <br>
//!          It is assumed that the curve is on the surface. <br>
//! <br>
//!          It provides : <br>
//! <br>
//!          * Package methods to handle the easiest cases : <br>
//! <br>
//!            - Line, Circle, Ellipse, Parabola, Hyperbola on plane. <br>
//! <br>
//!            - Line, Circle on cylinder. <br>
//! <br>
//!            - Line, Circle on cone. <br>
//! <br>
//!          * Classes to handle the general cases : <br>
//! <br>
//!            - Plane. <br>
//! <br>
//!            - Cylinder. <br>
//! <br>
//!            - Cone. <br>
//! <br>
//!            - Sphere. <br>
//! <br>
//!            - Torus. <br>
//! <br>
//! <br>
//!          * A generic  class to handle  a Curve from Adaptor3d <br>
//!          on a Surface from Adaptor3d. <br>
//! <br>
public ref class OCProjLib abstract sealed
{

public:
// Methods


static /*instead*/  OCgp_Pnt2d^ Project(OCNaroWrappers::OCgp_Pln^ Pl, OCNaroWrappers::OCgp_Pnt^ P) ;


static /*instead*/  OCgp_Lin2d^ Project(OCNaroWrappers::OCgp_Pln^ Pl, OCNaroWrappers::OCgp_Lin^ L) ;


static /*instead*/  OCgp_Circ2d^ Project(OCNaroWrappers::OCgp_Pln^ Pl, OCNaroWrappers::OCgp_Circ^ C) ;


static /*instead*/  OCgp_Elips2d^ Project(OCNaroWrappers::OCgp_Pln^ Pl, OCNaroWrappers::OCgp_Elips^ E) ;


static /*instead*/  OCgp_Parab2d^ Project(OCNaroWrappers::OCgp_Pln^ Pl, OCNaroWrappers::OCgp_Parab^ P) ;


static /*instead*/  OCgp_Hypr2d^ Project(OCNaroWrappers::OCgp_Pln^ Pl, OCNaroWrappers::OCgp_Hypr^ H) ;


static /*instead*/  OCgp_Pnt2d^ Project(OCNaroWrappers::OCgp_Cylinder^ Cy, OCNaroWrappers::OCgp_Pnt^ P) ;


static /*instead*/  OCgp_Lin2d^ Project(OCNaroWrappers::OCgp_Cylinder^ Cy, OCNaroWrappers::OCgp_Lin^ L) ;


static /*instead*/  OCgp_Lin2d^ Project(OCNaroWrappers::OCgp_Cylinder^ Cy, OCNaroWrappers::OCgp_Circ^ Ci) ;


static /*instead*/  OCgp_Pnt2d^ Project(OCNaroWrappers::OCgp_Cone^ Co, OCNaroWrappers::OCgp_Pnt^ P) ;


static /*instead*/  OCgp_Lin2d^ Project(OCNaroWrappers::OCgp_Cone^ Co, OCNaroWrappers::OCgp_Lin^ L) ;


static /*instead*/  OCgp_Lin2d^ Project(OCNaroWrappers::OCgp_Cone^ Co, OCNaroWrappers::OCgp_Circ^ Ci) ;


static /*instead*/  OCgp_Pnt2d^ Project(OCNaroWrappers::OCgp_Sphere^ Sp, OCNaroWrappers::OCgp_Pnt^ P) ;


static /*instead*/  OCgp_Lin2d^ Project(OCNaroWrappers::OCgp_Sphere^ Sp, OCNaroWrappers::OCgp_Circ^ Ci) ;


static /*instead*/  OCgp_Pnt2d^ Project(OCNaroWrappers::OCgp_Torus^ To, OCNaroWrappers::OCgp_Pnt^ P) ;


static /*instead*/  OCgp_Lin2d^ Project(OCNaroWrappers::OCgp_Torus^ To, OCNaroWrappers::OCgp_Circ^ Ci) ;


};

}; // OCNaroWrappers

#endif
