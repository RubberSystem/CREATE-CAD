// File generated by CPPExt (CPP file)
//

#include "ProjLib_PrjResolve.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "../Adaptor3d/Adaptor3d_Surface.h"
#include "../gp/gp_Pnt2d.h"


using namespace OCNaroWrappers;

OCProjLib_PrjResolve::OCProjLib_PrjResolve(ProjLib_PrjResolve* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCProjLib_PrjResolve::OCProjLib_PrjResolve(OCNaroWrappers::OCAdaptor3d_Curve^ C, OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer Fix) 
{
  nativeHandle = new ProjLib_PrjResolve(*((Adaptor3d_Curve*)C->Handle), *((Adaptor3d_Surface*)S->Handle), Fix);
}

 void OCProjLib_PrjResolve::Perform(Standard_Real t, Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt2d^ Tol, OCNaroWrappers::OCgp_Pnt2d^ Inf, OCNaroWrappers::OCgp_Pnt2d^ Sup, Standard_Real FTol, System::Boolean StrictInside)
{
  ((ProjLib_PrjResolve*)nativeHandle)->Perform(t, U, V, *((gp_Pnt2d*)Tol->Handle), *((gp_Pnt2d*)Inf->Handle), *((gp_Pnt2d*)Sup->Handle), FTol, OCConverter::BooleanToStandardBoolean(StrictInside));
}

 System::Boolean OCProjLib_PrjResolve::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_PrjResolve*)nativeHandle)->IsDone());
}

OCgp_Pnt2d^ OCProjLib_PrjResolve::Solution()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((ProjLib_PrjResolve*)nativeHandle)->Solution();
  return gcnew OCgp_Pnt2d(tmp);
}


