// File generated by CPPExt (MPV)
//
#ifndef _ProjLib_ProjectOnSurface_OCWrappers_HeaderFile
#define _ProjLib_ProjectOnSurface_OCWrappers_HeaderFile

// include native header
#include <ProjLib_ProjectOnSurface.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCAdaptor3d_HCurve;
ref class OCAdaptor3d_HSurface;
ref class OCGeom_BSplineCurve;



public ref class OCProjLib_ProjectOnSurface  {

protected:
  ProjLib_ProjectOnSurface* nativeHandle;
  OCProjLib_ProjectOnSurface(OCDummy^) {};

public:
  property ProjLib_ProjectOnSurface* Handle
  {
    ProjLib_ProjectOnSurface* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCProjLib_ProjectOnSurface(ProjLib_ProjectOnSurface* nativeHandle);

// Methods PUBLIC

//!  Create an empty projector. <br>
OCProjLib_ProjectOnSurface();

//! Create a projector normaly to the surface <S>. <br>
OCProjLib_ProjectOnSurface(OCNaroWrappers::OCAdaptor3d_HSurface^ S);


virtual /*instead*/  void Delete() ;

//! Set the Surface to <S>. <br>
//!          To compute the projection, you have to Load the Curve. <br>
 /*instead*/  void Load(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;

//! Compute the projection of the curve <C> on the Surface. <br>
 /*instead*/  void Load(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real Tolerance) ;


 /*instead*/  System::Boolean IsDone() ;


 /*instead*/  OCGeom_BSplineCurve^ BSpline() ;

~OCProjLib_ProjectOnSurface()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
