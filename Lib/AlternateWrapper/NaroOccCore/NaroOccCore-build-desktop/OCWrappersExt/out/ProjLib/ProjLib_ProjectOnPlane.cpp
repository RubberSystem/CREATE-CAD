// File generated by CPPExt (CPP file)
//

#include "ProjLib_ProjectOnPlane.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../GeomAdaptor/GeomAdaptor_HCurve.h"
#include "../gp/gp_Ax3.h"
#include "../gp/gp_Dir.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Hypr.h"
#include "../gp/gp_Parab.h"
#include "../Geom/Geom_BezierCurve.h"
#include "../Geom/Geom_BSplineCurve.h"


using namespace OCNaroWrappers;

OCProjLib_ProjectOnPlane::OCProjLib_ProjectOnPlane(ProjLib_ProjectOnPlane* nativeHandle) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCProjLib_ProjectOnPlane::OCProjLib_ProjectOnPlane() : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new ProjLib_ProjectOnPlane();
}

OCProjLib_ProjectOnPlane::OCProjLib_ProjectOnPlane(OCNaroWrappers::OCgp_Ax3^ Pl) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new ProjLib_ProjectOnPlane(*((gp_Ax3*)Pl->Handle));
}

OCProjLib_ProjectOnPlane::OCProjLib_ProjectOnPlane(OCNaroWrappers::OCgp_Ax3^ Pl, OCNaroWrappers::OCgp_Dir^ D) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new ProjLib_ProjectOnPlane(*((gp_Ax3*)Pl->Handle), *((gp_Dir*)D->Handle));
}

 void OCProjLib_ProjectOnPlane::Load(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real Tolerance, System::Boolean KeepParametrization)
{
  ((ProjLib_ProjectOnPlane*)nativeHandle)->Load(*((Handle_Adaptor3d_HCurve*)C->Handle), Tolerance, OCConverter::BooleanToStandardBoolean(KeepParametrization));
}

OCgp_Ax3^ OCProjLib_ProjectOnPlane::GetPlane()
{
  gp_Ax3* tmp = new gp_Ax3();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->GetPlane();
  return gcnew OCgp_Ax3(tmp);
}

OCgp_Dir^ OCProjLib_ProjectOnPlane::GetDirection()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->GetDirection();
  return gcnew OCgp_Dir(tmp);
}

OCAdaptor3d_HCurve^ OCProjLib_ProjectOnPlane::GetCurve()
{
  Handle(Adaptor3d_HCurve) tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->GetCurve();
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 Standard_Real OCProjLib_ProjectOnPlane::FirstParameter()
{
  return ((ProjLib_ProjectOnPlane*)nativeHandle)->FirstParameter();
}

 Standard_Real OCProjLib_ProjectOnPlane::LastParameter()
{
  return ((ProjLib_ProjectOnPlane*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCProjLib_ProjectOnPlane::Continuity()
{
  return (OCGeomAbs_Shape)(((ProjLib_ProjectOnPlane*)nativeHandle)->Continuity());
}

 Standard_Integer OCProjLib_ProjectOnPlane::NbIntervals(OCGeomAbs_Shape S)
{
  return ((ProjLib_ProjectOnPlane*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCProjLib_ProjectOnPlane::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((ProjLib_ProjectOnPlane*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor3d_HCurve^ OCProjLib_ProjectOnPlane::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HCurve) tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 System::Boolean OCProjLib_ProjectOnPlane::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_ProjectOnPlane*)nativeHandle)->IsClosed());
}

 System::Boolean OCProjLib_ProjectOnPlane::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_ProjectOnPlane*)nativeHandle)->IsPeriodic());
}

 Standard_Real OCProjLib_ProjectOnPlane::Period()
{
  return ((ProjLib_ProjectOnPlane*)nativeHandle)->Period();
}

OCgp_Pnt^ OCProjLib_ProjectOnPlane::Value(Standard_Real U)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->Value(U);
  return gcnew OCgp_Pnt(tmp);
}

 void OCProjLib_ProjectOnPlane::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  ((ProjLib_ProjectOnPlane*)nativeHandle)->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCProjLib_ProjectOnPlane::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V)
{
  ((ProjLib_ProjectOnPlane*)nativeHandle)->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V->Handle));
}

 void OCProjLib_ProjectOnPlane::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  ((ProjLib_ProjectOnPlane*)nativeHandle)->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCProjLib_ProjectOnPlane::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  ((ProjLib_ProjectOnPlane*)nativeHandle)->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCProjLib_ProjectOnPlane::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCProjLib_ProjectOnPlane::Resolution(Standard_Real R3d)
{
  return ((ProjLib_ProjectOnPlane*)nativeHandle)->Resolution(R3d);
}

 OCGeomAbs_CurveType OCProjLib_ProjectOnPlane::GetType()
{
  return (OCGeomAbs_CurveType)(((ProjLib_ProjectOnPlane*)nativeHandle)->GetType());
}

OCgp_Lin^ OCProjLib_ProjectOnPlane::Line()
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->Line();
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCProjLib_ProjectOnPlane::Circle()
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->Circle();
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCProjLib_ProjectOnPlane::Ellipse()
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips(tmp);
}

OCgp_Hypr^ OCProjLib_ProjectOnPlane::Hyperbola()
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr(tmp);
}

OCgp_Parab^ OCProjLib_ProjectOnPlane::Parabola()
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab(tmp);
}

 Standard_Integer OCProjLib_ProjectOnPlane::Degree()
{
  return ((ProjLib_ProjectOnPlane*)nativeHandle)->Degree();
}

 System::Boolean OCProjLib_ProjectOnPlane::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((ProjLib_ProjectOnPlane*)nativeHandle)->IsRational());
}

 Standard_Integer OCProjLib_ProjectOnPlane::NbPoles()
{
  return ((ProjLib_ProjectOnPlane*)nativeHandle)->NbPoles();
}

 Standard_Integer OCProjLib_ProjectOnPlane::NbKnots()
{
  return ((ProjLib_ProjectOnPlane*)nativeHandle)->NbKnots();
}

OCGeom_BezierCurve^ OCProjLib_ProjectOnPlane::Bezier()
{
  Handle(Geom_BezierCurve) tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->Bezier();
  return gcnew OCGeom_BezierCurve(&tmp);
}

OCGeom_BSplineCurve^ OCProjLib_ProjectOnPlane::BSpline()
{
  Handle(Geom_BSplineCurve) tmp = ((ProjLib_ProjectOnPlane*)nativeHandle)->BSpline();
  return gcnew OCGeom_BSplineCurve(&tmp);
}


