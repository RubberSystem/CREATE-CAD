// File generated by CPPExt (MPV)
//
#ifndef _ProjLib_Projector_OCWrappers_HeaderFile
#define _ProjLib_Projector_OCWrappers_HeaderFile

// include native header
#include <ProjLib_Projector.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"


namespace OCNaroWrappers
{

ref class OCGeom2d_BSplineCurve;
ref class OCGeom2d_BezierCurve;
ref class OCgp_Lin2d;
ref class OCgp_Circ2d;
ref class OCgp_Elips2d;
ref class OCgp_Hypr2d;
ref class OCgp_Parab2d;
ref class OCgp_Lin;
ref class OCgp_Circ;
ref class OCgp_Elips;
ref class OCgp_Parab;
ref class OCgp_Hypr;


//! Root class for projection algorithms, stores the result. <br>
public ref class OCProjLib_Projector  {

protected:
  ProjLib_Projector* nativeHandle;
  OCProjLib_Projector(OCDummy^) {};

public:
  property ProjLib_Projector* Handle
  {
    ProjLib_Projector* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCProjLib_Projector(ProjLib_Projector* nativeHandle);

// Methods PUBLIC

//! Sets the type to OtherCurve <br>
OCProjLib_Projector();


virtual /*instead*/  void Delete() ;


 /*instead*/  System::Boolean IsDone() ;

//! Set isDone = Standard_True; <br>
 /*instead*/  void Done() ;


 /*instead*/  OCGeomAbs_CurveType GetType() ;


 /*instead*/  void SetBSpline(OCNaroWrappers::OCGeom2d_BSplineCurve^ C) ;


 /*instead*/  void SetBezier(OCNaroWrappers::OCGeom2d_BezierCurve^ C) ;


 /*instead*/  void SetType(OCGeomAbs_CurveType Type) ;


 /*instead*/  System::Boolean IsPeriodic() ;


 /*instead*/  void SetPeriodic() ;


 /*instead*/  OCgp_Lin2d^ Line() ;


 /*instead*/  OCgp_Circ2d^ Circle() ;


 /*instead*/  OCgp_Elips2d^ Ellipse() ;


 /*instead*/  OCgp_Hypr2d^ Hyperbola() ;


 /*instead*/  OCgp_Parab2d^ Parabola() ;


 /*instead*/  OCGeom2d_BezierCurve^ Bezier() ;


 /*instead*/  OCGeom2d_BSplineCurve^ BSpline() ;


virtual /*instead*/  void Project(OCNaroWrappers::OCgp_Lin^ L) ;


virtual /*instead*/  void Project(OCNaroWrappers::OCgp_Circ^ C) ;


virtual /*instead*/  void Project(OCNaroWrappers::OCgp_Elips^ E) ;


virtual /*instead*/  void Project(OCNaroWrappers::OCgp_Parab^ P) ;


virtual /*instead*/  void Project(OCNaroWrappers::OCgp_Hypr^ H) ;

//! Translates the 2d curve <br>
//!          to set the part of the curve [CFirst, CLast] <br>
//!          in the range [ UFirst, UFirst + Period [ <br>
 /*instead*/  void UFrame(Standard_Real CFirst, Standard_Real CLast, Standard_Real UFirst, Standard_Real Period) ;

//! Translates the 2d curve <br>
//!          to set the part of the curve [CFirst, CLast] <br>
//!          in the range [ VFirst, VFirst + Period [ <br>
 /*instead*/  void VFrame(Standard_Real CFirst, Standard_Real CLast, Standard_Real VFirst, Standard_Real Period) ;

~OCProjLib_Projector()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
