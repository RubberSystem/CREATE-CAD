// File generated by CPPExt (CPP file)
//

#include "ChFiDS_FilSpine.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../gp/gp_XY.h"
#include "../Law/Law_Function.h"
#include "../Law/Law_Composite.h"
#include "ChFiDS_HElSpine.h"


using namespace OCNaroWrappers;

OCChFiDS_FilSpine::OCChFiDS_FilSpine(Handle(ChFiDS_FilSpine)* nativeHandle) : OCChFiDS_Spine((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_ChFiDS_FilSpine(*nativeHandle);
}

OCChFiDS_FilSpine::OCChFiDS_FilSpine() : OCChFiDS_Spine((OCDummy^)nullptr)

{
  nativeHandle = new Handle_ChFiDS_FilSpine(new ChFiDS_FilSpine());
}

OCChFiDS_FilSpine::OCChFiDS_FilSpine(Standard_Real Tol) : OCChFiDS_Spine((OCDummy^)nullptr)

{
  nativeHandle = new Handle_ChFiDS_FilSpine(new ChFiDS_FilSpine(Tol));
}

 void OCChFiDS_FilSpine::Reset(System::Boolean AllData)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->Reset(OCConverter::BooleanToStandardBoolean(AllData));
}

 void OCChFiDS_FilSpine::SetRadius(Standard_Real Radius, OCNaroWrappers::OCTopoDS_Edge^ E)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->SetRadius(Radius, *((TopoDS_Edge*)E->Handle));
}

 void OCChFiDS_FilSpine::UnSetRadius(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->UnSetRadius(*((TopoDS_Edge*)E->Handle));
}

 void OCChFiDS_FilSpine::SetRadius(Standard_Real Radius, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->SetRadius(Radius, *((TopoDS_Vertex*)V->Handle));
}

 void OCChFiDS_FilSpine::UnSetRadius(OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->UnSetRadius(*((TopoDS_Vertex*)V->Handle));
}

 void OCChFiDS_FilSpine::SetRadius(OCNaroWrappers::OCgp_XY^ UandR, Standard_Integer IinC)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->SetRadius(*((gp_XY*)UandR->Handle), IinC);
}

 void OCChFiDS_FilSpine::SetRadius(Standard_Real Radius)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->SetRadius(Radius);
}

 void OCChFiDS_FilSpine::SetRadius(OCNaroWrappers::OCLaw_Function^ C, Standard_Integer IinC)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->SetRadius(*((Handle_Law_Function*)C->Handle), IinC);
}

 System::Boolean OCChFiDS_FilSpine::IsConstant()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_FilSpine*)nativeHandle))->IsConstant());
}

 System::Boolean OCChFiDS_FilSpine::IsConstant(Standard_Integer IE)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_FilSpine*)nativeHandle))->IsConstant(IE));
}

 Standard_Real OCChFiDS_FilSpine::Radius()
{
  return (*((Handle_ChFiDS_FilSpine*)nativeHandle))->Radius();
}

 Standard_Real OCChFiDS_FilSpine::Radius(Standard_Integer IE)
{
  return (*((Handle_ChFiDS_FilSpine*)nativeHandle))->Radius(IE);
}

 Standard_Real OCChFiDS_FilSpine::Radius(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  return (*((Handle_ChFiDS_FilSpine*)nativeHandle))->Radius(*((TopoDS_Edge*)E->Handle));
}

 void OCChFiDS_FilSpine::AppendElSpine(OCNaroWrappers::OCChFiDS_HElSpine^ Els)
{
  (*((Handle_ChFiDS_FilSpine*)nativeHandle))->AppendElSpine(*((Handle_ChFiDS_HElSpine*)Els->Handle));
}

OCLaw_Composite^ OCChFiDS_FilSpine::Law(OCNaroWrappers::OCChFiDS_HElSpine^ Els)
{
  Handle(Law_Composite) tmp = (*((Handle_ChFiDS_FilSpine*)nativeHandle))->Law(*((Handle_ChFiDS_HElSpine*)Els->Handle));
  return gcnew OCLaw_Composite(&tmp);
}

OCLaw_Function^ OCChFiDS_FilSpine::ChangeLaw(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  Handle(Law_Function) tmp = (*((Handle_ChFiDS_FilSpine*)nativeHandle))->ChangeLaw(*((TopoDS_Edge*)E->Handle));
  return gcnew OCLaw_Function(&tmp);
}

 Standard_Real OCChFiDS_FilSpine::MaxRadFromSeqAndLaws()
{
  return (*((Handle_ChFiDS_FilSpine*)nativeHandle))->MaxRadFromSeqAndLaws();
}


