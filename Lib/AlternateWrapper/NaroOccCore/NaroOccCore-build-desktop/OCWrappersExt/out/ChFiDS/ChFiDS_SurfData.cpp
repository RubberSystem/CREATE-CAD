// File generated by CPPExt (CPP file)
//

#include "ChFiDS_SurfData.h"
#include "../Converter.h"
#include "../MMgt/MMgt_TShared.h"
#include "ChFiDS_FaceInterference.h"
#include "ChFiDS_CommonPoint.h"
#include "../gp/gp_Pnt2d.h"


using namespace OCNaroWrappers;

OCChFiDS_SurfData::OCChFiDS_SurfData(Handle(ChFiDS_SurfData)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_ChFiDS_SurfData(*nativeHandle);
}

OCChFiDS_SurfData::OCChFiDS_SurfData() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_ChFiDS_SurfData(new ChFiDS_SurfData());
}

 void OCChFiDS_SurfData::Copy(OCNaroWrappers::OCChFiDS_SurfData^ Other)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->Copy(*((Handle_ChFiDS_SurfData*)Other->Handle));
}

 Standard_Integer OCChFiDS_SurfData::IndexOfS1()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->IndexOfS1();
}

 Standard_Integer OCChFiDS_SurfData::IndexOfS2()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->IndexOfS2();
}

 System::Boolean OCChFiDS_SurfData::IsOnCurve1()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_SurfData*)nativeHandle))->IsOnCurve1());
}

 System::Boolean OCChFiDS_SurfData::IsOnCurve2()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_SurfData*)nativeHandle))->IsOnCurve2());
}

 Standard_Integer OCChFiDS_SurfData::IndexOfC1()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->IndexOfC1();
}

 Standard_Integer OCChFiDS_SurfData::IndexOfC2()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->IndexOfC2();
}

 Standard_Integer OCChFiDS_SurfData::Surf()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->Surf();
}

 OCTopAbs_Orientation OCChFiDS_SurfData::Orientation()
{
  return (OCTopAbs_Orientation)((*((Handle_ChFiDS_SurfData*)nativeHandle))->Orientation());
}

OCChFiDS_FaceInterference^ OCChFiDS_SurfData::InterferenceOnS1()
{
  ChFiDS_FaceInterference* tmp = new ChFiDS_FaceInterference();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->InterferenceOnS1();
  return gcnew OCChFiDS_FaceInterference(tmp);
}

OCChFiDS_FaceInterference^ OCChFiDS_SurfData::InterferenceOnS2()
{
  ChFiDS_FaceInterference* tmp = new ChFiDS_FaceInterference();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->InterferenceOnS2();
  return gcnew OCChFiDS_FaceInterference(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::VertexFirstOnS1()
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->VertexFirstOnS1();
  return gcnew OCChFiDS_CommonPoint(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::VertexFirstOnS2()
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->VertexFirstOnS2();
  return gcnew OCChFiDS_CommonPoint(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::VertexLastOnS1()
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->VertexLastOnS1();
  return gcnew OCChFiDS_CommonPoint(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::VertexLastOnS2()
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->VertexLastOnS2();
  return gcnew OCChFiDS_CommonPoint(tmp);
}

 void OCChFiDS_SurfData::ChangeIndexOfS1(Standard_Integer Index)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeIndexOfS1(Index);
}

 void OCChFiDS_SurfData::ChangeIndexOfS2(Standard_Integer Index)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeIndexOfS2(Index);
}

 void OCChFiDS_SurfData::ChangeSurf(Standard_Integer Index)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeSurf(Index);
}

 void OCChFiDS_SurfData::SetIndexOfC1(Standard_Integer Index)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->SetIndexOfC1(Index);
}

 void OCChFiDS_SurfData::SetIndexOfC2(Standard_Integer Index)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->SetIndexOfC2(Index);
}

 OCTopAbs_Orientation OCChFiDS_SurfData::ChangeOrientation()
{
  return (OCTopAbs_Orientation)((*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeOrientation());
}

OCChFiDS_FaceInterference^ OCChFiDS_SurfData::ChangeInterferenceOnS1()
{
  ChFiDS_FaceInterference* tmp = new ChFiDS_FaceInterference();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeInterferenceOnS1();
  return gcnew OCChFiDS_FaceInterference(tmp);
}

OCChFiDS_FaceInterference^ OCChFiDS_SurfData::ChangeInterferenceOnS2()
{
  ChFiDS_FaceInterference* tmp = new ChFiDS_FaceInterference();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeInterferenceOnS2();
  return gcnew OCChFiDS_FaceInterference(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::ChangeVertexFirstOnS1()
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeVertexFirstOnS1();
  return gcnew OCChFiDS_CommonPoint(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::ChangeVertexFirstOnS2()
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeVertexFirstOnS2();
  return gcnew OCChFiDS_CommonPoint(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::ChangeVertexLastOnS1()
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeVertexLastOnS1();
  return gcnew OCChFiDS_CommonPoint(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::ChangeVertexLastOnS2()
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeVertexLastOnS2();
  return gcnew OCChFiDS_CommonPoint(tmp);
}

OCChFiDS_FaceInterference^ OCChFiDS_SurfData::Interference(Standard_Integer OnS)
{
  ChFiDS_FaceInterference* tmp = new ChFiDS_FaceInterference();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->Interference(OnS);
  return gcnew OCChFiDS_FaceInterference(tmp);
}

OCChFiDS_FaceInterference^ OCChFiDS_SurfData::ChangeInterference(Standard_Integer OnS)
{
  ChFiDS_FaceInterference* tmp = new ChFiDS_FaceInterference();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeInterference(OnS);
  return gcnew OCChFiDS_FaceInterference(tmp);
}

 Standard_Integer OCChFiDS_SurfData::Index(Standard_Integer OfS)
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->Index(OfS);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::Vertex(System::Boolean First, Standard_Integer OnS)
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->Vertex(OCConverter::BooleanToStandardBoolean(First), OnS);
  return gcnew OCChFiDS_CommonPoint(tmp);
}

OCChFiDS_CommonPoint^ OCChFiDS_SurfData::ChangeVertex(System::Boolean First, Standard_Integer OnS)
{
  ChFiDS_CommonPoint* tmp = new ChFiDS_CommonPoint();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->ChangeVertex(OCConverter::BooleanToStandardBoolean(First), OnS);
  return gcnew OCChFiDS_CommonPoint(tmp);
}

 System::Boolean OCChFiDS_SurfData::IsOnCurve(Standard_Integer OnS)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_SurfData*)nativeHandle))->IsOnCurve(OnS));
}

 Standard_Integer OCChFiDS_SurfData::IndexOfC(Standard_Integer OnS)
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->IndexOfC(OnS);
}

 Standard_Real OCChFiDS_SurfData::FirstSpineParam()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->FirstSpineParam();
}

 Standard_Real OCChFiDS_SurfData::LastSpineParam()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->LastSpineParam();
}

 void OCChFiDS_SurfData::FirstSpineParam(Standard_Real Par)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->FirstSpineParam(Par);
}

 void OCChFiDS_SurfData::LastSpineParam(Standard_Real Par)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->LastSpineParam(Par);
}

 Standard_Real OCChFiDS_SurfData::FirstExtensionValue()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->FirstExtensionValue();
}

 Standard_Real OCChFiDS_SurfData::LastExtensionValue()
{
  return (*((Handle_ChFiDS_SurfData*)nativeHandle))->LastExtensionValue();
}

 void OCChFiDS_SurfData::FirstExtensionValue(Standard_Real Extend)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->FirstExtensionValue(Extend);
}

 void OCChFiDS_SurfData::LastExtensionValue(Standard_Real Extend)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->LastExtensionValue(Extend);
}

OCMMgt_TShared^ OCChFiDS_SurfData::Simul()
{
  Handle(MMgt_TShared) tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->Simul();
  return gcnew OCMMgt_TShared(&tmp);
}

 void OCChFiDS_SurfData::SetSimul(OCNaroWrappers::OCMMgt_TShared^ S)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->SetSimul(*((Handle_MMgt_TShared*)S->Handle));
}

 void OCChFiDS_SurfData::ResetSimul()
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->ResetSimul();
}

OCgp_Pnt2d^ OCChFiDS_SurfData::Get2dPoints(System::Boolean First, Standard_Integer OnS)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_ChFiDS_SurfData*)nativeHandle))->Get2dPoints(OCConverter::BooleanToStandardBoolean(First), OnS);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCChFiDS_SurfData::Get2dPoints(OCNaroWrappers::OCgp_Pnt2d^ P2df1, OCNaroWrappers::OCgp_Pnt2d^ P2dl1, OCNaroWrappers::OCgp_Pnt2d^ P2df2, OCNaroWrappers::OCgp_Pnt2d^ P2dl2)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->Get2dPoints(*((gp_Pnt2d*)P2df1->Handle), *((gp_Pnt2d*)P2dl1->Handle), *((gp_Pnt2d*)P2df2->Handle), *((gp_Pnt2d*)P2dl2->Handle));
}

 void OCChFiDS_SurfData::Set2dPoints(OCNaroWrappers::OCgp_Pnt2d^ P2df1, OCNaroWrappers::OCgp_Pnt2d^ P2dl1, OCNaroWrappers::OCgp_Pnt2d^ P2df2, OCNaroWrappers::OCgp_Pnt2d^ P2dl2)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->Set2dPoints(*((gp_Pnt2d*)P2df1->Handle), *((gp_Pnt2d*)P2dl1->Handle), *((gp_Pnt2d*)P2df2->Handle), *((gp_Pnt2d*)P2dl2->Handle));
}

 System::Boolean OCChFiDS_SurfData::TwistOnS1()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_SurfData*)nativeHandle))->TwistOnS1());
}

 System::Boolean OCChFiDS_SurfData::TwistOnS2()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_SurfData*)nativeHandle))->TwistOnS2());
}

 void OCChFiDS_SurfData::TwistOnS1(System::Boolean T)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->TwistOnS1(OCConverter::BooleanToStandardBoolean(T));
}

 void OCChFiDS_SurfData::TwistOnS2(System::Boolean T)
{
  (*((Handle_ChFiDS_SurfData*)nativeHandle))->TwistOnS2(OCConverter::BooleanToStandardBoolean(T));
}


