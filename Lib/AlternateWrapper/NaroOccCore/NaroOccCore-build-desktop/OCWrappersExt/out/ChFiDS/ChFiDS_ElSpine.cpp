// File generated by CPPExt (CPP file)
//

#include "ChFiDS_ElSpine.h"
#include "../Converter.h"
#include "ChFiDS_SurfData.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../Geom/Geom_Curve.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Hypr.h"
#include "../gp/gp_Parab.h"
#include "../Geom/Geom_BezierCurve.h"
#include "../Geom/Geom_BSplineCurve.h"


using namespace OCNaroWrappers;

OCChFiDS_ElSpine::OCChFiDS_ElSpine(ChFiDS_ElSpine* nativeHandle) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCChFiDS_ElSpine::OCChFiDS_ElSpine() : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new ChFiDS_ElSpine();
}

 Standard_Real OCChFiDS_ElSpine::FirstParameter()
{
  return ((ChFiDS_ElSpine*)nativeHandle)->FirstParameter();
}

 Standard_Real OCChFiDS_ElSpine::LastParameter()
{
  return ((ChFiDS_ElSpine*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCChFiDS_ElSpine::Continuity()
{
  return (OCGeomAbs_Shape)(((ChFiDS_ElSpine*)nativeHandle)->Continuity());
}

 Standard_Integer OCChFiDS_ElSpine::NbIntervals(OCGeomAbs_Shape S)
{
  return ((ChFiDS_ElSpine*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCChFiDS_ElSpine::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((ChFiDS_ElSpine*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor3d_HCurve^ OCChFiDS_ElSpine::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HCurve) tmp = ((ChFiDS_ElSpine*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 Standard_Real OCChFiDS_ElSpine::Resolution(Standard_Real R3d)
{
  return ((ChFiDS_ElSpine*)nativeHandle)->Resolution(R3d);
}

 OCGeomAbs_CurveType OCChFiDS_ElSpine::GetType()
{
  return (OCGeomAbs_CurveType)(((ChFiDS_ElSpine*)nativeHandle)->GetType());
}

 System::Boolean OCChFiDS_ElSpine::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((ChFiDS_ElSpine*)nativeHandle)->IsPeriodic());
}

 void OCChFiDS_ElSpine::SetPeriodic(System::Boolean I)
{
  ((ChFiDS_ElSpine*)nativeHandle)->SetPeriodic(OCConverter::BooleanToStandardBoolean(I));
}

 Standard_Real OCChFiDS_ElSpine::Period()
{
  return ((ChFiDS_ElSpine*)nativeHandle)->Period();
}

OCgp_Pnt^ OCChFiDS_ElSpine::Value(Standard_Real AbsC)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((ChFiDS_ElSpine*)nativeHandle)->Value(AbsC);
  return gcnew OCgp_Pnt(tmp);
}

 void OCChFiDS_ElSpine::D0(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P)
{
  ((ChFiDS_ElSpine*)nativeHandle)->D0(AbsC, *((gp_Pnt*)P->Handle));
}

 void OCChFiDS_ElSpine::D1(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1)
{
  ((ChFiDS_ElSpine*)nativeHandle)->D1(AbsC, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle));
}

 void OCChFiDS_ElSpine::D2(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  ((ChFiDS_ElSpine*)nativeHandle)->D2(AbsC, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCChFiDS_ElSpine::D3(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  ((ChFiDS_ElSpine*)nativeHandle)->D3(AbsC, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

 void OCChFiDS_ElSpine::FirstParameter(Standard_Real P)
{
  ((ChFiDS_ElSpine*)nativeHandle)->FirstParameter(P);
}

 void OCChFiDS_ElSpine::LastParameter(Standard_Real P)
{
  ((ChFiDS_ElSpine*)nativeHandle)->LastParameter(P);
}

 void OCChFiDS_ElSpine::SetOrigin(Standard_Real O)
{
  ((ChFiDS_ElSpine*)nativeHandle)->SetOrigin(O);
}

 void OCChFiDS_ElSpine::FirstPointAndTgt(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ T)
{
  ((ChFiDS_ElSpine*)nativeHandle)->FirstPointAndTgt(*((gp_Pnt*)P->Handle), *((gp_Vec*)T->Handle));
}

 void OCChFiDS_ElSpine::LastPointAndTgt(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ T)
{
  ((ChFiDS_ElSpine*)nativeHandle)->LastPointAndTgt(*((gp_Pnt*)P->Handle), *((gp_Vec*)T->Handle));
}

 void OCChFiDS_ElSpine::SetFirstPointAndTgt(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ T)
{
  ((ChFiDS_ElSpine*)nativeHandle)->SetFirstPointAndTgt(*((gp_Pnt*)P->Handle), *((gp_Vec*)T->Handle));
}

 void OCChFiDS_ElSpine::SetLastPointAndTgt(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ T)
{
  ((ChFiDS_ElSpine*)nativeHandle)->SetLastPointAndTgt(*((gp_Pnt*)P->Handle), *((gp_Vec*)T->Handle));
}

 void OCChFiDS_ElSpine::SetCurve(OCNaroWrappers::OCGeom_Curve^ C)
{
  ((ChFiDS_ElSpine*)nativeHandle)->SetCurve(*((Handle_Geom_Curve*)C->Handle));
}

OCChFiDS_SurfData^ OCChFiDS_ElSpine::Previous()
{
  Handle(ChFiDS_SurfData) tmp = ((ChFiDS_ElSpine*)nativeHandle)->Previous();
  return gcnew OCChFiDS_SurfData(&tmp);
}

OCChFiDS_SurfData^ OCChFiDS_ElSpine::ChangePrevious()
{
  Handle(ChFiDS_SurfData) tmp = ((ChFiDS_ElSpine*)nativeHandle)->ChangePrevious();
  return gcnew OCChFiDS_SurfData(&tmp);
}

OCChFiDS_SurfData^ OCChFiDS_ElSpine::Next()
{
  Handle(ChFiDS_SurfData) tmp = ((ChFiDS_ElSpine*)nativeHandle)->Next();
  return gcnew OCChFiDS_SurfData(&tmp);
}

OCChFiDS_SurfData^ OCChFiDS_ElSpine::ChangeNext()
{
  Handle(ChFiDS_SurfData) tmp = ((ChFiDS_ElSpine*)nativeHandle)->ChangeNext();
  return gcnew OCChFiDS_SurfData(&tmp);
}

OCgp_Lin^ OCChFiDS_ElSpine::Line()
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = ((ChFiDS_ElSpine*)nativeHandle)->Line();
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCChFiDS_ElSpine::Circle()
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((ChFiDS_ElSpine*)nativeHandle)->Circle();
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCChFiDS_ElSpine::Ellipse()
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((ChFiDS_ElSpine*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips(tmp);
}

OCgp_Hypr^ OCChFiDS_ElSpine::Hyperbola()
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = ((ChFiDS_ElSpine*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr(tmp);
}

OCgp_Parab^ OCChFiDS_ElSpine::Parabola()
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((ChFiDS_ElSpine*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab(tmp);
}

OCGeom_BezierCurve^ OCChFiDS_ElSpine::Bezier()
{
  Handle(Geom_BezierCurve) tmp = ((ChFiDS_ElSpine*)nativeHandle)->Bezier();
  return gcnew OCGeom_BezierCurve(&tmp);
}

OCGeom_BSplineCurve^ OCChFiDS_ElSpine::BSpline()
{
  Handle(Geom_BSplineCurve) tmp = ((ChFiDS_ElSpine*)nativeHandle)->BSpline();
  return gcnew OCGeom_BSplineCurve(&tmp);
}


