// File generated by CPPExt (CPP file)
//

#include "ChFiDS_ListOfHElSpine.h"
#include "../Converter.h"
#include "ChFiDS_ListIteratorOfListOfHElSpine.h"
#include "ChFiDS_HElSpine.h"
#include "ChFiDS_ListNodeOfListOfHElSpine.h"


using namespace OCNaroWrappers;

OCChFiDS_ListOfHElSpine::OCChFiDS_ListOfHElSpine(ChFiDS_ListOfHElSpine* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCChFiDS_ListOfHElSpine::OCChFiDS_ListOfHElSpine() 
{
  nativeHandle = new ChFiDS_ListOfHElSpine();
}

 void OCChFiDS_ListOfHElSpine::Assign(OCNaroWrappers::OCChFiDS_ListOfHElSpine^ Other)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->Assign(*((ChFiDS_ListOfHElSpine*)Other->Handle));
}

 Standard_Integer OCChFiDS_ListOfHElSpine::Extent()
{
  return ((ChFiDS_ListOfHElSpine*)nativeHandle)->Extent();
}

 System::Boolean OCChFiDS_ListOfHElSpine::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((ChFiDS_ListOfHElSpine*)nativeHandle)->IsEmpty());
}

 void OCChFiDS_ListOfHElSpine::Prepend(OCNaroWrappers::OCChFiDS_HElSpine^ I)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->Prepend(*((Handle_ChFiDS_HElSpine*)I->Handle));
}

 void OCChFiDS_ListOfHElSpine::Prepend(OCNaroWrappers::OCChFiDS_HElSpine^ I, OCNaroWrappers::OCChFiDS_ListIteratorOfListOfHElSpine^ theIt)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->Prepend(*((Handle_ChFiDS_HElSpine*)I->Handle), *((ChFiDS_ListIteratorOfListOfHElSpine*)theIt->Handle));
}

 void OCChFiDS_ListOfHElSpine::Prepend(OCNaroWrappers::OCChFiDS_ListOfHElSpine^ Other)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->Prepend(*((ChFiDS_ListOfHElSpine*)Other->Handle));
}

 void OCChFiDS_ListOfHElSpine::Append(OCNaroWrappers::OCChFiDS_HElSpine^ I)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->Append(*((Handle_ChFiDS_HElSpine*)I->Handle));
}

 void OCChFiDS_ListOfHElSpine::Append(OCNaroWrappers::OCChFiDS_HElSpine^ I, OCNaroWrappers::OCChFiDS_ListIteratorOfListOfHElSpine^ theIt)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->Append(*((Handle_ChFiDS_HElSpine*)I->Handle), *((ChFiDS_ListIteratorOfListOfHElSpine*)theIt->Handle));
}

 void OCChFiDS_ListOfHElSpine::Append(OCNaroWrappers::OCChFiDS_ListOfHElSpine^ Other)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->Append(*((ChFiDS_ListOfHElSpine*)Other->Handle));
}

OCChFiDS_HElSpine^ OCChFiDS_ListOfHElSpine::First()
{
  Handle(ChFiDS_HElSpine) tmp = ((ChFiDS_ListOfHElSpine*)nativeHandle)->First();
  return gcnew OCChFiDS_HElSpine(&tmp);
}

OCChFiDS_HElSpine^ OCChFiDS_ListOfHElSpine::Last()
{
  Handle(ChFiDS_HElSpine) tmp = ((ChFiDS_ListOfHElSpine*)nativeHandle)->Last();
  return gcnew OCChFiDS_HElSpine(&tmp);
}

 void OCChFiDS_ListOfHElSpine::RemoveFirst()
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->RemoveFirst();
}

 void OCChFiDS_ListOfHElSpine::Remove(OCNaroWrappers::OCChFiDS_ListIteratorOfListOfHElSpine^ It)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->Remove(*((ChFiDS_ListIteratorOfListOfHElSpine*)It->Handle));
}

 void OCChFiDS_ListOfHElSpine::InsertBefore(OCNaroWrappers::OCChFiDS_HElSpine^ I, OCNaroWrappers::OCChFiDS_ListIteratorOfListOfHElSpine^ It)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->InsertBefore(*((Handle_ChFiDS_HElSpine*)I->Handle), *((ChFiDS_ListIteratorOfListOfHElSpine*)It->Handle));
}

 void OCChFiDS_ListOfHElSpine::InsertBefore(OCNaroWrappers::OCChFiDS_ListOfHElSpine^ Other, OCNaroWrappers::OCChFiDS_ListIteratorOfListOfHElSpine^ It)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->InsertBefore(*((ChFiDS_ListOfHElSpine*)Other->Handle), *((ChFiDS_ListIteratorOfListOfHElSpine*)It->Handle));
}

 void OCChFiDS_ListOfHElSpine::InsertAfter(OCNaroWrappers::OCChFiDS_HElSpine^ I, OCNaroWrappers::OCChFiDS_ListIteratorOfListOfHElSpine^ It)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->InsertAfter(*((Handle_ChFiDS_HElSpine*)I->Handle), *((ChFiDS_ListIteratorOfListOfHElSpine*)It->Handle));
}

 void OCChFiDS_ListOfHElSpine::InsertAfter(OCNaroWrappers::OCChFiDS_ListOfHElSpine^ Other, OCNaroWrappers::OCChFiDS_ListIteratorOfListOfHElSpine^ It)
{
  ((ChFiDS_ListOfHElSpine*)nativeHandle)->InsertAfter(*((ChFiDS_ListOfHElSpine*)Other->Handle), *((ChFiDS_ListIteratorOfListOfHElSpine*)It->Handle));
}


