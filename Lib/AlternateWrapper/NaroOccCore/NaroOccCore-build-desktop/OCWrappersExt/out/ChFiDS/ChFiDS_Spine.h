// File generated by CPPExt (Transient)
//
#ifndef _ChFiDS_Spine_OCWrappers_HeaderFile
#define _ChFiDS_Spine_OCWrappers_HeaderFile

// include the wrapped class
#include <ChFiDS_Spine.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../BRepAdaptor/BRepAdaptor_Curve.h"
#include "ChFiDS_State.h"
#include "../TopTools/TopTools_SequenceOfShape.h"
#include "ChFiDS_ListOfHElSpine.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "ChFiDS_ErrorStatus.h"
#include "../GeomAbs/GeomAbs_CurveType.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfReal;
ref class OCTopoDS_Edge;
ref class OCChFiDS_HElSpine;
ref class OCChFiDS_ListOfHElSpine;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCBRepAdaptor_Curve;
ref class OCgp_Lin;
ref class OCgp_Circ;
ref class OCTopoDS_Vertex;


//! Contains information necessary for construction of <br>
//!          a 3D fillet : <br>
//! <br>
//! <br>
//!          - guideline composed of edges of the solid, tangents <br>
//!          between them, and borders by faces tangents <br>
//!          between them. <br>
//! <br>
//!          Tools for construction of the Sp <br>
//!          by propagation from an edge of solid <br>
//!          are provided in the Builder of Fil3d. <br>
//! <br>
//!          The Spine contains among others the <br>
//!          information about the nature of extremities <br>
//!          of the fillet ( on free border , on section or closed ). <br>
//! <br>
//!          IMPORTANT NOTE  :    the guideline <br>
//!          represented in this way is not C2, although the path <br>
//!          claims it. Several palliative workarounds <br>
//!          (see the methods at the end) are planned, <br>
//!          but they are not enough. It is necessary to change <br>
//!          the approach and double the Spine of line C2 with <br>
//!          the known consequences for management of <br>
//!          interactions between KPart Blend in Fil3d. <br>
public ref class OCChFiDS_Spine : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCChFiDS_Spine(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCChFiDS_Spine(Handle(ChFiDS_Spine)* nativeHandle);

// Methods PUBLIC


OCChFiDS_Spine();


OCChFiDS_Spine(Standard_Real Tol);

//! store edges composing the guideline <br>
 /*instead*/  void SetEdges(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! store the edge at the first position before all others <br>
 /*instead*/  void PutInFirst(OCNaroWrappers::OCTopoDS_Edge^ E) ;


 /*instead*/  Standard_Integer NbEdges() ;


 /*instead*/  OCTopoDS_Edge^ Edges(Standard_Integer I) ;

//! stores if the start of a set of edges starts on a <br>
//! section of free border or forms  a closed contour <br>
 /*instead*/  void SetFirstStatus(OCChFiDS_State S) ;

//! stores if the end of a set of edges starts on a <br>
//! section of free border or forms  a closed contour <br>
 /*instead*/  void SetLastStatus(OCChFiDS_State S) ;


virtual /*instead*/  void AppendElSpine(OCNaroWrappers::OCChFiDS_HElSpine^ Els) ;


 /*instead*/  OCChFiDS_HElSpine^ ElSpine(Standard_Integer IE) ;


 /*instead*/  OCChFiDS_HElSpine^ ElSpine(OCNaroWrappers::OCTopoDS_Edge^ E) ;


 /*instead*/  OCChFiDS_HElSpine^ ElSpine(Standard_Real W) ;


 /*instead*/  OCChFiDS_ListOfHElSpine^ ChangeElSpines() ;


virtual /*instead*/  void Reset(System::Boolean AllData) ;


 /*instead*/  System::Boolean SplitDone() ;


 /*instead*/  void SplitDone(System::Boolean B) ;

//! prepare the guideline depending on the edges that <br>
//!          are elementary arks (take parameters from <br>
//!          a single curvilinear abscissa); to be able to call <br>
//!          methods on the geometry (first,last,value,d1,d2) <br>
//!          it is necessary to start with preparation otherwise an <br>
//!          exception will be raised <br>
 /*instead*/  void Load() ;


 /*instead*/  Standard_Real Resolution(Standard_Real R3d) ;


 /*instead*/  System::Boolean IsClosed() ;


 /*instead*/  Standard_Real FirstParameter() ;


 /*instead*/  Standard_Real LastParameter() ;


 /*instead*/  void SetFirstParameter(Standard_Real Par) ;


 /*instead*/  void SetLastParameter(Standard_Real Par) ;

//! gives the total length of all arcs before the <br>
//!          number IndexSp <br>
 /*instead*/  Standard_Real FirstParameter(Standard_Integer IndexSpine) ;

//! gives the total length till the ark with number <br>
//!          IndexSpine (inclus) <br>
 /*instead*/  Standard_Real LastParameter(Standard_Integer IndexSpine) ;

//! gives the length of ark with number IndexSp <br>
 /*instead*/  Standard_Real Length(Standard_Integer IndexSpine) ;


 /*instead*/  System::Boolean IsPeriodic() ;


 /*instead*/  Standard_Real Period() ;


 /*instead*/  Standard_Real Absc(Standard_Real U) ;


 /*instead*/  Standard_Real Absc(Standard_Real U, Standard_Integer I) ;


 /*instead*/  void Parameter(Standard_Real AbsC, Standard_Real& U, System::Boolean Oriented) ;


 /*instead*/  void Parameter(Standard_Integer Index, Standard_Real AbsC, Standard_Real& U, System::Boolean Oriented) ;


 /*instead*/  OCgp_Pnt^ Value(Standard_Real AbsC) ;


 /*instead*/  void D0(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void D1(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1) ;


 /*instead*/  void D2(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


 /*instead*/  void SetCurrent(Standard_Integer Index) ;

//! sets the current curve and returns it <br>
 /*instead*/  OCBRepAdaptor_Curve^ CurrentElementarySpine(Standard_Integer Index) ;


 /*instead*/  Standard_Integer CurrentIndexOfElementarySpine() ;


 /*instead*/  OCGeomAbs_CurveType GetType() ;


 /*instead*/  OCgp_Lin^ Line() ;


 /*instead*/  OCgp_Circ^ Circle() ;

//! returns if the set of edges starts on a free boundary <br>
//!          or if the first vertex is a breakpoint or if the set is <br>
//!          closed <br>
 /*instead*/  OCChFiDS_State FirstStatus() ;

//! returns the state at the end of the set <br>
 /*instead*/  OCChFiDS_State LastStatus() ;


 /*instead*/  OCChFiDS_State Status(System::Boolean IsFirst) ;


 /*instead*/  void SetStatus(OCChFiDS_State S, System::Boolean IsFirst) ;

//!  returns   if the  set  of  edges starts (or   end) on <br>
//!          Tangency point. <br>
 /*instead*/  System::Boolean IsTangencyExtremity(System::Boolean IsFirst) ;


 /*instead*/  void SetTangencyExtremity(System::Boolean IsTangency, System::Boolean IsFirst) ;


 /*instead*/  Standard_Real Absc(OCNaroWrappers::OCTopoDS_Vertex^ V) ;


 /*instead*/  OCTopoDS_Vertex^ FirstVertex() ;


 /*instead*/  OCTopoDS_Vertex^ LastVertex() ;


 /*instead*/  void SetFirstTgt(Standard_Real W) ;


 /*instead*/  void SetLastTgt(Standard_Real W) ;


 /*instead*/  System::Boolean HasFirstTgt() ;


 /*instead*/  System::Boolean HasLastTgt() ;

//! set a parameter reference for the approx. <br>
 /*instead*/  void SetReference(Standard_Real W) ;

//! set  a  parameter  reference  for  the approx,  at the <br>
//!          middle  of edge I. <br>
 /*instead*/  void SetReference(Standard_Integer I) ;


 /*instead*/  Standard_Integer Index(Standard_Real W, System::Boolean Forward) ;


 /*instead*/  Standard_Integer Index(OCNaroWrappers::OCTopoDS_Edge^ E) ;


 /*instead*/  void UnsetReference() ;


 /*instead*/  void SetErrorStatus(OCChFiDS_ErrorStatus state) ;


 /*instead*/  OCChFiDS_ErrorStatus ErrorStatus() ;

~OCChFiDS_Spine()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
