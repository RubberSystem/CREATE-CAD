// File generated by CPPExt (CPP file)
//

#include "ChFiDS_Spine.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "ChFiDS_HElSpine.h"
#include "ChFiDS_ListOfHElSpine.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../BRepAdaptor/BRepAdaptor_Curve.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../TopoDS/TopoDS_Vertex.h"


using namespace OCNaroWrappers;

OCChFiDS_Spine::OCChFiDS_Spine(Handle(ChFiDS_Spine)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_ChFiDS_Spine(*nativeHandle);
}

OCChFiDS_Spine::OCChFiDS_Spine() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_ChFiDS_Spine(new ChFiDS_Spine());
}

OCChFiDS_Spine::OCChFiDS_Spine(Standard_Real Tol) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_ChFiDS_Spine(new ChFiDS_Spine(Tol));
}

 void OCChFiDS_Spine::SetEdges(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetEdges(*((TopoDS_Edge*)E->Handle));
}

 void OCChFiDS_Spine::PutInFirst(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->PutInFirst(*((TopoDS_Edge*)E->Handle));
}

 Standard_Integer OCChFiDS_Spine::NbEdges()
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->NbEdges();
}

OCTopoDS_Edge^ OCChFiDS_Spine::Edges(Standard_Integer I)
{
  TopoDS_Edge* tmp = new TopoDS_Edge();
  *tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->Edges(I);
  return gcnew OCTopoDS_Edge(tmp);
}

 void OCChFiDS_Spine::SetFirstStatus(OCChFiDS_State S)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetFirstStatus((ChFiDS_State)S);
}

 void OCChFiDS_Spine::SetLastStatus(OCChFiDS_State S)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetLastStatus((ChFiDS_State)S);
}

 void OCChFiDS_Spine::AppendElSpine(OCNaroWrappers::OCChFiDS_HElSpine^ Els)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->AppendElSpine(*((Handle_ChFiDS_HElSpine*)Els->Handle));
}

OCChFiDS_HElSpine^ OCChFiDS_Spine::ElSpine(Standard_Integer IE)
{
  Handle(ChFiDS_HElSpine) tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->ElSpine(IE);
  return gcnew OCChFiDS_HElSpine(&tmp);
}

OCChFiDS_HElSpine^ OCChFiDS_Spine::ElSpine(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  Handle(ChFiDS_HElSpine) tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->ElSpine(*((TopoDS_Edge*)E->Handle));
  return gcnew OCChFiDS_HElSpine(&tmp);
}

OCChFiDS_HElSpine^ OCChFiDS_Spine::ElSpine(Standard_Real W)
{
  Handle(ChFiDS_HElSpine) tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->ElSpine(W);
  return gcnew OCChFiDS_HElSpine(&tmp);
}

OCChFiDS_ListOfHElSpine^ OCChFiDS_Spine::ChangeElSpines()
{
  ChFiDS_ListOfHElSpine* tmp = new ChFiDS_ListOfHElSpine();
  *tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->ChangeElSpines();
  return gcnew OCChFiDS_ListOfHElSpine(tmp);
}

 void OCChFiDS_Spine::Reset(System::Boolean AllData)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->Reset(OCConverter::BooleanToStandardBoolean(AllData));
}

 System::Boolean OCChFiDS_Spine::SplitDone()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_Spine*)nativeHandle))->SplitDone());
}

 void OCChFiDS_Spine::SplitDone(System::Boolean B)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SplitDone(OCConverter::BooleanToStandardBoolean(B));
}

 void OCChFiDS_Spine::Load()
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->Load();
}

 Standard_Real OCChFiDS_Spine::Resolution(Standard_Real R3d)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->Resolution(R3d);
}

 System::Boolean OCChFiDS_Spine::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_Spine*)nativeHandle))->IsClosed());
}

 Standard_Real OCChFiDS_Spine::FirstParameter()
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->FirstParameter();
}

 Standard_Real OCChFiDS_Spine::LastParameter()
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->LastParameter();
}

 void OCChFiDS_Spine::SetFirstParameter(Standard_Real Par)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetFirstParameter(Par);
}

 void OCChFiDS_Spine::SetLastParameter(Standard_Real Par)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetLastParameter(Par);
}

 Standard_Real OCChFiDS_Spine::FirstParameter(Standard_Integer IndexSpine)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->FirstParameter(IndexSpine);
}

 Standard_Real OCChFiDS_Spine::LastParameter(Standard_Integer IndexSpine)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->LastParameter(IndexSpine);
}

 Standard_Real OCChFiDS_Spine::Length(Standard_Integer IndexSpine)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->Length(IndexSpine);
}

 System::Boolean OCChFiDS_Spine::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_Spine*)nativeHandle))->IsPeriodic());
}

 Standard_Real OCChFiDS_Spine::Period()
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->Period();
}

 Standard_Real OCChFiDS_Spine::Absc(Standard_Real U)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->Absc(U);
}

 Standard_Real OCChFiDS_Spine::Absc(Standard_Real U, Standard_Integer I)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->Absc(U, I);
}

 void OCChFiDS_Spine::Parameter(Standard_Real AbsC, Standard_Real& U, System::Boolean Oriented)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->Parameter(AbsC, U, OCConverter::BooleanToStandardBoolean(Oriented));
}

 void OCChFiDS_Spine::Parameter(Standard_Integer Index, Standard_Real AbsC, Standard_Real& U, System::Boolean Oriented)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->Parameter(Index, AbsC, U, OCConverter::BooleanToStandardBoolean(Oriented));
}

OCgp_Pnt^ OCChFiDS_Spine::Value(Standard_Real AbsC)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->Value(AbsC);
  return gcnew OCgp_Pnt(tmp);
}

 void OCChFiDS_Spine::D0(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->D0(AbsC, *((gp_Pnt*)P->Handle));
}

 void OCChFiDS_Spine::D1(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->D1(AbsC, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle));
}

 void OCChFiDS_Spine::D2(Standard_Real AbsC, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->D2(AbsC, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCChFiDS_Spine::SetCurrent(Standard_Integer Index)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetCurrent(Index);
}

OCBRepAdaptor_Curve^ OCChFiDS_Spine::CurrentElementarySpine(Standard_Integer Index)
{
  BRepAdaptor_Curve* tmp = new BRepAdaptor_Curve();
  *tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->CurrentElementarySpine(Index);
  return gcnew OCBRepAdaptor_Curve(tmp);
}

 Standard_Integer OCChFiDS_Spine::CurrentIndexOfElementarySpine()
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->CurrentIndexOfElementarySpine();
}

 OCGeomAbs_CurveType OCChFiDS_Spine::GetType()
{
  return (OCGeomAbs_CurveType)((*((Handle_ChFiDS_Spine*)nativeHandle))->GetType());
}

OCgp_Lin^ OCChFiDS_Spine::Line()
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->Line();
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCChFiDS_Spine::Circle()
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->Circle();
  return gcnew OCgp_Circ(tmp);
}

 OCChFiDS_State OCChFiDS_Spine::FirstStatus()
{
  return (OCChFiDS_State)((*((Handle_ChFiDS_Spine*)nativeHandle))->FirstStatus());
}

 OCChFiDS_State OCChFiDS_Spine::LastStatus()
{
  return (OCChFiDS_State)((*((Handle_ChFiDS_Spine*)nativeHandle))->LastStatus());
}

 OCChFiDS_State OCChFiDS_Spine::Status(System::Boolean IsFirst)
{
  return (OCChFiDS_State)((*((Handle_ChFiDS_Spine*)nativeHandle))->Status(OCConverter::BooleanToStandardBoolean(IsFirst)));
}

 void OCChFiDS_Spine::SetStatus(OCChFiDS_State S, System::Boolean IsFirst)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetStatus((ChFiDS_State)S, OCConverter::BooleanToStandardBoolean(IsFirst));
}

 System::Boolean OCChFiDS_Spine::IsTangencyExtremity(System::Boolean IsFirst)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_Spine*)nativeHandle))->IsTangencyExtremity(OCConverter::BooleanToStandardBoolean(IsFirst)));
}

 void OCChFiDS_Spine::SetTangencyExtremity(System::Boolean IsTangency, System::Boolean IsFirst)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetTangencyExtremity(OCConverter::BooleanToStandardBoolean(IsTangency), OCConverter::BooleanToStandardBoolean(IsFirst));
}

 Standard_Real OCChFiDS_Spine::Absc(OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->Absc(*((TopoDS_Vertex*)V->Handle));
}

OCTopoDS_Vertex^ OCChFiDS_Spine::FirstVertex()
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->FirstVertex();
  return gcnew OCTopoDS_Vertex(tmp);
}

OCTopoDS_Vertex^ OCChFiDS_Spine::LastVertex()
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = (*((Handle_ChFiDS_Spine*)nativeHandle))->LastVertex();
  return gcnew OCTopoDS_Vertex(tmp);
}

 void OCChFiDS_Spine::SetFirstTgt(Standard_Real W)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetFirstTgt(W);
}

 void OCChFiDS_Spine::SetLastTgt(Standard_Real W)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetLastTgt(W);
}

 System::Boolean OCChFiDS_Spine::HasFirstTgt()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_Spine*)nativeHandle))->HasFirstTgt());
}

 System::Boolean OCChFiDS_Spine::HasLastTgt()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ChFiDS_Spine*)nativeHandle))->HasLastTgt());
}

 void OCChFiDS_Spine::SetReference(Standard_Real W)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetReference(W);
}

 void OCChFiDS_Spine::SetReference(Standard_Integer I)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetReference(I);
}

 Standard_Integer OCChFiDS_Spine::Index(Standard_Real W, System::Boolean Forward)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->Index(W, OCConverter::BooleanToStandardBoolean(Forward));
}

 Standard_Integer OCChFiDS_Spine::Index(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  return (*((Handle_ChFiDS_Spine*)nativeHandle))->Index(*((TopoDS_Edge*)E->Handle));
}

 void OCChFiDS_Spine::UnsetReference()
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->UnsetReference();
}

 void OCChFiDS_Spine::SetErrorStatus(OCChFiDS_ErrorStatus state)
{
  (*((Handle_ChFiDS_Spine*)nativeHandle))->SetErrorStatus((ChFiDS_ErrorStatus)state);
}

 OCChFiDS_ErrorStatus OCChFiDS_Spine::ErrorStatus()
{
  return (OCChFiDS_ErrorStatus)((*((Handle_ChFiDS_Spine*)nativeHandle))->ErrorStatus());
}


