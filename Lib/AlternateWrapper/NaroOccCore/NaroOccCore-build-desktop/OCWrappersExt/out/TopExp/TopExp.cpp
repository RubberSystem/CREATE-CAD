// File generated by CPPExt (CPP file)
//

#include "TopExp.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



 void OCTopExp::MapShapes(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_ShapeEnum T, OCNaroWrappers::OCTopTools_IndexedMapOfShape^ M)
{
  TopExp::MapShapes(*((TopoDS_Shape*)S->Handle), (TopAbs_ShapeEnum)T, *((TopTools_IndexedMapOfShape*)M->Handle));
}

 void OCTopExp::MapShapes(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_IndexedMapOfShape^ M)
{
  TopExp::MapShapes(*((TopoDS_Shape*)S->Handle), *((TopTools_IndexedMapOfShape*)M->Handle));
}

 void OCTopExp::MapShapesAndAncestors(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_ShapeEnum TS, OCTopAbs_ShapeEnum TA, OCNaroWrappers::OCTopTools_IndexedDataMapOfShapeListOfShape^ M)
{
  TopExp::MapShapesAndAncestors(*((TopoDS_Shape*)S->Handle), (TopAbs_ShapeEnum)TS, (TopAbs_ShapeEnum)TA, *((TopTools_IndexedDataMapOfShapeListOfShape*)M->Handle));
}

OCTopoDS_Vertex^ OCTopExp::FirstVertex(OCNaroWrappers::OCTopoDS_Edge^ E, System::Boolean CumOri)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = TopExp::FirstVertex(*((TopoDS_Edge*)E->Handle), OCConverter::BooleanToStandardBoolean(CumOri));
  return gcnew OCTopoDS_Vertex(tmp);
}

OCTopoDS_Vertex^ OCTopExp::LastVertex(OCNaroWrappers::OCTopoDS_Edge^ E, System::Boolean CumOri)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = TopExp::LastVertex(*((TopoDS_Edge*)E->Handle), OCConverter::BooleanToStandardBoolean(CumOri));
  return gcnew OCTopoDS_Vertex(tmp);
}

 void OCTopExp::Vertices(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Vertex^ Vfirst, OCNaroWrappers::OCTopoDS_Vertex^ Vlast, System::Boolean CumOri)
{
  TopExp::Vertices(*((TopoDS_Edge*)E->Handle), *((TopoDS_Vertex*)Vfirst->Handle), *((TopoDS_Vertex*)Vlast->Handle), OCConverter::BooleanToStandardBoolean(CumOri));
}

 void OCTopExp::Vertices(OCNaroWrappers::OCTopoDS_Wire^ W, OCNaroWrappers::OCTopoDS_Vertex^ Vfirst, OCNaroWrappers::OCTopoDS_Vertex^ Vlast)
{
  TopExp::Vertices(*((TopoDS_Wire*)W->Handle), *((TopoDS_Vertex*)Vfirst->Handle), *((TopoDS_Vertex*)Vlast->Handle));
}

 System::Boolean OCTopExp::CommonVertex(OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  return OCConverter::StandardBooleanToBoolean(TopExp::CommonVertex(*((TopoDS_Edge*)E1->Handle), *((TopoDS_Edge*)E2->Handle), *((TopoDS_Vertex*)V->Handle)));
}


