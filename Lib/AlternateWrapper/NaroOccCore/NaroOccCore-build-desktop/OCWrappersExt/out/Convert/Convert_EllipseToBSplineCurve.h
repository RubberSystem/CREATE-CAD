// File generated by CPPExt (MPV)
//
#ifndef _Convert_EllipseToBSplineCurve_OCWrappers_HeaderFile
#define _Convert_EllipseToBSplineCurve_OCWrappers_HeaderFile

// include native header
#include <Convert_EllipseToBSplineCurve.hxx>
#include "../Converter.h"

#include "Convert_ConicToBSplineCurve.h"

#include "Convert_ConicToBSplineCurve.h"
#include "Convert_ParameterisationType.h"


namespace OCNaroWrappers
{

ref class OCgp_Elips2d;



//!  This algorithm converts a ellipse into a rational B-spline curve. <br>
//!  The ellipse is represented an Elips2d from package gp with <br>
//!  the parametrization : <br>
//!  P (U) = <br>
//!  Loc + (MajorRadius * Cos(U) * Xdir + MinorRadius * Sin(U) * Ydir) <br>
//!  where Loc is the center of the ellipse, Xdir and Ydir are the <br>
//!  normalized directions of the local cartesian coordinate system of <br>
//!  the ellipse. The parametrization range is U [0, 2PI]. <br>
//! KeyWords : <br>
//!  Convert, Ellipse, BSplineCurve, 2D . <br>
public ref class OCConvert_EllipseToBSplineCurve  : public OCConvert_ConicToBSplineCurve {

protected:
  // dummy constructor;
  OCConvert_EllipseToBSplineCurve(OCDummy^) : OCConvert_ConicToBSplineCurve((OCDummy^)nullptr) {};

public:

// constructor from native
OCConvert_EllipseToBSplineCurve(Convert_EllipseToBSplineCurve* nativeHandle);

// Methods PUBLIC

//! The equivalent B-spline curve has the same orientation <br>
//!  as the ellipse E. <br>
OCConvert_EllipseToBSplineCurve(OCNaroWrappers::OCgp_Elips2d^ E, OCConvert_ParameterisationType Parameterisation);


//!  The ellipse E is limited between the parametric values U1, U2. <br>
//!  The equivalent B-spline curve is oriented from U1 to U2 and has <br>
//!  the same orientation as E. <br>
//!  Raised if U1 = U2 or U1 = U2 + 2.0 * Pi <br>
OCConvert_EllipseToBSplineCurve(OCNaroWrappers::OCgp_Elips2d^ E, Standard_Real U1, Standard_Real U2, OCConvert_ParameterisationType Parameterisation);

~OCConvert_EllipseToBSplineCurve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
