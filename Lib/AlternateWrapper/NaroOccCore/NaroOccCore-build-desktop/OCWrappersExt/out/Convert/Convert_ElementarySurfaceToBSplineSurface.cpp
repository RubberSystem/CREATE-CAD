// File generated by CPPExt (CPP file)
//

#include "Convert_ElementarySurfaceToBSplineSurface.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCConvert_ElementarySurfaceToBSplineSurface::OCConvert_ElementarySurfaceToBSplineSurface(Convert_ElementarySurfaceToBSplineSurface* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Integer OCConvert_ElementarySurfaceToBSplineSurface::UDegree()
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->UDegree();
}

 Standard_Integer OCConvert_ElementarySurfaceToBSplineSurface::VDegree()
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->VDegree();
}

 Standard_Integer OCConvert_ElementarySurfaceToBSplineSurface::NbUPoles()
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->NbUPoles();
}

 Standard_Integer OCConvert_ElementarySurfaceToBSplineSurface::NbVPoles()
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->NbVPoles();
}

 Standard_Integer OCConvert_ElementarySurfaceToBSplineSurface::NbUKnots()
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->NbUKnots();
}

 Standard_Integer OCConvert_ElementarySurfaceToBSplineSurface::NbVKnots()
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->NbVKnots();
}

 System::Boolean OCConvert_ElementarySurfaceToBSplineSurface::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->IsUPeriodic());
}

 System::Boolean OCConvert_ElementarySurfaceToBSplineSurface::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->IsVPeriodic());
}

OCgp_Pnt^ OCConvert_ElementarySurfaceToBSplineSurface::Pole(Standard_Integer UIndex, Standard_Integer VIndex)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->Pole(UIndex, VIndex);
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCConvert_ElementarySurfaceToBSplineSurface::Weight(Standard_Integer UIndex, Standard_Integer VIndex)
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->Weight(UIndex, VIndex);
}

 Standard_Real OCConvert_ElementarySurfaceToBSplineSurface::UKnot(Standard_Integer UIndex)
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->UKnot(UIndex);
}

 Standard_Real OCConvert_ElementarySurfaceToBSplineSurface::VKnot(Standard_Integer UIndex)
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->VKnot(UIndex);
}

 Standard_Integer OCConvert_ElementarySurfaceToBSplineSurface::UMultiplicity(Standard_Integer UIndex)
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->UMultiplicity(UIndex);
}

 Standard_Integer OCConvert_ElementarySurfaceToBSplineSurface::VMultiplicity(Standard_Integer VIndex)
{
  return ((Convert_ElementarySurfaceToBSplineSurface*)nativeHandle)->VMultiplicity(VIndex);
}

OCConvert_ElementarySurfaceToBSplineSurface::OCConvert_ElementarySurfaceToBSplineSurface(Standard_Integer NumberOfUPoles, Standard_Integer NumberOfVPoles, Standard_Integer NumberOfUKnots, Standard_Integer NumberOfVKnots, Standard_Integer UDegree, Standard_Integer VDegree) 
{}


