// File generated by CPPExt (CPP file)
//

#include "Convert_ConicToBSplineCurve.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HArray1OfPnt2d.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../gp/gp_Pnt2d.h"


using namespace OCNaroWrappers;

OCConvert_ConicToBSplineCurve::OCConvert_ConicToBSplineCurve(Convert_ConicToBSplineCurve* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Integer OCConvert_ConicToBSplineCurve::Degree()
{
  return ((Convert_ConicToBSplineCurve*)nativeHandle)->Degree();
}

 Standard_Integer OCConvert_ConicToBSplineCurve::NbPoles()
{
  return ((Convert_ConicToBSplineCurve*)nativeHandle)->NbPoles();
}

 Standard_Integer OCConvert_ConicToBSplineCurve::NbKnots()
{
  return ((Convert_ConicToBSplineCurve*)nativeHandle)->NbKnots();
}

 System::Boolean OCConvert_ConicToBSplineCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((Convert_ConicToBSplineCurve*)nativeHandle)->IsPeriodic());
}

OCgp_Pnt2d^ OCConvert_ConicToBSplineCurve::Pole(Standard_Integer Index)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((Convert_ConicToBSplineCurve*)nativeHandle)->Pole(Index);
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Real OCConvert_ConicToBSplineCurve::Weight(Standard_Integer Index)
{
  return ((Convert_ConicToBSplineCurve*)nativeHandle)->Weight(Index);
}

 Standard_Real OCConvert_ConicToBSplineCurve::Knot(Standard_Integer Index)
{
  return ((Convert_ConicToBSplineCurve*)nativeHandle)->Knot(Index);
}

 Standard_Integer OCConvert_ConicToBSplineCurve::Multiplicity(Standard_Integer Index)
{
  return ((Convert_ConicToBSplineCurve*)nativeHandle)->Multiplicity(Index);
}

OCConvert_ConicToBSplineCurve::OCConvert_ConicToBSplineCurve(Standard_Integer NumberOfPoles, Standard_Integer NumberOfKnots, Standard_Integer Degree) 
{}

 void OCConvert_ConicToBSplineCurve::BuildCosAndSin(OCConvert_ParameterisationType Parametrisation, OCNaroWrappers::OCTColStd_HArray1OfReal^ CosNumerator, OCNaroWrappers::OCTColStd_HArray1OfReal^ SinNumerator, OCNaroWrappers::OCTColStd_HArray1OfReal^ Denominator, Standard_Integer& Degree, OCNaroWrappers::OCTColStd_HArray1OfReal^ Knots, OCNaroWrappers::OCTColStd_HArray1OfInteger^ Mults)
{
  ((Convert_ConicToBSplineCurve*)nativeHandle)->BuildCosAndSin((Convert_ParameterisationType)Parametrisation, *((Handle_TColStd_HArray1OfReal*)CosNumerator->Handle), *((Handle_TColStd_HArray1OfReal*)SinNumerator->Handle), *((Handle_TColStd_HArray1OfReal*)Denominator->Handle), Degree, *((Handle_TColStd_HArray1OfReal*)Knots->Handle), *((Handle_TColStd_HArray1OfInteger*)Mults->Handle));
}

 void OCConvert_ConicToBSplineCurve::BuildCosAndSin(OCConvert_ParameterisationType Parametrisation, Standard_Real UFirst, Standard_Real ULast, OCNaroWrappers::OCTColStd_HArray1OfReal^ CosNumerator, OCNaroWrappers::OCTColStd_HArray1OfReal^ SinNumerator, OCNaroWrappers::OCTColStd_HArray1OfReal^ Denominator, Standard_Integer& Degree, OCNaroWrappers::OCTColStd_HArray1OfReal^ Knots, OCNaroWrappers::OCTColStd_HArray1OfInteger^ Mults)
{
  ((Convert_ConicToBSplineCurve*)nativeHandle)->BuildCosAndSin((Convert_ParameterisationType)Parametrisation, UFirst, ULast, *((Handle_TColStd_HArray1OfReal*)CosNumerator->Handle), *((Handle_TColStd_HArray1OfReal*)SinNumerator->Handle), *((Handle_TColStd_HArray1OfReal*)Denominator->Handle), Degree, *((Handle_TColStd_HArray1OfReal*)Knots->Handle), *((Handle_TColStd_HArray1OfInteger*)Mults->Handle));
}


