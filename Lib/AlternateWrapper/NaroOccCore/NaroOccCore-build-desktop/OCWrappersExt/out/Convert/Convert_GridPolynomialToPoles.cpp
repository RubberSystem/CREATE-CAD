// File generated by CPPExt (CPP file)
//

#include "Convert_GridPolynomialToPoles.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../TColgp/TColgp_HArray2OfPnt.h"
#include "../TColStd/TColStd_HArray2OfInteger.h"


using namespace OCNaroWrappers;

OCConvert_GridPolynomialToPoles::OCConvert_GridPolynomialToPoles(Convert_GridPolynomialToPoles* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCConvert_GridPolynomialToPoles::OCConvert_GridPolynomialToPoles(Standard_Integer MaxUDegree, Standard_Integer MaxVDegree, OCNaroWrappers::OCTColStd_HArray1OfInteger^ NumCoeff, OCNaroWrappers::OCTColStd_HArray1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialVIntervals) 
{
  nativeHandle = new Convert_GridPolynomialToPoles(MaxUDegree, MaxVDegree, *((Handle_TColStd_HArray1OfInteger*)NumCoeff->Handle), *((Handle_TColStd_HArray1OfReal*)Coefficients->Handle), *((Handle_TColStd_HArray1OfReal*)PolynomialUIntervals->Handle), *((Handle_TColStd_HArray1OfReal*)PolynomialVIntervals->Handle));
}

OCConvert_GridPolynomialToPoles::OCConvert_GridPolynomialToPoles(Standard_Integer NbUSurfaces, Standard_Integer NBVSurfaces, Standard_Integer UContinuity, Standard_Integer VContinuity, Standard_Integer MaxUDegree, Standard_Integer MaxVDegree, OCNaroWrappers::OCTColStd_HArray2OfInteger^ NumCoeffPerSurface, OCNaroWrappers::OCTColStd_HArray1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialVIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueVIntervals) 
{
  nativeHandle = new Convert_GridPolynomialToPoles(NbUSurfaces, NBVSurfaces, UContinuity, VContinuity, MaxUDegree, MaxVDegree, *((Handle_TColStd_HArray2OfInteger*)NumCoeffPerSurface->Handle), *((Handle_TColStd_HArray1OfReal*)Coefficients->Handle), *((Handle_TColStd_HArray1OfReal*)PolynomialUIntervals->Handle), *((Handle_TColStd_HArray1OfReal*)PolynomialVIntervals->Handle), *((Handle_TColStd_HArray1OfReal*)TrueUIntervals->Handle), *((Handle_TColStd_HArray1OfReal*)TrueVIntervals->Handle));
}

 void OCConvert_GridPolynomialToPoles::Perform(Standard_Integer UContinuity, Standard_Integer VContinuity, Standard_Integer MaxUDegree, Standard_Integer MaxVDegree, OCNaroWrappers::OCTColStd_HArray2OfInteger^ NumCoeffPerSurface, OCNaroWrappers::OCTColStd_HArray1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialVIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueVIntervals)
{
  ((Convert_GridPolynomialToPoles*)nativeHandle)->Perform(UContinuity, VContinuity, MaxUDegree, MaxVDegree, *((Handle_TColStd_HArray2OfInteger*)NumCoeffPerSurface->Handle), *((Handle_TColStd_HArray1OfReal*)Coefficients->Handle), *((Handle_TColStd_HArray1OfReal*)PolynomialUIntervals->Handle), *((Handle_TColStd_HArray1OfReal*)PolynomialVIntervals->Handle), *((Handle_TColStd_HArray1OfReal*)TrueUIntervals->Handle), *((Handle_TColStd_HArray1OfReal*)TrueVIntervals->Handle));
}

 Standard_Integer OCConvert_GridPolynomialToPoles::NbUPoles()
{
  return ((Convert_GridPolynomialToPoles*)nativeHandle)->NbUPoles();
}

 Standard_Integer OCConvert_GridPolynomialToPoles::NbVPoles()
{
  return ((Convert_GridPolynomialToPoles*)nativeHandle)->NbVPoles();
}

OCTColgp_HArray2OfPnt^ OCConvert_GridPolynomialToPoles::Poles()
{
  Handle(TColgp_HArray2OfPnt) tmp = ((Convert_GridPolynomialToPoles*)nativeHandle)->Poles();
  return gcnew OCTColgp_HArray2OfPnt(&tmp);
}

 Standard_Integer OCConvert_GridPolynomialToPoles::UDegree()
{
  return ((Convert_GridPolynomialToPoles*)nativeHandle)->UDegree();
}

 Standard_Integer OCConvert_GridPolynomialToPoles::VDegree()
{
  return ((Convert_GridPolynomialToPoles*)nativeHandle)->VDegree();
}

 Standard_Integer OCConvert_GridPolynomialToPoles::NbUKnots()
{
  return ((Convert_GridPolynomialToPoles*)nativeHandle)->NbUKnots();
}

 Standard_Integer OCConvert_GridPolynomialToPoles::NbVKnots()
{
  return ((Convert_GridPolynomialToPoles*)nativeHandle)->NbVKnots();
}

OCTColStd_HArray1OfReal^ OCConvert_GridPolynomialToPoles::UKnots()
{
  Handle(TColStd_HArray1OfReal) tmp = ((Convert_GridPolynomialToPoles*)nativeHandle)->UKnots();
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

OCTColStd_HArray1OfReal^ OCConvert_GridPolynomialToPoles::VKnots()
{
  Handle(TColStd_HArray1OfReal) tmp = ((Convert_GridPolynomialToPoles*)nativeHandle)->VKnots();
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

OCTColStd_HArray1OfInteger^ OCConvert_GridPolynomialToPoles::UMultiplicities()
{
  Handle(TColStd_HArray1OfInteger) tmp = ((Convert_GridPolynomialToPoles*)nativeHandle)->UMultiplicities();
  return gcnew OCTColStd_HArray1OfInteger(&tmp);
}

OCTColStd_HArray1OfInteger^ OCConvert_GridPolynomialToPoles::VMultiplicities()
{
  Handle(TColStd_HArray1OfInteger) tmp = ((Convert_GridPolynomialToPoles*)nativeHandle)->VMultiplicities();
  return gcnew OCTColStd_HArray1OfInteger(&tmp);
}

 System::Boolean OCConvert_GridPolynomialToPoles::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Convert_GridPolynomialToPoles*)nativeHandle)->IsDone());
}


