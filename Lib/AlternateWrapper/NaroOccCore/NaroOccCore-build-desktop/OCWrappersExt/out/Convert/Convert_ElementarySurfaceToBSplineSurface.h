// File generated by CPPExt (MPV)
//
#ifndef _Convert_ElementarySurfaceToBSplineSurface_OCWrappers_HeaderFile
#define _Convert_ElementarySurfaceToBSplineSurface_OCWrappers_HeaderFile

// include native header
#include <Convert_ElementarySurfaceToBSplineSurface.hxx>
#include "../Converter.h"


#include "../TColgp/TColgp_Array2OfPnt.h"
#include "../TColStd/TColStd_Array2OfReal.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"


namespace OCNaroWrappers
{

ref class OCgp_Pnt;


//!Root class for algorithms which convert an elementary <br>
//! surface (cylinder, cone, sphere or torus) into a BSpline <br>
//! surface (CylinderToBSplineSurface, ConeToBSplineSurface, <br>
//!  SphereToBSplineSurface, TorusToBSplineSurface). <br>
//! These algorithms all work on elementary surfaces from <br>
//! the gp package and compute all the data needed to <br>
//! construct a BSpline surface equivalent to the cylinder, <br>
//! cone, sphere or torus. This data consists of the following: <br>
//! -   degrees in the u and v parametric directions, <br>
//! -   periodic characteristics in the u and v parametric directions, <br>
//! -   a poles table with associated weights, <br>
//! -   a knots table (for the u and v parametric directions) <br>
//!  with associated multiplicities. <br>
//! The abstract class <br>
//! ElementarySurfaceToBSplineSurface provides a <br>
//! framework for storing and consulting this computed data. <br>
//! This data may then be used to construct a <br>
//! Geom_BSplineSurface surface, for example. <br>
//!  All those classes define algorithmes to convert an <br>
//!  ElementarySurface into a B-spline surface. <br>
//!  This abstract class implements the methods to get <br>
//!  the geometric representation of the B-spline surface. <br>
//!  The B-spline representation is computed at the creation <br>
//!  time in the sub classes. <br>
//!  The B-spline surface is defined with its degree in the <br>
//!  parametric U and V directions, its control points (Poles), <br>
//!  its weights, its knots and their multiplicity. <br>
//!  KeyWords : <br>
//!  Convert, ElementarySurface, BSplineSurface. <br>
public ref class OCConvert_ElementarySurfaceToBSplineSurface  {

protected:
  Convert_ElementarySurfaceToBSplineSurface* nativeHandle;
  OCConvert_ElementarySurfaceToBSplineSurface(OCDummy^) {};

public:
  property Convert_ElementarySurfaceToBSplineSurface* Handle
  {
    Convert_ElementarySurfaceToBSplineSurface* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCConvert_ElementarySurfaceToBSplineSurface(Convert_ElementarySurfaceToBSplineSurface* nativeHandle);

// Methods PUBLIC


 /*instead*/  Standard_Integer UDegree() ;

//! Returns the degree for the u or v parametric direction of <br>
//! the BSpline surface whose data is computed in this framework. <br>
 /*instead*/  Standard_Integer VDegree() ;


 /*instead*/  Standard_Integer NbUPoles() ;

//! Returns the number of poles for the u or v parametric <br>
//! direction of the BSpline surface whose data is computed in this framework. <br>
 /*instead*/  Standard_Integer NbVPoles() ;


 /*instead*/  Standard_Integer NbUKnots() ;

//! Returns the number of knots for the u or v parametric <br>
//! direction of the BSpline surface whose data is computed in this framework . <br>
 /*instead*/  Standard_Integer NbVKnots() ;


 /*instead*/  System::Boolean IsUPeriodic() ;

//! Returns true if the BSpline surface whose data is computed <br>
//! in this framework is periodic in the u or v parametric direction. <br>
 /*instead*/  System::Boolean IsVPeriodic() ;

//!  Returns the pole of index (UIndex,VIndex) to the poles <br>
//! table of the BSpline surface whose data is computed in this framework. <br>
//! Exceptions <br>
//! Standard_OutOfRange if, for the BSpline surface whose <br>
//! data is computed in this framework: <br>
//! -   UIndex is outside the bounds of the poles table in the u <br>
//!  parametric direction, or <br>
//! -   VIndex is outside the bounds of the poles table in the v <br>
//!  parametric direction. <br>
 /*instead*/  OCgp_Pnt^ Pole(Standard_Integer UIndex, Standard_Integer VIndex) ;

//!  Returns the weight of the pole of index (UIndex,VIndex) to <br>
//! the poles table of the BSpline surface whose data is computed in this framework. <br>
//! Exceptions <br>
//! Standard_OutOfRange if, for the BSpline surface whose <br>
//! data is computed in this framework: <br>
//! -   UIndex is outside the bounds of the poles table in the u <br>
//!  parametric direction, or <br>
//! -   VIndex is outside the bounds of the poles table in the v <br>
//!  parametric direction. <br>
 /*instead*/  Standard_Real Weight(Standard_Integer UIndex, Standard_Integer VIndex) ;

//!  Returns the U-knot of range UIndex. <br>//! Raised if UIndex < 1 or UIndex > NbUKnots. <br>
 /*instead*/  Standard_Real UKnot(Standard_Integer UIndex) ;

//! Returns the V-knot of range VIndex. <br>//! Raised if VIndex < 1 or VIndex > NbVKnots. <br>
 /*instead*/  Standard_Real VKnot(Standard_Integer UIndex) ;

//! Returns the multiplicity of the U-knot of range UIndex. <br>//! Raised if UIndex < 1 or UIndex > NbUKnots. <br>
 /*instead*/  Standard_Integer UMultiplicity(Standard_Integer UIndex) ;

//! Returns the multiplicity of the V-knot of range VIndex. <br>//! Raised if VIndex < 1 or VIndex > NbVKnots. <br>
 /*instead*/  Standard_Integer VMultiplicity(Standard_Integer VIndex) ;


OCConvert_ElementarySurfaceToBSplineSurface(Standard_Integer NumberOfUPoles, Standard_Integer NumberOfVPoles, Standard_Integer NumberOfUKnots, Standard_Integer NumberOfVKnots, Standard_Integer UDegree, Standard_Integer VDegree);

~OCConvert_ElementarySurfaceToBSplineSurface()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
