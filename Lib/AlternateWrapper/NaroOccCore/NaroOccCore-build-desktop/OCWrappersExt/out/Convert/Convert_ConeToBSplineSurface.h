// File generated by CPPExt (MPV)
//
#ifndef _Convert_ConeToBSplineSurface_OCWrappers_HeaderFile
#define _Convert_ConeToBSplineSurface_OCWrappers_HeaderFile

// include native header
#include <Convert_ConeToBSplineSurface.hxx>
#include "../Converter.h"

#include "Convert_ElementarySurfaceToBSplineSurface.h"

#include "Convert_ElementarySurfaceToBSplineSurface.h"


namespace OCNaroWrappers
{

ref class OCgp_Cone;



//!  This algorithm converts a bounded Cone into a rational <br>
//!  B-spline  surface. <br>
//!  The cone a Cone from package gp. Its parametrization is : <br>
//!  P (U, V) =  Loc + V * Zdir + <br>
//!              (R + V*Tan(Ang)) * (Cos(U)*Xdir + Sin(U)*Ydir) <br>
//!  where Loc is the location point of the cone, Xdir, Ydir and Zdir <br>
//!  are the normalized directions of the local cartesian coordinate <br>
//!  system of the cone (Zdir is the direction of the Cone's axis) , <br>
//!  Ang is the cone semi-angle.  The U parametrization range is <br>
//!  [0, 2PI]. <br>
//! KeyWords : <br>
//!  Convert, Cone, BSplineSurface. <br>
public ref class OCConvert_ConeToBSplineSurface  : public OCConvert_ElementarySurfaceToBSplineSurface {

protected:
  // dummy constructor;
  OCConvert_ConeToBSplineSurface(OCDummy^) : OCConvert_ElementarySurfaceToBSplineSurface((OCDummy^)nullptr) {};

public:

// constructor from native
OCConvert_ConeToBSplineSurface(Convert_ConeToBSplineSurface* nativeHandle);

// Methods PUBLIC


//!  The equivalent B-spline surface as the same orientation as the <br>
//!  Cone in the U and V parametric directions. <br>
//!  Raised if U1 = U2 or U1 = U2 + 2.0 * Pi <br>
//!  Raised if V1 = V2. <br>
OCConvert_ConeToBSplineSurface(OCNaroWrappers::OCgp_Cone^ C, Standard_Real U1, Standard_Real U2, Standard_Real V1, Standard_Real V2);


//!  The equivalent B-spline surface as the same orientation as the <br>
//!  Cone in the U and V parametric directions. <br>
//!  Raised if V1 = V2. <br>
OCConvert_ConeToBSplineSurface(OCNaroWrappers::OCgp_Cone^ C, Standard_Real V1, Standard_Real V2);

~OCConvert_ConeToBSplineSurface()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
