// File generated by CPPExt (CPP file)
//

#include "Convert_CompPolynomialToPoles.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../TColStd/TColStd_HArray2OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array2OfReal.h"


using namespace OCNaroWrappers;

OCConvert_CompPolynomialToPoles::OCConvert_CompPolynomialToPoles(Convert_CompPolynomialToPoles* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCConvert_CompPolynomialToPoles::OCConvert_CompPolynomialToPoles(Standard_Integer NumCurves, Standard_Integer Continuity, Standard_Integer Dimension, Standard_Integer MaxDegree, OCNaroWrappers::OCTColStd_HArray1OfInteger^ NumCoeffPerCurve, OCNaroWrappers::OCTColStd_HArray1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_HArray2OfReal^ PolynomialIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueIntervals) 
{
  nativeHandle = new Convert_CompPolynomialToPoles(NumCurves, Continuity, Dimension, MaxDegree, *((Handle_TColStd_HArray1OfInteger*)NumCoeffPerCurve->Handle), *((Handle_TColStd_HArray1OfReal*)Coefficients->Handle), *((Handle_TColStd_HArray2OfReal*)PolynomialIntervals->Handle), *((Handle_TColStd_HArray1OfReal*)TrueIntervals->Handle));
}

OCConvert_CompPolynomialToPoles::OCConvert_CompPolynomialToPoles(Standard_Integer NumCurves, Standard_Integer Dimension, Standard_Integer MaxDegree, OCNaroWrappers::OCTColStd_Array1OfInteger^ Continuity, OCNaroWrappers::OCTColStd_Array1OfInteger^ NumCoeffPerCurve, OCNaroWrappers::OCTColStd_Array1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_Array2OfReal^ PolynomialIntervals, OCNaroWrappers::OCTColStd_Array1OfReal^ TrueIntervals) 
{
  nativeHandle = new Convert_CompPolynomialToPoles(NumCurves, Dimension, MaxDegree, *((TColStd_Array1OfInteger*)Continuity->Handle), *((TColStd_Array1OfInteger*)NumCoeffPerCurve->Handle), *((TColStd_Array1OfReal*)Coefficients->Handle), *((TColStd_Array2OfReal*)PolynomialIntervals->Handle), *((TColStd_Array1OfReal*)TrueIntervals->Handle));
}

OCConvert_CompPolynomialToPoles::OCConvert_CompPolynomialToPoles(Standard_Integer Dimension, Standard_Integer MaxDegree, Standard_Integer Degree, OCNaroWrappers::OCTColStd_Array1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_Array1OfReal^ PolynomialIntervals, OCNaroWrappers::OCTColStd_Array1OfReal^ TrueIntervals) 
{
  nativeHandle = new Convert_CompPolynomialToPoles(Dimension, MaxDegree, Degree, *((TColStd_Array1OfReal*)Coefficients->Handle), *((TColStd_Array1OfReal*)PolynomialIntervals->Handle), *((TColStd_Array1OfReal*)TrueIntervals->Handle));
}

 Standard_Integer OCConvert_CompPolynomialToPoles::NbPoles()
{
  return ((Convert_CompPolynomialToPoles*)nativeHandle)->NbPoles();
}

 void OCConvert_CompPolynomialToPoles::Poles(OCNaroWrappers::OCTColStd_HArray2OfReal^ Poles)
{
  ((Convert_CompPolynomialToPoles*)nativeHandle)->Poles(*((Handle_TColStd_HArray2OfReal*)Poles->Handle));
}

 Standard_Integer OCConvert_CompPolynomialToPoles::Degree()
{
  return ((Convert_CompPolynomialToPoles*)nativeHandle)->Degree();
}

 Standard_Integer OCConvert_CompPolynomialToPoles::NbKnots()
{
  return ((Convert_CompPolynomialToPoles*)nativeHandle)->NbKnots();
}

 void OCConvert_CompPolynomialToPoles::Knots(OCNaroWrappers::OCTColStd_HArray1OfReal^ K)
{
  ((Convert_CompPolynomialToPoles*)nativeHandle)->Knots(*((Handle_TColStd_HArray1OfReal*)K->Handle));
}

 void OCConvert_CompPolynomialToPoles::Multiplicities(OCNaroWrappers::OCTColStd_HArray1OfInteger^ M)
{
  ((Convert_CompPolynomialToPoles*)nativeHandle)->Multiplicities(*((Handle_TColStd_HArray1OfInteger*)M->Handle));
}

 System::Boolean OCConvert_CompPolynomialToPoles::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Convert_CompPolynomialToPoles*)nativeHandle)->IsDone());
}


