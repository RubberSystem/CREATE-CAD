// File generated by CPPExt (MPV)
//
#ifndef _Convert_CompBezierCurvesToBSplineCurve_OCWrappers_HeaderFile
#define _Convert_CompBezierCurvesToBSplineCurve_OCWrappers_HeaderFile

// include native header
#include <Convert_CompBezierCurvesToBSplineCurve.hxx>
#include "../Converter.h"


#include "Convert_SequenceOfArray1OfPoles.h"
#include "../TColgp/TColgp_SequenceOfPnt.h"
#include "../TColStd/TColStd_SequenceOfReal.h"
#include "../TColStd/TColStd_SequenceOfInteger.h"


namespace OCNaroWrappers
{

ref class OCTColgp_Array1OfPnt;
ref class OCTColStd_Array1OfReal;
ref class OCTColStd_Array1OfInteger;


//! An algorithm to convert a sequence of adjacent <br>
//! non-rational Bezier curves into a BSpline curve. <br>
//! A CompBezierCurvesToBSplineCurve object provides a framework for: <br>
//! -   defining the sequence of adjacent non-rational Bezier <br>
//!  curves to be converted into a BSpline curve, <br>
//! -   implementing the computation algorithm, and <br>
//! -   consulting the results. <br>
//! Warning <br>
//! Do not attempt to convert rational Bezier curves using this type of algorithm. <br>
public ref class OCConvert_CompBezierCurvesToBSplineCurve  {

protected:
  Convert_CompBezierCurvesToBSplineCurve* nativeHandle;
  OCConvert_CompBezierCurvesToBSplineCurve(OCDummy^) {};

public:
  property Convert_CompBezierCurvesToBSplineCurve* Handle
  {
    Convert_CompBezierCurvesToBSplineCurve* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCConvert_CompBezierCurvesToBSplineCurve(Convert_CompBezierCurvesToBSplineCurve* nativeHandle);

// Methods PUBLIC

//! Constructs a framework for converting a sequence of <br>
//! adjacent non-rational Bezier curves into a BSpline curve. <br>
//! Knots will be created on the computed BSpline curve at <br>
//! each junction point of two consecutive Bezier curves. The <br>
//! degree of continuity of the BSpline curve will be increased at <br>
//! the junction point of two consecutive Bezier curves if their <br>
//! tangent vectors at this point are parallel. AngularTolerance <br>
//! (given in radians, and defaulted to 1.0 e-4) will be used <br>
//! to check the parallelism of the two tangent vectors. <br>
//! Use the following functions: <br>
//! -   AddCurve to define in sequence the adjacent Bezier <br>
//!  curves to be converted, <br>
//! -   Perform to compute the data needed to build the BSpline curve, <br>
//! -   and the available consultation functions to access the <br>
//!  computed data. This data may be used to construct the BSpline curve. <br>
OCConvert_CompBezierCurvesToBSplineCurve(Standard_Real AngularTolerance);

//! Adds the Bezier curve defined by the table of poles Poles, to <br>
//! the sequence (still contained in this framework) of adjacent <br>
//! Bezier curves to be converted into a BSpline curve. <br>
//! Only polynomial (i.e. non-rational) Bezier curves are <br>
//! converted using this framework. <br>
//! If this is not the first call to the function (i.e. if this framework <br>
//! still contains data in its Bezier curve sequence), the degree <br>
//! of continuity of the BSpline curve will be increased at the <br>
//! time of computation at the first point of the added Bezier <br>
//! curve (i.e. the first point of the Poles table). This will be the <br>
//! case if the tangent vector of the curve at this point is <br>
//! parallel to the tangent vector at the end point of the <br>
//! preceding Bezier curve in the Bezier curve sequence still <br>
//! contained in this framework. An angular tolerance given at <br>
//! the time of construction of this framework will be used to <br>
//! check the parallelism of the two tangent vectors. This <br>
//! checking procedure and all related computations will be <br>
//! performed by the Perform function. <br>
//! When the adjacent Bezier curve sequence is complete, use <br>
//! the following functions: <br>
//! -   Perform to compute the data needed to build the BSpline curve, <br>
//! -   and the available consultation functions to access the <br>
//!  computed data. This data may be used to construct the BSpline curve. <br>
//! Warning <br>
//! The Bezier curve sequence treated by this framework is <br>
//! automatically initialized with the first Bezier curve when the <br>
//! function is first called. During subsequent use of this function, <br>
//! ensure that the first point of the added Bezier curve (i.e. the <br>
//! first point of the Poles table) is coincident with the last point <br>
//! of the Bezier curve sequence (i.e. the last point of the <br>
//! preceding Bezier curve in the sequence) still contained in <br>
//! this framework. An error may occur at the time of <br>
//! computation if this condition is not satisfied. Particular care <br>
//! must be taken with respect to the above, as this condition is <br>
//! not checked either when defining the Bezier curve <br>
//! sequence or at the time of computation. <br>
 /*instead*/  void AddCurve(OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles) ;

//! Computes all the data needed to build a BSpline curve <br>
//! equivalent to the adjacent Bezier curve sequence still <br>
//! contained in this framework. <br>
//! A knot is inserted on the computed BSpline curve at the <br>
//! junction point of two consecutive Bezier curves. The <br>
//! degree of continuity of the BSpline curve will be increased <br>
//! at the junction point of two consecutive Bezier curves if <br>
//! their tangent vectors at this point are parallel. An angular <br>
//! tolerance given at the time of construction of this <br>
//! framework is used to check the parallelism of the two <br>
//! tangent vectors. <br>
//! Use the available consultation functions to access the <br>
//! computed data. This data may then be used to construct <br>
//! the BSpline curve. <br>
//! Warning <br>
//! Make sure that the curves in the Bezier curve sequence <br>
//! contained in this framework are adjacent. An error may <br>
//! occur at the time of computation if this condition is not <br>
//! satisfied. Particular care must be taken with respect to the <br>
//! above as this condition is not checked, either when <br>
//! defining the Bezier curve sequence or at the time of computation. <br>
 /*instead*/  void Perform() ;

//! Returns the degree of the BSpline curve whose data is <br>
//! computed in this framework. <br>
//! Warning <br>
//! Take particular care not to use this function before the <br>
//! computation is performed (Perform function), as this <br>
//! condition is not checked and an error may  therefore occur. <br>
 /*instead*/  Standard_Integer Degree() ;

//! Returns the number of poles of the BSpline curve whose <br>
//! data is computed in this framework. <br>
//! Warning <br>
//! Take particular care not to use this function before the <br>
//! computation is performed (Perform function), as this <br>
//! condition is not checked and an error may therefore occur. <br>
 /*instead*/  Standard_Integer NbPoles() ;

//! Loads the Poles table with the poles of the BSpline curve <br>
//! whose data is computed in this framework. <br>
//! Warning <br>
//! -   Do not use this function before the computation is <br>
//!  performed (Perform function). <br>
//! -   The length of the Poles array must be equal to the <br>
//!  number of poles of the BSpline curve whose data is <br>
//!  computed in this framework. <br>
//! Particular care must be taken with respect to the above, as <br>
//! these conditions are not checked, and an error may occur. <br>
 /*instead*/  void Poles(OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles) ;

//! Returns the number of knots of the BSpline curve whose <br>
//! data is computed in this framework. <br>
//! Warning <br>
//! Take particular care not to use this function before the <br>
//! computation is performed (Perform function), as this <br>
//! condition is not checked and an error may therefore occur. <br>
 /*instead*/  Standard_Integer NbKnots() ;


//! -   loads the Knots table with the knots, <br>
//! -   and loads the Mults table with the corresponding multiplicities <br>
//! of the BSpline curve whose data is computed in this framework. <br>
//! Warning <br>
//! -   Do not use this function before the computation is <br>
//!  performed (Perform function). <br>
//! -   The length of the Knots and Mults arrays must be equal <br>
//!  to the number of knots in the BSpline curve whose data is <br>
//!  computed in this framework. <br>
//! Particular care must be taken with respect to the above as <br>
//! these conditions are not checked, and an error may occur. <br>
 /*instead*/  void KnotsAndMults(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults) ;

~OCConvert_CompBezierCurvesToBSplineCurve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
