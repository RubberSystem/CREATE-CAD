// File generated by CPPExt (MPV)
//
#ifndef _Convert_CompPolynomialToPoles_OCWrappers_HeaderFile
#define _Convert_CompPolynomialToPoles_OCWrappers_HeaderFile

// include native header
#include <Convert_CompPolynomialToPoles.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfReal;
ref class OCTColStd_HArray1OfInteger;
ref class OCTColStd_HArray2OfReal;
ref class OCTColStd_Array1OfInteger;
ref class OCTColStd_Array1OfReal;
ref class OCTColStd_Array2OfReal;


//! To convert an function (curve) polynomial by span in a BSpline. <br>
//! <br>
//!   This class uses the following arguments : <br>
//!   NumCurves :  the number of Polynomial Curves <br>
//!   Continuity:  the requested continuity for the n-dimensional Spline <br>
//!   Dimension :  the dimension of the Spline <br>
//!   MaxDegree :  maximum allowed degree for each composite <br>
//!                polynomial segment. <br>
//!   NumCoeffPerCurve : the number of coefficient per segments = degree - 1 <br>
//!   Coefficients  :  the coefficients organized in the following way <br>
//!       [1..<myNumPolynomials>][1..myMaxDegree +1][1..myDimension] <br>
//!       that is : index [n,d,i] is at slot <br>
//!       (n-1) * (myMaxDegree + 1) * myDimension + (d-1) * myDimension + i <br>
//!  PolynomialIntervals :  nth polynomial represents a polynomial between <br>
//!     myPolynomialIntervals->Value(n,0) and <br>
//!     myPolynomialIntervals->Value(n,1) <br>
//!  TrueIntervals : the nth polynomial has to be mapped linearly to be <br>
//!       defined on the following interval : <br>
//!       myTrueIntervals->Value(n) and myTrueIntervals->Value(n+1) <br>
//!       so that it represent adequatly the function with the <br>
//!       required continuity <br>
public ref class OCConvert_CompPolynomialToPoles  {

protected:
  Convert_CompPolynomialToPoles* nativeHandle;
  OCConvert_CompPolynomialToPoles(OCDummy^) {};

public:
  property Convert_CompPolynomialToPoles* Handle
  {
    Convert_CompPolynomialToPoles* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCConvert_CompPolynomialToPoles(Convert_CompPolynomialToPoles* nativeHandle);

// Methods PUBLIC

//!  Warning! <br>
//!           Continuity can be at MOST the maximum degree of <br>
//!           the polynomial functions <br>
//!  TrueIntervals : <br>
//!  this is the true parameterisation for the composite curve <br>
//!  that is : the curve has myContinuity if the nth curve <br>
//!  is parameterized between myTrueIntervals(n) and myTrueIntervals(n+1) <br>
//! <br>
//!  Coefficients have to be the implicit "c form": <br>
//!  Coefficients[Numcurves][MaxDegree+1][Dimension] <br>
//! <br>
//!  Warning! <br>
//!         The NumberOfCoefficient of an polynome is his degree + 1 <br>
//!  Example: To convert the linear function f(x) = 2*x + 1 on the <br>
//!         domaine [2,5] to BSpline with the bound [-1,1]. Arguments are : <br>
//!          NumCurves  = 1; <br>
//!          Continuity = 1; <br>
//!          Dimension  = 1; <br>
//!          MaxDegree  = 1; <br>
//!          NumCoeffPerCurve [1] = {2}; <br>
//!          Coefficients[2] = {1, 2}; <br>
//!          PolynomialIntervals[1,2] = {{2,5}} <br>
//!          TrueIntervals[2] = {-1, 1} <br>
OCConvert_CompPolynomialToPoles(Standard_Integer NumCurves, Standard_Integer Continuity, Standard_Integer Dimension, Standard_Integer MaxDegree, OCNaroWrappers::OCTColStd_HArray1OfInteger^ NumCoeffPerCurve, OCNaroWrappers::OCTColStd_HArray1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_HArray2OfReal^ PolynomialIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueIntervals);

//! To Convert sevral span with different order of Continuity. <br>
//!  Warning: The Length of Continuity have to be NumCurves-1 <br>
OCConvert_CompPolynomialToPoles(Standard_Integer NumCurves, Standard_Integer Dimension, Standard_Integer MaxDegree, OCNaroWrappers::OCTColStd_Array1OfInteger^ Continuity, OCNaroWrappers::OCTColStd_Array1OfInteger^ NumCoeffPerCurve, OCNaroWrappers::OCTColStd_Array1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_Array2OfReal^ PolynomialIntervals, OCNaroWrappers::OCTColStd_Array1OfReal^ TrueIntervals);

//! To Convert only one span. <br>
OCConvert_CompPolynomialToPoles(Standard_Integer Dimension, Standard_Integer MaxDegree, Standard_Integer Degree, OCNaroWrappers::OCTColStd_Array1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_Array1OfReal^ PolynomialIntervals, OCNaroWrappers::OCTColStd_Array1OfReal^ TrueIntervals);

//!  number of poles of the n-dimensional BSpline <br>
//! <br>
 /*instead*/  Standard_Integer NbPoles() ;

//!  returns the poles of the n-dimensional BSpline <br>
//!  in the following format : <br>
//!  [1..NumPoles][1..Dimension] <br>
//! <br>
 /*instead*/  void Poles(OCNaroWrappers::OCTColStd_HArray2OfReal^ Poles) ;


 /*instead*/  Standard_Integer Degree() ;

//! Degree of the n-dimensional Bspline <br>
 /*instead*/  Standard_Integer NbKnots() ;

//! Knots of the n-dimensional Bspline <br>
 /*instead*/  void Knots(OCNaroWrappers::OCTColStd_HArray1OfReal^ K) ;

//! Multiplicities of the knots in the BSpline <br>
 /*instead*/  void Multiplicities(OCNaroWrappers::OCTColStd_HArray1OfInteger^ M) ;


 /*instead*/  System::Boolean IsDone() ;

~OCConvert_CompPolynomialToPoles()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
