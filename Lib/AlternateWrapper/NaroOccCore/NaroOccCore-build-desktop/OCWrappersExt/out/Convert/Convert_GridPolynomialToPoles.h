// File generated by CPPExt (MPV)
//
#ifndef _Convert_GridPolynomialToPoles_OCWrappers_HeaderFile
#define _Convert_GridPolynomialToPoles_OCWrappers_HeaderFile

// include native header
#include <Convert_GridPolynomialToPoles.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfReal;
ref class OCTColStd_HArray1OfInteger;
ref class OCTColgp_HArray2OfPnt;
ref class OCTColStd_HArray2OfInteger;



public ref class OCConvert_GridPolynomialToPoles  {

protected:
  Convert_GridPolynomialToPoles* nativeHandle;
  OCConvert_GridPolynomialToPoles(OCDummy^) {};

public:
  property Convert_GridPolynomialToPoles* Handle
  {
    Convert_GridPolynomialToPoles* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCConvert_GridPolynomialToPoles(Convert_GridPolynomialToPoles* nativeHandle);

// Methods PUBLIC

//!  To    only  one   polynomial  Surface. <br>
//!          The  Length  of  <PolynomialUIntervals> and <PolynomialVIntervals> <br>
//!          have to be 2. <br>
//!          This values defined the parametric domain of the Polynomial Equation. <br>
//! <br>
//!          Coefficients : <br>
//!           The <Coefficients> have to be formated than an "C array" <br>
//!          [MaxUDegree+1] [MaxVDegree+1] [3] <br>
//! <br>
OCConvert_GridPolynomialToPoles(Standard_Integer MaxUDegree, Standard_Integer MaxVDegree, OCNaroWrappers::OCTColStd_HArray1OfInteger^ NumCoeff, OCNaroWrappers::OCTColStd_HArray1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialVIntervals);

//! To one grid of polynomial Surface. <br>
//!  Warning! <br>
//!  Continuity in each parametric direction can be at MOST the <br>
//!  maximum degree of the polynomial functions. <br>
//! <br>
//!  <TrueUIntervals>, <TrueVIntervals> : <br>
//!  this is the true parameterisation for the composite surface <br>
//! <br>
//!  Coefficients : <br>
//!  The Coefficients have to be formated than an "C array" <br>
//!          [NbVSurfaces] [NBUSurfaces] [MaxUDegree+1] [MaxVDegree+1] [3] <br>
//!  raises DomainError    if <NumCoeffPerSurface> is not a <br>
//! [1, NbVSurfaces*NbUSurfaces, 1,2] array. <br>
//! if <Coefficients> is not a <br>
OCConvert_GridPolynomialToPoles(Standard_Integer NbUSurfaces, Standard_Integer NBVSurfaces, Standard_Integer UContinuity, Standard_Integer VContinuity, Standard_Integer MaxUDegree, Standard_Integer MaxVDegree, OCNaroWrappers::OCTColStd_HArray2OfInteger^ NumCoeffPerSurface, OCNaroWrappers::OCTColStd_HArray1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialVIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueVIntervals);


 /*instead*/  void Perform(Standard_Integer UContinuity, Standard_Integer VContinuity, Standard_Integer MaxUDegree, Standard_Integer MaxVDegree, OCNaroWrappers::OCTColStd_HArray2OfInteger^ NumCoeffPerSurface, OCNaroWrappers::OCTColStd_HArray1OfReal^ Coefficients, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ PolynomialVIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueUIntervals, OCNaroWrappers::OCTColStd_HArray1OfReal^ TrueVIntervals) ;


 /*instead*/  Standard_Integer NbUPoles() ;


 /*instead*/  Standard_Integer NbVPoles() ;

//! returns the poles of the BSpline Surface <br>
 /*instead*/  OCTColgp_HArray2OfPnt^ Poles() ;


 /*instead*/  Standard_Integer UDegree() ;


 /*instead*/  Standard_Integer VDegree() ;


 /*instead*/  Standard_Integer NbUKnots() ;


 /*instead*/  Standard_Integer NbVKnots() ;

//! Knots in the U direction <br>
 /*instead*/  OCTColStd_HArray1OfReal^ UKnots() ;

//!  Knots in the V direction <br>
 /*instead*/  OCTColStd_HArray1OfReal^ VKnots() ;

//! Multiplicities of the knots in the U direction <br>
 /*instead*/  OCTColStd_HArray1OfInteger^ UMultiplicities() ;

//! Multiplicities of the knots in the V direction <br>
 /*instead*/  OCTColStd_HArray1OfInteger^ VMultiplicities() ;


 /*instead*/  System::Boolean IsDone() ;

~OCConvert_GridPolynomialToPoles()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
