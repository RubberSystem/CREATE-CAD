// File generated by CPPExt (CPP file)
//

#include "PCDM_SequenceOfReference.h"
#include "../Converter.h"
#include "PCDM_Reference.h"
#include "PCDM_SequenceNodeOfSequenceOfReference.h"


using namespace OCNaroWrappers;

OCPCDM_SequenceOfReference::OCPCDM_SequenceOfReference(PCDM_SequenceOfReference* nativeHandle) : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCPCDM_SequenceOfReference::OCPCDM_SequenceOfReference() : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  nativeHandle = new PCDM_SequenceOfReference();
}

OCPCDM_SequenceOfReference^ OCPCDM_SequenceOfReference::Assign(OCNaroWrappers::OCPCDM_SequenceOfReference^ Other)
{
  PCDM_SequenceOfReference* tmp = new PCDM_SequenceOfReference();
  *tmp = ((PCDM_SequenceOfReference*)nativeHandle)->Assign(*((PCDM_SequenceOfReference*)Other->Handle));
  return gcnew OCPCDM_SequenceOfReference(tmp);
}

 void OCPCDM_SequenceOfReference::Append(OCNaroWrappers::OCPCDM_Reference^ T)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->Append(*((PCDM_Reference*)T->Handle));
}

 void OCPCDM_SequenceOfReference::Append(OCNaroWrappers::OCPCDM_SequenceOfReference^ S)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->Append(*((PCDM_SequenceOfReference*)S->Handle));
}

 void OCPCDM_SequenceOfReference::Prepend(OCNaroWrappers::OCPCDM_Reference^ T)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->Prepend(*((PCDM_Reference*)T->Handle));
}

 void OCPCDM_SequenceOfReference::Prepend(OCNaroWrappers::OCPCDM_SequenceOfReference^ S)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->Prepend(*((PCDM_SequenceOfReference*)S->Handle));
}

 void OCPCDM_SequenceOfReference::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPCDM_Reference^ T)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->InsertBefore(Index, *((PCDM_Reference*)T->Handle));
}

 void OCPCDM_SequenceOfReference::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPCDM_SequenceOfReference^ S)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->InsertBefore(Index, *((PCDM_SequenceOfReference*)S->Handle));
}

 void OCPCDM_SequenceOfReference::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPCDM_Reference^ T)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->InsertAfter(Index, *((PCDM_Reference*)T->Handle));
}

 void OCPCDM_SequenceOfReference::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPCDM_SequenceOfReference^ S)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->InsertAfter(Index, *((PCDM_SequenceOfReference*)S->Handle));
}

OCPCDM_Reference^ OCPCDM_SequenceOfReference::First()
{
  PCDM_Reference* tmp = new PCDM_Reference();
  *tmp = ((PCDM_SequenceOfReference*)nativeHandle)->First();
  return gcnew OCPCDM_Reference(tmp);
}

OCPCDM_Reference^ OCPCDM_SequenceOfReference::Last()
{
  PCDM_Reference* tmp = new PCDM_Reference();
  *tmp = ((PCDM_SequenceOfReference*)nativeHandle)->Last();
  return gcnew OCPCDM_Reference(tmp);
}

 void OCPCDM_SequenceOfReference::Split(Standard_Integer Index, OCNaroWrappers::OCPCDM_SequenceOfReference^ Sub)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->Split(Index, *((PCDM_SequenceOfReference*)Sub->Handle));
}

OCPCDM_Reference^ OCPCDM_SequenceOfReference::Value(Standard_Integer Index)
{
  PCDM_Reference* tmp = new PCDM_Reference();
  *tmp = ((PCDM_SequenceOfReference*)nativeHandle)->Value(Index);
  return gcnew OCPCDM_Reference(tmp);
}

 void OCPCDM_SequenceOfReference::SetValue(Standard_Integer Index, OCNaroWrappers::OCPCDM_Reference^ I)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->SetValue(Index, *((PCDM_Reference*)I->Handle));
}

OCPCDM_Reference^ OCPCDM_SequenceOfReference::ChangeValue(Standard_Integer Index)
{
  PCDM_Reference* tmp = new PCDM_Reference();
  *tmp = ((PCDM_SequenceOfReference*)nativeHandle)->ChangeValue(Index);
  return gcnew OCPCDM_Reference(tmp);
}

 void OCPCDM_SequenceOfReference::Remove(Standard_Integer Index)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->Remove(Index);
}

 void OCPCDM_SequenceOfReference::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  ((PCDM_SequenceOfReference*)nativeHandle)->Remove(FromIndex, ToIndex);
}


