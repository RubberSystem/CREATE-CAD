// File generated by CPPExt (CPP file)
//

#include "BRepOffsetAPI_ThruSections.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Wire.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../Geom/Geom_BSplineSurface.h"
#include "../TopTools/TopTools_Array1OfShape.h"


using namespace OCNaroWrappers;

OCBRepOffsetAPI_ThruSections::OCBRepOffsetAPI_ThruSections(BRepOffsetAPI_ThruSections* nativeHandle) : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCBRepOffsetAPI_ThruSections::OCBRepOffsetAPI_ThruSections(System::Boolean isSolid, System::Boolean ruled, Standard_Real pres3d) : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr)

{
  nativeHandle = new BRepOffsetAPI_ThruSections(OCConverter::BooleanToStandardBoolean(isSolid), OCConverter::BooleanToStandardBoolean(ruled), pres3d);
}

 void OCBRepOffsetAPI_ThruSections::Init(System::Boolean isSolid, System::Boolean ruled, Standard_Real pres3d)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->Init(OCConverter::BooleanToStandardBoolean(isSolid), OCConverter::BooleanToStandardBoolean(ruled), pres3d);
}

 void OCBRepOffsetAPI_ThruSections::AddWire(OCNaroWrappers::OCTopoDS_Wire^ wire)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->AddWire(*((TopoDS_Wire*)wire->Handle));
}

 void OCBRepOffsetAPI_ThruSections::AddVertex(OCNaroWrappers::OCTopoDS_Vertex^ aVertex)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->AddVertex(*((TopoDS_Vertex*)aVertex->Handle));
}

 void OCBRepOffsetAPI_ThruSections::CheckCompatibility(System::Boolean check)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->CheckCompatibility(OCConverter::BooleanToStandardBoolean(check));
}

 void OCBRepOffsetAPI_ThruSections::SetSmoothing(System::Boolean UseSmoothing)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->SetSmoothing(OCConverter::BooleanToStandardBoolean(UseSmoothing));
}

 void OCBRepOffsetAPI_ThruSections::SetParType(OCApprox_ParametrizationType ParType)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->SetParType((Approx_ParametrizationType)ParType);
}

 void OCBRepOffsetAPI_ThruSections::SetContinuity(OCGeomAbs_Shape C)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->SetContinuity((GeomAbs_Shape)C);
}

 void OCBRepOffsetAPI_ThruSections::SetCriteriumWeight(Standard_Real W1, Standard_Real W2, Standard_Real W3)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->SetCriteriumWeight(W1, W2, W3);
}

 void OCBRepOffsetAPI_ThruSections::SetMaxDegree(Standard_Integer MaxDeg)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->SetMaxDegree(MaxDeg);
}

 OCApprox_ParametrizationType OCBRepOffsetAPI_ThruSections::ParType()
{
  return (OCApprox_ParametrizationType)(((BRepOffsetAPI_ThruSections*)nativeHandle)->ParType());
}

 OCGeomAbs_Shape OCBRepOffsetAPI_ThruSections::Continuity()
{
  return (OCGeomAbs_Shape)(((BRepOffsetAPI_ThruSections*)nativeHandle)->Continuity());
}

 Standard_Integer OCBRepOffsetAPI_ThruSections::MaxDegree()
{
  return ((BRepOffsetAPI_ThruSections*)nativeHandle)->MaxDegree();
}

 System::Boolean OCBRepOffsetAPI_ThruSections::UseSmoothing()
{
  return OCConverter::StandardBooleanToBoolean(((BRepOffsetAPI_ThruSections*)nativeHandle)->UseSmoothing());
}

 void OCBRepOffsetAPI_ThruSections::CriteriumWeight(Standard_Real& W1, Standard_Real& W2, Standard_Real& W3)
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->CriteriumWeight(W1, W2, W3);
}

 void OCBRepOffsetAPI_ThruSections::Build()
{
  ((BRepOffsetAPI_ThruSections*)nativeHandle)->Build();
}

OCTopoDS_Shape^ OCBRepOffsetAPI_ThruSections::FirstShape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepOffsetAPI_ThruSections*)nativeHandle)->FirstShape();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepOffsetAPI_ThruSections::LastShape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepOffsetAPI_ThruSections*)nativeHandle)->LastShape();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepOffsetAPI_ThruSections::GeneratedFace(OCNaroWrappers::OCTopoDS_Shape^ Edge)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepOffsetAPI_ThruSections*)nativeHandle)->GeneratedFace(*((TopoDS_Shape*)Edge->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}


