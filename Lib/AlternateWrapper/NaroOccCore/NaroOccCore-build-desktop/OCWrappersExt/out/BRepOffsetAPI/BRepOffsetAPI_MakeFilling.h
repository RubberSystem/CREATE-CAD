// File generated by CPPExt (MPV)
//
#ifndef _BRepOffsetAPI_MakeFilling_OCWrappers_HeaderFile
#define _BRepOffsetAPI_MakeFilling_OCWrappers_HeaderFile

// include native header
#include <BRepOffsetAPI_MakeFilling.hxx>
#include "../Converter.h"

#include "../BRepBuilderAPI/BRepBuilderAPI_MakeShape.h"

#include "../BRepFill/BRepFill_Filling.h"
#include "../BRepBuilderAPI/BRepBuilderAPI_MakeShape.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Face;
ref class OCTopoDS_Edge;
ref class OCgp_Pnt;
ref class OCTopTools_ListOfShape;
ref class OCTopoDS_Shape;


//! N-Side Filling <br>
//!  This algorithm avoids to build a face from: <br>
//!  * a set of edges defining the bounds of the face and some <br>
//!    constraints the surface of the face has to satisfy <br>
//!  * a set of edges and points defining some constraints <br>
//!    the support surface has to satisfy <br>
//!  * an initial surface to deform for satisfying the constraints <br>
//!  * a set of parameters to control the constraints. <br>
public ref class OCBRepOffsetAPI_MakeFilling  : public OCBRepBuilderAPI_MakeShape {

protected:
  // dummy constructor;
  OCBRepOffsetAPI_MakeFilling(OCDummy^) : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepOffsetAPI_MakeFilling(BRepOffsetAPI_MakeFilling* nativeHandle);

// Methods PUBLIC

//! Constructs a wire filling object defined by <br>
//! - the energy minimizing criterion Degree <br>
//! - the number of points on the curve NbPntsOnCur <br>
//! - the number of iterations NbIter <br>
//! - the Boolean Anisotropie <br>
//! - the 2D tolerance Tol2d <br>
//! - the 3D tolerance Tol3d <br>
//! - the angular tolerance TolAng <br>
//! - the tolerance for curvature TolCur <br>
//! - the highest polynomial degree MaxDeg <br>
//! - the greatest number of segments MaxSeg. <br>
//! If the Boolean Anistropie is true, the algorithm's <br>
//! performance is better in cases where the ratio of the <br>
//! length U and the length V indicate a great difference <br>
//! between the two. In other words, when the surface is, for <br>
//! example, extremely long. <br>
OCBRepOffsetAPI_MakeFilling(Standard_Integer Degree, Standard_Integer NbPtsOnCur, Standard_Integer NbIter, System::Boolean Anisotropie, Standard_Real Tol2d, Standard_Real Tol3d, Standard_Real TolAng, Standard_Real TolCurv, Standard_Integer MaxDeg, Standard_Integer MaxSegments);

//! Sets the values of Tolerances used to control the constraint. <br>
//!	Tol2d: <br>
//!	Tol3d:   it is the maximum distance allowed between the support surface <br>
//!	         and the constraints <br>
//!	TolAng:  it is the maximum angle allowed between the normal of the surface <br>
//!	         and the constraints <br>
//!	TolCurv: it is the maximum difference of curvature allowed between <br>
//!	         the surface and the constraint <br>
 /*instead*/  void SetConstrParam(Standard_Real Tol2d, Standard_Real Tol3d, Standard_Real TolAng, Standard_Real TolCurv) ;

//! Sets the parameters used for resolution. <br>
//!	The default values of these parameters have been chosen for a good <br>
//!	ratio quality/performance. <br>
//!	Degree:      it is the order of energy criterion to minimize for computing <br>
//!	             the deformation of the surface. <br>
//!	             The default value is 3 <br>
//!	             The recommanded value is i+2 where i is the maximum order of the <br>
//!	             constraints. <br>
//!	NbPtsOnCur:  it is the average number of points for discretisation <br>
//!	             of the edges. <br>
//!	NbIter:      it is the maximum number of iterations of the process. <br>
//!	             For each iteration the number of discretisation points is <br>
//!	             increased. <br>
//!	Anisotropie: <br>
 /*instead*/  void SetResolParam(Standard_Integer Degree, Standard_Integer NbPtsOnCur, Standard_Integer NbIter, System::Boolean Anisotropie) ;

//! Sets the parameters used to approximate the filling <br>
//! surface. These include: <br>
//! - MaxDeg - the highest degree which the polynomial <br>
//!   defining the filling surface can have <br>
//! - MaxSegments - the greatest number of segments <br>
//!   which the filling surface can have. <br>
 /*instead*/  void SetApproxParam(Standard_Integer MaxDeg, Standard_Integer MaxSegments) ;

//! Loads the initial surface Surf to <br>
//! begin the construction of the surface. <br>
//! This optional function is useful if the surface resulting from <br>
//! construction for the algorithm is likely to be complex. <br>
//! The support surface of the face under construction is computed by a <br>
//! deformation of Surf which satisfies the given constraints. <br>
//! The set of bounding edges defines the wire of the face. <br>
//! If no initial surface is given, the algorithm computes it <br>
//! automatically. If the set of edges is not connected (Free constraint), <br>
//! missing edges are automatically computed. <br>
 /*instead*/  void LoadInitSurface(OCNaroWrappers::OCTopoDS_Face^ Surf) ;

//! Adds a new constraint which also defines an edge of the wire <br>
//!	        of the face <br>
//!	Order: Order of the constraint: <br>
//!	       GeomAbs_C0 : the surface has to pass by 3D representation <br>
//!	                    of the edge <br>
//!	       GeomAbs_G1 : the surface has to pass by 3D representation <br>
//!	                    of the edge and to respect tangency with the first <br>
//!	                    face of the edge <br>
//!	       GeomAbs_G2 : the surface has to pass by 3D representation <br>
//!	                    of the edge and to respect tangency and curvature <br>
//!	                    with the first face of the edge. <br>
//!  Raises ConstructionError if the edge has no representation on a face and Order is <br>
//! GeomAbs_G1 or GeomAbs_G2. <br>
 /*instead*/  Standard_Integer Add(OCNaroWrappers::OCTopoDS_Edge^ Constr, OCGeomAbs_Shape Order, System::Boolean IsBound) ;

//! Adds a new constraint which also defines an edge of the wire <br>
//!	        of the face <br>
//!	Order: Order of the constraint: <br>
//!	       GeomAbs_C0 : the surface has to pass by 3D representation <br>
//!	                    of the edge <br>
//!	       GeomAbs_G1 : the surface has to pass by 3D representation <br>
//!	                    of the edge and to respect tangency with the <br>
//!	                    given face <br>
//!	       GeomAbs_G2 : the surface has to pass by 3D representation <br>
//!	                    of the edge and to respect tangency and curvature <br>
//!                    with the given face. <br>
//! Raises ConstructionError if the edge has no 2d representation on the given face <br>
 /*instead*/  Standard_Integer Add(OCNaroWrappers::OCTopoDS_Edge^ Constr, OCNaroWrappers::OCTopoDS_Face^ Support, OCGeomAbs_Shape Order, System::Boolean IsBound) ;

//! Adds a free constraint on a face. The corresponding edge has to <br>
//!	be automatically recomputed. It is always a bound. <br>
 /*instead*/  Standard_Integer Add(OCNaroWrappers::OCTopoDS_Face^ Support, OCGeomAbs_Shape Order) ;

//! Adds a punctual constraint. <br>
 /*instead*/  Standard_Integer Add(OCNaroWrappers::OCgp_Pnt^ Point) ;

//! Adds a punctual constraint. <br>
 /*instead*/  Standard_Integer Add(Standard_Real U, Standard_Real V, OCNaroWrappers::OCTopoDS_Face^ Support, OCGeomAbs_Shape Order) ;

//! Builds the resulting faces <br>
virtual /*instead*/  void Build() override;

//! Tests whether computation of the filling plate has been completed. <br>
virtual /*instead*/  System::Boolean IsDone() override;

//! Returns the list of shapes generated from the <br>
//!          shape <S>. <br>
virtual /*instead*/  OCTopTools_ListOfShape^ Generated(OCNaroWrappers::OCTopoDS_Shape^ S) override;

//! Returns the maximum distance between the result and <br>
//! the constraints. This is set at construction time. <br>
 /*instead*/  Standard_Real G0Error() ;

//! Returns the maximum angle between the result and the <br>
//! constraints. This is set at construction time. <br>
 /*instead*/  Standard_Real G1Error() ;

//! Returns the maximum angle between the result and the <br>
//! constraints. This is set at construction time. <br>
 /*instead*/  Standard_Real G2Error() ;

//! Returns the maximum distance attained between the <br>
//! result and the constraint Index. This is set at construction time. <br>
 /*instead*/  Standard_Real G0Error(Standard_Integer Index) ;

//! Returns the maximum angle between the result and the <br>
//! constraints. This is set at construction time. <br>
 /*instead*/  Standard_Real G1Error(Standard_Integer Index) ;

//! Returns the greatest difference in curvature found <br>
//! between the result and the constraint Index. <br>
 /*instead*/  Standard_Real G2Error(Standard_Integer Index) ;

~OCBRepOffsetAPI_MakeFilling()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
