// File generated by CPPExt (CPP file)
//

#include "BRepOffsetAPI_NormalProjection.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopTools/TopTools_ListOfShape.h"


using namespace OCNaroWrappers;

OCBRepOffsetAPI_NormalProjection::OCBRepOffsetAPI_NormalProjection(BRepOffsetAPI_NormalProjection* nativeHandle) : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCBRepOffsetAPI_NormalProjection::OCBRepOffsetAPI_NormalProjection() : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr)

{
  nativeHandle = new BRepOffsetAPI_NormalProjection();
}

OCBRepOffsetAPI_NormalProjection::OCBRepOffsetAPI_NormalProjection(OCNaroWrappers::OCTopoDS_Shape^ S) : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr)

{
  nativeHandle = new BRepOffsetAPI_NormalProjection(*((TopoDS_Shape*)S->Handle));
}

 void OCBRepOffsetAPI_NormalProjection::Init(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  ((BRepOffsetAPI_NormalProjection*)nativeHandle)->Init(*((TopoDS_Shape*)S->Handle));
}

 void OCBRepOffsetAPI_NormalProjection::Add(OCNaroWrappers::OCTopoDS_Shape^ ToProj)
{
  ((BRepOffsetAPI_NormalProjection*)nativeHandle)->Add(*((TopoDS_Shape*)ToProj->Handle));
}

 void OCBRepOffsetAPI_NormalProjection::SetParams(Standard_Real Tol3D, Standard_Real Tol2D, OCGeomAbs_Shape InternalContinuity, Standard_Integer MaxDegree, Standard_Integer MaxSeg)
{
  ((BRepOffsetAPI_NormalProjection*)nativeHandle)->SetParams(Tol3D, Tol2D, (GeomAbs_Shape)InternalContinuity, MaxDegree, MaxSeg);
}

 void OCBRepOffsetAPI_NormalProjection::SetMaxDistance(Standard_Real MaxDist)
{
  ((BRepOffsetAPI_NormalProjection*)nativeHandle)->SetMaxDistance(MaxDist);
}

 void OCBRepOffsetAPI_NormalProjection::SetLimit(System::Boolean FaceBoundaries)
{
  ((BRepOffsetAPI_NormalProjection*)nativeHandle)->SetLimit(OCConverter::BooleanToStandardBoolean(FaceBoundaries));
}

 void OCBRepOffsetAPI_NormalProjection::Compute3d(System::Boolean With3d)
{
  ((BRepOffsetAPI_NormalProjection*)nativeHandle)->Compute3d(OCConverter::BooleanToStandardBoolean(With3d));
}

 void OCBRepOffsetAPI_NormalProjection::Build()
{
  ((BRepOffsetAPI_NormalProjection*)nativeHandle)->Build();
}

 System::Boolean OCBRepOffsetAPI_NormalProjection::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((BRepOffsetAPI_NormalProjection*)nativeHandle)->IsDone());
}

OCTopoDS_Shape^ OCBRepOffsetAPI_NormalProjection::Projection()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepOffsetAPI_NormalProjection*)nativeHandle)->Projection();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepOffsetAPI_NormalProjection::Couple(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepOffsetAPI_NormalProjection*)nativeHandle)->Couple(*((TopoDS_Edge*)E->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopTools_ListOfShape^ OCBRepOffsetAPI_NormalProjection::Generated(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BRepOffsetAPI_NormalProjection*)nativeHandle)->Generated(*((TopoDS_Shape*)S->Handle));
  return gcnew OCTopTools_ListOfShape(tmp);
}

OCTopoDS_Shape^ OCBRepOffsetAPI_NormalProjection::Ancestor(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepOffsetAPI_NormalProjection*)nativeHandle)->Ancestor(*((TopoDS_Edge*)E->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCBRepOffsetAPI_NormalProjection::BuildWire(OCNaroWrappers::OCTopTools_ListOfShape^ Liste)
{
  return OCConverter::StandardBooleanToBoolean(((BRepOffsetAPI_NormalProjection*)nativeHandle)->BuildWire(*((TopTools_ListOfShape*)Liste->Handle)));
}


