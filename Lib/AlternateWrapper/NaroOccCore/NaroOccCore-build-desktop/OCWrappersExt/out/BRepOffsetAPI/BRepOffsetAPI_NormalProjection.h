// File generated by CPPExt (MPV)
//
#ifndef _BRepOffsetAPI_NormalProjection_OCWrappers_HeaderFile
#define _BRepOffsetAPI_NormalProjection_OCWrappers_HeaderFile

// include native header
#include <BRepOffsetAPI_NormalProjection.hxx>
#include "../Converter.h"

#include "../BRepBuilderAPI/BRepBuilderAPI_MakeShape.h"

#include "../BRepAlgo/BRepAlgo_NormalProjection.h"
#include "../BRepBuilderAPI/BRepBuilderAPI_MakeShape.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopoDS_Edge;
ref class OCTopTools_ListOfShape;


//! A framework to define projection onto a shape <br>
//! according to the normal from each point to be projected. <br>
//! The target shape is a face, and the source shape is an edge or a wire. <br>
//! The target face is considered to be a 2D surface. <br>
public ref class OCBRepOffsetAPI_NormalProjection  : public OCBRepBuilderAPI_MakeShape {

protected:
  // dummy constructor;
  OCBRepOffsetAPI_NormalProjection(OCDummy^) : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepOffsetAPI_NormalProjection(BRepOffsetAPI_NormalProjection* nativeHandle);

// Methods PUBLIC

//! Constructs an empty framework to define projection on <br>
//! a shape according to the normal from each point to be <br>
//! projected to the shape. <br>
OCBRepOffsetAPI_NormalProjection();

//!  Constructs a framework to define projection onto the <br>
//! basis shape S according to the normal from each point <br>
//! to be projected from the shape added to this framework by Add. <br>
//! Default parameters of the algorithm: Tol3D = 1.e-04, Tol2D =sqr(tol3d) <br>
//! , InternalContinuity = GeomAbs_C2, MaxDegree = 14, MaxSeg = 16. <br>
OCBRepOffsetAPI_NormalProjection(OCNaroWrappers::OCTopoDS_Shape^ S);

//! Initializes the empty constructor framework with the shape S. <br>
 /*instead*/  void Init(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Adds the shape ToProj to the framework for calculation <br>
//! of the projection by Compute3d. <br>
//! ToProj is an edge or a wire and will be projected onto the basis shape. <br>
//! Exceptions <br>
//! Standard_ConstructionError if ToProj is not added. <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Shape^ ToProj) ;

//!  Sets the parameters  used  for computation <br>
//!          Tol3 is the requiered  tolerance between the  3d projected <br>
//!          curve  and     its    2d    representation <br>
//!          InternalContinuity  is the order of constraints <br>
//!          used for  approximation <br>
//!          MaxDeg and MaxSeg are the maximum degree and the maximum <br>
//!          number of segment for BSpline resulting of an approximation. <br>
 /*instead*/  void SetParams(Standard_Real Tol3D, Standard_Real Tol2D, OCGeomAbs_Shape InternalContinuity, Standard_Integer MaxDegree, Standard_Integer MaxSeg) ;

//!  Sets the maximum distance between target shape and <br>
//!  shape to project. If this condition is not satisfied then corresponding <br>
//!  part of solution is discarded. <br>
//!  if MaxDist < 0 then this method does not affect the algorithm <br>
 /*instead*/  void SetMaxDistance(Standard_Real MaxDist) ;

//!  Manage  limitation  of  projected  edges. <br>
 /*instead*/  void SetLimit(System::Boolean FaceBoundaries) ;

//!  Returns true if a 3D curve is computed. If not, false is <br>
//! returned and an initial 3D curve is kept to build the resulting edges. <br>
 /*instead*/  void Compute3d(System::Boolean With3d) ;

//!  Builds the result of the projection as a compound of <br>
//! wires. Tries to build oriented wires. <br>
virtual /*instead*/  void Build() override;

//! Returns true if the object was correctly built by the shape <br>
//! construction algorithm. <br>
//! If at the construction time of the shape, the algorithm <br>
//! cannot be completed, or the original data is corrupted, <br>
//! IsDone returns false and therefore protects the use of <br>
//! functions to access the result of the construction <br>
//! (typically the Shape function). <br>
virtual /*instead*/  System::Boolean IsDone() override;

//! Performs the projection. <br>
//! The construction of the result is performed by Build. <br>
//! Exceptions <br>
//! StdFail_NotDone if the projection was not performed. <br>
 /*instead*/  OCTopoDS_Shape^ Projection() ;

//! Returns the initial face corresponding to the projected edge E. <br>
//! Exceptions <br>
//! StdFail_NotDone if no face was found. <br>
//! Standard_NoSuchObject if if a face corresponding to <br>
//! E has already been found. <br>
 /*instead*/  OCTopoDS_Shape^ Couple(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Returns the  list   of shapes generated   from the <br>
//!          shape <S>. <br>
virtual /*instead*/  OCTopTools_ListOfShape^ Generated(OCNaroWrappers::OCTopoDS_Shape^ S) override;

//! Returns the initial edge corresponding to the edge E <br>
//! resulting from the computation of the projection. <br>
//! Exceptions <br>
//! StdFail_NotDone if no edge was found. <br>
//! Standard_NoSuchObject if an edge corresponding to <br>
//! E has already been found. <br>
 /*instead*/  OCTopoDS_Shape^ Ancestor(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! build the result as a list of wire if possible in -- <br>
//!  a first returns a wire only if there is only a wire. <br>
 /*instead*/  System::Boolean BuildWire(OCNaroWrappers::OCTopTools_ListOfShape^ Liste) ;

~OCBRepOffsetAPI_NormalProjection()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
