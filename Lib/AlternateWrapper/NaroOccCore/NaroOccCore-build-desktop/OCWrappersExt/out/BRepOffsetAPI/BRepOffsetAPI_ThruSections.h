// File generated by CPPExt (MPV)
//
#ifndef _BRepOffsetAPI_ThruSections_OCWrappers_HeaderFile
#define _BRepOffsetAPI_ThruSections_OCWrappers_HeaderFile

// include native header
#include <BRepOffsetAPI_ThruSections.hxx>
#include "../Converter.h"

#include "../BRepBuilderAPI/BRepBuilderAPI_MakeShape.h"

#include "../TopTools/TopTools_SequenceOfShape.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../TopTools/TopTools_DataMapOfShapeShape.h"
#include "../GeomAbs/GeomAbs_Shape.h"
#include "../Approx/Approx_ParametrizationType.h"
#include "../BRepBuilderAPI/BRepBuilderAPI_MakeShape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Wire;
ref class OCTopoDS_Vertex;
ref class OCTopoDS_Shape;
ref class OCGeom_BSplineSurface;
ref class OCTopTools_Array1OfShape;


//! Describes functions to build a loft. This is a shell or a <br>
//! solid passing through a set of sections in a given <br>
//! sequence. Usually sections are wires, but the first and <br>
//! the last sections may be vertices (punctual sections). <br>
public ref class OCBRepOffsetAPI_ThruSections  : public OCBRepBuilderAPI_MakeShape {

protected:
  // dummy constructor;
  OCBRepOffsetAPI_ThruSections(OCDummy^) : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepOffsetAPI_ThruSections(BRepOffsetAPI_ThruSections* nativeHandle);

// Methods PUBLIC

//! Initializes an algorithm for building a shell or a solid <br>
//! passing through a set of sections, where: <br>
//! -          isSolid is set to true if the construction algorithm is <br>
//!   required to build a solid or to false if it is required to build <br>
//!   a shell (the default value), <br>
//! -          ruled is set to true if the faces generated between <br>
//!   the edges of two consecutive wires are ruled surfaces or to <br>
//!   false (the default value) if they are smoothed out by approximation, <br>
//! -          pres3d defines the precision criterion used by the <br>
//!   approximation algorithm; the default value is 1.0e-6. <br>
//!   Use AddWire and AddVertex to define the <br>
//! successive sections of the shell or solid to be built. <br>
OCBRepOffsetAPI_ThruSections(System::Boolean isSolid, System::Boolean ruled, Standard_Real pres3d);

//! Initializes this algorithm for building a shell or a solid <br>
//! passing through a set of sections, where: <br>
//! - isSolid is set to true if this construction algorithm is <br>
//!   required to build a solid or to false if it is required to <br>
//!   build a shell. false is the default value; <br>
//! - ruled is set to true if the faces generated between the <br>
//!   edges of two consecutive wires are ruled surfaces or <br>
//! to false (the default value) if they are smoothed out by approximation, <br>
//! - pres3d defines the precision criterion used by the <br>
//!   approximation algorithm; the default value is 1.0e-6. <br>
//!   Use AddWire and AddVertex to define the successive <br>
//! sections of the shell or solid to be built. <br>
 /*instead*/  void Init(System::Boolean isSolid, System::Boolean ruled, Standard_Real pres3d) ;

//! Adds the wire wire to the set of <br>
//! sections through which the shell or solid is built. <br>
//! Use the Build function to construct the shape. <br>
 /*instead*/  void AddWire(OCNaroWrappers::OCTopoDS_Wire^ wire) ;

//! Adds the vertex Vertex (punctual section) to the set of sections <br>
//! through which the shell or solid is built. A vertex may be added to the <br>
//! set of sections only as first or last section. At least one wire <br>
//! must be added to the set of sections by the method AddWire. <br>
//! Use the Build function to construct the shape. <br>
 /*instead*/  void AddVertex(OCNaroWrappers::OCTopoDS_Vertex^ aVertex) ;


 /*instead*/  void CheckCompatibility(System::Boolean check) ;

//! Define the approximation algorithm <br>
 /*instead*/  void SetSmoothing(System::Boolean UseSmoothing) ;

//! Define the type of parametrization   used in the approximation <br>
 /*instead*/  void SetParType(OCApprox_ParametrizationType ParType) ;

//! Define the Continuity used in the approximation <br>
 /*instead*/  void SetContinuity(OCGeomAbs_Shape C) ;

//! define the Weights  associed to the criterium used in <br>
//!          the  optimization. <br>
//! <br>
//! if Wi <= 0 <br>
 /*instead*/  void SetCriteriumWeight(Standard_Real W1, Standard_Real W2, Standard_Real W3) ;

//! Define the maximal U degree of result surface <br>
 /*instead*/  void SetMaxDegree(Standard_Integer MaxDeg) ;

//! returns the type of parametrization used in the approximation <br>
 /*instead*/  OCApprox_ParametrizationType ParType() ;

//! returns the Continuity used in the approximation <br>
 /*instead*/  OCGeomAbs_Shape Continuity() ;

//! returns the maximal U degree of result surface <br>
 /*instead*/  Standard_Integer MaxDegree() ;

//! Define the approximation algorithm <br>
 /*instead*/  System::Boolean UseSmoothing() ;

//! returns the Weights associed  to the criterium used in <br>
//!          the  optimization. <br>
 /*instead*/  void CriteriumWeight(Standard_Real& W1, Standard_Real& W2, Standard_Real& W3) ;


virtual /*instead*/  void Build() override;

//! Returns the TopoDS Shape of the bottom of the loft if solid <br>
 /*instead*/  OCTopoDS_Shape^ FirstShape() ;

//! Returns the TopoDS Shape of the top of the loft if solid <br>
 /*instead*/  OCTopoDS_Shape^ LastShape() ;

//! if Ruled <br>
//!            Returns the Face generated by each edge <br>
//!            except the last wire <br>
//!          if smoothed <br>
//!            Returns the Face generated by each edge of the first wire <br>
 /*instead*/  OCTopoDS_Shape^ GeneratedFace(OCNaroWrappers::OCTopoDS_Shape^ Edge) ;

~OCBRepOffsetAPI_ThruSections()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
