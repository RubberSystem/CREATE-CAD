// File generated by CPPExt (CPP file)
//

#include "XSControl_WorkSession.h"
#include "../Converter.h"
#include "XSControl_Controller.h"
#include "XSControl_TransferReader.h"
#include "XSControl_TransferWriter.h"
#include "../Dico/Dico_DictionaryOfTransient.h"
#include "XSControl_Vars.h"
#include "../Message/Message_Messenger.h"
#include "../Transfer/Transfer_TransientProcess.h"
#include "../Standard/Standard_Transient.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Transfer/Transfer_FinderProcess.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../Interface/Interface_CheckIterator.h"


using namespace OCNaroWrappers;

OCXSControl_WorkSession::OCXSControl_WorkSession(Handle(XSControl_WorkSession)* nativeHandle) : OCIFSelect_WorkSession((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_XSControl_WorkSession(*nativeHandle);
}

OCXSControl_WorkSession::OCXSControl_WorkSession() : OCIFSelect_WorkSession((OCDummy^)nullptr)

{
  nativeHandle = new Handle_XSControl_WorkSession(new XSControl_WorkSession());
}

 void OCXSControl_WorkSession::ClearData(Standard_Integer mode)
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->ClearData(mode);
}

 System::Boolean OCXSControl_WorkSession::SelectNorm(System::String^ normname, System::String^ profile)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_WorkSession*)nativeHandle))->SelectNorm(OCConverter::StringToStandardCString(normname), OCConverter::StringToStandardCString(profile)));
}

 System::Boolean OCXSControl_WorkSession::SelectProfile(System::String^ profile)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_WorkSession*)nativeHandle))->SelectProfile(OCConverter::StringToStandardCString(profile)));
}

 void OCXSControl_WorkSession::SetController(OCNaroWrappers::OCXSControl_Controller^ ctl)
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->SetController(*((Handle_XSControl_Controller*)ctl->Handle));
}

 void OCXSControl_WorkSession::AdaptNorm()
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->AdaptNorm();
}

 System::String^ OCXSControl_WorkSession::SelectedNorm(System::Boolean rsc)
{
  return OCConverter::StandardCStringToString((*((Handle_XSControl_WorkSession*)nativeHandle))->SelectedNorm(OCConverter::BooleanToStandardBoolean(rsc)));
}

OCXSControl_Controller^ OCXSControl_WorkSession::NormAdaptor()
{
  Handle(XSControl_Controller) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->NormAdaptor();
  return gcnew OCXSControl_Controller(&tmp);
}

OCDico_DictionaryOfTransient^ OCXSControl_WorkSession::Context()
{
  Handle(Dico_DictionaryOfTransient) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->Context();
  return gcnew OCDico_DictionaryOfTransient(&tmp);
}

 void OCXSControl_WorkSession::SetAllContext(OCNaroWrappers::OCDico_DictionaryOfTransient^ context)
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->SetAllContext(*((Handle_Dico_DictionaryOfTransient*)context->Handle));
}

 void OCXSControl_WorkSession::ClearContext()
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->ClearContext();
}

 System::Boolean OCXSControl_WorkSession::PrintTransferStatus(Standard_Integer num, System::Boolean wri, OCNaroWrappers::OCMessage_Messenger^ S)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_WorkSession*)nativeHandle))->PrintTransferStatus(num, OCConverter::BooleanToStandardBoolean(wri), *((Handle_Message_Messenger*)S->Handle)));
}

 void OCXSControl_WorkSession::InitTransferReader(Standard_Integer mode)
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->InitTransferReader(mode);
}

 void OCXSControl_WorkSession::SetTransferReader(OCNaroWrappers::OCXSControl_TransferReader^ TR)
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->SetTransferReader(*((Handle_XSControl_TransferReader*)TR->Handle));
}

OCXSControl_TransferReader^ OCXSControl_WorkSession::TransferReader()
{
  Handle(XSControl_TransferReader) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->TransferReader();
  return gcnew OCXSControl_TransferReader(&tmp);
}

OCTransfer_TransientProcess^ OCXSControl_WorkSession::MapReader()
{
  Handle(Transfer_TransientProcess) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->MapReader();
  return gcnew OCTransfer_TransientProcess(&tmp);
}

 System::Boolean OCXSControl_WorkSession::SetMapReader(OCNaroWrappers::OCTransfer_TransientProcess^ TP)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_WorkSession*)nativeHandle))->SetMapReader(*((Handle_Transfer_TransientProcess*)TP->Handle)));
}

OCStandard_Transient^ OCXSControl_WorkSession::Result(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer mode)
{
  Handle(Standard_Transient) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->Result(*((Handle_Standard_Transient*)ent->Handle), mode);
  return gcnew OCStandard_Transient(&tmp);
}

 Standard_Integer OCXSControl_WorkSession::TransferReadOne(OCNaroWrappers::OCStandard_Transient^ ents)
{
  return (*((Handle_XSControl_WorkSession*)nativeHandle))->TransferReadOne(*((Handle_Standard_Transient*)ents->Handle));
}

 Standard_Integer OCXSControl_WorkSession::TransferReadRoots()
{
  return (*((Handle_XSControl_WorkSession*)nativeHandle))->TransferReadRoots();
}

OCInterface_InterfaceModel^ OCXSControl_WorkSession::NewModel()
{
  Handle(Interface_InterfaceModel) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->NewModel();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

OCXSControl_TransferWriter^ OCXSControl_WorkSession::TransferWriter()
{
  Handle(XSControl_TransferWriter) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->TransferWriter();
  return gcnew OCXSControl_TransferWriter(&tmp);
}

OCTransfer_FinderProcess^ OCXSControl_WorkSession::MapWriter()
{
  Handle(Transfer_FinderProcess) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->MapWriter();
  return gcnew OCTransfer_FinderProcess(&tmp);
}

 System::Boolean OCXSControl_WorkSession::SetMapWriter(OCNaroWrappers::OCTransfer_FinderProcess^ FP)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_WorkSession*)nativeHandle))->SetMapWriter(*((Handle_Transfer_FinderProcess*)FP->Handle)));
}

 void OCXSControl_WorkSession::SetModeWriteShape(Standard_Integer mode)
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->SetModeWriteShape(mode);
}

 Standard_Integer OCXSControl_WorkSession::ModeWriteShape()
{
  return (*((Handle_XSControl_WorkSession*)nativeHandle))->ModeWriteShape();
}

 OCIFSelect_ReturnStatus OCXSControl_WorkSession::TransferWriteShape(OCNaroWrappers::OCTopoDS_Shape^ shape, System::Boolean compgraph)
{
  return (OCIFSelect_ReturnStatus)((*((Handle_XSControl_WorkSession*)nativeHandle))->TransferWriteShape(*((TopoDS_Shape*)shape->Handle), OCConverter::BooleanToStandardBoolean(compgraph)));
}

OCInterface_CheckIterator^ OCXSControl_WorkSession::TransferWriteCheckList()
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->TransferWriteCheckList();
  return gcnew OCInterface_CheckIterator(tmp);
}

OCXSControl_Vars^ OCXSControl_WorkSession::Vars()
{
  Handle(XSControl_Vars) tmp = (*((Handle_XSControl_WorkSession*)nativeHandle))->Vars();
  return gcnew OCXSControl_Vars(&tmp);
}

 void OCXSControl_WorkSession::SetVars(OCNaroWrappers::OCXSControl_Vars^ newvars)
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->SetVars(*((Handle_XSControl_Vars*)newvars->Handle));
}

 void OCXSControl_WorkSession::ClearBinders()
{
  (*((Handle_XSControl_WorkSession*)nativeHandle))->ClearBinders();
}


