// File generated by CPPExt (CPP file)
//

#include "XSControl_TransferReader.h"
#include "../Converter.h"
#include "XSControl_Controller.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Interface/Interface_HGraph.h"
#include "../Dico/Dico_DictionaryOfTransient.h"
#include "../Transfer/Transfer_ActorOfTransientProcess.h"
#include "../Transfer/Transfer_TransientProcess.h"
#include "../TopTools/TopTools_HSequenceOfShape.h"
#include "../Standard/Standard_Transient.h"
#include "../Standard/Standard_Type.h"
#include "../TColStd/TColStd_HSequenceOfTransient.h"
#include "../Transfer/Transfer_ResultFromModel.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../Interface/Interface_CheckIterator.h"
#include "../Interface/Interface_Graph.h"


using namespace OCNaroWrappers;

OCXSControl_TransferReader::OCXSControl_TransferReader(Handle(XSControl_TransferReader)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_XSControl_TransferReader(*nativeHandle);
}

OCXSControl_TransferReader::OCXSControl_TransferReader() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_XSControl_TransferReader(new XSControl_TransferReader());
}

 void OCXSControl_TransferReader::SetController(OCNaroWrappers::OCXSControl_Controller^ control)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->SetController(*((Handle_XSControl_Controller*)control->Handle));
}

 void OCXSControl_TransferReader::SetActor(OCNaroWrappers::OCTransfer_ActorOfTransientProcess^ actor)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->SetActor(*((Handle_Transfer_ActorOfTransientProcess*)actor->Handle));
}

OCTransfer_ActorOfTransientProcess^ OCXSControl_TransferReader::Actor()
{
  Handle(Transfer_ActorOfTransientProcess) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->Actor();
  return gcnew OCTransfer_ActorOfTransientProcess(&tmp);
}

 void OCXSControl_TransferReader::SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->SetModel(*((Handle_Interface_InterfaceModel*)model->Handle));
}

 void OCXSControl_TransferReader::SetGraph(OCNaroWrappers::OCInterface_HGraph^ graph)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->SetGraph(*((Handle_Interface_HGraph*)graph->Handle));
}

OCInterface_InterfaceModel^ OCXSControl_TransferReader::Model()
{
  Handle(Interface_InterfaceModel) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->Model();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 void OCXSControl_TransferReader::SetContext(System::String^ name, OCNaroWrappers::OCStandard_Transient^ ctx)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->SetContext(OCConverter::StringToStandardCString(name), *((Handle_Standard_Transient*)ctx->Handle));
}

 System::Boolean OCXSControl_TransferReader::GetContext(System::String^ name, OCNaroWrappers::OCStandard_Type^ type, OCNaroWrappers::OCStandard_Transient^ ctx)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->GetContext(OCConverter::StringToStandardCString(name), *((Handle_Standard_Type*)type->Handle), *((Handle_Standard_Transient*)ctx->Handle)));
}

OCDico_DictionaryOfTransient^ OCXSControl_TransferReader::Context()
{
  Handle(Dico_DictionaryOfTransient) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->Context();
  return gcnew OCDico_DictionaryOfTransient(&tmp);
}

 void OCXSControl_TransferReader::SetFileName(System::String^ name)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->SetFileName(OCConverter::StringToStandardCString(name));
}

 System::String^ OCXSControl_TransferReader::FileName()
{
  return OCConverter::StandardCStringToString((*((Handle_XSControl_TransferReader*)nativeHandle))->FileName());
}

 void OCXSControl_TransferReader::Clear(Standard_Integer mode)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->Clear(mode);
}

OCTransfer_TransientProcess^ OCXSControl_TransferReader::TransientProcess()
{
  Handle(Transfer_TransientProcess) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->TransientProcess();
  return gcnew OCTransfer_TransientProcess(&tmp);
}

 void OCXSControl_TransferReader::SetTransientProcess(OCNaroWrappers::OCTransfer_TransientProcess^ TP)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->SetTransientProcess(*((Handle_Transfer_TransientProcess*)TP->Handle));
}

 System::Boolean OCXSControl_TransferReader::RecordResult(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->RecordResult(*((Handle_Standard_Transient*)ent->Handle)));
}

 System::Boolean OCXSControl_TransferReader::IsRecorded(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->IsRecorded(*((Handle_Standard_Transient*)ent->Handle)));
}

 System::Boolean OCXSControl_TransferReader::HasResult(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->HasResult(*((Handle_Standard_Transient*)ent->Handle)));
}

OCTColStd_HSequenceOfTransient^ OCXSControl_TransferReader::RecordedList()
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->RecordedList();
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

 System::Boolean OCXSControl_TransferReader::Skip(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->Skip(*((Handle_Standard_Transient*)ent->Handle)));
}

 System::Boolean OCXSControl_TransferReader::IsSkipped(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->IsSkipped(*((Handle_Standard_Transient*)ent->Handle)));
}

 System::Boolean OCXSControl_TransferReader::IsMarked(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->IsMarked(*((Handle_Standard_Transient*)ent->Handle)));
}

OCTransfer_ResultFromModel^ OCXSControl_TransferReader::FinalResult(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(Transfer_ResultFromModel) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->FinalResult(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTransfer_ResultFromModel(&tmp);
}

 System::String^ OCXSControl_TransferReader::FinalEntityLabel(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardCStringToString((*((Handle_XSControl_TransferReader*)nativeHandle))->FinalEntityLabel(*((Handle_Standard_Transient*)ent->Handle)));
}

 Standard_Integer OCXSControl_TransferReader::FinalEntityNumber(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return (*((Handle_XSControl_TransferReader*)nativeHandle))->FinalEntityNumber(*((Handle_Standard_Transient*)ent->Handle));
}

OCTransfer_ResultFromModel^ OCXSControl_TransferReader::ResultFromNumber(Standard_Integer num)
{
  Handle(Transfer_ResultFromModel) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->ResultFromNumber(num);
  return gcnew OCTransfer_ResultFromModel(&tmp);
}

OCStandard_Transient^ OCXSControl_TransferReader::TransientResult(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(Standard_Transient) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->TransientResult(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCStandard_Transient(&tmp);
}

OCTopoDS_Shape^ OCXSControl_TransferReader::ShapeResult(OCNaroWrappers::OCStandard_Transient^ ent)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->ShapeResult(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCXSControl_TransferReader::ClearResult(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer mode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->ClearResult(*((Handle_Standard_Transient*)ent->Handle), mode));
}

OCStandard_Transient^ OCXSControl_TransferReader::EntityFromResult(OCNaroWrappers::OCStandard_Transient^ res, Standard_Integer mode)
{
  Handle(Standard_Transient) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->EntityFromResult(*((Handle_Standard_Transient*)res->Handle), mode);
  return gcnew OCStandard_Transient(&tmp);
}

OCStandard_Transient^ OCXSControl_TransferReader::EntityFromShapeResult(OCNaroWrappers::OCTopoDS_Shape^ res, Standard_Integer mode)
{
  Handle(Standard_Transient) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->EntityFromShapeResult(*((TopoDS_Shape*)res->Handle), mode);
  return gcnew OCStandard_Transient(&tmp);
}

OCTColStd_HSequenceOfTransient^ OCXSControl_TransferReader::EntitiesFromShapeList(OCNaroWrappers::OCTopTools_HSequenceOfShape^ res, Standard_Integer mode)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->EntitiesFromShapeList(*((Handle_TopTools_HSequenceOfShape*)res->Handle), mode);
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCInterface_CheckIterator^ OCXSControl_TransferReader::CheckList(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level)
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->CheckList(*((Handle_Standard_Transient*)ent->Handle), level);
  return gcnew OCInterface_CheckIterator(tmp);
}

 System::Boolean OCXSControl_TransferReader::HasChecks(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean failsonly)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->HasChecks(*((Handle_Standard_Transient*)ent->Handle), OCConverter::BooleanToStandardBoolean(failsonly)));
}

OCTColStd_HSequenceOfTransient^ OCXSControl_TransferReader::CheckedList(OCNaroWrappers::OCStandard_Transient^ ent, OCInterface_CheckStatus withcheck, System::Boolean result)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->CheckedList(*((Handle_Standard_Transient*)ent->Handle), (Interface_CheckStatus)withcheck, OCConverter::BooleanToStandardBoolean(result));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

 System::Boolean OCXSControl_TransferReader::BeginTransfer()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->BeginTransfer());
}

 System::Boolean OCXSControl_TransferReader::Recognize(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_TransferReader*)nativeHandle))->Recognize(*((Handle_Standard_Transient*)ent->Handle)));
}

 Standard_Integer OCXSControl_TransferReader::TransferOne(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean rec)
{
  return (*((Handle_XSControl_TransferReader*)nativeHandle))->TransferOne(*((Handle_Standard_Transient*)ent->Handle), OCConverter::BooleanToStandardBoolean(rec));
}

 Standard_Integer OCXSControl_TransferReader::TransferList(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, System::Boolean rec)
{
  return (*((Handle_XSControl_TransferReader*)nativeHandle))->TransferList(*((Handle_TColStd_HSequenceOfTransient*)list->Handle), OCConverter::BooleanToStandardBoolean(rec));
}

 Standard_Integer OCXSControl_TransferReader::TransferRoots(OCNaroWrappers::OCInterface_Graph^ G)
{
  return (*((Handle_XSControl_TransferReader*)nativeHandle))->TransferRoots(*((Interface_Graph*)G->Handle));
}

 void OCXSControl_TransferReader::TransferClear(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->TransferClear(*((Handle_Standard_Transient*)ent->Handle), level);
}

 void OCXSControl_TransferReader::PrintStats(Standard_Integer what, Standard_Integer mode)
{
  (*((Handle_XSControl_TransferReader*)nativeHandle))->PrintStats(what, mode);
}

OCInterface_CheckIterator^ OCXSControl_TransferReader::LastCheckList()
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->LastCheckList();
  return gcnew OCInterface_CheckIterator(tmp);
}

OCTColStd_HSequenceOfTransient^ OCXSControl_TransferReader::LastTransferList(System::Boolean roots)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->LastTransferList(OCConverter::BooleanToStandardBoolean(roots));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCTopTools_HSequenceOfShape^ OCXSControl_TransferReader::ShapeResultList(System::Boolean rec)
{
  Handle(TopTools_HSequenceOfShape) tmp = (*((Handle_XSControl_TransferReader*)nativeHandle))->ShapeResultList(OCConverter::BooleanToStandardBoolean(rec));
  return gcnew OCTopTools_HSequenceOfShape(&tmp);
}

 void OCXSControl_TransferReader::PrintStatsProcess(OCNaroWrappers::OCTransfer_TransientProcess^ TP, Standard_Integer what, Standard_Integer mode)
{
  XSControl_TransferReader::PrintStatsProcess(*((Handle_Transfer_TransientProcess*)TP->Handle), what, mode);
}

 void OCXSControl_TransferReader::PrintStatsOnList(OCNaroWrappers::OCTransfer_TransientProcess^ TP, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, Standard_Integer what, Standard_Integer mode)
{
  XSControl_TransferReader::PrintStatsOnList(*((Handle_Transfer_TransientProcess*)TP->Handle), *((Handle_TColStd_HSequenceOfTransient*)list->Handle), what, mode);
}


