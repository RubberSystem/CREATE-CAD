// File generated by CPPExt (Transient)
//
#ifndef _XSControl_TransferReader_OCWrappers_HeaderFile
#define _XSControl_TransferReader_OCWrappers_HeaderFile

// include the wrapped class
#include <XSControl_TransferReader.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "../TColStd/TColStd_DataMapOfIntegerTransient.h"
#include "../Interface/Interface_CheckStatus.h"


namespace OCNaroWrappers
{

ref class OCXSControl_Controller;
ref class OCInterface_InterfaceModel;
ref class OCInterface_HGraph;
ref class OCDico_DictionaryOfTransient;
ref class OCTransfer_ActorOfTransientProcess;
ref class OCTransfer_TransientProcess;
ref class OCTopTools_HSequenceOfShape;
ref class OCStandard_Transient;
ref class OCStandard_Type;
ref class OCTColStd_HSequenceOfTransient;
ref class OCTransfer_ResultFromModel;
ref class OCTopoDS_Shape;
ref class OCInterface_CheckIterator;
ref class OCInterface_Graph;


//! A TransferReader performs, manages, handles results of, <br>
//!           transfers done when reading a file (i.e. from entities of an <br>
//!           InterfaceModel, to objects for Imagine) <br>
//! <br>
//!           Running is organised around basic tools : TransientProcess and <br>
//!           its Actor, results are Binders and CheckIterators. It implies <br>
//!           control by a Controller (which prepares the Actor as required) <br>
//! <br>
//!           Getting results can be done directly on TransientProcess, but <br>
//!           these are immediate "last produced" results. Each transfer of <br>
//!           an entity gives a final result, but also possible intermediate <br>
//!           data, and checks, which can be attached to sub-entities. <br>
//! <br>
//!           Hence, final results (which intermediates and checks) are <br>
//!           recorded as ResultFromModel and can be queried individually. <br>
//! <br>
//!           Some more direct access are given for results which are <br>
//!           Transient or Shapes <br>
public ref class OCXSControl_TransferReader : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCXSControl_TransferReader(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCXSControl_TransferReader(Handle(XSControl_TransferReader)* nativeHandle);

// Methods PUBLIC

//! Creates a TransferReader, empty <br>
OCXSControl_TransferReader();

//! Sets a Controller. It is required to generate the Actor. <br>
//!           Elsewhere, the Actor must be provided directly <br>
 /*instead*/  void SetController(OCNaroWrappers::OCXSControl_Controller^ control) ;

//! Sets the Actor directly : this value will be used if the <br>
//!           Controller is not set <br>
 /*instead*/  void SetActor(OCNaroWrappers::OCTransfer_ActorOfTransientProcess^ actor) ;

//! Returns the Actor, determined by the Controller, or if this <br>
//!           one is unknown, directly set. <br>
//!           Once it has been defined, it can then be edited. <br>
 /*instead*/  OCTransfer_ActorOfTransientProcess^ Actor() ;

//! Sets an InterfaceModel. This causes former results, computed <br>
//!           from another one, to be lost (see also Clear) <br>
 /*instead*/  void SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! Sets a Graph and its InterfaceModel (calls SetModel) <br>
 /*instead*/  void SetGraph(OCNaroWrappers::OCInterface_HGraph^ graph) ;

//! Returns the currently set InterfaceModel <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Sets a Context : according to receiving appli, to be <br>
//!           interpreted by the Actor <br>
 /*instead*/  void SetContext(System::String^ name, OCNaroWrappers::OCStandard_Transient^ ctx) ;

//! Returns the Context attached to a name, if set and if it is <br>
//!           Kind of the type, else a Null Handle <br>
//!           Returns True if OK, False if no Context <br>
 /*instead*/  System::Boolean GetContext(System::String^ name, OCNaroWrappers::OCStandard_Type^ type, OCNaroWrappers::OCStandard_Transient^ ctx) ;

//! Returns (modifiable) the whole definition of Context <br>
//!           Rather for internal use (ex.: preparing and setting in once) <br>
 /*instead*/  OCDico_DictionaryOfTransient^ Context() ;

//! Sets a new value for (loaded) file name <br>
 /*instead*/  void SetFileName(System::String^ name) ;

//! Returns actual value of file name <br>
 /*instead*/  System::String^ FileName() ;

//! Clears data, according mode : <br>
//!           -1 all <br>
//!            0 nothing done <br>
//!           +1 final results <br>
//!           +2 working data (model, context, transfer process) <br>
 /*instead*/  void Clear(Standard_Integer mode) ;

//! Returns the currently used TransientProcess <br>
//!           It is computed from the model by TransferReadRoots, or by <br>
//!           BeginTransferRead <br>
 /*instead*/  OCTransfer_TransientProcess^ TransientProcess() ;

//! Forces the TransientProcess <br>
//!           Remark : it also changes the Model and the Actor, from those <br>
//!           recorded in the new TransientProcess <br>
 /*instead*/  void SetTransientProcess(OCNaroWrappers::OCTransfer_TransientProcess^ TP) ;

//! Records a final result of transferring an entity <br>
//!           This result is recorded as a ResultFromModel, taken from <br>
//!           the TransientProcess <br>
//!           Returns True if a result is available, False else <br>
 /*instead*/  System::Boolean RecordResult(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns True if a final result is recorded for an entity <br>
//!           Remark that it can bring no effective result if transfer has <br>
//!           completely failed (FinalResult brings only fail messages ...) <br>
 /*instead*/  System::Boolean IsRecorded(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns True if a final result is recorded AND BRINGS AN <br>
//!           EFFECTIVE RESULT (else, it brings only fail messages) <br>
 /*instead*/  System::Boolean HasResult(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the list of entities to which a final result is <br>
//!           attached (i.e. processed by RecordResult) <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ RecordedList() ;

//! Note that an entity has been required for transfer but no <br>
//!           result at all is available (typically : case not implemented) <br>
//!           It is not an error, but it gives a specific status : Skipped <br>
//!           Returns True if done, False if <ent> is not in starting model <br>
 /*instead*/  System::Boolean Skip(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns True if an entity is noted as skipped <br>
 /*instead*/  System::Boolean IsSkipped(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns True if an entity has been asked for transfert, hence <br>
//!           it is marked, as : Recorded (a computation has ran, with or <br>
//!           without an effective result), or Skipped (case ignored) <br>
 /*instead*/  System::Boolean IsMarked(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the final result recorded for an entity, as such <br>
 /*instead*/  OCTransfer_ResultFromModel^ FinalResult(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the label attached to an entity recorded for final, <br>
//!           or an empty string if not recorded <br>
 /*instead*/  System::String^ FinalEntityLabel(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the number attached to the entity recorded for final, <br>
//!           or zero if not recorded (looks in the ResultFromModel) <br>
 /*instead*/  Standard_Integer FinalEntityNumber(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the final result recorded for a NUMBER of entity <br>
//!           (internal use). Null if out of range <br>
 /*instead*/  OCTransfer_ResultFromModel^ ResultFromNumber(Standard_Integer num) ;

//! Returns the resulting object as a Transient <br>
//!           Null Handle if no result or result not transient <br>
 /*instead*/  OCStandard_Transient^ TransientResult(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the resulting object as a Shape <br>
//!           Null Shape if no result or result not a shape <br>
 /*instead*/  OCTopoDS_Shape^ ShapeResult(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Clears recorded result for an entity, according mode <br>
//!           <mode> = -1 : true, complete, clearing (erasing result) <br>
//!           <mode> >= 0 : simple "stripping", see ResultFromModel, <br>
//!             in particular, 0 for simple internal strip, <br>
//!             10 for all but final result, <br>
//!             11 for all : just label, status and filename are kept <br>
//!           Returns True when done, False if nothing was to clear <br>
 /*instead*/  System::Boolean ClearResult(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer mode) ;

//! Returns an entity from which a given result was produced. <br>
//!           If <mode> = 0 (D), searches in last root transfers <br>
//!           If <mode> = 1,     searches in last (root & sub) transfers <br>
//!           If <mode> = 2,     searches in root recorded results <br>
//!           If <mode> = 3,     searches in all (root & sub) recordeds <br>
//!           <res> can be, either a transient object (result itself) or <br>
//!           a binder. For a binder of shape, calls EntityFromShapeResult <br>
//!           Returns a Null Handle if <res> not recorded <br>
 /*instead*/  OCStandard_Transient^ EntityFromResult(OCNaroWrappers::OCStandard_Transient^ res, Standard_Integer mode) ;

//! Returns an entity from which a given shape result was produced <br>
//!           Returns a Null Handle if <res> not recorded or not a Shape <br>
 /*instead*/  OCStandard_Transient^ EntityFromShapeResult(OCNaroWrappers::OCTopoDS_Shape^ res, Standard_Integer mode) ;

//! Returns the list of entities from which some shapes were <br>
//!           produced : it corresponds to a loop on EntityFromShapeResult, <br>
//!           but is optimised <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ EntitiesFromShapeList(OCNaroWrappers::OCTopTools_HSequenceOfShape^ res, Standard_Integer mode) ;

//! Returns the CheckList resulting from transferring <ent>, i.e. <br>
//!           stored in its recorded form ResultFromModel <br>
//!           (empty if transfer successful or not recorded ...) <br>
//! <br>
//!           If <ent> is the Model, returns the complete cumulated <br>
//!           check-list, <level> is ignored <br>
//! <br>
//!           If <ent> is an entity of the Model, <level> applies as follows <br>
//!           <level> : -1 for <ent> only, LAST transfer (TransientProcess) <br>
//!           <level> : 0  for <ent> only (D) <br>
//!                     1  for <ent> and its immediate subtransfers, if any <br>
//!                     2  for <ent> and subtransferts at all levels <br>
 /*instead*/  OCInterface_CheckIterator^ CheckList(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level) ;

//! Returns True if an entity (with a final result) has checks : <br>
//!           - failsonly = False : any kind of check message <br>
//!           - failsonly = True  : fails only <br>
//!           Returns False if <ent> is not recorded <br>
 /*instead*/  System::Boolean HasChecks(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean failsonly) ;

//! Returns the list of starting entities to which a given check <br>
//!           status is attached, IN FINAL RESULTS <br>
//!           <ent> can be an entity, or the model to query all entities <br>
//!           Below, "entities" are, either <ent> plus its sub-transferred, <br>
//!           or all the entities of the model <br>
//! <br>
//!           <check> = -2 , all entities whatever the check (see result) <br>
//!           <check> = -1 , entities with no fail (warning allowed) <br>
//!           <check> =  0 , entities with no check at all <br>
//!           <check> =  1 , entities with warning but no fail <br>
//!           <check> =  2 , entities with fail <br>
//!           <result> : if True, only entities with an attached result <br>
//!           Remark : result True and check=0 will give an empty list <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ CheckedList(OCNaroWrappers::OCStandard_Transient^ ent, OCInterface_CheckStatus withcheck, System::Boolean result) ;

//! Defines a new TransferProcess for reading transfer <br>
//!           Returns True if done, False if data are not properly defined <br>
//!           (the Model, the Actor for Read) <br>
 /*instead*/  System::Boolean BeginTransfer() ;

//! Tells if an entity is recognized as a valid candidate for <br>
//!           Transfer. Calls method Recognize from the Actor (if known) <br>
 /*instead*/  System::Boolean Recognize(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Commands the transfer on reading for an entity to data for <br>
//!           Imagine, using the selected Actor for Read <br>
//!           Returns count of transferred entities, ok or with fails (0/1) <br>
//!           If <rec> is True (D), the result is recorded by RecordResult <br>
 /*instead*/  Standard_Integer TransferOne(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean rec) ;

//! Commands the transfer on reading for a list of entities to <br>
//!           data for Imagine, using the selected Actor for Read <br>
//!           Returns count of transferred entities, ok or with fails (0/1) <br>
//!           If <rec> is True (D), the results are recorded by RecordResult <br>
 /*instead*/  Standard_Integer TransferList(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, System::Boolean rec) ;

//! Transfers the content of the current Interface Model to <br>
//!           data handled by Imagine, starting from its Roots (determined <br>
//!           by the Graph <G>),  using the selected Actor for Read <br>
//!           Returns the count of performed root transfers (i.e. 0 if none) <br>
//!           or -1 if no actor is defined <br>
 /*instead*/  Standard_Integer TransferRoots(OCNaroWrappers::OCInterface_Graph^ G) ;

//! Clears the results attached to an entity <br>
//!           if <ents> equates the starting model, clears all results <br>
 /*instead*/  void TransferClear(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level) ;

//! Prints statistics on current Trace File, according <what> and <br>
//!           <mode>.  See PrintStatsProcess for details <br>
 /*instead*/  void PrintStats(Standard_Integer what, Standard_Integer mode) ;

//! Returns the CheckList resulting from last TransferRead <br>
//!           i.e. from TransientProcess itself, recorded from last Clear <br>
 /*instead*/  OCInterface_CheckIterator^ LastCheckList() ;

//! Returns the list of entities recorded as lastly transferred <br>
//!           i.e. from TransientProcess itself, recorded from last Clear <br>
//!           If <roots> is True , considers only roots of transfer <br>
//!           If <roots> is False, considers all entities bound with result <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ LastTransferList(System::Boolean roots) ;

//! Returns a list of result Shapes <br>
//!           If <rec> is True , sees RecordedList <br>
//!           If <rec> is False, sees LastTransferList (last ROOT transfers) <br>
//!           For each one, if it is a Shape, it is cumulated to the list <br>
//!           If no Shape is found, returns an empty Sequence <br>
 /*instead*/  OCTopTools_HSequenceOfShape^ ShapeResultList(System::Boolean rec) ;

//! This routines prints statistics about a TransientProcess <br>
//!           It can be called, by a TransferReader, or isolately <br>
//!           Prints are done on the default trace file <br>
//!           <what> defines what kind of statistics are to be printed : <br>
//!           0 : basic figures <br>
//!           1 : root results <br>
//!           2 : all recorded (roots, intermediate, checked entities) <br>
//!           3 : abnormal records <br>
//!           4 : check messages (warnings and fails) <br>
//!           5 : fail messages <br>
//! <br>
//!           <mode> is used according <what> : <br>
//!           <what> = 0 : <mode> is ignored <br>
//!           <what> = 1,2,3 : <mode> as follows : <br>
//!           0 (D) : just lists numbers of concerned entities in the model <br>
//!           1 : for each entity, gives number,label, type and result <br>
//!                  type and/or status (fail/warning...) <br>
//!           2 : for each entity, gives maximal information (i.e. checks) <br>
//!           3 : counts per type of starting entity (class type) <br>
//!           4 : counts per result type and/or status <br>
//!           5 : counts per couple (starting type / result type/status) <br>
//!           6 : idem plus gives for each item, the list of numbers of <br>
//!                  entities in the starting model <br>
//! <br>
//!           <what> = 4,5 : modes relays on an enum PrintCount : <br>
//!           0 (D) : ItemsByEntity (sequential list by entity) <br>
//!           1 : CountByItem <br>
//!           2 : ShortByItem       (count + 5 first numbers) <br>
//!           3 : ListByItem        (count + entity numbers) <br>
//!           4 : EntitiesByItem    (count + entity numbers and labels) <br>
static /*instead*/  void PrintStatsProcess(OCNaroWrappers::OCTransfer_TransientProcess^ TP, Standard_Integer what, Standard_Integer mode) ;

//! Works as PrintStatsProcess, but displays data only on the <br>
//!           entities which are in <list> (filter) <br>
static /*instead*/  void PrintStatsOnList(OCNaroWrappers::OCTransfer_TransientProcess^ TP, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, Standard_Integer what, Standard_Integer mode) ;

~OCXSControl_TransferReader()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
