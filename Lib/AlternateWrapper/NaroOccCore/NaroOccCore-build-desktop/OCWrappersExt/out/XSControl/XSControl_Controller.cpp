// File generated by CPPExt (CPP file)
//

#include "XSControl_Controller.h"
#include "../Converter.h"
#include "../IFSelect/IFSelect_WorkLibrary.h"
#include "../Interface/Interface_Protocol.h"
#include "../IFSelect/IFSelect_Signature.h"
#include "../Transfer/Transfer_ActorOfTransientProcess.h"
#include "../Transfer/Transfer_ActorOfFinderProcess.h"
#include "../Dico/Dico_DictionaryOfTransient.h"
#include "../TColStd/TColStd_HSequenceOfHAsciiString.h"
#include "../Interface/Interface_HArray1OfHAsciiString.h"
#include "XSControl_WorkSession.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Standard/Standard_Transient.h"
#include "../Transfer/Transfer_FinderProcess.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../Interface/Interface_CheckIterator.h"


using namespace OCNaroWrappers;

OCXSControl_Controller::OCXSControl_Controller(Handle(XSControl_Controller)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_XSControl_Controller(*nativeHandle);
}

OCXSControl_Controller::OCXSControl_Controller(System::String^ longname, System::String^ shortname) : OCMMgt_TShared((OCDummy^)nullptr)

{}

 void OCXSControl_Controller::SetNames(System::String^ longname, System::String^ shortname)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->SetNames(OCConverter::StringToStandardCString(longname), OCConverter::StringToStandardCString(shortname));
}

 void OCXSControl_Controller::AutoRecord()
{
  (*((Handle_XSControl_Controller*)nativeHandle))->AutoRecord();
}

 void OCXSControl_Controller::Record(System::String^ name)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->Record(OCConverter::StringToStandardCString(name));
}

OCXSControl_Controller^ OCXSControl_Controller::Recorded(System::String^ name)
{
  Handle(XSControl_Controller) tmp = XSControl_Controller::Recorded(OCConverter::StringToStandardCString(name));
  return gcnew OCXSControl_Controller(&tmp);
}

OCTColStd_HSequenceOfHAsciiString^ OCXSControl_Controller::ListRecorded(Standard_Integer mode)
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = XSControl_Controller::ListRecorded(mode);
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}

 System::String^ OCXSControl_Controller::Name(System::Boolean rsc)
{
  return OCConverter::StandardCStringToString((*((Handle_XSControl_Controller*)nativeHandle))->Name(OCConverter::BooleanToStandardBoolean(rsc)));
}

 OCIFSelect_Profile^ OCXSControl_Controller::Profile()
{
  return (*((Handle_XSControl_Controller*)nativeHandle))->Profile();
}

 void OCXSControl_Controller::DefineProfile(System::String^ confname)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->DefineProfile(OCConverter::StringToStandardCString(confname));
}

 System::Boolean OCXSControl_Controller::SetProfile(System::String^ confname)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->SetProfile(OCConverter::StringToStandardCString(confname)));
}

 System::Boolean OCXSControl_Controller::SettingProfile(System::String^ confname)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->SettingProfile(OCConverter::StringToStandardCString(confname)));
}

 System::Boolean OCXSControl_Controller::ApplyProfile(OCNaroWrappers::OCXSControl_WorkSession^ WS, System::String^ confname)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->ApplyProfile(*((Handle_XSControl_WorkSession*)WS->Handle), OCConverter::StringToStandardCString(confname)));
}

 System::Boolean OCXSControl_Controller::ApplyingProfile(OCNaroWrappers::OCXSControl_WorkSession^ WS, System::String^ confname)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->ApplyingProfile(*((Handle_XSControl_WorkSession*)WS->Handle), OCConverter::StringToStandardCString(confname)));
}

OCInterface_Protocol^ OCXSControl_Controller::Protocol()
{
  Handle(Interface_Protocol) tmp = (*((Handle_XSControl_Controller*)nativeHandle))->Protocol();
  return gcnew OCInterface_Protocol(&tmp);
}

OCIFSelect_Signature^ OCXSControl_Controller::SignType()
{
  Handle(IFSelect_Signature) tmp = (*((Handle_XSControl_Controller*)nativeHandle))->SignType();
  return gcnew OCIFSelect_Signature(&tmp);
}

OCIFSelect_WorkLibrary^ OCXSControl_Controller::WorkLibrary()
{
  Handle(IFSelect_WorkLibrary) tmp = (*((Handle_XSControl_Controller*)nativeHandle))->WorkLibrary();
  return gcnew OCIFSelect_WorkLibrary(&tmp);
}

OCTransfer_ActorOfFinderProcess^ OCXSControl_Controller::ActorWrite()
{
  Handle(Transfer_ActorOfFinderProcess) tmp = (*((Handle_XSControl_Controller*)nativeHandle))->ActorWrite();
  return gcnew OCTransfer_ActorOfFinderProcess(&tmp);
}

 void OCXSControl_Controller::UpdateStatics(Standard_Integer mode, System::String^ criter)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->UpdateStatics(mode, OCConverter::StringToStandardCString(criter));
}

 void OCXSControl_Controller::SetModeWrite(Standard_Integer modemin, Standard_Integer modemax, System::Boolean shape)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->SetModeWrite(modemin, modemax, OCConverter::BooleanToStandardBoolean(shape));
}

 void OCXSControl_Controller::SetModeWriteHelp(Standard_Integer modetrans, System::String^ help, System::Boolean shape)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->SetModeWriteHelp(modetrans, OCConverter::StringToStandardCString(help), OCConverter::BooleanToStandardBoolean(shape));
}

 System::Boolean OCXSControl_Controller::ModeWriteBounds(Standard_Integer& modemin, Standard_Integer& modemax, System::Boolean shape)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->ModeWriteBounds(modemin, modemax, OCConverter::BooleanToStandardBoolean(shape)));
}

 System::Boolean OCXSControl_Controller::IsModeWrite(Standard_Integer modetrans, System::Boolean shape)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->IsModeWrite(modetrans, OCConverter::BooleanToStandardBoolean(shape)));
}

 System::String^ OCXSControl_Controller::ModeWriteHelp(Standard_Integer modetrans, System::Boolean shape)
{
  return OCConverter::StandardCStringToString((*((Handle_XSControl_Controller*)nativeHandle))->ModeWriteHelp(modetrans, OCConverter::BooleanToStandardBoolean(shape)));
}

 System::Boolean OCXSControl_Controller::RecognizeWriteTransient(OCNaroWrappers::OCStandard_Transient^ obj, Standard_Integer modetrans)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->RecognizeWriteTransient(*((Handle_Standard_Transient*)obj->Handle), modetrans));
}

 OCIFSelect_ReturnStatus OCXSControl_Controller::TransferWriteTransient(OCNaroWrappers::OCStandard_Transient^ obj, OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCInterface_InterfaceModel^ model, Standard_Integer modetrans)
{
  return (OCIFSelect_ReturnStatus)((*((Handle_XSControl_Controller*)nativeHandle))->TransferWriteTransient(*((Handle_Standard_Transient*)obj->Handle), *((Handle_Transfer_FinderProcess*)FP->Handle), *((Handle_Interface_InterfaceModel*)model->Handle), modetrans));
}

 System::Boolean OCXSControl_Controller::RecognizeWriteShape(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Integer modetrans)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->RecognizeWriteShape(*((TopoDS_Shape*)shape->Handle), modetrans));
}

 OCIFSelect_ReturnStatus OCXSControl_Controller::TransferWriteShape(OCNaroWrappers::OCTopoDS_Shape^ shape, OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCInterface_InterfaceModel^ model, Standard_Integer modetrans)
{
  return (OCIFSelect_ReturnStatus)((*((Handle_XSControl_Controller*)nativeHandle))->TransferWriteShape(*((TopoDS_Shape*)shape->Handle), *((Handle_Transfer_FinderProcess*)FP->Handle), *((Handle_Interface_InterfaceModel*)model->Handle), modetrans));
}

OCStandard_Transient^ OCXSControl_Controller::ClusterContext(OCNaroWrappers::OCXSControl_WorkSession^ WS)
{
  Handle(Standard_Transient) tmp = (*((Handle_XSControl_Controller*)nativeHandle))->ClusterContext(*((Handle_XSControl_WorkSession*)WS->Handle));
  return gcnew OCStandard_Transient(&tmp);
}

OCInterface_CheckIterator^ OCXSControl_Controller::ResolveCluster(OCNaroWrappers::OCXSControl_WorkSession^ WS, OCNaroWrappers::OCStandard_Transient^ context)
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = (*((Handle_XSControl_Controller*)nativeHandle))->ResolveCluster(*((Handle_XSControl_WorkSession*)WS->Handle), *((Handle_Standard_Transient*)context->Handle));
  return gcnew OCInterface_CheckIterator(tmp);
}

 void OCXSControl_Controller::AddControlItem(OCNaroWrappers::OCStandard_Transient^ item, System::String^ name)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->AddControlItem(*((Handle_Standard_Transient*)item->Handle), OCConverter::StringToStandardCString(name));
}

OCStandard_Transient^ OCXSControl_Controller::ControlItem(System::String^ name)
{
  Handle(Standard_Transient) tmp = (*((Handle_XSControl_Controller*)nativeHandle))->ControlItem(OCConverter::StringToStandardCString(name));
  return gcnew OCStandard_Transient(&tmp);
}

 void OCXSControl_Controller::TraceStatic(System::String^ name, Standard_Integer use)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->TraceStatic(OCConverter::StringToStandardCString(name), use);
}

 void OCXSControl_Controller::AddSessionItem(OCNaroWrappers::OCStandard_Transient^ item, System::String^ name, System::String^ setapplied)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->AddSessionItem(*((Handle_Standard_Transient*)item->Handle), OCConverter::StringToStandardCString(name), OCConverter::StringToStandardCString(setapplied));
}

OCStandard_Transient^ OCXSControl_Controller::SessionItem(System::String^ name)
{
  Handle(Standard_Transient) tmp = (*((Handle_XSControl_Controller*)nativeHandle))->SessionItem(OCConverter::StringToStandardCString(name));
  return gcnew OCStandard_Transient(&tmp);
}

 System::Boolean OCXSControl_Controller::IsApplied(OCNaroWrappers::OCStandard_Transient^ item)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_XSControl_Controller*)nativeHandle))->IsApplied(*((Handle_Standard_Transient*)item->Handle)));
}

 void OCXSControl_Controller::Customise(OCNaroWrappers::OCXSControl_WorkSession^ WS)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->Customise(*((Handle_XSControl_WorkSession*)WS->Handle));
}

 void OCXSControl_Controller::Customising(OCNaroWrappers::OCXSControl_WorkSession^ WS)
{
  (*((Handle_XSControl_Controller*)nativeHandle))->Customising(*((Handle_XSControl_WorkSession*)WS->Handle));
}

OCDico_DictionaryOfTransient^ OCXSControl_Controller::AdaptorSession()
{
  Handle(Dico_DictionaryOfTransient) tmp = (*((Handle_XSControl_Controller*)nativeHandle))->AdaptorSession();
  return gcnew OCDico_DictionaryOfTransient(&tmp);
}


