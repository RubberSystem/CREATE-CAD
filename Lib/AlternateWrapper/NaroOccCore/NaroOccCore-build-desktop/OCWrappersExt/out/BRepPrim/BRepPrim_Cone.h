// File generated by CPPExt (MPV)
//
#ifndef _BRepPrim_Cone_OCWrappers_HeaderFile
#define _BRepPrim_Cone_OCWrappers_HeaderFile

// include native header
#include <BRepPrim_Cone.hxx>
#include "../Converter.h"

#include "BRepPrim_Revolution.h"

#include "BRepPrim_Revolution.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2;
ref class OCgp_Pnt;
ref class OCTopoDS_Face;


//! Implement the cone primitive. <br>
public ref class OCBRepPrim_Cone  : public OCBRepPrim_Revolution {

protected:
  // dummy constructor;
  OCBRepPrim_Cone(OCDummy^) : OCBRepPrim_Revolution((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepPrim_Cone(BRepPrim_Cone* nativeHandle);

// Methods PUBLIC

//! the STEP definition <br>
//!          Angle = semi-angle of the cone <br>
//!          Position : the coordinate system <br>
//!          Height : height of the cone. <br>
//!          Radius : radius of truncated face at z = 0 <br>
//! <br>
//!          The apex is on z < 0 <br>
//! <br>
//!          Errors : Height < Resolution <br>
//!                    Angle < Resolution / Height <br>
//!                    Angle > PI/2 - Resolution / Height <br>
OCBRepPrim_Cone(Standard_Real Angle, OCNaroWrappers::OCgp_Ax2^ Position, Standard_Real Height, Standard_Real Radius);

//! infinite cone at origin on Z negative <br>
OCBRepPrim_Cone(Standard_Real Angle);

//! infinite cone at Apex on Z negative <br>
OCBRepPrim_Cone(Standard_Real Angle, OCNaroWrappers::OCgp_Pnt^ Apex);

//! infinite cone with Axes <br>
OCBRepPrim_Cone(Standard_Real Angle, OCNaroWrappers::OCgp_Ax2^ Axes);

//! create a  Cone at origin  on Z axis, of height  H, <br>
//!          radius R1 at Z = 0, R2 at  Z = H, X is  the origin <br>
//!          of angles.  If R1 or  R2 is 0   there is  an apex. <br>
//!          Otherwise, it is a truncated cone. <br>
//! <br>
//!          Error  : R1 and R2  < Resolution <br>
//!                   R1 or R2 negative <br>
//!                   Abs(R1-R2) < Resolution <br>
//!                   H < Resolution <br>
//!                   H negative <br>
OCBRepPrim_Cone(Standard_Real R1, Standard_Real R2, Standard_Real H);

//! same as above but at a given point <br>
OCBRepPrim_Cone(OCNaroWrappers::OCgp_Pnt^ Center, Standard_Real R1, Standard_Real R2, Standard_Real H);

//! same as above with given axes system. <br>
OCBRepPrim_Cone(OCNaroWrappers::OCgp_Ax2^ Axes, Standard_Real R1, Standard_Real R2, Standard_Real H);

//! The surface normal should be directed  towards the <br>
//!          outside. <br>
virtual /*instead*/  OCTopoDS_Face^ MakeEmptyLateralFace() override;

~OCBRepPrim_Cone()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
