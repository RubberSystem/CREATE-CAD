// File generated by CPPExt (MPV)
//
#ifndef _BRepPrim_Revolution_OCWrappers_HeaderFile
#define _BRepPrim_Revolution_OCWrappers_HeaderFile

// include native header
#include <BRepPrim_Revolution.hxx>
#include "../Converter.h"

#include "BRepPrim_OneAxis.h"

#include "BRepPrim_OneAxis.h"


namespace OCNaroWrappers
{

ref class OCGeom_Curve;
ref class OCGeom2d_Curve;
ref class OCgp_Ax2;
ref class OCTopoDS_Face;
ref class OCTopoDS_Edge;
ref class OCgp_Pnt2d;


//! Implement  the OneAxis algoritm   for a revolution <br>
//!          surface. <br>
public ref class OCBRepPrim_Revolution  : public OCBRepPrim_OneAxis {

protected:
  // dummy constructor;
  OCBRepPrim_Revolution(OCDummy^) : OCBRepPrim_OneAxis((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepPrim_Revolution(BRepPrim_Revolution* nativeHandle);

// Methods PUBLIC

//! Create a  revolution body <M>  is the  meridian nd <br>
//!          must   be in the XZ  plane   of <A>. <PM>  is  the <br>
//!          meridian in the XZ plane. <br>
OCBRepPrim_Revolution(OCNaroWrappers::OCgp_Ax2^ A, Standard_Real VMin, Standard_Real VMax, OCNaroWrappers::OCGeom_Curve^ M, OCNaroWrappers::OCGeom2d_Curve^ PM);

//! The surface normal should be directed  towards the <br>
//!          outside. <br>
virtual /*instead*/  OCTopoDS_Face^ MakeEmptyLateralFace() ;

//! Returns  an  edge with  a 3D curve   made from the <br>
//!          meridian  in the XZ  plane rotated by <Ang> around <br>
//!          the Z-axis. Ang may be 0 or myAngle. <br>
virtual /*instead*/  OCTopoDS_Edge^ MakeEmptyMeridianEdge(Standard_Real Ang) ;

//! Returns the meridian point at parameter <V> in the <br>
//!          plane XZ. <br>
virtual /*instead*/  OCgp_Pnt2d^ MeridianValue(Standard_Real V) ;

//! Sets the  parametric urve of  the edge <E>  in the <br>
//!          face <F>   to be  the  2d  representation  of  the <br>
//!          meridian. <br>
virtual /*instead*/  void SetMeridianPCurve(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F) ;

~OCBRepPrim_Revolution()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
