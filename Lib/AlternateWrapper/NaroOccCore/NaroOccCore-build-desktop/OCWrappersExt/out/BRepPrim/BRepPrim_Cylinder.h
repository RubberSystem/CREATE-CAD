// File generated by CPPExt (MPV)
//
#ifndef _BRepPrim_Cylinder_OCWrappers_HeaderFile
#define _BRepPrim_Cylinder_OCWrappers_HeaderFile

// include native header
#include <BRepPrim_Cylinder.hxx>
#include "../Converter.h"

#include "BRepPrim_Revolution.h"

#include "BRepPrim_Revolution.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2;
ref class OCgp_Pnt;
ref class OCTopoDS_Face;


//! Cylinder primitive. <br>
public ref class OCBRepPrim_Cylinder  : public OCBRepPrim_Revolution {

protected:
  // dummy constructor;
  OCBRepPrim_Cylinder(OCDummy^) : OCBRepPrim_Revolution((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepPrim_Cylinder(BRepPrim_Cylinder* nativeHandle);

// Methods PUBLIC

//! the STEP definition <br>
//!          Position : center of a Face and Axis <br>
//!          Radius : radius of cylinder <br>
//!          Height : distance between faces <br>
//!                   on positive side <br>
//! <br>
//!          Errors : Height < Resolution <br>
//!                   Radius < Resolution <br>
OCBRepPrim_Cylinder(OCNaroWrappers::OCgp_Ax2^ Position, Standard_Real Radius, Standard_Real Height);

//! infinite Cylinder at origin on Z negative <br>
OCBRepPrim_Cylinder(Standard_Real Radius);

//! infinite Cylinder at Center on Z negative <br>
OCBRepPrim_Cylinder(OCNaroWrappers::OCgp_Pnt^ Center, Standard_Real Radius);

//! infinite Cylinder at Axes on Z negative <br>
OCBRepPrim_Cylinder(OCNaroWrappers::OCgp_Ax2^ Axes, Standard_Real Radius);

//! create a Cylinder  at origin on Z  axis, of <br>
//!          height H and radius R <br>
//!          Error  : Radius  < Resolution <br>
//!                   H < Resolution <br>
//!                   H negative <br>
OCBRepPrim_Cylinder(Standard_Real R, Standard_Real H);

//! same as above but at a given point <br>
OCBRepPrim_Cylinder(OCNaroWrappers::OCgp_Pnt^ Center, Standard_Real R, Standard_Real H);

//! The surface normal should be directed  towards the <br>
//!          outside. <br>
virtual /*instead*/  OCTopoDS_Face^ MakeEmptyLateralFace() override;

~OCBRepPrim_Cylinder()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
