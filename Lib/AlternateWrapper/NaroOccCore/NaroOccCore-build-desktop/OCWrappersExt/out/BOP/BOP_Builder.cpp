// File generated by CPPExt (CPP file)
//

#include "BOP_Builder.h"
#include "../Converter.h"
#include "BOP_HistoryCollector.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../BOPTools/BOPTools_DSFiller.h"
#include "../TopTools/TopTools_ListOfShape.h"


using namespace OCNaroWrappers;

OCBOP_Builder::OCBOP_Builder(BOP_Builder* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBOP_Builder::OCBOP_Builder() 
{}

 void OCBOP_Builder::SetShapes(OCNaroWrappers::OCTopoDS_Shape^ aS1, OCNaroWrappers::OCTopoDS_Shape^ aS2)
{
  ((BOP_Builder*)nativeHandle)->SetShapes(*((TopoDS_Shape*)aS1->Handle), *((TopoDS_Shape*)aS2->Handle));
}

 void OCBOP_Builder::SetOperation(OCBOP_Operation anOp)
{
  ((BOP_Builder*)nativeHandle)->SetOperation((BOP_Operation)anOp);
}

 void OCBOP_Builder::SetManifoldFlag(System::Boolean aFlag)
{
  ((BOP_Builder*)nativeHandle)->SetManifoldFlag(OCConverter::BooleanToStandardBoolean(aFlag));
}

OCTopoDS_Shape^ OCBOP_Builder::Shape1()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BOP_Builder*)nativeHandle)->Shape1();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBOP_Builder::Shape2()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BOP_Builder*)nativeHandle)->Shape2();
  return gcnew OCTopoDS_Shape(tmp);
}

 OCBOP_Operation OCBOP_Builder::Operation()
{
  return (OCBOP_Operation)(((BOP_Builder*)nativeHandle)->Operation());
}

 System::Boolean OCBOP_Builder::ManifoldFlag()
{
  return OCConverter::StandardBooleanToBoolean(((BOP_Builder*)nativeHandle)->ManifoldFlag());
}

 System::Boolean OCBOP_Builder::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((BOP_Builder*)nativeHandle)->IsDone());
}

 Standard_Integer OCBOP_Builder::ErrorStatus()
{
  return ((BOP_Builder*)nativeHandle)->ErrorStatus();
}

OCTopoDS_Shape^ OCBOP_Builder::Result()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BOP_Builder*)nativeHandle)->Result();
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCBOP_Builder::Do()
{
  ((BOP_Builder*)nativeHandle)->Do();
}

 void OCBOP_Builder::DoWithFiller(OCNaroWrappers::OCBOPTools_DSFiller^ aDSF)
{
  ((BOP_Builder*)nativeHandle)->DoWithFiller(*((BOPTools_DSFiller*)aDSF->Handle));
}

 void OCBOP_Builder::BuildResult()
{
  ((BOP_Builder*)nativeHandle)->BuildResult();
}

 void OCBOP_Builder::Destroy()
{
  ((BOP_Builder*)nativeHandle)->Destroy();
}

 void OCBOP_Builder::SortTypes(OCTopAbs_ShapeEnum& aType1, OCTopAbs_ShapeEnum& aType2)
{
  BOP_Builder::SortTypes((TopAbs_ShapeEnum&)aType1, (TopAbs_ShapeEnum&)aType2);
}

OCTopTools_ListOfShape^ OCBOP_Builder::Modified(OCNaroWrappers::OCTopoDS_Shape^ aS)
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BOP_Builder*)nativeHandle)->Modified(*((TopoDS_Shape*)aS->Handle));
  return gcnew OCTopTools_ListOfShape(tmp);
}

 System::Boolean OCBOP_Builder::IsDeleted(OCNaroWrappers::OCTopoDS_Shape^ aS)
{
  return OCConverter::StandardBooleanToBoolean(((BOP_Builder*)nativeHandle)->IsDeleted(*((TopoDS_Shape*)aS->Handle)));
}

OCTopTools_ListOfShape^ OCBOP_Builder::SectionEdges()
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BOP_Builder*)nativeHandle)->SectionEdges();
  return gcnew OCTopTools_ListOfShape(tmp);
}

 void OCBOP_Builder::SetHistoryCollector(OCNaroWrappers::OCBOP_HistoryCollector^ theHistory)
{
  ((BOP_Builder*)nativeHandle)->SetHistoryCollector(*((Handle_BOP_HistoryCollector*)theHistory->Handle));
}

OCBOP_HistoryCollector^ OCBOP_Builder::GetHistoryCollector()
{
  Handle(BOP_HistoryCollector) tmp = ((BOP_Builder*)nativeHandle)->GetHistoryCollector();
  return gcnew OCBOP_HistoryCollector(&tmp);
}


