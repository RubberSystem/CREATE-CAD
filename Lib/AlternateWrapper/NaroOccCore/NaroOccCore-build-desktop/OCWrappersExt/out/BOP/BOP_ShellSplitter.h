// File generated by CPPExt (MPV)
//
#ifndef _BOP_ShellSplitter_OCWrappers_HeaderFile
#define _BOP_ShellSplitter_OCWrappers_HeaderFile

// include native header
#include <BOP_ShellSplitter.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Shell.h"
#include "../BOPTColStd/BOPTColStd_ListOfListOfShape.h"
#include "BOP_IndexedDataMapOfEdgeListFaceInfo.h"
#include "../TopTools/TopTools_ListOfShape.h"


namespace OCNaroWrappers
{

ref class OCTopTools_ListOfShape;
ref class OCTopoDS_Shell;
ref class OCBOPTColStd_ListOfListOfShape;



//!  the algorithm to split (multiconnexed) <br>
//!  shells on a solid onto biconnexed shells <br>
//!  when each edge is shared by only two or one <br>
//!   faces <br>
public ref class OCBOP_ShellSplitter  {

protected:
  BOP_ShellSplitter* nativeHandle;
  OCBOP_ShellSplitter(OCDummy^) {};

public:
  property BOP_ShellSplitter* Handle
  {
    BOP_ShellSplitter* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBOP_ShellSplitter(BOP_ShellSplitter* nativeHandle);

// Methods PUBLIC


//! Empty constructor; <br>
OCBOP_ShellSplitter();


//! Perform the algorithm using the  list of shapes <aLE> as data <br>
 /*instead*/  void DoWithListOfEdges(OCNaroWrappers::OCTopTools_ListOfShape^ aLE) ;


//! Modifier <br>
 /*instead*/  void SetShell(OCNaroWrappers::OCTopoDS_Shell^ aShell) ;


//! Selector <br>
 /*instead*/  OCTopoDS_Shell^ Shell() ;


//! Perform the algorithm using the shell as data <br>
 /*instead*/  void DoWithShell() ;


//! Returns TRUE if the source shell is valid and <br>
//! there  is  nothing to correct <br>
 /*instead*/  System::Boolean IsNothingToDo() ;


//! Returns TRUE if the algorithm was performed <br>
//! successfuly <br>
 /*instead*/  System::Boolean IsDone() ;


//! Selector <br>
 /*instead*/  OCBOPTColStd_ListOfListOfShape^ Shapes() ;

~OCBOP_ShellSplitter()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
