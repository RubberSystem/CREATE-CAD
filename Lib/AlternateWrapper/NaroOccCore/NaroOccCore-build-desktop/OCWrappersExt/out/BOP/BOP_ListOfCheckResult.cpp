// File generated by CPPExt (CPP file)
//

#include "BOP_ListOfCheckResult.h"
#include "../Converter.h"
#include "BOP_ListIteratorOfListOfCheckResult.h"
#include "BOP_CheckResult.h"
#include "BOP_ListNodeOfListOfCheckResult.h"


using namespace OCNaroWrappers;

OCBOP_ListOfCheckResult::OCBOP_ListOfCheckResult(BOP_ListOfCheckResult* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBOP_ListOfCheckResult::OCBOP_ListOfCheckResult() 
{
  nativeHandle = new BOP_ListOfCheckResult();
}

 void OCBOP_ListOfCheckResult::Assign(OCNaroWrappers::OCBOP_ListOfCheckResult^ Other)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->Assign(*((BOP_ListOfCheckResult*)Other->Handle));
}

 Standard_Integer OCBOP_ListOfCheckResult::Extent()
{
  return ((BOP_ListOfCheckResult*)nativeHandle)->Extent();
}

 System::Boolean OCBOP_ListOfCheckResult::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((BOP_ListOfCheckResult*)nativeHandle)->IsEmpty());
}

 void OCBOP_ListOfCheckResult::Prepend(OCNaroWrappers::OCBOP_CheckResult^ I)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->Prepend(*((BOP_CheckResult*)I->Handle));
}

 void OCBOP_ListOfCheckResult::Prepend(OCNaroWrappers::OCBOP_CheckResult^ I, OCNaroWrappers::OCBOP_ListIteratorOfListOfCheckResult^ theIt)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->Prepend(*((BOP_CheckResult*)I->Handle), *((BOP_ListIteratorOfListOfCheckResult*)theIt->Handle));
}

 void OCBOP_ListOfCheckResult::Prepend(OCNaroWrappers::OCBOP_ListOfCheckResult^ Other)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->Prepend(*((BOP_ListOfCheckResult*)Other->Handle));
}

 void OCBOP_ListOfCheckResult::Append(OCNaroWrappers::OCBOP_CheckResult^ I)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->Append(*((BOP_CheckResult*)I->Handle));
}

 void OCBOP_ListOfCheckResult::Append(OCNaroWrappers::OCBOP_CheckResult^ I, OCNaroWrappers::OCBOP_ListIteratorOfListOfCheckResult^ theIt)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->Append(*((BOP_CheckResult*)I->Handle), *((BOP_ListIteratorOfListOfCheckResult*)theIt->Handle));
}

 void OCBOP_ListOfCheckResult::Append(OCNaroWrappers::OCBOP_ListOfCheckResult^ Other)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->Append(*((BOP_ListOfCheckResult*)Other->Handle));
}

OCBOP_CheckResult^ OCBOP_ListOfCheckResult::First()
{
  BOP_CheckResult* tmp = new BOP_CheckResult();
  *tmp = ((BOP_ListOfCheckResult*)nativeHandle)->First();
  return gcnew OCBOP_CheckResult(tmp);
}

OCBOP_CheckResult^ OCBOP_ListOfCheckResult::Last()
{
  BOP_CheckResult* tmp = new BOP_CheckResult();
  *tmp = ((BOP_ListOfCheckResult*)nativeHandle)->Last();
  return gcnew OCBOP_CheckResult(tmp);
}

 void OCBOP_ListOfCheckResult::RemoveFirst()
{
  ((BOP_ListOfCheckResult*)nativeHandle)->RemoveFirst();
}

 void OCBOP_ListOfCheckResult::Remove(OCNaroWrappers::OCBOP_ListIteratorOfListOfCheckResult^ It)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->Remove(*((BOP_ListIteratorOfListOfCheckResult*)It->Handle));
}

 void OCBOP_ListOfCheckResult::InsertBefore(OCNaroWrappers::OCBOP_CheckResult^ I, OCNaroWrappers::OCBOP_ListIteratorOfListOfCheckResult^ It)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->InsertBefore(*((BOP_CheckResult*)I->Handle), *((BOP_ListIteratorOfListOfCheckResult*)It->Handle));
}

 void OCBOP_ListOfCheckResult::InsertBefore(OCNaroWrappers::OCBOP_ListOfCheckResult^ Other, OCNaroWrappers::OCBOP_ListIteratorOfListOfCheckResult^ It)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->InsertBefore(*((BOP_ListOfCheckResult*)Other->Handle), *((BOP_ListIteratorOfListOfCheckResult*)It->Handle));
}

 void OCBOP_ListOfCheckResult::InsertAfter(OCNaroWrappers::OCBOP_CheckResult^ I, OCNaroWrappers::OCBOP_ListIteratorOfListOfCheckResult^ It)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->InsertAfter(*((BOP_CheckResult*)I->Handle), *((BOP_ListIteratorOfListOfCheckResult*)It->Handle));
}

 void OCBOP_ListOfCheckResult::InsertAfter(OCNaroWrappers::OCBOP_ListOfCheckResult^ Other, OCNaroWrappers::OCBOP_ListIteratorOfListOfCheckResult^ It)
{
  ((BOP_ListOfCheckResult*)nativeHandle)->InsertAfter(*((BOP_ListOfCheckResult*)Other->Handle), *((BOP_ListIteratorOfListOfCheckResult*)It->Handle));
}


