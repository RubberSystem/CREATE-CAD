// File generated by CPPExt (CPP file)
//

#include "BOP_FaceInfo.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Dir.h"


using namespace OCNaroWrappers;

OCBOP_FaceInfo::OCBOP_FaceInfo(BOP_FaceInfo* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBOP_FaceInfo::OCBOP_FaceInfo() 
{
  nativeHandle = new BOP_FaceInfo();
}

 void OCBOP_FaceInfo::SetFace(OCNaroWrappers::OCTopoDS_Face^ aF)
{
  ((BOP_FaceInfo*)nativeHandle)->SetFace(*((TopoDS_Face*)aF->Handle));
}

 void OCBOP_FaceInfo::SetPassed(System::Boolean aFlag)
{
  ((BOP_FaceInfo*)nativeHandle)->SetPassed(OCConverter::BooleanToStandardBoolean(aFlag));
}

 void OCBOP_FaceInfo::SetPOnEdge(OCNaroWrappers::OCgp_Pnt^ aP)
{
  ((BOP_FaceInfo*)nativeHandle)->SetPOnEdge(*((gp_Pnt*)aP->Handle));
}

 void OCBOP_FaceInfo::SetPInFace(OCNaroWrappers::OCgp_Pnt^ aP)
{
  ((BOP_FaceInfo*)nativeHandle)->SetPInFace(*((gp_Pnt*)aP->Handle));
}

 void OCBOP_FaceInfo::SetPInFace2D(OCNaroWrappers::OCgp_Pnt2d^ aP)
{
  ((BOP_FaceInfo*)nativeHandle)->SetPInFace2D(*((gp_Pnt2d*)aP->Handle));
}

 void OCBOP_FaceInfo::SetNormal(OCNaroWrappers::OCgp_Dir^ aD)
{
  ((BOP_FaceInfo*)nativeHandle)->SetNormal(*((gp_Dir*)aD->Handle));
}

 void OCBOP_FaceInfo::SetAngle(Standard_Real A)
{
  ((BOP_FaceInfo*)nativeHandle)->SetAngle(A);
}

OCTopoDS_Face^ OCBOP_FaceInfo::Face()
{
  TopoDS_Face* tmp = new TopoDS_Face();
  *tmp = ((BOP_FaceInfo*)nativeHandle)->Face();
  return gcnew OCTopoDS_Face(tmp);
}

OCgp_Pnt^ OCBOP_FaceInfo::POnEdge()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BOP_FaceInfo*)nativeHandle)->POnEdge();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCBOP_FaceInfo::PInFace()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BOP_FaceInfo*)nativeHandle)->PInFace();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt2d^ OCBOP_FaceInfo::PInFace2D()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((BOP_FaceInfo*)nativeHandle)->PInFace2D();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Dir^ OCBOP_FaceInfo::Normal()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((BOP_FaceInfo*)nativeHandle)->Normal();
  return gcnew OCgp_Dir(tmp);
}

 System::Boolean OCBOP_FaceInfo::IsPassed()
{
  return OCConverter::StandardBooleanToBoolean(((BOP_FaceInfo*)nativeHandle)->IsPassed());
}

 Standard_Real OCBOP_FaceInfo::Angle()
{
  return ((BOP_FaceInfo*)nativeHandle)->Angle();
}


