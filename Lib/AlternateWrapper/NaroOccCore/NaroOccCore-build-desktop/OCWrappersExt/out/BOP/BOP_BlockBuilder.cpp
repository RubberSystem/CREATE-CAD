// File generated by CPPExt (CPP file)
//

#include "BOP_BlockBuilder.h"
#include "../Converter.h"
#include "BOP_ShapeSet.h"
#include "BOP_BlockIterator.h"
#include "../TopoDS/TopoDS_Shape.h"


using namespace OCNaroWrappers;

OCBOP_BlockBuilder::OCBOP_BlockBuilder(BOP_BlockBuilder* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBOP_BlockBuilder::OCBOP_BlockBuilder() 
{
  nativeHandle = new BOP_BlockBuilder();
}

OCBOP_BlockBuilder::OCBOP_BlockBuilder(OCNaroWrappers::OCBOP_ShapeSet^ SS) 
{
  nativeHandle = new BOP_BlockBuilder(*((BOP_ShapeSet*)SS->Handle));
}

 void OCBOP_BlockBuilder::MakeBlock(OCNaroWrappers::OCBOP_ShapeSet^ SS)
{
  ((BOP_BlockBuilder*)nativeHandle)->MakeBlock(*((BOP_ShapeSet*)SS->Handle));
}

 void OCBOP_BlockBuilder::InitBlock()
{
  ((BOP_BlockBuilder*)nativeHandle)->InitBlock();
}

 System::Boolean OCBOP_BlockBuilder::MoreBlock()
{
  return OCConverter::StandardBooleanToBoolean(((BOP_BlockBuilder*)nativeHandle)->MoreBlock());
}

 void OCBOP_BlockBuilder::NextBlock()
{
  ((BOP_BlockBuilder*)nativeHandle)->NextBlock();
}

OCBOP_BlockIterator^ OCBOP_BlockBuilder::BlockIterator()
{
  BOP_BlockIterator* tmp = new BOP_BlockIterator();
  *tmp = ((BOP_BlockBuilder*)nativeHandle)->BlockIterator();
  return gcnew OCBOP_BlockIterator(tmp);
}

OCTopoDS_Shape^ OCBOP_BlockBuilder::Element(OCNaroWrappers::OCBOP_BlockIterator^ BI)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BOP_BlockBuilder*)nativeHandle)->Element(*((BOP_BlockIterator*)BI->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBOP_BlockBuilder::Element(Standard_Integer I)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BOP_BlockBuilder*)nativeHandle)->Element(I);
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Integer OCBOP_BlockBuilder::Element(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  return ((BOP_BlockBuilder*)nativeHandle)->Element(*((TopoDS_Shape*)S->Handle));
}

 System::Boolean OCBOP_BlockBuilder::ElementIsValid(OCNaroWrappers::OCBOP_BlockIterator^ BI)
{
  return OCConverter::StandardBooleanToBoolean(((BOP_BlockBuilder*)nativeHandle)->ElementIsValid(*((BOP_BlockIterator*)BI->Handle)));
}

 System::Boolean OCBOP_BlockBuilder::ElementIsValid(Standard_Integer I)
{
  return OCConverter::StandardBooleanToBoolean(((BOP_BlockBuilder*)nativeHandle)->ElementIsValid(I));
}

 Standard_Integer OCBOP_BlockBuilder::AddElement(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  return ((BOP_BlockBuilder*)nativeHandle)->AddElement(*((TopoDS_Shape*)S->Handle));
}

 void OCBOP_BlockBuilder::SetValid(OCNaroWrappers::OCBOP_BlockIterator^ BI, System::Boolean IsValid)
{
  ((BOP_BlockBuilder*)nativeHandle)->SetValid(*((BOP_BlockIterator*)BI->Handle), OCConverter::BooleanToStandardBoolean(IsValid));
}

 void OCBOP_BlockBuilder::SetValid(Standard_Integer I, System::Boolean IsValid)
{
  ((BOP_BlockBuilder*)nativeHandle)->SetValid(I, OCConverter::BooleanToStandardBoolean(IsValid));
}

 System::Boolean OCBOP_BlockBuilder::CurrentBlockIsRegular()
{
  return OCConverter::StandardBooleanToBoolean(((BOP_BlockBuilder*)nativeHandle)->CurrentBlockIsRegular());
}


