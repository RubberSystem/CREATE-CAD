// File generated by CPPExt (MPV)
//
#ifndef _BOP_CheckResult_OCWrappers_HeaderFile
#define _BOP_CheckResult_OCWrappers_HeaderFile

// include native header
#include <BOP_CheckResult.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Shape.h"
#include "BOP_CheckStatus.h"
#include "../TopTools/TopTools_ListOfShape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopTools_ListOfShape;


//! contains information about faulty shapes and faulty types <br>
//!         can't be processed by Boolean Operations <br>
public ref class OCBOP_CheckResult  {

protected:
  BOP_CheckResult* nativeHandle;
  OCBOP_CheckResult(OCDummy^) {};

public:
  property BOP_CheckResult* Handle
  {
    BOP_CheckResult* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBOP_CheckResult(BOP_CheckResult* nativeHandle);

// Methods PUBLIC

//! empty constructor <br>
OCBOP_CheckResult();

//! sets ancestor shape (object) for faulty sub-shapes <br>
 /*instead*/  void SetShape1(OCNaroWrappers::OCTopoDS_Shape^ TheShape) ;

//! adds faulty sub-shapes from object to a list <br>
 /*instead*/  void AddFaultyShape1(OCNaroWrappers::OCTopoDS_Shape^ TheShape) ;

//! sets ancestor shape (tool) for faulty sub-shapes <br>
 /*instead*/  void SetShape2(OCNaroWrappers::OCTopoDS_Shape^ TheShape) ;

//! adds faulty sub-shapes from tool to a list <br>
 /*instead*/  void AddFaultyShape2(OCNaroWrappers::OCTopoDS_Shape^ TheShape) ;

//! returns ancestor shape (object) for faulties <br>
 /*instead*/  OCTopoDS_Shape^ GetShape1() ;

//! returns ancestor shape (tool) for faulties <br>
 /*instead*/  OCTopoDS_Shape^ GetShape2() ;

//! returns list of faulty shapes for object <br>
 /*instead*/  OCTopTools_ListOfShape^ GetFaultyShapes1() ;

//! returns list of faulty shapes for tool <br>
 /*instead*/  OCTopTools_ListOfShape^ GetFaultyShapes2() ;

//! set status of faulty <br>
 /*instead*/  void SetCheckStatus(OCBOP_CheckStatus TheStatus) ;

//! gets status of faulty <br>
 /*instead*/  OCBOP_CheckStatus GetCheckStatus() ;

~OCBOP_CheckResult()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
