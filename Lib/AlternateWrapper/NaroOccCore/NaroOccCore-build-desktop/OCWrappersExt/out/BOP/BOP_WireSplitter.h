// File generated by CPPExt (MPV)
//
#ifndef _BOP_WireSplitter_OCWrappers_HeaderFile
#define _BOP_WireSplitter_OCWrappers_HeaderFile

// include native header
#include <BOP_WireSplitter.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Face.h"
#include "../BOPTColStd/BOPTColStd_ListOfListOfShape.h"
#include "BOP_IndexedDataMapOfVertexListEdgeInfo.h"
#include "../TopTools/TopTools_ListOfShape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Face;
ref class OCTopTools_ListOfShape;
ref class OCBOPTColStd_ListOfListOfShape;



//!  the algorithm to split multiconnexed <br>
//!  wires on a face onto biconnexed ones <br>
//!  . <br>
public ref class OCBOP_WireSplitter  {

protected:
  BOP_WireSplitter* nativeHandle;
  OCBOP_WireSplitter(OCDummy^) {};

public:
  property BOP_WireSplitter* Handle
  {
    BOP_WireSplitter* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBOP_WireSplitter(BOP_WireSplitter* nativeHandle);

// Methods PUBLIC


//! Empty constructor; <br>
OCBOP_WireSplitter();


//! Modifier <br>
 /*instead*/  void SetFace(OCNaroWrappers::OCTopoDS_Face^ aF) ;


//! Perform the algorithm using the  list of shapes <aLE> as data <br>
 /*instead*/  void DoWithListOfEdges(OCNaroWrappers::OCTopTools_ListOfShape^ aLE) ;


//! Perform the algorithm using the face as data <br>
 /*instead*/  void DoWithFace() ;


//! Returns TRUE if the source wire is biconnexed and <br>
//! there is nothing to correct <br>
 /*instead*/  System::Boolean IsNothingToDo() ;


//! Returns TRUE if the algorithm was performed <br>
//! successfuly <br>
 /*instead*/  System::Boolean IsDone() ;


//! Selector <br>
 /*instead*/  OCTopoDS_Face^ Face() ;


//! Selector <br>
 /*instead*/  OCBOPTColStd_ListOfListOfShape^ Shapes() ;

~OCBOP_WireSplitter()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
