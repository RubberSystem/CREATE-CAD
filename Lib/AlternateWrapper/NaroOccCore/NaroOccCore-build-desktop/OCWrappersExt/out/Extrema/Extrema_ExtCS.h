// File generated by CPPExt (MPV)
//
#ifndef _Extrema_ExtCS_OCWrappers_HeaderFile
#define _Extrema_ExtCS_OCWrappers_HeaderFile

// include native header
#include <Extrema_ExtCS.hxx>
#include "../Converter.h"


#include "Extrema_ExtElCS.h"
#include "Extrema_SequenceOfPOnSurf.h"
#include "Extrema_SequenceOfPOnCurv.h"
#include "../TColStd/TColStd_SequenceOfReal.h"
#include "../GeomAbs/GeomAbs_SurfaceType.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Curve;
ref class OCAdaptor3d_Surface;
ref class OCExtrema_POnCurv;
ref class OCExtrema_POnSurf;


//! It calculates all the extremum distances <br>
//!          between a curve and a surface. <br>
//!          These distances can be minimum or maximum. <br>
public ref class OCExtrema_ExtCS  {

protected:
  Extrema_ExtCS* nativeHandle;
  OCExtrema_ExtCS(OCDummy^) {};

public:
  property Extrema_ExtCS* Handle
  {
    Extrema_ExtCS* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCExtrema_ExtCS(Extrema_ExtCS* nativeHandle);

// Methods PUBLIC


OCExtrema_ExtCS();

//! It calculates all the distances between C and S. <br>
OCExtrema_ExtCS(OCNaroWrappers::OCAdaptor3d_Curve^ C, OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Real TolC, Standard_Real TolS);

//! It calculates all the distances between C and S. <br>
//!          UCinf and UCmax are the start and end parameters <br>
//!          of the curve. <br>
OCExtrema_ExtCS(OCNaroWrappers::OCAdaptor3d_Curve^ C, OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Real UCinf, Standard_Real UCsup, Standard_Real Uinf, Standard_Real Usup, Standard_Real Vinf, Standard_Real Vsup, Standard_Real TolC, Standard_Real TolS);

//! Initializes the fields of the algorithm. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Real Uinf, Standard_Real Usup, Standard_Real Vinf, Standard_Real Vsup, Standard_Real TolC, Standard_Real TolS) ;

//! Computes the distances. <br>
//!          An exception is raised if the fieds have not been <br>
//!          initialized. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Uinf, Standard_Real Usup) ;

//! Returns True if the distances are found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns True if the curve is on a parallel surface. <br>
 /*instead*/  System::Boolean IsParallel() ;

//! Returns the number of extremum distances. <br>
 /*instead*/  Standard_Integer NbExt() ;

//! Returns the value of the Nth resulting square distance. <br>
 /*instead*/  Standard_Real SquareDistance(Standard_Integer N) ;

//! Returns the point of the Nth resulting distance. <br>
 /*instead*/  void Points(Standard_Integer N, OCNaroWrappers::OCExtrema_POnCurv^ P1, OCNaroWrappers::OCExtrema_POnSurf^ P2) ;

~OCExtrema_ExtCS()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
