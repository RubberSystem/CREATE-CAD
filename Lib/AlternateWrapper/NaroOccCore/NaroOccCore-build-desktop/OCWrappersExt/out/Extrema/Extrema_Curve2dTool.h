// File generated by CPPExt (MPV)
//
#ifndef _Extrema_Curve2dTool_OCWrappers_HeaderFile
#define _Extrema_Curve2dTool_OCWrappers_HeaderFile

// include native header
#include <Extrema_Curve2dTool.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_Shape.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"


namespace OCNaroWrappers
{

ref class OCAdaptor2d_Curve2d;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt2d;
ref class OCgp_Vec2d;
ref class OCGeom2d_BezierCurve;
ref class OCGeom2d_BSplineCurve;



public ref class OCExtrema_Curve2dTool  {

protected:
  Extrema_Curve2dTool* nativeHandle;
  OCExtrema_Curve2dTool(OCDummy^) {};

public:
  property Extrema_Curve2dTool* Handle
  {
    Extrema_Curve2dTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCExtrema_Curve2dTool(Extrema_Curve2dTool* nativeHandle);

// Methods PUBLIC


static /*instead*/  Standard_Real FirstParameter(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  Standard_Real LastParameter(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  OCGeomAbs_Shape Continuity(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;

//! If necessary,   breaks the curve  in  intervals of <br>
//!          continuity <S>.     And   returns  the  number  of <br>
//!          intervals. <br>
static /*instead*/  Standard_Integer NbIntervals(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, OCGeomAbs_Shape S) ;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
static /*instead*/  void Intervals(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;


static /*instead*/  System::Boolean IsClosed(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  System::Boolean IsPeriodic(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  Standard_Real Period(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;

//! Computes the point of parameter U on the curve. <br>
static /*instead*/  OCgp_Pnt2d^ Value(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U) ;

//! Computes the point of parameter U on the curve. <br>
static /*instead*/  void D0(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Computes the point of parameter U on the curve with its <br>
//!  first derivative. <br>
static /*instead*/  void D1(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V) ;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>
static /*instead*/  void D2(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;


//!  Returns the point P of parameter U, the first, the second <br>
//!  and the third derivative. <br>
static /*instead*/  void D3(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) ;


//!  The returned vector gives the value of the derivative for the <br>
//!  order of derivation N. <br>
static /*instead*/  OCgp_Vec2d^ DN(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, Standard_Integer N) ;

//!  Returns the parametric  resolution corresponding <br>
//!         to the real space resolution <R3d>. <br>
static /*instead*/  Standard_Real Resolution(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real R3d) ;

//! Returns  the  type of the   curve  in the  current <br>
//!          interval :   Line,   Circle,   Ellipse, Hyperbola, <br>
//!          Parabola, BezierCurve, BSplineCurve, OtherCurve. <br>
static /*instead*/  OCGeomAbs_CurveType GetType(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  OCgp_Lin2d^ Line(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  OCgp_Circ2d^ Circle(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  OCgp_Elips2d^ Ellipse(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  OCgp_Hypr2d^ Hyperbola(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  OCgp_Parab2d^ Parabola(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  Standard_Integer Degree(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  System::Boolean IsRational(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  Standard_Integer NbPoles(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  Standard_Integer NbKnots(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  OCGeom2d_BezierCurve^ Bezier(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;


static /*instead*/  OCGeom2d_BSplineCurve^ BSpline(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;

~OCExtrema_Curve2dTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
