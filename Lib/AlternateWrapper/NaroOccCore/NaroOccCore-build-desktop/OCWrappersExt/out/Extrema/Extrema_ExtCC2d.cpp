// File generated by CPPExt (CPP file)
//

#include "Extrema_ExtCC2d.h"
#include "../Converter.h"
#include "../Adaptor2d/Adaptor2d_Curve2d.h"
#include "Extrema_Curve2dTool.h"
#include "Extrema_CCache2dOfExtCC2d.h"
#include "Extrema_ECC2dOfExtCC2d.h"
#include "Extrema_CCFOfECC2dOfExtCC2d.h"
#include "Extrema_POnCurv2d.h"
#include "../gp/gp_Pnt2d.h"
#include "Extrema_ExtElC2d.h"


using namespace OCNaroWrappers;

OCExtrema_ExtCC2d::OCExtrema_ExtCC2d(Extrema_ExtCC2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCExtrema_ExtCC2d::OCExtrema_ExtCC2d() 
{
  nativeHandle = new Extrema_ExtCC2d();
}

OCExtrema_ExtCC2d::OCExtrema_ExtCC2d(OCNaroWrappers::OCAdaptor2d_Curve2d^ C1, OCNaroWrappers::OCAdaptor2d_Curve2d^ C2, Standard_Real TolC1, Standard_Real TolC2) 
{
  nativeHandle = new Extrema_ExtCC2d(*((Adaptor2d_Curve2d*)C1->Handle), *((Adaptor2d_Curve2d*)C2->Handle), TolC1, TolC2);
}

OCExtrema_ExtCC2d::OCExtrema_ExtCC2d(OCNaroWrappers::OCAdaptor2d_Curve2d^ C1, OCNaroWrappers::OCAdaptor2d_Curve2d^ C2, Standard_Real U1, Standard_Real U2, Standard_Real V1, Standard_Real V2, Standard_Real TolC1, Standard_Real TolC2) 
{
  nativeHandle = new Extrema_ExtCC2d(*((Adaptor2d_Curve2d*)C1->Handle), *((Adaptor2d_Curve2d*)C2->Handle), U1, U2, V1, V2, TolC1, TolC2);
}

 void OCExtrema_ExtCC2d::Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C2, Standard_Real V1, Standard_Real V2, Standard_Real TolC1, Standard_Real TolC2)
{
  ((Extrema_ExtCC2d*)nativeHandle)->Initialize(*((Adaptor2d_Curve2d*)C2->Handle), V1, V2, TolC1, TolC2);
}

 void OCExtrema_ExtCC2d::Perform(OCNaroWrappers::OCAdaptor2d_Curve2d^ C1, Standard_Real U1, Standard_Real U2)
{
  ((Extrema_ExtCC2d*)nativeHandle)->Perform(*((Adaptor2d_Curve2d*)C1->Handle), U1, U2);
}

 System::Boolean OCExtrema_ExtCC2d::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Extrema_ExtCC2d*)nativeHandle)->IsDone());
}

 Standard_Integer OCExtrema_ExtCC2d::NbExt()
{
  return ((Extrema_ExtCC2d*)nativeHandle)->NbExt();
}

 System::Boolean OCExtrema_ExtCC2d::IsParallel()
{
  return OCConverter::StandardBooleanToBoolean(((Extrema_ExtCC2d*)nativeHandle)->IsParallel());
}

 Standard_Real OCExtrema_ExtCC2d::SquareDistance(Standard_Integer N)
{
  return ((Extrema_ExtCC2d*)nativeHandle)->SquareDistance(N);
}

 void OCExtrema_ExtCC2d::Points(Standard_Integer N, OCNaroWrappers::OCExtrema_POnCurv2d^ P1, OCNaroWrappers::OCExtrema_POnCurv2d^ P2)
{
  ((Extrema_ExtCC2d*)nativeHandle)->Points(N, *((Extrema_POnCurv2d*)P1->Handle), *((Extrema_POnCurv2d*)P2->Handle));
}

 void OCExtrema_ExtCC2d::TrimmedSquareDistances(Standard_Real& dist11, Standard_Real& distP12, Standard_Real& distP21, Standard_Real& distP22, OCNaroWrappers::OCgp_Pnt2d^ P11, OCNaroWrappers::OCgp_Pnt2d^ P12, OCNaroWrappers::OCgp_Pnt2d^ P21, OCNaroWrappers::OCgp_Pnt2d^ P22)
{
  ((Extrema_ExtCC2d*)nativeHandle)->TrimmedSquareDistances(dist11, distP12, distP21, distP22, *((gp_Pnt2d*)P11->Handle), *((gp_Pnt2d*)P12->Handle), *((gp_Pnt2d*)P21->Handle), *((gp_Pnt2d*)P22->Handle));
}


