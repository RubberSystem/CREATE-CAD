// File generated by CPPExt (MPV)
//
#ifndef _Extrema_GenExtCS_OCWrappers_HeaderFile
#define _Extrema_GenExtCS_OCWrappers_HeaderFile

// include native header
#include <Extrema_GenExtCS.hxx>
#include "../Converter.h"


#include "Extrema_FuncExtCS.h"


namespace OCNaroWrappers
{

ref class OCTColgp_HArray1OfPnt;
ref class OCTColgp_HArray2OfPnt;
ref class OCAdaptor3d_Curve;
ref class OCAdaptor3d_Surface;
ref class OCExtrema_POnCurv;
ref class OCExtrema_POnSurf;


//! It calculates all the extremum distances <br>
//!          between acurve and a surface. <br>
//!          These distances can be minimum or maximum. <br>
public ref class OCExtrema_GenExtCS  {

protected:
  Extrema_GenExtCS* nativeHandle;
  OCExtrema_GenExtCS(OCDummy^) {};

public:
  property Extrema_GenExtCS* Handle
  {
    Extrema_GenExtCS* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCExtrema_GenExtCS(Extrema_GenExtCS* nativeHandle);

// Methods PUBLIC


OCExtrema_GenExtCS();

//! It calculates all the distances. <br>
//!          The function F(u,v)=distance(S1(u1,v1),S2(u2,v2)) has an <br>
//!          extremum when gradient(F)=0. The algorithm searchs <br>
//!          all the zeros inside the definition ranges of the <br>
//!          surfaces. <br>
//!          NbU and NbV are used to locate the close points on the <br>
//!          surface and NbT on the curve to find the zeros. <br>
OCExtrema_GenExtCS(OCNaroWrappers::OCAdaptor3d_Curve^ C, OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer NbT, Standard_Integer NbU, Standard_Integer NbV, Standard_Real Tol1, Standard_Real Tol2);

//! It calculates all the distances. <br>
//!          The function F(u,v)=distance(P,S(u,v)) has an <br>
//!          extremum when gradient(F)=0. The algorithm searchs <br>
//!          all the zeros inside the definition ranges of the <br>
//!          surface. <br>
//!          NbT,NbU and NbV are used to locate the close points <br>
//!          to find the zeros. <br>
OCExtrema_GenExtCS(OCNaroWrappers::OCAdaptor3d_Curve^ C, OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer NbT, Standard_Integer NbU, Standard_Integer NbV, Standard_Real tmin, Standard_Real tsup, Standard_Real Umin, Standard_Real Usup, Standard_Real Vmin, Standard_Real Vsup, Standard_Real Tol1, Standard_Real Tol2);


 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer NbU, Standard_Integer NbV, Standard_Real Tol2) ;


 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer NbU, Standard_Integer NbV, Standard_Real Umin, Standard_Real Usup, Standard_Real Vmin, Standard_Real Vsup, Standard_Real Tol2) ;

//! the algorithm is done with S <br>
//!          An exception is raised if the fields have not <br>
//!          been initialized. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Integer NbT, Standard_Real Tol1) ;

//! the algorithm is done with C <br>
//!          An exception is raised if the fields have not <br>
//!          been initialized. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Integer NbT, Standard_Real tmin, Standard_Real tsup, Standard_Real Tol1) ;

//! Returns True if the distances are found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the number of extremum distances. <br>
 /*instead*/  Standard_Integer NbExt() ;

//! Returns the value of the Nth resulting square distance. <br>
 /*instead*/  Standard_Real SquareDistance(Standard_Integer N) ;

//! Returns the point of the Nth resulting distance. <br>
 /*instead*/  OCExtrema_POnCurv^ PointOnCurve(Standard_Integer N) ;

//! Returns the point of the Nth resulting distance. <br>
 /*instead*/  OCExtrema_POnSurf^ PointOnSurface(Standard_Integer N) ;

~OCExtrema_GenExtCS()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
