// File generated by CPPExt (MPV)
//
#ifndef _Extrema_FuncExtSS_OCWrappers_HeaderFile
#define _Extrema_FuncExtSS_OCWrappers_HeaderFile

// include native header
#include <Extrema_FuncExtSS.hxx>
#include "../Converter.h"

#include "../math/math_FunctionSetWithDerivatives.h"

#include "../gp/gp_Pnt.h"
#include "../TColStd/TColStd_SequenceOfReal.h"
#include "Extrema_SequenceOfPOnSurf.h"
#include "../math/math_FunctionSetWithDerivatives.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Surface;
ref class OCmath_Vector;
ref class OCmath_Matrix;
ref class OCExtrema_POnSurf;


//! Function to find extrema of the <br>
//!          distance between two surfaces. <br>
public ref class OCExtrema_FuncExtSS  : public OCmath_FunctionSetWithDerivatives {

protected:
  // dummy constructor;
  OCExtrema_FuncExtSS(OCDummy^) : OCmath_FunctionSetWithDerivatives((OCDummy^)nullptr) {};

public:

// constructor from native
OCExtrema_FuncExtSS(Extrema_FuncExtSS* nativeHandle);

// Methods PUBLIC


OCExtrema_FuncExtSS();


OCExtrema_FuncExtSS(OCNaroWrappers::OCAdaptor3d_Surface^ S1, OCNaroWrappers::OCAdaptor3d_Surface^ S2);

//! sets the field mysurf of the function. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Surface^ S1, OCNaroWrappers::OCAdaptor3d_Surface^ S2) ;


 /*instead*/  Standard_Integer NbVariables() ;


 /*instead*/  Standard_Integer NbEquations() ;

//! Calculate Fi(U,V). <br>
 /*instead*/  System::Boolean Value(OCNaroWrappers::OCmath_Vector^ UV, OCNaroWrappers::OCmath_Vector^ F) ;

//! Calculate Fi'(U,V). <br>
 /*instead*/  System::Boolean Derivatives(OCNaroWrappers::OCmath_Vector^ UV, OCNaroWrappers::OCmath_Matrix^ DF) ;

//! Calculate Fi(U,V) and Fi'(U,V). <br>
 /*instead*/  System::Boolean Values(OCNaroWrappers::OCmath_Vector^ UV, OCNaroWrappers::OCmath_Vector^ F, OCNaroWrappers::OCmath_Matrix^ DF) ;

//! Save the found extremum. <br>
virtual /*instead*/  Standard_Integer GetStateNumber() override;

//! Return the number of found extrema. <br>
 /*instead*/  Standard_Integer NbExt() ;

//! Return the value of the Nth distance. <br>
 /*instead*/  Standard_Real SquareDistance(Standard_Integer N) ;

//! Return the Nth extremum on S1. <br>
 /*instead*/  OCExtrema_POnSurf^ PointOnS1(Standard_Integer N) ;

//! Renvoie le Nieme extremum sur S2. <br>
 /*instead*/  OCExtrema_POnSurf^ PointOnS2(Standard_Integer N) ;

~OCExtrema_FuncExtSS()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
