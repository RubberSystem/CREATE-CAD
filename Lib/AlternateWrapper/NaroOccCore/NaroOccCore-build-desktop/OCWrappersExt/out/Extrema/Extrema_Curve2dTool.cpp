// File generated by CPPExt (CPP file)
//

#include "Extrema_Curve2dTool.h"
#include "../Converter.h"
#include "../Adaptor2d/Adaptor2d_Curve2d.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../Geom2d/Geom2d_BezierCurve.h"
#include "../Geom2d/Geom2d_BSplineCurve.h"


using namespace OCNaroWrappers;

OCExtrema_Curve2dTool::OCExtrema_Curve2dTool(Extrema_Curve2dTool* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Real OCExtrema_Curve2dTool::FirstParameter(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return Extrema_Curve2dTool::FirstParameter(*((Adaptor2d_Curve2d*)C->Handle));
}

 Standard_Real OCExtrema_Curve2dTool::LastParameter(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return Extrema_Curve2dTool::LastParameter(*((Adaptor2d_Curve2d*)C->Handle));
}

 OCGeomAbs_Shape OCExtrema_Curve2dTool::Continuity(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return (OCGeomAbs_Shape)(Extrema_Curve2dTool::Continuity(*((Adaptor2d_Curve2d*)C->Handle)));
}

 Standard_Integer OCExtrema_Curve2dTool::NbIntervals(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, OCGeomAbs_Shape S)
{
  return Extrema_Curve2dTool::NbIntervals(*((Adaptor2d_Curve2d*)C->Handle), (GeomAbs_Shape)S);
}

 void OCExtrema_Curve2dTool::Intervals(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  Extrema_Curve2dTool::Intervals(*((Adaptor2d_Curve2d*)C->Handle), *((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 System::Boolean OCExtrema_Curve2dTool::IsClosed(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return OCConverter::StandardBooleanToBoolean(Extrema_Curve2dTool::IsClosed(*((Adaptor2d_Curve2d*)C->Handle)));
}

 System::Boolean OCExtrema_Curve2dTool::IsPeriodic(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return OCConverter::StandardBooleanToBoolean(Extrema_Curve2dTool::IsPeriodic(*((Adaptor2d_Curve2d*)C->Handle)));
}

 Standard_Real OCExtrema_Curve2dTool::Period(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return Extrema_Curve2dTool::Period(*((Adaptor2d_Curve2d*)C->Handle));
}

OCgp_Pnt2d^ OCExtrema_Curve2dTool::Value(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = Extrema_Curve2dTool::Value(*((Adaptor2d_Curve2d*)C->Handle), U);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCExtrema_Curve2dTool::D0(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  Extrema_Curve2dTool::D0(*((Adaptor2d_Curve2d*)C->Handle), U, *((gp_Pnt2d*)P->Handle));
}

 void OCExtrema_Curve2dTool::D1(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V)
{
  Extrema_Curve2dTool::D1(*((Adaptor2d_Curve2d*)C->Handle), U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V->Handle));
}

 void OCExtrema_Curve2dTool::D2(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  Extrema_Curve2dTool::D2(*((Adaptor2d_Curve2d*)C->Handle), U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCExtrema_Curve2dTool::D3(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  Extrema_Curve2dTool::D3(*((Adaptor2d_Curve2d*)C->Handle), U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCExtrema_Curve2dTool::DN(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = Extrema_Curve2dTool::DN(*((Adaptor2d_Curve2d*)C->Handle), U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 Standard_Real OCExtrema_Curve2dTool::Resolution(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real R3d)
{
  return Extrema_Curve2dTool::Resolution(*((Adaptor2d_Curve2d*)C->Handle), R3d);
}

 OCGeomAbs_CurveType OCExtrema_Curve2dTool::GetType(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return (OCGeomAbs_CurveType)(Extrema_Curve2dTool::GetType(*((Adaptor2d_Curve2d*)C->Handle)));
}

OCgp_Lin2d^ OCExtrema_Curve2dTool::Line(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = Extrema_Curve2dTool::Line(*((Adaptor2d_Curve2d*)C->Handle));
  return gcnew OCgp_Lin2d(tmp);
}

OCgp_Circ2d^ OCExtrema_Curve2dTool::Circle(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  gp_Circ2d* tmp = new gp_Circ2d();
  *tmp = Extrema_Curve2dTool::Circle(*((Adaptor2d_Curve2d*)C->Handle));
  return gcnew OCgp_Circ2d(tmp);
}

OCgp_Elips2d^ OCExtrema_Curve2dTool::Ellipse(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  gp_Elips2d* tmp = new gp_Elips2d();
  *tmp = Extrema_Curve2dTool::Ellipse(*((Adaptor2d_Curve2d*)C->Handle));
  return gcnew OCgp_Elips2d(tmp);
}

OCgp_Hypr2d^ OCExtrema_Curve2dTool::Hyperbola(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = Extrema_Curve2dTool::Hyperbola(*((Adaptor2d_Curve2d*)C->Handle));
  return gcnew OCgp_Hypr2d(tmp);
}

OCgp_Parab2d^ OCExtrema_Curve2dTool::Parabola(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  gp_Parab2d* tmp = new gp_Parab2d();
  *tmp = Extrema_Curve2dTool::Parabola(*((Adaptor2d_Curve2d*)C->Handle));
  return gcnew OCgp_Parab2d(tmp);
}

 Standard_Integer OCExtrema_Curve2dTool::Degree(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return Extrema_Curve2dTool::Degree(*((Adaptor2d_Curve2d*)C->Handle));
}

 System::Boolean OCExtrema_Curve2dTool::IsRational(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return OCConverter::StandardBooleanToBoolean(Extrema_Curve2dTool::IsRational(*((Adaptor2d_Curve2d*)C->Handle)));
}

 Standard_Integer OCExtrema_Curve2dTool::NbPoles(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return Extrema_Curve2dTool::NbPoles(*((Adaptor2d_Curve2d*)C->Handle));
}

 Standard_Integer OCExtrema_Curve2dTool::NbKnots(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  return Extrema_Curve2dTool::NbKnots(*((Adaptor2d_Curve2d*)C->Handle));
}

OCGeom2d_BezierCurve^ OCExtrema_Curve2dTool::Bezier(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  Handle(Geom2d_BezierCurve) tmp = Extrema_Curve2dTool::Bezier(*((Adaptor2d_Curve2d*)C->Handle));
  return gcnew OCGeom2d_BezierCurve(&tmp);
}

OCGeom2d_BSplineCurve^ OCExtrema_Curve2dTool::BSpline(OCNaroWrappers::OCAdaptor2d_Curve2d^ C)
{
  Handle(Geom2d_BSplineCurve) tmp = Extrema_Curve2dTool::BSpline(*((Adaptor2d_Curve2d*)C->Handle));
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}


