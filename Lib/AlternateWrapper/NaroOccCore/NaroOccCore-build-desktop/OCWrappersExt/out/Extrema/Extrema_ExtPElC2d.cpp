// File generated by CPPExt (CPP file)
//

#include "Extrema_ExtPElC2d.h"
#include "../Converter.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"
#include "Extrema_POnCurv2d.h"


using namespace OCNaroWrappers;

OCExtrema_ExtPElC2d::OCExtrema_ExtPElC2d(Extrema_ExtPElC2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCExtrema_ExtPElC2d::OCExtrema_ExtPElC2d() 
{
  nativeHandle = new Extrema_ExtPElC2d();
}

OCExtrema_ExtPElC2d::OCExtrema_ExtPElC2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Lin2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup) 
{
  nativeHandle = new Extrema_ExtPElC2d(*((gp_Pnt2d*)P->Handle), *((gp_Lin2d*)C->Handle), Tol, Uinf, Usup);
}

 void OCExtrema_ExtPElC2d::Perform(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup)
{
  ((Extrema_ExtPElC2d*)nativeHandle)->Perform(*((gp_Pnt2d*)P->Handle), *((gp_Lin2d*)L->Handle), Tol, Uinf, Usup);
}

OCExtrema_ExtPElC2d::OCExtrema_ExtPElC2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Circ2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup) 
{
  nativeHandle = new Extrema_ExtPElC2d(*((gp_Pnt2d*)P->Handle), *((gp_Circ2d*)C->Handle), Tol, Uinf, Usup);
}

 void OCExtrema_ExtPElC2d::Perform(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Circ2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup)
{
  ((Extrema_ExtPElC2d*)nativeHandle)->Perform(*((gp_Pnt2d*)P->Handle), *((gp_Circ2d*)C->Handle), Tol, Uinf, Usup);
}

OCExtrema_ExtPElC2d::OCExtrema_ExtPElC2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Elips2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup) 
{
  nativeHandle = new Extrema_ExtPElC2d(*((gp_Pnt2d*)P->Handle), *((gp_Elips2d*)C->Handle), Tol, Uinf, Usup);
}

 void OCExtrema_ExtPElC2d::Perform(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Elips2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup)
{
  ((Extrema_ExtPElC2d*)nativeHandle)->Perform(*((gp_Pnt2d*)P->Handle), *((gp_Elips2d*)C->Handle), Tol, Uinf, Usup);
}

OCExtrema_ExtPElC2d::OCExtrema_ExtPElC2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Hypr2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup) 
{
  nativeHandle = new Extrema_ExtPElC2d(*((gp_Pnt2d*)P->Handle), *((gp_Hypr2d*)C->Handle), Tol, Uinf, Usup);
}

 void OCExtrema_ExtPElC2d::Perform(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Hypr2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup)
{
  ((Extrema_ExtPElC2d*)nativeHandle)->Perform(*((gp_Pnt2d*)P->Handle), *((gp_Hypr2d*)C->Handle), Tol, Uinf, Usup);
}

OCExtrema_ExtPElC2d::OCExtrema_ExtPElC2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Parab2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup) 
{
  nativeHandle = new Extrema_ExtPElC2d(*((gp_Pnt2d*)P->Handle), *((gp_Parab2d*)C->Handle), Tol, Uinf, Usup);
}

 void OCExtrema_ExtPElC2d::Perform(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Parab2d^ C, Standard_Real Tol, Standard_Real Uinf, Standard_Real Usup)
{
  ((Extrema_ExtPElC2d*)nativeHandle)->Perform(*((gp_Pnt2d*)P->Handle), *((gp_Parab2d*)C->Handle), Tol, Uinf, Usup);
}

 System::Boolean OCExtrema_ExtPElC2d::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Extrema_ExtPElC2d*)nativeHandle)->IsDone());
}

 Standard_Integer OCExtrema_ExtPElC2d::NbExt()
{
  return ((Extrema_ExtPElC2d*)nativeHandle)->NbExt();
}

 Standard_Real OCExtrema_ExtPElC2d::SquareDistance(Standard_Integer N)
{
  return ((Extrema_ExtPElC2d*)nativeHandle)->SquareDistance(N);
}

 System::Boolean OCExtrema_ExtPElC2d::IsMin(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean(((Extrema_ExtPElC2d*)nativeHandle)->IsMin(N));
}

OCExtrema_POnCurv2d^ OCExtrema_ExtPElC2d::Point(Standard_Integer N)
{
  Extrema_POnCurv2d* tmp = new Extrema_POnCurv2d();
  *tmp = ((Extrema_ExtPElC2d*)nativeHandle)->Point(N);
  return gcnew OCExtrema_POnCurv2d(tmp);
}


