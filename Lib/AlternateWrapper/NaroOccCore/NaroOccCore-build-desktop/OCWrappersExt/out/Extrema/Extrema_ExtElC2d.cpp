// File generated by CPPExt (CPP file)
//

#include "Extrema_ExtElC2d.h"
#include "../Converter.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"
#include "Extrema_POnCurv2d.h"


using namespace OCNaroWrappers;

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(Extrema_ExtElC2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d() 
{
  nativeHandle = new Extrema_ExtElC2d();
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Lin2d^ C1, OCNaroWrappers::OCgp_Lin2d^ C2, Standard_Real AngTol) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Lin2d*)C1->Handle), *((gp_Lin2d*)C2->Handle), AngTol);
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Lin2d^ C1, OCNaroWrappers::OCgp_Circ2d^ C2, Standard_Real Tol) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Lin2d*)C1->Handle), *((gp_Circ2d*)C2->Handle), Tol);
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Lin2d^ C1, OCNaroWrappers::OCgp_Elips2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Lin2d*)C1->Handle), *((gp_Elips2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Lin2d^ C1, OCNaroWrappers::OCgp_Hypr2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Lin2d*)C1->Handle), *((gp_Hypr2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Lin2d^ C1, OCNaroWrappers::OCgp_Parab2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Lin2d*)C1->Handle), *((gp_Parab2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Circ2d^ C1, OCNaroWrappers::OCgp_Circ2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Circ2d*)C1->Handle), *((gp_Circ2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Circ2d^ C1, OCNaroWrappers::OCgp_Elips2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Circ2d*)C1->Handle), *((gp_Elips2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Circ2d^ C1, OCNaroWrappers::OCgp_Hypr2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Circ2d*)C1->Handle), *((gp_Hypr2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Circ2d^ C1, OCNaroWrappers::OCgp_Parab2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Circ2d*)C1->Handle), *((gp_Parab2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Elips2d^ C1, OCNaroWrappers::OCgp_Elips2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Elips2d*)C1->Handle), *((gp_Elips2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Elips2d^ C1, OCNaroWrappers::OCgp_Hypr2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Elips2d*)C1->Handle), *((gp_Hypr2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Elips2d^ C1, OCNaroWrappers::OCgp_Parab2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Elips2d*)C1->Handle), *((gp_Parab2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Hypr2d^ C1, OCNaroWrappers::OCgp_Hypr2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Hypr2d*)C1->Handle), *((gp_Hypr2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Hypr2d^ C1, OCNaroWrappers::OCgp_Parab2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Hypr2d*)C1->Handle), *((gp_Parab2d*)C2->Handle));
}

OCExtrema_ExtElC2d::OCExtrema_ExtElC2d(OCNaroWrappers::OCgp_Parab2d^ C1, OCNaroWrappers::OCgp_Parab2d^ C2) 
{
  nativeHandle = new Extrema_ExtElC2d(*((gp_Parab2d*)C1->Handle), *((gp_Parab2d*)C2->Handle));
}

 System::Boolean OCExtrema_ExtElC2d::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Extrema_ExtElC2d*)nativeHandle)->IsDone());
}

 System::Boolean OCExtrema_ExtElC2d::IsParallel()
{
  return OCConverter::StandardBooleanToBoolean(((Extrema_ExtElC2d*)nativeHandle)->IsParallel());
}

 Standard_Integer OCExtrema_ExtElC2d::NbExt()
{
  return ((Extrema_ExtElC2d*)nativeHandle)->NbExt();
}

 Standard_Real OCExtrema_ExtElC2d::SquareDistance(Standard_Integer N)
{
  return ((Extrema_ExtElC2d*)nativeHandle)->SquareDistance(N);
}

 void OCExtrema_ExtElC2d::Points(Standard_Integer N, OCNaroWrappers::OCExtrema_POnCurv2d^ P1, OCNaroWrappers::OCExtrema_POnCurv2d^ P2)
{
  ((Extrema_ExtElC2d*)nativeHandle)->Points(N, *((Extrema_POnCurv2d*)P1->Handle), *((Extrema_POnCurv2d*)P2->Handle));
}


