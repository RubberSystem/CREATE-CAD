// File generated by CPPExt (CPP file)
//

#include "Extrema_ExtCC.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "Extrema_CurveTool.h"
#include "Extrema_CCacheOfExtCC.h"
#include "Extrema_ECCOfExtCC.h"
#include "Extrema_CCFOfECCOfExtCC.h"
#include "Extrema_POnCurv.h"
#include "../gp/gp_Pnt.h"
#include "Extrema_ExtElC.h"


using namespace OCNaroWrappers;

OCExtrema_ExtCC::OCExtrema_ExtCC(Extrema_ExtCC* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCExtrema_ExtCC::OCExtrema_ExtCC(Standard_Real TolC1, Standard_Real TolC2) 
{
  nativeHandle = new Extrema_ExtCC(TolC1, TolC2);
}

OCExtrema_ExtCC::OCExtrema_ExtCC(OCNaroWrappers::OCAdaptor3d_Curve^ C1, OCNaroWrappers::OCAdaptor3d_Curve^ C2, Standard_Real TolC1, Standard_Real TolC2) 
{
  nativeHandle = new Extrema_ExtCC(*((Adaptor3d_Curve*)C1->Handle), *((Adaptor3d_Curve*)C2->Handle), TolC1, TolC2);
}

OCExtrema_ExtCC::OCExtrema_ExtCC(OCNaroWrappers::OCAdaptor3d_Curve^ C1, OCNaroWrappers::OCAdaptor3d_Curve^ C2, Standard_Real U1, Standard_Real U2, Standard_Real V1, Standard_Real V2, Standard_Real TolC1, Standard_Real TolC2) 
{
  nativeHandle = new Extrema_ExtCC(*((Adaptor3d_Curve*)C1->Handle), *((Adaptor3d_Curve*)C2->Handle), U1, U2, V1, V2, TolC1, TolC2);
}

 void OCExtrema_ExtCC::SetCurve(Standard_Integer theRank, OCNaroWrappers::OCAdaptor3d_Curve^ C)
{
  ((Extrema_ExtCC*)nativeHandle)->SetCurve(theRank, *((Adaptor3d_Curve*)C->Handle));
}

 void OCExtrema_ExtCC::SetCurve(Standard_Integer theRank, OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Uinf, Standard_Real Usup)
{
  ((Extrema_ExtCC*)nativeHandle)->SetCurve(theRank, *((Adaptor3d_Curve*)C->Handle), Uinf, Usup);
}

 void OCExtrema_ExtCC::SetRange(Standard_Integer theRank, Standard_Real Uinf, Standard_Real Usup)
{
  ((Extrema_ExtCC*)nativeHandle)->SetRange(theRank, Uinf, Usup);
}

 void OCExtrema_ExtCC::SetTolerance(Standard_Integer theRank, Standard_Real Tol)
{
  ((Extrema_ExtCC*)nativeHandle)->SetTolerance(theRank, Tol);
}

 void OCExtrema_ExtCC::Perform()
{
  ((Extrema_ExtCC*)nativeHandle)->Perform();
}

 System::Boolean OCExtrema_ExtCC::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Extrema_ExtCC*)nativeHandle)->IsDone());
}

 Standard_Integer OCExtrema_ExtCC::NbExt()
{
  return ((Extrema_ExtCC*)nativeHandle)->NbExt();
}

 System::Boolean OCExtrema_ExtCC::IsParallel()
{
  return OCConverter::StandardBooleanToBoolean(((Extrema_ExtCC*)nativeHandle)->IsParallel());
}

 Standard_Real OCExtrema_ExtCC::SquareDistance(Standard_Integer N)
{
  return ((Extrema_ExtCC*)nativeHandle)->SquareDistance(N);
}

 void OCExtrema_ExtCC::Points(Standard_Integer N, OCNaroWrappers::OCExtrema_POnCurv^ P1, OCNaroWrappers::OCExtrema_POnCurv^ P2)
{
  ((Extrema_ExtCC*)nativeHandle)->Points(N, *((Extrema_POnCurv*)P1->Handle), *((Extrema_POnCurv*)P2->Handle));
}

 void OCExtrema_ExtCC::TrimmedSquareDistances(Standard_Real& dist11, Standard_Real& distP12, Standard_Real& distP21, Standard_Real& distP22, OCNaroWrappers::OCgp_Pnt^ P11, OCNaroWrappers::OCgp_Pnt^ P12, OCNaroWrappers::OCgp_Pnt^ P21, OCNaroWrappers::OCgp_Pnt^ P22)
{
  ((Extrema_ExtCC*)nativeHandle)->TrimmedSquareDistances(dist11, distP12, distP21, distP22, *((gp_Pnt*)P11->Handle), *((gp_Pnt*)P12->Handle), *((gp_Pnt*)P21->Handle), *((gp_Pnt*)P22->Handle));
}


