// File generated by CPPExt (MPV)
//
#ifndef _Extrema_ExtElCS_OCWrappers_HeaderFile
#define _Extrema_ExtElCS_OCWrappers_HeaderFile

// include native header
#include <Extrema_ExtElCS.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfReal;
ref class OCExtrema_HArray1OfPOnCurv;
ref class OCExtrema_HArray1OfPOnSurf;
ref class OCgp_Lin;
ref class OCgp_Pln;
ref class OCgp_Cylinder;
ref class OCgp_Cone;
ref class OCgp_Sphere;
ref class OCgp_Torus;
ref class OCgp_Circ;
ref class OCgp_Hypr;
ref class OCExtrema_POnCurv;
ref class OCExtrema_POnSurf;


//! It calculates all the distances between a curve and <br>
//!          a surface. <br>
//!          These distances can be maximum or minimum. <br>
public ref class OCExtrema_ExtElCS  {

protected:
  Extrema_ExtElCS* nativeHandle;
  OCExtrema_ExtElCS(OCDummy^) {};

public:
  property Extrema_ExtElCS* Handle
  {
    Extrema_ExtElCS* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCExtrema_ExtElCS(Extrema_ExtElCS* nativeHandle);

// Methods PUBLIC


OCExtrema_ExtElCS();

//! Calculates the distances between a line and a <br>
//!          plane. The line can be on the plane or on a parallel <br>
//!          plane. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Pln^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Pln^ S) ;

//! Calculates the distances between a line and a <br>
//!          cylinder. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Cylinder^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Cylinder^ S) ;

//! Calculates the distances between a line and a cone. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Cone^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Cone^ S) ;

//! Calculates the distances between a line and a <br>
//!          sphere. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Sphere^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Sphere^ S) ;

//! Calculates the distances between a line and a <br>
//!          torus. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Torus^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin^ C, OCNaroWrappers::OCgp_Torus^ S) ;

//! Calculates the distances between a circle and a <br>
//!          plane. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Pln^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Pln^ S) ;

//! Calculates the distances between a circle and a <br>
//!          cylinder. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Cylinder^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Cylinder^ S) ;

//! Calculates the distances between a circle and a <br>
//!          cone. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Cone^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Cone^ S) ;

//! Calculates the distances between a circle and a <br>
//!          sphere. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Sphere^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Sphere^ S) ;

//! Calculates the distances between a circle and a <br>
//!          torus. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Torus^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Torus^ S) ;

//! Calculates the distances between a hyperbola and a <br>
//!          plane. <br>
OCExtrema_ExtElCS(OCNaroWrappers::OCgp_Hypr^ C, OCNaroWrappers::OCgp_Pln^ S);


 /*instead*/  void Perform(OCNaroWrappers::OCgp_Hypr^ C, OCNaroWrappers::OCgp_Pln^ S) ;

//! Returns True if the distances are found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns True if the curve is on a parallel surface. <br>
 /*instead*/  System::Boolean IsParallel() ;

//! Returns the number of extremum distances. <br>
 /*instead*/  Standard_Integer NbExt() ;

//! Returns the value of the Nth extremum square distance. <br>
 /*instead*/  Standard_Real SquareDistance(Standard_Integer N) ;

//! Returns the points of the Nth extremum distance. <br>
//!          P1 is on the curve, P2 on the surface. <br>
 /*instead*/  void Points(Standard_Integer N, OCNaroWrappers::OCExtrema_POnCurv^ P1, OCNaroWrappers::OCExtrema_POnSurf^ P2) ;

~OCExtrema_ExtElCS()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
