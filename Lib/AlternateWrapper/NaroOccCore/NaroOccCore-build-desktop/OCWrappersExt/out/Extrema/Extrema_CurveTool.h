// File generated by CPPExt (MPV)
//
#ifndef _Extrema_CurveTool_OCWrappers_HeaderFile
#define _Extrema_CurveTool_OCWrappers_HeaderFile

// include native header
#include <Extrema_CurveTool.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_Shape.h"
#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Hypr.h"
#include "../gp/gp_Parab.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Curve;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCGeom_BezierCurve;
ref class OCGeom_BSplineCurve;



public ref class OCExtrema_CurveTool  {

protected:
  Extrema_CurveTool* nativeHandle;
  OCExtrema_CurveTool(OCDummy^) {};

public:
  property Extrema_CurveTool* Handle
  {
    Extrema_CurveTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCExtrema_CurveTool(Extrema_CurveTool* nativeHandle);

// Methods PUBLIC


static /*instead*/  Standard_Real FirstParameter(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  Standard_Real LastParameter(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  OCGeomAbs_Shape Continuity(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;

//! Returns  the number  of  intervals for  continuity <br>
//!          <S>. May be one if Continuity(me) >= <S> <br>
static /*instead*/  Standard_Integer NbIntervals(OCNaroWrappers::OCAdaptor3d_Curve^ C, OCGeomAbs_Shape S) ;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
static /*instead*/  void Intervals(OCNaroWrappers::OCAdaptor3d_Curve^ C, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;


static /*instead*/  System::Boolean IsPeriodic(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  Standard_Real Period(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  Standard_Real Resolution(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real R3d) ;


static /*instead*/  OCGeomAbs_CurveType GetType(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  OCgp_Pnt^ Value(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real U) ;


static /*instead*/  void D1(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V) ;


static /*instead*/  void D2(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


static /*instead*/  OCgp_Lin^ Line(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  OCgp_Circ^ Circle(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  OCgp_Elips^ Ellipse(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  OCgp_Hypr^ Hyperbola(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  OCgp_Parab^ Parabola(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  Standard_Integer Degree(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  System::Boolean IsRational(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  Standard_Integer NbPoles(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  Standard_Integer NbKnots(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  OCGeom_BezierCurve^ Bezier(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;


static /*instead*/  OCGeom_BSplineCurve^ BSpline(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;

~OCExtrema_CurveTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
