// File generated by CPPExt (MPV)
//
#ifndef _Extrema_GenExtPS_OCWrappers_HeaderFile
#define _Extrema_GenExtPS_OCWrappers_HeaderFile

// include native header
#include <Extrema_GenExtPS.hxx>
#include "../Converter.h"


#include "Extrema_FuncExtPS.h"
#include "Extrema_ExtFlag.h"
#include "Extrema_ExtAlgo.h"


namespace OCNaroWrappers
{

ref class OCTColgp_HArray2OfPnt;
ref class OCBnd_HArray1OfSphere;
ref class OCTColStd_HArray1OfReal;
ref class OCgp_Pnt;
ref class OCAdaptor3d_Surface;
ref class OCExtrema_POnSurf;
ref class OCmath_Vector;


//! It calculates all the extremum distances <br>
//!          between a point and a surface. <br>
//!          These distances can be minimum or maximum. <br>
public ref class OCExtrema_GenExtPS  {

protected:
  Extrema_GenExtPS* nativeHandle;
  OCExtrema_GenExtPS(OCDummy^) {};

public:
  property Extrema_GenExtPS* Handle
  {
    Extrema_GenExtPS* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCExtrema_GenExtPS(Extrema_GenExtPS* nativeHandle);

// Methods PUBLIC


OCExtrema_GenExtPS();

//! It calculates all the distances. <br>
//!          The function F(u,v)=distance(P,S(u,v)) has an <br>
//!          extremum when gradient(F)=0. The algorithm searchs <br>
//!          all the zeros inside the definition ranges of the <br>
//!          surface. <br>
//!          NbU and NbV are used to locate the close points <br>
//!          to find the zeros. They must be great enough <br>
//!          such that if there is N extrema, there will <br>
//!          be N extrema between P and the grid. <br>
//!          TolU et TolV are used to determine the conditions <br>
//!          to stop the iterations; at the iteration number n: <br>
//!           (Un - Un-1) < TolU and (Vn - Vn-1) < TolV . <br>
OCExtrema_GenExtPS(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer NbU, Standard_Integer NbV, Standard_Real TolU, Standard_Real TolV, OCExtrema_ExtFlag F, OCExtrema_ExtAlgo A);

//! It calculates all the distances. <br>
//!          The function F(u,v)=distance(P,S(u,v)) has an <br>
//!          extremum when gradient(F)=0. The algorithm searchs <br>
//!          all the zeros inside the definition ranges of the <br>
//!          surface. <br>
//!          NbU and NbV are used to locate the close points <br>
//!          to find the zeros. They must be great enough <br>
//!          such that if there is N extrema, there will <br>
//!          be N extrema between P and the grid. <br>
//!          TolU et TolV are used to determine the conditions <br>
//!          to stop the iterations; at the iteration number n: <br>
//!           (Un - Un-1) < TolU and (Vn - Vn-1) < TolV . <br>
OCExtrema_GenExtPS(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer NbU, Standard_Integer NbV, Standard_Real Umin, Standard_Real Usup, Standard_Real Vmin, Standard_Real Vsup, Standard_Real TolU, Standard_Real TolV, OCExtrema_ExtFlag F, OCExtrema_ExtAlgo A);


 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer NbU, Standard_Integer NbV, Standard_Real TolU, Standard_Real TolV) ;


 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Surface^ S, Standard_Integer NbU, Standard_Integer NbV, Standard_Real Umin, Standard_Real Usup, Standard_Real Vmin, Standard_Real Vsup, Standard_Real TolU, Standard_Real TolV) ;

//! the algorithm is done with the point P. <br>
//!          An exception is raised if the fields have not <br>
//!          been initialized. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void SetFlag(OCExtrema_ExtFlag F) ;


 /*instead*/  void SetAlgo(OCExtrema_ExtAlgo A) ;

//! Returns True if the distances are found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the number of extremum distances. <br>
 /*instead*/  Standard_Integer NbExt() ;

//! Returns the value of the Nth resulting square distance. <br>
 /*instead*/  Standard_Real SquareDistance(Standard_Integer N) ;

//! Returns the point of the Nth resulting distance. <br>
 /*instead*/  OCExtrema_POnSurf^ Point(Standard_Integer N) ;

~OCExtrema_GenExtPS()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
