// File generated by CPPExt (MPV)
//
#ifndef _Extrema_ExtElC_OCWrappers_HeaderFile
#define _Extrema_ExtElC_OCWrappers_HeaderFile

// include native header
#include <Extrema_ExtElC.hxx>
#include "../Converter.h"


#include "Extrema_POnCurv.h"


namespace OCNaroWrappers
{

ref class OCgp_Lin;
ref class OCgp_Circ;
ref class OCgp_Elips;
ref class OCgp_Hypr;
ref class OCgp_Parab;
ref class OCExtrema_POnCurv;


//! It calculates all the distance between two elementary <br>
//!          curves. <br>
//!          These distances can be maximum or minimum. <br>
public ref class OCExtrema_ExtElC  {

protected:
  Extrema_ExtElC* nativeHandle;
  OCExtrema_ExtElC(OCDummy^) {};

public:
  property Extrema_ExtElC* Handle
  {
    Extrema_ExtElC* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCExtrema_ExtElC(Extrema_ExtElC* nativeHandle);

// Methods PUBLIC


OCExtrema_ExtElC();

//! Calculates the distance between two lines. <br>
//!          AngTol is used to test if the lines are parallel: <br>
//!          Angle(C1,C2) < AngTol. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Lin^ C1, OCNaroWrappers::OCgp_Lin^ C2, Standard_Real AngTol);

//! Calculates the distance between a line and a <br>
//!          circle. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Lin^ C1, OCNaroWrappers::OCgp_Circ^ C2, Standard_Real Tol);

//! Calculates the distance between a line and an <br>
//!          elipse. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Lin^ C1, OCNaroWrappers::OCgp_Elips^ C2);

//! Calculates the distance between a line and a <br>
//!          hyperbola. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Lin^ C1, OCNaroWrappers::OCgp_Hypr^ C2);

//! Calculates the distance between a line and a <br>
//!          parabola. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Lin^ C1, OCNaroWrappers::OCgp_Parab^ C2);

//! Calculates the distance between two circles. <br>
//!          The circles can be parallel or identical. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Circ^ C1, OCNaroWrappers::OCgp_Circ^ C2);

//! Calculates the distance between a circle and an <br>
//!          elipse. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Circ^ C1, OCNaroWrappers::OCgp_Elips^ C2);

//! Calculates the distance between a circle and a <br>
//!          hyperbola. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Circ^ C1, OCNaroWrappers::OCgp_Hypr^ C2);

//! Calculates the distance between a circle and a <br>
//!          parabola. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Circ^ C1, OCNaroWrappers::OCgp_Parab^ C2);

//! Calculates the distance between two elipses. <br>
//!          The elipses can be parallel or identical. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Elips^ C1, OCNaroWrappers::OCgp_Elips^ C2);

//! Calculates the distance between an elipse and a <br>
//!          hyperbola. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Elips^ C1, OCNaroWrappers::OCgp_Hypr^ C2);

//! Calculates the distance between an elipse and a <br>
//!          parabola. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Elips^ C1, OCNaroWrappers::OCgp_Parab^ C2);

//! Calculates the distance between two hyperbolas. <br>
//!          The hyperbolas can be parallel or identical. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Hypr^ C1, OCNaroWrappers::OCgp_Hypr^ C2);

//! Calculates the distance between a hyperbola and a <br>
//!          parabola. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Hypr^ C1, OCNaroWrappers::OCgp_Parab^ C2);

//! Calculates the distance between two parabolas <br>
//!          The parabolas can be parallel or identical. <br>
OCExtrema_ExtElC(OCNaroWrappers::OCgp_Parab^ C1, OCNaroWrappers::OCgp_Parab^ C2);

//! Returns True if the distances are found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns True if the two curves are parallel. <br>
 /*instead*/  System::Boolean IsParallel() ;

//! Returns the number of extremum distances. <br>
 /*instead*/  Standard_Integer NbExt() ;

//! Returns the value of the Nth extremum square distance. <br>
 /*instead*/  Standard_Real SquareDistance(Standard_Integer N) ;

//! Returns the points of the Nth extremum distance. <br>
//!          P1 is on the first curve, P2 on the second one. <br>
 /*instead*/  void Points(Standard_Integer N, OCNaroWrappers::OCExtrema_POnCurv^ P1, OCNaroWrappers::OCExtrema_POnCurv^ P2) ;

~OCExtrema_ExtElC()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
