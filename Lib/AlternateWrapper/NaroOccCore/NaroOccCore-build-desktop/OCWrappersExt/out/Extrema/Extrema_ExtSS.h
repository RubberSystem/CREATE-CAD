// File generated by CPPExt (MPV)
//
#ifndef _Extrema_ExtSS_OCWrappers_HeaderFile
#define _Extrema_ExtSS_OCWrappers_HeaderFile

// include native header
#include <Extrema_ExtSS.hxx>
#include "../Converter.h"


#include "Extrema_ExtElSS.h"
#include "Extrema_SequenceOfPOnSurf.h"
#include "../TColStd/TColStd_SequenceOfReal.h"
#include "../GeomAbs/GeomAbs_SurfaceType.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Surface;
ref class OCExtrema_POnSurf;


//! It calculates all the extremum distances <br>
//!          between two surfaces. <br>
//!          These distances can be minimum or maximum. <br>
public ref class OCExtrema_ExtSS  {

protected:
  Extrema_ExtSS* nativeHandle;
  OCExtrema_ExtSS(OCDummy^) {};

public:
  property Extrema_ExtSS* Handle
  {
    Extrema_ExtSS* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCExtrema_ExtSS(Extrema_ExtSS* nativeHandle);

// Methods PUBLIC


OCExtrema_ExtSS();

//! It calculates all the distances between S1 and S2. <br>
OCExtrema_ExtSS(OCNaroWrappers::OCAdaptor3d_Surface^ S1, OCNaroWrappers::OCAdaptor3d_Surface^ S2, Standard_Real TolS1, Standard_Real TolS2);

//! It calculates all the distances between S1 and S2. <br>
OCExtrema_ExtSS(OCNaroWrappers::OCAdaptor3d_Surface^ S1, OCNaroWrappers::OCAdaptor3d_Surface^ S2, Standard_Real Uinf1, Standard_Real Usup1, Standard_Real Vinf1, Standard_Real Vsup1, Standard_Real Uinf2, Standard_Real Usup2, Standard_Real Vinf2, Standard_Real Vsup2, Standard_Real TolS1, Standard_Real TolS2);

//! Initializes the fields of the algorithm. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Surface^ S2, Standard_Real Uinf2, Standard_Real Usup2, Standard_Real Vinf2, Standard_Real Vsup2, Standard_Real TolS1) ;

//! Computes the distances. <br>
//!          An exception is raised if the fieds have not been <br>
//!          initialized. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCAdaptor3d_Surface^ S1, Standard_Real Uinf1, Standard_Real Usup1, Standard_Real Vinf1, Standard_Real Vsup1, Standard_Real TolS1) ;

//! Returns True if the distances are found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns True if the curve is on a parallel surface. <br>
 /*instead*/  System::Boolean IsParallel() ;

//! Returns the number of extremum distances. <br>
 /*instead*/  Standard_Integer NbExt() ;

//! Returns the value of the Nth resulting square distance. <br>
 /*instead*/  Standard_Real SquareDistance(Standard_Integer N) ;

//! Returns the point of the Nth resulting distance. <br>
 /*instead*/  void Points(Standard_Integer N, OCNaroWrappers::OCExtrema_POnSurf^ P1, OCNaroWrappers::OCExtrema_POnSurf^ P2) ;

~OCExtrema_ExtSS()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
