// File generated by CPPExt (MPV)
//
#ifndef _Bnd_BoundSortBox2d_OCWrappers_HeaderFile
#define _Bnd_BoundSortBox2d_OCWrappers_HeaderFile

// include native header
#include <Bnd_BoundSortBox2d.hxx>
#include "../Converter.h"


#include "Bnd_Box2d.h"
#include "../TColStd/TColStd_DataMapOfIntegerInteger.h"
#include "../TColStd/TColStd_ListOfInteger.h"


namespace OCNaroWrappers
{

ref class OCBnd_HArray1OfBox2d;
ref class OCTColStd_HArray1OfListOfInteger;
ref class OCBnd_Box2d;
ref class OCTColStd_ListOfInteger;


//! A tool to compare a 2D bounding box with a set of 2D <br>
//! bounding boxes. It sorts the set of bounding boxes to give <br>
//! the list of boxes which intersect the element being compared. <br>
//! The boxes being sorted generally bound a set of shapes, <br>
//! while the box being compared bounds a shape to be <br>
//! compared. The resulting list of intersecting boxes therefore <br>
//! gives the list of items which potentially intersect the shape to be compared. <br>
public ref class OCBnd_BoundSortBox2d  {

protected:
  Bnd_BoundSortBox2d* nativeHandle;
  OCBnd_BoundSortBox2d(OCDummy^) {};

public:
  property Bnd_BoundSortBox2d* Handle
  {
    Bnd_BoundSortBox2d* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBnd_BoundSortBox2d(Bnd_BoundSortBox2d* nativeHandle);

// Methods PUBLIC

//! Constructs an empty comparison algorithm for 2D bounding boxes. <br>
//! The bounding boxes are then defined using the Initialize function. <br>
OCBnd_BoundSortBox2d();

//! Initializes this comparison algorithm with <br>
//! -   the set of 2D bounding boxes SetOfBox <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCBnd_Box2d^ CompleteBox, OCNaroWrappers::OCBnd_HArray1OfBox2d^ SetOfBox) ;

//! Initializes this comparison algorithm with <br>
//! -   the set of 2D bounding boxes SetOfBox, where <br>
//!  CompleteBox is given as the global bounding box of   SetOfBox. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCBnd_HArray1OfBox2d^ SetOfBox) ;

//! Initializes this comparison algorithm, giving it only <br>
//! -   the maximum number nbComponents, and <br>
//! -   the global bounding box CompleteBox, <br>
//! of the 2D bounding boxes to be managed. Use the Add <br>
//! function to define the array of bounding boxes to be sorted by this algorithm. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCBnd_Box2d^ CompleteBox, Standard_Integer nbComponents) ;

//! Adds the 2D bounding box theBox at position boxIndex in <br>
//! the array of boxes to be sorted by this comparison algorithm. <br>
//! This function is used only in conjunction with the third <br>
//! syntax described in the synopsis of Initialize. <br>
//! Exceptions <br>
//! -   Standard_OutOfRange if boxIndex is not in the <br>
//!   range [ 1,nbComponents ] where <br>
//!   nbComponents is the maximum number of bounding <br>
//!   boxes declared for this comparison algorithm at <br>
//!   initialization. <br>
//! -   Standard_MultiplyDefined if a box still exists at <br>
//!   position boxIndex in the array of boxes to be sorted by <br>
//!   this comparison algorithm. <br>
 /*instead*/  void Add(OCNaroWrappers::OCBnd_Box2d^ theBox, Standard_Integer boxIndex) ;


//! Compares the 2D bounding box theBox with the set of <br>
//! bounding boxes to be sorted by this comparison algorithm, <br>
//! and returns the list of intersecting bounding boxes as a list <br>
//! of indexes on the array of bounding boxes used by this algorithm. <br>
 /*instead*/  OCTColStd_ListOfInteger^ Compare(OCNaroWrappers::OCBnd_Box2d^ theBox) ;


 /*instead*/  void Dump() ;

~OCBnd_BoundSortBox2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
