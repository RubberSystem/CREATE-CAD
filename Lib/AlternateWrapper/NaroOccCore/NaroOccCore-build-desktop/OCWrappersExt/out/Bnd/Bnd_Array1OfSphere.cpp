// File generated by CPPExt (CPP file)
//

#include "Bnd_Array1OfSphere.h"
#include "../Converter.h"
#include "Bnd_Sphere.h"


using namespace OCNaroWrappers;

OCBnd_Array1OfSphere::OCBnd_Array1OfSphere(Bnd_Array1OfSphere* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBnd_Array1OfSphere::OCBnd_Array1OfSphere(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Bnd_Array1OfSphere(Low, Up);
}

OCBnd_Array1OfSphere::OCBnd_Array1OfSphere(OCNaroWrappers::OCBnd_Sphere^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Bnd_Array1OfSphere(*((Bnd_Sphere*)Item->Handle), Low, Up);
}

 void OCBnd_Array1OfSphere::Init(OCNaroWrappers::OCBnd_Sphere^ V)
{
  ((Bnd_Array1OfSphere*)nativeHandle)->Init(*((Bnd_Sphere*)V->Handle));
}

 System::Boolean OCBnd_Array1OfSphere::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Array1OfSphere*)nativeHandle)->IsAllocated());
}

OCBnd_Array1OfSphere^ OCBnd_Array1OfSphere::Assign(OCNaroWrappers::OCBnd_Array1OfSphere^ Other)
{
  Bnd_Array1OfSphere* tmp = new Bnd_Array1OfSphere(0, 0);
  *tmp = ((Bnd_Array1OfSphere*)nativeHandle)->Assign(*((Bnd_Array1OfSphere*)Other->Handle));
  return gcnew OCBnd_Array1OfSphere(tmp);
}

 Standard_Integer OCBnd_Array1OfSphere::Length()
{
  return ((Bnd_Array1OfSphere*)nativeHandle)->Length();
}

 Standard_Integer OCBnd_Array1OfSphere::Lower()
{
  return ((Bnd_Array1OfSphere*)nativeHandle)->Lower();
}

 Standard_Integer OCBnd_Array1OfSphere::Upper()
{
  return ((Bnd_Array1OfSphere*)nativeHandle)->Upper();
}

 void OCBnd_Array1OfSphere::SetValue(Standard_Integer Index, OCNaroWrappers::OCBnd_Sphere^ Value)
{
  ((Bnd_Array1OfSphere*)nativeHandle)->SetValue(Index, *((Bnd_Sphere*)Value->Handle));
}

OCBnd_Sphere^ OCBnd_Array1OfSphere::Value(Standard_Integer Index)
{
  Bnd_Sphere* tmp = new Bnd_Sphere();
  *tmp = ((Bnd_Array1OfSphere*)nativeHandle)->Value(Index);
  return gcnew OCBnd_Sphere(tmp);
}

OCBnd_Sphere^ OCBnd_Array1OfSphere::ChangeValue(Standard_Integer Index)
{
  Bnd_Sphere* tmp = new Bnd_Sphere();
  *tmp = ((Bnd_Array1OfSphere*)nativeHandle)->ChangeValue(Index);
  return gcnew OCBnd_Sphere(tmp);
}


