// File generated by CPPExt (CPP file)
//

#include "Bnd_Box.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Dir.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Pln.h"


using namespace OCNaroWrappers;

OCBnd_Box::OCBnd_Box(Bnd_Box* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBnd_Box::OCBnd_Box() 
{
  nativeHandle = new Bnd_Box();
}

 void OCBnd_Box::SetWhole()
{
  ((Bnd_Box*)nativeHandle)->SetWhole();
}

 void OCBnd_Box::SetVoid()
{
  ((Bnd_Box*)nativeHandle)->SetVoid();
}

 void OCBnd_Box::Set(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((Bnd_Box*)nativeHandle)->Set(*((gp_Pnt*)P->Handle));
}

 void OCBnd_Box::Set(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ D)
{
  ((Bnd_Box*)nativeHandle)->Set(*((gp_Pnt*)P->Handle), *((gp_Dir*)D->Handle));
}

 void OCBnd_Box::Update(Standard_Real aXmin, Standard_Real aYmin, Standard_Real aZmin, Standard_Real aXmax, Standard_Real aYmax, Standard_Real aZmax)
{
  ((Bnd_Box*)nativeHandle)->Update(aXmin, aYmin, aZmin, aXmax, aYmax, aZmax);
}

 void OCBnd_Box::Update(Standard_Real X, Standard_Real Y, Standard_Real Z)
{
  ((Bnd_Box*)nativeHandle)->Update(X, Y, Z);
}

 Standard_Real OCBnd_Box::GetGap()
{
  return ((Bnd_Box*)nativeHandle)->GetGap();
}

 void OCBnd_Box::SetGap(Standard_Real Tol)
{
  ((Bnd_Box*)nativeHandle)->SetGap(Tol);
}

 void OCBnd_Box::Enlarge(Standard_Real Tol)
{
  ((Bnd_Box*)nativeHandle)->Enlarge(Tol);
}

 void OCBnd_Box::Get(Standard_Real& aXmin, Standard_Real& aYmin, Standard_Real& aZmin, Standard_Real& aXmax, Standard_Real& aYmax, Standard_Real& aZmax)
{
  ((Bnd_Box*)nativeHandle)->Get(aXmin, aYmin, aZmin, aXmax, aYmax, aZmax);
}

 void OCBnd_Box::OpenXmin()
{
  ((Bnd_Box*)nativeHandle)->OpenXmin();
}

 void OCBnd_Box::OpenXmax()
{
  ((Bnd_Box*)nativeHandle)->OpenXmax();
}

 void OCBnd_Box::OpenYmin()
{
  ((Bnd_Box*)nativeHandle)->OpenYmin();
}

 void OCBnd_Box::OpenYmax()
{
  ((Bnd_Box*)nativeHandle)->OpenYmax();
}

 void OCBnd_Box::OpenZmin()
{
  ((Bnd_Box*)nativeHandle)->OpenZmin();
}

 void OCBnd_Box::OpenZmax()
{
  ((Bnd_Box*)nativeHandle)->OpenZmax();
}

 System::Boolean OCBnd_Box::IsOpenXmin()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOpenXmin());
}

 System::Boolean OCBnd_Box::IsOpenXmax()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOpenXmax());
}

 System::Boolean OCBnd_Box::IsOpenYmin()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOpenYmin());
}

 System::Boolean OCBnd_Box::IsOpenYmax()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOpenYmax());
}

 System::Boolean OCBnd_Box::IsOpenZmin()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOpenZmin());
}

 System::Boolean OCBnd_Box::IsOpenZmax()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOpenZmax());
}

 System::Boolean OCBnd_Box::IsWhole()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsWhole());
}

 System::Boolean OCBnd_Box::IsVoid()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsVoid());
}

 System::Boolean OCBnd_Box::IsXThin(Standard_Real tol)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsXThin(tol));
}

 System::Boolean OCBnd_Box::IsYThin(Standard_Real tol)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsYThin(tol));
}

 System::Boolean OCBnd_Box::IsZThin(Standard_Real tol)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsZThin(tol));
}

 System::Boolean OCBnd_Box::IsThin(Standard_Real tol)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsThin(tol));
}

OCBnd_Box^ OCBnd_Box::Transformed(OCNaroWrappers::OCgp_Trsf^ T)
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = ((Bnd_Box*)nativeHandle)->Transformed(*((gp_Trsf*)T->Handle));
  return gcnew OCBnd_Box(tmp);
}

 void OCBnd_Box::Add(OCNaroWrappers::OCBnd_Box^ Other)
{
  ((Bnd_Box*)nativeHandle)->Add(*((Bnd_Box*)Other->Handle));
}

 void OCBnd_Box::Add(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((Bnd_Box*)nativeHandle)->Add(*((gp_Pnt*)P->Handle));
}

 void OCBnd_Box::Add(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ D)
{
  ((Bnd_Box*)nativeHandle)->Add(*((gp_Pnt*)P->Handle), *((gp_Dir*)D->Handle));
}

 void OCBnd_Box::Add(OCNaroWrappers::OCgp_Dir^ D)
{
  ((Bnd_Box*)nativeHandle)->Add(*((gp_Dir*)D->Handle));
}

 System::Boolean OCBnd_Box::IsOut(OCNaroWrappers::OCgp_Pnt^ P)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOut(*((gp_Pnt*)P->Handle)));
}

 System::Boolean OCBnd_Box::IsOut(OCNaroWrappers::OCgp_Lin^ L)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOut(*((gp_Lin*)L->Handle)));
}

 System::Boolean OCBnd_Box::IsOut(OCNaroWrappers::OCgp_Pln^ P)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOut(*((gp_Pln*)P->Handle)));
}

 System::Boolean OCBnd_Box::IsOut(OCNaroWrappers::OCBnd_Box^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOut(*((Bnd_Box*)Other->Handle)));
}

 System::Boolean OCBnd_Box::IsOut(OCNaroWrappers::OCBnd_Box^ Other, OCNaroWrappers::OCgp_Trsf^ T)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOut(*((Bnd_Box*)Other->Handle), *((gp_Trsf*)T->Handle)));
}

 System::Boolean OCBnd_Box::IsOut(OCNaroWrappers::OCgp_Trsf^ T1, OCNaroWrappers::OCBnd_Box^ Other, OCNaroWrappers::OCgp_Trsf^ T2)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOut(*((gp_Trsf*)T1->Handle), *((Bnd_Box*)Other->Handle), *((gp_Trsf*)T2->Handle)));
}

 System::Boolean OCBnd_Box::IsOut(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Dir^ D)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box*)nativeHandle)->IsOut(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle), *((gp_Dir*)D->Handle)));
}

 Standard_Real OCBnd_Box::Distance(OCNaroWrappers::OCBnd_Box^ Other)
{
  return ((Bnd_Box*)nativeHandle)->Distance(*((Bnd_Box*)Other->Handle));
}

 void OCBnd_Box::Dump()
{
  ((Bnd_Box*)nativeHandle)->Dump();
}

 Standard_Real OCBnd_Box::SquareExtent()
{
  return ((Bnd_Box*)nativeHandle)->SquareExtent();
}


