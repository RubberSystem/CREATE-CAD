// File generated by CPPExt (CPP file)
//

#include "Bnd_B3d.h"
#include "../Converter.h"
#include "../gp/gp_XYZ.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_Ax1.h"
#include "../gp/gp_Ax3.h"


using namespace OCNaroWrappers;

OCBnd_B3d::OCBnd_B3d(Bnd_B3d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBnd_B3d::OCBnd_B3d() 
{
  nativeHandle = new Bnd_B3d();
}

OCBnd_B3d::OCBnd_B3d(OCNaroWrappers::OCgp_XYZ^ theCenter, OCNaroWrappers::OCgp_XYZ^ theHSize) 
{
  nativeHandle = new Bnd_B3d(*((gp_XYZ*)theCenter->Handle), *((gp_XYZ*)theHSize->Handle));
}

 System::Boolean OCBnd_B3d::IsVoid()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsVoid());
}

 void OCBnd_B3d::Clear()
{
  ((Bnd_B3d*)nativeHandle)->Clear();
}

 void OCBnd_B3d::Add(OCNaroWrappers::OCgp_XYZ^ thePnt)
{
  ((Bnd_B3d*)nativeHandle)->Add(*((gp_XYZ*)thePnt->Handle));
}

 void OCBnd_B3d::Add(OCNaroWrappers::OCgp_Pnt^ thePnt)
{
  ((Bnd_B3d*)nativeHandle)->Add(*((gp_Pnt*)thePnt->Handle));
}

 void OCBnd_B3d::Add(OCNaroWrappers::OCBnd_B3d^ theBox)
{
  ((Bnd_B3d*)nativeHandle)->Add(*((Bnd_B3d*)theBox->Handle));
}

OCgp_XYZ^ OCBnd_B3d::CornerMin()
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((Bnd_B3d*)nativeHandle)->CornerMin();
  return gcnew OCgp_XYZ(tmp);
}

OCgp_XYZ^ OCBnd_B3d::CornerMax()
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((Bnd_B3d*)nativeHandle)->CornerMax();
  return gcnew OCgp_XYZ(tmp);
}

 Standard_Real OCBnd_B3d::SquareExtent()
{
  return ((Bnd_B3d*)nativeHandle)->SquareExtent();
}

 void OCBnd_B3d::Enlarge(Standard_Real theDiff)
{
  ((Bnd_B3d*)nativeHandle)->Enlarge(theDiff);
}

 System::Boolean OCBnd_B3d::Limit(OCNaroWrappers::OCBnd_B3d^ theOtherBox)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->Limit(*((Bnd_B3d*)theOtherBox->Handle)));
}

OCBnd_B3d^ OCBnd_B3d::Transformed(OCNaroWrappers::OCgp_Trsf^ theTrsf)
{
  Bnd_B3d* tmp = new Bnd_B3d();
  *tmp = ((Bnd_B3d*)nativeHandle)->Transformed(*((gp_Trsf*)theTrsf->Handle));
  return gcnew OCBnd_B3d(tmp);
}

 System::Boolean OCBnd_B3d::IsOut(OCNaroWrappers::OCgp_XYZ^ thePnt)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsOut(*((gp_XYZ*)thePnt->Handle)));
}

 System::Boolean OCBnd_B3d::IsOut(OCNaroWrappers::OCgp_XYZ^ theCenter, Standard_Real theRadius, System::Boolean isSphereHollow)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsOut(*((gp_XYZ*)theCenter->Handle), theRadius, OCConverter::BooleanToStandardBoolean(isSphereHollow)));
}

 System::Boolean OCBnd_B3d::IsOut(OCNaroWrappers::OCBnd_B3d^ theOtherBox)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsOut(*((Bnd_B3d*)theOtherBox->Handle)));
}

 System::Boolean OCBnd_B3d::IsOut(OCNaroWrappers::OCBnd_B3d^ theOtherBox, OCNaroWrappers::OCgp_Trsf^ theTrsf)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsOut(*((Bnd_B3d*)theOtherBox->Handle), *((gp_Trsf*)theTrsf->Handle)));
}

 System::Boolean OCBnd_B3d::IsOut(OCNaroWrappers::OCgp_Ax1^ theLine, System::Boolean isRay, Standard_Real theOverthickness)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsOut(*((gp_Ax1*)theLine->Handle), OCConverter::BooleanToStandardBoolean(isRay), theOverthickness));
}

 System::Boolean OCBnd_B3d::IsOut(OCNaroWrappers::OCgp_Ax3^ thePlane)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsOut(*((gp_Ax3*)thePlane->Handle)));
}

 System::Boolean OCBnd_B3d::IsIn(OCNaroWrappers::OCBnd_B3d^ theBox)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsIn(*((Bnd_B3d*)theBox->Handle)));
}

 System::Boolean OCBnd_B3d::IsIn(OCNaroWrappers::OCBnd_B3d^ theBox, OCNaroWrappers::OCgp_Trsf^ theTrsf)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_B3d*)nativeHandle)->IsIn(*((Bnd_B3d*)theBox->Handle), *((gp_Trsf*)theTrsf->Handle)));
}

 void OCBnd_B3d::SetCenter(OCNaroWrappers::OCgp_XYZ^ theCenter)
{
  ((Bnd_B3d*)nativeHandle)->SetCenter(*((gp_XYZ*)theCenter->Handle));
}

 void OCBnd_B3d::SetHSize(OCNaroWrappers::OCgp_XYZ^ theHSize)
{
  ((Bnd_B3d*)nativeHandle)->SetHSize(*((gp_XYZ*)theHSize->Handle));
}


