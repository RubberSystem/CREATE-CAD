// File generated by CPPExt (MPV)
//
#ifndef _Bnd_Box_OCWrappers_HeaderFile
#define _Bnd_Box_OCWrappers_HeaderFile

// include native header
#include <Bnd_Box.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Trsf;
ref class OCgp_Lin;
ref class OCgp_Pln;


//! Describes a bounding box in 3D space. <br>
//! A bounding box is parallel to the axes of the coordinates <br>
//! system. If it is finite, it is defined by the three intervals: <br>
//! -   [ Xmin,Xmax ], <br>
//! -   [ Ymin,Ymax ], <br>
//! -   [ Zmin,Zmax ]. <br>
//! A bounding box may be infinite (i.e. open) in one or more <br>
//! directions. It is said to be: <br>
//! -   OpenXmin if it is infinite on the negative side of the   "X Direction"; <br>
//! -   OpenXmax if it is infinite on the positive side of the "X Direction"; <br>
//! -   OpenYmin if it is infinite on the negative side of the   "Y Direction"; <br>
//! -   OpenYmax if it is infinite on the positive side of the "Y Direction"; <br>
//! -   OpenZmin if it is infinite on the negative side of the   "Z Direction"; <br>
//! -   OpenZmax if it is infinite on the positive side of the "Z Direction"; <br>
//! -   WholeSpace if it is infinite in all six directions. In this <br>
//!   case, any point of the space is inside the box; <br>
//! -   Void if it is empty. In this case, there is no point included in the box. <br>
//!   A bounding box is defined by: <br>
//! -   six bounds (Xmin, Xmax, Ymin, Ymax, Zmin and <br>
//!   Zmax) which limit the bounding box if it is finite, <br>
//! -   eight flags (OpenXmin, OpenXmax, OpenYmin, <br>
//!   OpenYmax, OpenZmin, OpenZmax, <br>
//!   WholeSpace and Void) which describe the <br>
//!   bounding box if it is infinite or empty, and <br>
//! -   a gap, which is included on both sides in any direction <br>
//!   when consulting the finite bounds of the box. <br>
public ref class OCBnd_Box  {

protected:
  Bnd_Box* nativeHandle;
  OCBnd_Box(OCDummy^) {};

public:
  property Bnd_Box* Handle
  {
    Bnd_Box* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBnd_Box(Bnd_Box* nativeHandle);

// Methods PUBLIC

//! Creates an empty Box. <br>
//! The constructed box is qualified Void. Its gap is null. <br>
OCBnd_Box();

//! Sets this bounding box so that it  covers the whole of 3D space. <br>
//!        It is infinitely  long in all directions. <br>
 /*instead*/  void SetWhole() ;

//! Sets this bounding box so that it is empty. All points are outside a void box. <br>
 /*instead*/  void SetVoid() ;

//! Sets this bounding box so that it bounds <br>
//! -   the point P. This involves first setting this bounding box <br>
//!   to be void and then adding the point P. <br>
 /*instead*/  void Set(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Sets this bounding box so that it bounds <br>
//!   the half-line defined by point P and direction D, i.e. all <br>
//!   points M defined by M=P+u*D, where u is greater than <br>
//!   or equal to 0, are inside the bounding volume. This <br>
//!   involves first setting this box to be void and then adding   the half-line. <br>
 /*instead*/  void Set(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ D) ;

//! Enlarges this bounding box, if required, so that it <br>
//!          contains at least: <br>
//!   -   interval [ aXmin,aXmax ] in the "X Direction", <br>
//!   -   interval [ aYmin,aYmax ] in the "Y Direction", <br>
//!   -   interval [ aZmin,aZmax ] in the "Z Direction"; <br>
 /*instead*/  void Update(Standard_Real aXmin, Standard_Real aYmin, Standard_Real aZmin, Standard_Real aXmax, Standard_Real aYmax, Standard_Real aZmax) ;

//!  Adds a point of coordinates (X,Y,Z) to this bounding box. <br>
 /*instead*/  void Update(Standard_Real X, Standard_Real Y, Standard_Real Z) ;

//! Returns the gap of this bounding box. <br>
 /*instead*/  Standard_Real GetGap() ;

//! Set the gap of this bounding box to abs(Tol). <br>
 /*instead*/  void SetGap(Standard_Real Tol) ;

//! Enlarges the      box    with    a   tolerance   value. <br>
//!          (minvalues-Abs(<tol>) and maxvalues+Abs(<tol>)) <br>
//!	This means that the minimum values of its X, Y and Z <br>
//! intervals of definition, when they are finite, are reduced by <br>
//! the absolute value of Tol, while the maximum values are <br>
//! increased by the same amount. <br>
 /*instead*/  void Enlarge(Standard_Real Tol) ;

//! Returns the bounds of this bounding box. The gap is included. <br>
//! If this bounding box is infinite (i.e. "open"), returned values <br>
//! may be equal to +/- Precision::Infinite(). <br>
//! if IsVoid() <br>
 /*instead*/  void Get(Standard_Real& aXmin, Standard_Real& aYmin, Standard_Real& aZmin, Standard_Real& aXmax, Standard_Real& aYmax, Standard_Real& aZmax) ;

//! The   Box will be   infinitely   long  in the Xmin <br>
//!          direction. <br>
 /*instead*/  void OpenXmin() ;

//! The   Box will be   infinitely   long  in the Xmax <br>
//!          direction. <br>
 /*instead*/  void OpenXmax() ;

//! The   Box will be   infinitely   long  in the Ymin <br>
//!          direction. <br>
 /*instead*/  void OpenYmin() ;

//! The   Box will be   infinitely   long  in the Ymax <br>
//!          direction. <br>
 /*instead*/  void OpenYmax() ;

//! The   Box will be   infinitely   long  in the Zmin <br>
//!          direction. <br>
 /*instead*/  void OpenZmin() ;

//! The   Box will be   infinitely   long  in the Zmax <br>
//!          direction. <br>
 /*instead*/  void OpenZmax() ;

//! Returns true if this bounding box is open in the  Xmin direction. <br>
 /*instead*/  System::Boolean IsOpenXmin() ;

//! Returns true if this bounding box is open in the  Xmax direction. <br>
 /*instead*/  System::Boolean IsOpenXmax() ;

//! Returns true if this bounding box is open in the  Ymix direction. <br>
 /*instead*/  System::Boolean IsOpenYmin() ;

//! Returns true if this bounding box is open in the  Ymax direction. <br>
 /*instead*/  System::Boolean IsOpenYmax() ;

//! Returns true if this bounding box is open in the  Zmin direction. <br>
 /*instead*/  System::Boolean IsOpenZmin() ;

//! Returns true if this bounding box is open in the  Zmax  direction. <br>
 /*instead*/  System::Boolean IsOpenZmax() ;

//! Returns true if this bounding box is infinite in all 6 directions (WholeSpace flag). <br>
 /*instead*/  System::Boolean IsWhole() ;

//! Returns true if this bounding box is empty (Void flag). <br>
 /*instead*/  System::Boolean IsVoid() ;

//! true if xmax-xmin < tol. <br>
 /*instead*/  System::Boolean IsXThin(Standard_Real tol) ;

//! true if ymax-ymin < tol. <br>
 /*instead*/  System::Boolean IsYThin(Standard_Real tol) ;

//! true if zmax-zmin < tol. <br>
 /*instead*/  System::Boolean IsZThin(Standard_Real tol) ;

//! Returns true if IsXThin, IsYThin and IsZThin are all true, <br>
//! i.e. if the box is thin in all three dimensions. <br>
 /*instead*/  System::Boolean IsThin(Standard_Real tol) ;

//! Returns a bounding box which is the result of applying the <br>
//! transformation T to this bounding box. <br>
//! Warning <br>
//! Applying a geometric transformation (for example, a <br>
//! rotation) to a bounding box generally increases its <br>
//! dimensions. This is not optimal for algorithms which use it. <br>
 /*instead*/  OCBnd_Box^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Adds the box <Other> to <me>. <br>
 /*instead*/  void Add(OCNaroWrappers::OCBnd_Box^ Other) ;

//! Adds a Pnt to the box. <br>
 /*instead*/  void Add(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Extends  <me> from the Pnt <P> in the direction <D>. <br>
 /*instead*/  void Add(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ D) ;

//! Extends the Box  in the given Direction, i.e. adds <br>
//!          an  half-line. The   box  may become   infinite in <br>
//!          1,2 or 3 directions. <br>
 /*instead*/  void Add(OCNaroWrappers::OCgp_Dir^ D) ;

//! Returns True if the Pnt is out the box. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Returns False if the line intersects the box. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCgp_Lin^ L) ;

//! Returns False if the plane intersects the box. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCgp_Pln^ P) ;

//! Returns False if the <Box> intersects or is inside <me>. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCBnd_Box^ Other) ;

//! Returns False if  the transformed <Box> intersects <br>
//!          or  is inside <me>. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCBnd_Box^ Other, OCNaroWrappers::OCgp_Trsf^ T) ;

//! Returns False  if the transformed <Box> intersects <br>
//!          or  is inside the transformed box <me>. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCgp_Trsf^ T1, OCNaroWrappers::OCBnd_Box^ Other, OCNaroWrappers::OCgp_Trsf^ T2) ;

//! Returns False  if the flat band lying between two parallel <br>
//!    	    lines represented by their reference points <P1>, <P2> and <br>
//!          direction <D> intersects the box. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Dir^ D) ;

//! Computes the minimum distance between two boxes. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCBnd_Box^ Other) ;


 /*instead*/  void Dump() ;

//! Computes the squared diagonal of me. <br>
 /*instead*/  Standard_Real SquareExtent() ;

~OCBnd_Box()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
