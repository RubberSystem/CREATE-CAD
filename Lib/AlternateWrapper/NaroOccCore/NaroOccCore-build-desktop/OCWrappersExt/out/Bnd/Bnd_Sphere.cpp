// File generated by CPPExt (CPP file)
//

#include "Bnd_Sphere.h"
#include "../Converter.h"
#include "../gp/gp_XYZ.h"


using namespace OCNaroWrappers;

OCBnd_Sphere::OCBnd_Sphere(Bnd_Sphere* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBnd_Sphere::OCBnd_Sphere() 
{
  nativeHandle = new Bnd_Sphere();
}

OCBnd_Sphere::OCBnd_Sphere(OCNaroWrappers::OCgp_XYZ^ theCntr, Standard_Real theRad, Standard_Integer theU, Standard_Integer theV) 
{
  nativeHandle = new Bnd_Sphere(*((gp_XYZ*)theCntr->Handle), theRad, theU, theV);
}

 Standard_Integer OCBnd_Sphere::U()
{
  return ((Bnd_Sphere*)nativeHandle)->U();
}

 Standard_Integer OCBnd_Sphere::V()
{
  return ((Bnd_Sphere*)nativeHandle)->V();
}

 System::Boolean OCBnd_Sphere::IsValid()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Sphere*)nativeHandle)->IsValid());
}

 void OCBnd_Sphere::SetValid(System::Boolean isValid)
{
  ((Bnd_Sphere*)nativeHandle)->SetValid(OCConverter::BooleanToStandardBoolean(isValid));
}

OCgp_XYZ^ OCBnd_Sphere::Center()
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((Bnd_Sphere*)nativeHandle)->Center();
  return gcnew OCgp_XYZ(tmp);
}

 Standard_Real OCBnd_Sphere::Radius()
{
  return ((Bnd_Sphere*)nativeHandle)->Radius();
}

 void OCBnd_Sphere::Distances(OCNaroWrappers::OCgp_XYZ^ theXYZ, Standard_Real& theMin, Standard_Real& theMax)
{
  ((Bnd_Sphere*)nativeHandle)->Distances(*((gp_XYZ*)theXYZ->Handle), theMin, theMax);
}

 void OCBnd_Sphere::SquareDistances(OCNaroWrappers::OCgp_XYZ^ theXYZ, Standard_Real& theMin, Standard_Real& theMax)
{
  ((Bnd_Sphere*)nativeHandle)->SquareDistances(*((gp_XYZ*)theXYZ->Handle), theMin, theMax);
}

 System::Boolean OCBnd_Sphere::Project(OCNaroWrappers::OCgp_XYZ^ theNode, OCNaroWrappers::OCgp_XYZ^ theProjNode, Standard_Real& theDist, System::Boolean& theInside)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Sphere*)nativeHandle)->Project(*((gp_XYZ*)theNode->Handle), *((gp_XYZ*)theProjNode->Handle), theDist, (Standard_Boolean&)(theInside)));
}

 Standard_Real OCBnd_Sphere::Distance(OCNaroWrappers::OCgp_XYZ^ theNode)
{
  return ((Bnd_Sphere*)nativeHandle)->Distance(*((gp_XYZ*)theNode->Handle));
}

 Standard_Real OCBnd_Sphere::SquareDistance(OCNaroWrappers::OCgp_XYZ^ theNode)
{
  return ((Bnd_Sphere*)nativeHandle)->SquareDistance(*((gp_XYZ*)theNode->Handle));
}

 void OCBnd_Sphere::Add(OCNaroWrappers::OCBnd_Sphere^ theOther)
{
  ((Bnd_Sphere*)nativeHandle)->Add(*((Bnd_Sphere*)theOther->Handle));
}

 System::Boolean OCBnd_Sphere::IsOut(OCNaroWrappers::OCBnd_Sphere^ theOther)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Sphere*)nativeHandle)->IsOut(*((Bnd_Sphere*)theOther->Handle)));
}

 System::Boolean OCBnd_Sphere::IsOut(OCNaroWrappers::OCgp_XYZ^ thePnt, Standard_Real& theMaxDist)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Sphere*)nativeHandle)->IsOut(*((gp_XYZ*)thePnt->Handle), theMaxDist));
}

 Standard_Real OCBnd_Sphere::SquareExtent()
{
  return ((Bnd_Sphere*)nativeHandle)->SquareExtent();
}


