// File generated by CPPExt (MPV)
//
#ifndef _Bnd_Box2d_OCWrappers_HeaderFile
#define _Bnd_Box2d_OCWrappers_HeaderFile

// include native header
#include <Bnd_Box2d.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCgp_Pnt2d;
ref class OCgp_Dir2d;
ref class OCgp_Trsf2d;


//! Describes a bounding box in 2D space. <br>
//! A bounding box is parallel to the axes of the coordinates <br>
//! system. If it is finite, it is defined by the two intervals: <br>
//! -   [ Xmin,Xmax ], and <br>
//! -   [ Ymin,Ymax ]. <br>
//! A bounding box may be infinite (i.e. open) in one or more <br>
//! directions. It is said to be: <br>
//! -   OpenXmin if it is infinite on the negative side of the   "X Direction"; <br>
//! -   OpenXmax if it is infinite on the positive side of the   "X Direction"; <br>
//! -   OpenYmin if it is infinite on the negative side of the   "Y Direction"; <br>
//! -   OpenYmax if it is infinite on the positive side of the   "Y Direction"; <br>
//! -   WholeSpace if it is infinite in all four directions. In <br>
//!   this case, any point of the space is inside the box; <br>
//! -   Void if it is empty. In this case, there is no point included in the box. <br>
//!  A bounding box is defined by four bounds (Xmin, Xmax, Ymin and Ymax) which <br>
//!   limit the bounding box if it is finite, six flags (OpenXmin, OpenXmax, OpenYmin, <br>
//!   OpenYmax, WholeSpace and Void) which describe the bounding box if it is infinite or empty, and <br>
//! -   a gap, which is included on both sides in any direction when consulting the finite bounds of the box. <br>
public ref class OCBnd_Box2d  {

protected:
  Bnd_Box2d* nativeHandle;
  OCBnd_Box2d(OCDummy^) {};

public:
  property Bnd_Box2d* Handle
  {
    Bnd_Box2d* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBnd_Box2d(Bnd_Box2d* nativeHandle);

// Methods PUBLIC

//! Creates an empty 2D bounding box. <br>
//! The constructed box is qualified Void. Its gap is null. <br>
OCBnd_Box2d();

//! Sets this bounding box so that it covers the whole 2D <br>
//! space, i.e. it is infinite in all directions. <br>
 /*instead*/  void SetWhole() ;

//! Sets this 2D bounding box so that it is empty. All points are outside a void box. <br>
 /*instead*/  void SetVoid() ;

//! Sets this 2D bounding box so that it bounds <br>
//!   the point P. This involves first setting this bounding box <br>
//!   to be void and then adding the point PThe rectangle bounds   the  point <P>. <br>
 /*instead*/  void Set(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Sets this 2D bounding box so that it bounds <br>
//! the half-line defined by point P and direction D, i.e. all <br>
//!   points M defined by M=P+u*D, where u is greater than <br>
//!   or equal to 0, are inside the bounding area. This involves <br>
//!   first setting this 2D box to be void and then adding the   half-line. <br>
 /*instead*/  void Set(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ D) ;

//! Enlarges this 2D bounding box, if required, so that it <br>
//!          contains at least: <br>
//!   -   interval [ aXmin,aXmax ] in the "X Direction", <br>
//!   -   interval [ aYmin,aYmax ] in the "Y Direction" <br>
 /*instead*/  void Update(Standard_Real aXmin, Standard_Real aYmin, Standard_Real aXmax, Standard_Real aYmax) ;

//!    Adds a point of coordinates (X,Y) to this bounding box. <br>
 /*instead*/  void Update(Standard_Real X, Standard_Real Y) ;

//! Returns the gap of this 2D bounding box. <br>
 /*instead*/  Standard_Real GetGap() ;

//! Set the gap of this 2D bounding box to abs(Tol). <br>
 /*instead*/  void SetGap(Standard_Real Tol) ;

//! Enlarges     the  box  with    a  tolerance  value. <br>
//!   This means that the minimum values of its X and Y <br>
//! intervals of definition, when they are finite, are reduced by <br>
//! the absolute value of Tol, while the maximum values are <br>
//! increased by the same amount. <br>
 /*instead*/  void Enlarge(Standard_Real Tol) ;

//! Returns the bounds of this 2D bounding box. <br>
//! The gap is included. If this bounding box is infinite (i.e. "open"), returned values <br>
//! may be equal to +/- Precision::Infinite(). <br>
//! if IsVoid() <br>
 /*instead*/  void Get(Standard_Real& aXmin, Standard_Real& aYmin, Standard_Real& aXmax, Standard_Real& aYmax) ;

//! The Box will be infinitely long in the Xmin direction. <br>
 /*instead*/  void OpenXmin() ;

//! The Box will be infinitely long in the Xmax direction. <br>
 /*instead*/  void OpenXmax() ;

//! The Box will be infinitely long in the Ymin direction. <br>
 /*instead*/  void OpenYmin() ;

//! The Box will be infinitely long in the Ymax direction. <br>
 /*instead*/  void OpenYmax() ;

//! Returns true if this bounding box is open in the Xmin direction. <br>
 /*instead*/  System::Boolean IsOpenXmin() ;

//! Returns true if this bounding box is open in the Xmax direction. <br>
 /*instead*/  System::Boolean IsOpenXmax() ;

//! Returns true if this bounding box is open in the Ymin direction. <br>
 /*instead*/  System::Boolean IsOpenYmin() ;

//! Returns true if this bounding box is open in the Ymax direction. <br>
 /*instead*/  System::Boolean IsOpenYmax() ;


//! Returns true if this bounding box is infinite in all 4 <br>
//! directions (Whole Space flag). <br>
 /*instead*/  System::Boolean IsWhole() ;


//! Returns true if this 2D bounding box is empty (Void flag). <br>
 /*instead*/  System::Boolean IsVoid() ;

//! Returns a bounding box which is the result of applying the <br>
//! transformation T to this bounding box. <br>
//! Warning <br>
//! Applying a geometric transformation (for example, a <br>
//! rotation) to a bounding box generally increases its <br>
//! dimensions. This is not optimal for algorithms which use it. <br>
 /*instead*/  OCBnd_Box2d^ Transformed(OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Adds the 2d box <Other> to <me>. <br>
 /*instead*/  void Add(OCNaroWrappers::OCBnd_Box2d^ Other) ;

//! Adds  the 2d pnt <P> to <me>. <br>
 /*instead*/  void Add(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Extends <me> from the Pnt <P> in the direction <D>. <br>
 /*instead*/  void Add(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ D) ;

//! Extends the Box  in the given Direction, i.e. adds <br>
//!          a half-line. The box may become infinite in 1 or 2 <br>
//!          directions. <br>
 /*instead*/  void Add(OCNaroWrappers::OCgp_Dir2d^ D) ;

//! Returns True if the 2d pnt <P> is out <me>. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Returns True if <Box2d> is out <me>. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCBnd_Box2d^ Other) ;

//! Returns True if transformed <Box2d> is out <me>. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCBnd_Box2d^ Other, OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Compares  a transformed  bounding with  a    transformed <br>
//!          bounding. The default implementation is  to make a copy <br>
//!          of <me> and <Other>, to transform them and to test. <br>
 /*instead*/  System::Boolean IsOut(OCNaroWrappers::OCgp_Trsf2d^ T1, OCNaroWrappers::OCBnd_Box2d^ Other, OCNaroWrappers::OCgp_Trsf2d^ T2) ;


 /*instead*/  void Dump() ;

~OCBnd_Box2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
