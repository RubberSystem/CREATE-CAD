// File generated by CPPExt (CPP file)
//

#include "Bnd_Box2d.h"
#include "../Converter.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Dir2d.h"
#include "../gp/gp_Trsf2d.h"


using namespace OCNaroWrappers;

OCBnd_Box2d::OCBnd_Box2d(Bnd_Box2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBnd_Box2d::OCBnd_Box2d() 
{
  nativeHandle = new Bnd_Box2d();
}

 void OCBnd_Box2d::SetWhole()
{
  ((Bnd_Box2d*)nativeHandle)->SetWhole();
}

 void OCBnd_Box2d::SetVoid()
{
  ((Bnd_Box2d*)nativeHandle)->SetVoid();
}

 void OCBnd_Box2d::Set(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((Bnd_Box2d*)nativeHandle)->Set(*((gp_Pnt2d*)P->Handle));
}

 void OCBnd_Box2d::Set(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ D)
{
  ((Bnd_Box2d*)nativeHandle)->Set(*((gp_Pnt2d*)P->Handle), *((gp_Dir2d*)D->Handle));
}

 void OCBnd_Box2d::Update(Standard_Real aXmin, Standard_Real aYmin, Standard_Real aXmax, Standard_Real aYmax)
{
  ((Bnd_Box2d*)nativeHandle)->Update(aXmin, aYmin, aXmax, aYmax);
}

 void OCBnd_Box2d::Update(Standard_Real X, Standard_Real Y)
{
  ((Bnd_Box2d*)nativeHandle)->Update(X, Y);
}

 Standard_Real OCBnd_Box2d::GetGap()
{
  return ((Bnd_Box2d*)nativeHandle)->GetGap();
}

 void OCBnd_Box2d::SetGap(Standard_Real Tol)
{
  ((Bnd_Box2d*)nativeHandle)->SetGap(Tol);
}

 void OCBnd_Box2d::Enlarge(Standard_Real Tol)
{
  ((Bnd_Box2d*)nativeHandle)->Enlarge(Tol);
}

 void OCBnd_Box2d::Get(Standard_Real& aXmin, Standard_Real& aYmin, Standard_Real& aXmax, Standard_Real& aYmax)
{
  ((Bnd_Box2d*)nativeHandle)->Get(aXmin, aYmin, aXmax, aYmax);
}

 void OCBnd_Box2d::OpenXmin()
{
  ((Bnd_Box2d*)nativeHandle)->OpenXmin();
}

 void OCBnd_Box2d::OpenXmax()
{
  ((Bnd_Box2d*)nativeHandle)->OpenXmax();
}

 void OCBnd_Box2d::OpenYmin()
{
  ((Bnd_Box2d*)nativeHandle)->OpenYmin();
}

 void OCBnd_Box2d::OpenYmax()
{
  ((Bnd_Box2d*)nativeHandle)->OpenYmax();
}

 System::Boolean OCBnd_Box2d::IsOpenXmin()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsOpenXmin());
}

 System::Boolean OCBnd_Box2d::IsOpenXmax()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsOpenXmax());
}

 System::Boolean OCBnd_Box2d::IsOpenYmin()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsOpenYmin());
}

 System::Boolean OCBnd_Box2d::IsOpenYmax()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsOpenYmax());
}

 System::Boolean OCBnd_Box2d::IsWhole()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsWhole());
}

 System::Boolean OCBnd_Box2d::IsVoid()
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsVoid());
}

OCBnd_Box2d^ OCBnd_Box2d::Transformed(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  Bnd_Box2d* tmp = new Bnd_Box2d();
  *tmp = ((Bnd_Box2d*)nativeHandle)->Transformed(*((gp_Trsf2d*)T->Handle));
  return gcnew OCBnd_Box2d(tmp);
}

 void OCBnd_Box2d::Add(OCNaroWrappers::OCBnd_Box2d^ Other)
{
  ((Bnd_Box2d*)nativeHandle)->Add(*((Bnd_Box2d*)Other->Handle));
}

 void OCBnd_Box2d::Add(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((Bnd_Box2d*)nativeHandle)->Add(*((gp_Pnt2d*)P->Handle));
}

 void OCBnd_Box2d::Add(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ D)
{
  ((Bnd_Box2d*)nativeHandle)->Add(*((gp_Pnt2d*)P->Handle), *((gp_Dir2d*)D->Handle));
}

 void OCBnd_Box2d::Add(OCNaroWrappers::OCgp_Dir2d^ D)
{
  ((Bnd_Box2d*)nativeHandle)->Add(*((gp_Dir2d*)D->Handle));
}

 System::Boolean OCBnd_Box2d::IsOut(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsOut(*((gp_Pnt2d*)P->Handle)));
}

 System::Boolean OCBnd_Box2d::IsOut(OCNaroWrappers::OCBnd_Box2d^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsOut(*((Bnd_Box2d*)Other->Handle)));
}

 System::Boolean OCBnd_Box2d::IsOut(OCNaroWrappers::OCBnd_Box2d^ Other, OCNaroWrappers::OCgp_Trsf2d^ T)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsOut(*((Bnd_Box2d*)Other->Handle), *((gp_Trsf2d*)T->Handle)));
}

 System::Boolean OCBnd_Box2d::IsOut(OCNaroWrappers::OCgp_Trsf2d^ T1, OCNaroWrappers::OCBnd_Box2d^ Other, OCNaroWrappers::OCgp_Trsf2d^ T2)
{
  return OCConverter::StandardBooleanToBoolean(((Bnd_Box2d*)nativeHandle)->IsOut(*((gp_Trsf2d*)T1->Handle), *((Bnd_Box2d*)Other->Handle), *((gp_Trsf2d*)T2->Handle)));
}

 void OCBnd_Box2d::Dump()
{
  ((Bnd_Box2d*)nativeHandle)->Dump();
}


