// File generated by CPPExt (Transient)
//
#ifndef _MFT_TextManager_OCWrappers_HeaderFile
#define _MFT_TextManager_OCWrappers_HeaderFile

// include the wrapped class
#include <MFT_TextManager.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCMFT_FontManager;


//! defines the common behaviour of the MFT output driver. <br>
//!  Warning: Permits to receives draw primitives from the FontManager <br>
//!	    at DrawText(...) time. <br>
//!	    This class must be redefined by the user as an application class <br>
//!	    connected to a user driver. <br>
public ref class OCMFT_TextManager : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMFT_TextManager(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMFT_TextManager(Handle(MFT_TextManager)* nativeHandle);

// Methods PUBLIC

//! Does NOTHING <br>
OCMFT_TextManager();

//! Calls when string drawing is started. <br>
//!	    with a string aspect <aPaintType> : <br>
//!	      0 for filled string <br>
//!	      1 for stroke string <br>
//!	      2 for outline string <br>
//!	    The origine of the string <X>,<Y>, <br>
//!	    The orientation of the string <anOrientation>, <br>
//!	    The medium size of the char <aWidth,aHeight>, <br>
//!	    The Slant of the char <aSlant>, <br>
virtual /*instead*/  void BeginString(Quantity_Length X, Quantity_Length Y, Quantity_PlaneAngle anOrientation, Quantity_Length aWidth, Quantity_Length aHeight, Quantity_PlaneAngle aSlant, Standard_Integer aPaintType) ;

//! Calls when a char drawing is started <br>
//!	    and give the relative char start position from the beginning <br>
//!	    of the string. <br>
//!	    The application can returns FALSE for skipping the char drawing. <br>
virtual /*instead*/  System::Boolean BeginChar(Standard_Integer aCharCode, Quantity_Length X, Quantity_Length Y) ;

//! Calls to defines the current char bounding-box with : <br>
//!	     X1,Y1 : the lower left corner of the box, <br>
//!	     X2,Y2 : the lower right corner of the box, <br>
//!	     X3,Y3 : the upper right corner of the box, <br>
//!	     X4,Y4 : the upper left corner of the box. <br>
//!  Warning: the char bounding box is not rectangular when the Slant is != 0. <br>
//!	    The application can returns FALSE for skipping the char drawing. <br>
virtual /*instead*/  System::Boolean SetCharBoundingBox(Quantity_Length X1, Quantity_Length Y1, Quantity_Length X2, Quantity_Length Y2, Quantity_Length X3, Quantity_Length Y3, Quantity_Length X4, Quantity_Length Y4) ;

//! Calls to defines the current char encoding. <br>
//!  Warning: The application can returns FALSE for skipping the char drawing. <br>
virtual /*instead*/  System::Boolean SetCharEncoding(System::String^ anEncoding) ;

//! Calls to sets the current string position. <br>
//!	    The application can returns FALSE for skipping the char drawing. <br>
virtual /*instead*/  System::Boolean Moveto(Quantity_Length X, Quantity_Length Y) ;

//! Calls to drawn to the current string position. <br>
//!	    The application can returns FALSE for skipping the char drawing. <br>
virtual /*instead*/  System::Boolean Lineto(Quantity_Length X, Quantity_Length Y) ;

//! Calls to drawn to the current string position. <br>
//!	    The application can drawn the curve defined by <br>
//!	    his descriptor P1,P2,P3,P4 or <br>
//!	    returns FALSE to let the interpretor compute the curve <br>
//!	    vectors. <br>
virtual /*instead*/  System::Boolean Curveto(Quantity_Length X1, Quantity_Length Y1, Quantity_Length X2, Quantity_Length Y2, Quantity_Length X3, Quantity_Length Y3, Quantity_Length X4, Quantity_Length Y4) ;

//! Calls when a char path drawing is ended <br>
virtual /*instead*/  void ClosePath() ;

//! Calls when a char drawing is ended <br>
//!	    and give the relative char ending position from the <br>
//!	    beginning of the string. <br>
//!	    The application can returns FALSE for skipping the string <br>
//!	    drawing. <br>
virtual /*instead*/  System::Boolean EndChar(Quantity_Length X, Quantity_Length Y) ;

//! Calls when string drawing is ended (Normally the last call). <br>
virtual /*instead*/  void EndString() ;

~OCMFT_TextManager()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
