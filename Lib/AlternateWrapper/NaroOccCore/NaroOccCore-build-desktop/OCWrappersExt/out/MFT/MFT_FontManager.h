// File generated by CPPExt (Transient)
//
#ifndef _MFT_FontManager_OCWrappers_HeaderFile
#define _MFT_FontManager_OCWrappers_HeaderFile

// include the wrapped class
#include <MFT_FontManager.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "../OSD/OSD_OpenMode.h"
#include "MFT_TypeOfCommand.h"
#include "MFT_TypeOfValue.h"


namespace OCNaroWrappers
{

ref class OCAspect_FontStyle;
ref class OCMFT_TextManager;
ref class OCTCollection_AsciiString;


//! This class permits to manage MDTV fonts. <br>
//!  Warning: A FontManager is associated to a xxx.mft font file <br>
//! 	    The coordinates of the outline vectors of each character <br>
//! 	    must be given in the space defined by the font bounding box <br>
public ref class OCMFT_FontManager : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMFT_FontManager(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMFT_FontManager(Handle(MFT_FontManager)* nativeHandle);

// Methods PUBLIC

//! Gives access to the font <anAliasName> associated <br>
//!	    to the file $CSF_MDTVFontDirectory/<anAliasName>.mft <br>
//!	    in ReadOnly access mode. <br>
//!  Warning: If the symbol CSF_MDTVFontDirectory is not defined <br>
//!	    try to reads or writes in $PWD directory. <br>
//!  Example: myFontManager = new MFT_FontManager("Helvetica-Bold") <br>
//!	    permits to access to the file <br>
//!	    $CSF_MDTVFontDirectory/"helvetica-bold.mft" <br>
//!  Trigger: If the font file don't exist or if the file <br>
//!	    don't have an MFT signature. <br>
OCMFT_FontManager(System::String^ anAliasName);

//! Gives access to the font <aFont> associated <br>
//!	    to the file $CSF_MDTVFontDirectory/<aFont.AliasName()>.mft <br>
//!	    with the open mode <aFileMode> and the composite <br>
//!	    flag <isComposite>. <br>
//!  Example: The flag must be sets to TRUE for KANJI extended fonts. <br>
//!  Warning: If the symbol CSF_MDTVFontDirectory is not defined <br>
//!	    try to reads or writes in $PWD directory. <br>
//!  Trigger: If <aFileMode> is ReadOnly or ReadWrite and <br>
//!	    the font file don't exist or if the file <br>
//!	    don't have an MFT signature. <br>
OCMFT_FontManager(OCNaroWrappers::OCAspect_FontStyle^ aFont, OCOSD_OpenMode aFileMode, System::Boolean isComposite);

//! Updates the font name. <br>
//!  Trigger: If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
 /*instead*/  void SetFont(OCNaroWrappers::OCAspect_FontStyle^ aFont) ;

//! Defines and Enable the char <aChar> for writing. <br>
//!  Trigger: If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or the char is already defined. <br>
 /*instead*/  void SetChar(Standard_Character aChar) ;

//! Defines and Enable the accent char <aChar> for writing. <br>
//!  Trigger: If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or the char is already defined. <br>
 /*instead*/  void SetAccentChar(Standard_Character aChar) ;

//! Defines and Enable the char <aChar> for writing. <br>
//!	    This char being current for adding command. <br>
//!  Warning: The char must have an UNICODE UCS2 encoding. <br>
//!  Trigger: If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or if the font is not a composite font. <br>
 /*instead*/  void SetChar(Standard_ExtCharacter aChar) ;

//! Changes the default encoding of the char position <br>
//!	   <aPosition>. <br>
//!  Example: SetEncoding(233,"eacute") <br>
//!	   change the default encoding of the char position 233 <br>
//!	   from "Oslash" to "eacute". <br>//!  Trigger  - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode. <br>
//!	    or if the char encoding is not defined. <br>
 /*instead*/  void SetEncoding(Standard_Integer aPosition, System::String^ anEncoding) ;

//! Remove the definition of the char <aChar> <br>//!  Trigger  - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode. <br>
 /*instead*/  void DelChar(Standard_Character aChar) ;

//! Remove the definition of the char <aChar> <br>
//!	    This char being current for adding command. <br>//!  Trigger  - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or if the font is not a composite font. <br>
 /*instead*/  void DelChar(Standard_ExtCharacter aChar) ;

//! Adds the command <aCommand> of <aNumberOfValues> <br>
//!	    to describe the current char. <br>
//!	    This command being current for adding parameters if any. <br>//!---Purpose  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or if a current char don't have being defined. <br>
//!  Warning: the last command of the char descriptor <br>
//!	   must have a type MFC_TOC_ENDCHAR. <br>
 /*instead*/  void AddCommand(OCMFT_TypeOfCommand aCommand) ;

//! Adds the integer parameter <aValue> to fill <br>
//!	    the current command. <br>//!  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or if a current command don't have being defined, <br>
//!	    or if the number of values is > MaxCommandValues() <br>
 /*instead*/  void AddValue(Standard_Integer aValue) ;

//! Adds the float parameter <aValue> to fill <br>
//!	    the current command. <br>//!  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or if a current command don't have being defined <br>
//!	    or if the number of values is > MaxCommandValues() <br>
 /*instead*/  void AddValue(Standard_Real aValue) ;

//! Adds the string parameter <aValue> to fill <br>
//!	    the current command. <br>//!  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or if a current command don't have being defined, <br>
//!	    or if the number of values is > MaxCommandValues() <br>
//!  Warning: The max length of a string must be < MaxCommandValues()*4-1 <br>
 /*instead*/  void AddValue(System::String^ aValue) ;

//! Sets the bounding box of the font. <br>//!  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or if the bounding box has a wrong value. <br>
//!  Warning: The bounding box coordinates default are : <br>
//!	    0,0,1000,1000 <br>
 /*instead*/  void SetBoundingBox(Standard_Integer aMinX, Standard_Integer aMinY, Standard_Integer aMaxX, Standard_Integer aMaxY) ;

//! Sets the font matrix. <br>//!  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!  Warning: The font matrix default are : <br>
//!	    0.001,0,0,0.001,0,0 <br>
 /*instead*/  void SetFontMatrix(Standard_Real M1, Standard_Real M2, Standard_Real M3, Standard_Real M4, Standard_Real M5, Standard_Real M6) ;

//! Sets the paint type of the font. <br>//!  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
//!	    or if the value is not a Type 1 font value. <br>
//!  Warning: The paint type <aValue> must be one of Type 1 font <br>
//!	   value 0 for FILL , 1 for STROKE or 2 for OUTLINE. <br>
 /*instead*/  void SetPaintType(Standard_Integer aValue) ;

//! Sets the fixed pitch flag of the font <br>
//!  as TRUE if the font must have an fixed char width <br>
//!  or FALSE if the font must have a proportionnal char width. <br>//!  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
 /*instead*/  void SetFixedPitch(System::Boolean aFlag) ;

//! Sets the italic angle of the font given in RAD <br>
//!		clock-wise from vertical. <br>//!    Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode <br>
 /*instead*/  void SetItalicAngle(Quantity_PlaneAngle anAngle) ;

//! Computes the bounding box of the font from the <br>
//!	    min-max of all chars of the font. <br>
//!  Warning: this must be call after all characters has been defined. <br>//!  Trigger - If the font file is not opened <br>
//!	    in WriteOnly or ReadWrite mode. <br>
 /*instead*/  void ComputeBoundingBox() ;

//! Sets the current font attributes. <br>
//!  <aWidth> : the maximum width of one character. <br>
//!  <aHeight> : the maximum height of one character <br>
//!		according to the <aCapsHeight> parameter. <br>
//!  <aSlant> : the slant of one character given in RAD <br>
//!		clock-wise from vertical. <br>
//!  <aPrecision> : the relative interpolator precision is <br>
//!	the maximum flatness error deflection for the curves. <br>
//!  <aCapsHeight> : if TRUE the font height is apply only <br>
//!  	        on the ascent component of the characters; <br>
//!		    if FALSE the font height is apply both <br>
//!		on the ascent and descent  components of the characters. <br>
 /*instead*/  void SetFontAttribs(Quantity_Length aWidth, Quantity_Length aHeight, Quantity_PlaneAngle aSlant, Quantity_Factor aPrecision, System::Boolean aCapsHeight) ;

//! Drawn an ANSI text <br>
//!  <aTextManager> : the draw manager to call for each vertex of the string. <br>
//!  <aString> : the string to interpret <br>
//!  <anX>,<anY> : the position of the text <br>
//!  <anOrientation> : the orientation angle in RAD from horizontal. <br>
 /*instead*/  void DrawText(OCNaroWrappers::OCMFT_TextManager^ aTextManager, System::String^ aString, Quantity_Length anX, Quantity_Length anY, Quantity_PlaneAngle anOrientation) ;

//! Drawn an EXTENDED text <br>
//!  <aTextManager> : the draw manager to call for each vertex of the string. <br>
//!  <aString> : the string to interpret <br>
//!  <anX>,<anY> : the position of the text <br>
//!  <anOrientation> : the orientation angle in RAD from horizontal. <br>//!  Trigger - If the font is not a composite font and <br>
//!	   the string is not ASCII. <br>
 /*instead*/  void DrawText(OCNaroWrappers::OCMFT_TextManager^ aTextManager, System::String^ aString, Quantity_Length anX, Quantity_Length anY, Quantity_PlaneAngle anOrientation) ;

//! Retrieves the bounding box of the font. <br>
 /*instead*/  void BoundingBox(Standard_Integer& aMinX, Standard_Integer& aMinY, Standard_Integer& aMaxX, Standard_Integer& aMaxY) ;

//! Retrieves the bounding box of a character. <br>//!  Trigger - If the position <aPosition> is < 0 or > MaxCharPosition(). <br>
 /*instead*/  void CharBoundingBox(Standard_Integer aPosition, Standard_Integer& aMinX, Standard_Integer& aMinY, Standard_Integer& aMaxX, Standard_Integer& aMaxY) ;

//! Retrieves the paint type of the font. <br>
 /*instead*/  Standard_Integer PaintType() ;

//! Retrieves the fixed pitch flag of the font <br>
 /*instead*/  System::Boolean FixedPitch() ;

//! Retrieves the italic angle of the font <br>
 /*instead*/  Quantity_PlaneAngle ItalicAngle() ;

//! Runs the interpretor with the current attributes setting <br>
//!	   (font and text attributes) <br>
//!	   and returns : <br>
//!	   The max char width of the font CharSet <aWidth>. <br>
//!	   The max char height of the font CharSet <aHeight>. <br>
//!	   The max char descent value below the baseline <aDescent> <br>
//!	   The slant angle of the font <aSlant> <br>
//!	   The interpolator precision of the font <aPrecision> <br>
//!  	   The caps height flag <aCapsHeight> <br>
//!	   The FULL font name. <br>
 /*instead*/  System::String^ FontAttribs(Quantity_Length& aWidth, Quantity_Length& aHeight, Quantity_Length& aDescent, Quantity_PlaneAngle& aSlant, Quantity_Factor& aPrecision, System::Boolean& aCapsHeight) ;

//! Runs the interpretor on the ASCII text <aString> <br>
//!	   with the current font attributes setting and returns : <br>
//!	   The string width <aWidth>. <br>
//!	   The string ascent <anAscent>. <br>
//!	   The string left bearing value from the origine <aLbearing> <br>
//!	   The string descent value below the baseline <aDescent> <br>
 /*instead*/  void TextSize(System::String^ aString, Quantity_Length& aWidth, Quantity_Length& anAscent, Quantity_Length& aLbearing, Quantity_Length& aDescent) ;

//! Runs the interpretor on the EXTENDED text <aString> <br>
//!	   with the current font attributes setting and returns : <br>
//!	   The string width <aWidth>. <br>
//!	   The string ascent <anAscent>. <br>
//!	   The string left bearing value from the origine <aLbearing> <br>
//!	   The string descent value below the baseline <aDescent> <br>//!  Trigger - If the font is not a composite font and <br>
//!	   the string is not ASCII. <br>
 /*instead*/  void TextSize(System::String^ aString, Quantity_Length& aWidth, Quantity_Length& anAscent, Quantity_Length& aLbearing, Quantity_Length& aDescent) ;

//! Runs the interpretor with the current attributes setting <br>
//!	   (font attributes) <br>
//!	   and returns : <br>
//!	   The char width <aWidth>. <br>
//!	   The char left bearing <aLbearing>. <br>
//!	   The char right bearing <aRbearing>. <br>
//!	   The char ascent <anAscent>. <br>
//!	   The char descent value below the baseline <aDescent> <br>
//!	And returns TRUE if the character is defined. <br>
 /*instead*/  System::Boolean CharSize(Standard_Character aChar, Quantity_Length& aWidth, Quantity_Length& aLbearing, Quantity_Length& aRbearing, Quantity_Length& anAscent, Quantity_Length& aDescent) ;

//! Runs the interpretor with the current attributes setting <br>
//!	   (font attributes) <br>
//!	   and returns : <br>
//!	   The extended char width <aWidth>. <br>
//!	   The extended char left bearing <aLbearing>. <br>
//!	   The extended char right bearing <aRbearing>. <br>
//!	   The extended char ascent <anAscent>. <br>
//!	   The extended char descent value below the baseline <aDescent> <br>
//!	And returns TRUE if the character is defined. <br>//!  Trigger - If the font is not a composite font and <br>
//!	   the char is not ASCII. <br>
 /*instead*/  System::Boolean CharSize(Standard_ExtCharacter aChar, Quantity_Length& aWidth, Quantity_Length& aLbearing, Quantity_Length& aRbearing, Quantity_Length& anAscent, Quantity_Length& aDescent) ;

//! Retrieves the font descriptor of this font <br>
 /*instead*/  OCAspect_FontStyle^ Font() ;

//! Returns TRUE if the font is composite. <br>
//!  Example: KANJI fonts returns TRUE. <br>
 /*instead*/  System::Boolean IsComposite() ;

//! Returns TRUE if the font <br>
//!	    $CSF_MDTVFontDirectory/<anAliasName>.mft does exist. <br>
static /*instead*/  System::Boolean IsKnown(System::String^ anAliasName) ;

//! Retrieves the font descriptor from an existing font <br>//! Trigger - If the font does not exist. <br>
static /*instead*/  OCAspect_FontStyle^ Font(System::String^ anAliasName) ;

//! Returns the MFT font number available <br>
//!	    in the directory $CSF_MDTVFontDirectory <br>
//!	    according to the filter : <br>
//! "-foundry-family-weight-slant-swidth-adstyl-pixelsize-pointsize- <br>
//!  resx-resy-spacing-avdWidth-registry-encoding" <br>
//!  Examples: number = MFT_FontMAnager::FontNumber("-euclid3"); <br>
//!	    returns only the euclid3 fonts. <br>
//!          number = MFT_FontMAnager::FontNumber( <br>
//!			"-*-*-*-*-*-*-*-*-*-*-*-*-japanese"); <br>
//!	    returns only the japanese fonts. <br>
static /*instead*/  Standard_Integer FontNumber(System::String^ aFilter) ;

//! Retrieves the font descriptor of index <aRank> <br>
//!	   from the directory $CSF_MDTVFontDirectory <br>//!  Trigger - If the font rank <aRank> is < 1 or > FontNumber(). <br>
static /*instead*/  OCAspect_FontStyle^ Font(Standard_Integer aRank) ;

//! Returns the max values of any defined command <br>
static /*instead*/  Standard_Integer MaxCommandValues() ;

//! Returns the encoding of the char position <br>
//!	   <aPosition>. <br>//!  Trigger -  If the char is not defined <br>
 /*instead*/  System::String^ Encoding(Standard_Integer aPosition) ;

//! Returns the char position <br>
//!	   from the encoding <anEncoding>. <br>//!  Trigger - If the char is not defined <br>
 /*instead*/  Standard_Integer Encoding(System::String^ anEncoding) ;

//! Dumps the font descriptor of all characters. <br>
 /*instead*/  void Dump() ;

//! Dumps the font descriptor of the character <aChar>. <br>
 /*instead*/  void Dump(Standard_Character aChar) ;

//! Dumps the font descriptor of the extended character <aChar>. <br>//!  Trigger - If the font is not a composite font. <br>
 /*instead*/  void Dump(Standard_ExtCharacter aChar) ;

//! Saves the entire MFT font in an ASCII format <br>
//!	    readable by the Restore() method. <br>
//!	    to the file $CSF_MDTVFontDirectory/<anAliasName>.dat <br>
//!	    And returns TRUE if the file have been saves correctly. <br>
 /*instead*/  System::Boolean Save() ;

//! Restores the entire MFT font <br>
//!	    from the file $CSF_MDTVFontDirectory/<anAliasName>.dat <br>
//!	    And returns TRUE if the file have been restores correctly. <br>
static /*instead*/  System::Boolean Restore(System::String^ anAliasName) ;

//! Returns the Underline descent position from the origin <br>
//!	   of the text according to the current font attributes. <br>
 /*instead*/  Quantity_Length UnderlinePosition() ;

~OCMFT_FontManager()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
