// File generated by CPPExt (CPP file)
//

#include "StepRepr_ConfigurationItem.h"
#include "../Converter.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "StepRepr_ProductConcept.h"


using namespace OCNaroWrappers;

OCStepRepr_ConfigurationItem::OCStepRepr_ConfigurationItem(Handle(StepRepr_ConfigurationItem)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepRepr_ConfigurationItem(*nativeHandle);
}

OCStepRepr_ConfigurationItem::OCStepRepr_ConfigurationItem() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepRepr_ConfigurationItem(new StepRepr_ConfigurationItem());
}

 void OCStepRepr_ConfigurationItem::Init(OCNaroWrappers::OCTCollection_HAsciiString^ aId, OCNaroWrappers::OCTCollection_HAsciiString^ aName, System::Boolean hasDescription, OCNaroWrappers::OCTCollection_HAsciiString^ aDescription, OCNaroWrappers::OCStepRepr_ProductConcept^ aItemConcept, System::Boolean hasPurpose, OCNaroWrappers::OCTCollection_HAsciiString^ aPurpose)
{
  (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->Init(*((Handle_TCollection_HAsciiString*)aId->Handle), *((Handle_TCollection_HAsciiString*)aName->Handle), OCConverter::BooleanToStandardBoolean(hasDescription), *((Handle_TCollection_HAsciiString*)aDescription->Handle), *((Handle_StepRepr_ProductConcept*)aItemConcept->Handle), OCConverter::BooleanToStandardBoolean(hasPurpose), *((Handle_TCollection_HAsciiString*)aPurpose->Handle));
}

OCTCollection_HAsciiString^ OCStepRepr_ConfigurationItem::Id()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->Id();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCStepRepr_ConfigurationItem::SetId(OCNaroWrappers::OCTCollection_HAsciiString^ Id)
{
  (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->SetId(*((Handle_TCollection_HAsciiString*)Id->Handle));
}

OCTCollection_HAsciiString^ OCStepRepr_ConfigurationItem::Name()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->Name();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCStepRepr_ConfigurationItem::SetName(OCNaroWrappers::OCTCollection_HAsciiString^ Name)
{
  (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->SetName(*((Handle_TCollection_HAsciiString*)Name->Handle));
}

OCTCollection_HAsciiString^ OCStepRepr_ConfigurationItem::Description()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->Description();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCStepRepr_ConfigurationItem::SetDescription(OCNaroWrappers::OCTCollection_HAsciiString^ Description)
{
  (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->SetDescription(*((Handle_TCollection_HAsciiString*)Description->Handle));
}

 System::Boolean OCStepRepr_ConfigurationItem::HasDescription()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->HasDescription());
}

OCStepRepr_ProductConcept^ OCStepRepr_ConfigurationItem::ItemConcept()
{
  Handle(StepRepr_ProductConcept) tmp = (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->ItemConcept();
  return gcnew OCStepRepr_ProductConcept(&tmp);
}

 void OCStepRepr_ConfigurationItem::SetItemConcept(OCNaroWrappers::OCStepRepr_ProductConcept^ ItemConcept)
{
  (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->SetItemConcept(*((Handle_StepRepr_ProductConcept*)ItemConcept->Handle));
}

OCTCollection_HAsciiString^ OCStepRepr_ConfigurationItem::Purpose()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->Purpose();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCStepRepr_ConfigurationItem::SetPurpose(OCNaroWrappers::OCTCollection_HAsciiString^ Purpose)
{
  (*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->SetPurpose(*((Handle_TCollection_HAsciiString*)Purpose->Handle));
}

 System::Boolean OCStepRepr_ConfigurationItem::HasPurpose()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepRepr_ConfigurationItem*)nativeHandle))->HasPurpose());
}


