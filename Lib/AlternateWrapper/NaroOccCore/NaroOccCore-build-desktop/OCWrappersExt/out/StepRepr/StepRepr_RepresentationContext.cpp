// File generated by CPPExt (CPP file)
//

#include "StepRepr_RepresentationContext.h"
#include "../Converter.h"
#include "../TCollection/TCollection_HAsciiString.h"


using namespace OCNaroWrappers;

OCStepRepr_RepresentationContext::OCStepRepr_RepresentationContext(Handle(StepRepr_RepresentationContext)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepRepr_RepresentationContext(*nativeHandle);
}

OCStepRepr_RepresentationContext::OCStepRepr_RepresentationContext() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepRepr_RepresentationContext(new StepRepr_RepresentationContext());
}

 void OCStepRepr_RepresentationContext::Init(OCNaroWrappers::OCTCollection_HAsciiString^ aContextIdentifier, OCNaroWrappers::OCTCollection_HAsciiString^ aContextType)
{
  (*((Handle_StepRepr_RepresentationContext*)nativeHandle))->Init(*((Handle_TCollection_HAsciiString*)aContextIdentifier->Handle), *((Handle_TCollection_HAsciiString*)aContextType->Handle));
}

 void OCStepRepr_RepresentationContext::SetContextIdentifier(OCNaroWrappers::OCTCollection_HAsciiString^ aContextIdentifier)
{
  (*((Handle_StepRepr_RepresentationContext*)nativeHandle))->SetContextIdentifier(*((Handle_TCollection_HAsciiString*)aContextIdentifier->Handle));
}

OCTCollection_HAsciiString^ OCStepRepr_RepresentationContext::ContextIdentifier()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepRepr_RepresentationContext*)nativeHandle))->ContextIdentifier();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCStepRepr_RepresentationContext::SetContextType(OCNaroWrappers::OCTCollection_HAsciiString^ aContextType)
{
  (*((Handle_StepRepr_RepresentationContext*)nativeHandle))->SetContextType(*((Handle_TCollection_HAsciiString*)aContextType->Handle));
}

OCTCollection_HAsciiString^ OCStepRepr_RepresentationContext::ContextType()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepRepr_RepresentationContext*)nativeHandle))->ContextType();
  return gcnew OCTCollection_HAsciiString(&tmp);
}


