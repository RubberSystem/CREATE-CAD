// File generated by CPPExt (MPV)
//
#ifndef _StepGeom_BSplineSurfaceWithKnots_OCWrappers_HeaderFile
#define _StepGeom_BSplineSurfaceWithKnots_OCWrappers_HeaderFile

// include native header
#include <StepGeom_BSplineSurfaceWithKnots.hxx>
#include "../Converter.h"

#include "StepGeom_BSplineSurface.h"

#include "StepGeom_KnotType.h"
#include "StepGeom_BSplineSurface.h"
#include "StepGeom_BSplineSurfaceForm.h"
#include "../StepData/StepData_Logical.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfInteger;
ref class OCTColStd_HArray1OfReal;
ref class OCTCollection_HAsciiString;
ref class OCStepGeom_HArray2OfCartesianPoint;



public ref class OCStepGeom_BSplineSurfaceWithKnots  : public OCStepGeom_BSplineSurface {

protected:
  // dummy constructor;
  OCStepGeom_BSplineSurfaceWithKnots(OCDummy^) : OCStepGeom_BSplineSurface((OCDummy^)nullptr) {};

public:

// constructor from native
OCStepGeom_BSplineSurfaceWithKnots(StepGeom_BSplineSurfaceWithKnots* nativeHandle);

// Methods PUBLIC

//! Returns a BSplineSurfaceWithKnots <br>
OCStepGeom_BSplineSurfaceWithKnots();


virtual /*instead*/  void Init(OCNaroWrappers::OCTCollection_HAsciiString^ aName, Standard_Integer aUDegree, Standard_Integer aVDegree, OCNaroWrappers::OCStepGeom_HArray2OfCartesianPoint^ aControlPointsList, OCStepGeom_BSplineSurfaceForm aSurfaceForm, OCStepData_Logical aUClosed, OCStepData_Logical aVClosed, OCStepData_Logical aSelfIntersect) override;


virtual /*instead*/  void Init(OCNaroWrappers::OCTCollection_HAsciiString^ aName, Standard_Integer aUDegree, Standard_Integer aVDegree, OCNaroWrappers::OCStepGeom_HArray2OfCartesianPoint^ aControlPointsList, OCStepGeom_BSplineSurfaceForm aSurfaceForm, OCStepData_Logical aUClosed, OCStepData_Logical aVClosed, OCStepData_Logical aSelfIntersect, OCNaroWrappers::OCTColStd_HArray1OfInteger^ aUMultiplicities, OCNaroWrappers::OCTColStd_HArray1OfInteger^ aVMultiplicities, OCNaroWrappers::OCTColStd_HArray1OfReal^ aUKnots, OCNaroWrappers::OCTColStd_HArray1OfReal^ aVKnots, OCStepGeom_KnotType aKnotSpec) ;


 /*instead*/  void SetUMultiplicities(OCNaroWrappers::OCTColStd_HArray1OfInteger^ aUMultiplicities) ;


 /*instead*/  OCTColStd_HArray1OfInteger^ UMultiplicities() ;


 /*instead*/  Standard_Integer UMultiplicitiesValue(Standard_Integer num) ;


 /*instead*/  Standard_Integer NbUMultiplicities() ;


 /*instead*/  void SetVMultiplicities(OCNaroWrappers::OCTColStd_HArray1OfInteger^ aVMultiplicities) ;


 /*instead*/  OCTColStd_HArray1OfInteger^ VMultiplicities() ;


 /*instead*/  Standard_Integer VMultiplicitiesValue(Standard_Integer num) ;


 /*instead*/  Standard_Integer NbVMultiplicities() ;


 /*instead*/  void SetUKnots(OCNaroWrappers::OCTColStd_HArray1OfReal^ aUKnots) ;


 /*instead*/  OCTColStd_HArray1OfReal^ UKnots() ;


 /*instead*/  Standard_Real UKnotsValue(Standard_Integer num) ;


 /*instead*/  Standard_Integer NbUKnots() ;


 /*instead*/  void SetVKnots(OCNaroWrappers::OCTColStd_HArray1OfReal^ aVKnots) ;


 /*instead*/  OCTColStd_HArray1OfReal^ VKnots() ;


 /*instead*/  Standard_Real VKnotsValue(Standard_Integer num) ;


 /*instead*/  Standard_Integer NbVKnots() ;


 /*instead*/  void SetKnotSpec(OCStepGeom_KnotType aKnotSpec) ;


 /*instead*/  OCStepGeom_KnotType KnotSpec() ;

~OCStepGeom_BSplineSurfaceWithKnots()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
