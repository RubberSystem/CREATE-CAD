// File generated by CPPExt (CPP file)
//

#include "TransferBRep.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



OCTopoDS_Shape^ OCTransferBRep::ShapeResult(OCNaroWrappers::OCTransfer_Binder^ binder)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = TransferBRep::ShapeResult(*((Handle_Transfer_Binder*)binder->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTransferBRep::ShapeResult(OCNaroWrappers::OCTransfer_TransientProcess^ TP, OCNaroWrappers::OCStandard_Transient^ ent)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = TransferBRep::ShapeResult(*((Handle_Transfer_TransientProcess*)TP->Handle), *((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCTransferBRep::SetShapeResult(OCNaroWrappers::OCTransfer_TransientProcess^ TP, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCTopoDS_Shape^ result)
{
  TransferBRep::SetShapeResult(*((Handle_Transfer_TransientProcess*)TP->Handle), *((Handle_Standard_Transient*)ent->Handle), *((TopoDS_Shape*)result->Handle));
}

OCTopTools_HSequenceOfShape^ OCTransferBRep::Shapes(OCNaroWrappers::OCTransfer_TransientProcess^ TP, System::Boolean rootsonly)
{
  Handle(TopTools_HSequenceOfShape) tmp = TransferBRep::Shapes(*((Handle_Transfer_TransientProcess*)TP->Handle), OCConverter::BooleanToStandardBoolean(rootsonly));
  return gcnew OCTopTools_HSequenceOfShape(&tmp);
}

OCTopTools_HSequenceOfShape^ OCTransferBRep::Shapes(OCNaroWrappers::OCTransfer_TransientProcess^ TP, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list)
{
  Handle(TopTools_HSequenceOfShape) tmp = TransferBRep::Shapes(*((Handle_Transfer_TransientProcess*)TP->Handle), *((Handle_TColStd_HSequenceOfTransient*)list->Handle));
  return gcnew OCTopTools_HSequenceOfShape(&tmp);
}

 OCTopAbs_Orientation OCTransferBRep::ShapeState(OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCTopoDS_Shape^ shape)
{
  return (OCTopAbs_Orientation)(TransferBRep::ShapeState(*((Handle_Transfer_FinderProcess*)FP->Handle), *((TopoDS_Shape*)shape->Handle)));
}

OCTransfer_Binder^ OCTransferBRep::ResultFromShape(OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCTopoDS_Shape^ shape)
{
  Handle(Transfer_Binder) tmp = TransferBRep::ResultFromShape(*((Handle_Transfer_FinderProcess*)FP->Handle), *((TopoDS_Shape*)shape->Handle));
  return gcnew OCTransfer_Binder(&tmp);
}

OCStandard_Transient^ OCTransferBRep::TransientFromShape(OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCTopoDS_Shape^ shape)
{
  Handle(Standard_Transient) tmp = TransferBRep::TransientFromShape(*((Handle_Transfer_FinderProcess*)FP->Handle), *((TopoDS_Shape*)shape->Handle));
  return gcnew OCStandard_Transient(&tmp);
}

 void OCTransferBRep::SetTransientFromShape(OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCTopoDS_Shape^ shape, OCNaroWrappers::OCStandard_Transient^ result)
{
  TransferBRep::SetTransientFromShape(*((Handle_Transfer_FinderProcess*)FP->Handle), *((TopoDS_Shape*)shape->Handle), *((Handle_Standard_Transient*)result->Handle));
}

OCTransferBRep_ShapeMapper^ OCTransferBRep::ShapeMapper(OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCTopoDS_Shape^ shape)
{
  Handle(TransferBRep_ShapeMapper) tmp = TransferBRep::ShapeMapper(*((Handle_Transfer_FinderProcess*)FP->Handle), *((TopoDS_Shape*)shape->Handle));
  return gcnew OCTransferBRep_ShapeMapper(&tmp);
}

 void OCTransferBRep::TransferResultInfo(OCNaroWrappers::OCTransfer_TransientProcess^ TP, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ EntityTypes, OCNaroWrappers::OCTransferBRep_HSequenceOfTransferResultInfo^ InfoSeq)
{
  TransferBRep::TransferResultInfo(*((Handle_Transfer_TransientProcess*)TP->Handle), *((Handle_TColStd_HSequenceOfTransient*)EntityTypes->Handle), *((Handle_TransferBRep_HSequenceOfTransferResultInfo*)InfoSeq->Handle));
}

 void OCTransferBRep::TransferResultInfo(OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCTColStd_HSequenceOfInteger^ ShapeTypes, OCNaroWrappers::OCTransferBRep_HSequenceOfTransferResultInfo^ InfoSeq)
{
  TransferBRep::TransferResultInfo(*((Handle_Transfer_FinderProcess*)FP->Handle), *((Handle_TColStd_HSequenceOfInteger*)ShapeTypes->Handle), *((Handle_TransferBRep_HSequenceOfTransferResultInfo*)InfoSeq->Handle));
}

 void OCTransferBRep::PrintResultInfo(OCNaroWrappers::OCMessage_Printer^ Printer, OCNaroWrappers::OCMessage_Msg^ Header, OCNaroWrappers::OCTransferBRep_TransferResultInfo^ ResultInfo, System::Boolean printEmpty)
{
  TransferBRep::PrintResultInfo(*((Handle_Message_Printer*)Printer->Handle), *((Message_Msg*)Header->Handle), *((Handle_TransferBRep_TransferResultInfo*)ResultInfo->Handle), OCConverter::BooleanToStandardBoolean(printEmpty));
}

OCInterface_CheckIterator^ OCTransferBRep::BRepCheck(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Integer lev)
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = TransferBRep::BRepCheck(*((TopoDS_Shape*)shape->Handle), lev);
  return gcnew OCInterface_CheckIterator(tmp);
}

OCInterface_CheckIterator^ OCTransferBRep::ResultCheckList(OCNaroWrappers::OCInterface_CheckIterator^ chl, OCNaroWrappers::OCTransfer_FinderProcess^ FP, OCNaroWrappers::OCInterface_InterfaceModel^ model)
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = TransferBRep::ResultCheckList(*((Interface_CheckIterator*)chl->Handle), *((Handle_Transfer_FinderProcess*)FP->Handle), *((Handle_Interface_InterfaceModel*)model->Handle));
  return gcnew OCInterface_CheckIterator(tmp);
}

OCTColStd_HSequenceOfTransient^ OCTransferBRep::Checked(OCNaroWrappers::OCInterface_CheckIterator^ chl, System::Boolean alsoshapes)
{
  Handle(TColStd_HSequenceOfTransient) tmp = TransferBRep::Checked(*((Interface_CheckIterator*)chl->Handle), OCConverter::BooleanToStandardBoolean(alsoshapes));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCTopTools_HSequenceOfShape^ OCTransferBRep::CheckedShapes(OCNaroWrappers::OCInterface_CheckIterator^ chl)
{
  Handle(TopTools_HSequenceOfShape) tmp = TransferBRep::CheckedShapes(*((Interface_CheckIterator*)chl->Handle));
  return gcnew OCTopTools_HSequenceOfShape(&tmp);
}

OCInterface_CheckIterator^ OCTransferBRep::CheckObject(OCNaroWrappers::OCInterface_CheckIterator^ chl, OCNaroWrappers::OCStandard_Transient^ obj)
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = TransferBRep::CheckObject(*((Interface_CheckIterator*)chl->Handle), *((Handle_Standard_Transient*)obj->Handle));
  return gcnew OCInterface_CheckIterator(tmp);
}


