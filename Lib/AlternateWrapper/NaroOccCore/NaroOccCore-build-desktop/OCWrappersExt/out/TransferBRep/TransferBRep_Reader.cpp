// File generated by CPPExt (CPP file)
//

#include "TransferBRep_Reader.h"
#include "../Converter.h"
#include "../Interface/Interface_Protocol.h"
#include "../Transfer/Transfer_ActorOfTransientProcess.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Transfer/Transfer_TransientProcess.h"
#include "../TopTools/TopTools_HSequenceOfShape.h"
#include "../TColStd/TColStd_HSequenceOfTransient.h"
#include "../Interface/Interface_CheckIterator.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../Standard/Standard_Transient.h"


using namespace OCNaroWrappers;

OCTransferBRep_Reader::OCTransferBRep_Reader(TransferBRep_Reader* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTransferBRep_Reader::OCTransferBRep_Reader() 
{
  nativeHandle = new TransferBRep_Reader();
}

 void OCTransferBRep_Reader::SetProtocol(OCNaroWrappers::OCInterface_Protocol^ protocol)
{
  ((TransferBRep_Reader*)nativeHandle)->SetProtocol(*((Handle_Interface_Protocol*)protocol->Handle));
}

OCInterface_Protocol^ OCTransferBRep_Reader::Protocol()
{
  Handle(Interface_Protocol) tmp = ((TransferBRep_Reader*)nativeHandle)->Protocol();
  return gcnew OCInterface_Protocol(&tmp);
}

 void OCTransferBRep_Reader::SetActor(OCNaroWrappers::OCTransfer_ActorOfTransientProcess^ actor)
{
  ((TransferBRep_Reader*)nativeHandle)->SetActor(*((Handle_Transfer_ActorOfTransientProcess*)actor->Handle));
}

OCTransfer_ActorOfTransientProcess^ OCTransferBRep_Reader::Actor()
{
  Handle(Transfer_ActorOfTransientProcess) tmp = ((TransferBRep_Reader*)nativeHandle)->Actor();
  return gcnew OCTransfer_ActorOfTransientProcess(&tmp);
}

 void OCTransferBRep_Reader::SetFileStatus(Standard_Integer status)
{
  ((TransferBRep_Reader*)nativeHandle)->SetFileStatus(status);
}

 Standard_Integer OCTransferBRep_Reader::FileStatus()
{
  return ((TransferBRep_Reader*)nativeHandle)->FileStatus();
}

 System::Boolean OCTransferBRep_Reader::FileNotFound()
{
  return OCConverter::StandardBooleanToBoolean(((TransferBRep_Reader*)nativeHandle)->FileNotFound());
}

 System::Boolean OCTransferBRep_Reader::SyntaxError()
{
  return OCConverter::StandardBooleanToBoolean(((TransferBRep_Reader*)nativeHandle)->SyntaxError());
}

 void OCTransferBRep_Reader::SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model)
{
  ((TransferBRep_Reader*)nativeHandle)->SetModel(*((Handle_Interface_InterfaceModel*)model->Handle));
}

OCInterface_InterfaceModel^ OCTransferBRep_Reader::Model()
{
  Handle(Interface_InterfaceModel) tmp = ((TransferBRep_Reader*)nativeHandle)->Model();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 void OCTransferBRep_Reader::Clear()
{
  ((TransferBRep_Reader*)nativeHandle)->Clear();
}

 System::Boolean OCTransferBRep_Reader::CheckStatusModel(System::Boolean withprint)
{
  return OCConverter::StandardBooleanToBoolean(((TransferBRep_Reader*)nativeHandle)->CheckStatusModel(OCConverter::BooleanToStandardBoolean(withprint)));
}

OCInterface_CheckIterator^ OCTransferBRep_Reader::CheckListModel()
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = ((TransferBRep_Reader*)nativeHandle)->CheckListModel();
  return gcnew OCInterface_CheckIterator(tmp);
}

 System::Boolean OCTransferBRep_Reader::ModeNewTransfer()
{
  return OCConverter::StandardBooleanToBoolean(((TransferBRep_Reader*)nativeHandle)->ModeNewTransfer());
}

 System::Boolean OCTransferBRep_Reader::BeginTransfer()
{
  return OCConverter::StandardBooleanToBoolean(((TransferBRep_Reader*)nativeHandle)->BeginTransfer());
}

 void OCTransferBRep_Reader::EndTransfer()
{
  ((TransferBRep_Reader*)nativeHandle)->EndTransfer();
}

 void OCTransferBRep_Reader::PrepareTransfer()
{
  ((TransferBRep_Reader*)nativeHandle)->PrepareTransfer();
}

 void OCTransferBRep_Reader::TransferRoots()
{
  ((TransferBRep_Reader*)nativeHandle)->TransferRoots();
}

 System::Boolean OCTransferBRep_Reader::Transfer(Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean(((TransferBRep_Reader*)nativeHandle)->Transfer(num));
}

 void OCTransferBRep_Reader::TransferList(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list)
{
  ((TransferBRep_Reader*)nativeHandle)->TransferList(*((Handle_TColStd_HSequenceOfTransient*)list->Handle));
}

 System::Boolean OCTransferBRep_Reader::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((TransferBRep_Reader*)nativeHandle)->IsDone());
}

 Standard_Integer OCTransferBRep_Reader::NbShapes()
{
  return ((TransferBRep_Reader*)nativeHandle)->NbShapes();
}

OCTopTools_HSequenceOfShape^ OCTransferBRep_Reader::Shapes()
{
  Handle(TopTools_HSequenceOfShape) tmp = ((TransferBRep_Reader*)nativeHandle)->Shapes();
  return gcnew OCTopTools_HSequenceOfShape(&tmp);
}

OCTopoDS_Shape^ OCTransferBRep_Reader::Shape(Standard_Integer num)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TransferBRep_Reader*)nativeHandle)->Shape(num);
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTransferBRep_Reader::ShapeResult(OCNaroWrappers::OCStandard_Transient^ ent)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TransferBRep_Reader*)nativeHandle)->ShapeResult(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTransferBRep_Reader::OneShape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TransferBRep_Reader*)nativeHandle)->OneShape();
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Integer OCTransferBRep_Reader::NbTransients()
{
  return ((TransferBRep_Reader*)nativeHandle)->NbTransients();
}

OCTColStd_HSequenceOfTransient^ OCTransferBRep_Reader::Transients()
{
  Handle(TColStd_HSequenceOfTransient) tmp = ((TransferBRep_Reader*)nativeHandle)->Transients();
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCStandard_Transient^ OCTransferBRep_Reader::Transient(Standard_Integer num)
{
  Handle(Standard_Transient) tmp = ((TransferBRep_Reader*)nativeHandle)->Transient(num);
  return gcnew OCStandard_Transient(&tmp);
}

 System::Boolean OCTransferBRep_Reader::CheckStatusResult(System::Boolean withprints)
{
  return OCConverter::StandardBooleanToBoolean(((TransferBRep_Reader*)nativeHandle)->CheckStatusResult(OCConverter::BooleanToStandardBoolean(withprints)));
}

OCInterface_CheckIterator^ OCTransferBRep_Reader::CheckListResult()
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = ((TransferBRep_Reader*)nativeHandle)->CheckListResult();
  return gcnew OCInterface_CheckIterator(tmp);
}

OCTransfer_TransientProcess^ OCTransferBRep_Reader::TransientProcess()
{
  Handle(Transfer_TransientProcess) tmp = ((TransferBRep_Reader*)nativeHandle)->TransientProcess();
  return gcnew OCTransfer_TransientProcess(&tmp);
}

 void OCTransferBRep_Reader::Destroy()
{
  ((TransferBRep_Reader*)nativeHandle)->Destroy();
}


