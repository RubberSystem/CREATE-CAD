// File generated by CPPExt (MPV)
//
#ifndef _BRepBlend_SurfRstLineBuilder_OCWrappers_HeaderFile
#define _BRepBlend_SurfRstLineBuilder_OCWrappers_HeaderFile

// include native header
#include <BRepBlend_SurfRstLineBuilder.hxx>
#include "../Converter.h"


#include "../math/math_Vector.h"
#include "../Blend/Blend_Point.h"
#include "../Blend/Blend_Status.h"
#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{

ref class OCBRepBlend_Line;
ref class OCAdaptor3d_HSurface;
ref class OCAdaptor3d_TopolTool;
ref class OCAdaptor2d_HCurve2d;
ref class OCBlend_SurfRstFunction;
ref class OCBlend_FuncInv;
ref class OCBlend_SurfPointFuncInv;
ref class OCBlend_SurfCurvFuncInv;
ref class OCmath_Vector;
ref class OCgp_Pnt2d;
ref class OCAdaptor3d_HVertex;
ref class OCIntSurf_Transition;
ref class OCBRepBlend_Extremity;
ref class OCBlend_Point;


//! This  class processes data  resulting  from <br>
//!          Blend_CSWalking  taking  in consideration the Surface <br>
//!          supporting  the curve to detect the breakpoint. <br>
//! <br>
//!          The criteria of  distribution  of  points on  the  line are  detailed <br>
//!          because  it  is  to  be  used  in  the  calculatuon of values approached <br>
//!          by an approximation of functions continued  basing on <br>
//!          Blend_SurfRstFunction. <br>
//! <br>
//!          Thus this pseudo path necessitates 3 criteria of regrouping : <br>
//! <br>
//!          1) exit of the domain of  the curve <br>
//! <br>
//!          2) exit of the domain of  the  surface <br>
//! <br>
//!          3)  stall as there  is a solution to  the problem <br>
//!          surf/surf  within  the  domain of  the surface <br>
//!          of  support  of  the   restriction. <br>
public ref class OCBRepBlend_SurfRstLineBuilder  {

protected:
  BRepBlend_SurfRstLineBuilder* nativeHandle;
  OCBRepBlend_SurfRstLineBuilder(OCDummy^) {};

public:
  property BRepBlend_SurfRstLineBuilder* Handle
  {
    BRepBlend_SurfRstLineBuilder* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepBlend_SurfRstLineBuilder(BRepBlend_SurfRstLineBuilder* nativeHandle);

// Methods PUBLIC


OCBRepBlend_SurfRstLineBuilder(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor3d_TopolTool^ Domain1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, OCNaroWrappers::OCAdaptor2d_HCurve2d^ Rst, OCNaroWrappers::OCAdaptor3d_TopolTool^ Domain2);


 /*instead*/  void Perform(OCNaroWrappers::OCBlend_SurfRstFunction^ Func, OCNaroWrappers::OCBlend_FuncInv^ Finv, OCNaroWrappers::OCBlend_SurfPointFuncInv^ FinvP, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ FinvC, Standard_Real Pdep, Standard_Real Pmax, Standard_Real MaxStep, Standard_Real TolGuide, OCNaroWrappers::OCmath_Vector^ Soldep, Standard_Real Tolesp, Standard_Real Fleche, System::Boolean Appro) ;


 /*instead*/  System::Boolean PerformFirstSection(OCNaroWrappers::OCBlend_SurfRstFunction^ Func, OCNaroWrappers::OCBlend_FuncInv^ Finv, OCNaroWrappers::OCBlend_SurfPointFuncInv^ FinvP, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ FinvC, Standard_Real Pdep, Standard_Real Pmax, OCNaroWrappers::OCmath_Vector^ Soldep, Standard_Real Tolesp, Standard_Real TolGuide, System::Boolean RecRst, System::Boolean RecP, System::Boolean RecS, Standard_Real& Psol, OCNaroWrappers::OCmath_Vector^ ParSol) ;


 /*instead*/  System::Boolean Complete(OCNaroWrappers::OCBlend_SurfRstFunction^ Func, OCNaroWrappers::OCBlend_FuncInv^ Finv, OCNaroWrappers::OCBlend_SurfPointFuncInv^ FinvP, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ FinvC, Standard_Real Pmin) ;


 /*instead*/  Standard_Integer ArcToRecadre(OCNaroWrappers::OCmath_Vector^ Sol, Standard_Integer PrevIndex, OCNaroWrappers::OCgp_Pnt2d^ pt2d, OCNaroWrappers::OCgp_Pnt2d^ lastpt2d, Standard_Real& ponarc) ;


 /*instead*/  System::Boolean IsDone() ;


 /*instead*/  OCBRepBlend_Line^ Line() ;


 /*instead*/  System::Boolean DecrochStart() ;


 /*instead*/  System::Boolean DecrochEnd() ;

~OCBRepBlend_SurfRstLineBuilder()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
