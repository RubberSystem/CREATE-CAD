// File generated by CPPExt (CPP file)
//

#include "BRepBlend_HCurveTool.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../Geom/Geom_BezierCurve.h"
#include "../Geom/Geom_BSplineCurve.h"


using namespace OCNaroWrappers;

OCBRepBlend_HCurveTool::OCBRepBlend_HCurveTool(BRepBlend_HCurveTool* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Real OCBRepBlend_HCurveTool::FirstParameter(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return BRepBlend_HCurveTool::FirstParameter(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

 Standard_Real OCBRepBlend_HCurveTool::LastParameter(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return BRepBlend_HCurveTool::LastParameter(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

 OCGeomAbs_Shape OCBRepBlend_HCurveTool::Continuity(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return (OCGeomAbs_Shape)(BRepBlend_HCurveTool::Continuity(*((Handle_Adaptor3d_HCurve*)C->Handle)));
}

 Standard_Integer OCBRepBlend_HCurveTool::NbIntervals(OCNaroWrappers::OCAdaptor3d_HCurve^ C, OCGeomAbs_Shape S)
{
  return BRepBlend_HCurveTool::NbIntervals(*((Handle_Adaptor3d_HCurve*)C->Handle), (GeomAbs_Shape)S);
}

 void OCBRepBlend_HCurveTool::Intervals(OCNaroWrappers::OCAdaptor3d_HCurve^ C, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  BRepBlend_HCurveTool::Intervals(*((Handle_Adaptor3d_HCurve*)C->Handle), *((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 System::Boolean OCBRepBlend_HCurveTool::IsClosed(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return OCConverter::StandardBooleanToBoolean(BRepBlend_HCurveTool::IsClosed(*((Handle_Adaptor3d_HCurve*)C->Handle)));
}

 System::Boolean OCBRepBlend_HCurveTool::IsPeriodic(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return OCConverter::StandardBooleanToBoolean(BRepBlend_HCurveTool::IsPeriodic(*((Handle_Adaptor3d_HCurve*)C->Handle)));
}

 Standard_Real OCBRepBlend_HCurveTool::Period(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return BRepBlend_HCurveTool::Period(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

OCgp_Pnt^ OCBRepBlend_HCurveTool::Value(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = BRepBlend_HCurveTool::Value(*((Handle_Adaptor3d_HCurve*)C->Handle), U);
  return gcnew OCgp_Pnt(tmp);
}

 void OCBRepBlend_HCurveTool::D0(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  BRepBlend_HCurveTool::D0(*((Handle_Adaptor3d_HCurve*)C->Handle), U, *((gp_Pnt*)P->Handle));
}

 void OCBRepBlend_HCurveTool::D1(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V)
{
  BRepBlend_HCurveTool::D1(*((Handle_Adaptor3d_HCurve*)C->Handle), U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V->Handle));
}

 void OCBRepBlend_HCurveTool::D2(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  BRepBlend_HCurveTool::D2(*((Handle_Adaptor3d_HCurve*)C->Handle), U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCBRepBlend_HCurveTool::D3(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  BRepBlend_HCurveTool::D3(*((Handle_Adaptor3d_HCurve*)C->Handle), U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCBRepBlend_HCurveTool::DN(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = BRepBlend_HCurveTool::DN(*((Handle_Adaptor3d_HCurve*)C->Handle), U, N);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCBRepBlend_HCurveTool::Resolution(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real R3d)
{
  return BRepBlend_HCurveTool::Resolution(*((Handle_Adaptor3d_HCurve*)C->Handle), R3d);
}

 OCGeomAbs_CurveType OCBRepBlend_HCurveTool::GetType(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return (OCGeomAbs_CurveType)(BRepBlend_HCurveTool::GetType(*((Handle_Adaptor3d_HCurve*)C->Handle)));
}

OCgp_Lin^ OCBRepBlend_HCurveTool::Line(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = BRepBlend_HCurveTool::Line(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCBRepBlend_HCurveTool::Circle(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = BRepBlend_HCurveTool::Circle(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCBRepBlend_HCurveTool::Ellipse(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = BRepBlend_HCurveTool::Ellipse(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Elips(tmp);
}

OCgp_Hypr^ OCBRepBlend_HCurveTool::Hyperbola(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = BRepBlend_HCurveTool::Hyperbola(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Hypr(tmp);
}

OCgp_Parab^ OCBRepBlend_HCurveTool::Parabola(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = BRepBlend_HCurveTool::Parabola(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Parab(tmp);
}

OCGeom_BezierCurve^ OCBRepBlend_HCurveTool::Bezier(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  Handle(Geom_BezierCurve) tmp = BRepBlend_HCurveTool::Bezier(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCGeom_BezierCurve(&tmp);
}

OCGeom_BSplineCurve^ OCBRepBlend_HCurveTool::BSpline(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  Handle(Geom_BSplineCurve) tmp = BRepBlend_HCurveTool::BSpline(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCGeom_BSplineCurve(&tmp);
}

 Standard_Integer OCBRepBlend_HCurveTool::NbSamples(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U0, Standard_Real U1)
{
  return BRepBlend_HCurveTool::NbSamples(*((Handle_Adaptor3d_HCurve*)C->Handle), U0, U1);
}


