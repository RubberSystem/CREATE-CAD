// File generated by CPPExt (CPP file)
//

#include "BRepBlend_RstRstConstRad.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../math/math_Vector.h"
#include "../math/math_Matrix.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Circ.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../Blend/Blend_Point.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../TColgp/TColgp_Array1OfVec.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../TColgp/TColgp_Array1OfVec2d.h"


using namespace OCNaroWrappers;

OCBRepBlend_RstRstConstRad::OCBRepBlend_RstRstConstRad(BRepBlend_RstRstConstRad* nativeHandle) : OCBlend_RstRstFunction((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCBRepBlend_RstRstConstRad::OCBRepBlend_RstRstConstRad(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor2d_HCurve2d^ Rst1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, OCNaroWrappers::OCAdaptor2d_HCurve2d^ Rst2, OCNaroWrappers::OCAdaptor3d_HCurve^ CGuide) : OCBlend_RstRstFunction((OCDummy^)nullptr)

{
  nativeHandle = new BRepBlend_RstRstConstRad(*((Handle_Adaptor3d_HSurface*)Surf1->Handle), *((Handle_Adaptor2d_HCurve2d*)Rst1->Handle), *((Handle_Adaptor3d_HSurface*)Surf2->Handle), *((Handle_Adaptor2d_HCurve2d*)Rst2->Handle), *((Handle_Adaptor3d_HCurve*)CGuide->Handle));
}

 Standard_Integer OCBRepBlend_RstRstConstRad::NbVariables()
{
  return ((BRepBlend_RstRstConstRad*)nativeHandle)->NbVariables();
}

 Standard_Integer OCBRepBlend_RstRstConstRad::NbEquations()
{
  return ((BRepBlend_RstRstConstRad*)nativeHandle)->NbEquations();
}

 System::Boolean OCBRepBlend_RstRstConstRad::Value(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->Value(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle)));
}

 System::Boolean OCBRepBlend_RstRstConstRad::Derivatives(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->Derivatives(*((math_Vector*)X->Handle), *((math_Matrix*)D->Handle)));
}

 System::Boolean OCBRepBlend_RstRstConstRad::Values(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->Values(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle), *((math_Matrix*)D->Handle)));
}

 void OCBRepBlend_RstRstConstRad::Set(OCNaroWrappers::OCAdaptor3d_HSurface^ SurfRef1, OCNaroWrappers::OCAdaptor2d_HCurve2d^ RstRef1, OCNaroWrappers::OCAdaptor3d_HSurface^ SurfRef2, OCNaroWrappers::OCAdaptor2d_HCurve2d^ RstRef2)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Set(*((Handle_Adaptor3d_HSurface*)SurfRef1->Handle), *((Handle_Adaptor2d_HCurve2d*)RstRef1->Handle), *((Handle_Adaptor3d_HSurface*)SurfRef2->Handle), *((Handle_Adaptor2d_HCurve2d*)RstRef2->Handle));
}

 void OCBRepBlend_RstRstConstRad::Set(Standard_Real Param)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Set(Param);
}

 void OCBRepBlend_RstRstConstRad::Set(Standard_Real First, Standard_Real Last)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Set(First, Last);
}

 void OCBRepBlend_RstRstConstRad::GetTolerance(OCNaroWrappers::OCmath_Vector^ Tolerance, Standard_Real Tol)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->GetTolerance(*((math_Vector*)Tolerance->Handle), Tol);
}

 void OCBRepBlend_RstRstConstRad::GetBounds(OCNaroWrappers::OCmath_Vector^ InfBound, OCNaroWrappers::OCmath_Vector^ SupBound)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->GetBounds(*((math_Vector*)InfBound->Handle), *((math_Vector*)SupBound->Handle));
}

 System::Boolean OCBRepBlend_RstRstConstRad::IsSolution(OCNaroWrappers::OCmath_Vector^ Sol, Standard_Real Tol)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->IsSolution(*((math_Vector*)Sol->Handle), Tol));
}

 Standard_Real OCBRepBlend_RstRstConstRad::GetMinimalDistance()
{
  return ((BRepBlend_RstRstConstRad*)nativeHandle)->GetMinimalDistance();
}

OCgp_Pnt^ OCBRepBlend_RstRstConstRad::PointOnRst1()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BRepBlend_RstRstConstRad*)nativeHandle)->PointOnRst1();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCBRepBlend_RstRstConstRad::PointOnRst2()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BRepBlend_RstRstConstRad*)nativeHandle)->PointOnRst2();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt2d^ OCBRepBlend_RstRstConstRad::Pnt2dOnRst1()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((BRepBlend_RstRstConstRad*)nativeHandle)->Pnt2dOnRst1();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Pnt2d^ OCBRepBlend_RstRstConstRad::Pnt2dOnRst2()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((BRepBlend_RstRstConstRad*)nativeHandle)->Pnt2dOnRst2();
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Real OCBRepBlend_RstRstConstRad::ParameterOnRst1()
{
  return ((BRepBlend_RstRstConstRad*)nativeHandle)->ParameterOnRst1();
}

 Standard_Real OCBRepBlend_RstRstConstRad::ParameterOnRst2()
{
  return ((BRepBlend_RstRstConstRad*)nativeHandle)->ParameterOnRst2();
}

 System::Boolean OCBRepBlend_RstRstConstRad::IsTangencyPoint()
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->IsTangencyPoint());
}

OCgp_Vec^ OCBRepBlend_RstRstConstRad::TangentOnRst1()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepBlend_RstRstConstRad*)nativeHandle)->TangentOnRst1();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec2d^ OCBRepBlend_RstRstConstRad::Tangent2dOnRst1()
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((BRepBlend_RstRstConstRad*)nativeHandle)->Tangent2dOnRst1();
  return gcnew OCgp_Vec2d(tmp);
}

OCgp_Vec^ OCBRepBlend_RstRstConstRad::TangentOnRst2()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepBlend_RstRstConstRad*)nativeHandle)->TangentOnRst2();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec2d^ OCBRepBlend_RstRstConstRad::Tangent2dOnRst2()
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((BRepBlend_RstRstConstRad*)nativeHandle)->Tangent2dOnRst2();
  return gcnew OCgp_Vec2d(tmp);
}

 OCBlend_DecrochStatus OCBRepBlend_RstRstConstRad::Decroch(OCNaroWrappers::OCmath_Vector^ Sol, OCNaroWrappers::OCgp_Vec^ NRst1, OCNaroWrappers::OCgp_Vec^ TgRst1, OCNaroWrappers::OCgp_Vec^ NRst2, OCNaroWrappers::OCgp_Vec^ TgRst2)
{
  return (OCBlend_DecrochStatus)(((BRepBlend_RstRstConstRad*)nativeHandle)->Decroch(*((math_Vector*)Sol->Handle), *((gp_Vec*)NRst1->Handle), *((gp_Vec*)TgRst1->Handle), *((gp_Vec*)NRst2->Handle), *((gp_Vec*)TgRst2->Handle)));
}

 void OCBRepBlend_RstRstConstRad::Set(Standard_Real Radius, Standard_Integer Choix)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Set(Radius, Choix);
}

 void OCBRepBlend_RstRstConstRad::Set(OCBlendFunc_SectionShape TypeSection)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Set((BlendFunc_SectionShape)TypeSection);
}

 System::Boolean OCBRepBlend_RstRstConstRad::CenterCircleRst1Rst2(OCNaroWrappers::OCgp_Pnt^ PtRst1, OCNaroWrappers::OCgp_Pnt^ PtRst2, OCNaroWrappers::OCgp_Vec^ np, OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Vec^ VdMed)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->CenterCircleRst1Rst2(*((gp_Pnt*)PtRst1->Handle), *((gp_Pnt*)PtRst2->Handle), *((gp_Vec*)np->Handle), *((gp_Pnt*)Center->Handle), *((gp_Vec*)VdMed->Handle)));
}

 void OCBRepBlend_RstRstConstRad::Section(Standard_Real Param, Standard_Real U, Standard_Real V, Standard_Real& Pdeb, Standard_Real& Pfin, OCNaroWrappers::OCgp_Circ^ C)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Section(Param, U, V, Pdeb, Pfin, *((gp_Circ*)C->Handle));
}

 System::Boolean OCBRepBlend_RstRstConstRad::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->IsRational());
}

 Standard_Real OCBRepBlend_RstRstConstRad::GetSectionSize()
{
  return ((BRepBlend_RstRstConstRad*)nativeHandle)->GetSectionSize();
}

 void OCBRepBlend_RstRstConstRad::GetMinimalWeight(OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->GetMinimalWeight(*((TColStd_Array1OfReal*)Weigths->Handle));
}

 Standard_Integer OCBRepBlend_RstRstConstRad::NbIntervals(OCGeomAbs_Shape S)
{
  return ((BRepBlend_RstRstConstRad*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCBRepBlend_RstRstConstRad::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 void OCBRepBlend_RstRstConstRad::GetShape(Standard_Integer& NbPoles, Standard_Integer& NbKnots, Standard_Integer& Degree, Standard_Integer& NbPoles2d)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->GetShape(NbPoles, NbKnots, Degree, NbPoles2d);
}

 void OCBRepBlend_RstRstConstRad::GetTolerance(Standard_Real BoundTol, Standard_Real SurfTol, Standard_Real AngleTol, OCNaroWrappers::OCmath_Vector^ Tol3d, OCNaroWrappers::OCmath_Vector^ Tol1D)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->GetTolerance(BoundTol, SurfTol, AngleTol, *((math_Vector*)Tol3d->Handle), *((math_Vector*)Tol1D->Handle));
}

 void OCBRepBlend_RstRstConstRad::Knots(OCNaroWrappers::OCTColStd_Array1OfReal^ TKnots)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Knots(*((TColStd_Array1OfReal*)TKnots->Handle));
}

 void OCBRepBlend_RstRstConstRad::Mults(OCNaroWrappers::OCTColStd_Array1OfInteger^ TMults)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Mults(*((TColStd_Array1OfInteger*)TMults->Handle));
}

 System::Boolean OCBRepBlend_RstRstConstRad::Section(OCNaroWrappers::OCBlend_Point^ P, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->Section(*((Blend_Point*)P->Handle), *((TColgp_Array1OfPnt*)Poles->Handle), *((TColgp_Array1OfVec*)DPoles->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColgp_Array1OfVec2d*)DPoles2d->Handle), *((TColStd_Array1OfReal*)Weigths->Handle), *((TColStd_Array1OfReal*)DWeigths->Handle)));
}

 void OCBRepBlend_RstRstConstRad::Section(OCNaroWrappers::OCBlend_Point^ P, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Section(*((Blend_Point*)P->Handle), *((TColgp_Array1OfPnt*)Poles->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColStd_Array1OfReal*)Weigths->Handle));
}

 System::Boolean OCBRepBlend_RstRstConstRad::Section(OCNaroWrappers::OCBlend_Point^ P, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColgp_Array1OfVec^ D2Poles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ D2Poles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths, OCNaroWrappers::OCTColStd_Array1OfReal^ D2Weigths)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_RstRstConstRad*)nativeHandle)->Section(*((Blend_Point*)P->Handle), *((TColgp_Array1OfPnt*)Poles->Handle), *((TColgp_Array1OfVec*)DPoles->Handle), *((TColgp_Array1OfVec*)D2Poles->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColgp_Array1OfVec2d*)DPoles2d->Handle), *((TColgp_Array1OfVec2d*)D2Poles2d->Handle), *((TColStd_Array1OfReal*)Weigths->Handle), *((TColStd_Array1OfReal*)DWeigths->Handle), *((TColStd_Array1OfReal*)D2Weigths->Handle)));
}

 void OCBRepBlend_RstRstConstRad::Resolution(Standard_Integer IC2d, Standard_Real Tol, Standard_Real& TolU, Standard_Real& TolV)
{
  ((BRepBlend_RstRstConstRad*)nativeHandle)->Resolution(IC2d, Tol, TolU, TolV);
}


