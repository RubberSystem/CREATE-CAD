// File generated by CPPExt (CPP file)
//

#include "BRepBlend_SurfCurvConstRadInv.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../math/math_Vector.h"
#include "../math/math_Matrix.h"


using namespace OCNaroWrappers;

OCBRepBlend_SurfCurvConstRadInv::OCBRepBlend_SurfCurvConstRadInv(BRepBlend_SurfCurvConstRadInv* nativeHandle) : OCBlend_SurfCurvFuncInv((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCBRepBlend_SurfCurvConstRadInv::OCBRepBlend_SurfCurvConstRadInv(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCAdaptor3d_HCurve^ C, OCNaroWrappers::OCAdaptor3d_HCurve^ Cg) : OCBlend_SurfCurvFuncInv((OCDummy^)nullptr)

{
  nativeHandle = new BRepBlend_SurfCurvConstRadInv(*((Handle_Adaptor3d_HSurface*)S->Handle), *((Handle_Adaptor3d_HCurve*)C->Handle), *((Handle_Adaptor3d_HCurve*)Cg->Handle));
}

 void OCBRepBlend_SurfCurvConstRadInv::Set(Standard_Real R, Standard_Integer Choix)
{
  ((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->Set(R, Choix);
}

 Standard_Integer OCBRepBlend_SurfCurvConstRadInv::NbEquations()
{
  return ((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->NbEquations();
}

 System::Boolean OCBRepBlend_SurfCurvConstRadInv::Value(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->Value(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle)));
}

 System::Boolean OCBRepBlend_SurfCurvConstRadInv::Derivatives(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->Derivatives(*((math_Vector*)X->Handle), *((math_Matrix*)D->Handle)));
}

 System::Boolean OCBRepBlend_SurfCurvConstRadInv::Values(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->Values(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle), *((math_Matrix*)D->Handle)));
}

 void OCBRepBlend_SurfCurvConstRadInv::Set(OCNaroWrappers::OCAdaptor2d_HCurve2d^ Rst)
{
  ((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->Set(*((Handle_Adaptor2d_HCurve2d*)Rst->Handle));
}

 void OCBRepBlend_SurfCurvConstRadInv::GetTolerance(OCNaroWrappers::OCmath_Vector^ Tolerance, Standard_Real Tol)
{
  ((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->GetTolerance(*((math_Vector*)Tolerance->Handle), Tol);
}

 void OCBRepBlend_SurfCurvConstRadInv::GetBounds(OCNaroWrappers::OCmath_Vector^ InfBound, OCNaroWrappers::OCmath_Vector^ SupBound)
{
  ((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->GetBounds(*((math_Vector*)InfBound->Handle), *((math_Vector*)SupBound->Handle));
}

 System::Boolean OCBRepBlend_SurfCurvConstRadInv::IsSolution(OCNaroWrappers::OCmath_Vector^ Sol, Standard_Real Tol)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_SurfCurvConstRadInv*)nativeHandle)->IsSolution(*((math_Vector*)Sol->Handle), Tol));
}


