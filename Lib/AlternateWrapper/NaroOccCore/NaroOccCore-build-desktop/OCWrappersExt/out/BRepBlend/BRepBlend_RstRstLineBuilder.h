// File generated by CPPExt (MPV)
//
#ifndef _BRepBlend_RstRstLineBuilder_OCWrappers_HeaderFile
#define _BRepBlend_RstRstLineBuilder_OCWrappers_HeaderFile

// include native header
#include <BRepBlend_RstRstLineBuilder.hxx>
#include "../Converter.h"


#include "../math/math_Vector.h"
#include "../Blend/Blend_Point.h"
#include "../Blend/Blend_DecrochStatus.h"
#include "../Blend/Blend_Status.h"
#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{

ref class OCBRepBlend_Line;
ref class OCAdaptor3d_HSurface;
ref class OCAdaptor3d_TopolTool;
ref class OCAdaptor2d_HCurve2d;
ref class OCBlend_RstRstFunction;
ref class OCBlend_SurfCurvFuncInv;
ref class OCBlend_CurvPointFuncInv;
ref class OCmath_Vector;
ref class OCAdaptor3d_HVertex;
ref class OCIntSurf_Transition;
ref class OCBRepBlend_Extremity;
ref class OCBlend_Point;


//! This  class processes the  data  resulting from <br>
//!          Blend_CSWalking  but  it  takes  in  consideration the Surface <br>
//!          supporting  the  curve to detect the  breakpoint. <br>
//! <br>
//!          As  a  result, the  criteria of distribution of <br>
//!          points on  the line become  more flexible  because  it <br>
//!          should  calculate values  approached <br>
//!          by an approximation of continued  functions based on the <br>
//!          Blend_RstRstFunction. <br>
//! <br>
//!          Thus this pseudo path necessitates 3 criteria  of <br>
//!          regrouping : <br>
//! <br>
//!          1) exit of  the domain of  the  curve <br>
//! <br>
//!          2) exit of  the domain of  the surface <br>
//! <br>
//!          3) stall as there  is a solution of problem <br>
//!          surf/surf  within the domain  of the  surface <br>
//!          of support of the restriction. <br>
public ref class OCBRepBlend_RstRstLineBuilder  {

protected:
  BRepBlend_RstRstLineBuilder* nativeHandle;
  OCBRepBlend_RstRstLineBuilder(OCDummy^) {};

public:
  property BRepBlend_RstRstLineBuilder* Handle
  {
    BRepBlend_RstRstLineBuilder* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepBlend_RstRstLineBuilder(BRepBlend_RstRstLineBuilder* nativeHandle);

// Methods PUBLIC


OCBRepBlend_RstRstLineBuilder(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor2d_HCurve2d^ Rst1, OCNaroWrappers::OCAdaptor3d_TopolTool^ Domain1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, OCNaroWrappers::OCAdaptor2d_HCurve2d^ Rst2, OCNaroWrappers::OCAdaptor3d_TopolTool^ Domain2);


 /*instead*/  void Perform(OCNaroWrappers::OCBlend_RstRstFunction^ Func, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ Finv1, OCNaroWrappers::OCBlend_CurvPointFuncInv^ FinvP1, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ Finv2, OCNaroWrappers::OCBlend_CurvPointFuncInv^ FinvP2, Standard_Real Pdep, Standard_Real Pmax, Standard_Real MaxStep, Standard_Real TolGuide, OCNaroWrappers::OCmath_Vector^ Soldep, Standard_Real Tolesp, Standard_Real Fleche, System::Boolean Appro) ;


 /*instead*/  System::Boolean PerformFirstSection(OCNaroWrappers::OCBlend_RstRstFunction^ Func, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ Finv1, OCNaroWrappers::OCBlend_CurvPointFuncInv^ FinvP1, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ Finv2, OCNaroWrappers::OCBlend_CurvPointFuncInv^ FinvP2, Standard_Real Pdep, Standard_Real Pmax, OCNaroWrappers::OCmath_Vector^ Soldep, Standard_Real Tolesp, Standard_Real TolGuide, System::Boolean RecRst1, System::Boolean RecP1, System::Boolean RecRst2, System::Boolean RecP2, Standard_Real& Psol, OCNaroWrappers::OCmath_Vector^ ParSol) ;


 /*instead*/  System::Boolean Complete(OCNaroWrappers::OCBlend_RstRstFunction^ Func, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ Finv1, OCNaroWrappers::OCBlend_CurvPointFuncInv^ FinvP1, OCNaroWrappers::OCBlend_SurfCurvFuncInv^ Finv2, OCNaroWrappers::OCBlend_CurvPointFuncInv^ FinvP2, Standard_Real Pmin) ;


 /*instead*/  System::Boolean IsDone() ;


 /*instead*/  OCBRepBlend_Line^ Line() ;


 /*instead*/  System::Boolean Decroch1Start() ;


 /*instead*/  System::Boolean Decroch1End() ;


 /*instead*/  System::Boolean Decroch2Start() ;


 /*instead*/  System::Boolean Decroch2End() ;

~OCBRepBlend_RstRstLineBuilder()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
