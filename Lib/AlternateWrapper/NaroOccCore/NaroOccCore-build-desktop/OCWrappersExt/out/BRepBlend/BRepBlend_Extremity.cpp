// File generated by CPPExt (CPP file)
//

#include "BRepBlend_Extremity.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HVertex.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "BRepBlend_PointOnRst.h"
#include "BRepBlend_SequenceOfPointOnRst.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../IntSurf/IntSurf_Transition.h"


using namespace OCNaroWrappers;

OCBRepBlend_Extremity::OCBRepBlend_Extremity(BRepBlend_Extremity* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepBlend_Extremity::OCBRepBlend_Extremity() 
{
  nativeHandle = new BRepBlend_Extremity();
}

OCBRepBlend_Extremity::OCBRepBlend_Extremity(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V, Standard_Real Param, Standard_Real Tol) 
{
  nativeHandle = new BRepBlend_Extremity(*((gp_Pnt*)P->Handle), U, V, Param, Tol);
}

OCBRepBlend_Extremity::OCBRepBlend_Extremity(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V, Standard_Real Param, Standard_Real Tol, OCNaroWrappers::OCAdaptor3d_HVertex^ Vtx) 
{
  nativeHandle = new BRepBlend_Extremity(*((gp_Pnt*)P->Handle), U, V, Param, Tol, *((Handle_Adaptor3d_HVertex*)Vtx->Handle));
}

OCBRepBlend_Extremity::OCBRepBlend_Extremity(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real W, Standard_Real Param, Standard_Real Tol) 
{
  nativeHandle = new BRepBlend_Extremity(*((gp_Pnt*)P->Handle), W, Param, Tol);
}

 void OCBRepBlend_Extremity::SetValue(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V, Standard_Real Param, Standard_Real Tol)
{
  ((BRepBlend_Extremity*)nativeHandle)->SetValue(*((gp_Pnt*)P->Handle), U, V, Param, Tol);
}

 void OCBRepBlend_Extremity::SetValue(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V, Standard_Real Param, Standard_Real Tol, OCNaroWrappers::OCAdaptor3d_HVertex^ Vtx)
{
  ((BRepBlend_Extremity*)nativeHandle)->SetValue(*((gp_Pnt*)P->Handle), U, V, Param, Tol, *((Handle_Adaptor3d_HVertex*)Vtx->Handle));
}

 void OCBRepBlend_Extremity::SetValue(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real W, Standard_Real Param, Standard_Real Tol)
{
  ((BRepBlend_Extremity*)nativeHandle)->SetValue(*((gp_Pnt*)P->Handle), W, Param, Tol);
}

OCgp_Pnt^ OCBRepBlend_Extremity::Value()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BRepBlend_Extremity*)nativeHandle)->Value();
  return gcnew OCgp_Pnt(tmp);
}

 void OCBRepBlend_Extremity::SetTangent(OCNaroWrappers::OCgp_Vec^ Tangent)
{
  ((BRepBlend_Extremity*)nativeHandle)->SetTangent(*((gp_Vec*)Tangent->Handle));
}

 System::Boolean OCBRepBlend_Extremity::HasTangent()
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_Extremity*)nativeHandle)->HasTangent());
}

OCgp_Vec^ OCBRepBlend_Extremity::Tangent()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepBlend_Extremity*)nativeHandle)->Tangent();
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCBRepBlend_Extremity::Tolerance()
{
  return ((BRepBlend_Extremity*)nativeHandle)->Tolerance();
}

 void OCBRepBlend_Extremity::SetVertex(OCNaroWrappers::OCAdaptor3d_HVertex^ V)
{
  ((BRepBlend_Extremity*)nativeHandle)->SetVertex(*((Handle_Adaptor3d_HVertex*)V->Handle));
}

 void OCBRepBlend_Extremity::AddArc(OCNaroWrappers::OCAdaptor2d_HCurve2d^ A, Standard_Real Param, OCNaroWrappers::OCIntSurf_Transition^ TLine, OCNaroWrappers::OCIntSurf_Transition^ TArc)
{
  ((BRepBlend_Extremity*)nativeHandle)->AddArc(*((Handle_Adaptor2d_HCurve2d*)A->Handle), Param, *((IntSurf_Transition*)TLine->Handle), *((IntSurf_Transition*)TArc->Handle));
}

 void OCBRepBlend_Extremity::Parameters(Standard_Real& U, Standard_Real& V)
{
  ((BRepBlend_Extremity*)nativeHandle)->Parameters(U, V);
}

 System::Boolean OCBRepBlend_Extremity::IsVertex()
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_Extremity*)nativeHandle)->IsVertex());
}

OCAdaptor3d_HVertex^ OCBRepBlend_Extremity::Vertex()
{
  Handle(Adaptor3d_HVertex) tmp = ((BRepBlend_Extremity*)nativeHandle)->Vertex();
  return gcnew OCAdaptor3d_HVertex(&tmp);
}

 Standard_Integer OCBRepBlend_Extremity::NbPointOnRst()
{
  return ((BRepBlend_Extremity*)nativeHandle)->NbPointOnRst();
}

OCBRepBlend_PointOnRst^ OCBRepBlend_Extremity::PointOnRst(Standard_Integer Index)
{
  BRepBlend_PointOnRst* tmp = new BRepBlend_PointOnRst();
  *tmp = ((BRepBlend_Extremity*)nativeHandle)->PointOnRst(Index);
  return gcnew OCBRepBlend_PointOnRst(tmp);
}

 Standard_Real OCBRepBlend_Extremity::Parameter()
{
  return ((BRepBlend_Extremity*)nativeHandle)->Parameter();
}

 Standard_Real OCBRepBlend_Extremity::ParameterOnGuide()
{
  return ((BRepBlend_Extremity*)nativeHandle)->ParameterOnGuide();
}


