// File generated by CPPExt (MPV)
//
#ifndef _BRepBlend_Walking_OCWrappers_HeaderFile
#define _BRepBlend_Walking_OCWrappers_HeaderFile

// include native header
#include <BRepBlend_Walking.hxx>
#include "../Converter.h"


#include "../Blend/Blend_Point.h"
#include "../math/math_Vector.h"
#include "../Blend/Blend_SequenceOfPoint.h"
#include "../TopAbs/TopAbs_State.h"
#include "../Blend/Blend_Status.h"


namespace OCNaroWrappers
{

ref class OCBRepBlend_Line;
ref class OCAdaptor3d_HSurface;
ref class OCAdaptor3d_TopolTool;
ref class OCAdaptor3d_HVertex;
ref class OCAdaptor2d_HCurve2d;
ref class OCAdaptor3d_HCurve;
ref class OCBRepBlend_HCurve2dTool;
ref class OCAdaptor3d_HSurfaceTool;
ref class OCBRepBlend_HCurveTool;
ref class OCBRepBlend_BlendTool;
ref class OCBRepBlend_PointOnRst;
ref class OCBRepBlend_SequenceOfPointOnRst;
ref class OCBRepBlend_Extremity;
ref class OCBlend_Point;
ref class OCBlend_Function;
ref class OCBlend_FuncInv;
ref class OCmath_Vector;
ref class OCgp_Pnt2d;
ref class OCIntSurf_Transition;



public ref class OCBRepBlend_Walking  {

protected:
  BRepBlend_Walking* nativeHandle;
  OCBRepBlend_Walking(OCDummy^) {};

public:
  property BRepBlend_Walking* Handle
  {
    BRepBlend_Walking* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepBlend_Walking(BRepBlend_Walking* nativeHandle);

// Methods PUBLIC


OCBRepBlend_Walking(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, OCNaroWrappers::OCAdaptor3d_TopolTool^ Domain1, OCNaroWrappers::OCAdaptor3d_TopolTool^ Domain2);


 /*instead*/  void SetDomainsToRecadre(OCNaroWrappers::OCAdaptor3d_TopolTool^ RecDomain1, OCNaroWrappers::OCAdaptor3d_TopolTool^ RecDomain2) ;


 /*instead*/  void AddSingularPoint(OCNaroWrappers::OCBlend_Point^ P) ;


 /*instead*/  void Perform(OCNaroWrappers::OCBlend_Function^ F, OCNaroWrappers::OCBlend_FuncInv^ FInv, Standard_Real Pdep, Standard_Real Pmax, Standard_Real MaxStep, Standard_Real TolGuide, OCNaroWrappers::OCmath_Vector^ Soldep, Standard_Real Tolesp, Standard_Real Fleche, System::Boolean Appro) ;


 /*instead*/  System::Boolean PerformFirstSection(OCNaroWrappers::OCBlend_Function^ F, Standard_Real Pdep, OCNaroWrappers::OCmath_Vector^ ParDep, Standard_Real Tolesp, Standard_Real TolGuide, OCTopAbs_State& Pos1, OCTopAbs_State& Pos2) ;


 /*instead*/  System::Boolean PerformFirstSection(OCNaroWrappers::OCBlend_Function^ F, OCNaroWrappers::OCBlend_FuncInv^ FInv, Standard_Real Pdep, Standard_Real Pmax, OCNaroWrappers::OCmath_Vector^ ParDep, Standard_Real Tolesp, Standard_Real TolGuide, System::Boolean RecOnS1, System::Boolean RecOnS2, Standard_Real& Psol, OCNaroWrappers::OCmath_Vector^ ParSol) ;


 /*instead*/  System::Boolean Continu(OCNaroWrappers::OCBlend_Function^ F, OCNaroWrappers::OCBlend_FuncInv^ FInv, Standard_Real P) ;


 /*instead*/  System::Boolean Continu(OCNaroWrappers::OCBlend_Function^ F, OCNaroWrappers::OCBlend_FuncInv^ FInv, Standard_Real P, System::Boolean OnS1) ;


 /*instead*/  System::Boolean Complete(OCNaroWrappers::OCBlend_Function^ F, OCNaroWrappers::OCBlend_FuncInv^ FInv, Standard_Real Pmin) ;


 /*instead*/  void ClassificationOnS1(System::Boolean C) ;


 /*instead*/  void ClassificationOnS2(System::Boolean C) ;


 /*instead*/  void Check2d(System::Boolean C) ;


 /*instead*/  void Check(System::Boolean C) ;


 /*instead*/  System::Boolean TwistOnS1() ;


 /*instead*/  System::Boolean TwistOnS2() ;


 /*instead*/  System::Boolean IsDone() ;


 /*instead*/  OCBRepBlend_Line^ Line() ;

~OCBRepBlend_Walking()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
