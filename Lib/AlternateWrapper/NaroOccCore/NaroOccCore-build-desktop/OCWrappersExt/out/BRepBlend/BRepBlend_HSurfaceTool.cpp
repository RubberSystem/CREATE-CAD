// File generated by CPPExt (CPP file)
//

#include "BRepBlend_HSurfaceTool.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../Geom/Geom_BezierSurface.h"
#include "../Geom/Geom_BSplineSurface.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"


using namespace OCNaroWrappers;

OCBRepBlend_HSurfaceTool::OCBRepBlend_HSurfaceTool(BRepBlend_HSurfaceTool* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Real OCBRepBlend_HSurfaceTool::FirstUParameter(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return BRepBlend_HSurfaceTool::FirstUParameter(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 Standard_Real OCBRepBlend_HSurfaceTool::FirstVParameter(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return BRepBlend_HSurfaceTool::FirstVParameter(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 Standard_Real OCBRepBlend_HSurfaceTool::LastUParameter(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return BRepBlend_HSurfaceTool::LastUParameter(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 Standard_Real OCBRepBlend_HSurfaceTool::LastVParameter(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return BRepBlend_HSurfaceTool::LastVParameter(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 Standard_Integer OCBRepBlend_HSurfaceTool::NbUIntervals(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCGeomAbs_Shape Sh)
{
  return BRepBlend_HSurfaceTool::NbUIntervals(*((Handle_Adaptor3d_HSurface*)S->Handle), (GeomAbs_Shape)Sh);
}

 Standard_Integer OCBRepBlend_HSurfaceTool::NbVIntervals(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCGeomAbs_Shape Sh)
{
  return BRepBlend_HSurfaceTool::NbVIntervals(*((Handle_Adaptor3d_HSurface*)S->Handle), (GeomAbs_Shape)Sh);
}

 void OCBRepBlend_HSurfaceTool::UIntervals(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape Sh)
{
  BRepBlend_HSurfaceTool::UIntervals(*((Handle_Adaptor3d_HSurface*)S->Handle), *((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)Sh);
}

 void OCBRepBlend_HSurfaceTool::VIntervals(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape Sh)
{
  BRepBlend_HSurfaceTool::VIntervals(*((Handle_Adaptor3d_HSurface*)S->Handle), *((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)Sh);
}

OCAdaptor3d_HSurface^ OCBRepBlend_HSurfaceTool::UTrim(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HSurface) tmp = BRepBlend_HSurfaceTool::UTrim(*((Handle_Adaptor3d_HSurface*)S->Handle), First, Last, Tol);
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

OCAdaptor3d_HSurface^ OCBRepBlend_HSurfaceTool::VTrim(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HSurface) tmp = BRepBlend_HSurfaceTool::VTrim(*((Handle_Adaptor3d_HSurface*)S->Handle), First, Last, Tol);
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

 System::Boolean OCBRepBlend_HSurfaceTool::IsUClosed(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return OCConverter::StandardBooleanToBoolean(BRepBlend_HSurfaceTool::IsUClosed(*((Handle_Adaptor3d_HSurface*)S->Handle)));
}

 System::Boolean OCBRepBlend_HSurfaceTool::IsVClosed(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return OCConverter::StandardBooleanToBoolean(BRepBlend_HSurfaceTool::IsVClosed(*((Handle_Adaptor3d_HSurface*)S->Handle)));
}

 System::Boolean OCBRepBlend_HSurfaceTool::IsUPeriodic(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return OCConverter::StandardBooleanToBoolean(BRepBlend_HSurfaceTool::IsUPeriodic(*((Handle_Adaptor3d_HSurface*)S->Handle)));
}

 Standard_Real OCBRepBlend_HSurfaceTool::UPeriod(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return BRepBlend_HSurfaceTool::UPeriod(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 System::Boolean OCBRepBlend_HSurfaceTool::IsVPeriodic(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return OCConverter::StandardBooleanToBoolean(BRepBlend_HSurfaceTool::IsVPeriodic(*((Handle_Adaptor3d_HSurface*)S->Handle)));
}

 Standard_Real OCBRepBlend_HSurfaceTool::VPeriod(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return BRepBlend_HSurfaceTool::VPeriod(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

OCgp_Pnt^ OCBRepBlend_HSurfaceTool::Value(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = BRepBlend_HSurfaceTool::Value(*((Handle_Adaptor3d_HSurface*)S->Handle), u, v);
  return gcnew OCgp_Pnt(tmp);
}

 void OCBRepBlend_HSurfaceTool::D0(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, OCNaroWrappers::OCgp_Pnt^ P)
{
  BRepBlend_HSurfaceTool::D0(*((Handle_Adaptor3d_HSurface*)S->Handle), u, v, *((gp_Pnt*)P->Handle));
}

 void OCBRepBlend_HSurfaceTool::D1(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1u, OCNaroWrappers::OCgp_Vec^ D1v)
{
  BRepBlend_HSurfaceTool::D1(*((Handle_Adaptor3d_HSurface*)S->Handle), u, v, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1u->Handle), *((gp_Vec*)D1v->Handle));
}

 void OCBRepBlend_HSurfaceTool::D2(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  BRepBlend_HSurfaceTool::D2(*((Handle_Adaptor3d_HSurface*)S->Handle), u, v, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCBRepBlend_HSurfaceTool::D3(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  BRepBlend_HSurfaceTool::D3(*((Handle_Adaptor3d_HSurface*)S->Handle), u, v, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCBRepBlend_HSurfaceTool::DN(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = BRepBlend_HSurfaceTool::DN(*((Handle_Adaptor3d_HSurface*)S->Handle), u, v, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCBRepBlend_HSurfaceTool::UResolution(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real R3d)
{
  return BRepBlend_HSurfaceTool::UResolution(*((Handle_Adaptor3d_HSurface*)S->Handle), R3d);
}

 Standard_Real OCBRepBlend_HSurfaceTool::VResolution(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real R3d)
{
  return BRepBlend_HSurfaceTool::VResolution(*((Handle_Adaptor3d_HSurface*)S->Handle), R3d);
}

 OCGeomAbs_SurfaceType OCBRepBlend_HSurfaceTool::GetType(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return (OCGeomAbs_SurfaceType)(BRepBlend_HSurfaceTool::GetType(*((Handle_Adaptor3d_HSurface*)S->Handle)));
}

OCgp_Pln^ OCBRepBlend_HSurfaceTool::Plane(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = BRepBlend_HSurfaceTool::Plane(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCgp_Pln(tmp);
}

OCgp_Cylinder^ OCBRepBlend_HSurfaceTool::Cylinder(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  gp_Cylinder* tmp = new gp_Cylinder();
  *tmp = BRepBlend_HSurfaceTool::Cylinder(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCgp_Cylinder(tmp);
}

OCgp_Cone^ OCBRepBlend_HSurfaceTool::Cone(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  gp_Cone* tmp = new gp_Cone();
  *tmp = BRepBlend_HSurfaceTool::Cone(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCgp_Cone(tmp);
}

OCgp_Torus^ OCBRepBlend_HSurfaceTool::Torus(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  gp_Torus* tmp = new gp_Torus();
  *tmp = BRepBlend_HSurfaceTool::Torus(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCgp_Torus(tmp);
}

OCgp_Sphere^ OCBRepBlend_HSurfaceTool::Sphere(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  gp_Sphere* tmp = new gp_Sphere();
  *tmp = BRepBlend_HSurfaceTool::Sphere(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCgp_Sphere(tmp);
}

OCGeom_BezierSurface^ OCBRepBlend_HSurfaceTool::Bezier(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  Handle(Geom_BezierSurface) tmp = BRepBlend_HSurfaceTool::Bezier(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCGeom_BezierSurface(&tmp);
}

OCGeom_BSplineSurface^ OCBRepBlend_HSurfaceTool::BSpline(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  Handle(Geom_BSplineSurface) tmp = BRepBlend_HSurfaceTool::BSpline(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCGeom_BSplineSurface(&tmp);
}

OCgp_Ax1^ OCBRepBlend_HSurfaceTool::AxeOfRevolution(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = BRepBlend_HSurfaceTool::AxeOfRevolution(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Dir^ OCBRepBlend_HSurfaceTool::Direction(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = BRepBlend_HSurfaceTool::Direction(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCgp_Dir(tmp);
}

OCAdaptor3d_HCurve^ OCBRepBlend_HSurfaceTool::BasisCurve(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  Handle(Adaptor3d_HCurve) tmp = BRepBlend_HSurfaceTool::BasisCurve(*((Handle_Adaptor3d_HSurface*)S->Handle));
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 Standard_Integer OCBRepBlend_HSurfaceTool::NbSamplesU(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return BRepBlend_HSurfaceTool::NbSamplesU(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 Standard_Integer OCBRepBlend_HSurfaceTool::NbSamplesV(OCNaroWrappers::OCAdaptor3d_HSurface^ S)
{
  return BRepBlend_HSurfaceTool::NbSamplesV(*((Handle_Adaptor3d_HSurface*)S->Handle));
}

 Standard_Integer OCBRepBlend_HSurfaceTool::NbSamplesU(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u1, Standard_Real u2)
{
  return BRepBlend_HSurfaceTool::NbSamplesU(*((Handle_Adaptor3d_HSurface*)S->Handle), u1, u2);
}

 Standard_Integer OCBRepBlend_HSurfaceTool::NbSamplesV(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real v1, Standard_Real v2)
{
  return BRepBlend_HSurfaceTool::NbSamplesV(*((Handle_Adaptor3d_HSurface*)S->Handle), v1, v2);
}


