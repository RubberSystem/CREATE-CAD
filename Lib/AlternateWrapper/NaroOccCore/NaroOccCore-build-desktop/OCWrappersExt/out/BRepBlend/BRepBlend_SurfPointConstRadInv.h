// File generated by CPPExt (MPV)
//
#ifndef _BRepBlend_SurfPointConstRadInv_OCWrappers_HeaderFile
#define _BRepBlend_SurfPointConstRadInv_OCWrappers_HeaderFile

// include native header
#include <BRepBlend_SurfPointConstRadInv.hxx>
#include "../Converter.h"

#include "../Blend/Blend_SurfPointFuncInv.h"

#include "../gp/gp_Pnt.h"
#include "../Blend/Blend_SurfPointFuncInv.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HSurface;
ref class OCAdaptor3d_HCurve;
ref class OCmath_Vector;
ref class OCmath_Matrix;
ref class OCgp_Pnt;


//! This function  is used  to find a  solution on  a done <br>
//!          point   of   the curve when   using  SurfRstConsRad or <br>
//!          CSConstRad... <br>
//!          The vector <X>  used in Value, Values and  Derivatives <br>
//!          methods  has  to   be the  vector   of the  parametric <br>
//!          coordinates w, U,  V where w is  the parameter  on the <br>
//!          guide line, U,V   are the parametric coordinates of  a <br>
//!          point on the partner surface. <br>
public ref class OCBRepBlend_SurfPointConstRadInv  : public OCBlend_SurfPointFuncInv {

protected:
  // dummy constructor;
  OCBRepBlend_SurfPointConstRadInv(OCDummy^) : OCBlend_SurfPointFuncInv((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepBlend_SurfPointConstRadInv(BRepBlend_SurfPointConstRadInv* nativeHandle);

// Methods PUBLIC


OCBRepBlend_SurfPointConstRadInv(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCAdaptor3d_HCurve^ C);


 /*instead*/  void Set(Standard_Real R, Standard_Integer Choix) ;

//! returns 3. <br>
 /*instead*/  Standard_Integer NbEquations() ;

//! computes the values <F> of the Functions for the <br>
//!          variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
 /*instead*/  System::Boolean Value(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F) ;

//! returns the values <D> of the derivatives for the <br>
//!          variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
 /*instead*/  System::Boolean Derivatives(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Matrix^ D) ;

//! returns the values <F> of the functions and the derivatives <br>
//!          <D> for the variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
 /*instead*/  System::Boolean Values(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F, OCNaroWrappers::OCmath_Matrix^ D) ;

//! Set the Point on which a solution has to be found. <br>
 /*instead*/  void Set(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Returns in the vector Tolerance the parametric tolerance <br>
//!          for each of the 3 variables; <br>
//!          Tol is the tolerance used in 3d space. <br>
 /*instead*/  void GetTolerance(OCNaroWrappers::OCmath_Vector^ Tolerance, Standard_Real Tol) ;

//! Returns in the vector InfBound the lowest values allowed <br>
//!          for each of the 3 variables. <br>
//!          Returns in the vector SupBound the greatest values allowed <br>
//!          for each of the 3 variables. <br>
 /*instead*/  void GetBounds(OCNaroWrappers::OCmath_Vector^ InfBound, OCNaroWrappers::OCmath_Vector^ SupBound) ;

//! Returns Standard_True if Sol is a zero of the function. <br>
//!          Tol is the tolerance used in 3d space. <br>
 /*instead*/  System::Boolean IsSolution(OCNaroWrappers::OCmath_Vector^ Sol, Standard_Real Tol) ;

~OCBRepBlend_SurfPointConstRadInv()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
