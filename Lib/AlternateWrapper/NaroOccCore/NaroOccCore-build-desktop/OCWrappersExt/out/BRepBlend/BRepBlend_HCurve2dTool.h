// File generated by CPPExt (MPV)
//
#ifndef _BRepBlend_HCurve2dTool_OCWrappers_HeaderFile
#define _BRepBlend_HCurve2dTool_OCWrappers_HeaderFile

// include native header
#include <BRepBlend_HCurve2dTool.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_Shape.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"


namespace OCNaroWrappers
{

ref class OCAdaptor2d_HCurve2d;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt2d;
ref class OCgp_Vec2d;
ref class OCGeom2d_BezierCurve;
ref class OCGeom2d_BSplineCurve;



public ref class OCBRepBlend_HCurve2dTool  {

protected:
  BRepBlend_HCurve2dTool* nativeHandle;
  OCBRepBlend_HCurve2dTool(OCDummy^) {};

public:
  property BRepBlend_HCurve2dTool* Handle
  {
    BRepBlend_HCurve2dTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepBlend_HCurve2dTool(BRepBlend_HCurve2dTool* nativeHandle);

// Methods PUBLIC


static /*instead*/  Standard_Real FirstParameter(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  Standard_Real LastParameter(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCGeomAbs_Shape Continuity(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  Standard_Integer NbIntervals(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, OCGeomAbs_Shape S) ;


static /*instead*/  void Intervals(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;


static /*instead*/  System::Boolean IsClosed(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  System::Boolean IsPeriodic(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  Standard_Real Period(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCgp_Pnt2d^ Value(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real U) ;


static /*instead*/  void D0(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P) ;


static /*instead*/  void D1(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V) ;


static /*instead*/  void D2(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;


static /*instead*/  void D3(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) ;


static /*instead*/  OCgp_Vec2d^ DN(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real U, Standard_Integer N) ;


static /*instead*/  Standard_Real Resolution(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real R3d) ;


static /*instead*/  OCGeomAbs_CurveType GetType(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCgp_Lin2d^ Line(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCgp_Circ2d^ Circle(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCgp_Elips2d^ Ellipse(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCgp_Hypr2d^ Hyperbola(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCgp_Parab2d^ Parabola(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCGeom2d_BezierCurve^ Bezier(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  OCGeom2d_BSplineCurve^ BSpline(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) ;


static /*instead*/  Standard_Integer NbSamples(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C, Standard_Real U0, Standard_Real U1) ;

~OCBRepBlend_HCurve2dTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
