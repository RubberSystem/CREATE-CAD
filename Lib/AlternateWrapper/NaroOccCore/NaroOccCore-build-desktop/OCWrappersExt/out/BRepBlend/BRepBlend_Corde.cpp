// File generated by CPPExt (CPP file)
//

#include "BRepBlend_Corde.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "BRepBlend_HCurveTool.h"
#include "BRepBlend_HSurfaceTool.h"
#include "../math/math_Vector.h"
#include "../math/math_Matrix.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Vec2d.h"


using namespace OCNaroWrappers;

OCBRepBlend_Corde::OCBRepBlend_Corde(BRepBlend_Corde* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepBlend_Corde::OCBRepBlend_Corde(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCAdaptor3d_HCurve^ CGuide) 
{
  nativeHandle = new BRepBlend_Corde(*((Handle_Adaptor3d_HSurface*)S->Handle), *((Handle_Adaptor3d_HCurve*)CGuide->Handle));
}

 void OCBRepBlend_Corde::SetParam(Standard_Real Param)
{
  ((BRepBlend_Corde*)nativeHandle)->SetParam(Param);
}

 void OCBRepBlend_Corde::SetDist(Standard_Real Dist)
{
  ((BRepBlend_Corde*)nativeHandle)->SetDist(Dist);
}

 System::Boolean OCBRepBlend_Corde::Value(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_Corde*)nativeHandle)->Value(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle)));
}

 System::Boolean OCBRepBlend_Corde::Derivatives(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_Corde*)nativeHandle)->Derivatives(*((math_Vector*)X->Handle), *((math_Matrix*)D->Handle)));
}

OCgp_Pnt^ OCBRepBlend_Corde::PointOnS()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BRepBlend_Corde*)nativeHandle)->PointOnS();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCBRepBlend_Corde::PointOnGuide()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BRepBlend_Corde*)nativeHandle)->PointOnGuide();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Vec^ OCBRepBlend_Corde::NPlan()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepBlend_Corde*)nativeHandle)->NPlan();
  return gcnew OCgp_Vec(tmp);
}

 System::Boolean OCBRepBlend_Corde::IsTangencyPoint()
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_Corde*)nativeHandle)->IsTangencyPoint());
}

OCgp_Vec^ OCBRepBlend_Corde::TangentOnS()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepBlend_Corde*)nativeHandle)->TangentOnS();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec2d^ OCBRepBlend_Corde::Tangent2dOnS()
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((BRepBlend_Corde*)nativeHandle)->Tangent2dOnS();
  return gcnew OCgp_Vec2d(tmp);
}

 void OCBRepBlend_Corde::DerFguide(OCNaroWrappers::OCmath_Vector^ Sol, OCNaroWrappers::OCgp_Vec2d^ DerF)
{
  ((BRepBlend_Corde*)nativeHandle)->DerFguide(*((math_Vector*)Sol->Handle), *((gp_Vec2d*)DerF->Handle));
}

 System::Boolean OCBRepBlend_Corde::IsSolution(OCNaroWrappers::OCmath_Vector^ Sol, Standard_Real Tol)
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_Corde*)nativeHandle)->IsSolution(*((math_Vector*)Sol->Handle), Tol));
}


