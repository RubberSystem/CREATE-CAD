// File generated by CPPExt (MPV)
//
#ifndef _BRepBlend_HSurfaceTool_OCWrappers_HeaderFile
#define _BRepBlend_HSurfaceTool_OCWrappers_HeaderFile

// include native header
#include <BRepBlend_HSurfaceTool.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_Shape.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../GeomAbs/GeomAbs_SurfaceType.h"
#include "../gp/gp_Pln.h"
#include "../gp/gp_Cylinder.h"
#include "../gp/gp_Cone.h"
#include "../gp/gp_Torus.h"
#include "../gp/gp_Sphere.h"
#include "../gp/gp_Ax1.h"
#include "../gp/gp_Dir.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HSurface;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCGeom_BezierSurface;
ref class OCGeom_BSplineSurface;
ref class OCAdaptor3d_HCurve;



public ref class OCBRepBlend_HSurfaceTool  {

protected:
  BRepBlend_HSurfaceTool* nativeHandle;
  OCBRepBlend_HSurfaceTool(OCDummy^) {};

public:
  property BRepBlend_HSurfaceTool* Handle
  {
    BRepBlend_HSurfaceTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepBlend_HSurfaceTool(BRepBlend_HSurfaceTool* nativeHandle);

// Methods PUBLIC


static /*instead*/  Standard_Real FirstUParameter(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Real FirstVParameter(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Real LastUParameter(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Real LastVParameter(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Integer NbUIntervals(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCGeomAbs_Shape Sh) ;


static /*instead*/  Standard_Integer NbVIntervals(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCGeomAbs_Shape Sh) ;


static /*instead*/  void UIntervals(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape Sh) ;


static /*instead*/  void VIntervals(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape Sh) ;


static /*instead*/  OCAdaptor3d_HSurface^ UTrim(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real First, Standard_Real Last, Standard_Real Tol) ;


static /*instead*/  OCAdaptor3d_HSurface^ VTrim(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real First, Standard_Real Last, Standard_Real Tol) ;


static /*instead*/  System::Boolean IsUClosed(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  System::Boolean IsVClosed(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  System::Boolean IsUPeriodic(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Real UPeriod(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  System::Boolean IsVPeriodic(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Real VPeriod(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCgp_Pnt^ Value(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v) ;


static /*instead*/  void D0(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, OCNaroWrappers::OCgp_Pnt^ P) ;


static /*instead*/  void D1(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1u, OCNaroWrappers::OCgp_Vec^ D1v) ;


static /*instead*/  void D2(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV) ;


static /*instead*/  void D3(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV) ;


static /*instead*/  OCgp_Vec^ DN(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u, Standard_Real v, Standard_Integer Nu, Standard_Integer Nv) ;


static /*instead*/  Standard_Real UResolution(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real R3d) ;


static /*instead*/  Standard_Real VResolution(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real R3d) ;


static /*instead*/  OCGeomAbs_SurfaceType GetType(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCgp_Pln^ Plane(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCgp_Cylinder^ Cylinder(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCgp_Cone^ Cone(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCgp_Torus^ Torus(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCgp_Sphere^ Sphere(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCGeom_BezierSurface^ Bezier(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCGeom_BSplineSurface^ BSpline(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCgp_Ax1^ AxeOfRevolution(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCgp_Dir^ Direction(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  OCAdaptor3d_HCurve^ BasisCurve(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Integer NbSamplesU(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Integer NbSamplesV(OCNaroWrappers::OCAdaptor3d_HSurface^ S) ;


static /*instead*/  Standard_Integer NbSamplesU(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real u1, Standard_Real u2) ;


static /*instead*/  Standard_Integer NbSamplesV(OCNaroWrappers::OCAdaptor3d_HSurface^ S, Standard_Real v1, Standard_Real v2) ;

~OCBRepBlend_HSurfaceTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
