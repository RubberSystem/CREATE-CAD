// File generated by CPPExt (MPV)
//
#ifndef _BRepBlend_Extremity_OCWrappers_HeaderFile
#define _BRepBlend_Extremity_OCWrappers_HeaderFile

// include native header
#include <BRepBlend_Extremity.hxx>
#include "../Converter.h"


#include "BRepBlend_SequenceOfPointOnRst.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HVertex;
ref class OCAdaptor2d_HCurve2d;
ref class OCBRepBlend_PointOnRst;
ref class OCBRepBlend_SequenceOfPointOnRst;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCIntSurf_Transition;



public ref class OCBRepBlend_Extremity  {

protected:
  BRepBlend_Extremity* nativeHandle;
  OCBRepBlend_Extremity(OCDummy^) {};

public:
  property BRepBlend_Extremity* Handle
  {
    BRepBlend_Extremity* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepBlend_Extremity(BRepBlend_Extremity* nativeHandle);

// Methods PUBLIC


OCBRepBlend_Extremity();


OCBRepBlend_Extremity(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V, Standard_Real Param, Standard_Real Tol);


OCBRepBlend_Extremity(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V, Standard_Real Param, Standard_Real Tol, OCNaroWrappers::OCAdaptor3d_HVertex^ Vtx);


OCBRepBlend_Extremity(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real W, Standard_Real Param, Standard_Real Tol);


 /*instead*/  void SetValue(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V, Standard_Real Param, Standard_Real Tol) ;


 /*instead*/  void SetValue(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V, Standard_Real Param, Standard_Real Tol, OCNaroWrappers::OCAdaptor3d_HVertex^ Vtx) ;


 /*instead*/  void SetValue(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real W, Standard_Real Param, Standard_Real Tol) ;


 /*instead*/  OCgp_Pnt^ Value() ;


 /*instead*/  void SetTangent(OCNaroWrappers::OCgp_Vec^ Tangent) ;


 /*instead*/  System::Boolean HasTangent() ;


 /*instead*/  OCgp_Vec^ Tangent() ;


 /*instead*/  Standard_Real Tolerance() ;


 /*instead*/  void SetVertex(OCNaroWrappers::OCAdaptor3d_HVertex^ V) ;


 /*instead*/  void AddArc(OCNaroWrappers::OCAdaptor2d_HCurve2d^ A, Standard_Real Param, OCNaroWrappers::OCIntSurf_Transition^ TLine, OCNaroWrappers::OCIntSurf_Transition^ TArc) ;


 /*instead*/  void Parameters(Standard_Real& U, Standard_Real& V) ;


 /*instead*/  System::Boolean IsVertex() ;


 /*instead*/  OCAdaptor3d_HVertex^ Vertex() ;


 /*instead*/  Standard_Integer NbPointOnRst() ;


 /*instead*/  OCBRepBlend_PointOnRst^ PointOnRst(Standard_Integer Index) ;


 /*instead*/  Standard_Real Parameter() ;


 /*instead*/  Standard_Real ParameterOnGuide() ;

~OCBRepBlend_Extremity()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
