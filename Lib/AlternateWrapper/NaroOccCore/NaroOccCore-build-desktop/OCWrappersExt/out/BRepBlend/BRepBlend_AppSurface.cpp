// File generated by CPPExt (CPP file)
//

#include "BRepBlend_AppSurface.h"
#include "../Converter.h"
#include "../Approx/Approx_SweepFunction.h"
#include "../TColgp/TColgp_Array2OfPnt.h"
#include "../TColStd/TColStd_Array2OfReal.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"


using namespace OCNaroWrappers;

OCBRepBlend_AppSurface::OCBRepBlend_AppSurface(BRepBlend_AppSurface* nativeHandle) : OCAppBlend_Approx((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCBRepBlend_AppSurface::OCBRepBlend_AppSurface(OCNaroWrappers::OCApprox_SweepFunction^ Funct, Standard_Real First, Standard_Real Last, Standard_Real Tol3d, Standard_Real Tol2d, Standard_Real TolAngular, OCGeomAbs_Shape Continuity, Standard_Integer Degmax, Standard_Integer Segmax) : OCAppBlend_Approx((OCDummy^)nullptr)

{
  nativeHandle = new BRepBlend_AppSurface(*((Handle_Approx_SweepFunction*)Funct->Handle), First, Last, Tol3d, Tol2d, TolAngular, (GeomAbs_Shape)Continuity, Degmax, Segmax);
}

 System::Boolean OCBRepBlend_AppSurface::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((BRepBlend_AppSurface*)nativeHandle)->IsDone());
}

 void OCBRepBlend_AppSurface::SurfShape(Standard_Integer& UDegree, Standard_Integer& VDegree, Standard_Integer& NbUPoles, Standard_Integer& NbVPoles, Standard_Integer& NbUKnots, Standard_Integer& NbVKnots)
{
  ((BRepBlend_AppSurface*)nativeHandle)->SurfShape(UDegree, VDegree, NbUPoles, NbVPoles, NbUKnots, NbVKnots);
}

 void OCBRepBlend_AppSurface::Surface(OCNaroWrappers::OCTColgp_Array2OfPnt^ TPoles, OCNaroWrappers::OCTColStd_Array2OfReal^ TWeights, OCNaroWrappers::OCTColStd_Array1OfReal^ TUKnots, OCNaroWrappers::OCTColStd_Array1OfReal^ TVKnots, OCNaroWrappers::OCTColStd_Array1OfInteger^ TUMults, OCNaroWrappers::OCTColStd_Array1OfInteger^ TVMults)
{
  ((BRepBlend_AppSurface*)nativeHandle)->Surface(*((TColgp_Array2OfPnt*)TPoles->Handle), *((TColStd_Array2OfReal*)TWeights->Handle), *((TColStd_Array1OfReal*)TUKnots->Handle), *((TColStd_Array1OfReal*)TVKnots->Handle), *((TColStd_Array1OfInteger*)TUMults->Handle), *((TColStd_Array1OfInteger*)TVMults->Handle));
}

 Standard_Integer OCBRepBlend_AppSurface::UDegree()
{
  return ((BRepBlend_AppSurface*)nativeHandle)->UDegree();
}

 Standard_Integer OCBRepBlend_AppSurface::VDegree()
{
  return ((BRepBlend_AppSurface*)nativeHandle)->VDegree();
}

OCTColgp_Array2OfPnt^ OCBRepBlend_AppSurface::SurfPoles()
{
  TColgp_Array2OfPnt* tmp = new TColgp_Array2OfPnt(0, 0, 0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->SurfPoles();
  return gcnew OCTColgp_Array2OfPnt(tmp);
}

OCTColStd_Array2OfReal^ OCBRepBlend_AppSurface::SurfWeights()
{
  TColStd_Array2OfReal* tmp = new TColStd_Array2OfReal(0, 0, 0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->SurfWeights();
  return gcnew OCTColStd_Array2OfReal(tmp);
}

OCTColStd_Array1OfReal^ OCBRepBlend_AppSurface::SurfUKnots()
{
  TColStd_Array1OfReal* tmp = new TColStd_Array1OfReal(0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->SurfUKnots();
  return gcnew OCTColStd_Array1OfReal(tmp);
}

OCTColStd_Array1OfReal^ OCBRepBlend_AppSurface::SurfVKnots()
{
  TColStd_Array1OfReal* tmp = new TColStd_Array1OfReal(0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->SurfVKnots();
  return gcnew OCTColStd_Array1OfReal(tmp);
}

OCTColStd_Array1OfInteger^ OCBRepBlend_AppSurface::SurfUMults()
{
  TColStd_Array1OfInteger* tmp = new TColStd_Array1OfInteger(0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->SurfUMults();
  return gcnew OCTColStd_Array1OfInteger(tmp);
}

OCTColStd_Array1OfInteger^ OCBRepBlend_AppSurface::SurfVMults()
{
  TColStd_Array1OfInteger* tmp = new TColStd_Array1OfInteger(0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->SurfVMults();
  return gcnew OCTColStd_Array1OfInteger(tmp);
}

 Standard_Real OCBRepBlend_AppSurface::MaxErrorOnSurf()
{
  return ((BRepBlend_AppSurface*)nativeHandle)->MaxErrorOnSurf();
}

 Standard_Integer OCBRepBlend_AppSurface::NbCurves2d()
{
  return ((BRepBlend_AppSurface*)nativeHandle)->NbCurves2d();
}

 void OCBRepBlend_AppSurface::Curves2dShape(Standard_Integer& Degree, Standard_Integer& NbPoles, Standard_Integer& NbKnots)
{
  ((BRepBlend_AppSurface*)nativeHandle)->Curves2dShape(Degree, NbPoles, NbKnots);
}

 void OCBRepBlend_AppSurface::Curve2d(Standard_Integer Index, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ TPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ TKnots, OCNaroWrappers::OCTColStd_Array1OfInteger^ TMults)
{
  ((BRepBlend_AppSurface*)nativeHandle)->Curve2d(Index, *((TColgp_Array1OfPnt2d*)TPoles->Handle), *((TColStd_Array1OfReal*)TKnots->Handle), *((TColStd_Array1OfInteger*)TMults->Handle));
}

 Standard_Integer OCBRepBlend_AppSurface::Curves2dDegree()
{
  return ((BRepBlend_AppSurface*)nativeHandle)->Curves2dDegree();
}

OCTColgp_Array1OfPnt2d^ OCBRepBlend_AppSurface::Curve2dPoles(Standard_Integer Index)
{
  TColgp_Array1OfPnt2d* tmp = new TColgp_Array1OfPnt2d(0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->Curve2dPoles(Index);
  return gcnew OCTColgp_Array1OfPnt2d(tmp);
}

OCTColStd_Array1OfReal^ OCBRepBlend_AppSurface::Curves2dKnots()
{
  TColStd_Array1OfReal* tmp = new TColStd_Array1OfReal(0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->Curves2dKnots();
  return gcnew OCTColStd_Array1OfReal(tmp);
}

OCTColStd_Array1OfInteger^ OCBRepBlend_AppSurface::Curves2dMults()
{
  TColStd_Array1OfInteger* tmp = new TColStd_Array1OfInteger(0, 0);
  *tmp = ((BRepBlend_AppSurface*)nativeHandle)->Curves2dMults();
  return gcnew OCTColStd_Array1OfInteger(tmp);
}

 void OCBRepBlend_AppSurface::TolReached(Standard_Real& Tol3d, Standard_Real& Tol2d)
{
  ((BRepBlend_AppSurface*)nativeHandle)->TolReached(Tol3d, Tol2d);
}

 Standard_Real OCBRepBlend_AppSurface::Max2dError(Standard_Integer Index)
{
  return ((BRepBlend_AppSurface*)nativeHandle)->Max2dError(Index);
}

 Standard_Real OCBRepBlend_AppSurface::TolCurveOnSurf(Standard_Integer Index)
{
  return ((BRepBlend_AppSurface*)nativeHandle)->TolCurveOnSurf(Index);
}

 void OCBRepBlend_AppSurface::Dump(Standard_OStream& o)
{
  ((BRepBlend_AppSurface*)nativeHandle)->Dump(o);
}


