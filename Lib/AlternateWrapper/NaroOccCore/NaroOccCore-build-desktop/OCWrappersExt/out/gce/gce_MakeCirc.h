// File generated by CPPExt (MPV)
//
#ifndef _gce_MakeCirc_OCWrappers_HeaderFile
#define _gce_MakeCirc_OCWrappers_HeaderFile

// include native header
#include <gce_MakeCirc.hxx>
#include "../Converter.h"

#include "gce_Root.h"

#include "../gp/gp_Circ.h"
#include "gce_Root.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2;
ref class OCgp_Circ;
ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Pln;
ref class OCgp_Ax1;


//! This class implements the following algorithms used <br>
//!           to create Circ from gp. <br>
//! <br>
//!           * Create a Circ coaxial to another and passing <br>
//!             though a point. <br>
//!           * Create a Circ coaxial to another at the distance <br>
//!             Dist. <br>
//!           * Create a Circ passing through 3 points. <br>
//!           * Create a Circ with its center and the normal of its <br>
//!             plane and its radius. <br>
//!           * Create a Circ with its center and its plane and its <br>
//!             radius. <br>
//!           * Create a Circ with its axis and radius. <br>
//!           * Create a Circ with two points giving its axis and <br>
//!             its radius. <br>
//!           * Create a Circ with is Ax2 and its Radius. <br>
public ref class OCgce_MakeCirc  : public OCgce_Root {

protected:
  // dummy constructor;
  OCgce_MakeCirc(OCDummy^) : OCgce_Root((OCDummy^)nullptr) {};

public:

// constructor from native
OCgce_MakeCirc(gce_MakeCirc* nativeHandle);

// Methods PUBLIC


//!  A2 locates the circle and gives its orientation in 3D space. <br>
//! Warnings : <br>
//!  It is not forbidden to create a circle with Radius = 0.0 <br>
//! The status is "NegativeRadius" if Radius < 0.0 <br>
OCgce_MakeCirc(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Radius);

//! Makes a Circ from gp <TheCirc> coaxial to another <br>
//!           Circ <Circ> at a distance <Dist>. <br>
//!           If Dist is greater than zero the result is encloses <br>
//!           the circle <Circ>, else the result is enclosed by the <br>
//!           circle <Circ>. <br>
OCgce_MakeCirc(OCNaroWrappers::OCgp_Circ^ Circ, Standard_Real Dist);

//! Makes a Circ from gp <TheCirc> coaxial to another <br>
//!           Circ <Circ> and passing through a Pnt2d <Point>. <br>
OCgce_MakeCirc(OCNaroWrappers::OCgp_Circ^ Circ, OCNaroWrappers::OCgp_Pnt^ Point);

//! Makes a Circ from gp <TheCirc> passing through 3 <br>
//!           Pnt2d <P1>,<P2>,<P3>. <br>
OCgce_MakeCirc(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3);

//! Makes a Circ from gp <TheCirc> with its center <br>
//!           <Center> and the normal of its plane <Norm> and <br>
//!           its radius <Radius>. <br>
OCgce_MakeCirc(OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Dir^ Norm, Standard_Real Radius);

//! Makes a Circ from gp <TheCirc> with its center <br>
//!           <Center> and the normal of its plane <Plane> and <br>
//!           its radius <Radius>. <br>
OCgce_MakeCirc(OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Pln^ Plane, Standard_Real Radius);

//! Makes a Circ from gp <TheCirc> with its center <br>
//!           <Center> and a point <Ptaxis> giving the normal <br>
//!           of its plane <Plane> and its radius <Radius>. <br>
OCgce_MakeCirc(OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Pnt^ Ptaxis, Standard_Real Radius);

//! Makes a Circ from gp <TheCirc> with its center <br>
//!           <Center> and its radius <Radius>. <br>
//! Warning <br>
//! The MakeCirc class does not prevent the <br>
//! construction of a circle with a null radius. <br>
//! If an error occurs (that is, when IsDone returns <br>
//! false), the Status function returns: <br>
//! -   gce_Negative Radius if: <br>
//!   -   Radius is less than 0.0, or <br>
//!   -   Dist is less than 0.0 and the absolute value of <br>
//!    Dist is greater than the radius of Circ; <br>
//! -   gce_IntersectionError if the points P1, P2 and <br>
//!   P3 are collinear, and the three are not coincident; <br>
//! -   gce_ConfusedPoints if two of the three points <br>
//!   P1, P2 and P3 are coincident; or <br>
//! -   gce_NullAxis if Center and Ptaxis are coincident. <br>
OCgce_MakeCirc(OCNaroWrappers::OCgp_Ax1^ Axis, Standard_Real Radius);

//! Returns the constructed circle. <br>
//! Exceptions StdFail_NotDone if no circle is constructed. <br>
 /*instead*/  OCgp_Circ^ Value() ;


 /*instead*/  OCgp_Circ^ Operator() ;

~OCgce_MakeCirc()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
