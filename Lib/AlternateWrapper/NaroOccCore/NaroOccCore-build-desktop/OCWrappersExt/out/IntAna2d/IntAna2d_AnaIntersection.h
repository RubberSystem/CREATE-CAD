// File generated by CPPExt (MPV)
//
#ifndef _IntAna2d_AnaIntersection_OCWrappers_HeaderFile
#define _IntAna2d_AnaIntersection_OCWrappers_HeaderFile

// include native header
#include <IntAna2d_AnaIntersection.hxx>
#include "../Converter.h"


#include "IntAna2d_IntPoint.h"


namespace OCNaroWrappers
{

ref class OCgp_Lin2d;
ref class OCgp_Circ2d;
ref class OCIntAna2d_Conic;
ref class OCgp_Elips2d;
ref class OCgp_Parab2d;
ref class OCgp_Hypr2d;
ref class OCIntAna2d_IntPoint;


//! Implementation of the analytical intersection between: <br>
//!          - two Lin2d, <br>
//!          - two Circ2d, <br>
//!          - a Lin2d and a Circ2d, <br>
//!          - an element of gp (Lin2d, Circ2d, Elips2d, Parab2d, Hypr2d) <br>
//!          and another conic. <br>
//!          No tolerance is given for all the intersections: the tolerance <br>
//!          will be the "precision machine". <br>
public ref class OCIntAna2d_AnaIntersection  {

protected:
  IntAna2d_AnaIntersection* nativeHandle;
  OCIntAna2d_AnaIntersection(OCDummy^) {};

public:
  property IntAna2d_AnaIntersection* Handle
  {
    IntAna2d_AnaIntersection* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntAna2d_AnaIntersection(IntAna2d_AnaIntersection* nativeHandle);

// Methods PUBLIC

//! Empty constructor. IsDone returns False. <br>
OCIntAna2d_AnaIntersection();

//! Intersection between two lines. <br>
OCIntAna2d_AnaIntersection(OCNaroWrappers::OCgp_Lin2d^ L1, OCNaroWrappers::OCgp_Lin2d^ L2);

//! Intersection between two circles. <br>
OCIntAna2d_AnaIntersection(OCNaroWrappers::OCgp_Circ2d^ C1, OCNaroWrappers::OCgp_Circ2d^ C2);

//! Intersection between a line and a circle. <br>
OCIntAna2d_AnaIntersection(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCgp_Circ2d^ C);

//! Intersection between a line and a conic. <br>
OCIntAna2d_AnaIntersection(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntAna2d_Conic^ C);

//! Intersection between a circle and another conic. <br>
OCIntAna2d_AnaIntersection(OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntAna2d_Conic^ Co);

//! Intersection between an ellipse and another conic. <br>
OCIntAna2d_AnaIntersection(OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntAna2d_Conic^ C);

//! Intersection between a parabola and another conic. <br>
OCIntAna2d_AnaIntersection(OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntAna2d_Conic^ C);

//! Intersection between an hyperbola and another conic. <br>
OCIntAna2d_AnaIntersection(OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntAna2d_Conic^ C);

//! Intersection between two lines. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L1, OCNaroWrappers::OCgp_Lin2d^ L2) ;

//! Intersection between two circles. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ2d^ C1, OCNaroWrappers::OCgp_Circ2d^ C2) ;

//! Intersection between a line and a circle. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCgp_Circ2d^ C) ;

//! Intersection between a line and a conic. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntAna2d_Conic^ C) ;

//! Intersection between a circle and another conic. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntAna2d_Conic^ Co) ;

//! Intersection between an ellipse and another conic. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntAna2d_Conic^ C) ;

//! Intersection between a parabola and another conic. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntAna2d_Conic^ C) ;

//! Intersection between an hyperbola and another conic. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntAna2d_Conic^ C) ;

//! Returns TRUE if the computation was succesfull. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns TRUE when there is no intersection, i-e <br>
//!           - no intersection point <br>
//!           - the elements are not identical. <br>
//!          The element may be parallel in this case. <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! For the intersection between an element of gp and a conic <br>
//!          known by an implicit equation, the result will be TRUE <br>
//!          if the element of gp verifies the implicit equation. <br>
//!          For the intersection between two Lin2d or two Circ2d, the <br>
//!          result will be TRUE if the elements are identical. <br>
//!          The function returns FALSE in all the other cases. <br>
 /*instead*/  System::Boolean IdenticalElements() ;

//! For the intersection between two Lin2d or two Circ2d, <br>
//!          the function returns TRUE if the elements are parallel. <br>
//!          The function returns FALSE in all the other cases. <br>
 /*instead*/  System::Boolean ParallelElements() ;

//! returns the number of IntPoint between the 2 curves. <br>
 /*instead*/  Standard_Integer NbPoints() ;

//! returns the intersection point of range N; <br>
//!          If (N<=0) or (N>NbPoints), an exception is raised. <br>
 /*instead*/  OCIntAna2d_IntPoint^ Point(Standard_Integer N) ;

~OCIntAna2d_AnaIntersection()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
