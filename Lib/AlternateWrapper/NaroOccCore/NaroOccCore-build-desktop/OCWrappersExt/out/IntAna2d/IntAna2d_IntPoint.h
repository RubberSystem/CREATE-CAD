// File generated by CPPExt (MPV)
//
#ifndef _IntAna2d_IntPoint_OCWrappers_HeaderFile
#define _IntAna2d_IntPoint_OCWrappers_HeaderFile

// include native header
#include <IntAna2d_IntPoint.hxx>
#include "../Converter.h"


#include "../gp/gp_Pnt2d.h"
#include "../Standard/Standard_Storable.h"


namespace OCNaroWrappers
{

ref class OCgp_Pnt2d;


//! Geometrical intersection between two 2d elements. <br>
public ref class OCIntAna2d_IntPoint  {

protected:
  IntAna2d_IntPoint* nativeHandle;
  OCIntAna2d_IntPoint(OCDummy^) {};

public:
  property IntAna2d_IntPoint* Handle
  {
    IntAna2d_IntPoint* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntAna2d_IntPoint(IntAna2d_IntPoint* nativeHandle);

// Methods PUBLIC

//! Create an intersection point between 2 parametric 2d lines. <br>
//!          X,Y are the coordinate of the point. U1 is the parameter <br>
//!          on the first element, U2 the parameter on the second one. <br>
OCIntAna2d_IntPoint(Standard_Real X, Standard_Real Y, Standard_Real U1, Standard_Real U2);

//! Create an intersection point between a parametric 2d line, <br>
//!          and a line given by an implicit equation (ImplicitCurve). <br>
//!          X,Y are the coordinate of the point. U1 is the parameter <br>
//!          on the parametric element. <br>//! Empty constructor. It's necessary to use one of <br>
//!          the SetValue method after this one. <br>
OCIntAna2d_IntPoint(Standard_Real X, Standard_Real Y, Standard_Real U1);


OCIntAna2d_IntPoint();

//! Set the values for a "non-implicit" point. <br>
virtual /*instead*/  void SetValue(Standard_Real X, Standard_Real Y, Standard_Real U1, Standard_Real U2) ;

//! Set the values for an "implicit" point. <br>
virtual /*instead*/  void SetValue(Standard_Real X, Standard_Real Y, Standard_Real U1) ;

//! Returns the geometric point. <br>
 /*instead*/  OCgp_Pnt2d^ Value() ;

//! Returns True if the second curve is implicit. <br>
 /*instead*/  System::Boolean SecondIsImplicit() ;

//! Returns the parameter on the first element. <br>
 /*instead*/  Standard_Real ParamOnFirst() ;

//! Returns the parameter on the second element. <br>
//!          If the second element is an implicit curve, an exception <br>
//!          is raised. <br>
 /*instead*/  Standard_Real ParamOnSecond() ;

~OCIntAna2d_IntPoint()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
