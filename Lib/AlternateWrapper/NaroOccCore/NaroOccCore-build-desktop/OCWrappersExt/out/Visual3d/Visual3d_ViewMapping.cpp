// File generated by CPPExt (CPP file)
//

#include "Visual3d_ViewMapping.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray2OfReal.h"
#include "Visual3d_View.h"
#include "../Graphic3d/Graphic3d_Vertex.h"


using namespace OCNaroWrappers;

OCVisual3d_ViewMapping::OCVisual3d_ViewMapping(Visual3d_ViewMapping* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCVisual3d_ViewMapping::OCVisual3d_ViewMapping() 
{
  nativeHandle = new Visual3d_ViewMapping();
}

OCVisual3d_ViewMapping::OCVisual3d_ViewMapping(OCVisual3d_TypeOfProjection AType, OCNaroWrappers::OCGraphic3d_Vertex^ PRP, Standard_Real BPD, Standard_Real FPD, Standard_Real VPD, Standard_Real WUmin, Standard_Real WVmin, Standard_Real WUmax, Standard_Real WVmax) 
{
  nativeHandle = new Visual3d_ViewMapping((Visual3d_TypeOfProjection)AType, *((Graphic3d_Vertex*)PRP->Handle), BPD, FPD, VPD, WUmin, WVmin, WUmax, WVmax);
}

 void OCVisual3d_ViewMapping::SetBackPlaneDistance(Standard_Real BPD)
{
  ((Visual3d_ViewMapping*)nativeHandle)->SetBackPlaneDistance(BPD);
}

 void OCVisual3d_ViewMapping::SetFrontPlaneDistance(Standard_Real FPD)
{
  ((Visual3d_ViewMapping*)nativeHandle)->SetFrontPlaneDistance(FPD);
}

 void OCVisual3d_ViewMapping::SetProjection(OCVisual3d_TypeOfProjection AType)
{
  ((Visual3d_ViewMapping*)nativeHandle)->SetProjection((Visual3d_TypeOfProjection)AType);
}

 void OCVisual3d_ViewMapping::SetProjectionReferencePoint(OCNaroWrappers::OCGraphic3d_Vertex^ PRP)
{
  ((Visual3d_ViewMapping*)nativeHandle)->SetProjectionReferencePoint(*((Graphic3d_Vertex*)PRP->Handle));
}

 void OCVisual3d_ViewMapping::SetViewPlaneDistance(Standard_Real VPD)
{
  ((Visual3d_ViewMapping*)nativeHandle)->SetViewPlaneDistance(VPD);
}

 void OCVisual3d_ViewMapping::SetWindowLimit(Standard_Real Umin, Standard_Real Vmin, Standard_Real Umax, Standard_Real Vmax)
{
  ((Visual3d_ViewMapping*)nativeHandle)->SetWindowLimit(Umin, Vmin, Umax, Vmax);
}

 void OCVisual3d_ViewMapping::SetCustomProjectionMatrix(OCNaroWrappers::OCTColStd_HArray2OfReal^ Mat)
{
  ((Visual3d_ViewMapping*)nativeHandle)->SetCustomProjectionMatrix(*((Handle_TColStd_HArray2OfReal*)Mat->Handle));
}

 Standard_Real OCVisual3d_ViewMapping::BackPlaneDistance()
{
  return ((Visual3d_ViewMapping*)nativeHandle)->BackPlaneDistance();
}

 Standard_Real OCVisual3d_ViewMapping::FrontPlaneDistance()
{
  return ((Visual3d_ViewMapping*)nativeHandle)->FrontPlaneDistance();
}

 OCVisual3d_TypeOfProjection OCVisual3d_ViewMapping::Projection()
{
  return (OCVisual3d_TypeOfProjection)(((Visual3d_ViewMapping*)nativeHandle)->Projection());
}

OCGraphic3d_Vertex^ OCVisual3d_ViewMapping::ProjectionReferencePoint()
{
  Graphic3d_Vertex* tmp = new Graphic3d_Vertex();
  *tmp = ((Visual3d_ViewMapping*)nativeHandle)->ProjectionReferencePoint();
  return gcnew OCGraphic3d_Vertex(tmp);
}

 Standard_Real OCVisual3d_ViewMapping::ViewPlaneDistance()
{
  return ((Visual3d_ViewMapping*)nativeHandle)->ViewPlaneDistance();
}

 void OCVisual3d_ViewMapping::WindowLimit(Standard_Real& Umin, Standard_Real& Vmin, Standard_Real& Umax, Standard_Real& Vmax)
{
  ((Visual3d_ViewMapping*)nativeHandle)->WindowLimit(Umin, Vmin, Umax, Vmax);
}

 System::Boolean OCVisual3d_ViewMapping::IsCustomMatrix()
{
  return OCConverter::StandardBooleanToBoolean(((Visual3d_ViewMapping*)nativeHandle)->IsCustomMatrix());
}


