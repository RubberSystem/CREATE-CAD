// File generated by CPPExt (Transient)
//
#ifndef _Visual3d_Layer_OCWrappers_HeaderFile
#define _Visual3d_Layer_OCWrappers_HeaderFile

// include the wrapped class
#include <Visual3d_Layer.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../Aspect/Aspect_TypeOfLayer.h"
#include "../Aspect/Aspect_TypeOfLine.h"
#include "../Aspect/Aspect_TypeOfDisplayText.h"
#include "../Aspect/Aspect_TypeOfConstraint.h"


namespace OCNaroWrappers
{

ref class OCGraphic3d_GraphicDriver;
ref class OCVisual3d_ViewManager;
ref class OCQuantity_Color;
ref class OCVisual3d_LayerItem;


//! This class allows to manage 2d graphics. <br>
public ref class OCVisual3d_Layer : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCVisual3d_Layer(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCVisual3d_Layer(Handle(Visual3d_Layer)* nativeHandle);

// Methods PUBLIC

//! Creates a layer with the type <Atype>. <br>
//!      if <AFlag> == Standard_True then the layer is <br>
//!      "size dependent". <br>
//!      The mapping of the layer is dependent of each <br>
//!      window's size. <br>
//!      if <AFlag> == Standard_False then the mapping of the <br>
//!      layer is dependent of the highest window and the largest <br>
//!      window of all the views of the viewer <AViewer>. <br>
//!      When the viewer <AViewer> have only one view, the <br>
//!      result will be the same with <AFlag> == Standard_False <br>
//!      or <AFlag> == Standard_True. <br>
OCVisual3d_Layer(OCNaroWrappers::OCVisual3d_ViewManager^ AViewer, OCAspect_TypeOfLayer AType, System::Boolean AFlag);

//! Begins the definition of the layer <me> <br>
//!  Warning: No default attributes <br>
 /*instead*/  void Begin() ;

//! Finishs the definition of the layer <me>. <br>
 /*instead*/  void End() ;

//! Clear all graphics managed by the layer <me>. <br>
 /*instead*/  void Clear() ;

//! After this call, <me> is ready to receive <br>
//!      a definition of a polyline with AddVertex(). <br>
 /*instead*/  void BeginPolyline() ;

//! After this call, <me> is ready to receive <br>
//!      a definition of a polygon with AddEdge(). <br>
 /*instead*/  void BeginPolygon() ;

//! Puts <X, Y> as a new point in the current primitive. <br>
//!      If <AFlag> then it is a draw between last point and <br>
//!      this point else it is a move between last point and <br>
//!      this point. <br>
 /*instead*/  void AddVertex(Standard_Real X, Standard_Real Y, System::Boolean AFlag) ;

//! After this call, <me> stops the reception of <br>
//!      a definition of a Begin... primitive. <br>
 /*instead*/  void ClosePrimitive() ;

//! Draws the rectangle at position <X,Y>. <br>
 /*instead*/  void DrawRectangle(Standard_Real X, Standard_Real Y, Standard_Real Width, Standard_Real Height) ;

//! Draws the string <AText> at position <X,Y>. <br>
//!      The attributes are given with respect to the plane of <br>
//!      projection. <br>
//!      <AHeight>   : Height of text. <br>
//!            (Relative to the Normalized Projection <br>
//!          Coordinates (NPC) Space). <br>
 /*instead*/  void DrawText(System::String^ AText, Standard_Real X, Standard_Real Y, Standard_Real AHeight) ;

//! Get the size of text. <br>
//!      The attributes are given with respect to the plane of <br>
//!      projection. <br>
//!      <AHeight>   : Height of text. <br>
//!            (Relative to the Normalized Projection <br>
//!          Coordinates (NPC) Space). <br>
 /*instead*/  void TextSize(System::String^ AText, Standard_Real AHeight, Standard_Real& AWidth, Standard_Real& AnAscent, Standard_Real& ADescent) ;

//! Modifies the current color. <br>
//!  Warning: No default color <br>
 /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ AColor) ;

//! Modifies the current transparency. <br>
//!  Warning: No default transparency <br>
 /*instead*/  void SetTransparency(Standard_ShortReal ATransparency) ;

//! Unsets the transparency. <br>
 /*instead*/  void UnsetTransparency() ;

//! Modifies the current lines attributes. <br>
//!  Warning: No default attributes <br>
 /*instead*/  void SetLineAttributes(OCAspect_TypeOfLine AType, Standard_Real AWidth) ;

//! Modifies the current texts attributes. <br>
//! <AFont> defines the name of the font to be used. <br>
//! <AType> defines the display type of the text. <br>
//! <AColor> defines the color of decal or subtitle background. <br>
//! To set the color of the text you can use the SetColor method. <br>
//! Warning: No default attributes <br>
 /*instead*/  void SetTextAttributes(System::String^ AFont, OCAspect_TypeOfDisplayText AType, OCNaroWrappers::OCQuantity_Color^ AColor) ;

//! Modifies the current coordinates system of the layer <me>. <br>
 /*instead*/  void SetOrtho(Standard_Real Left, Standard_Real Right, Standard_Real Bottom, Standard_Real Top, OCAspect_TypeOfConstraint Attach) ;

//! Modifies the current viewport of the layer <me>. <br>
 /*instead*/  void SetViewport(Standard_Integer Width, Standard_Integer Height) ;

//! Returns the associated C structure. <br>
 /*instead*/  Aspect_CLayer2d CLayer() ;

//! Returns the type. <br>
 /*instead*/  OCAspect_TypeOfLayer Type() ;


 /*instead*/  void AddLayerItem(OCNaroWrappers::OCVisual3d_LayerItem^ Item) ;


 /*instead*/  void RemoveLayerItem(OCNaroWrappers::OCVisual3d_LayerItem^ Item) ;


 /*instead*/  void RemoveAllLayerItems() ;


 /*instead*/  Visual3d_NListOfLayerItem& GetLayerItemList() ;


 /*instead*/  void RenderLayerItems() ;

~OCVisual3d_Layer()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
