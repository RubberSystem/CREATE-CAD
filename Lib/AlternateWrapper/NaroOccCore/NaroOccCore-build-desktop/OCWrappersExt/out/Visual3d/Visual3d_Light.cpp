// File generated by CPPExt (CPP file)
//

#include "Visual3d_Light.h"
#include "../Converter.h"
#include "Visual3d_View.h"
#include "../Quantity/Quantity_Color.h"
#include "../Graphic3d/Graphic3d_Vector.h"
#include "../Graphic3d/Graphic3d_Vertex.h"


using namespace OCNaroWrappers;

OCVisual3d_Light::OCVisual3d_Light(Handle(Visual3d_Light)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Visual3d_Light(*nativeHandle);
}

OCVisual3d_Light::OCVisual3d_Light() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Visual3d_Light(new Visual3d_Light());
}

OCVisual3d_Light::OCVisual3d_Light(OCNaroWrappers::OCQuantity_Color^ Color) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Visual3d_Light(new Visual3d_Light(*((Quantity_Color*)Color->Handle)));
}

OCVisual3d_Light::OCVisual3d_Light(OCNaroWrappers::OCQuantity_Color^ Color, OCNaroWrappers::OCGraphic3d_Vector^ Direction, System::Boolean Headlight) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Visual3d_Light(new Visual3d_Light(*((Quantity_Color*)Color->Handle), *((Graphic3d_Vector*)Direction->Handle), OCConverter::BooleanToStandardBoolean(Headlight)));
}

OCVisual3d_Light::OCVisual3d_Light(OCNaroWrappers::OCQuantity_Color^ Color, OCNaroWrappers::OCGraphic3d_Vertex^ Position, Standard_Real Fact1, Standard_Real Fact2) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Visual3d_Light(new Visual3d_Light(*((Quantity_Color*)Color->Handle), *((Graphic3d_Vertex*)Position->Handle), Fact1, Fact2));
}

OCVisual3d_Light::OCVisual3d_Light(OCNaroWrappers::OCQuantity_Color^ Color, OCNaroWrappers::OCGraphic3d_Vertex^ Position, OCNaroWrappers::OCGraphic3d_Vector^ Direction, Standard_Real Concentration, Standard_Real Fact1, Standard_Real Fact2, Standard_Real AngleCone) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Visual3d_Light(new Visual3d_Light(*((Quantity_Color*)Color->Handle), *((Graphic3d_Vertex*)Position->Handle), *((Graphic3d_Vector*)Direction->Handle), Concentration, Fact1, Fact2, AngleCone));
}

 void OCVisual3d_Light::SetAngle(Standard_Real AngleCone)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->SetAngle(AngleCone);
}

 void OCVisual3d_Light::SetAttenuation1(Standard_Real Fact1)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->SetAttenuation1(Fact1);
}

 void OCVisual3d_Light::SetAttenuation2(Standard_Real Fact2)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->SetAttenuation2(Fact2);
}

 void OCVisual3d_Light::SetColor(OCNaroWrappers::OCQuantity_Color^ Color)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->SetColor(*((Quantity_Color*)Color->Handle));
}

 void OCVisual3d_Light::SetConcentration(Standard_Real Concentration)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->SetConcentration(Concentration);
}

 void OCVisual3d_Light::SetDirection(OCNaroWrappers::OCGraphic3d_Vector^ Direction)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->SetDirection(*((Graphic3d_Vector*)Direction->Handle));
}

 void OCVisual3d_Light::SetPosition(OCNaroWrappers::OCGraphic3d_Vertex^ Position)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->SetPosition(*((Graphic3d_Vertex*)Position->Handle));
}

 System::Boolean OCVisual3d_Light::Headlight()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Visual3d_Light*)nativeHandle))->Headlight());
}

OCQuantity_Color^ OCVisual3d_Light::Color()
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = (*((Handle_Visual3d_Light*)nativeHandle))->Color();
  return gcnew OCQuantity_Color(tmp);
}

 OCVisual3d_TypeOfLightSource OCVisual3d_Light::LightType()
{
  return (OCVisual3d_TypeOfLightSource)((*((Handle_Visual3d_Light*)nativeHandle))->LightType());
}

 void OCVisual3d_Light::Values(OCNaroWrappers::OCQuantity_Color^ Color)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->Values(*((Quantity_Color*)Color->Handle));
}

 void OCVisual3d_Light::Values(OCNaroWrappers::OCQuantity_Color^ Color, OCNaroWrappers::OCGraphic3d_Vector^ Direction)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->Values(*((Quantity_Color*)Color->Handle), *((Graphic3d_Vector*)Direction->Handle));
}

 void OCVisual3d_Light::Values(OCNaroWrappers::OCQuantity_Color^ Color, OCNaroWrappers::OCGraphic3d_Vertex^ Position, Standard_Real& Fact1, Standard_Real& Fact2)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->Values(*((Quantity_Color*)Color->Handle), *((Graphic3d_Vertex*)Position->Handle), Fact1, Fact2);
}

 void OCVisual3d_Light::Values(OCNaroWrappers::OCQuantity_Color^ Color, OCNaroWrappers::OCGraphic3d_Vertex^ Position, OCNaroWrappers::OCGraphic3d_Vector^ Direction, Standard_Real& Concentration, Standard_Real& Fact1, Standard_Real& Fact2, Standard_Real& AngleCone)
{
  (*((Handle_Visual3d_Light*)nativeHandle))->Values(*((Quantity_Color*)Color->Handle), *((Graphic3d_Vertex*)Position->Handle), *((Graphic3d_Vector*)Direction->Handle), Concentration, Fact1, Fact2, AngleCone);
}

 Standard_Integer OCVisual3d_Light::Limit()
{
  return Visual3d_Light::Limit();
}


