// File generated by CPPExt (Transient)
//
#ifndef _Visual3d_TransientManager_OCWrappers_HeaderFile
#define _Visual3d_TransientManager_OCWrappers_HeaderFile

// include the wrapped class
#include <Visual3d_TransientManager.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../Graphic3d/Graphic3d_TextPath.h"
#include "../Graphic3d/Graphic3d_HorizontalTextAlignment.h"
#include "../Graphic3d/Graphic3d_VerticalTextAlignment.h"
#include "../Graphic3d/Graphic3d_TypeOfComposition.h"


namespace OCNaroWrappers
{

ref class OCVisual3d_View;
ref class OCTCollection_ExtendedString;
ref class OCGraphic3d_Structure;
ref class OCGraphic3d_AspectLine3d;
ref class OCGraphic3d_AspectFillArea3d;
ref class OCGraphic3d_AspectText3d;
ref class OCGraphic3d_AspectMarker3d;
ref class OCTColStd_Array2OfReal;


//! This class allows to manage transient graphics <br>
//!      above one View. <br>
//!      A simple way to drawn something very quicly above <br>
//!      a complex scene (Hilighting,Sketching,...) <br>
//!      All transient graphics will be drawn with <br>
//!      the projection defined by the view with the current <br>
//!      attributes depending of the primitive type : <br>
//!      Lines,Markers,Polygons,Texts <br>
//!      All transient graphics will be erased at the next <br>
//!      View::BeginDraw(). <br>
//!      If RetainMode is active, <br>
//!      All transient graphics will be kept at the <br>
//!      next View::Update(),Redraw(). The transient graphics <br>
//!      is stored by this object and graphic library, the <br>
//!      graphic managed itself exposure,resizing,... <br>
//!      The method View::ClearDraw() is necessary to erase <br>
//!      all transient graphics. <br>
//!      If RetainMode is deactivate, <br>
//!      All transient graphics will be erased at the <br>
//!      next View::Update(),Redraw(). <br>
//!      Remember that nothing is stored by this object and <br>
//!      graphic library,the application must managed itself <br>
//!      exposure,resizing,... <br>
//!      If double_buffering is activate, <br>
//!      all graphics are drawn in the back buffer and flushed <br>
//!      in the front buffer at the end of drawing but nothing <br>
//!      is done for to separate transient from structured <br>
//!      graphics,the only way to regenerate the structured <br>
//!      view is to Redraw() the view. <br>
//!      If double_buffering is deactivate, <br>
//!      the back buffer is preserved and used for restoring <br>
//!      the front buffer at begin drawing time.I recommend <br>
//!      to use the second way (without DB) if you want <br>
//!      to preserve the graphics and the performances! <br>
public ref class OCVisual3d_TransientManager : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCVisual3d_TransientManager(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCVisual3d_TransientManager(Handle(Visual3d_TransientManager)* nativeHandle);

// Methods PUBLIC

//! Creates a TransientManager <aView>. <br>
OCVisual3d_TransientManager();

//! Begins any graphics in the view <aView> <br>
//!      Redraw any structured graphics in the back buffer before <br>
//!      if <DoubleBuffer> is TRUE. <br>
//!          Restore the front buffer from the back before <br>
//!      if <DoubleBuffer> is FALSE. <br>
//!      if <RetainMode> is TRUE. <br>
//!          the graphic managed itself exposure,resizing ... <br>
//!      if <RetainMode> is FALSE. <br>
//!          the application must managed itself exposure,resizing ... <br>
//! <br>
//!  Warning: Returns TRUE if transient drawing is enabled in <br>
//!     the associated view. <br>
//!          Returns FALSE ,if nothing works because something <br>
//!     is wrong for the transient principle : <br>
//!     Immediat mode is not implemented depending of the <br>
//!     graphic library used. <br>
//!         MBX,PIXMAP double buffering don't works depending of <br>
//!         the graphic board and the visual of the window supporting <br>
//!         the view. <br>
//!  Warning: No default attributes <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is already opened. <br>
//! or   the associated view is not mapped on a window. <br>
static /*instead*/  System::Boolean BeginDraw(OCNaroWrappers::OCVisual3d_View^ aView, System::Boolean DoubleBuffer, System::Boolean RetainMode) ;

//! Flush all graphics to the front buffer. <br>
//!  Synchronize graphics to the screen if <Synchronize> is <br>
//!  TRUE (make becarefull to the performances!). <br>
//!  Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is not opened. <br>
static /*instead*/  void EndDraw(System::Boolean Synchronize) ;

//! Clear all transient graphics in the view <aView> <br>
//!         updates a scene if <aFlush> = true <br>
//!  Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is already opened. <br>
//! or   the associated view is not mapped on a window. <br>
static /*instead*/  void ClearDraw(OCNaroWrappers::OCVisual3d_View^ aView, System::Boolean aFlush) ;

//! Begins any add graphics in the view <aView> <br>
//!          the application must managed itself exposure,resizing ... <br>
//! <br>
//!  Warning: Returns TRUE if transient drawing is enabled in <br>
//!     the associated view. <br>
//!          Returns FALSE ,if nothing works because something <br>
//!     is wrong for the transient principle : <br>
//!     Immediat mode is not implemented depending of the <br>
//!     graphic library used. <br>
//!         MBX,PIXMAP double buffering don't works depending of <br>
//!         the graphic board and the visual of the window supporting <br>
//!         the view. <br>
//!  Warning: No default attributes <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is already opened. <br>
//! or   the associated view is not mapped on a window. <br>
static /*instead*/  System::Boolean BeginAddDraw(OCNaroWrappers::OCVisual3d_View^ aView) ;

//! Flush all add graphics to the front buffer. <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is not opened. <br>
static /*instead*/  void EndAddDraw() ;

//! After this call, <me> is ready to receive <br>
//!      a definition of a polyline with AddVertex(). <br>
//!  Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is already opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void BeginPolyline() ;

//! After this call, <me> is ready to receive <br>
//!      a definition of a polygon with AddVertex(). <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is already opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void BeginPolygon() ;

//! After this call, <me> is ready to receive <br>
//!      a definition of a triangle mesh with AddVertex(). <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is already opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void BeginTriangleMesh() ;

//! After this call, <me> is ready to receive <br>
//!      a definition of a marker with AddVertex(). <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is already opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void BeginMarker() ;

//! After this call, <me> is ready to receive <br>
//!      a definition of a curve with AddVertex(). <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is already opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void BeginBezier() ;

//! Puts <X, Y, Z> as a new point in the current primitive. <br>
//!      If <AFlag> then it is a draw between last point and <br>
//!      this point else it is a move between last point and <br>
//!      this point. <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is not opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void AddVertex(Standard_Real X, Standard_Real Y, Standard_Real Z, System::Boolean AFlag) ;

//! Puts <X, Y, Z, W> as a new point coordinates and <br>
//!      weight in the current primitive. <br>
//!      If <AFlag> then it is a draw between last point and <br>
//!      this point else it is a move between last point and <br>
//!      this point. <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is not opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void AddVertex(Standard_Real X, Standard_Real Y, Standard_Real Z, Standard_Real W, System::Boolean AFlag) ;

//! Puts <X, Y, Z> as a new point in the current primitive. <br>
//!          Puts <NX, NY, NZ> as a new normal in the current <br>
//!      primitive. <br>
//!      If <AFlag> then it is a draw between last point and <br>
//!      this point else it is a move between last point and <br>
//!      this point. <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is not opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void AddVertex(Standard_Real X, Standard_Real Y, Standard_Real Z, Standard_Real NX, Standard_Real NY, Standard_Real NZ, System::Boolean AFlag) ;

//! After this call, <me> stops the reception of <br>
//!      a definition of a Begin... primitive. <br>
//!  Raises TransientDefinitionError from Visual3d; <br>
//! if a Begin... primitive is not opened, <br>
//! or   Drawing is not opened. <br>
static /*instead*/  void ClosePrimitive() ;

//! Drawn the string <AText> at position <X,Y,Z>. <br>
//!     The 3D point of attachment is projected. The text is <br>
//!          written in the plane of projection. <br>
//!  The attributes are given with respect to the plane of <br>
//!          projection. <br>
//!          AHeight     : Height of text. <br>
//!             (Relative to the Normalized Projection <br>
//!                          Coordinates (NPC) Space). <br>
//!          AAngle      : Orientation of the text <br>
//!                  (with respect to the horizontal). <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is not opened. <br>
static /*instead*/  void DrawText(OCNaroWrappers::OCTCollection_ExtendedString^ AText, Standard_Real X, Standard_Real Y, Standard_Real Z, Standard_Real AHeight, Quantity_PlaneAngle AAngle, OCGraphic3d_TextPath ATp, OCGraphic3d_HorizontalTextAlignment AHta, OCGraphic3d_VerticalTextAlignment AVta) ;

//! Drawn the structure <AStructure>. <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is not opened. <br>
static /*instead*/  void DrawStructure(OCNaroWrappers::OCGraphic3d_Structure^ AStructure) ;

//! Modifies the current lines attributes. <br>
//!  Warning: No default attributes <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is not opened. <br>
static /*instead*/  void SetPrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectLine3d^ CTX) ;

//! Modifies the current faces attributes <br>
//!  Warning: No default attributes <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is not opened. <br>
static /*instead*/  void SetPrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectFillArea3d^ CTX) ;

//! Modifies the current texts attributes <br>
//!  Warning: No default attributes <br>
//!    Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is not opened. <br>
static /*instead*/  void SetPrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectText3d^ CTX) ;

//! Modifies the current markers attributes <br>
//!  Warning: No default attributes <br>
//! Raises TransientDefinitionError from Visual3d; <br>
//! if   Drawing is not opened. <br>
static /*instead*/  void SetPrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectMarker3d^ CTX) ;

//! Returns the coordinates of the boundary box <br>
//!      of the Transient graphics actually drawn <br>
//!      since BeginDraw() has been call. <br>
//!  Warning: If nothing has been drawn then : <br>
//!      XMin = YMin = ZMin = RealFirst (). <br>
//!      XMax = YMax = ZMax = RealLast (). <br>
static /*instead*/  void MinMaxValues(Standard_Real& XMin, Standard_Real& YMin, Standard_Real& ZMin, Standard_Real& XMax, Standard_Real& YMax, Standard_Real& ZMax) ;

//! Returns the coordinates of the boundary box projection <br>
//!      of the Transient graphics actually drawn <br>
//!      since BeginDraw() has been call. <br>
//!  Warning: If nothing has been drawn then : <br>
//!      XMin = YMin = ZMin = RealFirst (). <br>
//!      XMax = YMax = ZMax = RealLast (). <br>
static /*instead*/  void MinMaxValues(Standard_Real& UMin, Standard_Real& VMin, Standard_Real& UMax, Standard_Real& VMax) ;

//! Modifies the current local modelling transformation <br>
//!      of the transient graphics. <br>
static /*instead*/  void SetTransform(OCNaroWrappers::OCTColStd_Array2OfReal^ AMatrix, OCGraphic3d_TypeOfComposition AType) ;

~OCVisual3d_TransientManager()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
