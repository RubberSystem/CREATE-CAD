// File generated by CPPExt (Transient)
//
#ifndef _Visual3d_View_OCWrappers_HeaderFile
#define _Visual3d_View_OCWrappers_HeaderFile

// include the wrapped class
#include <Visual3d_View.hxx>
#include "../Converter.h"

#include "../Graphic3d/Graphic3d_DataStructureManager.h"

#include "Visual3d_ContextView.h"
#include "Visual3d_ViewMapping.h"
#include "Visual3d_ViewOrientation.h"
#include "../TColStd/TColStd_Array2OfReal.h"
#include "../Graphic3d/Graphic3d_SequenceOfStructure.h"
#include "../Aspect/Aspect_Background.h"
#include "../Aspect/Aspect_GradientBackground.h"
#include "../Graphic3d/Graphic3d_MapOfStructure.h"
#include "../Aspect/Aspect_FillMethod.h"
#include "../Aspect/Aspect_GradientFillMethod.h"
#include "Visual3d_TypeOfBackfacingModel.h"
#include "../Quantity/Quantity_NameOfColor.h"
#include "../Aspect/Aspect_TypeOfTriedronPosition.h"
#include "../Aspect/Aspect_TypeOfTriedronEcho.h"
#include "../Font/Font_FontAspect.h"
#include "Visual3d_TypeOfAnswer.h"
#include "../Aspect/Aspect_TypeOfUpdate.h"
#include "../Aspect/Aspect_TypeOfHighlightMethod.h"
#include "../Aspect/Aspect_PrintAlgo.h"
#include "../Graphic3d/Graphic3d_ExportFormat.h"
#include "../Graphic3d/Graphic3d_SortType.h"


namespace OCNaroWrappers
{

ref class OCAspect_Window;
ref class OCGraphic3d_GraphicDriver;
ref class OCVisual3d_ViewManager;
ref class OCVisual3d_ViewOrientation;
ref class OCVisual3d_ViewMapping;
ref class OCVisual3d_ContextView;
ref class OCVisual3d_Layer;
ref class OCAspect_Background;
ref class OCAspect_GradientBackground;
ref class OCTColStd_Array2OfReal;
ref class OCTCollection_ExtendedString;
ref class OCQuantity_Color;
ref class OCTCollection_AsciiString;
ref class OCGraphic3d_MapOfStructure;
ref class OCGraphic3d_Structure;
ref class OCAspect_GraphicDriver;
ref class OCGraphic3d_Plotter;


//! Creation and edition of a view in a 3D visualiser. <br>
//!	    A 3D view is composed of an "orientation" part defined <br>
//!	    by the position of the observer, the direction of view, <br>
//!	    and a "mapping" part defined by the type of projection <br>
//!	    (parallel or perspective) and by the window-viewport <br>
//!	    couple which allows passage from the projected coordinate <br>
//!	    space into the screen space. <br>
//! Summary of 3D Viewing <br>
//! To define a view, you must define: <br>
//! -   The view orientation transformation <br>
//! -   The view mapping transformation <br>
//! -   The view representation. <br>
//!  To activate a view, you must define: <br>
//! -   The associated window. <br>
public ref class OCVisual3d_View : OCGraphic3d_DataStructureManager {

protected:
  // dummy constructor;
  OCVisual3d_View(OCDummy^) : OCGraphic3d_DataStructureManager((OCDummy^)nullptr) {};

public:

// constructor from native
OCVisual3d_View(Handle(Visual3d_View)* nativeHandle);

// Methods PUBLIC

//! Creates a view in the viewer <AManager> with a default <br>
//!	    orientation and a default mapping. <br>
OCVisual3d_View(OCNaroWrappers::OCVisual3d_ViewManager^ AManager);

//! Creates a view in the viewer <AManager> with the orientation <br>
//!	    <VO>, the mapping <VM>, and the context<CTX>. <br>
OCVisual3d_View(OCNaroWrappers::OCVisual3d_ViewManager^ AManager, OCNaroWrappers::OCVisual3d_ViewOrientation^ VO, OCNaroWrappers::OCVisual3d_ViewMapping^ VM, OCNaroWrappers::OCVisual3d_ContextView^ CTX);

//! Activates the view <me>. <br>
//!	    Map the associated window on the screen and <br>
//!	    post the view in this window. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  void Activate() ;

//! Deactivates the view <me>. <br>
//!	    Unmap the associated window on the screen and <br>
//!	    unpost the view in this window. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  void Deactivate() ;

//! Updates screen in all cases. <br>
 /*instead*/  void Redraw() ;

//! Updates screen area in all cases. <br>
//! area is given by his xy min corner and size in pixel coordinates <br>
 /*instead*/  void Redraw(Standard_Integer x, Standard_Integer y, Standard_Integer width, Standard_Integer height) ;

//! Updates screen in all cases. <br>
 /*instead*/  void Redraw(OCNaroWrappers::OCVisual3d_Layer^ AnUnderLayer, OCNaroWrappers::OCVisual3d_Layer^ AnOverLayer) ;

//! Updates screen area in all cases. <br>
//! area is given by his xy min corner and size in pixel coordinates <br>
 /*instead*/  void Redraw(OCNaroWrappers::OCVisual3d_Layer^ AnUnderLayer, OCNaroWrappers::OCVisual3d_Layer^ AnOverLayer, Standard_Integer x, Standard_Integer y, Standard_Integer width, Standard_Integer height) ;

//! Deletes and erases the view <me>. <br>
//!  Warning: No more graphic operations in <me> after this call. <br>
 /*instead*/  void Remove() ;

//! Updates the view <me> after the modification <br>
//!	    of the associated window. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  void Resized() ;

//! Modifies the default window background. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  void SetBackground(OCNaroWrappers::OCAspect_Background^ ABack) ;


//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  void SetBackgroundImage(System::String^ FileName, OCAspect_FillMethod FillStyle, System::Boolean update) ;


//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  void SetBgImageStyle(OCAspect_FillMethod FillStyle, System::Boolean update) ;

//! Modifies the gradient window background. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  void SetGradientBackground(OCNaroWrappers::OCAspect_GradientBackground^ ABack, System::Boolean update) ;


//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  void SetBgGradientStyle(OCAspect_GradientFillMethod FillStyle, System::Boolean update) ;

//! Manages display of the back faces <br>
 /*instead*/  void SetBackFacingModel(OCVisual3d_TypeOfBackfacingModel aModel) ;

//! Returns current state of the back faces display <br>
 /*instead*/  OCVisual3d_TypeOfBackfacingModel BackFacingModel() ;

//! Sets the context <CTX> in the view <me>. <br>
 /*instead*/  void SetContext(OCNaroWrappers::OCVisual3d_ContextView^ CTX) ;

//! Sets the transformation matrix that is applied <br>
//!          to <MyViewOrientation> field of the view <me>. <br>
 /*instead*/  void SetTransform(OCNaroWrappers::OCTColStd_Array2OfReal^ AMatrix) ;

//! Modifies the mapping of the view <me>. <br>
 /*instead*/  void SetViewMapping(OCNaroWrappers::OCVisual3d_ViewMapping^ VM) ;

//! Saves the current mapping which will be the <br>
//!	    reference value for the reset of the mapping <br>
//!	    done by the ViewmappingReset method. <br>
 /*instead*/  void SetViewMappingDefault() ;

//! Modifies the orientation of <me>. <br>
 /*instead*/  void SetViewOrientation(OCNaroWrappers::OCVisual3d_ViewOrientation^ VO) ;

//! Saves the current orientation which will be the <br>
//!	    reference value for the reset of the orientation <br>
//!	    done by the ViewOrientationReset method. <br>
 /*instead*/  void SetViewOrientationDefault() ;

//! Associates the window <AWindow> to the view <me>. <br>
//!	    No new association if the window is already defined. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if it is impossible <br>
//!	    to associate a view and a window. <br>
//!	    (association already done or another problem) <br>
//!	    Modifies the viewmapping of the associated view <br>
//!	    when it calls the SetRatio method. <br>
//!	    After this call, each view is mapped in an unique window. <br>
 /*instead*/  void SetWindow(OCNaroWrappers::OCAspect_Window^ AWindow) ;

//! Associates the window <AWindow> and context <AContext> <br>
//!	    to the view <me>. <br>
//!	    If <AContext> is not NULL the graphic context is used <br>
//!          directly to draw something in this view. <br>
//!	    Otherwise an internal context is created. <br>
//!          If <ADisplayCB> is not NULL then a user display CB is <br>
//!          call at the end of the OCC graphic traversal and just <br>
//!          before the swap of buffers. The <aClientData> is pass <br>
//!          to this call back. <br>
//!	    No new association if the window is already defined. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewDefinitionError if it is impossible <br>
//!	    to associate a view and a window. <br>
//!	    (association already done or another problem) <br>
//!	    Modifies the viewmapping of the associated view <br>
//!	    when it calls the SetRatio method. <br>
//!	    After this call, each view is mapped in an unique window. <br>
 /*instead*/  void SetWindow(OCNaroWrappers::OCAspect_Window^ AWindow, Aspect_RenderingContext AContext, Aspect_GraphicCallbackProc ADisplayCB, Standard_Address AClientData) ;

//! Updates screen in function of modifications of <br>
//!	    the structures. <br>
 /*instead*/  void Update() ;

//! Updates screen in function of modifications of <br>
//!	    the structures. <br>
 /*instead*/  void Update(OCNaroWrappers::OCVisual3d_Layer^ AnUnderLayer, OCNaroWrappers::OCVisual3d_Layer^ AnOverLayer) ;

//! Sets the value of the mapping to be the same as <br>
//!	    the mapping saved by the SetViewMappingDefaut method. <br>
 /*instead*/  void ViewMappingReset() ;

//! Sets the value of the orientation to be the same as the <br>
//!	    orientation saved by the SetViewOrientationDefaut method. <br>
 /*instead*/  void ViewOrientationReset() ;

//! Activates animation mode with an optional degeneration <br>
//!	according to the TypeOfDegenerateModel of each graphic structure <br>
//!	When the animation mode is activated in the view, <br>
//!	all Graphic3d_Structure are stored in a graphic object. <br>
//!  Warning: only ONE view may have animation mode turned on <br>
//!	at same time. <br>
 /*instead*/  void SetAnimationModeOn(System::Boolean degenerate) ;

//! Deactivates the animation mode. <br>
 /*instead*/  void SetAnimationModeOff() ;

//! Returns the activity of the animation mode. <br>
 /*instead*/  System::Boolean AnimationModeIsOn() ;

//! Returns the activity of the degenerate mode. <br>
 /*instead*/  System::Boolean DegenerateModeIsOn() ;

//! Switches computed HLR mode in the view <br>
 /*instead*/  void SetComputedMode(System::Boolean aMode) ;

//! Returns the computed HLR mode state <br>
 /*instead*/  System::Boolean ComputedMode() ;

//! Customization of the ZBUFFER Triedron. <br>
//!         Initializes Colors of X Y and axis <br>
//!         Scale ratio defines decreasing of trihedron size when <br>
//!         its position is out of a View <br>
 /*instead*/  void ZBufferTriedronSetup(OCQuantity_NameOfColor XColor, OCQuantity_NameOfColor YColor, OCQuantity_NameOfColor ZColor, Standard_Real SizeRatio, Standard_Real AxisDiametr, Standard_Integer NbFacettes) ;

//! Display of the Triedron. <br>
//!         Initialize position, color and length of Triedron axes. <br>
//!         The scale is a percent of the window width. <br>
//!         If AsWireframe is FALSE triedron is shown in shaded mode <br>
//!         AColor is not considered for ZBUFFER mode <br>
 /*instead*/  void TriedronDisplay(OCAspect_TypeOfTriedronPosition APosition, OCQuantity_NameOfColor AColor, Standard_Real AScale, System::Boolean AsWireframe) ;

//! Erases the Triedron. <br>
 /*instead*/  void TriedronErase() ;

//! Highlights the echo zone of the Triedron. <br>
 /*instead*/  void TriedronEcho(OCAspect_TypeOfTriedronEcho AType) ;

//! Returns data of a graduated trihedron if displayed (return value is True) <br>
 /*instead*/  System::Boolean GetGraduatedTrihedron(OCNaroWrappers::OCTCollection_ExtendedString^ xname, OCNaroWrappers::OCTCollection_ExtendedString^ yname, OCNaroWrappers::OCTCollection_ExtendedString^ zname, System::Boolean& xdrawname, System::Boolean& ydrawname, System::Boolean& zdrawname, System::Boolean& xdrawvalues, System::Boolean& ydrawvalues, System::Boolean& zdrawvalues, System::Boolean& drawgrid, System::Boolean& drawaxes, Standard_Integer& nbx, Standard_Integer& nby, Standard_Integer& nbz, Standard_Integer& xoffset, Standard_Integer& yoffset, Standard_Integer& zoffset, Standard_Integer& xaxisoffset, Standard_Integer& yaxisoffset, Standard_Integer& zaxisoffset, System::Boolean& xdrawtickmarks, System::Boolean& ydrawtickmarks, System::Boolean& zdrawtickmarks, Standard_Integer& xtickmarklength, Standard_Integer& ytickmarklength, Standard_Integer& ztickmarklength, OCNaroWrappers::OCQuantity_Color^ gridcolor, OCNaroWrappers::OCQuantity_Color^ xnamecolor, OCNaroWrappers::OCQuantity_Color^ ynamecolor, OCNaroWrappers::OCQuantity_Color^ znamecolor, OCNaroWrappers::OCQuantity_Color^ xcolor, OCNaroWrappers::OCQuantity_Color^ ycolor, OCNaroWrappers::OCQuantity_Color^ zcolor, OCNaroWrappers::OCTCollection_AsciiString^ fontOfNames, OCFont_FontAspect& styleOfNames, Standard_Integer& sizeOfNames, OCNaroWrappers::OCTCollection_AsciiString^ fontOfValues, OCFont_FontAspect& styleOfValues, Standard_Integer& sizeOfValues) ;

//! Displays a graduated trihedron. <br>
 /*instead*/  void GraduatedTrihedronDisplay(OCNaroWrappers::OCTCollection_ExtendedString^ xname, OCNaroWrappers::OCTCollection_ExtendedString^ yname, OCNaroWrappers::OCTCollection_ExtendedString^ zname, System::Boolean xdrawname, System::Boolean ydrawname, System::Boolean zdrawname, System::Boolean xdrawvalues, System::Boolean ydrawvalues, System::Boolean zdrawvalues, System::Boolean drawgrid, System::Boolean drawaxes, Standard_Integer nbx, Standard_Integer nby, Standard_Integer nbz, Standard_Integer xoffset, Standard_Integer yoffset, Standard_Integer zoffset, Standard_Integer xaxisoffset, Standard_Integer yaxisoffset, Standard_Integer zaxisoffset, System::Boolean xdrawtickmarks, System::Boolean ydrawtickmarks, System::Boolean zdrawtickmarks, Standard_Integer xtickmarklength, Standard_Integer ytickmarklength, Standard_Integer ztickmarklength, OCNaroWrappers::OCQuantity_Color^ gridcolor, OCNaroWrappers::OCQuantity_Color^ xnamecolor, OCNaroWrappers::OCQuantity_Color^ ynamecolor, OCNaroWrappers::OCQuantity_Color^ znamecolor, OCNaroWrappers::OCQuantity_Color^ xcolor, OCNaroWrappers::OCQuantity_Color^ ycolor, OCNaroWrappers::OCQuantity_Color^ zcolor, OCNaroWrappers::OCTCollection_AsciiString^ fontOfNames, OCFont_FontAspect styleOfNames, Standard_Integer sizeOfNames, OCNaroWrappers::OCTCollection_AsciiString^ fontOfValues, OCFont_FontAspect styleOfValues, Standard_Integer sizeOfValues) ;

//! Erases a graduated trihedron from the view. <br>
 /*instead*/  void GraduatedTrihedronErase() ;

//! Returns the value of the default window background. <br>
 /*instead*/  OCAspect_Background^ Background() ;

//! Returns the value of the window background. <br>
 /*instead*/  OCAspect_GradientBackground^ GradientBackground() ;

//! Returns Standard_True if one of the structures <br>
//!	    displayed in the view <me> contains Polygons, <br>
//!	    Triangles or Quadrangles. <br>
 /*instead*/  System::Boolean ContainsFacet() ;

//! Returns Standard_True if one of the structures <br>
//!	    in the set <ASet> contains Polygons, Triangles <br>
//!	    or Quadrangles. <br>
 /*instead*/  System::Boolean ContainsFacet(OCNaroWrappers::OCGraphic3d_MapOfStructure^ ASet) ;

//! Returns the current context of the view <me>. <br>
 /*instead*/  OCVisual3d_ContextView^ Context() ;

//! Returns the set of structures displayed in <br>
//!	    the view <me>. <br>
 /*instead*/  void DisplayedStructures(OCNaroWrappers::OCGraphic3d_MapOfStructure^ SG) ;

//! Returns the activity flag of the view <me>. <br>
 /*instead*/  System::Boolean IsActive() ;

//! Returns True if the window associated to the view <br>
//!	    <me> is defined. <br>
 /*instead*/  System::Boolean IsDefined() ;

//! Returns Standard_True is the view <me> is deleted. <br>
//!	    <me> is deleted after the call Remove (me). <br>
 /*instead*/  System::Boolean IsDeleted() ;

//! Returns the coordinates of the boundary box of all <br>
//!	    structures displayed in the view <me>. <br>
 /*instead*/  void MinMaxValues(Standard_Real& XMin, Standard_Real& YMin, Standard_Real& ZMin, Standard_Real& XMax, Standard_Real& YMax, Standard_Real& ZMax) ;

//! Returns the coordinates of the boundary box of all <br>
//!	    structures in the set <ASet>. <br>
 /*instead*/  void MinMaxValues(OCNaroWrappers::OCGraphic3d_MapOfStructure^ ASet, Standard_Real& XMin, Standard_Real& YMin, Standard_Real& ZMin, Standard_Real& XMax, Standard_Real& YMax, Standard_Real& ZMax) ;

//! Returns the coordinates of the projection of the <br>
//!	    boundary box of all structures displayed in the view <me>. <br>
 /*instead*/  void MinMaxValues(Standard_Real& XMin, Standard_Real& YMin, Standard_Real& XMax, Standard_Real& YMax) ;

//! Returns the coordinates of the projection of the <br>
//!	    boundary box of all structures in the set <ASet>. <br>
 /*instead*/  void MinMaxValues(OCNaroWrappers::OCGraphic3d_MapOfStructure^ ASet, Standard_Real& XMin, Standard_Real& YMin, Standard_Real& XMax, Standard_Real& YMax) ;

//! Returns number of displayed structures in <br>
//!	    the view <me>. <br>
 /*instead*/  Standard_Integer NumberOfDisplayedStructures() ;

//! Returns the coordinates of the projection of the <br>
//!	    3d coordinates <AX>, <AY>, <AZ>. <br>
 /*instead*/  void Projects(Standard_Real AX, Standard_Real AY, Standard_Real AZ, Standard_Real& APX, Standard_Real& APY, Standard_Real& APZ) ;

//! Returns the transformation associated to the view <me> <br>
 /*instead*/  OCTColStd_Array2OfReal^ Transform() ;

//! Returns the current mapping of the view <me>. <br>
 /*instead*/  OCVisual3d_ViewMapping^ ViewMapping() ;

//! Returns the current reset mapping of the view <me>. <br>
 /*instead*/  OCVisual3d_ViewMapping^ ViewMappingDefault() ;

//! Returns the current orientation of the view <me>. <br>
 /*instead*/  OCVisual3d_ViewOrientation^ ViewOrientation() ;

//! Returns the current reset orientation of the view <me>. <br>
 /*instead*/  OCVisual3d_ViewOrientation^ ViewOrientationDefault() ;

//! Returns the window associated to the view <me>. <br>
//!  Warning: Raises ViewDefinitionError if the associated <br>
//!	    window isn't defined. <br>
 /*instead*/  OCAspect_Window^ Window() ;

//! Returns the MAX number of light associated to the view <me>. <br>
 /*instead*/  Standard_Integer LightLimit() ;

//! Returns the MAX number of clipping planes <br>
//! associated to the view <me>. <br>
 /*instead*/  Standard_Integer PlaneLimit() ;

//! Returns the view manager handle which manage this view <br>
 /*instead*/  OCVisual3d_ViewManager^ ViewManager() ;

//! Computes the new presentation of the <br>
//!	    structure <AStructure> displayed in <me> <br>
//!	    with the type Graphic3d_TOS_COMPUTED. <br>
 /*instead*/  void ReCompute(OCNaroWrappers::OCGraphic3d_Structure^ AStructure) ;

//! Returns the identification number of the view <me>. <br>
 /*instead*/  Standard_Integer Identification() ;

//! Returns the current matrix of mapping of the view <me>. <br>
//!  Warning: Stores the current matrix of mapping. <br>
 /*instead*/  OCTColStd_Array2OfReal^ MatrixOfMapping() ;

//! Returns the current matrix of orientation of the view <me>. <br>
//!  Warning: Stores the current matrix of orientation. <br>
 /*instead*/  OCTColStd_Array2OfReal^ MatrixOfOrientation() ;

//! Returns the c structure associated to <me>. <br>
 /*instead*/  Standard_Address CView() ;

//! Returns the associated GraphicDriver. <br>
 /*instead*/  OCAspect_GraphicDriver^ GraphicDriver() ;

//! Calls the method Plot for each Structure <br>
//!	    displayed in <me>. <br>
 /*instead*/  void Plot(OCNaroWrappers::OCGraphic3d_Plotter^ APlotter) ;

//! print the contents of all layers of the view to the printer. <br>
//! <hPrnDC> : Pass the PrinterDeviceContext (HDC), <br>
//! <showBackground> : When set to FALSE then print the view without background color <br>
//! (background is white) <br>
//! else set to TRUE for printing with current background color. <br>
//! <filename>: If != NULL, then the view will be printed to a file. <br>
//! <printAlgo>: Select print algorithm: stretch, tile. <br>
//! <theScaleFactor>: Scaling coefficient, used internally to scale the <br>
//! printings accordingly to the scale factor selected in the printer <br>
//! properties dialog. <br>
//! Returns Standard_True if the data is passed to the printer, otherwise <br>
//! Standard_False if the print operation failed due to printer error <br>
//! or insufficient memory. <br>
//!  Warning: Works only under Windows. <br>
 /*instead*/  System::Boolean Print(OCNaroWrappers::OCVisual3d_Layer^ AnUnderLayer, OCNaroWrappers::OCVisual3d_Layer^ AnOverLayer, System::IntPtr hPrnDC, System::Boolean showBackground, System::String^ filename, OCAspect_PrintAlgo printAlgorithm, Standard_Real theScaleFactor) ;

//! print the contents of the view to printer. <br>
//! <hPrnDC> : Pass the PrinterDeviceContext (HDC), <br>
//! <showBackground> : When set to FALSE then print the view without background color <br>
//! (background is white) <br>
//! else set to TRUE for printing with current background color. <br>
//! <filename>: If != NULL, then the view will be printed to a file. <br>
//! <printAlgo>: Select print algorithm: stretch, tile. <br>
//! <theScaleFactor>: Scaling coefficient, used internally to scale the <br>
//! printings accordingly to the scale factor selected in the printer <br>
//! properties dialog. <br>
//! Returns Standard_True if the data is passed to the printer, otherwise <br>
//! Standard_False if the print operation failed due to printer error <br>
//! or insufficient memory. <br>
//!  Warning: Works only under Windows. <br>
 /*instead*/  System::Boolean Print(System::IntPtr hPrnDC, System::Boolean showBackground, System::String^ filename, OCAspect_PrintAlgo printAlgorithm, Standard_Real theScaleFactor) ;

//! if <AFlag> is Standard_True then the transparency <br>
//!	    is managed in the view <me>. <br>
//!	    Default Standard_False <br>
 /*instead*/  void SetTransparency(System::Boolean AFlag) ;

//! Returns Standard_True if the ZBuffer is activated <br>
//!	    in the view <me> and Standard_False if not. <br>
 /*instead*/  System::Boolean ZBufferIsActivated() ;

//! Activates the ZBuffer if the integer <AnActivity> <br>
//!	    is equal to 1. <br>
//!	    Deactivates the ZBuffer if the integer <AnActivity> <br>
//!	    is equal to 0. <br>
//!	    If the integer <AnActivity> is equal to -1 then <br>
//!	    - the ZBuffer is activated if <br>
//!		me->Context ().Visualization () == Visual3d_TOV_SHADING <br>
//!	    - the ZBuffer is deactivated if <br>
//!		me->Context ().Visualization () == Visual3d_TOV_WIREFRAME <br>
 /*instead*/  void SetZBufferActivity(Standard_Integer AnActivity) ;

//! Returns the underlay of the view <me>. <br>
 /*instead*/  OCVisual3d_Layer^ UnderLayer() ;

//! Returns the underlay of the view <me>. <br>
 /*instead*/  OCVisual3d_Layer^ OverLayer() ;

//! turns on/off opengl depth <br>
 /*instead*/  void EnableDepthTest(System::Boolean enable) ;

//! returns current state of the opengl depth testing <br>
 /*instead*/  System::Boolean IsDepthTestEnabled() ;

//! Reads depths of shown pixels of the given rectangle <br>
 /*instead*/  void ReadDepths(Standard_Integer x, Standard_Integer y, Standard_Integer width, Standard_Integer height, Standard_Address buffer) ;

//! Generate offscreen FBO in the graphic library <br>
 /*instead*/  Graphic3d_PtrFrameBuffer FBOCreate(Standard_Integer width, Standard_Integer height) ;

//! Remove offscreen FBO from the graphic library <br>
 /*instead*/  void FBORelease(Graphic3d_PtrFrameBuffer& fboPtr) ;

//! Read offscreen FBO configuration. <br>
 /*instead*/  void FBOGetDimensions(Graphic3d_PtrFrameBuffer fboPtr, Standard_Integer& width, Standard_Integer& height, Standard_Integer& widthMax, Standard_Integer& heightMax) ;

//! Change offscreen FBO viewport. <br>
 /*instead*/  void FBOChangeViewport(Graphic3d_PtrFrameBuffer& fboPtr, Standard_Integer width, Standard_Integer height) ;

//! Dump active rendering buffer into specified memory buffer. <br>
 /*instead*/  System::Boolean BufferDump(Image_PixMap& theImage, Graphic3d_BufferType theBufferType) ;

//! turns on/off opengl lighting, currently used in triedron displaying <br>
 /*instead*/  void EnableGLLight(System::Boolean enable) ;

//! returns the current state of the gl lighting <br>
//!          currently used in triedron displaying <br>
 /*instead*/  System::Boolean IsGLLightEnabled() ;


//! Export scene into the one of the Vector graphics formats (SVG, PS, PDF...). <br>
//! In contrast to Bitmaps, Vector graphics is scalable (so you may got quality benefits on printing to laser printer). <br>
//! Notice however that results may differ a lot and do not contain some elements. <br>
 /*instead*/  System::Boolean Export(System::String^ theFileName, OCGraphic3d_ExportFormat theFormat, OCGraphic3d_SortType theSortType, Standard_Real thePrecision, Standard_Address theProgressBarFunc, Standard_Address theProgressObject) ;

~OCVisual3d_View()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
