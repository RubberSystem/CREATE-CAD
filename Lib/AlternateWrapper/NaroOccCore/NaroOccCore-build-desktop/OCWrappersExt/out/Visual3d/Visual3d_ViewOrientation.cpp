// File generated by CPPExt (CPP file)
//

#include "Visual3d_ViewOrientation.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray2OfReal.h"
#include "Visual3d_View.h"
#include "../Graphic3d/Graphic3d_Vertex.h"
#include "../Graphic3d/Graphic3d_Vector.h"


using namespace OCNaroWrappers;

OCVisual3d_ViewOrientation::OCVisual3d_ViewOrientation(Visual3d_ViewOrientation* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCVisual3d_ViewOrientation::OCVisual3d_ViewOrientation() 
{
  nativeHandle = new Visual3d_ViewOrientation();
}

OCVisual3d_ViewOrientation::OCVisual3d_ViewOrientation(OCNaroWrappers::OCGraphic3d_Vertex^ VRP, OCNaroWrappers::OCGraphic3d_Vector^ VPN, OCNaroWrappers::OCGraphic3d_Vector^ VUP) 
{
  nativeHandle = new Visual3d_ViewOrientation(*((Graphic3d_Vertex*)VRP->Handle), *((Graphic3d_Vector*)VPN->Handle), *((Graphic3d_Vector*)VUP->Handle));
}

OCVisual3d_ViewOrientation::OCVisual3d_ViewOrientation(OCNaroWrappers::OCGraphic3d_Vertex^ VRP, OCNaroWrappers::OCGraphic3d_Vector^ VPN, Standard_Real Twist) 
{
  nativeHandle = new Visual3d_ViewOrientation(*((Graphic3d_Vertex*)VRP->Handle), *((Graphic3d_Vector*)VPN->Handle), Twist);
}

OCVisual3d_ViewOrientation::OCVisual3d_ViewOrientation(OCNaroWrappers::OCGraphic3d_Vertex^ VRP, Standard_Real Azim, Standard_Real Inc, Standard_Real Twist) 
{
  nativeHandle = new Visual3d_ViewOrientation(*((Graphic3d_Vertex*)VRP->Handle), Azim, Inc, Twist);
}

 void OCVisual3d_ViewOrientation::SetViewReferencePlane(OCNaroWrappers::OCGraphic3d_Vector^ VPN)
{
  ((Visual3d_ViewOrientation*)nativeHandle)->SetViewReferencePlane(*((Graphic3d_Vector*)VPN->Handle));
}

 void OCVisual3d_ViewOrientation::SetViewReferencePoint(OCNaroWrappers::OCGraphic3d_Vertex^ VRP)
{
  ((Visual3d_ViewOrientation*)nativeHandle)->SetViewReferencePoint(*((Graphic3d_Vertex*)VRP->Handle));
}

 void OCVisual3d_ViewOrientation::SetViewReferenceUp(OCNaroWrappers::OCGraphic3d_Vector^ VUP)
{
  ((Visual3d_ViewOrientation*)nativeHandle)->SetViewReferenceUp(*((Graphic3d_Vector*)VUP->Handle));
}

 void OCVisual3d_ViewOrientation::SetAxialScale(Standard_Real Sx, Standard_Real Sy, Standard_Real Sz)
{
  ((Visual3d_ViewOrientation*)nativeHandle)->SetAxialScale(Sx, Sy, Sz);
}

 void OCVisual3d_ViewOrientation::SetCustomModelViewMatrix(OCNaroWrappers::OCTColStd_HArray2OfReal^ Mat)
{
  ((Visual3d_ViewOrientation*)nativeHandle)->SetCustomModelViewMatrix(*((Handle_TColStd_HArray2OfReal*)Mat->Handle));
}

 Standard_Real OCVisual3d_ViewOrientation::Twist()
{
  return ((Visual3d_ViewOrientation*)nativeHandle)->Twist();
}

OCGraphic3d_Vector^ OCVisual3d_ViewOrientation::ViewReferencePlane()
{
  Graphic3d_Vector* tmp = new Graphic3d_Vector();
  *tmp = ((Visual3d_ViewOrientation*)nativeHandle)->ViewReferencePlane();
  return gcnew OCGraphic3d_Vector(tmp);
}

OCGraphic3d_Vertex^ OCVisual3d_ViewOrientation::ViewReferencePoint()
{
  Graphic3d_Vertex* tmp = new Graphic3d_Vertex();
  *tmp = ((Visual3d_ViewOrientation*)nativeHandle)->ViewReferencePoint();
  return gcnew OCGraphic3d_Vertex(tmp);
}

OCGraphic3d_Vector^ OCVisual3d_ViewOrientation::ViewReferenceUp()
{
  Graphic3d_Vector* tmp = new Graphic3d_Vector();
  *tmp = ((Visual3d_ViewOrientation*)nativeHandle)->ViewReferenceUp();
  return gcnew OCGraphic3d_Vector(tmp);
}

 void OCVisual3d_ViewOrientation::AxialScale(Standard_Real& Sx, Standard_Real& Sy, Standard_Real& Sz)
{
  ((Visual3d_ViewOrientation*)nativeHandle)->AxialScale(Sx, Sy, Sz);
}

 System::Boolean OCVisual3d_ViewOrientation::IsCustomMatrix()
{
  return OCConverter::StandardBooleanToBoolean(((Visual3d_ViewOrientation*)nativeHandle)->IsCustomMatrix());
}


