// File generated by CPPExt (MPV)
//
#ifndef _Visual3d_ViewMapping_OCWrappers_HeaderFile
#define _Visual3d_ViewMapping_OCWrappers_HeaderFile

// include native header
#include <Visual3d_ViewMapping.hxx>
#include "../Converter.h"


#include "../Graphic3d/Graphic3d_Vertex.h"
#include "Visual3d_TypeOfProjection.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HArray2OfReal;
ref class OCVisual3d_View;
ref class OCGraphic3d_Vertex;


//! This class allows the definition of a projection and <br>
//!	    a system of coordinates called NPC. <br>
//!	    (Normalized Projection Coordinates). <br>
//!	    The projection can be parallel or perspective. <br>
//!  References: The definitions are Phigs oriented. <br>
//!  Keywords: View, Mapping, Window, View Plane, Front Plane, <br>
//!    BackPlane, Projection Type, Reset, Projection <br>
//! Summary of 3D View Mapping                   -- <br>
//! The view mapping transformation  defines the -- <br>
//! window-to-viewport mapping of View Reference -- <br>
//! Coordinates (VRC)  to Normalized  Projection -- <br>
//! Coordinates (NPC).                           -- <br>
//! CAS.CADE supports two kinds of projection :  -- <br>
//! 	Parallel :                              -- <br>
//!	The Projection Reference Point (PRP)    -- <br>
//!	determines the direction of projection. -- <br>
//! 	Perspective :                           -- <br>
//!	The projector lines converge at the     -- <br>
//!	Projection Reference Point (PRP).       -- <br>
//! To define a  view mapping transformation you -- <br>
//! must define :                                -- <br>
//!	The Projection Type                     -- <br>
//!	The Projection Reference Point (PRP)    -- <br>
//!	The Distance from Back Plane (BPD)      -- <br>
//!	The Distance from Front Plane (FPD)     -- <br>
//!	The Distance from View Plane (VPD)      -- <br>
//!	The Window in the View Plane.           -- <br>
public ref class OCVisual3d_ViewMapping  {

protected:
  Visual3d_ViewMapping* nativeHandle;
  OCVisual3d_ViewMapping(OCDummy^) {};

public:
  property Visual3d_ViewMapping* Handle
  {
    Visual3d_ViewMapping* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCVisual3d_ViewMapping(Visual3d_ViewMapping* nativeHandle);

// Methods PUBLIC

//! Creates a projection. <br>
OCVisual3d_ViewMapping();

//! Creates a projection. <br>
OCVisual3d_ViewMapping(OCVisual3d_TypeOfProjection AType, OCNaroWrappers::OCGraphic3d_Vertex^ PRP, Standard_Real BPD, Standard_Real FPD, Standard_Real VPD, Standard_Real WUmin, Standard_Real WVmin, Standard_Real WUmax, Standard_Real WVmax);

//! Modifies the back clipping plane. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewMappingDefinitionError <br>
//!	    if <PRP> is between the front and back planes. <br>
//!	    if <PRP> is positioned on the view plane. <br>
//!	    if the back plane is in front of the front plane. <br>
 /*instead*/  void SetBackPlaneDistance(Standard_Real BPD) ;

//! Modifies the front clipping plane. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewMappingDefinitionError <br>
//!	    if <PRP> is between the front and back planes. <br>
//!	    if <PRP> is positioned on the view plane. <br>
//!	    if the back plane is in front of the front plane. <br>
 /*instead*/  void SetFrontPlaneDistance(Standard_Real FPD) ;

//! Modifies the type of projection. <br>
 /*instead*/  void SetProjection(OCVisual3d_TypeOfProjection AType) ;

//! Modifies the PRP. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewMappingDefinitionError <br>
//!	    if <PRP> is between the front and back planes. <br>
//!	    if <PRP> is positioned on the view plane. <br>
 /*instead*/  void SetProjectionReferencePoint(OCNaroWrappers::OCGraphic3d_Vertex^ PRP) ;

//! Modifies the distance of the view plane of projection. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewMappingDefinitionError <br>
//!	    if <PRP> is positioned on the view plane. <br>
 /*instead*/  void SetViewPlaneDistance(Standard_Real VPD) ;

//! Modifies the visible part of the projection plane. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises ViewMappingDefinitionError if the <br>
//!	    specified window is invalid. <br>
 /*instead*/  void SetWindowLimit(Standard_Real Umin, Standard_Real Vmin, Standard_Real Umax, Standard_Real Vmax) ;

//! Sets custom PROJECTION matrix for the OpenGl context <br>
 /*instead*/  void SetCustomProjectionMatrix(OCNaroWrappers::OCTColStd_HArray2OfReal^ Mat) ;

//! Returns the distance from the back clipping plane <br>
//! of this view mapping. <br>
 /*instead*/  Standard_Real BackPlaneDistance() ;

//! Returns the distance from the front clipping plane <br>
//! of this view mapping. <br>
 /*instead*/  Standard_Real FrontPlaneDistance() ;

//! Returns the type of projection. <br>
 /*instead*/  OCVisual3d_TypeOfProjection Projection() ;

//! Returns the PRP. <br>
 /*instead*/  OCGraphic3d_Vertex^ ProjectionReferencePoint() ;

//! Returns the distance from the projection plane. <br>
 /*instead*/  Standard_Real ViewPlaneDistance() ;

//! Returns the visible part of the projection plane. <br>
 /*instead*/  void WindowLimit(Standard_Real& Umin, Standard_Real& Vmin, Standard_Real& Umax, Standard_Real& Vmax) ;

//! Returns whether the custom PROJECTION matrix is used. <br>
 /*instead*/  System::Boolean IsCustomMatrix() ;

~OCVisual3d_ViewMapping()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
