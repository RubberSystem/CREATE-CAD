// File generated by CPPExt (CPP file)
//

#include "V2d_View.h"
#include "../Converter.h"
#include "../Aspect/Aspect_WindowDriver.h"
#include "../Graphic2d/Graphic2d_ViewMapping.h"
#include "../Graphic2d/Graphic2d_GraphicObject.h"
#include "../Graphic2d/Graphic2d_Buffer.h"
#include "V2d_Viewer.h"
#include "../Graphic2d/Graphic2d_DisplayList.h"
#include "../PlotMgt/PlotMgt_PlotterDriver.h"
#include "../Graphic2d/Graphic2d_View.h"
#include "../Quantity/Quantity_Color.h"


using namespace OCNaroWrappers;

OCV2d_View::OCV2d_View(Handle(V2d_View)* nativeHandle) : OCViewer_View((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_V2d_View(*nativeHandle);
}

OCV2d_View::OCV2d_View(OCNaroWrappers::OCAspect_WindowDriver^ aWindowDriver, OCNaroWrappers::OCV2d_Viewer^ aViewer, Quantity_Length aXCenter, Quantity_Length aYCenter, Quantity_Length aSize) : OCViewer_View((OCDummy^)nullptr)

{
  nativeHandle = new Handle_V2d_View(new V2d_View(*((Handle_Aspect_WindowDriver*)aWindowDriver->Handle), *((Handle_V2d_Viewer*)aViewer->Handle), aXCenter, aYCenter, aSize));
}

 void OCV2d_View::SetDefaultPosition(Quantity_Length aXCenter, Quantity_Length aYCenter, Quantity_Length aSize)
{
  (*((Handle_V2d_View*)nativeHandle))->SetDefaultPosition(aXCenter, aYCenter, aSize);
}

 void OCV2d_View::Fitall()
{
  (*((Handle_V2d_View*)nativeHandle))->Fitall();
}

 void OCV2d_View::WindowFit(Standard_Integer aX1, Standard_Integer aY1, Standard_Integer aX2, Standard_Integer aY2)
{
  (*((Handle_V2d_View*)nativeHandle))->WindowFit(aX1, aY1, aX2, aY2);
}

 void OCV2d_View::Fit(Quantity_Length aX1, Quantity_Length aY1, Quantity_Length aX2, Quantity_Length aY2, System::Boolean UseMinimum)
{
  (*((Handle_V2d_View*)nativeHandle))->Fit(aX1, aY1, aX2, aY2, OCConverter::BooleanToStandardBoolean(UseMinimum));
}

 void OCV2d_View::SetFitallRatio(Quantity_Ratio aRatio)
{
  (*((Handle_V2d_View*)nativeHandle))->SetFitallRatio(aRatio);
}

 void OCV2d_View::Zoom(Quantity_Factor Zoom)
{
  (*((Handle_V2d_View*)nativeHandle))->Zoom(Zoom);
}

 void OCV2d_View::Zoom(Standard_Integer aX1, Standard_Integer aY1, Standard_Integer aX2, Standard_Integer aY2, Quantity_Ratio aCoefficient)
{
  (*((Handle_V2d_View*)nativeHandle))->Zoom(aX1, aY1, aX2, aY2, aCoefficient);
}

 void OCV2d_View::Zoom(Standard_Integer aX, Standard_Integer aY, Quantity_Ratio aCoefficient)
{
  (*((Handle_V2d_View*)nativeHandle))->Zoom(aX, aY, aCoefficient);
}

 void OCV2d_View::Magnify(OCNaroWrappers::OCV2d_View^ anOriginView, Standard_Integer X1, Standard_Integer Y1, Standard_Integer X2, Standard_Integer Y2)
{
  (*((Handle_V2d_View*)nativeHandle))->Magnify(*((Handle_V2d_View*)anOriginView->Handle), X1, Y1, X2, Y2);
}

 void OCV2d_View::Translate(Quantity_Length dx, Quantity_Length dy)
{
  (*((Handle_V2d_View*)nativeHandle))->Translate(dx, dy);
}

 void OCV2d_View::Place(Standard_Integer x, Standard_Integer y, Quantity_Factor aZoomFactor)
{
  (*((Handle_V2d_View*)nativeHandle))->Place(x, y, aZoomFactor);
}

 void OCV2d_View::ScreenPlace(Quantity_Length x, Quantity_Length y, Quantity_Factor aZoomFactor)
{
  (*((Handle_V2d_View*)nativeHandle))->ScreenPlace(x, y, aZoomFactor);
}

 void OCV2d_View::Pan(Standard_Integer dx, Standard_Integer dy)
{
  (*((Handle_V2d_View*)nativeHandle))->Pan(dx, dy);
}

 Quantity_Length OCV2d_View::Convert(Standard_Integer V)
{
  return (*((Handle_V2d_View*)nativeHandle))->Convert(V);
}

 void OCV2d_View::Convert(Standard_Integer X, Standard_Integer Y, Quantity_Length& ViewX, Quantity_Length& ViewY)
{
  (*((Handle_V2d_View*)nativeHandle))->Convert(X, Y, ViewX, ViewY);
}

 void OCV2d_View::Convert(Quantity_Length ViewX, Quantity_Length ViewY, Standard_Integer& X, Standard_Integer& Y)
{
  (*((Handle_V2d_View*)nativeHandle))->Convert(ViewX, ViewY, X, Y);
}

 Quantity_Length OCV2d_View::Convert(Quantity_Length aDriverSize)
{
  return (*((Handle_V2d_View*)nativeHandle))->Convert(aDriverSize);
}

 void OCV2d_View::Reset()
{
  (*((Handle_V2d_View*)nativeHandle))->Reset();
}

 void OCV2d_View::Previous()
{
  (*((Handle_V2d_View*)nativeHandle))->Previous();
}

 void OCV2d_View::DisableStorePrevious()
{
  (*((Handle_V2d_View*)nativeHandle))->DisableStorePrevious();
}

 void OCV2d_View::EnableStorePrevious()
{
  (*((Handle_V2d_View*)nativeHandle))->EnableStorePrevious();
}

 void OCV2d_View::Update()
{
  (*((Handle_V2d_View*)nativeHandle))->Update();
}

 void OCV2d_View::UpdateNew()
{
  (*((Handle_V2d_View*)nativeHandle))->UpdateNew();
}

 void OCV2d_View::RestoreArea(Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height)
{
  (*((Handle_V2d_View*)nativeHandle))->RestoreArea(Xc, Yc, Width, Height);
}

 void OCV2d_View::Restore()
{
  (*((Handle_V2d_View*)nativeHandle))->Restore();
}

 void OCV2d_View::Dump()
{
  (*((Handle_V2d_View*)nativeHandle))->Dump();
}

 void OCV2d_View::Dump(System::String^ aFileName)
{
  (*((Handle_V2d_View*)nativeHandle))->Dump(OCConverter::StringToStandardCString(aFileName));
}

OCGraphic2d_DisplayList^ OCV2d_View::Pick(Standard_Integer X, Standard_Integer Y, Standard_Integer aPrecision)
{
  Handle(Graphic2d_DisplayList) tmp = (*((Handle_V2d_View*)nativeHandle))->Pick(X, Y, aPrecision);
  return gcnew OCGraphic2d_DisplayList(&tmp);
}

OCGraphic2d_DisplayList^ OCV2d_View::PickByCircle(Standard_Integer X, Standard_Integer Y, Standard_Integer Radius)
{
  Handle(Graphic2d_DisplayList) tmp = (*((Handle_V2d_View*)nativeHandle))->PickByCircle(X, Y, Radius);
  return gcnew OCGraphic2d_DisplayList(&tmp);
}

OCGraphic2d_DisplayList^ OCV2d_View::Pick(Standard_Integer Xmin, Standard_Integer Ymin, Standard_Integer Xmax, Standard_Integer Ymax, OCGraphic2d_PickMode aPickMode)
{
  Handle(Graphic2d_DisplayList) tmp = (*((Handle_V2d_View*)nativeHandle))->Pick(Xmin, Ymin, Xmax, Ymax, (Graphic2d_PickMode)aPickMode);
  return gcnew OCGraphic2d_DisplayList(&tmp);
}

 void OCV2d_View::Erase()
{
  (*((Handle_V2d_View*)nativeHandle))->Erase();
}

 void OCV2d_View::MustBeResized(OCV2d_TypeOfWindowResizingEffect anEffect)
{
  (*((Handle_V2d_View*)nativeHandle))->MustBeResized((V2d_TypeOfWindowResizingEffect)anEffect);
}

 void OCV2d_View::HasBeenMoved()
{
  (*((Handle_V2d_View*)nativeHandle))->HasBeenMoved();
}

 void OCV2d_View::Plot(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver, Quantity_Length aXCenter, Quantity_Length aYCenter, Quantity_Factor aScale)
{
  (*((Handle_V2d_View*)nativeHandle))->Plot(*((Handle_PlotMgt_PlotterDriver*)aPlotterDriver->Handle), aXCenter, aYCenter, aScale);
}

 void OCV2d_View::Plot(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver, Quantity_Factor aScale)
{
  (*((Handle_V2d_View*)nativeHandle))->Plot(*((Handle_PlotMgt_PlotterDriver*)aPlotterDriver->Handle), aScale);
}

 void OCV2d_View::PlotScreen(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver)
{
  (*((Handle_V2d_View*)nativeHandle))->PlotScreen(*((Handle_PlotMgt_PlotterDriver*)aPlotterDriver->Handle));
}

 void OCV2d_View::ScreenCopy(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver, System::Boolean fWhiteBackground, Quantity_Factor aScale)
{
  (*((Handle_V2d_View*)nativeHandle))->ScreenCopy(*((Handle_PlotMgt_PlotterDriver*)aPlotterDriver->Handle), OCConverter::BooleanToStandardBoolean(fWhiteBackground), aScale);
}

 void OCV2d_View::PostScriptOutput(System::String^ aFile, Quantity_Length aWidth, Quantity_Length aHeight, Quantity_Length aXCenter, Quantity_Length aYCenter, Quantity_Factor aScale, OCAspect_TypeOfColorSpace aTypeOfColorSpace)
{
  (*((Handle_V2d_View*)nativeHandle))->PostScriptOutput(OCConverter::StringToStandardCString(aFile), aWidth, aHeight, aXCenter, aYCenter, aScale, (Aspect_TypeOfColorSpace)aTypeOfColorSpace);
}

 void OCV2d_View::ScreenPostScriptOutput(System::String^ aFile, Quantity_Length aWidth, Quantity_Length aHeight, OCAspect_TypeOfColorSpace aTypeOfColorSpace)
{
  (*((Handle_V2d_View*)nativeHandle))->ScreenPostScriptOutput(OCConverter::StringToStandardCString(aFile), aWidth, aHeight, (Aspect_TypeOfColorSpace)aTypeOfColorSpace);
}

 void OCV2d_View::Hit(Standard_Integer X, Standard_Integer Y, Quantity_Length& gx, Quantity_Length& gy)
{
  (*((Handle_V2d_View*)nativeHandle))->Hit(X, Y, gx, gy);
}

 void OCV2d_View::ShowHit(Standard_Integer X, Standard_Integer Y)
{
  (*((Handle_V2d_View*)nativeHandle))->ShowHit(X, Y);
}

 void OCV2d_View::EraseHit()
{
  (*((Handle_V2d_View*)nativeHandle))->EraseHit();
}

 void OCV2d_View::SetDefaultHighlightColor(Standard_Integer aColorIndex)
{
  (*((Handle_V2d_View*)nativeHandle))->SetDefaultHighlightColor(aColorIndex);
}

 void OCV2d_View::SetDeflection(Quantity_Length aDeflection)
{
  (*((Handle_V2d_View*)nativeHandle))->SetDeflection(aDeflection);
}

 Quantity_Length OCV2d_View::Deflection()
{
  return (*((Handle_V2d_View*)nativeHandle))->Deflection();
}

OCGraphic2d_View^ OCV2d_View::View()
{
  Handle(Graphic2d_View) tmp = (*((Handle_V2d_View*)nativeHandle))->View();
  return gcnew OCGraphic2d_View(&tmp);
}

OCV2d_Viewer^ OCV2d_View::Viewer()
{
  Handle(V2d_Viewer) tmp = (*((Handle_V2d_View*)nativeHandle))->Viewer();
  return gcnew OCV2d_Viewer(&tmp);
}

OCAspect_WindowDriver^ OCV2d_View::Driver()
{
  Handle(Aspect_WindowDriver) tmp = (*((Handle_V2d_View*)nativeHandle))->Driver();
  return gcnew OCAspect_WindowDriver(&tmp);
}

 Quantity_Factor OCV2d_View::Zoom()
{
  return (*((Handle_V2d_View*)nativeHandle))->Zoom();
}

 void OCV2d_View::Center(Quantity_Length& aX, Quantity_Length& aY)
{
  (*((Handle_V2d_View*)nativeHandle))->Center(aX, aY);
}

 Quantity_Length OCV2d_View::Size()
{
  return (*((Handle_V2d_View*)nativeHandle))->Size();
}

 OCQuantity_NameOfColor OCV2d_View::Color()
{
  return (OCQuantity_NameOfColor)((*((Handle_V2d_View*)nativeHandle))->Color());
}

 void OCV2d_View::Color(OCNaroWrappers::OCQuantity_Color^ color)
{
  (*((Handle_V2d_View*)nativeHandle))->Color(*((Quantity_Color*)color->Handle));
}

 void OCV2d_View::Scroll(Standard_Integer& XCenter, Standard_Integer& YCenter, Standard_Integer& DX, Standard_Integer& DY)
{
  (*((Handle_V2d_View*)nativeHandle))->Scroll(XCenter, YCenter, DX, DY);
}

 Standard_Integer OCV2d_View::DefaultHighlightColor()
{
  return (*((Handle_V2d_View*)nativeHandle))->DefaultHighlightColor();
}

 void OCV2d_View::Fit(Standard_Integer aX1, Standard_Integer aY1, Standard_Integer aX2, Standard_Integer aY2)
{
  (*((Handle_V2d_View*)nativeHandle))->Fit(aX1, aY1, aX2, aY2);
}

 void OCV2d_View::SetBackground(OCQuantity_NameOfColor aNameColor)
{
  (*((Handle_V2d_View*)nativeHandle))->SetBackground((Quantity_NameOfColor)aNameColor);
}

 void OCV2d_View::SetBackground(OCNaroWrappers::OCQuantity_Color^ color)
{
  (*((Handle_V2d_View*)nativeHandle))->SetBackground(*((Quantity_Color*)color->Handle));
}

 System::Boolean OCV2d_View::SetBackground(System::String^ aNameFile, OCAspect_FillMethod aMethod)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V2d_View*)nativeHandle))->SetBackground(OCConverter::StringToStandardCString(aNameFile), (Aspect_FillMethod)aMethod));
}


