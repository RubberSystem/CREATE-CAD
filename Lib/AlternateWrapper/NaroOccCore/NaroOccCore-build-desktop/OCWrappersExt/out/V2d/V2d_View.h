// File generated by CPPExt (Transient)
//
#ifndef _V2d_View_OCWrappers_HeaderFile
#define _V2d_View_OCWrappers_HeaderFile

// include the wrapped class
#include <V2d_View.hxx>
#include "../Converter.h"

#include "../Viewer/Viewer_View.h"

#include "../Graphic2d/Graphic2d_PickMode.h"
#include "V2d_TypeOfWindowResizingEffect.h"
#include "../Aspect/Aspect_TypeOfColorSpace.h"
#include "../Quantity/Quantity_NameOfColor.h"
#include "../Aspect/Aspect_FillMethod.h"


namespace OCNaroWrappers
{

ref class OCAspect_WindowDriver;
ref class OCGraphic2d_ViewMapping;
ref class OCGraphic2d_GraphicObject;
ref class OCGraphic2d_Buffer;
ref class OCV2d_Viewer;
ref class OCGraphic2d_DisplayList;
ref class OCPlotMgt_PlotterDriver;
ref class OCGraphic2d_View;
ref class OCQuantity_Color;


//! Defines the application object view for the 2D Viewer, <br>
//! V2d_Viewer. The functions in this framework manage <br>
//! the origin and the size of the scene displayed in the view (zoom, panning, etc.). <br>
public ref class OCV2d_View : OCViewer_View {

protected:
  // dummy constructor;
  OCV2d_View(OCDummy^) : OCViewer_View((OCDummy^)nullptr) {};

public:

// constructor from native
OCV2d_View(Handle(V2d_View)* nativeHandle);

// Methods PUBLIC

//! Creates a view which represents a portion of the user space. <br>
//!          This portion is defined by  the point (aXCenter,aYCenter) <br>
//!          which will be represent at the center of the window and by aSize. <br>
//!          aWindowDriver defines a window and a driver. <br>
OCV2d_View(OCNaroWrappers::OCAspect_WindowDriver^ aWindowDriver, OCNaroWrappers::OCV2d_Viewer^ aViewer, Quantity_Length aXCenter, Quantity_Length aYCenter, Quantity_Length aSize);

//! Defines the default position aXCenter, aYCenter and <br>
//! the size aSize used in the Reset function. <br>
 /*instead*/  void SetDefaultPosition(Quantity_Length aXCenter, Quantity_Length aYCenter, Quantity_Length aSize) ;

//! Automatic Zoom-Panning. Objects visible in the view are <br>
//!      visualised so as to occupy the maximum amount of space <br>
//!      while respecting the initial height/width ratio. <br>
//!      Updates the view. The resulting space also takes into account a default <br>
//!      margin that can be modified with SetFitallRatio. The view is updated. <br>
 /*instead*/  void Fitall() ;

//! The point of the graphic view corresponding to the <br>
//!          middle of the window aX1,aY1,aX2,aY2 (in pixel coordinates) <br>
//!          comes to the center of the window. <br>
//!          Updates the view <br>//!  Warning! raises BadValue from Viewer if aX1 = aX2 or aY1 = aY2; <br>
virtual /*instead*/  void WindowFit(Standard_Integer aX1, Standard_Integer aY1, Standard_Integer aX2, Standard_Integer aY2) ;

//! The point of the graphic view corresponding to the <br>
//!          middle of the window aX1,aY1,aX2,aY2 (in user coordinates) <br>
//!          comes to the center of the window. <br>
//!          If UseMinimum is true the smallest dimension of the rectangle <br>
//!          will be zoom to occupy the view. If not the greatest dimension wiil be used. <br>
//!          Updates the view <br>//!  Warning! raises BadValue from Viewer if aX1 = aX2 or aY1 = aY2; <br>
 /*instead*/  void Fit(Quantity_Length aX1, Quantity_Length aY1, Quantity_Length aX2, Quantity_Length aY2, System::Boolean UseMinimum) ;

//! Sets the 10 mm default margin aRatio which is taken <br>
//! into account by the Fitall function. <br>
//! Exceptions <br>
//! Viewer_BadValue if aRatio is less than 0 or greater than or equal to 1. <br>
 /*instead*/  void SetFitallRatio(Quantity_Ratio aRatio) ;

//! Increases the size of the portion of user-space <br>
//!          by a factor of Zoom and updates the view. <br>//!  Warning! raises BadValue from Viewer if aRatio <= 0. <br>
 /*instead*/  void Zoom(Quantity_Factor Zoom) ;

//! Increases the size of the portion of user-space by <br>
//! a zoom factor which is calculated from the two <br>
//! screen points aX1, aY1 and aX2, aY2 so that Z = 1/(1 + C x D) where: <br>
//! -   C is the coefficient aCoefficient and <br>
//! -   D is the distance between the two points aX1,aY1 and aX2,aY2. <br>
 /*instead*/  void Zoom(Standard_Integer aX1, Standard_Integer aY1, Standard_Integer aX2, Standard_Integer aY2, Quantity_Ratio aCoefficient) ;

//! Increases the size of the portion of user-space by <br>
//! a zoom factor which is calculated from the current <br>
//! point aX,aY and the screen center. The default factor is 0.005. <br>
 /*instead*/  void Zoom(Standard_Integer aX, Standard_Integer aY, Quantity_Ratio aCoefficient) ;

//! Defines the default view mapping from two screen <br>
//! points in a previous view anOriginView. The view is updated. <br>
 /*instead*/  void Magnify(OCNaroWrappers::OCV2d_View^ anOriginView, Standard_Integer X1, Standard_Integer Y1, Standard_Integer X2, Standard_Integer Y2) ;

//! Translates the dx,dy center of the objects space. <br>
 /*instead*/  void Translate(Quantity_Length dx, Quantity_Length dy) ;

//! places the point of the view corresponding <br>
//!          at the pixel position x,y at the center of the window <br>
//!          and updates the view. <br>
virtual /*instead*/  void Place(Standard_Integer x, Standard_Integer y, Quantity_Factor aZoomFactor) ;

//! Places the center of the object's space in the center <br>
//! of the window according to the zoom factor. The view is updated. <br>
 /*instead*/  void ScreenPlace(Quantity_Length x, Quantity_Length y, Quantity_Factor aZoomFactor) ;

//! Translates the center of the object's space and <br>
//! updates the view. The translation is specified in screen coordinates. <br>
 /*instead*/  void Pan(Standard_Integer dx, Standard_Integer dy) ;

//! Converts a screen value into the view space value V. <br>
 /*instead*/  Quantity_Length Convert(Standard_Integer V) ;

//! Converts the screen space coordinates X, Y into the <br>
//! view space coordinates ViewX, ViewY. <br>
 /*instead*/  void Convert(Standard_Integer X, Standard_Integer Y, Quantity_Length& ViewX, Quantity_Length& ViewY) ;

//! Converts the view space coordinates ViewX, ViewY <br>
//! into the screen space coordinates X, Y. <br>
 /*instead*/  void Convert(Quantity_Length ViewX, Quantity_Length ViewY, Standard_Integer& X, Standard_Integer& Y) ;

//! returns a view size from a driver size. <br>
 /*instead*/  Quantity_Length Convert(Quantity_Length aDriverSize) ;

//! Resets the viewmapping of the view and updates the view. <br>
 /*instead*/  void Reset() ;

//! switches the view to its previous viewmapping <br>
//!          and updates the view. <br>
 /*instead*/  void Previous() ;

//! Disables the Previous function in this framework. <br>
 /*instead*/  void DisableStorePrevious() ;

//! Enables the Previous function in this framework. <br>
 /*instead*/  void EnableStorePrevious() ;

//! Clears the window and redraws all primitives. <br>
virtual /*instead*/  void Update() ;

//! draws the objects created since the last update. <br>
 /*instead*/  void UpdateNew() ;

//! Restores The Window Area defined by his center <br>
//!         and PIXEL size from the BackingStored Window <br>
//! Warning <br>
//! This function only works if the window is double-buffered. <br>
 /*instead*/  void RestoreArea(Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height) ;

//! Restores the full window area from the backing stored window. <br>
//! Warning <br>
//! This function only works if the window is double-buffered. <br>
 /*instead*/  void Restore() ;


 /*instead*/  void Dump() ;


 /*instead*/  void Dump(System::String^ aFileName) ;

//! From the X, Y coordinates, returns the list of picked <br>
//! graphic objects within the precision value aPrecision. <br>
 /*instead*/  OCGraphic2d_DisplayList^ Pick(Standard_Integer X, Standard_Integer Y, Standard_Integer aPrecision) ;


 /*instead*/  OCGraphic2d_DisplayList^ PickByCircle(Standard_Integer X, Standard_Integer Y, Standard_Integer Radius) ;

//! Returns the list of the picked graphic objects. <br>
 /*instead*/  OCGraphic2d_DisplayList^ Pick(Standard_Integer Xmin, Standard_Integer Ymin, Standard_Integer Xmax, Standard_Integer Ymax, OCGraphic2d_PickMode aPickMode) ;

//! Removes all the graphic objects from the view. <br>
 /*instead*/  void Erase() ;

//! indicates that the window in which the view is drawn has been resized <br>
//!          and updates the view. <br>
 /*instead*/  void MustBeResized(OCV2d_TypeOfWindowResizingEffect anEffect) ;

//! Indicates whether the window associated with the <br>
//! view has been moved or not. <br>
 /*instead*/  void HasBeenMoved() ;

//!    Plots the view to a plotter aPlotterDriver centered <br>
//! through aXCenter, aYCenter with the plotting scale aScale. <br>
 /*instead*/  void Plot(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver, Quantity_Length aXCenter, Quantity_Length aYCenter, Quantity_Factor aScale) ;

//! plot a view as on screen. <br>
//! Note:     if <aScale> is zero then plots exactly what is on the screen <br>
 /*instead*/  void Plot(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver, Quantity_Factor aScale) ;

//!Plots the view to a plotter according to the current <br>
//! size and center of the view. <br>
 /*instead*/  void PlotScreen(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver) ;

//! dump the view <br>
 /*instead*/  void ScreenCopy(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver, System::Boolean fWhiteBackground, Quantity_Factor aScale) ;


//! Plots the view to the PostScript file aFile according to <br>
//! a paper format specified by the arguments aWidth, <br>
//! aHeight, aXCenter, aYCenter with the scale aScale. <br>
 /*instead*/  void PostScriptOutput(System::String^ aFile, Quantity_Length aWidth, Quantity_Length aHeight, Quantity_Length aXCenter, Quantity_Length aYCenter, Quantity_Factor aScale, OCAspect_TypeOfColorSpace aTypeOfColorSpace) ;

//! Plots the view to the PostScript file aFile according to <br>
//! the paper format specified by the arguments aWidth, <br>
//! aHeight. This is done by keeping the same view size and center. <br>
 /*instead*/  void ScreenPostScriptOutput(System::String^ aFile, Quantity_Length aWidth, Quantity_Length aHeight, OCAspect_TypeOfColorSpace aTypeOfColorSpace) ;

//! From the X,Y point, returns the nearest point gx,gy <br>
//! on the grid. <br>
 /*instead*/  void Hit(Standard_Integer X, Standard_Integer Y, Quantity_Length& gx, Quantity_Length& gy) ;

//! shows the point matching the grid. <br>
//!          if the hit has already been shown, it is first erased. <br>
//!          Does not update the view. <br>
 /*instead*/  void ShowHit(Standard_Integer X, Standard_Integer Y) ;

//! erases the hit point and updates the view. <br>
 /*instead*/  void EraseHit() ;

//! Defines the default override color of objects or <br>
//!		primitives using Highlight() methods. <br>
 /*instead*/  void SetDefaultHighlightColor(Standard_Integer aColorIndex) ;

//! Updates the drawing precision factor aDeflection for <br>
//! curves and circles. <br>
 /*instead*/  void SetDeflection(Quantity_Length aDeflection) ;

//! Returns the current deflection coefficient. <br>
 /*instead*/  Quantity_Length Deflection() ;

//! Returns the associated Grahic2d view with this view. <br>
 /*instead*/  OCGraphic2d_View^ View() ;

//! Returns the parent viewer of this view. <br>
 /*instead*/  OCV2d_Viewer^ Viewer() ;

//! Returns the window driver handle associated with this view. <br>
 /*instead*/  OCAspect_WindowDriver^ Driver() ;

//! returns the current zoom factor of the view. <br>
 /*instead*/  Quantity_Factor Zoom() ;

//! returns the current point of the user space <br>
//!          being at the center of the view. <br>
 /*instead*/  void Center(Quantity_Length& aX, Quantity_Length& aY) ;

//! Returns the current size of the view. <br>
 /*instead*/  Quantity_Length Size() ;

//! returns the background color of the view. <br>
 /*instead*/  OCQuantity_NameOfColor Color() ;

//! returns the background color of the view. <br>
 /*instead*/  void Color(OCNaroWrappers::OCQuantity_Color^ color) ;


 /*instead*/  void Scroll(Standard_Integer& XCenter, Standard_Integer& YCenter, Standard_Integer& DX, Standard_Integer& DY) ;

//! Returns the default override color of objects or <br>
//!		primitives using Highlight() methods. <br>
//!  Warning: Returns -1 when the color index is not defined. <br>
 /*instead*/  Standard_Integer DefaultHighlightColor() ;

//! idem than WindowFit <br>
 /*instead*/  void Fit(Standard_Integer aX1, Standard_Integer aY1, Standard_Integer aX2, Standard_Integer aY2) ;

//! Defines the color of view's background <br>
 /*instead*/  void SetBackground(OCQuantity_NameOfColor aNameColor) ;

//! Defines the color of view's background <br>
 /*instead*/  void SetBackground(OCNaroWrappers::OCQuantity_Color^ color) ;

//! Loads the view background from an image file <aName> <br>
//! defined with a supported format XWD,GIF or BMP <br>
//! and returns TRUE if the operation is successfull. <br>
 /*instead*/  System::Boolean SetBackground(System::String^ aNameFile, OCAspect_FillMethod aMethod) ;

~OCV2d_View()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
