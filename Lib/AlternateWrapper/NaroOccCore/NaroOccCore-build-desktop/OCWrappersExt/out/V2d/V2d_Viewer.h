// File generated by CPPExt (Transient)
//
#ifndef _V2d_Viewer_OCWrappers_HeaderFile
#define _V2d_Viewer_OCWrappers_HeaderFile

// include the wrapped class
#include <V2d_Viewer.hxx>
#include "../Converter.h"

#include "../Viewer/Viewer_Viewer.h"

#include "../TColStd/TColStd_ListOfTransient.h"
#include "../TColStd/TColStd_ListIteratorOfListOfTransient.h"
#include "../Aspect/Aspect_GridType.h"
#include "../Quantity/Quantity_NameOfColor.h"
#include "../Aspect/Aspect_GridDrawMode.h"


namespace OCNaroWrappers
{

ref class OCAspect_ColorMap;
ref class OCAspect_TypeMap;
ref class OCAspect_WidthMap;
ref class OCAspect_FontMap;
ref class OCAspect_MarkMap;
ref class OCGraphic2d_View;
ref class OCV2d_RectangularGrid;
ref class OCV2d_CircularGrid;
ref class OCV2d_View;
ref class OCAspect_GraphicDevice;
ref class OCAspect_Grid;
ref class OCQuantity_Color;



//! This class defines a 2D viewer which manages one <br>
//! 2D view at least and the attributes of this view (ex: ColorMap, etc.). <br>
public ref class OCV2d_Viewer : OCViewer_Viewer {

protected:
  // dummy constructor;
  OCV2d_Viewer(OCDummy^) : OCViewer_Viewer((OCDummy^)nullptr) {};

public:

// constructor from native
OCV2d_Viewer(Handle(V2d_Viewer)* nativeHandle);

// Methods PUBLIC


//! Constructs a viewer object defined by the graphic <br>
//! device aGraphicDevice that determines the screen <br>
//! attributes, a default view and the name aName. <br>
OCV2d_Viewer(OCNaroWrappers::OCAspect_GraphicDevice^ aGraphicDevice, System::String^ aName, System::String^ aDomain);


//! Constructs a viewer object defined by the graphic <br>
//! device aGraphicDevice that determines the screen <br>
//! attributes, the first view aView and the name aName. <br>
OCV2d_Viewer(OCNaroWrappers::OCAspect_GraphicDevice^ aGraphicDevice, OCNaroWrappers::OCGraphic2d_View^ aView, System::String^ aName, System::String^ aDomain);

//! Adds another 2D view to the viewer. <br>
 /*instead*/  void AddView(OCNaroWrappers::OCV2d_View^ aView) ;

//! Removes the view aView from the viewer. <br>
 /*instead*/  void RemoveView(OCNaroWrappers::OCV2d_View^ aView) ;

//! Updates the display of all views of the viewer. <br>
virtual /*instead*/  void Update() ;

//! Updates the most recent changes in all the active views of the viewer. <br>
 /*instead*/  void UpdateNew() ;


//! Replaces the default color map of the viewer with the <br>
//! new color map aColorMap. <br>
 /*instead*/  void SetColorMap(OCNaroWrappers::OCAspect_ColorMap^ aColorMap) ;


//! Replaces the default type map of the viewer with the <br>
//! new type map aTypeMap. <br>
 /*instead*/  void SetTypeMap(OCNaroWrappers::OCAspect_TypeMap^ aTypeMap) ;


//! Replaces the default width map of the viewer with the <br>
//! new width map aWidthMap. <br>
 /*instead*/  void SetWidthMap(OCNaroWrappers::OCAspect_WidthMap^ aWidthMap) ;


//! Replaces the default font map of the viewer with the <br>
//! new font map aFontMap. When useMFT is equal to <br>
//! Standard_True, MDTV fonts are used instead of system fonts. <br>
 /*instead*/  void SetFontMap(OCNaroWrappers::OCAspect_FontMap^ aFontMap, System::Boolean useMFT) ;


//! Replaces the default mark map of the viewer with the <br>
//! new mark map aMarkMap. <br>
 /*instead*/  void SetMarkMap(OCNaroWrappers::OCAspect_MarkMap^ aMarkMap) ;

//! Returns the active color map of the viewer. <br>
 /*instead*/  OCAspect_ColorMap^ ColorMap() ;

//! Returns the active type map of the viewer. <br>
 /*instead*/  OCAspect_TypeMap^ TypeMap() ;

//! Returns the active width map of the viewer. <br>
 /*instead*/  OCAspect_WidthMap^ WidthMap() ;

//! Returns the active font map for the viewer. <br>
 /*instead*/  OCAspect_FontMap^ FontMap() ;

//! Returns the active mark map of the viewer. <br>
 /*instead*/  OCAspect_MarkMap^ MarkMap() ;

//! Returns True when the viewer uses MFT fonts <br>
//! instead of system fonts. <br>
 /*instead*/  System::Boolean UseMFT() ;

//! Returns the first view of the viewer. <br>
 /*instead*/  OCGraphic2d_View^ View() ;

//! Creates a color in the color map of the driver if <br>
//!          the color does not yes exist. <br>
//!          Returns the index of the color in the modified color map. <br>
 /*instead*/  Standard_Integer InitializeColor(OCQuantity_NameOfColor aColor) ;

//! initializes an iteration on the active views. <br>
 /*instead*/  void InitActiveViews() ;

//! returns true if there are more active view(s) to return. <br>
 /*instead*/  System::Boolean MoreActiveViews() ;

//! Go to the next active view <br>
//!           (if there is not, ActiveView will raise an exception) <br>
 /*instead*/  void NextActiveViews() ;


//! Returns the current view from the activated views. <br>
 /*instead*/  OCV2d_View^ ActiveView() ;


//! Returns True when no more secondary views exist in the viewer. <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! returns the current grid type. <br>
 /*instead*/  OCAspect_GridType GridType() ;

//! returns the point (gx,gy) according to the grid. <br>
 /*instead*/  void Hit(Quantity_Length X, Quantity_Length Y, Quantity_Length& gx, Quantity_Length& gy) ;


 /*instead*/  void ActivateGrid(OCAspect_GridType aGridType, OCAspect_GridDrawMode aGridDrawMode) ;


 /*instead*/  void DeactivateGrid() ;

//! Returns True when a grid is active in the viewer. <br>
 /*instead*/  System::Boolean IsActive() ;

//! Returns the parameters of the current rectangular grid. <br>
 /*instead*/  void RectangularGridValues(Quantity_Length& XOrigin, Quantity_Length& YOrigin, Quantity_Length& XStep, Quantity_Length& YStep, Quantity_PlaneAngle& RotationAngle) ;


//! Sets the rectangular grid: <br>
//! -   XOrigin, YOrigin define the point of origin of the grid, <br>
//! -   XStep defines the interval between two vertical lines, <br>
//! -   YStep defines the interval between two horizontal lines, <br>
//! -   RotationAngle defines the rotation angle of the grid. <br>
 /*instead*/  void SetRectangularGridValues(Quantity_Length XOrigin, Quantity_Length YOrigin, Quantity_Length XStep, Quantity_Length YStep, Quantity_PlaneAngle RotationAngle) ;

//! Returns the parameters of the current circular grid. <br>
 /*instead*/  void CircularGridValues(Quantity_Length& XOrigin, Quantity_Length& YOrigin, Quantity_Length& RadiusStep, Standard_Integer& DivisionNumber, Quantity_PlaneAngle& RotationAngle) ;


//! Sets the circular grid: <br>
//! -   XOrigin, YOrigin specify the origin of the grid, <br>
//! -   RadiusStep defines the interval between two circles, <br>
//! -   DivisionNumber determines the section number of half a circle, <br>
//! -   RotationAngle defines the rotation angle of the grid. <br>
 /*instead*/  void SetCircularGridValues(Quantity_Length XOrigin, Quantity_Length YOrigin, Quantity_Length RadiusStep, Standard_Integer DivisionNumber, Quantity_PlaneAngle RotationAngle) ;


 /*instead*/  void SetGridColor(OCNaroWrappers::OCQuantity_Color^ color1, OCNaroWrappers::OCQuantity_Color^ color2) ;

~OCV2d_Viewer()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
