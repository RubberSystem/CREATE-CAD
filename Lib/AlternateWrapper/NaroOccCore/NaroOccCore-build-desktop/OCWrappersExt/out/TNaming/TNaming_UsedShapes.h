// File generated by CPPExt (Transient)
//
#ifndef _TNaming_UsedShapes_OCWrappers_HeaderFile
#define _TNaming_UsedShapes_OCWrappers_HeaderFile

// include the wrapped class
#include <TNaming_UsedShapes.hxx>
#include "../Converter.h"

#include "../TDF/TDF_Attribute.h"

#include "TNaming_DataMapOfShapePtrRefShape.h"


namespace OCNaroWrappers
{

ref class OCTNaming_Builder;
ref class OCTNaming_DataMapOfShapePtrRefShape;
ref class OCStandard_GUID;
ref class OCTDF_Attribute;
ref class OCTDF_AttributeDelta;
ref class OCTDF_DeltaOnAddition;
ref class OCTDF_DeltaOnRemoval;
ref class OCTDF_RelocationTable;
ref class OCTDF_DataSet;


//! Set of Shapes Used in a Data from TDF <br>
//!          Only one instance by Data, it always <br>
//!          Stored as Attribute of The Root. <br>
public ref class OCTNaming_UsedShapes : OCTDF_Attribute {

protected:
  // dummy constructor;
  OCTNaming_UsedShapes(OCDummy^) : OCTDF_Attribute((OCDummy^)nullptr) {};

public:

// constructor from native
OCTNaming_UsedShapes(Handle(TNaming_UsedShapes)* nativeHandle);

// Methods PUBLIC


 /*instead*/  OCTNaming_DataMapOfShapePtrRefShape^ Map() ;

//! Returns the ID of the attribute. <br>
virtual /*instead*/  OCStandard_GUID^ ID() ;

//! Returns the ID: 2a96b614-ec8b-11d0-bee7-080009dc3333. <br>
static /*instead*/  OCStandard_GUID^ GetID() ;

//! Copies  the attribute  contents into  a  new other <br>
//!          attribute. It is used by Backup(). <br>
virtual /*instead*/  OCTDF_Attribute^ BackupCopy() override;

//! Restores the contents from <anAttribute> into this <br>
//!          one. It is used when aborting a transaction. <br>
virtual /*instead*/  void Restore(OCNaroWrappers::OCTDF_Attribute^ anAttribute) ;

//! Clears the table. <br>
virtual /*instead*/  void BeforeRemoval() override;

//! Something to do after applying <anAttDelta>. <br>
virtual /*instead*/  System::Boolean AfterUndo(OCNaroWrappers::OCTDF_AttributeDelta^ anAttDelta, System::Boolean forceIt) override;

//! this method returns a null handle (no delta). <br>
virtual /*instead*/  OCTDF_DeltaOnAddition^ DeltaOnAddition() override;

//! this method returns a null handle (no delta). <br>
virtual /*instead*/  OCTDF_DeltaOnRemoval^ DeltaOnRemoval() override;

//! Returns an new empty attribute from the good end <br>
//!          type. It is used by the copy algorithm. <br>
virtual /*instead*/  OCTDF_Attribute^ NewEmpty() ;

//! This method is different from the "Copy" one, <br>
//!          because it is used when copying an attribute from <br>
//!          a source structure into a target structure. This <br>
//!          method pastes the current attribute to the label <br>
//!          corresponding to the insertor. The pasted <br>
//!          attribute may be a brand new one or a new version <br>
//!          of the previous one. <br>
virtual /*instead*/  void Paste(OCNaroWrappers::OCTDF_Attribute^ intoAttribute, OCNaroWrappers::OCTDF_RelocationTable^ aRelocTationable) ;

//! Adds the directly referenced attributes and labels <br>
//!          to <aDataSet>. "Directly" means we have only to <br>
//!          look at the first level of references. <br>
//! <br>
//!          For this, use only the AddLabel() & AddAttribute() <br>
//!          from DataSet and do not try to modify information <br>
//!          previously stored in <aDataSet>. <br>
virtual /*instead*/  void References(OCNaroWrappers::OCTDF_DataSet^ aDataSet) override;

//! Dumps the attribute on <aStream>. <br>
virtual /*instead*/  Standard_OStream& Dump(Standard_OStream& anOS) override;

~OCTNaming_UsedShapes()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
