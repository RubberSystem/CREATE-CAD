// File generated by CPPExt (CPP file)
//

#include "TNaming_Naming.h"
#include "../Converter.h"
#include "../Standard/Standard_GUID.h"
#include "../TDF/TDF_Label.h"
#include "TNaming_NamedShape.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "TNaming_Name.h"
#include "../TDF/TDF_LabelMap.h"
#include "../TDF/TDF_Attribute.h"
#include "../TDF/TDF_RelocationTable.h"
#include "../TDF/TDF_DataSet.h"
#include "../TDF/TDF_IDFilter.h"
#include "../TDF/TDF_AttributeIndexedMap.h"


using namespace OCNaroWrappers;

OCTNaming_Naming::OCTNaming_Naming(Handle(TNaming_Naming)* nativeHandle) : OCTDF_Attribute((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TNaming_Naming(*nativeHandle);
}

OCStandard_GUID^ OCTNaming_Naming::GetID()
{
  Standard_GUID* tmp = new Standard_GUID();
  *tmp = TNaming_Naming::GetID();
  return gcnew OCStandard_GUID(tmp);
}

OCTNaming_Naming^ OCTNaming_Naming::Insert(OCNaroWrappers::OCTDF_Label^ under)
{
  Handle(TNaming_Naming) tmp = TNaming_Naming::Insert(*((TDF_Label*)under->Handle));
  return gcnew OCTNaming_Naming(&tmp);
}

OCTNaming_NamedShape^ OCTNaming_Naming::Name(OCNaroWrappers::OCTDF_Label^ where, OCNaroWrappers::OCTopoDS_Shape^ Selection, OCNaroWrappers::OCTopoDS_Shape^ Context, System::Boolean Geometry, System::Boolean KeepOrientation, System::Boolean BNproblem)
{
  Handle(TNaming_NamedShape) tmp = TNaming_Naming::Name(*((TDF_Label*)where->Handle), *((TopoDS_Shape*)Selection->Handle), *((TopoDS_Shape*)Context->Handle), OCConverter::BooleanToStandardBoolean(Geometry), OCConverter::BooleanToStandardBoolean(KeepOrientation), OCConverter::BooleanToStandardBoolean(BNproblem));
  return gcnew OCTNaming_NamedShape(&tmp);
}

OCTNaming_Naming::OCTNaming_Naming() : OCTDF_Attribute((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TNaming_Naming(new TNaming_Naming());
}

 System::Boolean OCTNaming_Naming::IsDefined()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TNaming_Naming*)nativeHandle))->IsDefined());
}

OCTNaming_Name^ OCTNaming_Naming::GetName()
{
  TNaming_Name* tmp = new TNaming_Name();
  *tmp = (*((Handle_TNaming_Naming*)nativeHandle))->GetName();
  return gcnew OCTNaming_Name(tmp);
}

OCTNaming_Name^ OCTNaming_Naming::ChangeName()
{
  TNaming_Name* tmp = new TNaming_Name();
  *tmp = (*((Handle_TNaming_Naming*)nativeHandle))->ChangeName();
  return gcnew OCTNaming_Name(tmp);
}

 System::Boolean OCTNaming_Naming::Regenerate(OCNaroWrappers::OCTDF_LabelMap^ scope)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TNaming_Naming*)nativeHandle))->Regenerate(*((TDF_LabelMap*)scope->Handle)));
}

 System::Boolean OCTNaming_Naming::Solve(OCNaroWrappers::OCTDF_LabelMap^ scope)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TNaming_Naming*)nativeHandle))->Solve(*((TDF_LabelMap*)scope->Handle)));
}

OCStandard_GUID^ OCTNaming_Naming::ID()
{
  Standard_GUID* tmp = new Standard_GUID();
  *tmp = (*((Handle_TNaming_Naming*)nativeHandle))->ID();
  return gcnew OCStandard_GUID(tmp);
}

OCTDF_Attribute^ OCTNaming_Naming::NewEmpty()
{
  Handle(TDF_Attribute) tmp = (*((Handle_TNaming_Naming*)nativeHandle))->NewEmpty();
  return gcnew OCTDF_Attribute(&tmp);
}

 void OCTNaming_Naming::Restore(OCNaroWrappers::OCTDF_Attribute^ With)
{
  (*((Handle_TNaming_Naming*)nativeHandle))->Restore(*((Handle_TDF_Attribute*)With->Handle));
}

 void OCTNaming_Naming::Paste(OCNaroWrappers::OCTDF_Attribute^ Into, OCNaroWrappers::OCTDF_RelocationTable^ RT)
{
  (*((Handle_TNaming_Naming*)nativeHandle))->Paste(*((Handle_TDF_Attribute*)Into->Handle), *((Handle_TDF_RelocationTable*)RT->Handle));
}

 void OCTNaming_Naming::References(OCNaroWrappers::OCTDF_DataSet^ aDataSet)
{
  (*((Handle_TNaming_Naming*)nativeHandle))->References(*((Handle_TDF_DataSet*)aDataSet->Handle));
}

 Standard_OStream& OCTNaming_Naming::Dump(Standard_OStream& anOS)
{
  return (*((Handle_TNaming_Naming*)nativeHandle))->Dump(anOS);
}

 void OCTNaming_Naming::ExtendedDump(Standard_OStream& anOS, OCNaroWrappers::OCTDF_IDFilter^ aFilter, OCNaroWrappers::OCTDF_AttributeIndexedMap^ aMap)
{
  (*((Handle_TNaming_Naming*)nativeHandle))->ExtendedDump(anOS, *((TDF_IDFilter*)aFilter->Handle), *((TDF_AttributeIndexedMap*)aMap->Handle));
}


