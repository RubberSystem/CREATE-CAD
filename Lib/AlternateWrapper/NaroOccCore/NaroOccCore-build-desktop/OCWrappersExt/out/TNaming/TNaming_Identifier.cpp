// File generated by CPPExt (CPP file)
//

#include "TNaming_Identifier.h"
#include "../Converter.h"
#include "TNaming_NamedShape.h"
#include "../TDF/TDF_Label.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "TNaming_Localizer.h"


using namespace OCNaroWrappers;

OCTNaming_Identifier::OCTNaming_Identifier(TNaming_Identifier* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTNaming_Identifier::OCTNaming_Identifier(OCNaroWrappers::OCTDF_Label^ Lab, OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopoDS_Shape^ Context, System::Boolean Geom) 
{
  nativeHandle = new TNaming_Identifier(*((TDF_Label*)Lab->Handle), *((TopoDS_Shape*)S->Handle), *((TopoDS_Shape*)Context->Handle), OCConverter::BooleanToStandardBoolean(Geom));
}

OCTNaming_Identifier::OCTNaming_Identifier(OCNaroWrappers::OCTDF_Label^ Lab, OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTNaming_NamedShape^ ContextNS, System::Boolean Geom) 
{
  nativeHandle = new TNaming_Identifier(*((TDF_Label*)Lab->Handle), *((TopoDS_Shape*)S->Handle), *((Handle_TNaming_NamedShape*)ContextNS->Handle), OCConverter::BooleanToStandardBoolean(Geom));
}

 System::Boolean OCTNaming_Identifier::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((TNaming_Identifier*)nativeHandle)->IsDone());
}

 OCTNaming_NameType OCTNaming_Identifier::Type()
{
  return (OCTNaming_NameType)(((TNaming_Identifier*)nativeHandle)->Type());
}

 System::Boolean OCTNaming_Identifier::IsFeature()
{
  return OCConverter::StandardBooleanToBoolean(((TNaming_Identifier*)nativeHandle)->IsFeature());
}

OCTNaming_NamedShape^ OCTNaming_Identifier::Feature()
{
  Handle(TNaming_NamedShape) tmp = ((TNaming_Identifier*)nativeHandle)->Feature();
  return gcnew OCTNaming_NamedShape(&tmp);
}

 void OCTNaming_Identifier::InitArgs()
{
  ((TNaming_Identifier*)nativeHandle)->InitArgs();
}

 System::Boolean OCTNaming_Identifier::MoreArgs()
{
  return OCConverter::StandardBooleanToBoolean(((TNaming_Identifier*)nativeHandle)->MoreArgs());
}

 void OCTNaming_Identifier::NextArg()
{
  ((TNaming_Identifier*)nativeHandle)->NextArg();
}

 System::Boolean OCTNaming_Identifier::ArgIsFeature()
{
  return OCConverter::StandardBooleanToBoolean(((TNaming_Identifier*)nativeHandle)->ArgIsFeature());
}

OCTNaming_NamedShape^ OCTNaming_Identifier::FeatureArg()
{
  Handle(TNaming_NamedShape) tmp = ((TNaming_Identifier*)nativeHandle)->FeatureArg();
  return gcnew OCTNaming_NamedShape(&tmp);
}

OCTopoDS_Shape^ OCTNaming_Identifier::ShapeArg()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TNaming_Identifier*)nativeHandle)->ShapeArg();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTNaming_Identifier::ShapeContext()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TNaming_Identifier*)nativeHandle)->ShapeContext();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTNaming_NamedShape^ OCTNaming_Identifier::NamedShapeOfGeneration()
{
  Handle(TNaming_NamedShape) tmp = ((TNaming_Identifier*)nativeHandle)->NamedShapeOfGeneration();
  return gcnew OCTNaming_NamedShape(&tmp);
}

 void OCTNaming_Identifier::AncestorIdentification(OCNaroWrappers::OCTNaming_Localizer^ Localizer, OCNaroWrappers::OCTopoDS_Shape^ Context)
{
  ((TNaming_Identifier*)nativeHandle)->AncestorIdentification(*((TNaming_Localizer*)Localizer->Handle), *((TopoDS_Shape*)Context->Handle));
}

 void OCTNaming_Identifier::PrimitiveIdentification(OCNaroWrappers::OCTNaming_Localizer^ Localizer, OCNaroWrappers::OCTNaming_NamedShape^ NS)
{
  ((TNaming_Identifier*)nativeHandle)->PrimitiveIdentification(*((TNaming_Localizer*)Localizer->Handle), *((Handle_TNaming_NamedShape*)NS->Handle));
}

 void OCTNaming_Identifier::GeneratedIdentification(OCNaroWrappers::OCTNaming_Localizer^ Localizer, OCNaroWrappers::OCTNaming_NamedShape^ NS)
{
  ((TNaming_Identifier*)nativeHandle)->GeneratedIdentification(*((TNaming_Localizer*)Localizer->Handle), *((Handle_TNaming_NamedShape*)NS->Handle));
}

 void OCTNaming_Identifier::Identification(OCNaroWrappers::OCTNaming_Localizer^ Localizer, OCNaroWrappers::OCTNaming_NamedShape^ NS)
{
  ((TNaming_Identifier*)nativeHandle)->Identification(*((TNaming_Localizer*)Localizer->Handle), *((Handle_TNaming_NamedShape*)NS->Handle));
}


