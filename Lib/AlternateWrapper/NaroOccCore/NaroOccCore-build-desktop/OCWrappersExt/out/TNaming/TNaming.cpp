// File generated by CPPExt (CPP file)
//

#include "TNaming.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



 void OCTNaming::Substitute(OCNaroWrappers::OCTDF_Label^ labelsource, OCNaroWrappers::OCTDF_Label^ labelcible, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ mapOldNew)
{
  TNaming::Substitute(*((TDF_Label*)labelsource->Handle), *((TDF_Label*)labelcible->Handle), *((TopTools_DataMapOfShapeShape*)mapOldNew->Handle));
}

 void OCTNaming::Update(OCNaroWrappers::OCTDF_Label^ label, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ mapOldNew)
{
  TNaming::Update(*((TDF_Label*)label->Handle), *((TopTools_DataMapOfShapeShape*)mapOldNew->Handle));
}

 void OCTNaming::Displace(OCNaroWrappers::OCTDF_Label^ label, OCNaroWrappers::OCTopLoc_Location^ aLocation, System::Boolean WithOld)
{
  TNaming::Displace(*((TDF_Label*)label->Handle), *((TopLoc_Location*)aLocation->Handle), OCConverter::BooleanToStandardBoolean(WithOld));
}

 void OCTNaming::ChangeShapes(OCNaroWrappers::OCTDF_Label^ label, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ M)
{
  TNaming::ChangeShapes(*((TDF_Label*)label->Handle), *((TopTools_DataMapOfShapeShape*)M->Handle));
}

 void OCTNaming::Transform(OCNaroWrappers::OCTDF_Label^ label, OCNaroWrappers::OCgp_Trsf^ aTransformation)
{
  TNaming::Transform(*((TDF_Label*)label->Handle), *((gp_Trsf*)aTransformation->Handle));
}

 void OCTNaming::Replicate(OCNaroWrappers::OCTNaming_NamedShape^ NS, OCNaroWrappers::OCgp_Trsf^ T, OCNaroWrappers::OCTDF_Label^ L)
{
  TNaming::Replicate(*((Handle_TNaming_NamedShape*)NS->Handle), *((gp_Trsf*)T->Handle), *((TDF_Label*)L->Handle));
}

 void OCTNaming::Replicate(OCNaroWrappers::OCTopoDS_Shape^ SH, OCNaroWrappers::OCgp_Trsf^ T, OCNaroWrappers::OCTDF_Label^ L)
{
  TNaming::Replicate(*((TopoDS_Shape*)SH->Handle), *((gp_Trsf*)T->Handle), *((TDF_Label*)L->Handle));
}

OCTopoDS_Shape^ OCTNaming::MakeShape(OCNaroWrappers::OCTopTools_MapOfShape^ MS)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = TNaming::MakeShape(*((TopTools_MapOfShape*)MS->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTNaming::FindUniqueContext(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopoDS_Shape^ Context)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = TNaming::FindUniqueContext(*((TopoDS_Shape*)S->Handle), *((TopoDS_Shape*)Context->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTNaming::FindUniqueContextSet(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopoDS_Shape^ Context, OCNaroWrappers::OCTopTools_HArray1OfShape^ Arr)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = TNaming::FindUniqueContextSet(*((TopoDS_Shape*)S->Handle), *((TopoDS_Shape*)Context->Handle), *((Handle_TopTools_HArray1OfShape*)Arr->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCTNaming::SubstituteSShape(OCNaroWrappers::OCTDF_Label^ accesslabel, OCNaroWrappers::OCTopoDS_Shape^ From, OCNaroWrappers::OCTopoDS_Shape^ To)
{
  return OCConverter::StandardBooleanToBoolean(TNaming::SubstituteSShape(*((TDF_Label*)accesslabel->Handle), *((TopoDS_Shape*)From->Handle), *((TopoDS_Shape*)To->Handle)));
}

 System::Boolean OCTNaming::OuterWire(OCNaroWrappers::OCTopoDS_Face^ theFace, OCNaroWrappers::OCTopoDS_Wire^ theWire)
{
  return OCConverter::StandardBooleanToBoolean(TNaming::OuterWire(*((TopoDS_Face*)theFace->Handle), *((TopoDS_Wire*)theWire->Handle)));
}

 System::Boolean OCTNaming::OuterShell(OCNaroWrappers::OCTopoDS_Solid^ theSolid, OCNaroWrappers::OCTopoDS_Shell^ theShell)
{
  return OCConverter::StandardBooleanToBoolean(TNaming::OuterShell(*((TopoDS_Solid*)theSolid->Handle), *((TopoDS_Shell*)theShell->Handle)));
}

 void OCTNaming::IDList(OCNaroWrappers::OCTDF_IDList^ anIDList)
{
  TNaming::IDList(*((TDF_IDList*)anIDList->Handle));
}

 Standard_OStream& OCTNaming::Print(OCTNaming_Evolution EVOL, Standard_OStream& S)
{
  return TNaming::Print((TNaming_Evolution)EVOL, S);
}

 Standard_OStream& OCTNaming::Print(OCTNaming_NameType NAME, Standard_OStream& S)
{
  return TNaming::Print((TNaming_NameType)NAME, S);
}

 Standard_OStream& OCTNaming::Print(OCNaroWrappers::OCTDF_Label^ ACCESS, Standard_OStream& S)
{
  return TNaming::Print(*((TDF_Label*)ACCESS->Handle), S);
}


