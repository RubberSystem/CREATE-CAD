// File generated by CPPExt (CPP file)
//

#include "BRepAdaptor_CompCurve.h"
#include "../Converter.h"
#include "BRepAdaptor_HArray1OfCurve.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TopoDS/TopoDS_Wire.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Hypr.h"
#include "../gp/gp_Parab.h"
#include "../Geom/Geom_BezierCurve.h"
#include "../Geom/Geom_BSplineCurve.h"


using namespace OCNaroWrappers;

OCBRepAdaptor_CompCurve::OCBRepAdaptor_CompCurve(BRepAdaptor_CompCurve* nativeHandle) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCBRepAdaptor_CompCurve::OCBRepAdaptor_CompCurve() : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new BRepAdaptor_CompCurve();
}

OCBRepAdaptor_CompCurve::OCBRepAdaptor_CompCurve(OCNaroWrappers::OCTopoDS_Wire^ W, System::Boolean KnotByCurvilinearAbcissa) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new BRepAdaptor_CompCurve(*((TopoDS_Wire*)W->Handle), OCConverter::BooleanToStandardBoolean(KnotByCurvilinearAbcissa));
}

OCBRepAdaptor_CompCurve::OCBRepAdaptor_CompCurve(OCNaroWrappers::OCTopoDS_Wire^ W, System::Boolean KnotByCurvilinearAbcissa, Standard_Real First, Standard_Real Last, Standard_Real Tol) : OCAdaptor3d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new BRepAdaptor_CompCurve(*((TopoDS_Wire*)W->Handle), OCConverter::BooleanToStandardBoolean(KnotByCurvilinearAbcissa), First, Last, Tol);
}

 void OCBRepAdaptor_CompCurve::Initialize(OCNaroWrappers::OCTopoDS_Wire^ W, System::Boolean KnotByCurvilinearAbcissa)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->Initialize(*((TopoDS_Wire*)W->Handle), OCConverter::BooleanToStandardBoolean(KnotByCurvilinearAbcissa));
}

 void OCBRepAdaptor_CompCurve::Initialize(OCNaroWrappers::OCTopoDS_Wire^ W, System::Boolean KnotByCurvilinearAbcissa, Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->Initialize(*((TopoDS_Wire*)W->Handle), OCConverter::BooleanToStandardBoolean(KnotByCurvilinearAbcissa), First, Last, Tol);
}

 void OCBRepAdaptor_CompCurve::SetPeriodic(System::Boolean Periodic)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->SetPeriodic(OCConverter::BooleanToStandardBoolean(Periodic));
}

OCTopoDS_Wire^ OCBRepAdaptor_CompCurve::Wire()
{
  TopoDS_Wire* tmp = new TopoDS_Wire();
  *tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Wire();
  return gcnew OCTopoDS_Wire(tmp);
}

 void OCBRepAdaptor_CompCurve::Edge(Standard_Real U, OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real& UonE)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->Edge(U, *((TopoDS_Edge*)E->Handle), UonE);
}

 Standard_Real OCBRepAdaptor_CompCurve::FirstParameter()
{
  return ((BRepAdaptor_CompCurve*)nativeHandle)->FirstParameter();
}

 Standard_Real OCBRepAdaptor_CompCurve::LastParameter()
{
  return ((BRepAdaptor_CompCurve*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCBRepAdaptor_CompCurve::Continuity()
{
  return (OCGeomAbs_Shape)(((BRepAdaptor_CompCurve*)nativeHandle)->Continuity());
}

 Standard_Integer OCBRepAdaptor_CompCurve::NbIntervals(OCGeomAbs_Shape S)
{
  return ((BRepAdaptor_CompCurve*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCBRepAdaptor_CompCurve::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor3d_HCurve^ OCBRepAdaptor_CompCurve::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HCurve) tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 System::Boolean OCBRepAdaptor_CompCurve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((BRepAdaptor_CompCurve*)nativeHandle)->IsClosed());
}

 System::Boolean OCBRepAdaptor_CompCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((BRepAdaptor_CompCurve*)nativeHandle)->IsPeriodic());
}

 Standard_Real OCBRepAdaptor_CompCurve::Period()
{
  return ((BRepAdaptor_CompCurve*)nativeHandle)->Period();
}

OCgp_Pnt^ OCBRepAdaptor_CompCurve::Value(Standard_Real U)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Value(U);
  return gcnew OCgp_Pnt(tmp);
}

 void OCBRepAdaptor_CompCurve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCBRepAdaptor_CompCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V->Handle));
}

 void OCBRepAdaptor_CompCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCBRepAdaptor_CompCurve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  ((BRepAdaptor_CompCurve*)nativeHandle)->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCBRepAdaptor_CompCurve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCBRepAdaptor_CompCurve::Resolution(Standard_Real R3d)
{
  return ((BRepAdaptor_CompCurve*)nativeHandle)->Resolution(R3d);
}

 OCGeomAbs_CurveType OCBRepAdaptor_CompCurve::GetType()
{
  return (OCGeomAbs_CurveType)(((BRepAdaptor_CompCurve*)nativeHandle)->GetType());
}

OCgp_Lin^ OCBRepAdaptor_CompCurve::Line()
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Line();
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCBRepAdaptor_CompCurve::Circle()
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Circle();
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCBRepAdaptor_CompCurve::Ellipse()
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips(tmp);
}

OCgp_Hypr^ OCBRepAdaptor_CompCurve::Hyperbola()
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr(tmp);
}

OCgp_Parab^ OCBRepAdaptor_CompCurve::Parabola()
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab(tmp);
}

 Standard_Integer OCBRepAdaptor_CompCurve::Degree()
{
  return ((BRepAdaptor_CompCurve*)nativeHandle)->Degree();
}

 System::Boolean OCBRepAdaptor_CompCurve::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((BRepAdaptor_CompCurve*)nativeHandle)->IsRational());
}

 Standard_Integer OCBRepAdaptor_CompCurve::NbPoles()
{
  return ((BRepAdaptor_CompCurve*)nativeHandle)->NbPoles();
}

 Standard_Integer OCBRepAdaptor_CompCurve::NbKnots()
{
  return ((BRepAdaptor_CompCurve*)nativeHandle)->NbKnots();
}

OCGeom_BezierCurve^ OCBRepAdaptor_CompCurve::Bezier()
{
  Handle(Geom_BezierCurve) tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->Bezier();
  return gcnew OCGeom_BezierCurve(&tmp);
}

OCGeom_BSplineCurve^ OCBRepAdaptor_CompCurve::BSpline()
{
  Handle(Geom_BSplineCurve) tmp = ((BRepAdaptor_CompCurve*)nativeHandle)->BSpline();
  return gcnew OCGeom_BSplineCurve(&tmp);
}


