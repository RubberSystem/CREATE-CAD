// File generated by CPPExt (MPV)
//
#ifndef _BRepAdaptor_CompCurve_OCWrappers_HeaderFile
#define _BRepAdaptor_CompCurve_OCWrappers_HeaderFile

// include native header
#include <BRepAdaptor_CompCurve.hxx>
#include "../Converter.h"

#include "../Adaptor3d/Adaptor3d_Curve.h"

#include "../TopoDS/TopoDS_Wire.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "../GeomAbs/GeomAbs_Shape.h"
#include "../GeomAbs/GeomAbs_CurveType.h"


namespace OCNaroWrappers
{

ref class OCBRepAdaptor_HArray1OfCurve;
ref class OCTColStd_HArray1OfReal;
ref class OCTopoDS_Wire;
ref class OCTopoDS_Edge;
ref class OCTColStd_Array1OfReal;
ref class OCAdaptor3d_HCurve;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Lin;
ref class OCgp_Circ;
ref class OCgp_Elips;
ref class OCgp_Hypr;
ref class OCgp_Parab;
ref class OCGeom_BezierCurve;
ref class OCGeom_BSplineCurve;


//! The Curve from BRepAdaptor allows to use a Wire <br>
//!          of the BRep topology like a 3D curve. <br>
//!  Warning: With this  class of curve,  C0 and C1 continuities <br>
//!          are not assumed. So be carful with some algorithm! <br>
public ref class OCBRepAdaptor_CompCurve  : public OCAdaptor3d_Curve {

protected:
  // dummy constructor;
  OCBRepAdaptor_CompCurve(OCDummy^) : OCAdaptor3d_Curve((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepAdaptor_CompCurve(BRepAdaptor_CompCurve* nativeHandle);

// Methods PUBLIC

//! Creates an undefined Curve with no Wire loaded. <br>
OCBRepAdaptor_CompCurve();


OCBRepAdaptor_CompCurve(OCNaroWrappers::OCTopoDS_Wire^ W, System::Boolean KnotByCurvilinearAbcissa);

//! Creates a Curve  to  acces to the geometry of edge <br>
//!          <W>. <br>
//! <br>
OCBRepAdaptor_CompCurve(OCNaroWrappers::OCTopoDS_Wire^ W, System::Boolean KnotByCurvilinearAbcissa, Standard_Real First, Standard_Real Last, Standard_Real Tol);

//! Sets the  wire <W>. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCTopoDS_Wire^ W, System::Boolean KnotByCurvilinearAbcissa) ;

//! Sets wire <W> and trimmed  parameter. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCTopoDS_Wire^ W, System::Boolean KnotByCurvilinearAbcissa, Standard_Real First, Standard_Real Last, Standard_Real Tol) ;

//! Set the flag Periodic. <br>
//!  Warning: This method has no effect if the wire is not closed <br>
 /*instead*/  void SetPeriodic(System::Boolean Periodic) ;

//! Returns the wire. <br>
//! <br>
 /*instead*/  OCTopoDS_Wire^ Wire() ;

//! returns an  edge  and   one  parameter on them <br>
//!           corresponding to the parameter U. <br>
 /*instead*/  void Edge(Standard_Real U, OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real& UonE) ;


virtual /*instead*/  Standard_Real FirstParameter() override;


virtual /*instead*/  Standard_Real LastParameter() override;


virtual /*instead*/  OCGeomAbs_Shape Continuity() override;

//! Returns  the number  of  intervals for  continuity <br>
//!          <S>. May be one if Continuity(me) >= <S> <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) override;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) override;

//! Returns    a  curve equivalent   of  <me>  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>//! If <First> >= <Last> <br>
virtual /*instead*/  OCAdaptor3d_HCurve^ Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol) override;


virtual /*instead*/  System::Boolean IsClosed() override;


virtual /*instead*/  System::Boolean IsPeriodic() override;


virtual /*instead*/  Standard_Real Period() override;

//! Computes the point of parameter U on the curve <br>
virtual /*instead*/  OCgp_Pnt^ Value(Standard_Real U) override;

//! Computes the point of parameter U. <br>
virtual /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) override;

//! Computes the point of parameter U on the curve <br>
//!  with its first derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C1. <br>
virtual /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V) override;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>//! Raised if the continuity of the current interval <br>
//!  is not C2. <br>
virtual /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) override;


//!  Returns the point P of parameter U, the first, the second <br>
//!  and the third derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C3. <br>
virtual /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) override;


//!  The returned vector gives the value of the derivative for the <br>
//!  order of derivation N. <br>//! Raised if the continuity of the current interval <br>
//!  is not CN. <br>//! Raised if N < 1. <br>
virtual /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) override;

//! returns the parametric resolution <br>
virtual /*instead*/  Standard_Real Resolution(Standard_Real R3d) override;


virtual /*instead*/  OCGeomAbs_CurveType GetType() override;


virtual /*instead*/  OCgp_Lin^ Line() override;


virtual /*instead*/  OCgp_Circ^ Circle() override;


virtual /*instead*/  OCgp_Elips^ Ellipse() override;


virtual /*instead*/  OCgp_Hypr^ Hyperbola() override;


virtual /*instead*/  OCgp_Parab^ Parabola() override;


virtual /*instead*/  Standard_Integer Degree() override;


virtual /*instead*/  System::Boolean IsRational() override;


virtual /*instead*/  Standard_Integer NbPoles() override;


virtual /*instead*/  Standard_Integer NbKnots() override;


virtual /*instead*/  OCGeom_BezierCurve^ Bezier() override;


virtual /*instead*/  OCGeom_BSplineCurve^ BSpline() override;

~OCBRepAdaptor_CompCurve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
