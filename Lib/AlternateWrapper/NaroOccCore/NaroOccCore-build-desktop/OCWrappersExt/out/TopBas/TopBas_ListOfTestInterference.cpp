// File generated by CPPExt (CPP file)
//

#include "TopBas_ListOfTestInterference.h"
#include "../Converter.h"
#include "TopBas_ListIteratorOfListOfTestInterference.h"
#include "TopBas_TestInterference.h"
#include "TopBas_ListNodeOfListOfTestInterference.h"


using namespace OCNaroWrappers;

OCTopBas_ListOfTestInterference::OCTopBas_ListOfTestInterference(TopBas_ListOfTestInterference* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopBas_ListOfTestInterference::OCTopBas_ListOfTestInterference() 
{
  nativeHandle = new TopBas_ListOfTestInterference();
}

 void OCTopBas_ListOfTestInterference::Assign(OCNaroWrappers::OCTopBas_ListOfTestInterference^ Other)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->Assign(*((TopBas_ListOfTestInterference*)Other->Handle));
}

 Standard_Integer OCTopBas_ListOfTestInterference::Extent()
{
  return ((TopBas_ListOfTestInterference*)nativeHandle)->Extent();
}

 System::Boolean OCTopBas_ListOfTestInterference::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((TopBas_ListOfTestInterference*)nativeHandle)->IsEmpty());
}

 void OCTopBas_ListOfTestInterference::Prepend(OCNaroWrappers::OCTopBas_TestInterference^ I)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->Prepend(*((TopBas_TestInterference*)I->Handle));
}

 void OCTopBas_ListOfTestInterference::Prepend(OCNaroWrappers::OCTopBas_TestInterference^ I, OCNaroWrappers::OCTopBas_ListIteratorOfListOfTestInterference^ theIt)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->Prepend(*((TopBas_TestInterference*)I->Handle), *((TopBas_ListIteratorOfListOfTestInterference*)theIt->Handle));
}

 void OCTopBas_ListOfTestInterference::Prepend(OCNaroWrappers::OCTopBas_ListOfTestInterference^ Other)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->Prepend(*((TopBas_ListOfTestInterference*)Other->Handle));
}

 void OCTopBas_ListOfTestInterference::Append(OCNaroWrappers::OCTopBas_TestInterference^ I)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->Append(*((TopBas_TestInterference*)I->Handle));
}

 void OCTopBas_ListOfTestInterference::Append(OCNaroWrappers::OCTopBas_TestInterference^ I, OCNaroWrappers::OCTopBas_ListIteratorOfListOfTestInterference^ theIt)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->Append(*((TopBas_TestInterference*)I->Handle), *((TopBas_ListIteratorOfListOfTestInterference*)theIt->Handle));
}

 void OCTopBas_ListOfTestInterference::Append(OCNaroWrappers::OCTopBas_ListOfTestInterference^ Other)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->Append(*((TopBas_ListOfTestInterference*)Other->Handle));
}

OCTopBas_TestInterference^ OCTopBas_ListOfTestInterference::First()
{
  TopBas_TestInterference* tmp = new TopBas_TestInterference();
  *tmp = ((TopBas_ListOfTestInterference*)nativeHandle)->First();
  return gcnew OCTopBas_TestInterference(tmp);
}

OCTopBas_TestInterference^ OCTopBas_ListOfTestInterference::Last()
{
  TopBas_TestInterference* tmp = new TopBas_TestInterference();
  *tmp = ((TopBas_ListOfTestInterference*)nativeHandle)->Last();
  return gcnew OCTopBas_TestInterference(tmp);
}

 void OCTopBas_ListOfTestInterference::RemoveFirst()
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->RemoveFirst();
}

 void OCTopBas_ListOfTestInterference::Remove(OCNaroWrappers::OCTopBas_ListIteratorOfListOfTestInterference^ It)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->Remove(*((TopBas_ListIteratorOfListOfTestInterference*)It->Handle));
}

 void OCTopBas_ListOfTestInterference::InsertBefore(OCNaroWrappers::OCTopBas_TestInterference^ I, OCNaroWrappers::OCTopBas_ListIteratorOfListOfTestInterference^ It)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->InsertBefore(*((TopBas_TestInterference*)I->Handle), *((TopBas_ListIteratorOfListOfTestInterference*)It->Handle));
}

 void OCTopBas_ListOfTestInterference::InsertBefore(OCNaroWrappers::OCTopBas_ListOfTestInterference^ Other, OCNaroWrappers::OCTopBas_ListIteratorOfListOfTestInterference^ It)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->InsertBefore(*((TopBas_ListOfTestInterference*)Other->Handle), *((TopBas_ListIteratorOfListOfTestInterference*)It->Handle));
}

 void OCTopBas_ListOfTestInterference::InsertAfter(OCNaroWrappers::OCTopBas_TestInterference^ I, OCNaroWrappers::OCTopBas_ListIteratorOfListOfTestInterference^ It)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->InsertAfter(*((TopBas_TestInterference*)I->Handle), *((TopBas_ListIteratorOfListOfTestInterference*)It->Handle));
}

 void OCTopBas_ListOfTestInterference::InsertAfter(OCNaroWrappers::OCTopBas_ListOfTestInterference^ Other, OCNaroWrappers::OCTopBas_ListIteratorOfListOfTestInterference^ It)
{
  ((TopBas_ListOfTestInterference*)nativeHandle)->InsertAfter(*((TopBas_ListOfTestInterference*)Other->Handle), *((TopBas_ListIteratorOfListOfTestInterference*)It->Handle));
}


