// File generated by CPPExt (CPP file)
//

#include "TopBas_TestInterference.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCTopBas_TestInterference::OCTopBas_TestInterference(TopBas_TestInterference* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopBas_TestInterference::OCTopBas_TestInterference() 
{
  nativeHandle = new TopBas_TestInterference();
}

OCTopBas_TestInterference::OCTopBas_TestInterference(Standard_Real Inters, Standard_Integer Bound, OCTopAbs_Orientation Orient, OCTopAbs_Orientation Trans, OCTopAbs_Orientation BTrans) 
{
  nativeHandle = new TopBas_TestInterference(Inters, Bound, (TopAbs_Orientation)Orient, (TopAbs_Orientation)Trans, (TopAbs_Orientation)BTrans);
}

 void OCTopBas_TestInterference::Intersection(Standard_Real I)
{
  ((TopBas_TestInterference*)nativeHandle)->Intersection(I);
}

 void OCTopBas_TestInterference::Boundary(Standard_Integer B)
{
  ((TopBas_TestInterference*)nativeHandle)->Boundary(B);
}

 void OCTopBas_TestInterference::Orientation(OCTopAbs_Orientation O)
{
  ((TopBas_TestInterference*)nativeHandle)->Orientation((TopAbs_Orientation)O);
}

 void OCTopBas_TestInterference::Transition(OCTopAbs_Orientation Tr)
{
  ((TopBas_TestInterference*)nativeHandle)->Transition((TopAbs_Orientation)Tr);
}

 void OCTopBas_TestInterference::BoundaryTransition(OCTopAbs_Orientation BTr)
{
  ((TopBas_TestInterference*)nativeHandle)->BoundaryTransition((TopAbs_Orientation)BTr);
}

 Standard_Real OCTopBas_TestInterference::Intersection()
{
  return ((TopBas_TestInterference*)nativeHandle)->Intersection();
}

 Standard_Real OCTopBas_TestInterference::ChangeIntersection()
{
  return ((TopBas_TestInterference*)nativeHandle)->ChangeIntersection();
}

 Standard_Integer OCTopBas_TestInterference::Boundary()
{
  return ((TopBas_TestInterference*)nativeHandle)->Boundary();
}

 Standard_Integer OCTopBas_TestInterference::ChangeBoundary()
{
  return ((TopBas_TestInterference*)nativeHandle)->ChangeBoundary();
}

 OCTopAbs_Orientation OCTopBas_TestInterference::Orientation()
{
  return (OCTopAbs_Orientation)(((TopBas_TestInterference*)nativeHandle)->Orientation());
}

 OCTopAbs_Orientation OCTopBas_TestInterference::Transition()
{
  return (OCTopAbs_Orientation)(((TopBas_TestInterference*)nativeHandle)->Transition());
}

 OCTopAbs_Orientation OCTopBas_TestInterference::BoundaryTransition()
{
  return (OCTopAbs_Orientation)(((TopBas_TestInterference*)nativeHandle)->BoundaryTransition());
}


