// File generated by CPPExt (MPV)
//
#ifndef _GProp_PGProps_OCWrappers_HeaderFile
#define _GProp_PGProps_OCWrappers_HeaderFile

// include native header
#include <GProp_PGProps.hxx>
#include "../Converter.h"

#include "GProp_GProps.h"

#include "GProp_GProps.h"


namespace OCNaroWrappers
{

ref class OCgp_Pnt;
ref class OCTColgp_Array1OfPnt;
ref class OCTColgp_Array2OfPnt;
ref class OCTColStd_Array1OfReal;
ref class OCTColStd_Array2OfReal;


//! A framework for computing the global properties of a <br>
//! set of points. <br>
//! A point mass is attached to each point. The global <br>
//! mass of the system is the sum of each individual <br>
//! mass. By default, the point mass is equal to 1 and the <br>
//! mass of a system composed of N points is equal to N. <br>
//! Warning <br>
//! A framework of this sort provides functions to handle <br>
//! sets of points easily. But, like any GProp_GProps <br>
//! object, by using the Add function, it can theoretically <br>
//! bring together the computed global properties and <br>
//! those of a system more complex than a set of points . <br>
//! The mass of each point and the density of each <br>
//! component of the composed system must be <br>
//! coherent. Note that this coherence cannot be checked. <br>
//! Nonetheless, you are advised to restrict your use of a <br>
//! GProp_PGProps object to a set of points and to <br>
//! create a GProp_GProps object in order to bring <br>
//! together global properties of different systems. <br>
public ref class OCGProp_PGProps  : public OCGProp_GProps {

protected:
  // dummy constructor;
  OCGProp_PGProps(OCDummy^) : OCGProp_GProps((OCDummy^)nullptr) {};

public:

// constructor from native
OCGProp_PGProps(GProp_PGProps* nativeHandle);

// Methods PUBLIC

//! Initializes a framework to compute global properties <br>
//! on a set of points. <br>
//! The point relative to which the inertia of the system is <br>
//! computed will be the origin (0, 0, 0) of the <br>
//! absolute Cartesian coordinate system. <br>
//! At initialization, the framework is empty, i.e. it retains <br>
//! no dimensional information such as mass and inertia. <br>
//! It is, however, now able to keep global properties of a <br>
//! set of points while new points are added using the <br>
//! AddPoint function. <br>
//! The set of points whose global properties are brought <br>
//! together by this framework will then be referred to as <br>
//! the current system. The current system is, however, <br>
//! not kept by this framework, which only keeps that <br>
//! system's global properties. Note that the current <br>
//! system may be more complex than a set of points. <br>
OCGProp_PGProps();

//! Brings together the global properties already <br>
//! retained by this framework with those induced by <br>
//! the point Pnt. Pnt may be the first point of the current system. <br>
//! A point mass is attached to the point Pnt, it is either <br>
//! equal to 1. or to Density. <br>
 /*instead*/  void AddPoint(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Adds a new point P with its density in the system of points <br>
//! Exceptions <br>
//! Standard_DomainError if the mass value Density <br>
//! is less than gp::Resolution(). <br>
 /*instead*/  void AddPoint(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Density) ;


//!  computes the global properties of the system of points Pnts. <br>
//!  The density of the points are defaulted to all being 1 <br>
OCGProp_PGProps(OCNaroWrappers::OCTColgp_Array1OfPnt^ Pnts);


//!  computes the global properties of the system of points Pnts. <br>
//!  The density of the points are defaulted to all being 1 <br>
OCGProp_PGProps(OCNaroWrappers::OCTColgp_Array2OfPnt^ Pnts);


//!  computes the global properties of the system of points Pnts. <br>
//!  A density is associated with each point. <br>
//!  raises if a density is lower or equal to Resolution from package <br>
//!  gp. <br>
//!  raises if the length of Pnts and the length of Density <br>
//!  is not the same. <br>
OCGProp_PGProps(OCNaroWrappers::OCTColgp_Array1OfPnt^ Pnts, OCNaroWrappers::OCTColStd_Array1OfReal^ Density);


//!  computes the global properties of the system of points Pnts. <br>
//!  A density is associated with each point. <br>
//!  Raised if a density is lower or equal to Resolution from package <br>
//!  gp. <br>
//!  Raised if the length of Pnts and the length of Density <br>
//!  is not the same. <br>
OCGProp_PGProps(OCNaroWrappers::OCTColgp_Array2OfPnt^ Pnts, OCNaroWrappers::OCTColStd_Array2OfReal^ Density);


//!  Computes the barycentre of a set of points. The density of the <br>
//!  points is defaulted to 1. <br>
static /*instead*/  OCgp_Pnt^ Barycentre(OCNaroWrappers::OCTColgp_Array1OfPnt^ Pnts) ;


//!  Computes the barycentre of a set of points. The density of the <br>
//!  points is defaulted to 1. <br>
static /*instead*/  OCgp_Pnt^ Barycentre(OCNaroWrappers::OCTColgp_Array2OfPnt^ Pnts) ;


//!  Computes the barycentre of a set of points. A density is associated <br>
//!  with each point. <br>
//!  raises if a density is lower or equal to Resolution from package <br>
//!  gp. <br>
//!  Raised if the length of Pnts and the length of Density <br>
//!  is not the same. <br>
static /*instead*/  void Barycentre(OCNaroWrappers::OCTColgp_Array1OfPnt^ Pnts, OCNaroWrappers::OCTColStd_Array1OfReal^ Density, Standard_Real& Mass, OCNaroWrappers::OCgp_Pnt^ G) ;


//!  Computes the barycentre of a set of points. A density is associated <br>
//!  with each point. <br>
//!  Raised if a density is lower or equal to Resolution from package <br>
//!  gp. <br>
//!  Raised if the length of Pnts and the length of Density <br>
//!  is not the same. <br>
static /*instead*/  void Barycentre(OCNaroWrappers::OCTColgp_Array2OfPnt^ Pnts, OCNaroWrappers::OCTColStd_Array2OfReal^ Density, Standard_Real& Mass, OCNaroWrappers::OCgp_Pnt^ G) ;

~OCGProp_PGProps()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
