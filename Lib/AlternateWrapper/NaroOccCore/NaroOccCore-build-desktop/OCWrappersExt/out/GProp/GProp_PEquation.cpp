// File generated by CPPExt (CPP file)
//

#include "GProp_PEquation.h"
#include "../Converter.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../gp/gp_Pln.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"


using namespace OCNaroWrappers;

OCGProp_PEquation::OCGProp_PEquation(GProp_PEquation* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGProp_PEquation::OCGProp_PEquation(OCNaroWrappers::OCTColgp_Array1OfPnt^ Pnts, Standard_Real Tol) 
{
  nativeHandle = new GProp_PEquation(*((TColgp_Array1OfPnt*)Pnts->Handle), Tol);
}

 System::Boolean OCGProp_PEquation::IsPlanar()
{
  return OCConverter::StandardBooleanToBoolean(((GProp_PEquation*)nativeHandle)->IsPlanar());
}

 System::Boolean OCGProp_PEquation::IsLinear()
{
  return OCConverter::StandardBooleanToBoolean(((GProp_PEquation*)nativeHandle)->IsLinear());
}

 System::Boolean OCGProp_PEquation::IsPoint()
{
  return OCConverter::StandardBooleanToBoolean(((GProp_PEquation*)nativeHandle)->IsPoint());
}

 System::Boolean OCGProp_PEquation::IsSpace()
{
  return OCConverter::StandardBooleanToBoolean(((GProp_PEquation*)nativeHandle)->IsSpace());
}

OCgp_Pln^ OCGProp_PEquation::Plane()
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((GProp_PEquation*)nativeHandle)->Plane();
  return gcnew OCgp_Pln(tmp);
}

OCgp_Lin^ OCGProp_PEquation::Line()
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = ((GProp_PEquation*)nativeHandle)->Line();
  return gcnew OCgp_Lin(tmp);
}

OCgp_Pnt^ OCGProp_PEquation::Point()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((GProp_PEquation*)nativeHandle)->Point();
  return gcnew OCgp_Pnt(tmp);
}

 void OCGProp_PEquation::Box(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  ((GProp_PEquation*)nativeHandle)->Box(*((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}


