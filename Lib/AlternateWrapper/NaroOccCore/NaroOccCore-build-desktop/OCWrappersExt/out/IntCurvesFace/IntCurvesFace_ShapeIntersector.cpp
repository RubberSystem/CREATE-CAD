// File generated by CPPExt (CPP file)
//

#include "IntCurvesFace_ShapeIntersector.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../gp/gp_Lin.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../gp/gp_Pnt.h"
#include "../TopoDS/TopoDS_Face.h"


using namespace OCNaroWrappers;

OCIntCurvesFace_ShapeIntersector::OCIntCurvesFace_ShapeIntersector(IntCurvesFace_ShapeIntersector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntCurvesFace_ShapeIntersector::OCIntCurvesFace_ShapeIntersector() 
{
  nativeHandle = new IntCurvesFace_ShapeIntersector();
}

 void OCIntCurvesFace_ShapeIntersector::Load(OCNaroWrappers::OCTopoDS_Shape^ Sh, Standard_Real Tol)
{
  ((IntCurvesFace_ShapeIntersector*)nativeHandle)->Load(*((TopoDS_Shape*)Sh->Handle), Tol);
}

 void OCIntCurvesFace_ShapeIntersector::Perform(OCNaroWrappers::OCgp_Lin^ L, Standard_Real PInf, Standard_Real PSup)
{
  ((IntCurvesFace_ShapeIntersector*)nativeHandle)->Perform(*((gp_Lin*)L->Handle), PInf, PSup);
}

 void OCIntCurvesFace_ShapeIntersector::PerformNearest(OCNaroWrappers::OCgp_Lin^ L, Standard_Real PInf, Standard_Real PSup)
{
  ((IntCurvesFace_ShapeIntersector*)nativeHandle)->PerformNearest(*((gp_Lin*)L->Handle), PInf, PSup);
}

 void OCIntCurvesFace_ShapeIntersector::Perform(OCNaroWrappers::OCAdaptor3d_HCurve^ HCu, Standard_Real PInf, Standard_Real PSup)
{
  ((IntCurvesFace_ShapeIntersector*)nativeHandle)->Perform(*((Handle_Adaptor3d_HCurve*)HCu->Handle), PInf, PSup);
}

 System::Boolean OCIntCurvesFace_ShapeIntersector::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((IntCurvesFace_ShapeIntersector*)nativeHandle)->IsDone());
}

 Standard_Integer OCIntCurvesFace_ShapeIntersector::NbPnt()
{
  return ((IntCurvesFace_ShapeIntersector*)nativeHandle)->NbPnt();
}

 Standard_Real OCIntCurvesFace_ShapeIntersector::UParameter(Standard_Integer I)
{
  return ((IntCurvesFace_ShapeIntersector*)nativeHandle)->UParameter(I);
}

 Standard_Real OCIntCurvesFace_ShapeIntersector::VParameter(Standard_Integer I)
{
  return ((IntCurvesFace_ShapeIntersector*)nativeHandle)->VParameter(I);
}

 Standard_Real OCIntCurvesFace_ShapeIntersector::WParameter(Standard_Integer I)
{
  return ((IntCurvesFace_ShapeIntersector*)nativeHandle)->WParameter(I);
}

OCgp_Pnt^ OCIntCurvesFace_ShapeIntersector::Pnt(Standard_Integer I)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntCurvesFace_ShapeIntersector*)nativeHandle)->Pnt(I);
  return gcnew OCgp_Pnt(tmp);
}

 OCIntCurveSurface_TransitionOnCurve OCIntCurvesFace_ShapeIntersector::Transition(Standard_Integer I)
{
  return (OCIntCurveSurface_TransitionOnCurve)(((IntCurvesFace_ShapeIntersector*)nativeHandle)->Transition(I));
}

 OCTopAbs_State OCIntCurvesFace_ShapeIntersector::State(Standard_Integer I)
{
  return (OCTopAbs_State)(((IntCurvesFace_ShapeIntersector*)nativeHandle)->State(I));
}

OCTopoDS_Face^ OCIntCurvesFace_ShapeIntersector::Face(Standard_Integer I)
{
  TopoDS_Face* tmp = new TopoDS_Face();
  *tmp = ((IntCurvesFace_ShapeIntersector*)nativeHandle)->Face(I);
  return gcnew OCTopoDS_Face(tmp);
}

 void OCIntCurvesFace_ShapeIntersector::SortResult()
{
  ((IntCurvesFace_ShapeIntersector*)nativeHandle)->SortResult();
}


