// File generated by CPPExt (CPP file)
//

#include "GeomAdaptor_Surface.h"
#include "../Converter.h"
#include "../Geom/Geom_Surface.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Pln.h"
#include "../gp/gp_Cylinder.h"
#include "../gp/gp_Cone.h"
#include "../gp/gp_Sphere.h"
#include "../gp/gp_Torus.h"
#include "../Geom/Geom_BezierSurface.h"
#include "../Geom/Geom_BSplineSurface.h"
#include "../gp/gp_Ax1.h"
#include "../gp/gp_Dir.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"


using namespace OCNaroWrappers;

OCGeomAdaptor_Surface::OCGeomAdaptor_Surface(GeomAdaptor_Surface* nativeHandle) : OCAdaptor3d_Surface((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCGeomAdaptor_Surface::OCGeomAdaptor_Surface() : OCAdaptor3d_Surface((OCDummy^)nullptr)

{
  nativeHandle = new GeomAdaptor_Surface();
}

OCGeomAdaptor_Surface::OCGeomAdaptor_Surface(OCNaroWrappers::OCGeom_Surface^ S) : OCAdaptor3d_Surface((OCDummy^)nullptr)

{
  nativeHandle = new GeomAdaptor_Surface(*((Handle_Geom_Surface*)S->Handle));
}

OCGeomAdaptor_Surface::OCGeomAdaptor_Surface(OCNaroWrappers::OCGeom_Surface^ S, Standard_Real UFirst, Standard_Real ULast, Standard_Real VFirst, Standard_Real VLast, Standard_Real TolU, Standard_Real TolV) : OCAdaptor3d_Surface((OCDummy^)nullptr)

{
  nativeHandle = new GeomAdaptor_Surface(*((Handle_Geom_Surface*)S->Handle), UFirst, ULast, VFirst, VLast, TolU, TolV);
}

 void OCGeomAdaptor_Surface::Load(OCNaroWrappers::OCGeom_Surface^ S)
{
  ((GeomAdaptor_Surface*)nativeHandle)->Load(*((Handle_Geom_Surface*)S->Handle));
}

 void OCGeomAdaptor_Surface::Load(OCNaroWrappers::OCGeom_Surface^ S, Standard_Real UFirst, Standard_Real ULast, Standard_Real VFirst, Standard_Real VLast, Standard_Real TolU, Standard_Real TolV)
{
  ((GeomAdaptor_Surface*)nativeHandle)->Load(*((Handle_Geom_Surface*)S->Handle), UFirst, ULast, VFirst, VLast, TolU, TolV);
}

OCGeom_Surface^ OCGeomAdaptor_Surface::Surface()
{
  Handle(Geom_Surface) tmp = ((GeomAdaptor_Surface*)nativeHandle)->Surface();
  return gcnew OCGeom_Surface(&tmp);
}

 Standard_Real OCGeomAdaptor_Surface::FirstUParameter()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->FirstUParameter();
}

 Standard_Real OCGeomAdaptor_Surface::LastUParameter()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->LastUParameter();
}

 Standard_Real OCGeomAdaptor_Surface::FirstVParameter()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->FirstVParameter();
}

 Standard_Real OCGeomAdaptor_Surface::LastVParameter()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->LastVParameter();
}

 OCGeomAbs_Shape OCGeomAdaptor_Surface::UContinuity()
{
  return (OCGeomAbs_Shape)(((GeomAdaptor_Surface*)nativeHandle)->UContinuity());
}

 OCGeomAbs_Shape OCGeomAdaptor_Surface::VContinuity()
{
  return (OCGeomAbs_Shape)(((GeomAdaptor_Surface*)nativeHandle)->VContinuity());
}

 Standard_Integer OCGeomAdaptor_Surface::NbUIntervals(OCGeomAbs_Shape S)
{
  return ((GeomAdaptor_Surface*)nativeHandle)->NbUIntervals((GeomAbs_Shape)S);
}

 Standard_Integer OCGeomAdaptor_Surface::NbVIntervals(OCGeomAbs_Shape S)
{
  return ((GeomAdaptor_Surface*)nativeHandle)->NbVIntervals((GeomAbs_Shape)S);
}

 void OCGeomAdaptor_Surface::UIntervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((GeomAdaptor_Surface*)nativeHandle)->UIntervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 void OCGeomAdaptor_Surface::VIntervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((GeomAdaptor_Surface*)nativeHandle)->VIntervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor3d_HSurface^ OCGeomAdaptor_Surface::UTrim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HSurface) tmp = ((GeomAdaptor_Surface*)nativeHandle)->UTrim(First, Last, Tol);
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

OCAdaptor3d_HSurface^ OCGeomAdaptor_Surface::VTrim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor3d_HSurface) tmp = ((GeomAdaptor_Surface*)nativeHandle)->VTrim(First, Last, Tol);
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

 System::Boolean OCGeomAdaptor_Surface::IsUClosed()
{
  return OCConverter::StandardBooleanToBoolean(((GeomAdaptor_Surface*)nativeHandle)->IsUClosed());
}

 System::Boolean OCGeomAdaptor_Surface::IsVClosed()
{
  return OCConverter::StandardBooleanToBoolean(((GeomAdaptor_Surface*)nativeHandle)->IsVClosed());
}

 System::Boolean OCGeomAdaptor_Surface::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((GeomAdaptor_Surface*)nativeHandle)->IsUPeriodic());
}

 Standard_Real OCGeomAdaptor_Surface::UPeriod()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->UPeriod();
}

 System::Boolean OCGeomAdaptor_Surface::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((GeomAdaptor_Surface*)nativeHandle)->IsVPeriodic());
}

 Standard_Real OCGeomAdaptor_Surface::VPeriod()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->VPeriod();
}

OCgp_Pnt^ OCGeomAdaptor_Surface::Value(Standard_Real U, Standard_Real V)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->Value(U, V);
  return gcnew OCgp_Pnt(tmp);
}

 void OCGeomAdaptor_Surface::D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P)
{
  ((GeomAdaptor_Surface*)nativeHandle)->D0(U, V, *((gp_Pnt*)P->Handle));
}

 void OCGeomAdaptor_Surface::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  ((GeomAdaptor_Surface*)nativeHandle)->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeomAdaptor_Surface::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  ((GeomAdaptor_Surface*)nativeHandle)->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeomAdaptor_Surface::D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  ((GeomAdaptor_Surface*)nativeHandle)->D3(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeomAdaptor_Surface::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCGeomAdaptor_Surface::UResolution(Standard_Real R3d)
{
  return ((GeomAdaptor_Surface*)nativeHandle)->UResolution(R3d);
}

 Standard_Real OCGeomAdaptor_Surface::VResolution(Standard_Real R3d)
{
  return ((GeomAdaptor_Surface*)nativeHandle)->VResolution(R3d);
}

 OCGeomAbs_SurfaceType OCGeomAdaptor_Surface::GetType()
{
  return (OCGeomAbs_SurfaceType)(((GeomAdaptor_Surface*)nativeHandle)->GetType());
}

OCgp_Pln^ OCGeomAdaptor_Surface::Plane()
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->Plane();
  return gcnew OCgp_Pln(tmp);
}

OCgp_Cylinder^ OCGeomAdaptor_Surface::Cylinder()
{
  gp_Cylinder* tmp = new gp_Cylinder();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->Cylinder();
  return gcnew OCgp_Cylinder(tmp);
}

OCgp_Cone^ OCGeomAdaptor_Surface::Cone()
{
  gp_Cone* tmp = new gp_Cone();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->Cone();
  return gcnew OCgp_Cone(tmp);
}

OCgp_Sphere^ OCGeomAdaptor_Surface::Sphere()
{
  gp_Sphere* tmp = new gp_Sphere();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->Sphere();
  return gcnew OCgp_Sphere(tmp);
}

OCgp_Torus^ OCGeomAdaptor_Surface::Torus()
{
  gp_Torus* tmp = new gp_Torus();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->Torus();
  return gcnew OCgp_Torus(tmp);
}

 Standard_Integer OCGeomAdaptor_Surface::UDegree()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->UDegree();
}

 Standard_Integer OCGeomAdaptor_Surface::NbUPoles()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->NbUPoles();
}

 Standard_Integer OCGeomAdaptor_Surface::VDegree()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->VDegree();
}

 Standard_Integer OCGeomAdaptor_Surface::NbVPoles()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->NbVPoles();
}

 Standard_Integer OCGeomAdaptor_Surface::NbUKnots()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->NbUKnots();
}

 Standard_Integer OCGeomAdaptor_Surface::NbVKnots()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->NbVKnots();
}

 System::Boolean OCGeomAdaptor_Surface::IsURational()
{
  return OCConverter::StandardBooleanToBoolean(((GeomAdaptor_Surface*)nativeHandle)->IsURational());
}

 System::Boolean OCGeomAdaptor_Surface::IsVRational()
{
  return OCConverter::StandardBooleanToBoolean(((GeomAdaptor_Surface*)nativeHandle)->IsVRational());
}

OCGeom_BezierSurface^ OCGeomAdaptor_Surface::Bezier()
{
  Handle(Geom_BezierSurface) tmp = ((GeomAdaptor_Surface*)nativeHandle)->Bezier();
  return gcnew OCGeom_BezierSurface(&tmp);
}

OCGeom_BSplineSurface^ OCGeomAdaptor_Surface::BSpline()
{
  Handle(Geom_BSplineSurface) tmp = ((GeomAdaptor_Surface*)nativeHandle)->BSpline();
  return gcnew OCGeom_BSplineSurface(&tmp);
}

OCgp_Ax1^ OCGeomAdaptor_Surface::AxeOfRevolution()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->AxeOfRevolution();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Dir^ OCGeomAdaptor_Surface::Direction()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((GeomAdaptor_Surface*)nativeHandle)->Direction();
  return gcnew OCgp_Dir(tmp);
}

OCAdaptor3d_HCurve^ OCGeomAdaptor_Surface::BasisCurve()
{
  Handle(Adaptor3d_HCurve) tmp = ((GeomAdaptor_Surface*)nativeHandle)->BasisCurve();
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

OCAdaptor3d_HSurface^ OCGeomAdaptor_Surface::BasisSurface()
{
  Handle(Adaptor3d_HSurface) tmp = ((GeomAdaptor_Surface*)nativeHandle)->BasisSurface();
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

 Standard_Real OCGeomAdaptor_Surface::OffsetValue()
{
  return ((GeomAdaptor_Surface*)nativeHandle)->OffsetValue();
}


