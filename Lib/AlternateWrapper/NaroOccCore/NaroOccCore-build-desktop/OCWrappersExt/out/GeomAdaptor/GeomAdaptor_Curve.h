// File generated by CPPExt (MPV)
//
#ifndef _GeomAdaptor_Curve_OCWrappers_HeaderFile
#define _GeomAdaptor_Curve_OCWrappers_HeaderFile

// include native header
#include <GeomAdaptor_Curve.hxx>
#include "../Converter.h"

#include "../Adaptor3d/Adaptor3d_Curve.h"

#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom_Curve;
ref class OCGeomAdaptor_Surface;
ref class OCTColStd_Array1OfReal;
ref class OCAdaptor3d_HCurve;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Lin;
ref class OCgp_Circ;
ref class OCgp_Elips;
ref class OCgp_Hypr;
ref class OCgp_Parab;
ref class OCGeom_BezierCurve;
ref class OCGeom_BSplineCurve;


//! This class provides an interface between the services provided by any <br>
//! curve from the package Geom and those required of the curve by algorithms which use it. <br>
public ref class OCGeomAdaptor_Curve  : public OCAdaptor3d_Curve {

protected:
  // dummy constructor;
  OCGeomAdaptor_Curve(OCDummy^) : OCAdaptor3d_Curve((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeomAdaptor_Curve(GeomAdaptor_Curve* nativeHandle);

// Methods PUBLIC


OCGeomAdaptor_Curve();


OCGeomAdaptor_Curve(OCNaroWrappers::OCGeom_Curve^ C);

//! ConstructionError is raised if Ufirst>Ulast <br>
OCGeomAdaptor_Curve(OCNaroWrappers::OCGeom_Curve^ C, Standard_Real UFirst, Standard_Real ULast);


 /*instead*/  void Load(OCNaroWrappers::OCGeom_Curve^ C) ;

//! ConstructionError is raised if Ufirst>Ulast <br>
 /*instead*/  void Load(OCNaroWrappers::OCGeom_Curve^ C, Standard_Real UFirst, Standard_Real ULast) ;


//! Provides a curve inherited from Hcurve from Adaptor. <br>
//! This is inherited to provide easy to use constructors. <br>
 /*instead*/  OCGeom_Curve^ Curve() ;


virtual /*instead*/  Standard_Real FirstParameter() override;


virtual /*instead*/  Standard_Real LastParameter() override;


virtual /*instead*/  OCGeomAbs_Shape Continuity() override;

//! Returns  the number  of  intervals for  continuity <br>
//!          <S>. May be one if Continuity(me) >= <S> <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) override;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) override;

//! Returns    a  curve equivalent   of  <me>  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>//! If <First> >= <Last> <br>
virtual /*instead*/  OCAdaptor3d_HCurve^ Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol) override;


virtual /*instead*/  System::Boolean IsClosed() override;


virtual /*instead*/  System::Boolean IsPeriodic() override;


virtual /*instead*/  Standard_Real Period() override;

//! Computes the point of parameter U on the curve <br>
virtual /*instead*/  OCgp_Pnt^ Value(Standard_Real U) override;

//! Computes the point of parameter U. <br>
virtual /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) override;

//! Computes the point of parameter U on the curve <br>
//!  with its first derivative. <br>
//! <br>
//!  Warning : On the specific case of BSplineCurve: <br>
//!  if the curve is cut in interval of continuity at least C1, the <br>
//!  derivatives are computed on the current interval. <br>
//!  else the derivatives are computed on the basis curve. <br>
virtual /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V) override;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>
//! <br>
//!  Warning : On the specific case of BSplineCurve: <br>
//!  if the curve is cut in interval of continuity at least C2, the <br>
//!  derivatives are computed on the current interval. <br>
//!  else the derivatives are computed on the basis curve. <br>
virtual /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) override;


//!  Returns the point P of parameter U, the first, the second <br>
//!  and the third derivative. <br>
//! <br>
//!  Warning : On the specific case of BSplineCurve: <br>
//!  if the curve is cut in interval of continuity at least C3, the <br>
//!  derivatives are computed on the current interval. <br>
//!  else the derivatives are computed on the basis curve. <br>
virtual /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) override;


//!  The returned vector gives the value of the derivative for the <br>
//!  order of derivation N. <br>
//!  Warning : On the specific case of BSplineCurve: <br>
//!  if the curve is cut in interval of continuity CN, the <br>
//!  derivatives are computed on the current interval. <br>
//!  else the derivatives are computed on the basis curve. <br>//! Raised if N < 1. <br>
virtual /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) override;

//! returns the parametric resolution <br>
virtual /*instead*/  Standard_Real Resolution(Standard_Real R3d) override;


virtual /*instead*/  OCGeomAbs_CurveType GetType() override;


virtual /*instead*/  OCgp_Lin^ Line() override;


virtual /*instead*/  OCgp_Circ^ Circle() override;


virtual /*instead*/  OCgp_Elips^ Ellipse() override;


virtual /*instead*/  OCgp_Hypr^ Hyperbola() override;


virtual /*instead*/  OCgp_Parab^ Parabola() override;


//!          this should NEVER make a copy <br>
//!          of the underlying curve to read <br>
//!          the relevant information <br>
//! <br>
virtual /*instead*/  Standard_Integer Degree() override;


//!          this should NEVER make a copy <br>
//!          of the underlying curve to read <br>
//!          the relevant information <br>
//! <br>
virtual /*instead*/  System::Boolean IsRational() override;


//!          this should NEVER make a copy <br>
//!          of the underlying curve to read <br>
//!          the relevant information <br>
//! <br>
virtual /*instead*/  Standard_Integer NbPoles() override;


//!          this should NEVER make a copy <br>
//!          of the underlying curve to read <br>
//!          the relevant information <br>
//! <br>
virtual /*instead*/  Standard_Integer NbKnots() override;

//! this will NOT make a copy of the <br>
//!         Bezier Curve : If you want to modify <br>
//!         the Curve please make a copy yourself <br>
//!         Also it will NOT trim the surface to <br>
//!         myFirst/Last. <br>
virtual /*instead*/  OCGeom_BezierCurve^ Bezier() override;

//! this will NOT make a copy of the <br>
//!         BSpline Curve : If you want to modify <br>
//!         the Curve please make a copy yourself <br>
//!         Also it will NOT trim the surface to <br>
//!         myFirst/Last. <br>
virtual /*instead*/  OCGeom_BSplineCurve^ BSpline() override;

~OCGeomAdaptor_Curve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
