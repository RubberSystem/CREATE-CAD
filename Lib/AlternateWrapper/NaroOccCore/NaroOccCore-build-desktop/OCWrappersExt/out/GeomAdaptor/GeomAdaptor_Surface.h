// File generated by CPPExt (MPV)
//
#ifndef _GeomAdaptor_Surface_OCWrappers_HeaderFile
#define _GeomAdaptor_Surface_OCWrappers_HeaderFile

// include native header
#include <GeomAdaptor_Surface.hxx>
#include "../Converter.h"

#include "../Adaptor3d/Adaptor3d_Surface.h"

#include "../GeomAbs/GeomAbs_SurfaceType.h"
#include "../Adaptor3d/Adaptor3d_Surface.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom_Surface;
ref class OCTColStd_Array1OfReal;
ref class OCAdaptor3d_HSurface;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Pln;
ref class OCgp_Cylinder;
ref class OCgp_Cone;
ref class OCgp_Sphere;
ref class OCgp_Torus;
ref class OCGeom_BezierSurface;
ref class OCGeom_BSplineSurface;
ref class OCgp_Ax1;
ref class OCgp_Dir;
ref class OCAdaptor3d_HCurve;


//! An interface between the services provided by any <br>
//! surface from the package Geom and those required <br>
//! of the surface by algorithms which use it. <br>
public ref class OCGeomAdaptor_Surface  : public OCAdaptor3d_Surface {

protected:
  // dummy constructor;
  OCGeomAdaptor_Surface(OCDummy^) : OCAdaptor3d_Surface((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeomAdaptor_Surface(GeomAdaptor_Surface* nativeHandle);

// Methods PUBLIC


OCGeomAdaptor_Surface();


OCGeomAdaptor_Surface(OCNaroWrappers::OCGeom_Surface^ S);

//! ConstructionError is raised if UFirst>ULast or VFirst>VLast <br>
OCGeomAdaptor_Surface(OCNaroWrappers::OCGeom_Surface^ S, Standard_Real UFirst, Standard_Real ULast, Standard_Real VFirst, Standard_Real VLast, Standard_Real TolU, Standard_Real TolV);


 /*instead*/  void Load(OCNaroWrappers::OCGeom_Surface^ S) ;

//! ConstructionError is raised if UFirst>ULast or VFirst>VLast <br>
 /*instead*/  void Load(OCNaroWrappers::OCGeom_Surface^ S, Standard_Real UFirst, Standard_Real ULast, Standard_Real VFirst, Standard_Real VLast, Standard_Real TolU, Standard_Real TolV) ;


 /*instead*/  OCGeom_Surface^ Surface() ;


virtual /*instead*/  Standard_Real FirstUParameter() override;


virtual /*instead*/  Standard_Real LastUParameter() override;


virtual /*instead*/  Standard_Real FirstVParameter() override;


virtual /*instead*/  Standard_Real LastVParameter() override;


virtual /*instead*/  OCGeomAbs_Shape UContinuity() override;


virtual /*instead*/  OCGeomAbs_Shape VContinuity() override;

//! Returns the number of U intervals for  continuity <br>
//!          <S>. May be one if UContinuity(me) >= <S> <br>
virtual /*instead*/  Standard_Integer NbUIntervals(OCGeomAbs_Shape S) override;

//! Returns the number of V intervals for  continuity <br>
//!          <S>. May be one if VContinuity(me) >= <S> <br>
virtual /*instead*/  Standard_Integer NbVIntervals(OCGeomAbs_Shape S) override;

//! Returns the  intervals with the requested continuity <br>
//!          in the U direction. <br>
virtual /*instead*/  void UIntervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) override;

//! Returns the  intervals with the requested continuity <br>
//!          in the V direction. <br>
virtual /*instead*/  void VIntervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) override;

//! Returns    a  surface trimmed in the U direction <br>
//!           equivalent   of  <me>  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>//! If <First> >= <Last> <br>
virtual /*instead*/  OCAdaptor3d_HSurface^ UTrim(Standard_Real First, Standard_Real Last, Standard_Real Tol) override;

//! Returns    a  surface trimmed in the V direction  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>//! If <First> >= <Last> <br>
virtual /*instead*/  OCAdaptor3d_HSurface^ VTrim(Standard_Real First, Standard_Real Last, Standard_Real Tol) override;


virtual /*instead*/  System::Boolean IsUClosed() override;


virtual /*instead*/  System::Boolean IsVClosed() override;


virtual /*instead*/  System::Boolean IsUPeriodic() override;


virtual /*instead*/  Standard_Real UPeriod() override;


virtual /*instead*/  System::Boolean IsVPeriodic() override;


virtual /*instead*/  Standard_Real VPeriod() override;

//! Computes the point of parameters U,V on the surface. <br>
virtual /*instead*/  OCgp_Pnt^ Value(Standard_Real U, Standard_Real V) override;

//! Computes the point of parameters U,V on the surface. <br>
virtual /*instead*/  void D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P) override;

//! Computes the point  and the first derivatives on <br>
//!  the surface. <br>
//! <br>
//!  Warning : On the specific case of BSplineSurface: <br>
//!  if the surface is cut in interval of continuity at least C1, <br>
//!  the derivatives are computed on the current interval. <br>
//!  else the derivatives are computed on the basis surface. <br>
virtual /*instead*/  void D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V) override;

//!  Computes   the point,  the  first  and  second <br>
//!  derivatives on the surface. <br>
//! <br>
//!  Warning : On the specific case of BSplineSurface: <br>
//!  if the surface is cut in interval of continuity at least C2, <br>
//!  the derivatives are computed on the current interval. <br>
//!  else the derivatives are computed on the basis surface. <br>
virtual /*instead*/  void D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV) override;

//! Computes the point,  the first, second and third <br>
//!  derivatives on the surface. <br>
//! <br>
//!  Warning : On the specific case of BSplineSurface: <br>
//!  if the surface is cut in interval of continuity at least C3, <br>
//!  the derivatives are computed on the current interval. <br>
//!  else the derivatives are computed on the basis surface. <br>
virtual /*instead*/  void D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV) override;

//!  Computes the derivative of order Nu in the <br>
//!  direction U and Nv in the direction V at the point P(U, V). <br>
//! <br>
//!  Warning : On the specific case of BSplineSurface: <br>
//!  if the surface is cut in interval of continuity CN, <br>
//!  the derivatives are computed on the current interval. <br>
//!  else the derivatives are computed on the basis surface. <br>//! Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0. <br>
virtual /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv) override;

//!  Returns the parametric U  resolution corresponding <br>
//!         to the real space resolution <R3d>. <br>
virtual /*instead*/  Standard_Real UResolution(Standard_Real R3d) override;

//!  Returns the parametric V  resolution corresponding <br>
//!         to the real space resolution <R3d>. <br>
virtual /*instead*/  Standard_Real VResolution(Standard_Real R3d) override;

//! Returns the type of the surface : Plane, Cylinder, <br>
//!          Cone,      Sphere,        Torus,    BezierSurface, <br>
//!          BSplineSurface,               SurfaceOfRevolution, <br>
//!          SurfaceOfExtrusion, OtherSurface <br>
virtual /*instead*/  OCGeomAbs_SurfaceType GetType() override;


virtual /*instead*/  OCgp_Pln^ Plane() override;


virtual /*instead*/  OCgp_Cylinder^ Cylinder() override;


virtual /*instead*/  OCgp_Cone^ Cone() override;


virtual /*instead*/  OCgp_Sphere^ Sphere() override;


virtual /*instead*/  OCgp_Torus^ Torus() override;


virtual /*instead*/  Standard_Integer UDegree() override;


virtual /*instead*/  Standard_Integer NbUPoles() override;


virtual /*instead*/  Standard_Integer VDegree() override;


virtual /*instead*/  Standard_Integer NbVPoles() override;


virtual /*instead*/  Standard_Integer NbUKnots() override;


virtual /*instead*/  Standard_Integer NbVKnots() override;


virtual /*instead*/  System::Boolean IsURational() override;


virtual /*instead*/  System::Boolean IsVRational() override;

//! This will NOT make a copy of the <br>
//!           Bezier Surface : If you want to modify <br>
//!           the Surface please make a copy yourself <br>
//!           Also it will NOT trim the surface to <br>
//!           myU/VFirst/Last. <br>
virtual /*instead*/  OCGeom_BezierSurface^ Bezier() override;

//!  This will NOT make a copy of the <br>
//!           BSpline Surface : If you want to modify <br>
//!           the Surface please make a copy yourself <br>
//!           Also it will NOT trim the surface to <br>
//!           myU/VFirst/Last. <br>
virtual /*instead*/  OCGeom_BSplineSurface^ BSpline() override;


virtual /*instead*/  OCgp_Ax1^ AxeOfRevolution() override;


virtual /*instead*/  OCgp_Dir^ Direction() override;


virtual /*instead*/  OCAdaptor3d_HCurve^ BasisCurve() override;


virtual /*instead*/  OCAdaptor3d_HSurface^ BasisSurface() override;


virtual /*instead*/  Standard_Real OffsetValue() override;

~OCGeomAdaptor_Surface()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
