// File generated by CPPExt (CPP file)
//

#include "gp_Trsf2d.h"
#include "../Converter.h"
#include "gp_GTrsf2d.h"
#include "gp_Trsf.h"
#include "gp_Pnt2d.h"
#include "gp_Ax2d.h"
#include "gp_Vec2d.h"
#include "gp_XY.h"
#include "gp_Mat2d.h"


using namespace OCNaroWrappers;

OCgp_Trsf2d::OCgp_Trsf2d(gp_Trsf2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Trsf2d::OCgp_Trsf2d() 
{
  nativeHandle = new gp_Trsf2d();
}

OCgp_Trsf2d::OCgp_Trsf2d(OCNaroWrappers::OCgp_Trsf^ T) 
{
  nativeHandle = new gp_Trsf2d(*((gp_Trsf*)T->Handle));
}

 void OCgp_Trsf2d::SetMirror(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Trsf2d*)nativeHandle)->SetMirror(*((gp_Pnt2d*)P->Handle));
}

 void OCgp_Trsf2d::SetMirror(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Trsf2d*)nativeHandle)->SetMirror(*((gp_Ax2d*)A->Handle));
}

 void OCgp_Trsf2d::SetRotation(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  ((gp_Trsf2d*)nativeHandle)->SetRotation(*((gp_Pnt2d*)P->Handle), Ang);
}

 void OCgp_Trsf2d::SetScale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  ((gp_Trsf2d*)nativeHandle)->SetScale(*((gp_Pnt2d*)P->Handle), S);
}

 void OCgp_Trsf2d::SetTransformation(OCNaroWrappers::OCgp_Ax2d^ FromSystem1, OCNaroWrappers::OCgp_Ax2d^ ToSystem2)
{
  ((gp_Trsf2d*)nativeHandle)->SetTransformation(*((gp_Ax2d*)FromSystem1->Handle), *((gp_Ax2d*)ToSystem2->Handle));
}

 void OCgp_Trsf2d::SetTransformation(OCNaroWrappers::OCgp_Ax2d^ ToSystem)
{
  ((gp_Trsf2d*)nativeHandle)->SetTransformation(*((gp_Ax2d*)ToSystem->Handle));
}

 void OCgp_Trsf2d::SetTranslation(OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((gp_Trsf2d*)nativeHandle)->SetTranslation(*((gp_Vec2d*)V->Handle));
}

 void OCgp_Trsf2d::SetTranslation(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  ((gp_Trsf2d*)nativeHandle)->SetTranslation(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

 void OCgp_Trsf2d::SetTranslationPart(OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((gp_Trsf2d*)nativeHandle)->SetTranslationPart(*((gp_Vec2d*)V->Handle));
}

 void OCgp_Trsf2d::SetScaleFactor(Standard_Real S)
{
  ((gp_Trsf2d*)nativeHandle)->SetScaleFactor(S);
}

 System::Boolean OCgp_Trsf2d::IsNegative()
{
  return OCConverter::StandardBooleanToBoolean(((gp_Trsf2d*)nativeHandle)->IsNegative());
}

 OCgp_TrsfForm OCgp_Trsf2d::Form()
{
  return (OCgp_TrsfForm)(((gp_Trsf2d*)nativeHandle)->Form());
}

 Standard_Real OCgp_Trsf2d::ScaleFactor()
{
  return ((gp_Trsf2d*)nativeHandle)->ScaleFactor();
}

OCgp_XY^ OCgp_Trsf2d::TranslationPart()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_Trsf2d*)nativeHandle)->TranslationPart();
  return gcnew OCgp_XY(tmp);
}

OCgp_Mat2d^ OCgp_Trsf2d::VectorialPart()
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Trsf2d*)nativeHandle)->VectorialPart();
  return gcnew OCgp_Mat2d(tmp);
}

OCgp_Mat2d^ OCgp_Trsf2d::HVectorialPart()
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Trsf2d*)nativeHandle)->HVectorialPart();
  return gcnew OCgp_Mat2d(tmp);
}

 Standard_Real OCgp_Trsf2d::RotationPart()
{
  return ((gp_Trsf2d*)nativeHandle)->RotationPart();
}

 Standard_Real OCgp_Trsf2d::Value(Standard_Integer Row, Standard_Integer Col)
{
  return ((gp_Trsf2d*)nativeHandle)->Value(Row, Col);
}

 void OCgp_Trsf2d::Invert()
{
  ((gp_Trsf2d*)nativeHandle)->Invert();
}

OCgp_Trsf2d^ OCgp_Trsf2d::Inverted()
{
  gp_Trsf2d* tmp = new gp_Trsf2d();
  *tmp = ((gp_Trsf2d*)nativeHandle)->Inverted();
  return gcnew OCgp_Trsf2d(tmp);
}

OCgp_Trsf2d^ OCgp_Trsf2d::Multiplied(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  gp_Trsf2d* tmp = new gp_Trsf2d();
  *tmp = ((gp_Trsf2d*)nativeHandle)->Multiplied(*((gp_Trsf2d*)T->Handle));
  return gcnew OCgp_Trsf2d(tmp);
}

 void OCgp_Trsf2d::Multiply(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  ((gp_Trsf2d*)nativeHandle)->Multiply(*((gp_Trsf2d*)T->Handle));
}

 void OCgp_Trsf2d::PreMultiply(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  ((gp_Trsf2d*)nativeHandle)->PreMultiply(*((gp_Trsf2d*)T->Handle));
}

 void OCgp_Trsf2d::Power(Standard_Integer N)
{
  ((gp_Trsf2d*)nativeHandle)->Power(N);
}

OCgp_Trsf2d^ OCgp_Trsf2d::Powered(Standard_Integer N)
{
  gp_Trsf2d* tmp = new gp_Trsf2d();
  *tmp = ((gp_Trsf2d*)nativeHandle)->Powered(N);
  return gcnew OCgp_Trsf2d(tmp);
}

 void OCgp_Trsf2d::Transforms(Standard_Real& X, Standard_Real& Y)
{
  ((gp_Trsf2d*)nativeHandle)->Transforms(X, Y);
}

 void OCgp_Trsf2d::Transforms(OCNaroWrappers::OCgp_XY^ Coord)
{
  ((gp_Trsf2d*)nativeHandle)->Transforms(*((gp_XY*)Coord->Handle));
}


