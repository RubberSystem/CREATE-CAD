// File generated by CPPExt (MPV)
//
#ifndef _gp_Ax3_OCWrappers_HeaderFile
#define _gp_Ax3_OCWrappers_HeaderFile

// include native header
#include <gp_Ax3.hxx>
#include "../Converter.h"


#include "gp_Ax1.h"
#include "gp_Dir.h"
#include "../Standard/Standard_Storable.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2;
ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Ax1;
ref class OCgp_Trsf;
ref class OCgp_Vec;


//! Describes a coordinate system in 3D space. Unlike a <br>
//!  gp_Ax2 coordinate system, a gp_Ax3 can be <br>
//! right-handed ("direct sense") or left-handed ("indirect sense"). <br>
//! A coordinate system is defined by: <br>
//! -   its origin (also referred to as its "Location point"), and <br>
//! -   three orthogonal unit vectors, termed the "X <br>
//!   Direction", the "Y Direction" and the "Direction" (also <br>
//!   referred to as the "main Direction"). <br>
//! The "Direction" of the coordinate system is called its <br>
//! "main Direction" because whenever this unit vector is <br>
//! modified, the "X Direction" and the "Y Direction" are <br>
//! recomputed. However, when we modify either the "X <br>
//! Direction" or the "Y Direction", "Direction" is not modified. <br>
//! "Direction" is also the "Z Direction". <br>
//! The "main Direction" is always parallel to the cross <br>
//! product of its "X Direction" and "Y Direction". <br>
//! If the coordinate system is right-handed, it satisfies the equation: <br>
//! "main Direction" = "X Direction" ^ "Y Direction" <br>
//! and if it is left-handed, it satisfies the equation: <br>
//! "main Direction" = -"X Direction" ^ "Y Direction" <br>
//! A coordinate system is used: <br>
//! -   to describe geometric entities, in particular to position <br>
//!   them. The local coordinate system of a geometric <br>
//!   entity serves the same purpose as the STEP function <br>
//!   "axis placement three axes", or <br>
//! -   to define geometric transformations. <br>
//! Note: <br>
//! -   We refer to the "X Axis", "Y Axis" and "Z Axis", <br>
//!   respectively, as the axes having: <br>
//! -   the origin of the coordinate system as their origin, and <br>
//! -   the unit vectors "X Direction", "Y Direction" and <br>
//!    "main Direction", respectively, as their unit vectors. <br>
//! -   The "Z Axis" is also the "main Axis". <br>
//! -   gp_Ax2 is used to define a coordinate system that must be always right-handed. <br>
public ref class OCgp_Ax3  {

protected:
  gp_Ax3* nativeHandle;
  OCgp_Ax3(OCDummy^) {};

public:
  property gp_Ax3* Handle
  {
    gp_Ax3* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Ax3(gp_Ax3* nativeHandle);

// Methods PUBLIC

//! Creates an object corresponding to the reference <br>
//!            coordinate system (OXYZ). <br>
OCgp_Ax3();

//! Creates  a  coordinate  system from a right-handed <br>
//!          coordinate system. <br>
OCgp_Ax3(OCNaroWrappers::OCgp_Ax2^ A);

//!  Creates a  right handed axis placement with the <br>
//!  "Location"  point  P  and  two  directions, N    gives the <br>
//!  "Direction" and Vx gives the "XDirection". <br>
//!  Raises ConstructionError if N and Vx are parallel (same or opposite orientation). <br>
OCgp_Ax3(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ N, OCNaroWrappers::OCgp_Dir^ Vx);


//!  Creates an axis placement with the  "Location" point <P> <br>
//!  and the normal direction <V>. <br>
OCgp_Ax3(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V);

//! Reverses the X direction of <me>. <br>
 /*instead*/  void XReverse() ;

//! Reverses the Y direction of <me>. <br>
 /*instead*/  void YReverse() ;

//! Reverses the Z direction of <me>. <br>
 /*instead*/  void ZReverse() ;

//! Assigns the origin and "main Direction" of the axis A1 to <br>
//! this coordinate system, then recomputes its "X Direction" and "Y Direction". <br>
//! Note: <br>
//! -   The new "X Direction" is computed as follows: <br>
//! new "X Direction" = V1 ^(previous "X Direction" ^ V) <br>
//! where V is the "Direction" of A1. <br>
//! -   The orientation of this coordinate system <br>
//!   (right-handed or left-handed) is not modified. <br>
//!  Raises ConstructionError  if the "Direction" of <A1> and the "XDirection" of <me> <br>
//!  are parallel (same or opposite orientation) because it is <br>
//!  impossible to calculate the new "XDirection" and the new <br>
//!  "YDirection". <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Changes the main direction of this coordinate system, <br>
//! then recomputes its "X Direction" and "Y Direction". <br>
//! Note: <br>
//! -   The new "X Direction" is computed as follows: <br>
//! new "X Direction" = V ^ (previous "X Direction" ^ V). <br>
//! -   The orientation of this coordinate system (left- or right-handed) is not modified. <br>
//! Raises ConstructionError if <V< and the previous "XDirection" are parallel <br>
//!  because it is impossible to calculate the new "XDirection" <br>
//!  and the new "YDirection". <br>
 /*instead*/  void SetDirection(OCNaroWrappers::OCgp_Dir^ V) ;


//!  Changes the "Location" point (origin) of <me>. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Changes the "Xdirection" of <me>. The main direction <br>
//!  "Direction" is not modified, the "Ydirection" is modified. <br>
//!  If <Vx> is not normal to the main direction then <XDirection> <br>
//!  is computed as follows XDirection = Direction ^ (Vx ^ Direction). <br>
//! Raises ConstructionError if <Vx> is parallel (same or opposite <br>
//! orientation) to the main direction of <me> <br>
 /*instead*/  void SetXDirection(OCNaroWrappers::OCgp_Dir^ Vx) ;


//!  Changes the "Ydirection" of <me>. The main direction is not <br>
//!  modified but the "Xdirection" is changed. <br>
//!  If <Vy> is not normal to the main direction then "YDirection" <br>
//!  is computed as  follows <br>
//!  YDirection = Direction ^ (<Vy> ^ Direction). <br>
//! Raises ConstructionError if <Vy> is parallel to the main direction of <me> <br>
 /*instead*/  void SetYDirection(OCNaroWrappers::OCgp_Dir^ Vy) ;


//!  Computes the angular value between the main direction of <br>
//!  <me> and the main direction of <Other>. Returns the angle <br>
//!  between 0 and PI in radians. <br>
 /*instead*/  Standard_Real Angle(OCNaroWrappers::OCgp_Ax3^ Other) ;


//!  Returns the main axis of <me>. It is the "Location" point <br>
//!  and the main "Direction". <br>
 /*instead*/  OCgp_Ax1^ Axis() ;

//! Computes a right-handed coordinate system with the <br>
//! same "X Direction" and "Y Direction" as those of this <br>
//! coordinate system, then recomputes the "main Direction". <br>
//! If this coordinate system is right-handed, the result <br>
//! returned is the same coordinate system. If this <br>
//! coordinate system is left-handed, the result is reversed. <br>
 /*instead*/  OCgp_Ax2^ Ax2() ;


//!  Returns the main direction of <me>. <br>
 /*instead*/  OCgp_Dir^ Direction() ;


//!  Returns the "Location" point (origin) of <me>. <br>
 /*instead*/  OCgp_Pnt^ Location() ;


//!  Returns the "XDirection" of <me>. <br>
 /*instead*/  OCgp_Dir^ XDirection() ;


//!  Returns the "YDirection" of <me>. <br>
 /*instead*/  OCgp_Dir^ YDirection() ;

//! Returns  True if  the  coordinate  system is right-handed. i.e. <br>
//!          XDirection().Crossed(YDirection()).Dot(Direction()) > 0 <br>
 /*instead*/  System::Boolean Direct() ;


//!  Returns True if <br>
//!  . the distance between the "Location" point of <me> and <br>
//!    <Other> is lower or equal to LinearTolerance and <br>
//!  . the distance between the "Location" point of <Other> and <br>
//!    <me> is lower or equal to LinearTolerance and <br>
//!  . the main direction of <me> and the main direction of <br>
//!    <Other> are parallel (same or opposite orientation). <br>
 /*instead*/  System::Boolean IsCoplanar(OCNaroWrappers::OCgp_Ax3^ Other, Standard_Real LinearTolerance, Standard_Real AngularTolerance) ;

//! Returns True if <br>
//!  . the distance between <me> and the "Location" point of A1 <br>
//!    is lower of equal to LinearTolerance and <br>
//!  . the distance between A1 and the "Location" point of <me> <br>
//!    is lower or equal to LinearTolerance and <br>
//!  . the main direction of <me> and the direction of A1 are normal. <br>
 /*instead*/  System::Boolean IsCoplanar(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real LinearTolerance, Standard_Real AngularTolerance) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of an axis <br>
//!  placement with respect to the point P which is the <br>
//!  center of the symmetry. <br>
//!  Warnings : <br>
//!  The main direction of the axis placement is not changed. <br>
//!  The "XDirection" and the "YDirection" are reversed. <br>
//!  So the axis placement stay right handed. <br>
 /*instead*/  OCgp_Ax3^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Performs the symmetrical transformation of an axis <br>
//!  placement with respect to an axis placement which <br>
//!  is the axis of the symmetry. <br>
//!  The transformation is performed on the "Location" <br>
//!  point, on the "XDirection" and "YDirection". <br>
//!  The resulting main "Direction" is the cross product between <br>
//!  the "XDirection" and the "YDirection" after transformation. <br>
 /*instead*/  OCgp_Ax3^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Performs the symmetrical transformation of an axis <br>
//!  placement with respect to a plane. <br>
//!  The axis placement  <A2> locates the plane of the symmetry : <br>
//!  (Location, XDirection, YDirection). <br>
//!  The transformation is performed on the "Location" <br>
//!  point, on the "XDirection" and "YDirection". <br>
//!  The resulting main "Direction" is the cross product between <br>
//!  the "XDirection" and the "YDirection" after transformation. <br>
 /*instead*/  OCgp_Ax3^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Rotates an axis placement. <A1> is the axis of the <br>
//!  rotation . Ang is the angular value of the rotation <br>
//!  in radians. <br>
 /*instead*/  OCgp_Ax3^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Applies a scaling transformation on the axis placement. <br>
//!  The "Location" point of the axisplacement is modified. <br>
//! Warnings : <br>
//!  If the scale <S> is negative : <br>
//!   . the main direction of the axis placement is not changed. <br>
//!   . The "XDirection" and the "YDirection" are reversed. <br>
//!  So the axis placement stay right handed. <br>
 /*instead*/  OCgp_Ax3^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


//!  Transforms an axis placement with a Trsf. <br>
//!  The "Location" point, the "XDirection" and the <br>
//!  "YDirection" are transformed with T.  The resulting <br>
//!  main "Direction" of <me> is the cross product between <br>
//!  the "XDirection" and the "YDirection" after transformation. <br>
 /*instead*/  OCgp_Ax3^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates an axis plaxement in the direction of the vector <br>
//!  <V>. The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Ax3^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


//!  Translates an axis placement from the point <P1> to the <br>
//!  point <P2>. <br>
 /*instead*/  OCgp_Ax3^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCgp_Ax3()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
