// File generated by CPPExt (MPV)
//
#ifndef _gp_Torus_OCWrappers_HeaderFile
#define _gp_Torus_OCWrappers_HeaderFile

// include native header
#include <gp_Torus.hxx>
#include "../Converter.h"


#include "gp_Ax3.h"
#include "../Standard/Standard_Storable.h"
#include "gp_Ax1.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax3;
ref class OCgp_Ax1;
ref class OCgp_Pnt;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Ax2;
ref class OCgp_Trsf;
ref class OCgp_Vec;



//!  Describes a torus. <br>
//! A torus is defined by its major and minor radii and <br>
//! positioned in space with a coordinate system (a gp_Ax3 <br>
//! object) as follows: <br>
//! -   The origin of the coordinate system is the center of the torus; <br>
//! -   The surface is obtained by rotating a circle of radius <br>
//!   equal to the minor radius of the torus about the "main <br>
//!   Direction" of the coordinate system. This circle is <br>
//!   located in the plane defined by the origin, the "X <br>
//!   Direction" and the "main Direction" of the coordinate <br>
//!   system. It is centered on the "X Axis" of this coordinate <br>
//!   system, and located at a distance, from the origin of <br>
//!   this coordinate system, equal to the major radius of the   torus; <br>
//! -   The "X Direction" and "Y Direction" define the <br>
//!   reference plane of the torus. <br>
//! The coordinate system described above is the "local <br>
//! coordinate system" of the torus. <br>
//! Note: when a gp_Torus torus is converted into a <br>
//! Geom_ToroidalSurface torus, some implicit properties <br>
//! of its local coordinate system are used explicitly: <br>
//! -   its origin, "X Direction", "Y Direction" and "main <br>
//!   Direction" are used directly to define the parametric <br>
//!   directions on the torus and the origin of the parameters, <br>
//! -   its implicit orientation (right-handed or left-handed) <br>
//!   gives the orientation (direct, indirect) to the <br>
//!   Geom_ToroidalSurface torus. <br>
//! See Also <br>
//! gce_MakeTorus which provides functions for more <br>
//! complex torus constructions <br>
//! Geom_ToroidalSurface which provides additional <br>
//! functions for constructing tori and works, in particular, <br>
//! with the parametric equations of tori. <br>
public ref class OCgp_Torus  {

protected:
  gp_Torus* nativeHandle;
  OCgp_Torus(OCDummy^) {};

public:
  property gp_Torus* Handle
  {
    gp_Torus* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Torus(gp_Torus* nativeHandle);

// Methods PUBLIC

//! creates an indefinite Torus. <br>
OCgp_Torus();


//! a torus centered on the origin of coordinate system <br>
//!   A3, with major radius MajorRadius and minor radius <br>
//!   MinorRadius, and with the reference plane defined <br>
//!   by the origin, the "X Direction" and the "Y Direction" of A3. <br>
//!  Warnings : <br>
//!  It is not forbidden to create a torus with <br>
//!  MajorRadius = MinorRadius = 0.0 <br>
//! Raises ConstructionError if MinorRadius < 0.0 or if MajorRadius < 0.0 <br>
OCgp_Torus(OCNaroWrappers::OCgp_Ax3^ A3, Standard_Real MajorRadius, Standard_Real MinorRadius);

//! Modifies this torus, by redefining its local coordinate <br>
//! system so that: <br>
//! -   its origin and "main Direction" become those of the <br>
//! axis A1 (the "X Direction" and "Y Direction" are then recomputed). <br>
//! Raises ConstructionError if the direction of A1 is parallel to the "XDirection" <br>
//!  of the coordinate system of the toroidal surface. <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax1^ A1) ;

//! Changes the location of the torus. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt^ Loc) ;

//! Assigns value to the major radius  of this torus. <br>
//! Raises ConstructionError if MajorRadius - MinorRadius <= Resolution() <br>
 /*instead*/  void SetMajorRadius(Standard_Real MajorRadius) ;

//! Assigns value to the  minor radius of this torus. <br>
//! Raises ConstructionError if MinorRadius < 0.0 or if <br>
//!  MajorRadius - MinorRadius <= Resolution from gp. <br>
 /*instead*/  void SetMinorRadius(Standard_Real MinorRadius) ;

//! Changes the local coordinate system of the surface. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax3^ A3) ;

//! Computes the area of the torus. <br>
 /*instead*/  Standard_Real Area() ;

//! Reverses the   U   parametrization of   the  torus <br>
//!          reversing the YAxis. <br>
 /*instead*/  void UReverse() ;

//! Reverses the   V   parametrization of   the  torus <br>
//!          reversing the ZAxis. <br>
 /*instead*/  void VReverse() ;

//! returns true if the Ax3, the local coordinate system of this torus, is right handed. <br>
 /*instead*/  System::Boolean Direct() ;

//! returns the symmetry axis of the torus. <br>
 /*instead*/  OCgp_Ax1^ Axis() ;


//!  Computes the coefficients of the implicit equation of the surface <br>
//!  in the absolute cartesian coordinate system : <br>
//! Coef(1) * X**4 + Coef(2) * Y**4 + Coef(3) * Z**4 + <br>
//! Coef(4) * X**3 * Y + Coef(5) * X**3 * Z + Coef(6) * Y**3 * X + <br>
//! Coef(7) * Y**3 * Z + Coef(8) * Z**3 * X + Coef(9) * Z**3 * Y + <br>
//! Coef(10) * X**2 * Y**2 + Coef(11) * X**2 * Z**2 + <br>
//! Coef(12) * Y**2 * Z**2 + Coef(13) * X**3 + Coef(14) * Y**3 + <br>
//! Coef(15) * Z**3 + Coef(16) * X**2 * Y + Coef(17) * X**2 * Z + <br>
//! Coef(18) * Y**2 * X + Coef(19) * Y**2 * Z + Coef(20) * Z**2 * X + <br>
//! Coef(21) * Z**2 * Y + Coef(22) * X**2 + Coef(23) * Y**2 + <br>
//! Coef(24) * Z**2 + Coef(25) * X * Y + Coef(26) * X * Z + <br>
//! Coef(27) * Y * Z + Coef(28) * X + Coef(29) * Y + Coef(30) *  Z + <br>
//! Coef(31) = 0.0 <br>
//! Raises DimensionError if the length of Coef is lower than 31. <br>
 /*instead*/  void Coefficients(OCNaroWrappers::OCTColStd_Array1OfReal^ Coef) ;

//! Returns the Torus's location. <br>
 /*instead*/  OCgp_Pnt^ Location() ;

//! Returns the local coordinates system of the torus. <br>
 /*instead*/  OCgp_Ax3^ Position() ;

//! returns the major radius of the torus. <br>
 /*instead*/  Standard_Real MajorRadius() ;

//! returns the minor radius of the torus. <br>
 /*instead*/  Standard_Real MinorRadius() ;

//! Computes the volume of the torus. <br>
 /*instead*/  Standard_Real Volume() ;

//! returns the axis X of the torus. <br>
 /*instead*/  OCgp_Ax1^ XAxis() ;

//! returns the axis Y of the torus. <br>
 /*instead*/  OCgp_Ax1^ YAxis() ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of a torus <br>
//!  with respect to the point P which is the center of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Torus^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Performs the symmetrical transformation of a torus with <br>
//!  respect to an axis placement which is the axis of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Torus^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Performs the symmetrical transformation of a torus with respect <br>
//!  to a plane. The axis placement A2 locates the plane of the <br>
//!  of the symmetry : (Location, XDirection, YDirection). <br>
 /*instead*/  OCgp_Torus^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Rotates a torus. A1 is the axis of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Torus^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Scales a torus. S is the scaling value. <br>
//!  The absolute value of S is used to scale the torus <br>
 /*instead*/  OCgp_Torus^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


//!  Transforms a torus with the transformation T from class Trsf. <br>
 /*instead*/  OCgp_Torus^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates a torus in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Torus^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


//!  Translates a torus from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Torus^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCgp_Torus()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
