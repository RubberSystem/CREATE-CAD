// File generated by CPPExt (CPP file)
//

#include "gp_Parab.h"
#include "../Converter.h"
#include "gp_Ax2.h"
#include "gp_Ax1.h"
#include "gp_Pnt.h"
#include "gp_Trsf.h"
#include "gp_Vec.h"


using namespace OCNaroWrappers;

OCgp_Parab::OCgp_Parab(gp_Parab* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Parab::OCgp_Parab() 
{
  nativeHandle = new gp_Parab();
}

OCgp_Parab::OCgp_Parab(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Focal) 
{
  nativeHandle = new gp_Parab(*((gp_Ax2*)A2->Handle), Focal);
}

OCgp_Parab::OCgp_Parab(OCNaroWrappers::OCgp_Ax1^ D, OCNaroWrappers::OCgp_Pnt^ F) 
{
  nativeHandle = new gp_Parab(*((gp_Ax1*)D->Handle), *((gp_Pnt*)F->Handle));
}

 void OCgp_Parab::SetAxis(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Parab*)nativeHandle)->SetAxis(*((gp_Ax1*)A1->Handle));
}

 void OCgp_Parab::SetFocal(Standard_Real Focal)
{
  ((gp_Parab*)nativeHandle)->SetFocal(Focal);
}

 void OCgp_Parab::SetLocation(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Parab*)nativeHandle)->SetLocation(*((gp_Pnt*)P->Handle));
}

 void OCgp_Parab::SetPosition(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Parab*)nativeHandle)->SetPosition(*((gp_Ax2*)A2->Handle));
}

OCgp_Ax1^ OCgp_Parab::Axis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Parab*)nativeHandle)->Axis();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Ax1^ OCgp_Parab::Directrix()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Parab*)nativeHandle)->Directrix();
  return gcnew OCgp_Ax1(tmp);
}

 Standard_Real OCgp_Parab::Focal()
{
  return ((gp_Parab*)nativeHandle)->Focal();
}

OCgp_Pnt^ OCgp_Parab::Focus()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Parab*)nativeHandle)->Focus();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCgp_Parab::Location()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Parab*)nativeHandle)->Location();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCgp_Parab::Parameter()
{
  return ((gp_Parab*)nativeHandle)->Parameter();
}

OCgp_Ax2^ OCgp_Parab::Position()
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Parab*)nativeHandle)->Position();
  return gcnew OCgp_Ax2(tmp);
}

OCgp_Ax1^ OCgp_Parab::XAxis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Parab*)nativeHandle)->XAxis();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Ax1^ OCgp_Parab::YAxis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Parab*)nativeHandle)->YAxis();
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Parab::Mirror(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Parab*)nativeHandle)->Mirror(*((gp_Pnt*)P->Handle));
}

OCgp_Parab^ OCgp_Parab::Mirrored(OCNaroWrappers::OCgp_Pnt^ P)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((gp_Parab*)nativeHandle)->Mirrored(*((gp_Pnt*)P->Handle));
  return gcnew OCgp_Parab(tmp);
}

 void OCgp_Parab::Mirror(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Parab*)nativeHandle)->Mirror(*((gp_Ax1*)A1->Handle));
}

OCgp_Parab^ OCgp_Parab::Mirrored(OCNaroWrappers::OCgp_Ax1^ A1)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((gp_Parab*)nativeHandle)->Mirrored(*((gp_Ax1*)A1->Handle));
  return gcnew OCgp_Parab(tmp);
}

 void OCgp_Parab::Mirror(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Parab*)nativeHandle)->Mirror(*((gp_Ax2*)A2->Handle));
}

OCgp_Parab^ OCgp_Parab::Mirrored(OCNaroWrappers::OCgp_Ax2^ A2)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((gp_Parab*)nativeHandle)->Mirrored(*((gp_Ax2*)A2->Handle));
  return gcnew OCgp_Parab(tmp);
}

 void OCgp_Parab::Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  ((gp_Parab*)nativeHandle)->Rotate(*((gp_Ax1*)A1->Handle), Ang);
}

OCgp_Parab^ OCgp_Parab::Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((gp_Parab*)nativeHandle)->Rotated(*((gp_Ax1*)A1->Handle), Ang);
  return gcnew OCgp_Parab(tmp);
}

 void OCgp_Parab::Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  ((gp_Parab*)nativeHandle)->Scale(*((gp_Pnt*)P->Handle), S);
}

OCgp_Parab^ OCgp_Parab::Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((gp_Parab*)nativeHandle)->Scaled(*((gp_Pnt*)P->Handle), S);
  return gcnew OCgp_Parab(tmp);
}

 void OCgp_Parab::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  ((gp_Parab*)nativeHandle)->Transform(*((gp_Trsf*)T->Handle));
}

OCgp_Parab^ OCgp_Parab::Transformed(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((gp_Parab*)nativeHandle)->Transformed(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_Parab(tmp);
}

 void OCgp_Parab::Translate(OCNaroWrappers::OCgp_Vec^ V)
{
  ((gp_Parab*)nativeHandle)->Translate(*((gp_Vec*)V->Handle));
}

OCgp_Parab^ OCgp_Parab::Translated(OCNaroWrappers::OCgp_Vec^ V)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((gp_Parab*)nativeHandle)->Translated(*((gp_Vec*)V->Handle));
  return gcnew OCgp_Parab(tmp);
}

 void OCgp_Parab::Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  ((gp_Parab*)nativeHandle)->Translate(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
}

OCgp_Parab^ OCgp_Parab::Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((gp_Parab*)nativeHandle)->Translated(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
  return gcnew OCgp_Parab(tmp);
}


