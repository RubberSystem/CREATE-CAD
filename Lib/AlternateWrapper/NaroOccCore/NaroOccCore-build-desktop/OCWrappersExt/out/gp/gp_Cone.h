// File generated by CPPExt (MPV)
//
#ifndef _gp_Cone_OCWrappers_HeaderFile
#define _gp_Cone_OCWrappers_HeaderFile

// include native header
#include <gp_Cone.hxx>
#include "../Converter.h"


#include "gp_Ax3.h"
#include "../Standard/Standard_Storable.h"
#include "gp_Pnt.h"
#include "gp_Ax1.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax3;
ref class OCgp_Ax1;
ref class OCgp_Pnt;
ref class OCgp_Ax2;
ref class OCgp_Trsf;
ref class OCgp_Vec;



//!  Defines an infinite conical surface. <br>
//! A cone is defined by its half-angle at the apex and <br>
//! positioned in space with a coordinate system (a gp_Ax3 <br>
//! object) and a "reference radius" where: <br>
//! -   the "main Axis" of the coordinate system is the axis of   revolution of the cone, <br>
//! -   the plane defined by the origin, the "X Direction" and <br>
//!   the "Y Direction" of the coordinate system is the <br>
//!   reference plane of the cone; the intersection of the <br>
//!   cone with this reference plane is a circle of radius <br>
//!   equal to the reference radius, <br>
//!   if the half-angle is positive, the apex of the cone is on <br>
//!   the negative side of the "main Axis" of the coordinate <br>
//!   system. If the half-angle is negative, the apex is on the   positive side. <br>
//!   This coordinate system is the "local coordinate system" of the cone. <br>
//! Note: when a gp_Cone cone is converted into a <br>
//! Geom_ConicalSurface cone, some implicit properties of <br>
//! its local coordinate system are used explicitly: <br>
//! -   its origin, "X Direction", "Y Direction" and "main <br>
//!   Direction" are used directly to define the parametric <br>
//! directions on the cone and the origin of the parameters, <br>
//! -   its implicit orientation (right-handed or left-handed) <br>
//!   gives the orientation (direct or indirect) of the <br>
//!   Geom_ConicalSurface cone. <br>
//! See Also <br>
//! gce_MakeCone which provides functions for more <br>
//! complex cone constructions <br>
//! Geom_ConicalSurface which provides additional <br>
//! functions for constructing cones and works, in particular, <br>
//! with the parametric equations of cones gp_Ax3 <br>
public ref class OCgp_Cone  {

protected:
  gp_Cone* nativeHandle;
  OCgp_Cone(OCDummy^) {};

public:
  property gp_Cone* Handle
  {
    gp_Cone* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Cone(gp_Cone* nativeHandle);

// Methods PUBLIC

//! Creates an indefinite Cone. <br>
OCgp_Cone();


//!  Creates an infinite conical surface. A3 locates the cone <br>
//!  in the space and defines the reference plane of the surface. <br>
//!  Ang is the conical surface semi-angle between 0 and PI/2 radians. <br>
//!  Radius is the radius of the circle in the reference plane of <br>
//!  the cone. <br>
//! Raises ConstructionError <br>
//!  . if Radius is lower than 0.0 <br>
//!  . Ang < Resolution from gp  or Ang >= (PI/2) - Resolution. <br>
OCgp_Cone(OCNaroWrappers::OCgp_Ax3^ A3, Standard_Real Ang, Standard_Real Radius);

//!  Changes the symmetry axis of the cone.  Raises ConstructionError <br>
//!  the direction of A1 is parallel to the "XDirection" <br>
//!  of the coordinate system of the cone. <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax1^ A1) ;

//! Changes the location of the cone. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt^ Loc) ;


//!  Changes the local coordinate system of the cone. <br>
//!  This coordinate system defines the reference plane of the cone. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax3^ A3) ;


//!  Changes the radius of the cone in the reference plane of <br>
//!  the cone. <br>//! Raised if R < 0.0 <br>
 /*instead*/  void SetRadius(Standard_Real R) ;


//!  Changes the semi-angle of the cone. <br>
//!  Ang is the conical surface semi-angle  ]0,PI/2[. <br>
//!    Raises ConstructionError if Ang < Resolution from gp or Ang >= PI/2 - Resolution <br>
 /*instead*/  void SetSemiAngle(Standard_Real Ang) ;


//!  Computes the cone's top. The Apex of the cone is on the <br>
//!  negative side of the symmetry axis of the cone. <br>
 /*instead*/  OCgp_Pnt^ Apex() ;

//! Reverses the   U   parametrization of   the  cone <br>
//!          reversing the YAxis. <br>
 /*instead*/  void UReverse() ;

//! Reverses the   V   parametrization of   the  cone  reversing the ZAxis. <br>
 /*instead*/  void VReverse() ;

//! Returns true if the local coordinate system of this cone is right-handed. <br>
 /*instead*/  System::Boolean Direct() ;

//! returns the symmetry axis of the cone. <br>
 /*instead*/  OCgp_Ax1^ Axis() ;


//!  Computes the coefficients of the implicit equation of the quadric <br>
//!  in the absolute cartesian coordinates system : <br>
//! A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + <br>
//! 2.(C1.X + C2.Y + C3.Z) + D = 0.0 <br>
 /*instead*/  void Coefficients(Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D) ;

//! returns the "Location" point of the cone. <br>
 /*instead*/  OCgp_Pnt^ Location() ;


//!  Returns the local coordinates system of the cone. <br>
 /*instead*/  OCgp_Ax3^ Position() ;


//!  Returns the radius of the cone in the reference plane. <br>
 /*instead*/  Standard_Real RefRadius() ;

//! Returns the half-angle at the apex of this cone. <br>
 /*instead*/  Standard_Real SemiAngle() ;

//! Returns the XAxis of the reference plane. <br>
 /*instead*/  OCgp_Ax1^ XAxis() ;

//! Returns the YAxis of the reference plane. <br>
 /*instead*/  OCgp_Ax1^ YAxis() ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of a cone <br>
//!  with respect to the point P which is the center of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Cone^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Performs the symmetrical transformation of a cone with <br>
//!  respect to an axis placement which is the axis of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Cone^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Performs the symmetrical transformation of a cone with respect <br>
//!  to a plane. The axis placement A2 locates the plane of the <br>
//!  of the symmetry : (Location, XDirection, YDirection). <br>
 /*instead*/  OCgp_Cone^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Rotates a cone. A1 is the axis of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Cone^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Scales a cone. S is the scaling value. <br>
//!  The absolute value of S is used to scale the cone <br>
 /*instead*/  OCgp_Cone^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


//!  Transforms a cone with the transformation T from class Trsf. <br>
 /*instead*/  OCgp_Cone^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates a cone in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Cone^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


//!  Translates a cone from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Cone^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCgp_Cone()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
