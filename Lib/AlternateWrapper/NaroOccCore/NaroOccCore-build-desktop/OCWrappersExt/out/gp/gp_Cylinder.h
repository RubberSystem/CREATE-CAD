// File generated by CPPExt (MPV)
//
#ifndef _gp_Cylinder_OCWrappers_HeaderFile
#define _gp_Cylinder_OCWrappers_HeaderFile

// include native header
#include <gp_Cylinder.hxx>
#include "../Converter.h"


#include "gp_Ax3.h"
#include "../Standard/Standard_Storable.h"
#include "gp_Ax1.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax3;
ref class OCgp_Ax1;
ref class OCgp_Pnt;
ref class OCgp_Ax2;
ref class OCgp_Trsf;
ref class OCgp_Vec;



//!  Describes an infinite cylindrical surface. <br>
//! A cylinder is defined by its radius and positioned in space <br>
//! with a coordinate system (a gp_Ax3 object), the "main <br>
//! Axis" of which is the axis of the cylinder. This coordinate <br>
//! system is the "local coordinate system" of the cylinder. <br>
//! Note: when a gp_Cylinder cylinder is converted into a <br>
//! Geom_CylindricalSurface cylinder, some implicit <br>
//! properties of its local coordinate system are used explicitly: <br>
//! -   its origin, "X Direction", "Y Direction" and "main <br>
//! Direction" are used directly to define the parametric <br>
//! directions on the cylinder and the origin of the parameters, <br>
//! -   its implicit orientation (right-handed or left-handed) <br>
//!   gives an orientation (direct or indirect) to the <br>
//!   Geom_CylindricalSurface cylinder. <br>
//! See Also <br>
//! gce_MakeCylinder which provides functions for more <br>
//! complex cylinder constructions <br>
//! Geom_CylindricalSurface which provides additional <br>
//! functions for constructing cylinders and works, in <br>
//! particular, with the parametric equations of cylinders gp_Ax3 <br>
public ref class OCgp_Cylinder  {

protected:
  gp_Cylinder* nativeHandle;
  OCgp_Cylinder(OCDummy^) {};

public:
  property gp_Cylinder* Handle
  {
    gp_Cylinder* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Cylinder(gp_Cylinder* nativeHandle);

// Methods PUBLIC

//! Creates a indefinite cylinder. <br>
OCgp_Cylinder();

//! Creates a cylinder of radius Radius, whose axis is the "main <br>
//!  Axis" of A3. A3 is the local coordinate system of the cylinder.   Raises ConstructionErrord if R < 0.0 <br>
OCgp_Cylinder(OCNaroWrappers::OCgp_Ax3^ A3, Standard_Real Radius);

//! Changes the symmetry axis of the cylinder. Raises ConstructionError if the direction of A1 is parallel to the "XDirection" <br>
//!  of the coordinate system of the cylinder. <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax1^ A1) ;

//! Changes the location of the surface. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt^ Loc) ;

//! Change the local coordinate system of the surface. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax3^ A3) ;

//! Modifies the radius of this cylinder. <br>
//! Exceptions <br>
//! Standard_ConstructionError if R is negative. <br>
 /*instead*/  void SetRadius(Standard_Real R) ;

//! Reverses the   U   parametrization of   the cylinder <br>
//!          reversing the YAxis. <br>
 /*instead*/  void UReverse() ;

//! Reverses the   V   parametrization of   the  plane <br>
//!          reversing the Axis. <br>
 /*instead*/  void VReverse() ;

//! Returns true if the local coordinate system of this cylinder is right-handed. <br>
 /*instead*/  System::Boolean Direct() ;

//! Returns the symmetry axis of the cylinder. <br>
 /*instead*/  OCgp_Ax1^ Axis() ;


//!  Computes the coefficients of the implicit equation of the quadric <br>
//!  in the absolute cartesian coordinate system : <br>
//!  A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + <br>
//!  2.(C1.X + C2.Y + C3.Z) + D = 0.0 <br>
 /*instead*/  void Coefficients(Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D) ;

//!  Returns the "Location" point of the cylinder. <br>
 /*instead*/  OCgp_Pnt^ Location() ;


//!  Returns the local coordinate system of the cylinder. <br>
 /*instead*/  OCgp_Ax3^ Position() ;

//! Returns the radius of the cylinder. <br>
 /*instead*/  Standard_Real Radius() ;

//! Returns the axis X of the cylinder. <br>
 /*instead*/  OCgp_Ax1^ XAxis() ;

//! Returns the axis Y of the cylinder. <br>
 /*instead*/  OCgp_Ax1^ YAxis() ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of a cylinder <br>
//!  with respect to the point P which is the center of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Cylinder^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Performs the symmetrical transformation of a cylinder with <br>
//!  respect to an axis placement which is the axis of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Cylinder^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Performs the symmetrical transformation of a cylinder with respect <br>
//!  to a plane. The axis placement A2 locates the plane of the <br>
//!  of the symmetry : (Location, XDirection, YDirection). <br>
 /*instead*/  OCgp_Cylinder^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Rotates a cylinder. A1 is the axis of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Cylinder^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Scales a cylinder. S is the scaling value. <br>
//!  The absolute value of S is used to scale the cylinder <br>
 /*instead*/  OCgp_Cylinder^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


//!  Transforms a cylinder with the transformation T from class Trsf. <br>
 /*instead*/  OCgp_Cylinder^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates a cylinder in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Cylinder^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


//!  Translates a cylinder from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Cylinder^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCgp_Cylinder()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
