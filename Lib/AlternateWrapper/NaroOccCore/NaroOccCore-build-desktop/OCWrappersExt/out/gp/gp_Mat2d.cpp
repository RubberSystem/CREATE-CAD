// File generated by CPPExt (CPP file)
//

#include "gp_Mat2d.h"
#include "../Converter.h"
#include "gp_Trsf2d.h"
#include "gp_GTrsf2d.h"
#include "gp_XY.h"


using namespace OCNaroWrappers;

OCgp_Mat2d::OCgp_Mat2d(gp_Mat2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Mat2d::OCgp_Mat2d() 
{
  nativeHandle = new gp_Mat2d();
}

OCgp_Mat2d::OCgp_Mat2d(OCNaroWrappers::OCgp_XY^ Col1, OCNaroWrappers::OCgp_XY^ Col2) 
{
  nativeHandle = new gp_Mat2d(*((gp_XY*)Col1->Handle), *((gp_XY*)Col2->Handle));
}

 void OCgp_Mat2d::SetCol(Standard_Integer Col, OCNaroWrappers::OCgp_XY^ Value)
{
  ((gp_Mat2d*)nativeHandle)->SetCol(Col, *((gp_XY*)Value->Handle));
}

 void OCgp_Mat2d::SetCols(OCNaroWrappers::OCgp_XY^ Col1, OCNaroWrappers::OCgp_XY^ Col2)
{
  ((gp_Mat2d*)nativeHandle)->SetCols(*((gp_XY*)Col1->Handle), *((gp_XY*)Col2->Handle));
}

 void OCgp_Mat2d::SetDiagonal(Standard_Real X1, Standard_Real X2)
{
  ((gp_Mat2d*)nativeHandle)->SetDiagonal(X1, X2);
}

 void OCgp_Mat2d::SetIdentity()
{
  ((gp_Mat2d*)nativeHandle)->SetIdentity();
}

 void OCgp_Mat2d::SetRotation(Standard_Real Ang)
{
  ((gp_Mat2d*)nativeHandle)->SetRotation(Ang);
}

 void OCgp_Mat2d::SetRow(Standard_Integer Row, OCNaroWrappers::OCgp_XY^ Value)
{
  ((gp_Mat2d*)nativeHandle)->SetRow(Row, *((gp_XY*)Value->Handle));
}

 void OCgp_Mat2d::SetRows(OCNaroWrappers::OCgp_XY^ Row1, OCNaroWrappers::OCgp_XY^ Row2)
{
  ((gp_Mat2d*)nativeHandle)->SetRows(*((gp_XY*)Row1->Handle), *((gp_XY*)Row2->Handle));
}

 void OCgp_Mat2d::SetScale(Standard_Real S)
{
  ((gp_Mat2d*)nativeHandle)->SetScale(S);
}

 void OCgp_Mat2d::SetValue(Standard_Integer Row, Standard_Integer Col, Standard_Real Value)
{
  ((gp_Mat2d*)nativeHandle)->SetValue(Row, Col, Value);
}

OCgp_XY^ OCgp_Mat2d::Column(Standard_Integer Col)
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_Mat2d*)nativeHandle)->Column(Col);
  return gcnew OCgp_XY(tmp);
}

 Standard_Real OCgp_Mat2d::Determinant()
{
  return ((gp_Mat2d*)nativeHandle)->Determinant();
}

OCgp_XY^ OCgp_Mat2d::Diagonal()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_Mat2d*)nativeHandle)->Diagonal();
  return gcnew OCgp_XY(tmp);
}

OCgp_XY^ OCgp_Mat2d::Row(Standard_Integer Row)
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_Mat2d*)nativeHandle)->Row(Row);
  return gcnew OCgp_XY(tmp);
}

 Standard_Real OCgp_Mat2d::Value(Standard_Integer Row, Standard_Integer Col)
{
  return ((gp_Mat2d*)nativeHandle)->Value(Row, Col);
}

 Standard_Real OCgp_Mat2d::ChangeValue(Standard_Integer Row, Standard_Integer Col)
{
  return ((gp_Mat2d*)nativeHandle)->ChangeValue(Row, Col);
}

 System::Boolean OCgp_Mat2d::IsSingular()
{
  return OCConverter::StandardBooleanToBoolean(((gp_Mat2d*)nativeHandle)->IsSingular());
}

 void OCgp_Mat2d::Add(OCNaroWrappers::OCgp_Mat2d^ Other)
{
  ((gp_Mat2d*)nativeHandle)->Add(*((gp_Mat2d*)Other->Handle));
}

OCgp_Mat2d^ OCgp_Mat2d::Added(OCNaroWrappers::OCgp_Mat2d^ Other)
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Mat2d*)nativeHandle)->Added(*((gp_Mat2d*)Other->Handle));
  return gcnew OCgp_Mat2d(tmp);
}

 void OCgp_Mat2d::Divide(Standard_Real Scalar)
{
  ((gp_Mat2d*)nativeHandle)->Divide(Scalar);
}

OCgp_Mat2d^ OCgp_Mat2d::Divided(Standard_Real Scalar)
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Mat2d*)nativeHandle)->Divided(Scalar);
  return gcnew OCgp_Mat2d(tmp);
}

 void OCgp_Mat2d::Invert()
{
  ((gp_Mat2d*)nativeHandle)->Invert();
}

OCgp_Mat2d^ OCgp_Mat2d::Inverted()
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Mat2d*)nativeHandle)->Inverted();
  return gcnew OCgp_Mat2d(tmp);
}

OCgp_Mat2d^ OCgp_Mat2d::Multiplied(OCNaroWrappers::OCgp_Mat2d^ Other)
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Mat2d*)nativeHandle)->Multiplied(*((gp_Mat2d*)Other->Handle));
  return gcnew OCgp_Mat2d(tmp);
}

 void OCgp_Mat2d::Multiply(OCNaroWrappers::OCgp_Mat2d^ Other)
{
  ((gp_Mat2d*)nativeHandle)->Multiply(*((gp_Mat2d*)Other->Handle));
}

 void OCgp_Mat2d::PreMultiply(OCNaroWrappers::OCgp_Mat2d^ Other)
{
  ((gp_Mat2d*)nativeHandle)->PreMultiply(*((gp_Mat2d*)Other->Handle));
}

OCgp_Mat2d^ OCgp_Mat2d::Multiplied(Standard_Real Scalar)
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Mat2d*)nativeHandle)->Multiplied(Scalar);
  return gcnew OCgp_Mat2d(tmp);
}

 void OCgp_Mat2d::Multiply(Standard_Real Scalar)
{
  ((gp_Mat2d*)nativeHandle)->Multiply(Scalar);
}

 void OCgp_Mat2d::Power(Standard_Integer N)
{
  ((gp_Mat2d*)nativeHandle)->Power(N);
}

OCgp_Mat2d^ OCgp_Mat2d::Powered(Standard_Integer N)
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Mat2d*)nativeHandle)->Powered(N);
  return gcnew OCgp_Mat2d(tmp);
}

 void OCgp_Mat2d::Subtract(OCNaroWrappers::OCgp_Mat2d^ Other)
{
  ((gp_Mat2d*)nativeHandle)->Subtract(*((gp_Mat2d*)Other->Handle));
}

OCgp_Mat2d^ OCgp_Mat2d::Subtracted(OCNaroWrappers::OCgp_Mat2d^ Other)
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Mat2d*)nativeHandle)->Subtracted(*((gp_Mat2d*)Other->Handle));
  return gcnew OCgp_Mat2d(tmp);
}

 void OCgp_Mat2d::Transpose()
{
  ((gp_Mat2d*)nativeHandle)->Transpose();
}

OCgp_Mat2d^ OCgp_Mat2d::Transposed()
{
  gp_Mat2d* tmp = new gp_Mat2d();
  *tmp = ((gp_Mat2d*)nativeHandle)->Transposed();
  return gcnew OCgp_Mat2d(tmp);
}


