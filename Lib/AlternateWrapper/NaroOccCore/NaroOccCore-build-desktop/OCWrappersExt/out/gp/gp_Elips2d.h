// File generated by CPPExt (MPV)
//
#ifndef _gp_Elips2d_OCWrappers_HeaderFile
#define _gp_Elips2d_OCWrappers_HeaderFile

// include native header
#include <gp_Elips2d.hxx>
#include "../Converter.h"


#include "gp_Ax22d.h"
#include "../Standard/Standard_Storable.h"
#include "gp_Ax2d.h"
#include "gp_Pnt2d.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2d;
ref class OCgp_Ax22d;
ref class OCgp_Pnt2d;
ref class OCgp_Trsf2d;
ref class OCgp_Vec2d;



//! Describes an ellipse in the plane (2D space). <br>
//! An ellipse is defined by its major and minor radii and <br>
//! positioned in the plane with a coordinate system (a <br>
//! gp_Ax22d object) as follows: <br>
//! -   the origin of the coordinate system is the center of the ellipse, <br>
//! -   its "X Direction" defines the major axis of the ellipse, and <br>
//! -   its "Y Direction" defines the minor axis of the ellipse. <br>
//! This coordinate system is the "local coordinate system" <br>
//! of the ellipse. Its orientation (direct or indirect) gives an <br>
//! implicit orientation to the ellipse. In this coordinate <br>
//! system, the equation of the ellipse is: <br>
//! X*X / (MajorRadius**2) + Y*Y / (MinorRadius**2) = 1.0 <br>
//! See Also <br>
//! gce_MakeElips2d which provides functions for more <br>
//! complex ellipse constructions <br>
//! Geom2d_Ellipse which provides additional functions for <br>
//! constructing ellipses and works, in particular, with the <br>
//! parametric equations of ellipses <br>
public ref class OCgp_Elips2d  {

protected:
  gp_Elips2d* nativeHandle;
  OCgp_Elips2d(OCDummy^) {};

public:
  property gp_Elips2d* Handle
  {
    gp_Elips2d* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Elips2d(gp_Elips2d* nativeHandle);

// Methods PUBLIC

//! Creates an indefinite ellipse. <br>
OCgp_Elips2d();


//!  Creates an ellipse with the major axis, the major and the <br>
//!  minor radius. The location of the MajorAxis is the center <br>
//!  of the  ellipse. <br>
//!  The sense of parametrization is given by Sense. <br>
//!  Warnings : <br>
//!  It is possible to create an ellipse with <br>
//!  MajorRadius = MinorRadius. <br>
//!  Raises ConstructionError if MajorRadius < MinorRadius or MinorRadius < 0.0 <br>
OCgp_Elips2d(OCNaroWrappers::OCgp_Ax2d^ MajorAxis, Standard_Real MajorRadius, Standard_Real MinorRadius, System::Boolean Sense);

//!  Creates an ellipse with radii MajorRadius and <br>
//!   MinorRadius, positioned in the plane by coordinate system A where: <br>
//!   -   the origin of A is the center of the ellipse, <br>
//!   -   the "X Direction" of A defines the major axis of <br>
//!    the ellipse, that is, the major radius MajorRadius <br>
//!    is measured along this axis, and <br>
//!   -   the "Y Direction" of A defines the minor axis of <br>
//!    the ellipse, that is, the minor radius MinorRadius <br>
//!    is measured along this axis, and <br>
//!   -   the orientation (direct or indirect sense) of A <br>
//!    gives the orientation of the ellipse. <br>
//!  Warnings : <br>
//!  It is possible to create an ellipse with <br>
//!  MajorRadius = MinorRadius. <br>
//! Raises ConstructionError if MajorRadius < MinorRadius or MinorRadius < 0.0 <br>
OCgp_Elips2d(OCNaroWrappers::OCgp_Ax22d^ A, Standard_Real MajorRadius, Standard_Real MinorRadius);

//! Modifies this ellipse, by redefining its local coordinate system so that <br>
//! -   its origin becomes P. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Changes the value of the major radius. <br>
//! Raises ConstructionError if MajorRadius < MinorRadius. <br>
 /*instead*/  void SetMajorRadius(Standard_Real MajorRadius) ;

//! Changes the value of the minor radius. <br>
//! Raises ConstructionError if MajorRadius < MinorRadius or MinorRadius < 0.0 <br>
 /*instead*/  void SetMinorRadius(Standard_Real MinorRadius) ;

//! Modifies this ellipse, by redefining its local coordinate system so that <br>
//!    it becomes A. <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax22d^ A) ;

//! Modifies this ellipse, by redefining its local coordinate system so that <br>
//!   its origin and its "X Direction"  become those <br>
//! of the axis A. The "Y  Direction"  is then <br>
//!   recomputed. The orientation of the local coordinate <br>
//!   system is not modified. <br>
 /*instead*/  void SetXAxis(OCNaroWrappers::OCgp_Ax2d^ A) ;

//! Modifies this ellipse, by redefining its local coordinate system so that <br>
//!   its origin and its "Y Direction"  become those <br>
//! of the axis A. The "X  Direction"  is then <br>
//!   recomputed. The orientation of the local coordinate <br>
//!   system is not modified. <br>
 /*instead*/  void SetYAxis(OCNaroWrappers::OCgp_Ax2d^ A) ;

//! Computes the area of the ellipse. <br>
 /*instead*/  Standard_Real Area() ;


//!  Returns the coefficients of the implicit equation of the ellipse. <br>
//!  A * (X**2) + B * (Y**2) + 2*C*(X*Y) + 2*D*X + 2*E*Y + F = 0. <br>
 /*instead*/  void Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& D, Standard_Real& E, Standard_Real& F) ;


//!  This directrix is the line normal to the XAxis of the ellipse <br>
//!  in the local plane (Z = 0) at a distance d = MajorRadius / e <br>
//!  from the center of the ellipse, where e is the eccentricity of <br>
//!  the ellipse. <br>
//!  This line is parallel to the "YAxis". The intersection point <br>
//!  between directrix1 and the "XAxis" is the location point of the <br>
//!  directrix1. This point is on the positive side of the "XAxis". <br>
//!  Raised if Eccentricity = 0.0. (The ellipse degenerates into a <br>
//!  circle) <br>
 /*instead*/  OCgp_Ax2d^ Directrix1() ;


//!  This line is obtained by the symmetrical transformation <br>
//!  of "Directrix1" with respect to the minor axis of the ellipse. <br>
//!  Raised if Eccentricity = 0.0. (The ellipse degenerates into a <br>
//!  circle). <br>
 /*instead*/  OCgp_Ax2d^ Directrix2() ;


//!  Returns the eccentricity of the ellipse  between 0.0 and 1.0 <br>
//!  If f is the distance between the center of the ellipse and <br>
//!  the Focus1 then the eccentricity e = f / MajorRadius. <br>
//!  Returns 0 if MajorRadius = 0. <br>
 /*instead*/  Standard_Real Eccentricity() ;


//!  Returns the distance between the center of the ellipse <br>
//!  and focus1 or focus2. <br>
 /*instead*/  Standard_Real Focal() ;


//!  Returns the first focus of the ellipse. This focus is on the <br>
//!  positive side of the major axis of the ellipse. <br>
 /*instead*/  OCgp_Pnt2d^ Focus1() ;


//!  Returns the second focus of the ellipse. This focus is on the <br>
//!  negative side of the major axis of the ellipse. <br>
 /*instead*/  OCgp_Pnt2d^ Focus2() ;

//! Returns the center of the ellipse. <br>
 /*instead*/  OCgp_Pnt2d^ Location() ;

//! Returns the major radius of the Ellipse. <br>
 /*instead*/  Standard_Real MajorRadius() ;

//! Returns the minor radius of the Ellipse. <br>
 /*instead*/  Standard_Real MinorRadius() ;


//!  Returns p = (1 - e * e) * MajorRadius where e is the eccentricity <br>
//!  of the ellipse. <br>
//!  Returns 0 if MajorRadius = 0 <br>
 /*instead*/  Standard_Real Parameter() ;

//! Returns the major axis of the ellipse. <br>
 /*instead*/  OCgp_Ax22d^ Axis() ;

//! Returns the major axis of the ellipse. <br>
 /*instead*/  OCgp_Ax2d^ XAxis() ;

//! Returns the minor axis of the ellipse. <br>//! Reverses the direction of the circle. <br>
 /*instead*/  OCgp_Ax2d^ YAxis() ;


 /*instead*/  void Reverse() ;


 /*instead*/  OCgp_Elips2d^ Reversed() ;

//! Returns true if the local coordinate system is direct <br>
//!            and false in the other case. <br>
 /*instead*/  System::Boolean IsDirect() ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt2d^ P) ;


//!  Performs the symmetrical transformation of a ellipse with respect <br>
//!  to the point P which is the center of the symmetry <br>
 /*instead*/  OCgp_Elips2d^ Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2d^ A) ;


//!  Performs the symmetrical transformation of a ellipse with respect <br>
//!  to an axis placement which is the axis of the symmetry. <br>
 /*instead*/  OCgp_Elips2d^ Mirrored(OCNaroWrappers::OCgp_Ax2d^ A) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang) ;


 /*instead*/  OCgp_Elips2d^ Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S) ;


//!  Scales a ellipse. S is the scaling value. <br>
 /*instead*/  OCgp_Elips2d^ Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;


//!  Transforms an ellipse with the transformation T from class Trsf2d. <br>
 /*instead*/  OCgp_Elips2d^ Transformed(OCNaroWrappers::OCgp_Trsf2d^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec2d^ V) ;


//!  Translates a ellipse in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Elips2d^ Translated(OCNaroWrappers::OCgp_Vec2d^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;


//!  Translates a ellipse from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Elips2d^ Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;

~OCgp_Elips2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
