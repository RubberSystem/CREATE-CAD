// File generated by CPPExt (CPP file)
//

#include "gp_Hypr2d.h"
#include "../Converter.h"
#include "gp_Ax2d.h"
#include "gp_Ax22d.h"
#include "gp_Pnt2d.h"
#include "gp_Trsf2d.h"
#include "gp_Vec2d.h"


using namespace OCNaroWrappers;

OCgp_Hypr2d::OCgp_Hypr2d(gp_Hypr2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Hypr2d::OCgp_Hypr2d() 
{
  nativeHandle = new gp_Hypr2d();
}

OCgp_Hypr2d::OCgp_Hypr2d(OCNaroWrappers::OCgp_Ax2d^ MajorAxis, Standard_Real MajorRadius, Standard_Real MinorRadius, System::Boolean Sense) 
{
  nativeHandle = new gp_Hypr2d(*((gp_Ax2d*)MajorAxis->Handle), MajorRadius, MinorRadius, OCConverter::BooleanToStandardBoolean(Sense));
}

OCgp_Hypr2d::OCgp_Hypr2d(OCNaroWrappers::OCgp_Ax22d^ A, Standard_Real MajorRadius, Standard_Real MinorRadius) 
{
  nativeHandle = new gp_Hypr2d(*((gp_Ax22d*)A->Handle), MajorRadius, MinorRadius);
}

 void OCgp_Hypr2d::SetLocation(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Hypr2d*)nativeHandle)->SetLocation(*((gp_Pnt2d*)P->Handle));
}

 void OCgp_Hypr2d::SetMajorRadius(Standard_Real MajorRadius)
{
  ((gp_Hypr2d*)nativeHandle)->SetMajorRadius(MajorRadius);
}

 void OCgp_Hypr2d::SetMinorRadius(Standard_Real MinorRadius)
{
  ((gp_Hypr2d*)nativeHandle)->SetMinorRadius(MinorRadius);
}

 void OCgp_Hypr2d::SetAxis(OCNaroWrappers::OCgp_Ax22d^ A)
{
  ((gp_Hypr2d*)nativeHandle)->SetAxis(*((gp_Ax22d*)A->Handle));
}

 void OCgp_Hypr2d::SetXAxis(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Hypr2d*)nativeHandle)->SetXAxis(*((gp_Ax2d*)A->Handle));
}

 void OCgp_Hypr2d::SetYAxis(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Hypr2d*)nativeHandle)->SetYAxis(*((gp_Ax2d*)A->Handle));
}

OCgp_Ax2d^ OCgp_Hypr2d::Asymptote1()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Asymptote1();
  return gcnew OCgp_Ax2d(tmp);
}

OCgp_Ax2d^ OCgp_Hypr2d::Asymptote2()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Asymptote2();
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Hypr2d::Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& D, Standard_Real& E, Standard_Real& F)
{
  ((gp_Hypr2d*)nativeHandle)->Coefficients(A, B, C, D, E, F);
}

OCgp_Hypr2d^ OCgp_Hypr2d::ConjugateBranch1()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->ConjugateBranch1();
  return gcnew OCgp_Hypr2d(tmp);
}

OCgp_Hypr2d^ OCgp_Hypr2d::ConjugateBranch2()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->ConjugateBranch2();
  return gcnew OCgp_Hypr2d(tmp);
}

OCgp_Ax2d^ OCgp_Hypr2d::Directrix1()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Directrix1();
  return gcnew OCgp_Ax2d(tmp);
}

OCgp_Ax2d^ OCgp_Hypr2d::Directrix2()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Directrix2();
  return gcnew OCgp_Ax2d(tmp);
}

 Standard_Real OCgp_Hypr2d::Eccentricity()
{
  return ((gp_Hypr2d*)nativeHandle)->Eccentricity();
}

 Standard_Real OCgp_Hypr2d::Focal()
{
  return ((gp_Hypr2d*)nativeHandle)->Focal();
}

OCgp_Pnt2d^ OCgp_Hypr2d::Focus1()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Focus1();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Pnt2d^ OCgp_Hypr2d::Focus2()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Focus2();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Pnt2d^ OCgp_Hypr2d::Location()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Location();
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Real OCgp_Hypr2d::MajorRadius()
{
  return ((gp_Hypr2d*)nativeHandle)->MajorRadius();
}

 Standard_Real OCgp_Hypr2d::MinorRadius()
{
  return ((gp_Hypr2d*)nativeHandle)->MinorRadius();
}

OCgp_Hypr2d^ OCgp_Hypr2d::OtherBranch()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->OtherBranch();
  return gcnew OCgp_Hypr2d(tmp);
}

 Standard_Real OCgp_Hypr2d::Parameter()
{
  return ((gp_Hypr2d*)nativeHandle)->Parameter();
}

OCgp_Ax22d^ OCgp_Hypr2d::Axis()
{
  gp_Ax22d* tmp = new gp_Ax22d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Axis();
  return gcnew OCgp_Ax22d(tmp);
}

OCgp_Ax2d^ OCgp_Hypr2d::XAxis()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->XAxis();
  return gcnew OCgp_Ax2d(tmp);
}

OCgp_Ax2d^ OCgp_Hypr2d::YAxis()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->YAxis();
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Hypr2d::Reverse()
{
  ((gp_Hypr2d*)nativeHandle)->Reverse();
}

OCgp_Hypr2d^ OCgp_Hypr2d::Reversed()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Reversed();
  return gcnew OCgp_Hypr2d(tmp);
}

 System::Boolean OCgp_Hypr2d::IsDirect()
{
  return OCConverter::StandardBooleanToBoolean(((gp_Hypr2d*)nativeHandle)->IsDirect());
}

 void OCgp_Hypr2d::Mirror(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Hypr2d*)nativeHandle)->Mirror(*((gp_Pnt2d*)P->Handle));
}

OCgp_Hypr2d^ OCgp_Hypr2d::Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Mirrored(*((gp_Pnt2d*)P->Handle));
  return gcnew OCgp_Hypr2d(tmp);
}

 void OCgp_Hypr2d::Mirror(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Hypr2d*)nativeHandle)->Mirror(*((gp_Ax2d*)A->Handle));
}

OCgp_Hypr2d^ OCgp_Hypr2d::Mirrored(OCNaroWrappers::OCgp_Ax2d^ A)
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Mirrored(*((gp_Ax2d*)A->Handle));
  return gcnew OCgp_Hypr2d(tmp);
}

 void OCgp_Hypr2d::Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  ((gp_Hypr2d*)nativeHandle)->Rotate(*((gp_Pnt2d*)P->Handle), Ang);
}

OCgp_Hypr2d^ OCgp_Hypr2d::Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Rotated(*((gp_Pnt2d*)P->Handle), Ang);
  return gcnew OCgp_Hypr2d(tmp);
}

 void OCgp_Hypr2d::Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  ((gp_Hypr2d*)nativeHandle)->Scale(*((gp_Pnt2d*)P->Handle), S);
}

OCgp_Hypr2d^ OCgp_Hypr2d::Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Scaled(*((gp_Pnt2d*)P->Handle), S);
  return gcnew OCgp_Hypr2d(tmp);
}

 void OCgp_Hypr2d::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  ((gp_Hypr2d*)nativeHandle)->Transform(*((gp_Trsf2d*)T->Handle));
}

OCgp_Hypr2d^ OCgp_Hypr2d::Transformed(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Transformed(*((gp_Trsf2d*)T->Handle));
  return gcnew OCgp_Hypr2d(tmp);
}

 void OCgp_Hypr2d::Translate(OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((gp_Hypr2d*)nativeHandle)->Translate(*((gp_Vec2d*)V->Handle));
}

OCgp_Hypr2d^ OCgp_Hypr2d::Translated(OCNaroWrappers::OCgp_Vec2d^ V)
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Translated(*((gp_Vec2d*)V->Handle));
  return gcnew OCgp_Hypr2d(tmp);
}

 void OCgp_Hypr2d::Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  ((gp_Hypr2d*)nativeHandle)->Translate(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

OCgp_Hypr2d^ OCgp_Hypr2d::Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((gp_Hypr2d*)nativeHandle)->Translated(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
  return gcnew OCgp_Hypr2d(tmp);
}


