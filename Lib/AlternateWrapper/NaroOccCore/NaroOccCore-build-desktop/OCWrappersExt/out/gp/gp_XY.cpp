// File generated by CPPExt (CPP file)
//

#include "gp_XY.h"
#include "../Converter.h"
#include "gp_Mat2d.h"


using namespace OCNaroWrappers;

OCgp_XY::OCgp_XY(gp_XY* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_XY::OCgp_XY() 
{
  nativeHandle = new gp_XY();
}

OCgp_XY::OCgp_XY(Standard_Real X, Standard_Real Y) 
{
  nativeHandle = new gp_XY(X, Y);
}

 void OCgp_XY::SetCoord(Standard_Integer Index, Standard_Real Xi)
{
  ((gp_XY*)nativeHandle)->SetCoord(Index, Xi);
}

 void OCgp_XY::SetCoord(Standard_Real X, Standard_Real Y)
{
  ((gp_XY*)nativeHandle)->SetCoord(X, Y);
}

 void OCgp_XY::SetX(Standard_Real X)
{
  ((gp_XY*)nativeHandle)->SetX(X);
}

 void OCgp_XY::SetY(Standard_Real Y)
{
  ((gp_XY*)nativeHandle)->SetY(Y);
}

 Standard_Real OCgp_XY::Coord(Standard_Integer Index)
{
  return ((gp_XY*)nativeHandle)->Coord(Index);
}

 void OCgp_XY::Coord(Standard_Real& X, Standard_Real& Y)
{
  ((gp_XY*)nativeHandle)->Coord(X, Y);
}

 Standard_Real OCgp_XY::X()
{
  return ((gp_XY*)nativeHandle)->X();
}

 Standard_Real OCgp_XY::Y()
{
  return ((gp_XY*)nativeHandle)->Y();
}

 Standard_Real OCgp_XY::Modulus()
{
  return ((gp_XY*)nativeHandle)->Modulus();
}

 Standard_Real OCgp_XY::SquareModulus()
{
  return ((gp_XY*)nativeHandle)->SquareModulus();
}

 System::Boolean OCgp_XY::IsEqual(OCNaroWrappers::OCgp_XY^ Other, Standard_Real Tolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_XY*)nativeHandle)->IsEqual(*((gp_XY*)Other->Handle), Tolerance));
}

 void OCgp_XY::Add(OCNaroWrappers::OCgp_XY^ Other)
{
  ((gp_XY*)nativeHandle)->Add(*((gp_XY*)Other->Handle));
}

OCgp_XY^ OCgp_XY::Added(OCNaroWrappers::OCgp_XY^ Other)
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_XY*)nativeHandle)->Added(*((gp_XY*)Other->Handle));
  return gcnew OCgp_XY(tmp);
}

 Standard_Real OCgp_XY::Crossed(OCNaroWrappers::OCgp_XY^ Right)
{
  return ((gp_XY*)nativeHandle)->Crossed(*((gp_XY*)Right->Handle));
}

 Standard_Real OCgp_XY::CrossMagnitude(OCNaroWrappers::OCgp_XY^ Right)
{
  return ((gp_XY*)nativeHandle)->CrossMagnitude(*((gp_XY*)Right->Handle));
}

 Standard_Real OCgp_XY::CrossSquareMagnitude(OCNaroWrappers::OCgp_XY^ Right)
{
  return ((gp_XY*)nativeHandle)->CrossSquareMagnitude(*((gp_XY*)Right->Handle));
}

 void OCgp_XY::Divide(Standard_Real Scalar)
{
  ((gp_XY*)nativeHandle)->Divide(Scalar);
}

OCgp_XY^ OCgp_XY::Divided(Standard_Real Scalar)
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_XY*)nativeHandle)->Divided(Scalar);
  return gcnew OCgp_XY(tmp);
}

 Standard_Real OCgp_XY::Dot(OCNaroWrappers::OCgp_XY^ Other)
{
  return ((gp_XY*)nativeHandle)->Dot(*((gp_XY*)Other->Handle));
}

 void OCgp_XY::Multiply(Standard_Real Scalar)
{
  ((gp_XY*)nativeHandle)->Multiply(Scalar);
}

 void OCgp_XY::Multiply(OCNaroWrappers::OCgp_XY^ Other)
{
  ((gp_XY*)nativeHandle)->Multiply(*((gp_XY*)Other->Handle));
}

 void OCgp_XY::Multiply(OCNaroWrappers::OCgp_Mat2d^ Matrix)
{
  ((gp_XY*)nativeHandle)->Multiply(*((gp_Mat2d*)Matrix->Handle));
}

OCgp_XY^ OCgp_XY::Multiplied(Standard_Real Scalar)
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_XY*)nativeHandle)->Multiplied(Scalar);
  return gcnew OCgp_XY(tmp);
}

OCgp_XY^ OCgp_XY::Multiplied(OCNaroWrappers::OCgp_XY^ Other)
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_XY*)nativeHandle)->Multiplied(*((gp_XY*)Other->Handle));
  return gcnew OCgp_XY(tmp);
}

OCgp_XY^ OCgp_XY::Multiplied(OCNaroWrappers::OCgp_Mat2d^ Matrix)
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_XY*)nativeHandle)->Multiplied(*((gp_Mat2d*)Matrix->Handle));
  return gcnew OCgp_XY(tmp);
}

 void OCgp_XY::Normalize()
{
  ((gp_XY*)nativeHandle)->Normalize();
}

OCgp_XY^ OCgp_XY::Normalized()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_XY*)nativeHandle)->Normalized();
  return gcnew OCgp_XY(tmp);
}

 void OCgp_XY::Reverse()
{
  ((gp_XY*)nativeHandle)->Reverse();
}

OCgp_XY^ OCgp_XY::Reversed()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_XY*)nativeHandle)->Reversed();
  return gcnew OCgp_XY(tmp);
}

 void OCgp_XY::SetLinearForm(Standard_Real A1, OCNaroWrappers::OCgp_XY^ XY1, Standard_Real A2, OCNaroWrappers::OCgp_XY^ XY2)
{
  ((gp_XY*)nativeHandle)->SetLinearForm(A1, *((gp_XY*)XY1->Handle), A2, *((gp_XY*)XY2->Handle));
}

 void OCgp_XY::SetLinearForm(Standard_Real A1, OCNaroWrappers::OCgp_XY^ XY1, Standard_Real A2, OCNaroWrappers::OCgp_XY^ XY2, OCNaroWrappers::OCgp_XY^ XY3)
{
  ((gp_XY*)nativeHandle)->SetLinearForm(A1, *((gp_XY*)XY1->Handle), A2, *((gp_XY*)XY2->Handle), *((gp_XY*)XY3->Handle));
}

 void OCgp_XY::SetLinearForm(Standard_Real A1, OCNaroWrappers::OCgp_XY^ XY1, OCNaroWrappers::OCgp_XY^ XY2)
{
  ((gp_XY*)nativeHandle)->SetLinearForm(A1, *((gp_XY*)XY1->Handle), *((gp_XY*)XY2->Handle));
}

 void OCgp_XY::SetLinearForm(OCNaroWrappers::OCgp_XY^ XY1, OCNaroWrappers::OCgp_XY^ XY2)
{
  ((gp_XY*)nativeHandle)->SetLinearForm(*((gp_XY*)XY1->Handle), *((gp_XY*)XY2->Handle));
}

 void OCgp_XY::Subtract(OCNaroWrappers::OCgp_XY^ Right)
{
  ((gp_XY*)nativeHandle)->Subtract(*((gp_XY*)Right->Handle));
}

OCgp_XY^ OCgp_XY::Subtracted(OCNaroWrappers::OCgp_XY^ Right)
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_XY*)nativeHandle)->Subtracted(*((gp_XY*)Right->Handle));
  return gcnew OCgp_XY(tmp);
}


