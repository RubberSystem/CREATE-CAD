// File generated by CPPExt (CPP file)
//

#include "gp_Ax2d.h"
#include "../Converter.h"
#include "gp_Pnt2d.h"
#include "gp_Dir2d.h"
#include "gp_Trsf2d.h"
#include "gp_Vec2d.h"


using namespace OCNaroWrappers;

OCgp_Ax2d::OCgp_Ax2d(gp_Ax2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Ax2d::OCgp_Ax2d() 
{
  nativeHandle = new gp_Ax2d();
}

OCgp_Ax2d::OCgp_Ax2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ V) 
{
  nativeHandle = new gp_Ax2d(*((gp_Pnt2d*)P->Handle), *((gp_Dir2d*)V->Handle));
}

 void OCgp_Ax2d::SetLocation(OCNaroWrappers::OCgp_Pnt2d^ Locat)
{
  ((gp_Ax2d*)nativeHandle)->SetLocation(*((gp_Pnt2d*)Locat->Handle));
}

 void OCgp_Ax2d::SetDirection(OCNaroWrappers::OCgp_Dir2d^ V)
{
  ((gp_Ax2d*)nativeHandle)->SetDirection(*((gp_Dir2d*)V->Handle));
}

OCgp_Pnt2d^ OCgp_Ax2d::Location()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Location();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Dir2d^ OCgp_Ax2d::Direction()
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Direction();
  return gcnew OCgp_Dir2d(tmp);
}

 System::Boolean OCgp_Ax2d::IsCoaxial(OCNaroWrappers::OCgp_Ax2d^ Other, Standard_Real AngularTolerance, Standard_Real LinearTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax2d*)nativeHandle)->IsCoaxial(*((gp_Ax2d*)Other->Handle), AngularTolerance, LinearTolerance));
}

 System::Boolean OCgp_Ax2d::IsNormal(OCNaroWrappers::OCgp_Ax2d^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax2d*)nativeHandle)->IsNormal(*((gp_Ax2d*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Ax2d::IsOpposite(OCNaroWrappers::OCgp_Ax2d^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax2d*)nativeHandle)->IsOpposite(*((gp_Ax2d*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Ax2d::IsParallel(OCNaroWrappers::OCgp_Ax2d^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax2d*)nativeHandle)->IsParallel(*((gp_Ax2d*)Other->Handle), AngularTolerance));
}

 Standard_Real OCgp_Ax2d::Angle(OCNaroWrappers::OCgp_Ax2d^ Other)
{
  return ((gp_Ax2d*)nativeHandle)->Angle(*((gp_Ax2d*)Other->Handle));
}

 void OCgp_Ax2d::Reverse()
{
  ((gp_Ax2d*)nativeHandle)->Reverse();
}

OCgp_Ax2d^ OCgp_Ax2d::Reversed()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Reversed();
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Ax2d::Mirror(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Ax2d*)nativeHandle)->Mirror(*((gp_Pnt2d*)P->Handle));
}

OCgp_Ax2d^ OCgp_Ax2d::Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Mirrored(*((gp_Pnt2d*)P->Handle));
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Ax2d::Mirror(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Ax2d*)nativeHandle)->Mirror(*((gp_Ax2d*)A->Handle));
}

OCgp_Ax2d^ OCgp_Ax2d::Mirrored(OCNaroWrappers::OCgp_Ax2d^ A)
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Mirrored(*((gp_Ax2d*)A->Handle));
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Ax2d::Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  ((gp_Ax2d*)nativeHandle)->Rotate(*((gp_Pnt2d*)P->Handle), Ang);
}

OCgp_Ax2d^ OCgp_Ax2d::Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Rotated(*((gp_Pnt2d*)P->Handle), Ang);
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Ax2d::Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  ((gp_Ax2d*)nativeHandle)->Scale(*((gp_Pnt2d*)P->Handle), S);
}

OCgp_Ax2d^ OCgp_Ax2d::Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Scaled(*((gp_Pnt2d*)P->Handle), S);
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Ax2d::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  ((gp_Ax2d*)nativeHandle)->Transform(*((gp_Trsf2d*)T->Handle));
}

OCgp_Ax2d^ OCgp_Ax2d::Transformed(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Transformed(*((gp_Trsf2d*)T->Handle));
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Ax2d::Translate(OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((gp_Ax2d*)nativeHandle)->Translate(*((gp_Vec2d*)V->Handle));
}

OCgp_Ax2d^ OCgp_Ax2d::Translated(OCNaroWrappers::OCgp_Vec2d^ V)
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Translated(*((gp_Vec2d*)V->Handle));
  return gcnew OCgp_Ax2d(tmp);
}

 void OCgp_Ax2d::Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  ((gp_Ax2d*)nativeHandle)->Translate(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

OCgp_Ax2d^ OCgp_Ax2d::Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax2d*)nativeHandle)->Translated(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
  return gcnew OCgp_Ax2d(tmp);
}


