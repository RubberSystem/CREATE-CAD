// File generated by CPPExt (MPV)
//
#ifndef _gp_Lin2d_OCWrappers_HeaderFile
#define _gp_Lin2d_OCWrappers_HeaderFile

// include native header
#include <gp_Lin2d.hxx>
#include "../Converter.h"


#include "gp_Ax2d.h"
#include "../Standard/Standard_Storable.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2d;
ref class OCgp_Pnt2d;
ref class OCgp_Dir2d;
ref class OCgp_Trsf2d;
ref class OCgp_Vec2d;


//! Describes a line in 2D space. <br>
//! A line is positioned in the plane with an axis (a gp_Ax2d <br>
//! object) which gives the line its origin and unit vector. A <br>
//! line and an axis are similar objects, thus, we can convert <br>
//! one into the other. <br>
//! A line provides direct access to the majority of the edit <br>
//! and query functions available on its positioning axis. In <br>
//! addition, however, a line has specific functions for <br>
//! computing distances and positions. <br>
//! See Also <br>
//! GccAna and Geom2dGcc packages which provide <br>
//! functions for constructing lines defined by geometric <br>
//! constraints <br>
//! gce_MakeLin2d which provides functions for more <br>
//! complex line constructions <br>
//! Geom2d_Line which provides additional functions for <br>
//! constructing lines and works, in particular, with the <br>
//! parametric equations of lines <br>
public ref class OCgp_Lin2d  {

protected:
  gp_Lin2d* nativeHandle;
  OCgp_Lin2d(OCDummy^) {};

public:
  property gp_Lin2d* Handle
  {
    gp_Lin2d* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Lin2d(gp_Lin2d* nativeHandle);

// Methods PUBLIC

//! Creates a Line corresponding to X axis of the <br>
//!            reference coordinate system. <br>
OCgp_Lin2d();

//! Creates a line located with A. <br>
OCgp_Lin2d(OCNaroWrappers::OCgp_Ax2d^ A);


//!  <P> is the location point (origin) of the line and <br>
//!  <V> is the direction of the line. <br>
OCgp_Lin2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ V);


//!  Creates the line from the equation A*X + B*Y + C = 0.0 Raises ConstructionError if Sqrt(A*A + B*B) <= Resolution from gp. <br>//! Raised if Sqrt(A*A + B*B) <= Resolution from gp. <br>
OCgp_Lin2d(Standard_Real A, Standard_Real B, Standard_Real C);


 /*instead*/  void Reverse() ;


//! Reverses the positioning axis of this line. <br>
//! Note: <br>
//! -   Reverse assigns the result to this line, while <br>
//! -   Reversed creates a new one. <br>
 /*instead*/  OCgp_Lin2d^ Reversed() ;

//!  Changes the direction of the line. <br>
 /*instead*/  void SetDirection(OCNaroWrappers::OCgp_Dir2d^ V) ;

//! Changes the origin of the line. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt2d^ P) ;


//!  Complete redefinition of the line. <br>
//!  The "Location" point of <A> is the origin of the line. <br>
//!  The "Direction" of <A> is  the direction of the line. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax2d^ A) ;


//!  Returns the normalized coefficients of the line : <br>
//!  A * X + B * Y + C = 0. <br>
 /*instead*/  void Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C) ;

//! Returns the direction of the line. <br>
 /*instead*/  OCgp_Dir2d^ Direction() ;

//! Returns the location point (origin) of the line. <br>
 /*instead*/  OCgp_Pnt2d^ Location() ;


//!  Returns the axis placement one axis whith the same <br>
//!  location and direction as <me>. <br>
 /*instead*/  OCgp_Ax2d^ Position() ;

//! Computes the angle between two lines in radians. <br>
 /*instead*/  Standard_Real Angle(OCNaroWrappers::OCgp_Lin2d^ Other) ;

//!  Returns true if this line contains the point P, that is, if the <br>
//! distance between point P and this line is less than or <br>
//! equal to LinearTolerance. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real LinearTolerance) ;


//!  Computes the distance between <me> and the point <P>. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Computes the distance between two lines. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Lin2d^ Other) ;


//!  Computes the square distance between <me> and the point <br>
//!  <P>. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Computes the square distance between two lines. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Lin2d^ Other) ;


//!  Computes the line normal to the direction of <me>, <br>
//!  passing through the point <P>. <br>
 /*instead*/  OCgp_Lin2d^ Normal(OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt2d^ P) ;


//!  Performs the symmetrical transformation of a line <br>
//!  with respect to the point <P> which is the center <br>
//!  of the symmetry <br>
 /*instead*/  OCgp_Lin2d^ Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2d^ A) ;


//!  Performs the symmetrical transformation of a line <br>
//!  with respect to an axis placement which is the axis <br>
//!  of the symmetry. <br>
 /*instead*/  OCgp_Lin2d^ Mirrored(OCNaroWrappers::OCgp_Ax2d^ A) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang) ;


//!  Rotates a line. P is the center of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Lin2d^ Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S) ;


//!  Scales a line. S is the scaling value. Only the <br>
//!  origin of the line is modified. <br>
 /*instead*/  OCgp_Lin2d^ Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;


//!  Transforms a line with the transformation T from class Trsf2d. <br>
 /*instead*/  OCgp_Lin2d^ Transformed(OCNaroWrappers::OCgp_Trsf2d^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec2d^ V) ;


//!  Translates a line in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Lin2d^ Translated(OCNaroWrappers::OCgp_Vec2d^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;


//!  Translates a line from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Lin2d^ Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;

~OCgp_Lin2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
