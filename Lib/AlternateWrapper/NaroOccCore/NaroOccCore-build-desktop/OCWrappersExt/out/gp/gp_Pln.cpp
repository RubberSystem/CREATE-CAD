// File generated by CPPExt (CPP file)
//

#include "gp_Pln.h"
#include "../Converter.h"
#include "gp_Ax3.h"
#include "gp_Pnt.h"
#include "gp_Dir.h"
#include "gp_Ax1.h"
#include "gp_Lin.h"
#include "gp_Ax2.h"
#include "gp_Trsf.h"
#include "gp_Vec.h"


using namespace OCNaroWrappers;

OCgp_Pln::OCgp_Pln(gp_Pln* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Pln::OCgp_Pln() 
{
  nativeHandle = new gp_Pln();
}

OCgp_Pln::OCgp_Pln(OCNaroWrappers::OCgp_Ax3^ A3) 
{
  nativeHandle = new gp_Pln(*((gp_Ax3*)A3->Handle));
}

OCgp_Pln::OCgp_Pln(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V) 
{
  nativeHandle = new gp_Pln(*((gp_Pnt*)P->Handle), *((gp_Dir*)V->Handle));
}

OCgp_Pln::OCgp_Pln(Standard_Real A, Standard_Real B, Standard_Real C, Standard_Real D) 
{
  nativeHandle = new gp_Pln(A, B, C, D);
}

 void OCgp_Pln::Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& D)
{
  ((gp_Pln*)nativeHandle)->Coefficients(A, B, C, D);
}

 void OCgp_Pln::SetAxis(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Pln*)nativeHandle)->SetAxis(*((gp_Ax1*)A1->Handle));
}

 void OCgp_Pln::SetLocation(OCNaroWrappers::OCgp_Pnt^ Loc)
{
  ((gp_Pln*)nativeHandle)->SetLocation(*((gp_Pnt*)Loc->Handle));
}

 void OCgp_Pln::SetPosition(OCNaroWrappers::OCgp_Ax3^ A3)
{
  ((gp_Pln*)nativeHandle)->SetPosition(*((gp_Ax3*)A3->Handle));
}

 void OCgp_Pln::UReverse()
{
  ((gp_Pln*)nativeHandle)->UReverse();
}

 void OCgp_Pln::VReverse()
{
  ((gp_Pln*)nativeHandle)->VReverse();
}

 System::Boolean OCgp_Pln::Direct()
{
  return OCConverter::StandardBooleanToBoolean(((gp_Pln*)nativeHandle)->Direct());
}

OCgp_Ax1^ OCgp_Pln::Axis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Pln*)nativeHandle)->Axis();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Pnt^ OCgp_Pln::Location()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Pln*)nativeHandle)->Location();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Ax3^ OCgp_Pln::Position()
{
  gp_Ax3* tmp = new gp_Ax3();
  *tmp = ((gp_Pln*)nativeHandle)->Position();
  return gcnew OCgp_Ax3(tmp);
}

 Standard_Real OCgp_Pln::Distance(OCNaroWrappers::OCgp_Pnt^ P)
{
  return ((gp_Pln*)nativeHandle)->Distance(*((gp_Pnt*)P->Handle));
}

 Standard_Real OCgp_Pln::Distance(OCNaroWrappers::OCgp_Lin^ L)
{
  return ((gp_Pln*)nativeHandle)->Distance(*((gp_Lin*)L->Handle));
}

 Standard_Real OCgp_Pln::Distance(OCNaroWrappers::OCgp_Pln^ Other)
{
  return ((gp_Pln*)nativeHandle)->Distance(*((gp_Pln*)Other->Handle));
}

 Standard_Real OCgp_Pln::SquareDistance(OCNaroWrappers::OCgp_Pnt^ P)
{
  return ((gp_Pln*)nativeHandle)->SquareDistance(*((gp_Pnt*)P->Handle));
}

 Standard_Real OCgp_Pln::SquareDistance(OCNaroWrappers::OCgp_Lin^ L)
{
  return ((gp_Pln*)nativeHandle)->SquareDistance(*((gp_Lin*)L->Handle));
}

 Standard_Real OCgp_Pln::SquareDistance(OCNaroWrappers::OCgp_Pln^ Other)
{
  return ((gp_Pln*)nativeHandle)->SquareDistance(*((gp_Pln*)Other->Handle));
}

OCgp_Ax1^ OCgp_Pln::XAxis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Pln*)nativeHandle)->XAxis();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Ax1^ OCgp_Pln::YAxis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Pln*)nativeHandle)->YAxis();
  return gcnew OCgp_Ax1(tmp);
}

 System::Boolean OCgp_Pln::Contains(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real LinearTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Pln*)nativeHandle)->Contains(*((gp_Pnt*)P->Handle), LinearTolerance));
}

 System::Boolean OCgp_Pln::Contains(OCNaroWrappers::OCgp_Lin^ L, Standard_Real LinearTolerance, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Pln*)nativeHandle)->Contains(*((gp_Lin*)L->Handle), LinearTolerance, AngularTolerance));
}

 void OCgp_Pln::Mirror(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Pln*)nativeHandle)->Mirror(*((gp_Pnt*)P->Handle));
}

OCgp_Pln^ OCgp_Pln::Mirrored(OCNaroWrappers::OCgp_Pnt^ P)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((gp_Pln*)nativeHandle)->Mirrored(*((gp_Pnt*)P->Handle));
  return gcnew OCgp_Pln(tmp);
}

 void OCgp_Pln::Mirror(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Pln*)nativeHandle)->Mirror(*((gp_Ax1*)A1->Handle));
}

OCgp_Pln^ OCgp_Pln::Mirrored(OCNaroWrappers::OCgp_Ax1^ A1)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((gp_Pln*)nativeHandle)->Mirrored(*((gp_Ax1*)A1->Handle));
  return gcnew OCgp_Pln(tmp);
}

 void OCgp_Pln::Mirror(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Pln*)nativeHandle)->Mirror(*((gp_Ax2*)A2->Handle));
}

OCgp_Pln^ OCgp_Pln::Mirrored(OCNaroWrappers::OCgp_Ax2^ A2)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((gp_Pln*)nativeHandle)->Mirrored(*((gp_Ax2*)A2->Handle));
  return gcnew OCgp_Pln(tmp);
}

 void OCgp_Pln::Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  ((gp_Pln*)nativeHandle)->Rotate(*((gp_Ax1*)A1->Handle), Ang);
}

OCgp_Pln^ OCgp_Pln::Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((gp_Pln*)nativeHandle)->Rotated(*((gp_Ax1*)A1->Handle), Ang);
  return gcnew OCgp_Pln(tmp);
}

 void OCgp_Pln::Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  ((gp_Pln*)nativeHandle)->Scale(*((gp_Pnt*)P->Handle), S);
}

OCgp_Pln^ OCgp_Pln::Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((gp_Pln*)nativeHandle)->Scaled(*((gp_Pnt*)P->Handle), S);
  return gcnew OCgp_Pln(tmp);
}

 void OCgp_Pln::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  ((gp_Pln*)nativeHandle)->Transform(*((gp_Trsf*)T->Handle));
}

OCgp_Pln^ OCgp_Pln::Transformed(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((gp_Pln*)nativeHandle)->Transformed(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_Pln(tmp);
}

 void OCgp_Pln::Translate(OCNaroWrappers::OCgp_Vec^ V)
{
  ((gp_Pln*)nativeHandle)->Translate(*((gp_Vec*)V->Handle));
}

OCgp_Pln^ OCgp_Pln::Translated(OCNaroWrappers::OCgp_Vec^ V)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((gp_Pln*)nativeHandle)->Translated(*((gp_Vec*)V->Handle));
  return gcnew OCgp_Pln(tmp);
}

 void OCgp_Pln::Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  ((gp_Pln*)nativeHandle)->Translate(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
}

OCgp_Pln^ OCgp_Pln::Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((gp_Pln*)nativeHandle)->Translated(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
  return gcnew OCgp_Pln(tmp);
}


