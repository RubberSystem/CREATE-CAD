// File generated by CPPExt (MPV)
//
#ifndef _gp_Lin_OCWrappers_HeaderFile
#define _gp_Lin_OCWrappers_HeaderFile

// include native header
#include <gp_Lin.hxx>
#include "../Converter.h"


#include "gp_Ax1.h"
#include "../Standard/Standard_Storable.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax1;
ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Ax2;
ref class OCgp_Trsf;
ref class OCgp_Vec;



//! Describes a line in 3D space. <br>
//! A line is positioned in space with an axis (a gp_Ax1 <br>
//! object) which gives it an origin and a unit vector. <br>
//! A line and an axis are similar objects, thus, we can <br>
//! convert one into the other. A line provides direct access <br>
//! to the majority of the edit and query functions available <br>
//! on its positioning axis. In addition, however, a line has <br>
//! specific functions for computing distances and positions. <br>
//! See Also <br>
//! gce_MakeLin which provides functions for more complex <br>
//! line constructions <br>
//! Geom_Line which provides additional functions for <br>
//! constructing lines and works, in particular, with the <br>
//! parametric equations of lines <br>
public ref class OCgp_Lin  {

protected:
  gp_Lin* nativeHandle;
  OCgp_Lin(OCDummy^) {};

public:
  property gp_Lin* Handle
  {
    gp_Lin* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Lin(gp_Lin* nativeHandle);

// Methods PUBLIC

//! Creates a Line corresponding to Z axis of the <br>
//!            reference coordinate system. <br>
OCgp_Lin();

//! Creates a line defined by axis A1. <br>
OCgp_Lin(OCNaroWrappers::OCgp_Ax1^ A1);

//! Creates a line passing through point P and parallel to <br>
//!  vector V (P and V are, respectively, the origin and <br>
//! the unit vector of the positioning axis of the line). <br>
OCgp_Lin(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V);


 /*instead*/  void Reverse() ;

//! Reverses the direction of the line. <br>
//! Note: <br>
//! -   Reverse assigns the result to this line, while <br>
//! -   Reversed creates a new one. <br>
 /*instead*/  OCgp_Lin^ Reversed() ;

//!  Changes the direction of the line. <br>
 /*instead*/  void SetDirection(OCNaroWrappers::OCgp_Dir^ V) ;

//! Changes the location point (origin) of the line. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Complete redefinition of the line. <br>
//!  The "Location" point of <A1> is the origin of the line. <br>
//!  The "Direction" of <A1> is  the direction of the line. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax1^ A1) ;

//! Returns the direction of the line. <br>
 /*instead*/  OCgp_Dir^ Direction() ;


//!  Returns the location point (origin) of the line. <br>
 /*instead*/  OCgp_Pnt^ Location() ;


//!  Returns the axis placement one axis whith the same <br>
//!  location and direction as <me>. <br>
 /*instead*/  OCgp_Ax1^ Position() ;

//! Computes the angle between two lines in radians. <br>
 /*instead*/  Standard_Real Angle(OCNaroWrappers::OCgp_Lin^ Other) ;

//! Returns true if this line contains the point P, that is, if the <br>
//! distance between point P and this line is less than or <br>
//! equal to LinearTolerance.. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real LinearTolerance) ;

//! Computes the distance between <me> and the point P. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Computes the distance between two lines. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Lin^ Other) ;


//!  Computes the square distance between <me> and the point P. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Computes the square distance between two lines. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Lin^ Other) ;


//!  Computes the line normal to the direction of <me>, passing <br>
//!  through the point P.  Raises ConstructionError <br>
//!  if the distance between <me> and the point P is lower <br>
//!  or equal to Resolution from gp because there is an infinity of <br>
//!  solutions in 3D space. <br>
 /*instead*/  OCgp_Lin^ Normal(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of a line <br>
//!  with respect to the point P which is the center of <br>
//!  the symmetry. <br>
 /*instead*/  OCgp_Lin^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Performs the symmetrical transformation of a line <br>
//!  with respect to an axis placement which is the axis <br>
//!  of the symmetry. <br>
 /*instead*/  OCgp_Lin^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Performs the symmetrical transformation of a line <br>
//!  with respect to a plane. The axis placement  <A2> <br>
//!  locates the plane of the symmetry : <br>
//!  (Location, XDirection, YDirection). <br>
 /*instead*/  OCgp_Lin^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Rotates a line. A1 is the axis of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Lin^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Scales a line. S is the scaling value. <br>
//!  The "Location" point (origin) of the line is modified. <br>
//!  The "Direction" is reversed if the scale is negative. <br>
 /*instead*/  OCgp_Lin^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


//!  Transforms a line with the transformation T from class Trsf. <br>
 /*instead*/  OCgp_Lin^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates a line in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Lin^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


//!  Translates a line from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Lin^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCgp_Lin()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
