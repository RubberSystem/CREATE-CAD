// File generated by CPPExt (CPP file)
//

#include "gp_Dir.h"
#include "../Converter.h"
#include "gp_Vec.h"
#include "gp_XYZ.h"
#include "gp_Ax1.h"
#include "gp_Ax2.h"
#include "gp_Trsf.h"


using namespace OCNaroWrappers;

OCgp_Dir::OCgp_Dir(gp_Dir* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Dir::OCgp_Dir() 
{
  nativeHandle = new gp_Dir();
}

OCgp_Dir::OCgp_Dir(OCNaroWrappers::OCgp_Vec^ V) 
{
  nativeHandle = new gp_Dir(*((gp_Vec*)V->Handle));
}

OCgp_Dir::OCgp_Dir(OCNaroWrappers::OCgp_XYZ^ Coord) 
{
  nativeHandle = new gp_Dir(*((gp_XYZ*)Coord->Handle));
}

OCgp_Dir::OCgp_Dir(Standard_Real Xv, Standard_Real Yv, Standard_Real Zv) 
{
  nativeHandle = new gp_Dir(Xv, Yv, Zv);
}

 void OCgp_Dir::SetCoord(Standard_Integer Index, Standard_Real Xi)
{
  ((gp_Dir*)nativeHandle)->SetCoord(Index, Xi);
}

 void OCgp_Dir::SetCoord(Standard_Real Xv, Standard_Real Yv, Standard_Real Zv)
{
  ((gp_Dir*)nativeHandle)->SetCoord(Xv, Yv, Zv);
}

 void OCgp_Dir::SetX(Standard_Real X)
{
  ((gp_Dir*)nativeHandle)->SetX(X);
}

 void OCgp_Dir::SetY(Standard_Real Y)
{
  ((gp_Dir*)nativeHandle)->SetY(Y);
}

 void OCgp_Dir::SetZ(Standard_Real Z)
{
  ((gp_Dir*)nativeHandle)->SetZ(Z);
}

 void OCgp_Dir::SetXYZ(OCNaroWrappers::OCgp_XYZ^ Coord)
{
  ((gp_Dir*)nativeHandle)->SetXYZ(*((gp_XYZ*)Coord->Handle));
}

 Standard_Real OCgp_Dir::Coord(Standard_Integer Index)
{
  return ((gp_Dir*)nativeHandle)->Coord(Index);
}

 void OCgp_Dir::Coord(Standard_Real& Xv, Standard_Real& Yv, Standard_Real& Zv)
{
  ((gp_Dir*)nativeHandle)->Coord(Xv, Yv, Zv);
}

 Standard_Real OCgp_Dir::X()
{
  return ((gp_Dir*)nativeHandle)->X();
}

 Standard_Real OCgp_Dir::Y()
{
  return ((gp_Dir*)nativeHandle)->Y();
}

 Standard_Real OCgp_Dir::Z()
{
  return ((gp_Dir*)nativeHandle)->Z();
}

OCgp_XYZ^ OCgp_Dir::XYZ()
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((gp_Dir*)nativeHandle)->XYZ();
  return gcnew OCgp_XYZ(tmp);
}

 System::Boolean OCgp_Dir::IsEqual(OCNaroWrappers::OCgp_Dir^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Dir*)nativeHandle)->IsEqual(*((gp_Dir*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Dir::IsNormal(OCNaroWrappers::OCgp_Dir^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Dir*)nativeHandle)->IsNormal(*((gp_Dir*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Dir::IsOpposite(OCNaroWrappers::OCgp_Dir^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Dir*)nativeHandle)->IsOpposite(*((gp_Dir*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Dir::IsParallel(OCNaroWrappers::OCgp_Dir^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Dir*)nativeHandle)->IsParallel(*((gp_Dir*)Other->Handle), AngularTolerance));
}

 Standard_Real OCgp_Dir::Angle(OCNaroWrappers::OCgp_Dir^ Other)
{
  return ((gp_Dir*)nativeHandle)->Angle(*((gp_Dir*)Other->Handle));
}

 Standard_Real OCgp_Dir::AngleWithRef(OCNaroWrappers::OCgp_Dir^ Other, OCNaroWrappers::OCgp_Dir^ VRef)
{
  return ((gp_Dir*)nativeHandle)->AngleWithRef(*((gp_Dir*)Other->Handle), *((gp_Dir*)VRef->Handle));
}

 void OCgp_Dir::Cross(OCNaroWrappers::OCgp_Dir^ Right)
{
  ((gp_Dir*)nativeHandle)->Cross(*((gp_Dir*)Right->Handle));
}

OCgp_Dir^ OCgp_Dir::Crossed(OCNaroWrappers::OCgp_Dir^ Right)
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Dir*)nativeHandle)->Crossed(*((gp_Dir*)Right->Handle));
  return gcnew OCgp_Dir(tmp);
}

 void OCgp_Dir::CrossCross(OCNaroWrappers::OCgp_Dir^ V1, OCNaroWrappers::OCgp_Dir^ V2)
{
  ((gp_Dir*)nativeHandle)->CrossCross(*((gp_Dir*)V1->Handle), *((gp_Dir*)V2->Handle));
}

OCgp_Dir^ OCgp_Dir::CrossCrossed(OCNaroWrappers::OCgp_Dir^ V1, OCNaroWrappers::OCgp_Dir^ V2)
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Dir*)nativeHandle)->CrossCrossed(*((gp_Dir*)V1->Handle), *((gp_Dir*)V2->Handle));
  return gcnew OCgp_Dir(tmp);
}

 Standard_Real OCgp_Dir::Dot(OCNaroWrappers::OCgp_Dir^ Other)
{
  return ((gp_Dir*)nativeHandle)->Dot(*((gp_Dir*)Other->Handle));
}

 Standard_Real OCgp_Dir::DotCross(OCNaroWrappers::OCgp_Dir^ V1, OCNaroWrappers::OCgp_Dir^ V2)
{
  return ((gp_Dir*)nativeHandle)->DotCross(*((gp_Dir*)V1->Handle), *((gp_Dir*)V2->Handle));
}

 void OCgp_Dir::Reverse()
{
  ((gp_Dir*)nativeHandle)->Reverse();
}

OCgp_Dir^ OCgp_Dir::Reversed()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Dir*)nativeHandle)->Reversed();
  return gcnew OCgp_Dir(tmp);
}

 void OCgp_Dir::Mirror(OCNaroWrappers::OCgp_Dir^ V)
{
  ((gp_Dir*)nativeHandle)->Mirror(*((gp_Dir*)V->Handle));
}

OCgp_Dir^ OCgp_Dir::Mirrored(OCNaroWrappers::OCgp_Dir^ V)
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Dir*)nativeHandle)->Mirrored(*((gp_Dir*)V->Handle));
  return gcnew OCgp_Dir(tmp);
}

 void OCgp_Dir::Mirror(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Dir*)nativeHandle)->Mirror(*((gp_Ax1*)A1->Handle));
}

OCgp_Dir^ OCgp_Dir::Mirrored(OCNaroWrappers::OCgp_Ax1^ A1)
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Dir*)nativeHandle)->Mirrored(*((gp_Ax1*)A1->Handle));
  return gcnew OCgp_Dir(tmp);
}

 void OCgp_Dir::Mirror(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Dir*)nativeHandle)->Mirror(*((gp_Ax2*)A2->Handle));
}

OCgp_Dir^ OCgp_Dir::Mirrored(OCNaroWrappers::OCgp_Ax2^ A2)
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Dir*)nativeHandle)->Mirrored(*((gp_Ax2*)A2->Handle));
  return gcnew OCgp_Dir(tmp);
}

 void OCgp_Dir::Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  ((gp_Dir*)nativeHandle)->Rotate(*((gp_Ax1*)A1->Handle), Ang);
}

OCgp_Dir^ OCgp_Dir::Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Dir*)nativeHandle)->Rotated(*((gp_Ax1*)A1->Handle), Ang);
  return gcnew OCgp_Dir(tmp);
}

 void OCgp_Dir::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  ((gp_Dir*)nativeHandle)->Transform(*((gp_Trsf*)T->Handle));
}

OCgp_Dir^ OCgp_Dir::Transformed(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Dir*)nativeHandle)->Transformed(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_Dir(tmp);
}


