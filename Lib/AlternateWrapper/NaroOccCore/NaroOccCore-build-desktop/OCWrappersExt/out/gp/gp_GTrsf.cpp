// File generated by CPPExt (CPP file)
//

#include "gp_GTrsf.h"
#include "../Converter.h"
#include "gp_Trsf.h"
#include "gp_Mat.h"
#include "gp_XYZ.h"
#include "gp_Ax1.h"
#include "gp_Ax2.h"


using namespace OCNaroWrappers;

OCgp_GTrsf::OCgp_GTrsf(gp_GTrsf* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_GTrsf::OCgp_GTrsf() 
{
  nativeHandle = new gp_GTrsf();
}

OCgp_GTrsf::OCgp_GTrsf(OCNaroWrappers::OCgp_Trsf^ T) 
{
  nativeHandle = new gp_GTrsf(*((gp_Trsf*)T->Handle));
}

OCgp_GTrsf::OCgp_GTrsf(OCNaroWrappers::OCgp_Mat^ M, OCNaroWrappers::OCgp_XYZ^ V) 
{
  nativeHandle = new gp_GTrsf(*((gp_Mat*)M->Handle), *((gp_XYZ*)V->Handle));
}

 void OCgp_GTrsf::SetAffinity(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ratio)
{
  ((gp_GTrsf*)nativeHandle)->SetAffinity(*((gp_Ax1*)A1->Handle), Ratio);
}

 void OCgp_GTrsf::SetAffinity(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Ratio)
{
  ((gp_GTrsf*)nativeHandle)->SetAffinity(*((gp_Ax2*)A2->Handle), Ratio);
}

 void OCgp_GTrsf::SetValue(Standard_Integer Row, Standard_Integer Col, Standard_Real Value)
{
  ((gp_GTrsf*)nativeHandle)->SetValue(Row, Col, Value);
}

 void OCgp_GTrsf::SetVectorialPart(OCNaroWrappers::OCgp_Mat^ Matrix)
{
  ((gp_GTrsf*)nativeHandle)->SetVectorialPart(*((gp_Mat*)Matrix->Handle));
}

 void OCgp_GTrsf::SetTranslationPart(OCNaroWrappers::OCgp_XYZ^ Coord)
{
  ((gp_GTrsf*)nativeHandle)->SetTranslationPart(*((gp_XYZ*)Coord->Handle));
}

 void OCgp_GTrsf::SetTrsf(OCNaroWrappers::OCgp_Trsf^ T)
{
  ((gp_GTrsf*)nativeHandle)->SetTrsf(*((gp_Trsf*)T->Handle));
}

 System::Boolean OCgp_GTrsf::IsNegative()
{
  return OCConverter::StandardBooleanToBoolean(((gp_GTrsf*)nativeHandle)->IsNegative());
}

 System::Boolean OCgp_GTrsf::IsSingular()
{
  return OCConverter::StandardBooleanToBoolean(((gp_GTrsf*)nativeHandle)->IsSingular());
}

 OCgp_TrsfForm OCgp_GTrsf::Form()
{
  return (OCgp_TrsfForm)(((gp_GTrsf*)nativeHandle)->Form());
}

 void OCgp_GTrsf::SetForm()
{
  ((gp_GTrsf*)nativeHandle)->SetForm();
}

OCgp_XYZ^ OCgp_GTrsf::TranslationPart()
{
  gp_XYZ* tmp = new gp_XYZ();
  *tmp = ((gp_GTrsf*)nativeHandle)->TranslationPart();
  return gcnew OCgp_XYZ(tmp);
}

OCgp_Mat^ OCgp_GTrsf::VectorialPart()
{
  gp_Mat* tmp = new gp_Mat();
  *tmp = ((gp_GTrsf*)nativeHandle)->VectorialPart();
  return gcnew OCgp_Mat(tmp);
}

 Standard_Real OCgp_GTrsf::Value(Standard_Integer Row, Standard_Integer Col)
{
  return ((gp_GTrsf*)nativeHandle)->Value(Row, Col);
}

 void OCgp_GTrsf::Invert()
{
  ((gp_GTrsf*)nativeHandle)->Invert();
}

OCgp_GTrsf^ OCgp_GTrsf::Inverted()
{
  gp_GTrsf* tmp = new gp_GTrsf();
  *tmp = ((gp_GTrsf*)nativeHandle)->Inverted();
  return gcnew OCgp_GTrsf(tmp);
}

 void OCgp_GTrsf::Multiply(OCNaroWrappers::OCgp_GTrsf^ T)
{
  ((gp_GTrsf*)nativeHandle)->Multiply(*((gp_GTrsf*)T->Handle));
}

OCgp_GTrsf^ OCgp_GTrsf::Multiplied(OCNaroWrappers::OCgp_GTrsf^ T)
{
  gp_GTrsf* tmp = new gp_GTrsf();
  *tmp = ((gp_GTrsf*)nativeHandle)->Multiplied(*((gp_GTrsf*)T->Handle));
  return gcnew OCgp_GTrsf(tmp);
}

 void OCgp_GTrsf::PreMultiply(OCNaroWrappers::OCgp_GTrsf^ T)
{
  ((gp_GTrsf*)nativeHandle)->PreMultiply(*((gp_GTrsf*)T->Handle));
}

 void OCgp_GTrsf::Power(Standard_Integer N)
{
  ((gp_GTrsf*)nativeHandle)->Power(N);
}

OCgp_GTrsf^ OCgp_GTrsf::Powered(Standard_Integer N)
{
  gp_GTrsf* tmp = new gp_GTrsf();
  *tmp = ((gp_GTrsf*)nativeHandle)->Powered(N);
  return gcnew OCgp_GTrsf(tmp);
}

 void OCgp_GTrsf::Transforms(OCNaroWrappers::OCgp_XYZ^ Coord)
{
  ((gp_GTrsf*)nativeHandle)->Transforms(*((gp_XYZ*)Coord->Handle));
}

 void OCgp_GTrsf::Transforms(Standard_Real& X, Standard_Real& Y, Standard_Real& Z)
{
  ((gp_GTrsf*)nativeHandle)->Transforms(X, Y, Z);
}

OCgp_Trsf^ OCgp_GTrsf::Trsf()
{
  gp_Trsf* tmp = new gp_Trsf();
  *tmp = ((gp_GTrsf*)nativeHandle)->Trsf();
  return gcnew OCgp_Trsf(tmp);
}


