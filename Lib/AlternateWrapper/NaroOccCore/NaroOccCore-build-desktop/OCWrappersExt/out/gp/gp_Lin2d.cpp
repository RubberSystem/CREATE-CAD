// File generated by CPPExt (CPP file)
//

#include "gp_Lin2d.h"
#include "../Converter.h"
#include "gp_Ax2d.h"
#include "gp_Pnt2d.h"
#include "gp_Dir2d.h"
#include "gp_Trsf2d.h"
#include "gp_Vec2d.h"


using namespace OCNaroWrappers;

OCgp_Lin2d::OCgp_Lin2d(gp_Lin2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Lin2d::OCgp_Lin2d() 
{
  nativeHandle = new gp_Lin2d();
}

OCgp_Lin2d::OCgp_Lin2d(OCNaroWrappers::OCgp_Ax2d^ A) 
{
  nativeHandle = new gp_Lin2d(*((gp_Ax2d*)A->Handle));
}

OCgp_Lin2d::OCgp_Lin2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ V) 
{
  nativeHandle = new gp_Lin2d(*((gp_Pnt2d*)P->Handle), *((gp_Dir2d*)V->Handle));
}

OCgp_Lin2d::OCgp_Lin2d(Standard_Real A, Standard_Real B, Standard_Real C) 
{
  nativeHandle = new gp_Lin2d(A, B, C);
}

 void OCgp_Lin2d::Reverse()
{
  ((gp_Lin2d*)nativeHandle)->Reverse();
}

OCgp_Lin2d^ OCgp_Lin2d::Reversed()
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Reversed();
  return gcnew OCgp_Lin2d(tmp);
}

 void OCgp_Lin2d::SetDirection(OCNaroWrappers::OCgp_Dir2d^ V)
{
  ((gp_Lin2d*)nativeHandle)->SetDirection(*((gp_Dir2d*)V->Handle));
}

 void OCgp_Lin2d::SetLocation(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Lin2d*)nativeHandle)->SetLocation(*((gp_Pnt2d*)P->Handle));
}

 void OCgp_Lin2d::SetPosition(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Lin2d*)nativeHandle)->SetPosition(*((gp_Ax2d*)A->Handle));
}

 void OCgp_Lin2d::Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C)
{
  ((gp_Lin2d*)nativeHandle)->Coefficients(A, B, C);
}

OCgp_Dir2d^ OCgp_Lin2d::Direction()
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Direction();
  return gcnew OCgp_Dir2d(tmp);
}

OCgp_Pnt2d^ OCgp_Lin2d::Location()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Location();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Ax2d^ OCgp_Lin2d::Position()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Position();
  return gcnew OCgp_Ax2d(tmp);
}

 Standard_Real OCgp_Lin2d::Angle(OCNaroWrappers::OCgp_Lin2d^ Other)
{
  return ((gp_Lin2d*)nativeHandle)->Angle(*((gp_Lin2d*)Other->Handle));
}

 System::Boolean OCgp_Lin2d::Contains(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real LinearTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Lin2d*)nativeHandle)->Contains(*((gp_Pnt2d*)P->Handle), LinearTolerance));
}

 Standard_Real OCgp_Lin2d::Distance(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  return ((gp_Lin2d*)nativeHandle)->Distance(*((gp_Pnt2d*)P->Handle));
}

 Standard_Real OCgp_Lin2d::Distance(OCNaroWrappers::OCgp_Lin2d^ Other)
{
  return ((gp_Lin2d*)nativeHandle)->Distance(*((gp_Lin2d*)Other->Handle));
}

 Standard_Real OCgp_Lin2d::SquareDistance(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  return ((gp_Lin2d*)nativeHandle)->SquareDistance(*((gp_Pnt2d*)P->Handle));
}

 Standard_Real OCgp_Lin2d::SquareDistance(OCNaroWrappers::OCgp_Lin2d^ Other)
{
  return ((gp_Lin2d*)nativeHandle)->SquareDistance(*((gp_Lin2d*)Other->Handle));
}

OCgp_Lin2d^ OCgp_Lin2d::Normal(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Normal(*((gp_Pnt2d*)P->Handle));
  return gcnew OCgp_Lin2d(tmp);
}

 void OCgp_Lin2d::Mirror(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Lin2d*)nativeHandle)->Mirror(*((gp_Pnt2d*)P->Handle));
}

OCgp_Lin2d^ OCgp_Lin2d::Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Mirrored(*((gp_Pnt2d*)P->Handle));
  return gcnew OCgp_Lin2d(tmp);
}

 void OCgp_Lin2d::Mirror(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Lin2d*)nativeHandle)->Mirror(*((gp_Ax2d*)A->Handle));
}

OCgp_Lin2d^ OCgp_Lin2d::Mirrored(OCNaroWrappers::OCgp_Ax2d^ A)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Mirrored(*((gp_Ax2d*)A->Handle));
  return gcnew OCgp_Lin2d(tmp);
}

 void OCgp_Lin2d::Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  ((gp_Lin2d*)nativeHandle)->Rotate(*((gp_Pnt2d*)P->Handle), Ang);
}

OCgp_Lin2d^ OCgp_Lin2d::Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Rotated(*((gp_Pnt2d*)P->Handle), Ang);
  return gcnew OCgp_Lin2d(tmp);
}

 void OCgp_Lin2d::Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  ((gp_Lin2d*)nativeHandle)->Scale(*((gp_Pnt2d*)P->Handle), S);
}

OCgp_Lin2d^ OCgp_Lin2d::Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Scaled(*((gp_Pnt2d*)P->Handle), S);
  return gcnew OCgp_Lin2d(tmp);
}

 void OCgp_Lin2d::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  ((gp_Lin2d*)nativeHandle)->Transform(*((gp_Trsf2d*)T->Handle));
}

OCgp_Lin2d^ OCgp_Lin2d::Transformed(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Transformed(*((gp_Trsf2d*)T->Handle));
  return gcnew OCgp_Lin2d(tmp);
}

 void OCgp_Lin2d::Translate(OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((gp_Lin2d*)nativeHandle)->Translate(*((gp_Vec2d*)V->Handle));
}

OCgp_Lin2d^ OCgp_Lin2d::Translated(OCNaroWrappers::OCgp_Vec2d^ V)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Translated(*((gp_Vec2d*)V->Handle));
  return gcnew OCgp_Lin2d(tmp);
}

 void OCgp_Lin2d::Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  ((gp_Lin2d*)nativeHandle)->Translate(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

OCgp_Lin2d^ OCgp_Lin2d::Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((gp_Lin2d*)nativeHandle)->Translated(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
  return gcnew OCgp_Lin2d(tmp);
}


