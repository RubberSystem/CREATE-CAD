// File generated by CPPExt (CPP file)
//

#include "gp_Pnt2d.h"
#include "../Converter.h"
#include "gp_XY.h"
#include "gp_Ax2d.h"
#include "gp_Trsf2d.h"
#include "gp_Vec2d.h"


using namespace OCNaroWrappers;

OCgp_Pnt2d::OCgp_Pnt2d(gp_Pnt2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Pnt2d::OCgp_Pnt2d() 
{
  nativeHandle = new gp_Pnt2d();
}

OCgp_Pnt2d::OCgp_Pnt2d(OCNaroWrappers::OCgp_XY^ Coord) 
{
  nativeHandle = new gp_Pnt2d(*((gp_XY*)Coord->Handle));
}

OCgp_Pnt2d::OCgp_Pnt2d(Standard_Real Xp, Standard_Real Yp) 
{
  nativeHandle = new gp_Pnt2d(Xp, Yp);
}

 void OCgp_Pnt2d::SetCoord(Standard_Integer Index, Standard_Real Xi)
{
  ((gp_Pnt2d*)nativeHandle)->SetCoord(Index, Xi);
}

 void OCgp_Pnt2d::SetCoord(Standard_Real Xp, Standard_Real Yp)
{
  ((gp_Pnt2d*)nativeHandle)->SetCoord(Xp, Yp);
}

 void OCgp_Pnt2d::SetX(Standard_Real X)
{
  ((gp_Pnt2d*)nativeHandle)->SetX(X);
}

 void OCgp_Pnt2d::SetY(Standard_Real Y)
{
  ((gp_Pnt2d*)nativeHandle)->SetY(Y);
}

 void OCgp_Pnt2d::SetXY(OCNaroWrappers::OCgp_XY^ Coord)
{
  ((gp_Pnt2d*)nativeHandle)->SetXY(*((gp_XY*)Coord->Handle));
}

 Standard_Real OCgp_Pnt2d::Coord(Standard_Integer Index)
{
  return ((gp_Pnt2d*)nativeHandle)->Coord(Index);
}

 void OCgp_Pnt2d::Coord(Standard_Real& Xp, Standard_Real& Yp)
{
  ((gp_Pnt2d*)nativeHandle)->Coord(Xp, Yp);
}

 Standard_Real OCgp_Pnt2d::X()
{
  return ((gp_Pnt2d*)nativeHandle)->X();
}

 Standard_Real OCgp_Pnt2d::Y()
{
  return ((gp_Pnt2d*)nativeHandle)->Y();
}

OCgp_XY^ OCgp_Pnt2d::XY()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_Pnt2d*)nativeHandle)->XY();
  return gcnew OCgp_XY(tmp);
}

OCgp_XY^ OCgp_Pnt2d::Coord()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_Pnt2d*)nativeHandle)->Coord();
  return gcnew OCgp_XY(tmp);
}

OCgp_XY^ OCgp_Pnt2d::ChangeCoord()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_Pnt2d*)nativeHandle)->ChangeCoord();
  return gcnew OCgp_XY(tmp);
}

 System::Boolean OCgp_Pnt2d::IsEqual(OCNaroWrappers::OCgp_Pnt2d^ Other, Standard_Real LinearTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Pnt2d*)nativeHandle)->IsEqual(*((gp_Pnt2d*)Other->Handle), LinearTolerance));
}

 Standard_Real OCgp_Pnt2d::Distance(OCNaroWrappers::OCgp_Pnt2d^ Other)
{
  return ((gp_Pnt2d*)nativeHandle)->Distance(*((gp_Pnt2d*)Other->Handle));
}

 Standard_Real OCgp_Pnt2d::SquareDistance(OCNaroWrappers::OCgp_Pnt2d^ Other)
{
  return ((gp_Pnt2d*)nativeHandle)->SquareDistance(*((gp_Pnt2d*)Other->Handle));
}

 void OCgp_Pnt2d::Mirror(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Pnt2d*)nativeHandle)->Mirror(*((gp_Pnt2d*)P->Handle));
}

OCgp_Pnt2d^ OCgp_Pnt2d::Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Pnt2d*)nativeHandle)->Mirrored(*((gp_Pnt2d*)P->Handle));
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCgp_Pnt2d::Mirror(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Pnt2d*)nativeHandle)->Mirror(*((gp_Ax2d*)A->Handle));
}

OCgp_Pnt2d^ OCgp_Pnt2d::Mirrored(OCNaroWrappers::OCgp_Ax2d^ A)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Pnt2d*)nativeHandle)->Mirrored(*((gp_Ax2d*)A->Handle));
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCgp_Pnt2d::Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  ((gp_Pnt2d*)nativeHandle)->Rotate(*((gp_Pnt2d*)P->Handle), Ang);
}

OCgp_Pnt2d^ OCgp_Pnt2d::Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Pnt2d*)nativeHandle)->Rotated(*((gp_Pnt2d*)P->Handle), Ang);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCgp_Pnt2d::Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  ((gp_Pnt2d*)nativeHandle)->Scale(*((gp_Pnt2d*)P->Handle), S);
}

OCgp_Pnt2d^ OCgp_Pnt2d::Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Pnt2d*)nativeHandle)->Scaled(*((gp_Pnt2d*)P->Handle), S);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCgp_Pnt2d::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  ((gp_Pnt2d*)nativeHandle)->Transform(*((gp_Trsf2d*)T->Handle));
}

OCgp_Pnt2d^ OCgp_Pnt2d::Transformed(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Pnt2d*)nativeHandle)->Transformed(*((gp_Trsf2d*)T->Handle));
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCgp_Pnt2d::Translate(OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((gp_Pnt2d*)nativeHandle)->Translate(*((gp_Vec2d*)V->Handle));
}

OCgp_Pnt2d^ OCgp_Pnt2d::Translated(OCNaroWrappers::OCgp_Vec2d^ V)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Pnt2d*)nativeHandle)->Translated(*((gp_Vec2d*)V->Handle));
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCgp_Pnt2d::Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  ((gp_Pnt2d*)nativeHandle)->Translate(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

OCgp_Pnt2d^ OCgp_Pnt2d::Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Pnt2d*)nativeHandle)->Translated(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
  return gcnew OCgp_Pnt2d(tmp);
}


