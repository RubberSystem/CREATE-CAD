// File generated by CPPExt (MPV)
//
#ifndef _gp_Circ2d_OCWrappers_HeaderFile
#define _gp_Circ2d_OCWrappers_HeaderFile

// include native header
#include <gp_Circ2d.hxx>
#include "../Converter.h"


#include "gp_Ax22d.h"
#include "../Standard/Standard_Storable.h"
#include "gp_Ax2d.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2d;
ref class OCgp_Ax22d;
ref class OCgp_Pnt2d;
ref class OCgp_Trsf2d;
ref class OCgp_Vec2d;


//! Describes a circle in the plane (2D space). <br>
//! A circle is defined by its radius and positioned in the <br>
//! plane with a coordinate system (a gp_Ax22d object) as follows: <br>
//! -   the origin of the coordinate system is the center of the circle, and <br>
//! -   the orientation (direct or indirect) of the coordinate <br>
//!   system gives an implicit orientation to the circle (and <br>
//!   defines its trigonometric sense). <br>
//! This positioning coordinate system is the "local <br>
//! coordinate system" of the circle. <br>
//! Note: when a gp_Circ2d circle is converted into a <br>
//! Geom2d_Circle circle, some implicit properties of the <br>
//! circle are used explicitly: <br>
//! -   the implicit orientation corresponds to the direction in <br>
//!   which parameter values increase, <br>
//! -   the starting point for parameterization is that of the "X <br>
//!   Axis" of the local coordinate system (i.e. the "X Axis" of the circle). <br>
//!   See Also <br>
//! GccAna and Geom2dGcc packages which provide <br>
//! functions for constructing circles defined by geometric constraints <br>
//! gce_MakeCirc2d which provides functions for more <br>
//! complex circle constructions <br>
//! Geom2d_Circle which provides additional functions for <br>
//! constructing circles and works, with the parametric <br>
//! equations of circles in particular  gp_Ax22d <br>
public ref class OCgp_Circ2d  {

protected:
  gp_Circ2d* nativeHandle;
  OCgp_Circ2d(OCDummy^) {};

public:
  property gp_Circ2d* Handle
  {
    gp_Circ2d* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Circ2d(gp_Circ2d* nativeHandle);

// Methods PUBLIC

//! creates an indefinite circle. <br>
OCgp_Circ2d();


//!  The location point of XAxis is the center of the circle. <br>
//!  Warnings : <br>
//!  It is not forbidden to create a circle with Radius = 0.0   Raises ConstructionError if Radius < 0.0. <br>//! Raised if Radius < 0.0. <br>
OCgp_Circ2d(OCNaroWrappers::OCgp_Ax2d^ XAxis, Standard_Real Radius, System::Boolean Sense);


//!  Axis defines the Xaxis and Yaxis of the circle which defines <br>
//!  the origin and the sense of parametrization. <br>
//!  The location point of Axis is the center of the circle. <br>
//!  Warnings : <br>
//!  It is not forbidden to create a circle with Radius = 0.0 Raises ConstructionError if Radius < 0.0. <br>//! Raised if Radius < 0.0. <br>
OCgp_Circ2d(OCNaroWrappers::OCgp_Ax22d^ Axis, Standard_Real Radius);

//! Changes the location point (center) of the circle. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Changes the X axis of the circle. <br>
 /*instead*/  void SetXAxis(OCNaroWrappers::OCgp_Ax2d^ A) ;

//! Changes the X axis of the circle. <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax22d^ A) ;

//! Changes the Y axis of the circle. <br>
 /*instead*/  void SetYAxis(OCNaroWrappers::OCgp_Ax2d^ A) ;

//!    Modifies the radius of this circle. <br>
//! This class does not prevent the creation of a circle where <br>
//! Radius is null. <br>
//! Exceptions <br>
//! Standard_ConstructionError if Radius is negative. <br>
 /*instead*/  void SetRadius(Standard_Real Radius) ;

//! Computes the area of the circle. <br>
 /*instead*/  Standard_Real Area() ;


//!  Returns the normalized coefficients from the implicit equation <br>
//!  of the circle : <br>
//!  A * (X**2) + B * (Y**2) + 2*C*(X*Y) + 2*D*X + 2*E*Y + F = 0.0 <br>
 /*instead*/  void Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& D, Standard_Real& E, Standard_Real& F) ;

//! Does <me> contain P ? <br>
//!  Returns True if the distance between P and any point on <br>
//!  the circumference of the circle is lower of equal to <br>
//!  <LinearTolerance>. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real LinearTolerance) ;


//!  Computes the minimum of distance between the point P and any <br>
//!  point on the circumference of the circle. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Pnt2d^ P) ;


//!  Computes the square distance between <me> and the point P. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! computes the circumference of the circle. <br>
 /*instead*/  Standard_Real Length() ;

//! Returns the location point (center) of the circle. <br>
 /*instead*/  OCgp_Pnt2d^ Location() ;

//! Returns the radius value of the circle. <br>
 /*instead*/  Standard_Real Radius() ;

//! returns the position of the circle. <br>
 /*instead*/  OCgp_Ax22d^ Axis() ;

//! returns the position of the circle. Idem Axis(me). <br>
 /*instead*/  OCgp_Ax22d^ Position() ;

//! returns the X axis of the circle. <br>
 /*instead*/  OCgp_Ax2d^ XAxis() ;

//! Returns the Y axis of the circle. <br>//! Reverses the direction of the circle. <br>
 /*instead*/  OCgp_Ax2d^ YAxis() ;

//! Reverses the orientation of the local coordinate system <br>
//! of this circle (the "Y Direction" is reversed) and therefore <br>
//! changes the implicit orientation of this circle. <br>
//!   Reverse assigns the result to this circle, <br>
 /*instead*/  void Reverse() ;

//! Reverses the orientation of the local coordinate system <br>
//! of this circle (the "Y Direction" is reversed) and therefore <br>
//! changes the implicit orientation of this circle. <br>
//!   Reversed creates a new circle. <br>
 /*instead*/  OCgp_Circ2d^ Reversed() ;

//! Returns true if the local coordinate system is direct <br>
//! and false in the other case. <br>
 /*instead*/  System::Boolean IsDirect() ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt2d^ P) ;


//!  Performs the symmetrical transformation of a circle with respect <br>
//!  to the point P which is the center of the symmetry <br>
 /*instead*/  OCgp_Circ2d^ Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2d^ A) ;


//!  Performs the symmetrical transformation of a circle with respect <br>
//!  to an axis placement which is the axis of the symmetry. <br>
 /*instead*/  OCgp_Circ2d^ Mirrored(OCNaroWrappers::OCgp_Ax2d^ A) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang) ;


//!  Rotates a circle. P is the center of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Circ2d^ Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S) ;


//!  Scales a circle. S is the scaling value. <br>
//! Warnings : <br>
//!  If S is negative the radius stay positive but <br>
//!  the "XAxis" and the "YAxis" are  reversed as for <br>
//!  an ellipse. <br>
 /*instead*/  OCgp_Circ2d^ Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;


//!  Transforms a circle with the transformation T from class Trsf2d. <br>
 /*instead*/  OCgp_Circ2d^ Transformed(OCNaroWrappers::OCgp_Trsf2d^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec2d^ V) ;


//!  Translates a circle in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Circ2d^ Translated(OCNaroWrappers::OCgp_Vec2d^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;


//!  Translates a circle from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Circ2d^ Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;

~OCgp_Circ2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
