// File generated by CPPExt (CPP file)
//

#include "gp_Ax22d.h"
#include "../Converter.h"
#include "gp_Pnt2d.h"
#include "gp_Dir2d.h"
#include "gp_Ax2d.h"
#include "gp_Trsf2d.h"
#include "gp_Vec2d.h"


using namespace OCNaroWrappers;

OCgp_Ax22d::OCgp_Ax22d(gp_Ax22d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Ax22d::OCgp_Ax22d() 
{
  nativeHandle = new gp_Ax22d();
}

OCgp_Ax22d::OCgp_Ax22d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ Vx, OCNaroWrappers::OCgp_Dir2d^ Vy) 
{
  nativeHandle = new gp_Ax22d(*((gp_Pnt2d*)P->Handle), *((gp_Dir2d*)Vx->Handle), *((gp_Dir2d*)Vy->Handle));
}

OCgp_Ax22d::OCgp_Ax22d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ V, System::Boolean Sense) 
{
  nativeHandle = new gp_Ax22d(*((gp_Pnt2d*)P->Handle), *((gp_Dir2d*)V->Handle), OCConverter::BooleanToStandardBoolean(Sense));
}

OCgp_Ax22d::OCgp_Ax22d(OCNaroWrappers::OCgp_Ax2d^ A, System::Boolean Sense) 
{
  nativeHandle = new gp_Ax22d(*((gp_Ax2d*)A->Handle), OCConverter::BooleanToStandardBoolean(Sense));
}

 void OCgp_Ax22d::SetAxis(OCNaroWrappers::OCgp_Ax22d^ A1)
{
  ((gp_Ax22d*)nativeHandle)->SetAxis(*((gp_Ax22d*)A1->Handle));
}

 void OCgp_Ax22d::SetXAxis(OCNaroWrappers::OCgp_Ax2d^ A1)
{
  ((gp_Ax22d*)nativeHandle)->SetXAxis(*((gp_Ax2d*)A1->Handle));
}

 void OCgp_Ax22d::SetYAxis(OCNaroWrappers::OCgp_Ax2d^ A1)
{
  ((gp_Ax22d*)nativeHandle)->SetYAxis(*((gp_Ax2d*)A1->Handle));
}

 void OCgp_Ax22d::SetLocation(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Ax22d*)nativeHandle)->SetLocation(*((gp_Pnt2d*)P->Handle));
}

 void OCgp_Ax22d::SetXDirection(OCNaroWrappers::OCgp_Dir2d^ Vx)
{
  ((gp_Ax22d*)nativeHandle)->SetXDirection(*((gp_Dir2d*)Vx->Handle));
}

 void OCgp_Ax22d::SetYDirection(OCNaroWrappers::OCgp_Dir2d^ Vy)
{
  ((gp_Ax22d*)nativeHandle)->SetYDirection(*((gp_Dir2d*)Vy->Handle));
}

OCgp_Ax2d^ OCgp_Ax22d::XAxis()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax22d*)nativeHandle)->XAxis();
  return gcnew OCgp_Ax2d(tmp);
}

OCgp_Ax2d^ OCgp_Ax22d::YAxis()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = ((gp_Ax22d*)nativeHandle)->YAxis();
  return gcnew OCgp_Ax2d(tmp);
}

OCgp_Pnt2d^ OCgp_Ax22d::Location()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((gp_Ax22d*)nativeHandle)->Location();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Dir2d^ OCgp_Ax22d::XDirection()
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Ax22d*)nativeHandle)->XDirection();
  return gcnew OCgp_Dir2d(tmp);
}

OCgp_Dir2d^ OCgp_Ax22d::YDirection()
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Ax22d*)nativeHandle)->YDirection();
  return gcnew OCgp_Dir2d(tmp);
}

 void OCgp_Ax22d::Mirror(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((gp_Ax22d*)nativeHandle)->Mirror(*((gp_Pnt2d*)P->Handle));
}

OCgp_Ax22d^ OCgp_Ax22d::Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  gp_Ax22d* tmp = new gp_Ax22d();
  *tmp = ((gp_Ax22d*)nativeHandle)->Mirrored(*((gp_Pnt2d*)P->Handle));
  return gcnew OCgp_Ax22d(tmp);
}

 void OCgp_Ax22d::Mirror(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Ax22d*)nativeHandle)->Mirror(*((gp_Ax2d*)A->Handle));
}

OCgp_Ax22d^ OCgp_Ax22d::Mirrored(OCNaroWrappers::OCgp_Ax2d^ A)
{
  gp_Ax22d* tmp = new gp_Ax22d();
  *tmp = ((gp_Ax22d*)nativeHandle)->Mirrored(*((gp_Ax2d*)A->Handle));
  return gcnew OCgp_Ax22d(tmp);
}

 void OCgp_Ax22d::Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  ((gp_Ax22d*)nativeHandle)->Rotate(*((gp_Pnt2d*)P->Handle), Ang);
}

OCgp_Ax22d^ OCgp_Ax22d::Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  gp_Ax22d* tmp = new gp_Ax22d();
  *tmp = ((gp_Ax22d*)nativeHandle)->Rotated(*((gp_Pnt2d*)P->Handle), Ang);
  return gcnew OCgp_Ax22d(tmp);
}

 void OCgp_Ax22d::Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  ((gp_Ax22d*)nativeHandle)->Scale(*((gp_Pnt2d*)P->Handle), S);
}

OCgp_Ax22d^ OCgp_Ax22d::Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  gp_Ax22d* tmp = new gp_Ax22d();
  *tmp = ((gp_Ax22d*)nativeHandle)->Scaled(*((gp_Pnt2d*)P->Handle), S);
  return gcnew OCgp_Ax22d(tmp);
}

 void OCgp_Ax22d::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  ((gp_Ax22d*)nativeHandle)->Transform(*((gp_Trsf2d*)T->Handle));
}

OCgp_Ax22d^ OCgp_Ax22d::Transformed(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  gp_Ax22d* tmp = new gp_Ax22d();
  *tmp = ((gp_Ax22d*)nativeHandle)->Transformed(*((gp_Trsf2d*)T->Handle));
  return gcnew OCgp_Ax22d(tmp);
}

 void OCgp_Ax22d::Translate(OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((gp_Ax22d*)nativeHandle)->Translate(*((gp_Vec2d*)V->Handle));
}

OCgp_Ax22d^ OCgp_Ax22d::Translated(OCNaroWrappers::OCgp_Vec2d^ V)
{
  gp_Ax22d* tmp = new gp_Ax22d();
  *tmp = ((gp_Ax22d*)nativeHandle)->Translated(*((gp_Vec2d*)V->Handle));
  return gcnew OCgp_Ax22d(tmp);
}

 void OCgp_Ax22d::Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  ((gp_Ax22d*)nativeHandle)->Translate(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

OCgp_Ax22d^ OCgp_Ax22d::Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  gp_Ax22d* tmp = new gp_Ax22d();
  *tmp = ((gp_Ax22d*)nativeHandle)->Translated(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
  return gcnew OCgp_Ax22d(tmp);
}


