// File generated by CPPExt (CPP file)
//

#include "gp_Ax2.h"
#include "../Converter.h"
#include "gp_Pnt.h"
#include "gp_Dir.h"
#include "gp_Ax1.h"
#include "gp_Trsf.h"
#include "gp_Vec.h"


using namespace OCNaroWrappers;

OCgp_Ax2::OCgp_Ax2(gp_Ax2* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Ax2::OCgp_Ax2() 
{
  nativeHandle = new gp_Ax2();
}

OCgp_Ax2::OCgp_Ax2(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ N, OCNaroWrappers::OCgp_Dir^ Vx) 
{
  nativeHandle = new gp_Ax2(*((gp_Pnt*)P->Handle), *((gp_Dir*)N->Handle), *((gp_Dir*)Vx->Handle));
}

OCgp_Ax2::OCgp_Ax2(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V) 
{
  nativeHandle = new gp_Ax2(*((gp_Pnt*)P->Handle), *((gp_Dir*)V->Handle));
}

 void OCgp_Ax2::SetAxis(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Ax2*)nativeHandle)->SetAxis(*((gp_Ax1*)A1->Handle));
}

 void OCgp_Ax2::SetDirection(OCNaroWrappers::OCgp_Dir^ V)
{
  ((gp_Ax2*)nativeHandle)->SetDirection(*((gp_Dir*)V->Handle));
}

 void OCgp_Ax2::SetLocation(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Ax2*)nativeHandle)->SetLocation(*((gp_Pnt*)P->Handle));
}

 void OCgp_Ax2::SetXDirection(OCNaroWrappers::OCgp_Dir^ Vx)
{
  ((gp_Ax2*)nativeHandle)->SetXDirection(*((gp_Dir*)Vx->Handle));
}

 void OCgp_Ax2::SetYDirection(OCNaroWrappers::OCgp_Dir^ Vy)
{
  ((gp_Ax2*)nativeHandle)->SetYDirection(*((gp_Dir*)Vy->Handle));
}

 Standard_Real OCgp_Ax2::Angle(OCNaroWrappers::OCgp_Ax2^ Other)
{
  return ((gp_Ax2*)nativeHandle)->Angle(*((gp_Ax2*)Other->Handle));
}

OCgp_Ax1^ OCgp_Ax2::Axis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax2*)nativeHandle)->Axis();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Dir^ OCgp_Ax2::Direction()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Ax2*)nativeHandle)->Direction();
  return gcnew OCgp_Dir(tmp);
}

OCgp_Pnt^ OCgp_Ax2::Location()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Ax2*)nativeHandle)->Location();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Dir^ OCgp_Ax2::XDirection()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Ax2*)nativeHandle)->XDirection();
  return gcnew OCgp_Dir(tmp);
}

OCgp_Dir^ OCgp_Ax2::YDirection()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Ax2*)nativeHandle)->YDirection();
  return gcnew OCgp_Dir(tmp);
}

 System::Boolean OCgp_Ax2::IsCoplanar(OCNaroWrappers::OCgp_Ax2^ Other, Standard_Real LinearTolerance, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax2*)nativeHandle)->IsCoplanar(*((gp_Ax2*)Other->Handle), LinearTolerance, AngularTolerance));
}

 System::Boolean OCgp_Ax2::IsCoplanar(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real LinearTolerance, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax2*)nativeHandle)->IsCoplanar(*((gp_Ax1*)A1->Handle), LinearTolerance, AngularTolerance));
}

 void OCgp_Ax2::Mirror(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Ax2*)nativeHandle)->Mirror(*((gp_Pnt*)P->Handle));
}

OCgp_Ax2^ OCgp_Ax2::Mirrored(OCNaroWrappers::OCgp_Pnt^ P)
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Ax2*)nativeHandle)->Mirrored(*((gp_Pnt*)P->Handle));
  return gcnew OCgp_Ax2(tmp);
}

 void OCgp_Ax2::Mirror(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Ax2*)nativeHandle)->Mirror(*((gp_Ax1*)A1->Handle));
}

OCgp_Ax2^ OCgp_Ax2::Mirrored(OCNaroWrappers::OCgp_Ax1^ A1)
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Ax2*)nativeHandle)->Mirrored(*((gp_Ax1*)A1->Handle));
  return gcnew OCgp_Ax2(tmp);
}

 void OCgp_Ax2::Mirror(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Ax2*)nativeHandle)->Mirror(*((gp_Ax2*)A2->Handle));
}

OCgp_Ax2^ OCgp_Ax2::Mirrored(OCNaroWrappers::OCgp_Ax2^ A2)
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Ax2*)nativeHandle)->Mirrored(*((gp_Ax2*)A2->Handle));
  return gcnew OCgp_Ax2(tmp);
}

 void OCgp_Ax2::Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  ((gp_Ax2*)nativeHandle)->Rotate(*((gp_Ax1*)A1->Handle), Ang);
}

OCgp_Ax2^ OCgp_Ax2::Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Ax2*)nativeHandle)->Rotated(*((gp_Ax1*)A1->Handle), Ang);
  return gcnew OCgp_Ax2(tmp);
}

 void OCgp_Ax2::Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  ((gp_Ax2*)nativeHandle)->Scale(*((gp_Pnt*)P->Handle), S);
}

OCgp_Ax2^ OCgp_Ax2::Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Ax2*)nativeHandle)->Scaled(*((gp_Pnt*)P->Handle), S);
  return gcnew OCgp_Ax2(tmp);
}

 void OCgp_Ax2::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  ((gp_Ax2*)nativeHandle)->Transform(*((gp_Trsf*)T->Handle));
}

OCgp_Ax2^ OCgp_Ax2::Transformed(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Ax2*)nativeHandle)->Transformed(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_Ax2(tmp);
}

 void OCgp_Ax2::Translate(OCNaroWrappers::OCgp_Vec^ V)
{
  ((gp_Ax2*)nativeHandle)->Translate(*((gp_Vec*)V->Handle));
}

OCgp_Ax2^ OCgp_Ax2::Translated(OCNaroWrappers::OCgp_Vec^ V)
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Ax2*)nativeHandle)->Translated(*((gp_Vec*)V->Handle));
  return gcnew OCgp_Ax2(tmp);
}

 void OCgp_Ax2::Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  ((gp_Ax2*)nativeHandle)->Translate(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
}

OCgp_Ax2^ OCgp_Ax2::Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Ax2*)nativeHandle)->Translated(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
  return gcnew OCgp_Ax2(tmp);
}


