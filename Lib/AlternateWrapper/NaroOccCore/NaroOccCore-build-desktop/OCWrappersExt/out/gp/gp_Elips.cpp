// File generated by CPPExt (CPP file)
//

#include "gp_Elips.h"
#include "../Converter.h"
#include "gp_Ax2.h"
#include "gp_Ax1.h"
#include "gp_Pnt.h"
#include "gp_Trsf.h"
#include "gp_Vec.h"


using namespace OCNaroWrappers;

OCgp_Elips::OCgp_Elips(gp_Elips* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Elips::OCgp_Elips() 
{
  nativeHandle = new gp_Elips();
}

OCgp_Elips::OCgp_Elips(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real MajorRadius, Standard_Real MinorRadius) 
{
  nativeHandle = new gp_Elips(*((gp_Ax2*)A2->Handle), MajorRadius, MinorRadius);
}

 void OCgp_Elips::SetAxis(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Elips*)nativeHandle)->SetAxis(*((gp_Ax1*)A1->Handle));
}

 void OCgp_Elips::SetLocation(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Elips*)nativeHandle)->SetLocation(*((gp_Pnt*)P->Handle));
}

 void OCgp_Elips::SetMajorRadius(Standard_Real MajorRadius)
{
  ((gp_Elips*)nativeHandle)->SetMajorRadius(MajorRadius);
}

 void OCgp_Elips::SetMinorRadius(Standard_Real MinorRadius)
{
  ((gp_Elips*)nativeHandle)->SetMinorRadius(MinorRadius);
}

 void OCgp_Elips::SetPosition(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Elips*)nativeHandle)->SetPosition(*((gp_Ax2*)A2->Handle));
}

 Standard_Real OCgp_Elips::Area()
{
  return ((gp_Elips*)nativeHandle)->Area();
}

OCgp_Ax1^ OCgp_Elips::Axis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Elips*)nativeHandle)->Axis();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Ax1^ OCgp_Elips::Directrix1()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Elips*)nativeHandle)->Directrix1();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Ax1^ OCgp_Elips::Directrix2()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Elips*)nativeHandle)->Directrix2();
  return gcnew OCgp_Ax1(tmp);
}

 Standard_Real OCgp_Elips::Eccentricity()
{
  return ((gp_Elips*)nativeHandle)->Eccentricity();
}

 Standard_Real OCgp_Elips::Focal()
{
  return ((gp_Elips*)nativeHandle)->Focal();
}

OCgp_Pnt^ OCgp_Elips::Focus1()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Elips*)nativeHandle)->Focus1();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCgp_Elips::Focus2()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Elips*)nativeHandle)->Focus2();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCgp_Elips::Location()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Elips*)nativeHandle)->Location();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCgp_Elips::MajorRadius()
{
  return ((gp_Elips*)nativeHandle)->MajorRadius();
}

 Standard_Real OCgp_Elips::MinorRadius()
{
  return ((gp_Elips*)nativeHandle)->MinorRadius();
}

 Standard_Real OCgp_Elips::Parameter()
{
  return ((gp_Elips*)nativeHandle)->Parameter();
}

OCgp_Ax2^ OCgp_Elips::Position()
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Elips*)nativeHandle)->Position();
  return gcnew OCgp_Ax2(tmp);
}

OCgp_Ax1^ OCgp_Elips::XAxis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Elips*)nativeHandle)->XAxis();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Ax1^ OCgp_Elips::YAxis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Elips*)nativeHandle)->YAxis();
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Elips::Mirror(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Elips*)nativeHandle)->Mirror(*((gp_Pnt*)P->Handle));
}

OCgp_Elips^ OCgp_Elips::Mirrored(OCNaroWrappers::OCgp_Pnt^ P)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((gp_Elips*)nativeHandle)->Mirrored(*((gp_Pnt*)P->Handle));
  return gcnew OCgp_Elips(tmp);
}

 void OCgp_Elips::Mirror(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Elips*)nativeHandle)->Mirror(*((gp_Ax1*)A1->Handle));
}

OCgp_Elips^ OCgp_Elips::Mirrored(OCNaroWrappers::OCgp_Ax1^ A1)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((gp_Elips*)nativeHandle)->Mirrored(*((gp_Ax1*)A1->Handle));
  return gcnew OCgp_Elips(tmp);
}

 void OCgp_Elips::Mirror(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Elips*)nativeHandle)->Mirror(*((gp_Ax2*)A2->Handle));
}

OCgp_Elips^ OCgp_Elips::Mirrored(OCNaroWrappers::OCgp_Ax2^ A2)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((gp_Elips*)nativeHandle)->Mirrored(*((gp_Ax2*)A2->Handle));
  return gcnew OCgp_Elips(tmp);
}

 void OCgp_Elips::Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  ((gp_Elips*)nativeHandle)->Rotate(*((gp_Ax1*)A1->Handle), Ang);
}

OCgp_Elips^ OCgp_Elips::Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((gp_Elips*)nativeHandle)->Rotated(*((gp_Ax1*)A1->Handle), Ang);
  return gcnew OCgp_Elips(tmp);
}

 void OCgp_Elips::Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  ((gp_Elips*)nativeHandle)->Scale(*((gp_Pnt*)P->Handle), S);
}

OCgp_Elips^ OCgp_Elips::Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((gp_Elips*)nativeHandle)->Scaled(*((gp_Pnt*)P->Handle), S);
  return gcnew OCgp_Elips(tmp);
}

 void OCgp_Elips::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  ((gp_Elips*)nativeHandle)->Transform(*((gp_Trsf*)T->Handle));
}

OCgp_Elips^ OCgp_Elips::Transformed(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((gp_Elips*)nativeHandle)->Transformed(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_Elips(tmp);
}

 void OCgp_Elips::Translate(OCNaroWrappers::OCgp_Vec^ V)
{
  ((gp_Elips*)nativeHandle)->Translate(*((gp_Vec*)V->Handle));
}

OCgp_Elips^ OCgp_Elips::Translated(OCNaroWrappers::OCgp_Vec^ V)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((gp_Elips*)nativeHandle)->Translated(*((gp_Vec*)V->Handle));
  return gcnew OCgp_Elips(tmp);
}

 void OCgp_Elips::Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  ((gp_Elips*)nativeHandle)->Translate(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
}

OCgp_Elips^ OCgp_Elips::Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((gp_Elips*)nativeHandle)->Translated(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
  return gcnew OCgp_Elips(tmp);
}


