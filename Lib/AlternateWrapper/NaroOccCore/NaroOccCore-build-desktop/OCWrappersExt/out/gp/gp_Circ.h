// File generated by CPPExt (MPV)
//
#ifndef _gp_Circ_OCWrappers_HeaderFile
#define _gp_Circ_OCWrappers_HeaderFile

// include native header
#include <gp_Circ.hxx>
#include "../Converter.h"


#include "gp_Ax2.h"
#include "../Standard/Standard_Storable.h"
#include "gp_Ax1.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2;
ref class OCgp_Ax1;
ref class OCgp_Pnt;
ref class OCgp_Trsf;
ref class OCgp_Vec;



//!  Describes a circle in 3D space. <br>
//! A circle is defined by its radius and positioned in space <br>
//! with a coordinate system (a gp_Ax2 object) as follows: <br>
//! -   the origin of the coordinate system is the center of the circle, and <br>
//! -   the origin, "X Direction" and "Y Direction" of the <br>
//!   coordinate system define the plane of the circle. <br>
//! This positioning coordinate system is the "local <br>
//! coordinate system" of the circle. Its "main Direction" <br>
//! gives the normal vector to the plane of the circle. The <br>
//! "main Axis" of the coordinate system is referred to as <br>
//! the "Axis" of the circle. <br>
//! Note: when a gp_Circ circle is converted into a <br>
//! Geom_Circle circle, some implicit properties of the <br>
//! circle are used explicitly: <br>
//! -   the "main Direction" of the local coordinate system <br>
//!   gives an implicit orientation to the circle (and defines <br>
//!   its trigonometric sense), <br>
//! -   this orientation corresponds to the direction in <br>
//!   which parameter values increase, <br>
//! -   the starting point for parameterization is that of the <br>
//! "X Axis" of the local coordinate system (i.e. the "X Axis" of the circle). <br>
//! See Also <br>
//! gce_MakeCirc which provides functions for more complex circle constructions <br>
//! Geom_Circle which provides additional functions for <br>
//! constructing circles and works, in particular, with the <br>
//! parametric equations of circles <br>
public ref class OCgp_Circ  {

protected:
  gp_Circ* nativeHandle;
  OCgp_Circ(OCDummy^) {};

public:
  property gp_Circ* Handle
  {
    gp_Circ* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Circ(gp_Circ* nativeHandle);

// Methods PUBLIC

//! Creates an indefinite circle. <br>
OCgp_Circ();


//!  A2 locates the circle and gives its orientation in 3D space. <br>
//! Warnings : <br>
//!  It is not forbidden to create a circle with Radius = 0.0  Raises ConstructionError if Radius < 0.0 <br>
OCgp_Circ(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Radius);


//!  Changes the main axis of the circle. It is the axis <br>
//!  perpendicular to the plane of the circle. <br>
//! Raises ConstructionError if the direction of A1 <br>
//! is parallel to the "XAxis" of the circle. <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Changes the "Location" point (center) of the circle. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Changes the position of the circle. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax2^ A2) ;

//! Modifies the radius of this circle. <br>
//! Warning. This class does not prevent the creation of a circle where Radius is null. <br>
//! Exceptions <br>
//! Standard_ConstructionError if Radius is negative. <br>
 /*instead*/  void SetRadius(Standard_Real Radius) ;

//! Computes the area of the circle. <br>
 /*instead*/  Standard_Real Area() ;


//!  Returns the main axis of the circle. <br>
//!  It is the axis perpendicular to the plane of the circle, <br>
//!  passing through the "Location" point (center) of the circle. <br>
 /*instead*/  OCgp_Ax1^ Axis() ;

//!  Computes the circumference of the circle. <br>
 /*instead*/  Standard_Real Length() ;


//!  Returns the center of the circle. It is the <br>
//!  "Location" point of the local coordinate system <br>
//!  of the circle <br>
 /*instead*/  OCgp_Pnt^ Location() ;


//!  Returns the position of the circle. <br>
//!  It is the local coordinate system of the circle. <br>
 /*instead*/  OCgp_Ax2^ Position() ;

//!  Returns the radius of this circle. <br>
 /*instead*/  Standard_Real Radius() ;


//!  Returns the "XAxis" of the circle. <br>
//!  This axis is perpendicular to the axis of the conic. <br>
//!  This axis and the "Yaxis" define the plane of the conic. <br>
 /*instead*/  OCgp_Ax1^ XAxis() ;


//!  Returns the "YAxis" of the circle. <br>
//!  This axis and the "Xaxis" define the plane of the conic. <br>
//!  The "YAxis" is perpendicular to the "Xaxis". <br>
 /*instead*/  OCgp_Ax1^ YAxis() ;


//!  Computes the minimum of distance between the point P and <br>
//!  any point on the circumference of the circle. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Computes the square distance between <me> and the point P. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Returns True if the point P is on the circumference. <br>
//!  The distance between <me> and <P> must be lower or <br>
//!  equal to LinearTolerance. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real LinearTolerance) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of a circle <br>
//!  with respect to the point P which is the center of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Circ^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Performs the symmetrical transformation of a circle with <br>
//!  respect to an axis placement which is the axis of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Circ^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Performs the symmetrical transformation of a circle with respect <br>
//!  to a plane. The axis placement A2 locates the plane of the <br>
//!  of the symmetry : (Location, XDirection, YDirection). <br>
 /*instead*/  OCgp_Circ^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Rotates a circle. A1 is the axis of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Circ^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Scales a circle. S is the scaling value. <br>
//!  Warnings : <br>
//!  If S is negative the radius stay positive but <br>
//!  the "XAxis" and the "YAxis" are  reversed as for <br>
//!  an ellipse. <br>
 /*instead*/  OCgp_Circ^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


//!  Transforms a circle with the transformation T from class Trsf. <br>
 /*instead*/  OCgp_Circ^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates a circle in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Circ^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


//!  Translates a circle from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Circ^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCgp_Circ()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
