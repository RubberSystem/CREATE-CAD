// File generated by CPPExt (CPP file)
//

#include "gp_Circ.h"
#include "../Converter.h"
#include "gp_Ax2.h"
#include "gp_Ax1.h"
#include "gp_Pnt.h"
#include "gp_Trsf.h"
#include "gp_Vec.h"


using namespace OCNaroWrappers;

OCgp_Circ::OCgp_Circ(gp_Circ* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Circ::OCgp_Circ() 
{
  nativeHandle = new gp_Circ();
}

OCgp_Circ::OCgp_Circ(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Radius) 
{
  nativeHandle = new gp_Circ(*((gp_Ax2*)A2->Handle), Radius);
}

 void OCgp_Circ::SetAxis(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Circ*)nativeHandle)->SetAxis(*((gp_Ax1*)A1->Handle));
}

 void OCgp_Circ::SetLocation(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Circ*)nativeHandle)->SetLocation(*((gp_Pnt*)P->Handle));
}

 void OCgp_Circ::SetPosition(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Circ*)nativeHandle)->SetPosition(*((gp_Ax2*)A2->Handle));
}

 void OCgp_Circ::SetRadius(Standard_Real Radius)
{
  ((gp_Circ*)nativeHandle)->SetRadius(Radius);
}

 Standard_Real OCgp_Circ::Area()
{
  return ((gp_Circ*)nativeHandle)->Area();
}

OCgp_Ax1^ OCgp_Circ::Axis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Circ*)nativeHandle)->Axis();
  return gcnew OCgp_Ax1(tmp);
}

 Standard_Real OCgp_Circ::Length()
{
  return ((gp_Circ*)nativeHandle)->Length();
}

OCgp_Pnt^ OCgp_Circ::Location()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Circ*)nativeHandle)->Location();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Ax2^ OCgp_Circ::Position()
{
  gp_Ax2* tmp = new gp_Ax2();
  *tmp = ((gp_Circ*)nativeHandle)->Position();
  return gcnew OCgp_Ax2(tmp);
}

 Standard_Real OCgp_Circ::Radius()
{
  return ((gp_Circ*)nativeHandle)->Radius();
}

OCgp_Ax1^ OCgp_Circ::XAxis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Circ*)nativeHandle)->XAxis();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Ax1^ OCgp_Circ::YAxis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Circ*)nativeHandle)->YAxis();
  return gcnew OCgp_Ax1(tmp);
}

 Standard_Real OCgp_Circ::Distance(OCNaroWrappers::OCgp_Pnt^ P)
{
  return ((gp_Circ*)nativeHandle)->Distance(*((gp_Pnt*)P->Handle));
}

 Standard_Real OCgp_Circ::SquareDistance(OCNaroWrappers::OCgp_Pnt^ P)
{
  return ((gp_Circ*)nativeHandle)->SquareDistance(*((gp_Pnt*)P->Handle));
}

 System::Boolean OCgp_Circ::Contains(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real LinearTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Circ*)nativeHandle)->Contains(*((gp_Pnt*)P->Handle), LinearTolerance));
}

 void OCgp_Circ::Mirror(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Circ*)nativeHandle)->Mirror(*((gp_Pnt*)P->Handle));
}

OCgp_Circ^ OCgp_Circ::Mirrored(OCNaroWrappers::OCgp_Pnt^ P)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((gp_Circ*)nativeHandle)->Mirrored(*((gp_Pnt*)P->Handle));
  return gcnew OCgp_Circ(tmp);
}

 void OCgp_Circ::Mirror(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Circ*)nativeHandle)->Mirror(*((gp_Ax1*)A1->Handle));
}

OCgp_Circ^ OCgp_Circ::Mirrored(OCNaroWrappers::OCgp_Ax1^ A1)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((gp_Circ*)nativeHandle)->Mirrored(*((gp_Ax1*)A1->Handle));
  return gcnew OCgp_Circ(tmp);
}

 void OCgp_Circ::Mirror(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Circ*)nativeHandle)->Mirror(*((gp_Ax2*)A2->Handle));
}

OCgp_Circ^ OCgp_Circ::Mirrored(OCNaroWrappers::OCgp_Ax2^ A2)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((gp_Circ*)nativeHandle)->Mirrored(*((gp_Ax2*)A2->Handle));
  return gcnew OCgp_Circ(tmp);
}

 void OCgp_Circ::Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  ((gp_Circ*)nativeHandle)->Rotate(*((gp_Ax1*)A1->Handle), Ang);
}

OCgp_Circ^ OCgp_Circ::Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((gp_Circ*)nativeHandle)->Rotated(*((gp_Ax1*)A1->Handle), Ang);
  return gcnew OCgp_Circ(tmp);
}

 void OCgp_Circ::Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  ((gp_Circ*)nativeHandle)->Scale(*((gp_Pnt*)P->Handle), S);
}

OCgp_Circ^ OCgp_Circ::Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((gp_Circ*)nativeHandle)->Scaled(*((gp_Pnt*)P->Handle), S);
  return gcnew OCgp_Circ(tmp);
}

 void OCgp_Circ::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  ((gp_Circ*)nativeHandle)->Transform(*((gp_Trsf*)T->Handle));
}

OCgp_Circ^ OCgp_Circ::Transformed(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((gp_Circ*)nativeHandle)->Transformed(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_Circ(tmp);
}

 void OCgp_Circ::Translate(OCNaroWrappers::OCgp_Vec^ V)
{
  ((gp_Circ*)nativeHandle)->Translate(*((gp_Vec*)V->Handle));
}

OCgp_Circ^ OCgp_Circ::Translated(OCNaroWrappers::OCgp_Vec^ V)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((gp_Circ*)nativeHandle)->Translated(*((gp_Vec*)V->Handle));
  return gcnew OCgp_Circ(tmp);
}

 void OCgp_Circ::Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  ((gp_Circ*)nativeHandle)->Translate(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
}

OCgp_Circ^ OCgp_Circ::Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((gp_Circ*)nativeHandle)->Translated(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
  return gcnew OCgp_Circ(tmp);
}


