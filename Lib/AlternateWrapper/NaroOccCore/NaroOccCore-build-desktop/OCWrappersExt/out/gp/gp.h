// File generated by CPPExt (Package)
//

#ifndef _gp_OCWrappers_HeaderFile
#define _gp_OCWrappers_HeaderFile

// Include the wrapped header
#include <gp.hxx>

#include "gp_XYZ.h"
#include "gp_Mat.h"
#include "gp_Quaternion.h"
#include "gp_Trsf.h"
#include "gp_GTrsf.h"
#include "gp_Pnt.h"
#include "gp_Vec.h"
#include "gp_Dir.h"
#include "gp_Ax1.h"
#include "gp_Ax2.h"
#include "gp_Ax3.h"
#include "gp_Lin.h"
#include "gp_Circ.h"
#include "gp_Elips.h"
#include "gp_Hypr.h"
#include "gp_Parab.h"
#include "gp_Pln.h"
#include "gp_Cylinder.h"
#include "gp_Sphere.h"
#include "gp_Torus.h"
#include "gp_Cone.h"
#include "gp_XY.h"
#include "gp_Mat2d.h"
#include "gp_Trsf2d.h"
#include "gp_GTrsf2d.h"
#include "gp_Pnt2d.h"
#include "gp_Vec2d.h"
#include "gp_Dir2d.h"
#include "gp_Ax2d.h"
#include "gp_Ax22d.h"
#include "gp_Lin2d.h"
#include "gp_Circ2d.h"
#include "gp_Elips2d.h"
#include "gp_Hypr2d.h"
#include "gp_Parab2d.h"


namespace OCNaroWrappers
{

//!  The geometric processor package, called gp, provides an <br>
//!  implementation of entities used  : <br>
//!  . for algebraic calculation such as "XYZ" coordinates, "Mat" <br>
//!    matrix <br>
//!  . for basis analytic geometry such as Transformations, point, <br>
//!    vector, line, plane, axis placement, conics, and elementary <br>
//!    surfaces. <br>
//!  These entities are defined in 2d and 3d space. <br>
//!  All the classes of this package are non-persistent. <br>
public ref class OCgp abstract sealed
{

public:
// Methods


//!  In geometric computations, defines the tolerance criterion <br>
//! used to determine when two numbers can be considered equal. <br>
//! Many class functions use this tolerance criterion, for <br>
//! example, to avoid division by zero in geometric <br>
//! computations. In the documentation, tolerance criterion is <br>
//! always referred to as gp::Resolution(). <br>
static /*instead*/  Standard_Real Resolution() ;

//! Identifies a Cartesian point with coordinates X = Y = Z = 0.0.0 <br>
static /*instead*/  OCgp_Pnt^ Origin() ;

//! Returns a unit vector with the combination (1,0,0) <br>
static /*instead*/  OCgp_Dir^ DX() ;

//! Returns a unit vector with the combination (0,1,0) <br>
static /*instead*/  OCgp_Dir^ DY() ;

//! Returns a unit vector with the combination (0,0,1) <br>
static /*instead*/  OCgp_Dir^ DZ() ;

//!Identifies an axis where its origin is Origin <br>
//! and its unit vector coordinates  X = 1.0,  Y = Z = 0.0 <br>
static /*instead*/  OCgp_Ax1^ OX() ;

//!Identifies an axis where its origin is Origin <br>
//! and its unit vector coordinates Y = 1.0,  X = Z = 0.0 <br>
static /*instead*/  OCgp_Ax1^ OY() ;

//!Identifies an axis where its origin is Origin <br>
//! and its unit vector coordinates Z = 1.0,  Y = X = 0.0 <br>
static /*instead*/  OCgp_Ax1^ OZ() ;

//!Identifies a coordinate system where its origin is Origin, <br>
//! and its "main Direction" and "X Direction" coordinates <br>
//!  Z = 1.0, X = Y =0.0 and X direction coordinates X = 1.0, Y = Z = 0.0 <br>
static /*instead*/  OCgp_Ax2^ XOY() ;

//!Identifies a coordinate system where its origin is Origin, <br>
//! and its "main Direction" and "X Direction" coordinates <br>
//!  Y = 1.0, X = Z =0.0 and X direction coordinates Z = 1.0, X = Y = 0.0 <br>
static /*instead*/  OCgp_Ax2^ ZOX() ;

//!Identifies a coordinate system where its origin is Origin, <br>
//! and its "main Direction" and "X Direction" coordinates <br>
//!  X = 1.0, Z = Y =0.0 and X direction coordinates Y = 1.0, X = Z = 0.0 <br>//! In 2D space <br>
static /*instead*/  OCgp_Ax2^ YOZ() ;

//! Identifies a Cartesian point with coordinates X = Y = 0.0 <br>
static /*instead*/  OCgp_Pnt2d^ Origin2d() ;

//! Returns a unit vector with the combinations (1,0) <br>
static /*instead*/  OCgp_Dir2d^ DX2d() ;

//! Returns a unit vector with the combinations (0,1) <br>
static /*instead*/  OCgp_Dir2d^ DY2d() ;

//! Identifies an axis where its origin is Origin2d <br>
//! and its unit vector coordinates are: X = 1.0,  Y = 0.0 <br>
static /*instead*/  OCgp_Ax2d^ OX2d() ;

//!  Identifies an axis where its origin is Origin2d <br>
//! and its unit vector coordinates are Y = 1.0,  X = 0.0 <br>
static /*instead*/  OCgp_Ax2d^ OY2d() ;


};

}; // OCNaroWrappers

#endif
