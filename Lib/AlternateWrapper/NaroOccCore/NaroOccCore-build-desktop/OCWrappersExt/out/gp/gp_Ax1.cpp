// File generated by CPPExt (CPP file)
//

#include "gp_Ax1.h"
#include "../Converter.h"
#include "gp_Pnt.h"
#include "gp_Dir.h"
#include "gp_Ax2.h"
#include "gp_Trsf.h"
#include "gp_Vec.h"


using namespace OCNaroWrappers;

OCgp_Ax1::OCgp_Ax1(gp_Ax1* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Ax1::OCgp_Ax1() 
{
  nativeHandle = new gp_Ax1();
}

OCgp_Ax1::OCgp_Ax1(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V) 
{
  nativeHandle = new gp_Ax1(*((gp_Pnt*)P->Handle), *((gp_Dir*)V->Handle));
}

 void OCgp_Ax1::SetDirection(OCNaroWrappers::OCgp_Dir^ V)
{
  ((gp_Ax1*)nativeHandle)->SetDirection(*((gp_Dir*)V->Handle));
}

 void OCgp_Ax1::SetLocation(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Ax1*)nativeHandle)->SetLocation(*((gp_Pnt*)P->Handle));
}

OCgp_Dir^ OCgp_Ax1::Direction()
{
  gp_Dir* tmp = new gp_Dir();
  *tmp = ((gp_Ax1*)nativeHandle)->Direction();
  return gcnew OCgp_Dir(tmp);
}

OCgp_Pnt^ OCgp_Ax1::Location()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((gp_Ax1*)nativeHandle)->Location();
  return gcnew OCgp_Pnt(tmp);
}

 System::Boolean OCgp_Ax1::IsCoaxial(OCNaroWrappers::OCgp_Ax1^ Other, Standard_Real AngularTolerance, Standard_Real LinearTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax1*)nativeHandle)->IsCoaxial(*((gp_Ax1*)Other->Handle), AngularTolerance, LinearTolerance));
}

 System::Boolean OCgp_Ax1::IsNormal(OCNaroWrappers::OCgp_Ax1^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax1*)nativeHandle)->IsNormal(*((gp_Ax1*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Ax1::IsOpposite(OCNaroWrappers::OCgp_Ax1^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax1*)nativeHandle)->IsOpposite(*((gp_Ax1*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Ax1::IsParallel(OCNaroWrappers::OCgp_Ax1^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Ax1*)nativeHandle)->IsParallel(*((gp_Ax1*)Other->Handle), AngularTolerance));
}

 Standard_Real OCgp_Ax1::Angle(OCNaroWrappers::OCgp_Ax1^ Other)
{
  return ((gp_Ax1*)nativeHandle)->Angle(*((gp_Ax1*)Other->Handle));
}

 void OCgp_Ax1::Reverse()
{
  ((gp_Ax1*)nativeHandle)->Reverse();
}

OCgp_Ax1^ OCgp_Ax1::Reversed()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Reversed();
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Ax1::Mirror(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((gp_Ax1*)nativeHandle)->Mirror(*((gp_Pnt*)P->Handle));
}

OCgp_Ax1^ OCgp_Ax1::Mirrored(OCNaroWrappers::OCgp_Pnt^ P)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Mirrored(*((gp_Pnt*)P->Handle));
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Ax1::Mirror(OCNaroWrappers::OCgp_Ax1^ A1)
{
  ((gp_Ax1*)nativeHandle)->Mirror(*((gp_Ax1*)A1->Handle));
}

OCgp_Ax1^ OCgp_Ax1::Mirrored(OCNaroWrappers::OCgp_Ax1^ A1)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Mirrored(*((gp_Ax1*)A1->Handle));
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Ax1::Mirror(OCNaroWrappers::OCgp_Ax2^ A2)
{
  ((gp_Ax1*)nativeHandle)->Mirror(*((gp_Ax2*)A2->Handle));
}

OCgp_Ax1^ OCgp_Ax1::Mirrored(OCNaroWrappers::OCgp_Ax2^ A2)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Mirrored(*((gp_Ax2*)A2->Handle));
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Ax1::Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  ((gp_Ax1*)nativeHandle)->Rotate(*((gp_Ax1*)A1->Handle), Ang);
}

OCgp_Ax1^ OCgp_Ax1::Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Rotated(*((gp_Ax1*)A1->Handle), Ang);
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Ax1::Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  ((gp_Ax1*)nativeHandle)->Scale(*((gp_Pnt*)P->Handle), S);
}

OCgp_Ax1^ OCgp_Ax1::Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Scaled(*((gp_Pnt*)P->Handle), S);
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Ax1::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  ((gp_Ax1*)nativeHandle)->Transform(*((gp_Trsf*)T->Handle));
}

OCgp_Ax1^ OCgp_Ax1::Transformed(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Transformed(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Ax1::Translate(OCNaroWrappers::OCgp_Vec^ V)
{
  ((gp_Ax1*)nativeHandle)->Translate(*((gp_Vec*)V->Handle));
}

OCgp_Ax1^ OCgp_Ax1::Translated(OCNaroWrappers::OCgp_Vec^ V)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Translated(*((gp_Vec*)V->Handle));
  return gcnew OCgp_Ax1(tmp);
}

 void OCgp_Ax1::Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  ((gp_Ax1*)nativeHandle)->Translate(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
}

OCgp_Ax1^ OCgp_Ax1::Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = ((gp_Ax1*)nativeHandle)->Translated(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
  return gcnew OCgp_Ax1(tmp);
}


