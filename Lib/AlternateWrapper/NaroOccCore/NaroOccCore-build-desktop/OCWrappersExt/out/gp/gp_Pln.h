// File generated by CPPExt (MPV)
//
#ifndef _gp_Pln_OCWrappers_HeaderFile
#define _gp_Pln_OCWrappers_HeaderFile

// include native header
#include <gp_Pln.hxx>
#include "../Converter.h"


#include "gp_Ax3.h"
#include "../Standard/Standard_Storable.h"
#include "gp_Ax1.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax3;
ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Ax1;
ref class OCgp_Lin;
ref class OCgp_Ax2;
ref class OCgp_Trsf;
ref class OCgp_Vec;


//!Describes a plane. <br>
//! A plane is positioned in space with a coordinate system <br>
//! (a gp_Ax3 object), such that the plane is defined by the <br>
//! origin, "X Direction" and "Y Direction" of this coordinate <br>
//! system, which is the "local coordinate system" of the <br>
//! plane. The "main Direction" of the coordinate system is a <br>
//! vector normal to the plane. It gives the plane an implicit <br>
//! orientation such that the plane is said to be "direct", if the <br>
//! coordinate system is right-handed, or "indirect" in the other case. <br>
//! Note: when a gp_Pln plane is converted into a <br>
//! Geom_Plane plane, some implicit properties of its local <br>
//! coordinate system are used explicitly: <br>
//! -   its origin defines the origin of the two parameters of <br>
//!   the planar surface, <br>
//! -   its implicit orientation is also that of the Geom_Plane. <br>
//! See Also <br>
//! gce_MakePln which provides functions for more complex <br>
//! plane constructions <br>
//! Geom_Plane which provides additional functions for <br>
//! constructing planes and works, in particular, with the <br>
//! parametric equations of planes <br>
public ref class OCgp_Pln  {

protected:
  gp_Pln* nativeHandle;
  OCgp_Pln(OCDummy^) {};

public:
  property gp_Pln* Handle
  {
    gp_Pln* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Pln(gp_Pln* nativeHandle);

// Methods PUBLIC

//! Creates a plane coincident with OXY plane of the <br>
//!            reference coordinate system. <br>
OCgp_Pln();


//!  The coordinate system of the plane is defined with the axis <br>
//!  placement A3. <br>
//!  The "Direction" of A3 defines the normal to the plane. <br>
//!  The "Location" of A3 defines the location (origin) of the plane. <br>
//!  The "XDirection" and "YDirection" of A3 define the "XAxis" and <br>
//!  the "YAxis" of the plane used to parametrize the plane. <br>
OCgp_Pln(OCNaroWrappers::OCgp_Ax3^ A3);


//!  Creates a plane with the  "Location" point <P> <br>
//!  and the normal direction <V>. <br>
OCgp_Pln(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V);


//!  Creates a plane from its cartesian equation : <br>
//!  A * X + B * Y + C * Z + D = 0.0 <br>
//!  Raises ConstructionError if Sqrt (A*A + B*B + C*C) <= Resolution from gp. <br>
OCgp_Pln(Standard_Real A, Standard_Real B, Standard_Real C, Standard_Real D);


//!  Returns the coefficients of the plane's cartesian equation : <br>
//!  A * X + B * Y + C * Z + D = 0. <br>
 /*instead*/  void Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& D) ;

//! Modifies this plane, by redefining its local coordinate system so that <br>
//! -   its origin and "main Direction" become those of the <br>
//!   axis A1 (the "X Direction" and "Y Direction" are then recomputed). <br>
//!  Raises ConstructionError if the A1 is parallel to the "XAxis" of the plane. <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax1^ A1) ;

//! Changes the origin of the plane. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt^ Loc) ;

//! Changes the local coordinate system of the plane. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax3^ A3) ;

//! Reverses the   U   parametrization of   the  plane <br>
//!          reversing the XAxis. <br>
 /*instead*/  void UReverse() ;

//! Reverses the   V   parametrization of   the  plane <br>
//!          reversing the YAxis. <br>
 /*instead*/  void VReverse() ;

//! returns true if the Ax3 is right handed. <br>
 /*instead*/  System::Boolean Direct() ;

//! Returns the plane's normal Axis. <br>
 /*instead*/  OCgp_Ax1^ Axis() ;

//! Returns the plane's location (origin). <br>
 /*instead*/  OCgp_Pnt^ Location() ;

//! Returns the local coordinate system of the plane . <br>
 /*instead*/  OCgp_Ax3^ Position() ;

//! Computes the distance between <me> and the point <P>. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Computes the distance between <me> and the line <L>. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Lin^ L) ;

//! Computes the distance between two planes. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Pln^ Other) ;


//!  Computes the square distance between <me> and the point <P>. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Computes the square distance between <me> and the line <L>. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Lin^ L) ;


//!  Computes the square distance between two planes. <br>
 /*instead*/  Standard_Real SquareDistance(OCNaroWrappers::OCgp_Pln^ Other) ;

//! Returns the X axis of the plane. <br>
 /*instead*/  OCgp_Ax1^ XAxis() ;

//! Returns the Y axis  of the plane. <br>
 /*instead*/  OCgp_Ax1^ YAxis() ;

//! Returns true if this plane contains the point P. This means that <br>
//! -   the distance between point P and this plane is less <br>
//!   than or equal to LinearTolerance, or <br>
//! -   line L is normal to the "main Axis" of the local <br>
//!   coordinate system of this plane, within the tolerance <br>
//!   AngularTolerance, and the distance between the origin <br>
//!   of line L and this plane is less than or equal to <br>
//!   LinearTolerance. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real LinearTolerance) ;

//! Returns true if this plane contains the line L. This means that <br>
//! -   the distance between point P and this plane is less <br>
//!   than or equal to LinearTolerance, or <br>
//! -   line L is normal to the "main Axis" of the local <br>
//!   coordinate system of this plane, within the tolerance <br>
//!   AngularTolerance, and the distance between the origin <br>
//!   of line L and this plane is less than or equal to <br>
//!   LinearTolerance. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCgp_Lin^ L, Standard_Real LinearTolerance, Standard_Real AngularTolerance) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of a plane with respect <br>
//!  to the point <P> which is the center of the symmetry <br>
//! Warnings : <br>
//!  The normal direction to the plane is not changed. <br>
//!  The "XAxis" and the "YAxis" are reversed. <br>
 /*instead*/  OCgp_Pln^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;

//! Performs   the symmetrical transformation  of a <br>
//!  plane with respect to an axis placement  which is the axis <br>
//!  of  the symmetry.  The  transformation is performed on the <br>
//!  "Location" point, on  the "XAxis"  and the "YAxis".    The <br>
//!  resulting normal  direction  is  the cross product between <br>
//!  the "XDirection" and the "YDirection" after transformation <br>
//!  if  the  initial plane was right  handed,  else  it is the <br>
//!  opposite. <br>
 /*instead*/  OCgp_Pln^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;

//!  Performs the  symmetrical transformation  of  a <br>
//!  plane    with respect to    an axis  placement.   The axis <br>
//!  placement  <A2> locates the plane  of  the symmetry.   The <br>
//!  transformation is performed  on  the  "Location" point, on <br>
//!  the  "XAxis" and  the    "YAxis".  The resulting    normal <br>
//!  direction is the cross  product between   the "XDirection" <br>
//!  and the "YDirection"  after  transformation if the initial <br>
//!  plane was right handed, else it is the opposite. <br>
 /*instead*/  OCgp_Pln^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  rotates a plane. A1 is the axis of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Pln^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Scales a plane. S is the scaling value. <br>
 /*instead*/  OCgp_Pln^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


//!  Transforms a plane with the transformation T from class Trsf. <br>
//!  The transformation is performed on the "Location" <br>
//!  point, on the "XAxis" and the "YAxis". <br>
//!  The resulting normal direction is the cross product between <br>
//!  the "XDirection" and the "YDirection" after transformation. <br>
 /*instead*/  OCgp_Pln^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates a plane in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Pln^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


//!  Translates a plane from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Pln^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCgp_Pln()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
