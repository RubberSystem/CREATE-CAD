// File generated by CPPExt (CPP file)
//

#include "gp_Dir2d.h"
#include "../Converter.h"
#include "gp_Vec2d.h"
#include "gp_XY.h"
#include "gp_Ax2d.h"
#include "gp_Trsf2d.h"


using namespace OCNaroWrappers;

OCgp_Dir2d::OCgp_Dir2d(gp_Dir2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Dir2d::OCgp_Dir2d() 
{
  nativeHandle = new gp_Dir2d();
}

OCgp_Dir2d::OCgp_Dir2d(OCNaroWrappers::OCgp_Vec2d^ V) 
{
  nativeHandle = new gp_Dir2d(*((gp_Vec2d*)V->Handle));
}

OCgp_Dir2d::OCgp_Dir2d(OCNaroWrappers::OCgp_XY^ Coord) 
{
  nativeHandle = new gp_Dir2d(*((gp_XY*)Coord->Handle));
}

OCgp_Dir2d::OCgp_Dir2d(Standard_Real Xv, Standard_Real Yv) 
{
  nativeHandle = new gp_Dir2d(Xv, Yv);
}

 void OCgp_Dir2d::SetCoord(Standard_Integer Index, Standard_Real Xi)
{
  ((gp_Dir2d*)nativeHandle)->SetCoord(Index, Xi);
}

 void OCgp_Dir2d::SetCoord(Standard_Real Xv, Standard_Real Yv)
{
  ((gp_Dir2d*)nativeHandle)->SetCoord(Xv, Yv);
}

 void OCgp_Dir2d::SetX(Standard_Real X)
{
  ((gp_Dir2d*)nativeHandle)->SetX(X);
}

 void OCgp_Dir2d::SetY(Standard_Real Y)
{
  ((gp_Dir2d*)nativeHandle)->SetY(Y);
}

 void OCgp_Dir2d::SetXY(OCNaroWrappers::OCgp_XY^ Coord)
{
  ((gp_Dir2d*)nativeHandle)->SetXY(*((gp_XY*)Coord->Handle));
}

 Standard_Real OCgp_Dir2d::Coord(Standard_Integer Index)
{
  return ((gp_Dir2d*)nativeHandle)->Coord(Index);
}

 void OCgp_Dir2d::Coord(Standard_Real& Xv, Standard_Real& Yv)
{
  ((gp_Dir2d*)nativeHandle)->Coord(Xv, Yv);
}

 Standard_Real OCgp_Dir2d::X()
{
  return ((gp_Dir2d*)nativeHandle)->X();
}

 Standard_Real OCgp_Dir2d::Y()
{
  return ((gp_Dir2d*)nativeHandle)->Y();
}

OCgp_XY^ OCgp_Dir2d::XY()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((gp_Dir2d*)nativeHandle)->XY();
  return gcnew OCgp_XY(tmp);
}

 System::Boolean OCgp_Dir2d::IsEqual(OCNaroWrappers::OCgp_Dir2d^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Dir2d*)nativeHandle)->IsEqual(*((gp_Dir2d*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Dir2d::IsNormal(OCNaroWrappers::OCgp_Dir2d^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Dir2d*)nativeHandle)->IsNormal(*((gp_Dir2d*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Dir2d::IsOpposite(OCNaroWrappers::OCgp_Dir2d^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Dir2d*)nativeHandle)->IsOpposite(*((gp_Dir2d*)Other->Handle), AngularTolerance));
}

 System::Boolean OCgp_Dir2d::IsParallel(OCNaroWrappers::OCgp_Dir2d^ Other, Standard_Real AngularTolerance)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Dir2d*)nativeHandle)->IsParallel(*((gp_Dir2d*)Other->Handle), AngularTolerance));
}

 Standard_Real OCgp_Dir2d::Angle(OCNaroWrappers::OCgp_Dir2d^ Other)
{
  return ((gp_Dir2d*)nativeHandle)->Angle(*((gp_Dir2d*)Other->Handle));
}

 Standard_Real OCgp_Dir2d::Crossed(OCNaroWrappers::OCgp_Dir2d^ Right)
{
  return ((gp_Dir2d*)nativeHandle)->Crossed(*((gp_Dir2d*)Right->Handle));
}

 Standard_Real OCgp_Dir2d::Dot(OCNaroWrappers::OCgp_Dir2d^ Other)
{
  return ((gp_Dir2d*)nativeHandle)->Dot(*((gp_Dir2d*)Other->Handle));
}

 void OCgp_Dir2d::Reverse()
{
  ((gp_Dir2d*)nativeHandle)->Reverse();
}

OCgp_Dir2d^ OCgp_Dir2d::Reversed()
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Dir2d*)nativeHandle)->Reversed();
  return gcnew OCgp_Dir2d(tmp);
}

 void OCgp_Dir2d::Mirror(OCNaroWrappers::OCgp_Dir2d^ V)
{
  ((gp_Dir2d*)nativeHandle)->Mirror(*((gp_Dir2d*)V->Handle));
}

OCgp_Dir2d^ OCgp_Dir2d::Mirrored(OCNaroWrappers::OCgp_Dir2d^ V)
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Dir2d*)nativeHandle)->Mirrored(*((gp_Dir2d*)V->Handle));
  return gcnew OCgp_Dir2d(tmp);
}

 void OCgp_Dir2d::Mirror(OCNaroWrappers::OCgp_Ax2d^ A)
{
  ((gp_Dir2d*)nativeHandle)->Mirror(*((gp_Ax2d*)A->Handle));
}

OCgp_Dir2d^ OCgp_Dir2d::Mirrored(OCNaroWrappers::OCgp_Ax2d^ A)
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Dir2d*)nativeHandle)->Mirrored(*((gp_Ax2d*)A->Handle));
  return gcnew OCgp_Dir2d(tmp);
}

 void OCgp_Dir2d::Rotate(Standard_Real Ang)
{
  ((gp_Dir2d*)nativeHandle)->Rotate(Ang);
}

OCgp_Dir2d^ OCgp_Dir2d::Rotated(Standard_Real Ang)
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Dir2d*)nativeHandle)->Rotated(Ang);
  return gcnew OCgp_Dir2d(tmp);
}

 void OCgp_Dir2d::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  ((gp_Dir2d*)nativeHandle)->Transform(*((gp_Trsf2d*)T->Handle));
}

OCgp_Dir2d^ OCgp_Dir2d::Transformed(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((gp_Dir2d*)nativeHandle)->Transformed(*((gp_Trsf2d*)T->Handle));
  return gcnew OCgp_Dir2d(tmp);
}


