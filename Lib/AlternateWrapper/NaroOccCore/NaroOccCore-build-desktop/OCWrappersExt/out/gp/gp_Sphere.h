// File generated by CPPExt (MPV)
//
#ifndef _gp_Sphere_OCWrappers_HeaderFile
#define _gp_Sphere_OCWrappers_HeaderFile

// include native header
#include <gp_Sphere.hxx>
#include "../Converter.h"


#include "gp_Ax3.h"
#include "../Standard/Standard_Storable.h"
#include "gp_Ax1.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax3;
ref class OCgp_Pnt;
ref class OCgp_Ax1;
ref class OCgp_Ax2;
ref class OCgp_Trsf;
ref class OCgp_Vec;



//! Describes a sphere. <br>
//! A sphere is defined by its radius and positioned in space <br>
//! with a coordinate system (a gp_Ax3 object). The origin of <br>
//! the coordinate system is the center of the sphere. This <br>
//! coordinate system is the "local coordinate system" of the sphere. <br>
//! Note: when a gp_Sphere sphere is converted into a <br>
//! Geom_SphericalSurface sphere, some implicit <br>
//! properties of its local coordinate system are used explicitly: <br>
//! -   its origin, "X Direction", "Y Direction" and "main <br>
//!   Direction" are used directly to define the parametric <br>
//!   directions on the sphere and the origin of the parameters, <br>
//! -   its implicit orientation (right-handed or left-handed) <br>
//!   gives the orientation (direct, indirect) to the <br>
//!   Geom_SphericalSurface sphere. <br>
//! See Also <br>
//! gce_MakeSphere which provides functions for more <br>
//! complex sphere constructions <br>
//! Geom_SphericalSurface which provides additional <br>
//! functions for constructing spheres and works, in <br>
//! particular, with the parametric equations of spheres. <br>
public ref class OCgp_Sphere  {

protected:
  gp_Sphere* nativeHandle;
  OCgp_Sphere(OCDummy^) {};

public:
  property gp_Sphere* Handle
  {
    gp_Sphere* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCgp_Sphere(gp_Sphere* nativeHandle);

// Methods PUBLIC

//! Creates an indefinite sphere. <br>
OCgp_Sphere();


//! Constructs a sphere with radius Radius, centered on the origin <br>
//!   of A3.  A3 is the local coordinate system of the sphere. <br>
//!  Warnings : <br>
//!  It is not forbidden to create a sphere with null radius. <br>
//! Raises ConstructionError if Radius < 0.0 <br>
OCgp_Sphere(OCNaroWrappers::OCgp_Ax3^ A3, Standard_Real Radius);

//! Changes the center of the sphere. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt^ Loc) ;

//! Changes the local coordinate system of the sphere. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax3^ A3) ;

//! Assigns R the radius of the Sphere. <br>
//! Warnings : <br>
//!  It is not forbidden to create a sphere with null radius. <br>
//! Raises ConstructionError if R < 0.0 <br>
 /*instead*/  void SetRadius(Standard_Real R) ;


//! Computes the aera of the sphere. <br>
 /*instead*/  Standard_Real Area() ;


//!  Computes the coefficients of the implicit equation of the quadric <br>
//!  in the absolute cartesian coordinates system : <br>
//!  A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + <br>
//!  2.(C1.X + C2.Y + C3.Z) + D = 0.0 <br>
 /*instead*/  void Coefficients(Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D) ;

//! Reverses the   U   parametrization of   the sphere <br>
//!          reversing the YAxis. <br>
 /*instead*/  void UReverse() ;

//! Reverses the   V   parametrization of   the  sphere <br>
//!          reversing the ZAxis. <br>
 /*instead*/  void VReverse() ;

//! Returns true if the local coordinate system of this sphere <br>
//! is right-handed. <br>
 /*instead*/  System::Boolean Direct() ;

//!--- Purpose ; <br>
//!  Returns the center of the sphere. <br>
 /*instead*/  OCgp_Pnt^ Location() ;


//!  Returns the local coordinates system of the sphere. <br>
 /*instead*/  OCgp_Ax3^ Position() ;

//! Returns the radius of the sphere. <br>
 /*instead*/  Standard_Real Radius() ;

//! Computes the volume of the sphere <br>
 /*instead*/  Standard_Real Volume() ;

//! Returns the axis X of the sphere. <br>
 /*instead*/  OCgp_Ax1^ XAxis() ;

//! Returns the axis Y of the sphere. <br>
 /*instead*/  OCgp_Ax1^ YAxis() ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of a sphere <br>
//!  with respect to the point P which is the center of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Sphere^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Performs the symmetrical transformation of a sphere with <br>
//!  respect to an axis placement which is the axis of the <br>
//!  symmetry. <br>
 /*instead*/  OCgp_Sphere^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Performs the symmetrical transformation of a sphere with respect <br>
//!  to a plane. The axis placement A2 locates the plane of the <br>
//!  of the symmetry : (Location, XDirection, YDirection). <br>
 /*instead*/  OCgp_Sphere^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Rotates a sphere. A1 is the axis of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  OCgp_Sphere^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Scales a sphere. S is the scaling value. <br>
//!  The absolute value of S is used to scale the sphere <br>
 /*instead*/  OCgp_Sphere^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


//!  Transforms a sphere with the transformation T from class Trsf. <br>
 /*instead*/  OCgp_Sphere^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates a sphere in the direction of the vector V. <br>
//!  The magnitude of the translation is the vector's magnitude. <br>
 /*instead*/  OCgp_Sphere^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


//!  Translates a sphere from the point P1 to the point P2. <br>
 /*instead*/  OCgp_Sphere^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCgp_Sphere()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
