// File generated by CPPExt (CPP file)
//

#include "gp_Quaternion.h"
#include "../Converter.h"
#include "gp_Vec.h"
#include "gp_Mat.h"


using namespace OCNaroWrappers;

OCgp_Quaternion::OCgp_Quaternion(gp_Quaternion* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Quaternion::OCgp_Quaternion() 
{
  nativeHandle = new gp_Quaternion();
}

OCgp_Quaternion::OCgp_Quaternion(Standard_Real x, Standard_Real y, Standard_Real z, Standard_Real w) 
{
  nativeHandle = new gp_Quaternion(x, y, z, w);
}

OCgp_Quaternion::OCgp_Quaternion(OCNaroWrappers::OCgp_Quaternion^ theToCopy) 
{
  nativeHandle = new gp_Quaternion(*((gp_Quaternion*)theToCopy->Handle));
}

OCgp_Quaternion::OCgp_Quaternion(OCNaroWrappers::OCgp_Vec^ theVecFrom, OCNaroWrappers::OCgp_Vec^ theVecTo) 
{
  nativeHandle = new gp_Quaternion(*((gp_Vec*)theVecFrom->Handle), *((gp_Vec*)theVecTo->Handle));
}

OCgp_Quaternion::OCgp_Quaternion(OCNaroWrappers::OCgp_Vec^ theVecFrom, OCNaroWrappers::OCgp_Vec^ theVecTo, OCNaroWrappers::OCgp_Vec^ theHelpCrossVec) 
{
  nativeHandle = new gp_Quaternion(*((gp_Vec*)theVecFrom->Handle), *((gp_Vec*)theVecTo->Handle), *((gp_Vec*)theHelpCrossVec->Handle));
}

OCgp_Quaternion::OCgp_Quaternion(OCNaroWrappers::OCgp_Vec^ theAxis, Standard_Real theAngle) 
{
  nativeHandle = new gp_Quaternion(*((gp_Vec*)theAxis->Handle), theAngle);
}

OCgp_Quaternion::OCgp_Quaternion(OCNaroWrappers::OCgp_Mat^ theMat) 
{
  nativeHandle = new gp_Quaternion(*((gp_Mat*)theMat->Handle));
}

 System::Boolean OCgp_Quaternion::IsEqual(OCNaroWrappers::OCgp_Quaternion^ theOther)
{
  return OCConverter::StandardBooleanToBoolean(((gp_Quaternion*)nativeHandle)->IsEqual(*((gp_Quaternion*)theOther->Handle)));
}

 void OCgp_Quaternion::SetRotation(OCNaroWrappers::OCgp_Vec^ theVecFrom, OCNaroWrappers::OCgp_Vec^ theVecTo)
{
  ((gp_Quaternion*)nativeHandle)->SetRotation(*((gp_Vec*)theVecFrom->Handle), *((gp_Vec*)theVecTo->Handle));
}

 void OCgp_Quaternion::SetRotation(OCNaroWrappers::OCgp_Vec^ theVecFrom, OCNaroWrappers::OCgp_Vec^ theVecTo, OCNaroWrappers::OCgp_Vec^ theHelpCrossVec)
{
  ((gp_Quaternion*)nativeHandle)->SetRotation(*((gp_Vec*)theVecFrom->Handle), *((gp_Vec*)theVecTo->Handle), *((gp_Vec*)theHelpCrossVec->Handle));
}

 void OCgp_Quaternion::SetVectorAndAngle(OCNaroWrappers::OCgp_Vec^ theAxis, Standard_Real theAngle)
{
  ((gp_Quaternion*)nativeHandle)->SetVectorAndAngle(*((gp_Vec*)theAxis->Handle), theAngle);
}

 void OCgp_Quaternion::GetVectorAndAngle(OCNaroWrappers::OCgp_Vec^ theAxis, Standard_Real& theAngle)
{
  ((gp_Quaternion*)nativeHandle)->GetVectorAndAngle(*((gp_Vec*)theAxis->Handle), theAngle);
}

 void OCgp_Quaternion::SetMatrix(OCNaroWrappers::OCgp_Mat^ theMat)
{
  ((gp_Quaternion*)nativeHandle)->SetMatrix(*((gp_Mat*)theMat->Handle));
}

OCgp_Mat^ OCgp_Quaternion::GetMatrix()
{
  gp_Mat* tmp = new gp_Mat();
  *tmp = ((gp_Quaternion*)nativeHandle)->GetMatrix();
  return gcnew OCgp_Mat(tmp);
}

 void OCgp_Quaternion::SetEulerAngles(OCgp_EulerSequence theOrder, Standard_Real theAlpha, Standard_Real theBeta, Standard_Real theGamma)
{
  ((gp_Quaternion*)nativeHandle)->SetEulerAngles((gp_EulerSequence)theOrder, theAlpha, theBeta, theGamma);
}

 void OCgp_Quaternion::GetEulerAngles(OCgp_EulerSequence theOrder, Standard_Real& theAlpha, Standard_Real& theBeta, Standard_Real& theGamma)
{
  ((gp_Quaternion*)nativeHandle)->GetEulerAngles((gp_EulerSequence)theOrder, theAlpha, theBeta, theGamma);
}

 void OCgp_Quaternion::Set(Standard_Real x, Standard_Real y, Standard_Real z, Standard_Real w)
{
  ((gp_Quaternion*)nativeHandle)->Set(x, y, z, w);
}

 void OCgp_Quaternion::Set(OCNaroWrappers::OCgp_Quaternion^ theQuaternion)
{
  ((gp_Quaternion*)nativeHandle)->Set(*((gp_Quaternion*)theQuaternion->Handle));
}

 Standard_Real OCgp_Quaternion::X()
{
  return ((gp_Quaternion*)nativeHandle)->X();
}

 Standard_Real OCgp_Quaternion::Y()
{
  return ((gp_Quaternion*)nativeHandle)->Y();
}

 Standard_Real OCgp_Quaternion::Z()
{
  return ((gp_Quaternion*)nativeHandle)->Z();
}

 Standard_Real OCgp_Quaternion::W()
{
  return ((gp_Quaternion*)nativeHandle)->W();
}

 void OCgp_Quaternion::SetIdent()
{
  ((gp_Quaternion*)nativeHandle)->SetIdent();
}

 void OCgp_Quaternion::Reverse()
{
  ((gp_Quaternion*)nativeHandle)->Reverse();
}

OCgp_Quaternion^ OCgp_Quaternion::Reversed()
{
  gp_Quaternion* tmp = new gp_Quaternion();
  *tmp = ((gp_Quaternion*)nativeHandle)->Reversed();
  return gcnew OCgp_Quaternion(tmp);
}

 void OCgp_Quaternion::Invert()
{
  ((gp_Quaternion*)nativeHandle)->Invert();
}

OCgp_Quaternion^ OCgp_Quaternion::Inverted()
{
  gp_Quaternion* tmp = new gp_Quaternion();
  *tmp = ((gp_Quaternion*)nativeHandle)->Inverted();
  return gcnew OCgp_Quaternion(tmp);
}

 Standard_Real OCgp_Quaternion::SquareNorm()
{
  return ((gp_Quaternion*)nativeHandle)->SquareNorm();
}

 Standard_Real OCgp_Quaternion::Norm()
{
  return ((gp_Quaternion*)nativeHandle)->Norm();
}

 void OCgp_Quaternion::Scale(Standard_Real theScale)
{
  ((gp_Quaternion*)nativeHandle)->Scale(theScale);
}

OCgp_Quaternion^ OCgp_Quaternion::Scaled(Standard_Real theScale)
{
  gp_Quaternion* tmp = new gp_Quaternion();
  *tmp = ((gp_Quaternion*)nativeHandle)->Scaled(theScale);
  return gcnew OCgp_Quaternion(tmp);
}

 void OCgp_Quaternion::StabilizeLength()
{
  ((gp_Quaternion*)nativeHandle)->StabilizeLength();
}

 void OCgp_Quaternion::Normalize()
{
  ((gp_Quaternion*)nativeHandle)->Normalize();
}

OCgp_Quaternion^ OCgp_Quaternion::Normalized()
{
  gp_Quaternion* tmp = new gp_Quaternion();
  *tmp = ((gp_Quaternion*)nativeHandle)->Normalized();
  return gcnew OCgp_Quaternion(tmp);
}

OCgp_Quaternion^ OCgp_Quaternion::Negated()
{
  gp_Quaternion* tmp = new gp_Quaternion();
  *tmp = ((gp_Quaternion*)nativeHandle)->Negated();
  return gcnew OCgp_Quaternion(tmp);
}

OCgp_Quaternion^ OCgp_Quaternion::Added(OCNaroWrappers::OCgp_Quaternion^ theOther)
{
  gp_Quaternion* tmp = new gp_Quaternion();
  *tmp = ((gp_Quaternion*)nativeHandle)->Added(*((gp_Quaternion*)theOther->Handle));
  return gcnew OCgp_Quaternion(tmp);
}

OCgp_Quaternion^ OCgp_Quaternion::Subtracted(OCNaroWrappers::OCgp_Quaternion^ theOther)
{
  gp_Quaternion* tmp = new gp_Quaternion();
  *tmp = ((gp_Quaternion*)nativeHandle)->Subtracted(*((gp_Quaternion*)theOther->Handle));
  return gcnew OCgp_Quaternion(tmp);
}

OCgp_Quaternion^ OCgp_Quaternion::Multiplied(OCNaroWrappers::OCgp_Quaternion^ theOther)
{
  gp_Quaternion* tmp = new gp_Quaternion();
  *tmp = ((gp_Quaternion*)nativeHandle)->Multiplied(*((gp_Quaternion*)theOther->Handle));
  return gcnew OCgp_Quaternion(tmp);
}

 void OCgp_Quaternion::Add(OCNaroWrappers::OCgp_Quaternion^ theOther)
{
  ((gp_Quaternion*)nativeHandle)->Add(*((gp_Quaternion*)theOther->Handle));
}

 void OCgp_Quaternion::Subtract(OCNaroWrappers::OCgp_Quaternion^ theOther)
{
  ((gp_Quaternion*)nativeHandle)->Subtract(*((gp_Quaternion*)theOther->Handle));
}

 void OCgp_Quaternion::Multiply(OCNaroWrappers::OCgp_Quaternion^ theOther)
{
  ((gp_Quaternion*)nativeHandle)->Multiply(*((gp_Quaternion*)theOther->Handle));
}

 Standard_Real OCgp_Quaternion::Dot(OCNaroWrappers::OCgp_Quaternion^ theOther)
{
  return ((gp_Quaternion*)nativeHandle)->Dot(*((gp_Quaternion*)theOther->Handle));
}

 Standard_Real OCgp_Quaternion::GetRotationAngle()
{
  return ((gp_Quaternion*)nativeHandle)->GetRotationAngle();
}

OCgp_Vec^ OCgp_Quaternion::Multiply(OCNaroWrappers::OCgp_Vec^ theVec)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((gp_Quaternion*)nativeHandle)->Multiply(*((gp_Vec*)theVec->Handle));
  return gcnew OCgp_Vec(tmp);
}


