// File generated by CPPExt (Transient)
//
#ifndef _CDF_Application_OCWrappers_HeaderFile
#define _CDF_Application_OCWrappers_HeaderFile

// include the wrapped class
#include <CDF_Application.hxx>
#include "../Converter.h"

#include "../CDM/CDM_Application.h"

#include "../TCollection/TCollection_ExtendedString.h"
#include "../PCDM/PCDM_ReaderStatus.h"
#include "../CDM/CDM_CanCloseStatus.h"
#include "CDF_TypeOfActivation.h"


namespace OCNaroWrappers
{

ref class OCCDF_Session;
ref class OCStandard_GUID;
ref class OCCDM_Document;
ref class OCTCollection_ExtendedString;
ref class OCTColStd_SequenceOfExtendedString;
ref class OCPCDM_Reader;
ref class OCCDM_MetaData;



public ref class OCCDF_Application : OCCDM_Application {

protected:
  // dummy constructor;
  OCCDF_Application(OCDummy^) : OCCDM_Application((OCDummy^)nullptr) {};

public:

// constructor from native
OCCDF_Application(Handle(CDF_Application)* nativeHandle);

// Methods PUBLIC


OCCDF_Application();

//! plugs an application. <br>
//! Open is used <br>
//!       - for opening a Document that has been created in an application <br>
//!       - for opening a Document from the database <br>
//!       - for opening a Document from a file. <br>
//!  The Open methods always add the document in the session directory and <br>
//!  calls the virtual Activate method. The document is considered to be <br>
//!  opened until Close is used. To be storable, a document must be <br>
//!  opened by an application since the application resources are <br>
//!  needed to store it. <br>
//! <br>
//! <br>
//! <br>
//! <br>
static /*instead*/  OCCDF_Application^ Load(OCNaroWrappers::OCStandard_GUID^ aGUID) ;

//! puts the document in the current session directory <br>
//!          and calls the virtual method Activate on it. <br>
 /*instead*/  void Open(OCNaroWrappers::OCCDM_Document^ aDocument) ;


 /*instead*/  OCCDM_CanCloseStatus CanClose(OCNaroWrappers::OCCDM_Document^ aDocument) ;

//! removes the document of the current session directory <br>
//!          and closes the document; <br>
 /*instead*/  void Close(OCNaroWrappers::OCCDM_Document^ aDocument) ;

//! This method retrieves a document from the database. <br>
//!          If the Document references other documents which have <br>
//!          been updated, the latest version of these documents will <br>
//!          be used if {UseStorageConfiguration} is Standard_True. <br>
//!           The content of {aFolder}, {aName} and {aVersion} depends on <br>
//!           the Database Manager system. If the DBMS is only based on <br>
//!           the OS, {aFolder} is a directory and {aName} is the name of a <br>
//!           file. In this case the use of the syntax with {aVersion} <br>
//!           has no sense. For example: <br>
 /*instead*/  OCCDM_Document^ Retrieve(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName, System::Boolean UseStorageConfiguration) ;

//!  This method retrieves  a  document from the database. <br>
//!          If the  Document references other documents which have <br>
//!          been  updated, the  latest version of  these documents <br>
//!           will    be   used  if   {UseStorageConfiguration}  is <br>
//!          Standard_True.  --  If the DBMS is  only  based on the <br>
//!           OS, this syntax  should not be used. <br>
//! <br>
//!              If the DBMS is EUCLID/Design Manager, {aFolder}, {aName} <br>
//!              and  {aVersion} have the form they have in <br>
//!              EUCLID/Design Manager. For example: <br>
//! <br>
//! Handle(CDM_Document) theDocument=myApplication->Retrieve("|user|cascade","box","2"); <br>
//!             A link is kept with the database through an instance <br>
//!             of CDM_MetaData <br>
 /*instead*/  OCCDM_Document^ Retrieve(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName, OCNaroWrappers::OCTCollection_ExtendedString^ aVersion, System::Boolean UseStorageConfiguration) ;


 /*instead*/  OCPCDM_ReaderStatus CanRetrieve(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName) ;


 /*instead*/  OCPCDM_ReaderStatus CanRetrieve(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName, OCNaroWrappers::OCTCollection_ExtendedString^ aVersion) ;

//! Checks  status  after  Retrieve <br>
 /*instead*/  OCPCDM_ReaderStatus GetRetrieveStatus() ;


 /*instead*/  System::Boolean FindReader(OCNaroWrappers::OCTCollection_ExtendedString^ aFileName) ;


 /*instead*/  OCPCDM_Reader^ Reader(OCNaroWrappers::OCTCollection_ExtendedString^ aFileName) ;


 /*instead*/  System::Boolean FindReaderFromFormat(OCNaroWrappers::OCTCollection_ExtendedString^ aFormat) ;


 /*instead*/  OCPCDM_Reader^ ReaderFromFormat(OCNaroWrappers::OCTCollection_ExtendedString^ aFormat) ;

//! try to  retrieve a Format  directly in the  file or in <br>
//!           application   resource  by using   extension. returns <br>
//!          True if found; <br>
 /*instead*/  System::Boolean Format(OCNaroWrappers::OCTCollection_ExtendedString^ aFileName, OCNaroWrappers::OCTCollection_ExtendedString^ theFormat) ;


 /*instead*/  System::String^ DefaultFolder() ;


 /*instead*/  System::Boolean SetDefaultFolder(System::String^ aFolder) ;


 /*instead*/  System::String^ DefaultExtension() ;

~OCCDF_Application()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
