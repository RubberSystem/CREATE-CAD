// File generated by CPPExt (Transient)
//
#ifndef _CDF_MetaDataDriver_OCWrappers_HeaderFile
#define _CDF_MetaDataDriver_OCWrappers_HeaderFile

// include the wrapped class
#include <CDF_MetaDataDriver.hxx>
#include "../Converter.h"

#include "../Standard/Standard_Transient.h"



namespace OCNaroWrappers
{

ref class OCCDM_MetaData;
ref class OCTCollection_ExtendedString;
ref class OCCDM_Document;
ref class OCPCDM_ReferenceIterator;



public ref class OCCDF_MetaDataDriver : OCStandard_Transient {

protected:
  // dummy constructor;
  OCCDF_MetaDataDriver(OCDummy^) : OCStandard_Transient((OCDummy^)nullptr) {};

public:

// constructor from native
OCCDF_MetaDataDriver(Handle(CDF_MetaDataDriver)* nativeHandle);

// Methods PUBLIC


OCCDF_MetaDataDriver();

//! returns true if the MetaDataDriver can manage different <br>
//!          versions of a Data. <br>
//!          By default, returns Standard_False. <br>
virtual /*instead*/  System::Boolean HasVersionCapability() ;

//! Creates a "Depends On"  relation between two Datas. <br>
//!          By default does nothing <br>
virtual /*instead*/  void CreateDependsOn(OCNaroWrappers::OCCDM_MetaData^ aFirstData, OCNaroWrappers::OCCDM_MetaData^ aSecondData) ;


virtual /*instead*/  void CreateReference(OCNaroWrappers::OCCDM_MetaData^ aFrom, OCNaroWrappers::OCCDM_MetaData^ aTo, Standard_Integer aReferenceIdentifier, Standard_Integer aToDocumentVersion) ;

//! by default return Standard_True. <br>
virtual /*instead*/  System::Boolean HasVersion(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName) ;

//! this methods  is usefull if the name  of an  object -- <br>
//!           depends on  the metadatadriver. For  example a Driver <br>
//!           -- based  on the operating  system can choose to  add <br>
//!           the extension of file to create to the object. <br>
virtual /*instead*/  OCTCollection_ExtendedString^ SetName(OCNaroWrappers::OCCDM_Document^ aDocument, OCNaroWrappers::OCTCollection_ExtendedString^ aName) ;

//! by default returns aMetaDATA <br>//! should return the MetaData stored in the DBMS with the meta-data <br>
//!          corresponding to the path. If the MetaDataDriver has version management capabilities <br>
//!          the version has to be set in the returned MetaData. <br>
//!          MetaData is called by GetMetaData <br>
//!          If the version is not included in the path , MetaData should return <br>
//!          the last version of the metadata <br>
//!    is deferred; <br>
virtual /*instead*/  OCCDM_MetaData^ LastVersion(OCNaroWrappers::OCCDM_MetaData^ aMetaData) ;


virtual /*instead*/  OCPCDM_ReferenceIterator^ ReferenceIterator() ;

//! calls Find with an empty version <br>
 /*instead*/  System::Boolean Find(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName) ;

//! calls MetaData with an empty version <br>
 /*instead*/  OCCDM_MetaData^ MetaData(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName) ;

~OCCDF_MetaDataDriver()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
