// File generated by CPPExt (CPP file)
//

#include "BlendFunc_ChAsymInv.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../math/math_Vector.h"
#include "../math/math_Matrix.h"


using namespace OCNaroWrappers;

OCBlendFunc_ChAsymInv::OCBlendFunc_ChAsymInv(BlendFunc_ChAsymInv* nativeHandle) : OCBlend_FuncInv((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCBlendFunc_ChAsymInv::OCBlendFunc_ChAsymInv(OCNaroWrappers::OCAdaptor3d_HSurface^ S1, OCNaroWrappers::OCAdaptor3d_HSurface^ S2, OCNaroWrappers::OCAdaptor3d_HCurve^ C) : OCBlend_FuncInv((OCDummy^)nullptr)

{
  nativeHandle = new BlendFunc_ChAsymInv(*((Handle_Adaptor3d_HSurface*)S1->Handle), *((Handle_Adaptor3d_HSurface*)S2->Handle), *((Handle_Adaptor3d_HCurve*)C->Handle));
}

 void OCBlendFunc_ChAsymInv::Set(System::Boolean OnFirst, OCNaroWrappers::OCAdaptor2d_HCurve2d^ COnSurf)
{
  ((BlendFunc_ChAsymInv*)nativeHandle)->Set(OCConverter::BooleanToStandardBoolean(OnFirst), *((Handle_Adaptor2d_HCurve2d*)COnSurf->Handle));
}

 void OCBlendFunc_ChAsymInv::GetTolerance(OCNaroWrappers::OCmath_Vector^ Tolerance, Standard_Real Tol)
{
  ((BlendFunc_ChAsymInv*)nativeHandle)->GetTolerance(*((math_Vector*)Tolerance->Handle), Tol);
}

 void OCBlendFunc_ChAsymInv::GetBounds(OCNaroWrappers::OCmath_Vector^ InfBound, OCNaroWrappers::OCmath_Vector^ SupBound)
{
  ((BlendFunc_ChAsymInv*)nativeHandle)->GetBounds(*((math_Vector*)InfBound->Handle), *((math_Vector*)SupBound->Handle));
}

 System::Boolean OCBlendFunc_ChAsymInv::IsSolution(OCNaroWrappers::OCmath_Vector^ Sol, Standard_Real Tol)
{
  return OCConverter::StandardBooleanToBoolean(((BlendFunc_ChAsymInv*)nativeHandle)->IsSolution(*((math_Vector*)Sol->Handle), Tol));
}

 Standard_Integer OCBlendFunc_ChAsymInv::NbEquations()
{
  return ((BlendFunc_ChAsymInv*)nativeHandle)->NbEquations();
}

 System::Boolean OCBlendFunc_ChAsymInv::ComputeValues(OCNaroWrappers::OCmath_Vector^ X, Standard_Integer DegF, Standard_Integer DegL)
{
  return OCConverter::StandardBooleanToBoolean(((BlendFunc_ChAsymInv*)nativeHandle)->ComputeValues(*((math_Vector*)X->Handle), DegF, DegL));
}

 System::Boolean OCBlendFunc_ChAsymInv::Value(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F)
{
  return OCConverter::StandardBooleanToBoolean(((BlendFunc_ChAsymInv*)nativeHandle)->Value(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle)));
}

 System::Boolean OCBlendFunc_ChAsymInv::Derivatives(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((BlendFunc_ChAsymInv*)nativeHandle)->Derivatives(*((math_Vector*)X->Handle), *((math_Matrix*)D->Handle)));
}

 System::Boolean OCBlendFunc_ChAsymInv::Values(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((BlendFunc_ChAsymInv*)nativeHandle)->Values(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle), *((math_Matrix*)D->Handle)));
}

 void OCBlendFunc_ChAsymInv::Set(Standard_Real Dist1, Standard_Real Angle, Standard_Integer Choix)
{
  ((BlendFunc_ChAsymInv*)nativeHandle)->Set(Dist1, Angle, Choix);
}


