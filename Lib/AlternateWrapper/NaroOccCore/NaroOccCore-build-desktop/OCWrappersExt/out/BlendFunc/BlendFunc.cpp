// File generated by CPPExt (CPP file)
//

#include "BlendFunc.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



 void OCBlendFunc::GetShape(OCBlendFunc_SectionShape SectShape, Standard_Real MaxAng, Standard_Integer& NbPoles, Standard_Integer& NbKnots, Standard_Integer& Degree, OCConvert_ParameterisationType& TypeConv)
{
  BlendFunc::GetShape((BlendFunc_SectionShape)SectShape, MaxAng, NbPoles, NbKnots, Degree, (Convert_ParameterisationType&)TypeConv);
}

 void OCBlendFunc::Knots(OCBlendFunc_SectionShape SectShape, OCNaroWrappers::OCTColStd_Array1OfReal^ TKnots)
{
  BlendFunc::Knots((BlendFunc_SectionShape)SectShape, *((TColStd_Array1OfReal*)TKnots->Handle));
}

 void OCBlendFunc::Mults(OCBlendFunc_SectionShape SectShape, OCNaroWrappers::OCTColStd_Array1OfInteger^ TMults)
{
  BlendFunc::Mults((BlendFunc_SectionShape)SectShape, *((TColStd_Array1OfInteger*)TMults->Handle));
}

 void OCBlendFunc::GetMinimalWeights(OCBlendFunc_SectionShape SectShape, OCConvert_ParameterisationType TConv, Standard_Real AngleMin, Standard_Real AngleMax, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths)
{
  BlendFunc::GetMinimalWeights((BlendFunc_SectionShape)SectShape, (Convert_ParameterisationType)TConv, AngleMin, AngleMax, *((TColStd_Array1OfReal*)Weigths->Handle));
}

 OCGeomAbs_Shape OCBlendFunc::NextShape(OCGeomAbs_Shape S)
{
  return (OCGeomAbs_Shape)(BlendFunc::NextShape((GeomAbs_Shape)S));
}

 System::Boolean OCBlendFunc::ComputeNormal(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf, OCNaroWrappers::OCgp_Pnt2d^ p2d, OCNaroWrappers::OCgp_Vec^ Normal)
{
  return OCConverter::StandardBooleanToBoolean(BlendFunc::ComputeNormal(*((Handle_Adaptor3d_HSurface*)Surf->Handle), *((gp_Pnt2d*)p2d->Handle), *((gp_Vec*)Normal->Handle)));
}

 System::Boolean OCBlendFunc::ComputeDNormal(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf, OCNaroWrappers::OCgp_Pnt2d^ p2d, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNu, OCNaroWrappers::OCgp_Vec^ DNv)
{
  return OCConverter::StandardBooleanToBoolean(BlendFunc::ComputeDNormal(*((Handle_Adaptor3d_HSurface*)Surf->Handle), *((gp_Pnt2d*)p2d->Handle), *((gp_Vec*)Normal->Handle), *((gp_Vec*)DNu->Handle), *((gp_Vec*)DNv->Handle)));
}


