// File generated by CPPExt (MPV)
//
#ifndef _BlendFunc_Corde_OCWrappers_HeaderFile
#define _BlendFunc_Corde_OCWrappers_HeaderFile

// include native header
#include <BlendFunc_Corde.hxx>
#include "../Converter.h"


#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Vec2d.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HSurface;
ref class OCAdaptor3d_HCurve;
ref class OCmath_Vector;
ref class OCmath_Matrix;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Vec2d;


//! This function calculates point (pts) on the curve of <br>
//!          intersection between the normal to a curve (guide) <br>
//!          in a chosen parameter and a surface  (surf), so <br>
//!          that pts was at a given distance from the guide. <br>
//!          X(1),X(2) are the parameters U,V of pts on surf. <br>
public ref class OCBlendFunc_Corde  {

protected:
  BlendFunc_Corde* nativeHandle;
  OCBlendFunc_Corde(OCDummy^) {};

public:
  property BlendFunc_Corde* Handle
  {
    BlendFunc_Corde* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBlendFunc_Corde(BlendFunc_Corde* nativeHandle);

// Methods PUBLIC


OCBlendFunc_Corde(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCAdaptor3d_HCurve^ CGuide);


 /*instead*/  void SetParam(Standard_Real Param) ;


 /*instead*/  void SetDist(Standard_Real Dist) ;

//! computes the values <F> of the Function for the <br>
//!          variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
 /*instead*/  System::Boolean Value(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F) ;

//! returns the values <D> of the derivatives for the <br>
//!          variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
 /*instead*/  System::Boolean Derivatives(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Matrix^ D) ;


 /*instead*/  OCgp_Pnt^ PointOnS() ;

//! returns the point of parameter <Param> on CGuide <br>
 /*instead*/  OCgp_Pnt^ PointOnGuide() ;

//! returns the normal to CGuide at Ptgui. <br>
 /*instead*/  OCgp_Vec^ NPlan() ;

//! Returns True when it is not possible to compute <br>
//!          the tangent vectors at PointOnS. <br>
 /*instead*/  System::Boolean IsTangencyPoint() ;

//! Returns the tangent vector at PointOnS, in 3d space. <br>
 /*instead*/  OCgp_Vec^ TangentOnS() ;

//! Returns the tangent vector at PointOnS, in the <br>
//!          parametric space of the first surface. <br>
 /*instead*/  OCgp_Vec2d^ Tangent2dOnS() ;

//! Derived of the function compared to the parameter <br>
//! of the guideline <br>
 /*instead*/  void DerFguide(OCNaroWrappers::OCmath_Vector^ Sol, OCNaroWrappers::OCgp_Vec2d^ DerF) ;

//! Returns False if Sol is not solution else returns <br>
//!          True and updates the fields tgs and tg2d <br>
 /*instead*/  System::Boolean IsSolution(OCNaroWrappers::OCmath_Vector^ Sol, Standard_Real Tol) ;

~OCBlendFunc_Corde()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
