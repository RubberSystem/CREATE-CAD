// File generated by CPPExt (Package)
//

#ifndef _BlendFunc_OCWrappers_HeaderFile
#define _BlendFunc_OCWrappers_HeaderFile

// Include the wrapped header
#include <BlendFunc.hxx>

#include "BlendFunc_ConstRad.h"
#include "BlendFunc_ConstRadInv.h"
#include "BlendFunc_Ruled.h"
#include "BlendFunc_RuledInv.h"
#include "BlendFunc_EvolRad.h"
#include "BlendFunc_EvolRadInv.h"
#include "BlendFunc_CSConstRad.h"
#include "BlendFunc_CSCircular.h"
#include "BlendFunc_Corde.h"
#include "BlendFunc_Chamfer.h"
#include "BlendFunc_ChamfInv.h"
#include "BlendFunc_ChAsym.h"
#include "BlendFunc_ChAsymInv.h"
#include "BlendFunc_Tensor.h"


namespace OCNaroWrappers
{
//! This package provides a set of generic functions, that can <br>
//!          instantiated to compute blendings between two surfaces <br>
//!          (Constant radius, Evolutive radius, Ruled surface). <br>
public ref class OCBlendFunc abstract sealed
{

public:
// Methods


static /*instead*/  void GetShape(OCBlendFunc_SectionShape SectShape, Standard_Real MaxAng, Standard_Integer& NbPoles, Standard_Integer& NbKnots, Standard_Integer& Degree, OCConvert_ParameterisationType& TypeConv) ;


static /*instead*/  void Knots(OCBlendFunc_SectionShape SectShape, OCNaroWrappers::OCTColStd_Array1OfReal^ TKnots) ;


static /*instead*/  void Mults(OCBlendFunc_SectionShape SectShape, OCNaroWrappers::OCTColStd_Array1OfInteger^ TMults) ;


static /*instead*/  void GetMinimalWeights(OCBlendFunc_SectionShape SectShape, OCConvert_ParameterisationType TConv, Standard_Real AngleMin, Standard_Real AngleMax, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths) ;


static /*instead*/  OCGeomAbs_Shape NextShape(OCGeomAbs_Shape S) ;


static /*instead*/  System::Boolean ComputeNormal(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf, OCNaroWrappers::OCgp_Pnt2d^ p2d, OCNaroWrappers::OCgp_Vec^ Normal) ;


static /*instead*/  System::Boolean ComputeDNormal(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf, OCNaroWrappers::OCgp_Pnt2d^ p2d, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNu, OCNaroWrappers::OCgp_Vec^ DNv) ;


};

}; // OCNaroWrappers

#endif
