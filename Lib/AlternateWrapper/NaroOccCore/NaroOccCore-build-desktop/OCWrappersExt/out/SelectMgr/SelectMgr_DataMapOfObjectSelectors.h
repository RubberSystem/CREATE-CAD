// File generated by CPPExt (MPV)
//
#ifndef _SelectMgr_DataMapOfObjectSelectors_OCWrappers_HeaderFile
#define _SelectMgr_DataMapOfObjectSelectors_OCWrappers_HeaderFile

// include native header
#include <SelectMgr_DataMapOfObjectSelectors.hxx>
#include "../Converter.h"

#include "../TCollection/TCollection_BasicMap.h"

#include "../TCollection/TCollection_BasicMap.h"


namespace OCNaroWrappers
{

ref class OCSelectMgr_SelectableObject;
ref class OCSelectMgr_SequenceOfSelector;
ref class OCTColStd_MapTransientHasher;
ref class OCSelectMgr_DataMapNodeOfDataMapOfObjectSelectors;
ref class OCSelectMgr_DataMapIteratorOfDataMapOfObjectSelectors;



public ref class OCSelectMgr_DataMapOfObjectSelectors  : public OCTCollection_BasicMap {

protected:
  // dummy constructor;
  OCSelectMgr_DataMapOfObjectSelectors(OCDummy^) : OCTCollection_BasicMap((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelectMgr_DataMapOfObjectSelectors(SelectMgr_DataMapOfObjectSelectors* nativeHandle);

// Methods PUBLIC


OCSelectMgr_DataMapOfObjectSelectors(Standard_Integer NbBuckets);


 /*instead*/  OCSelectMgr_DataMapOfObjectSelectors^ Assign(OCNaroWrappers::OCSelectMgr_DataMapOfObjectSelectors^ Other) ;


 /*instead*/  void ReSize(Standard_Integer NbBuckets) ;


 /*instead*/  System::Boolean Bind(OCNaroWrappers::OCSelectMgr_SelectableObject^ K, OCNaroWrappers::OCSelectMgr_SequenceOfSelector^ I) ;


 /*instead*/  System::Boolean IsBound(OCNaroWrappers::OCSelectMgr_SelectableObject^ K) ;


 /*instead*/  System::Boolean UnBind(OCNaroWrappers::OCSelectMgr_SelectableObject^ K) ;


 /*instead*/  OCSelectMgr_SequenceOfSelector^ Find(OCNaroWrappers::OCSelectMgr_SelectableObject^ K) ;


 /*instead*/  OCSelectMgr_SequenceOfSelector^ ChangeFind(OCNaroWrappers::OCSelectMgr_SelectableObject^ K) ;


 /*instead*/  Standard_Address Find1(OCNaroWrappers::OCSelectMgr_SelectableObject^ K) ;


 /*instead*/  Standard_Address ChangeFind1(OCNaroWrappers::OCSelectMgr_SelectableObject^ K) ;

~OCSelectMgr_DataMapOfObjectSelectors()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
