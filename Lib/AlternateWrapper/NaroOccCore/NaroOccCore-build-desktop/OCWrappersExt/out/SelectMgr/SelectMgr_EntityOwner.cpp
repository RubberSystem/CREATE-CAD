// File generated by CPPExt (CPP file)
//

#include "SelectMgr_EntityOwner.h"
#include "../Converter.h"
#include "SelectMgr_SelectableObject.h"
#include "../PrsMgr/PrsMgr_PresentationManager.h"
#include "../PrsMgr/PrsMgr_PresentationManager3d.h"
#include "../TopLoc/TopLoc_Location.h"


using namespace OCNaroWrappers;

OCSelectMgr_EntityOwner::OCSelectMgr_EntityOwner(Handle(SelectMgr_EntityOwner)* nativeHandle) : OCSelectBasics_EntityOwner((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_SelectMgr_EntityOwner(*nativeHandle);
}

OCSelectMgr_EntityOwner::OCSelectMgr_EntityOwner(Standard_Integer aPriority) : OCSelectBasics_EntityOwner((OCDummy^)nullptr)

{
  nativeHandle = new Handle_SelectMgr_EntityOwner(new SelectMgr_EntityOwner(aPriority));
}

OCSelectMgr_EntityOwner::OCSelectMgr_EntityOwner(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSO, Standard_Integer aPriority) : OCSelectBasics_EntityOwner((OCDummy^)nullptr)

{
  nativeHandle = new Handle_SelectMgr_EntityOwner(new SelectMgr_EntityOwner(*((Handle_SelectMgr_SelectableObject*)aSO->Handle), aPriority));
}

 System::Boolean OCSelectMgr_EntityOwner::HasSelectable()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_EntityOwner*)nativeHandle))->HasSelectable());
}

OCSelectMgr_SelectableObject^ OCSelectMgr_EntityOwner::Selectable()
{
  Handle(SelectMgr_SelectableObject) tmp = (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->Selectable();
  return gcnew OCSelectMgr_SelectableObject(&tmp);
}

 void OCSelectMgr_EntityOwner::Set(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSO)
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->Set(*((Handle_SelectMgr_SelectableObject*)aSO->Handle));
}

 void OCSelectMgr_EntityOwner::Hilight()
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->Hilight();
}

 System::Boolean OCSelectMgr_EntityOwner::IsHilighted(OCNaroWrappers::OCPrsMgr_PresentationManager^ aPM, Standard_Integer aMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_EntityOwner*)nativeHandle))->IsHilighted(*((Handle_PrsMgr_PresentationManager*)aPM->Handle), aMode));
}

 void OCSelectMgr_EntityOwner::Hilight(OCNaroWrappers::OCPrsMgr_PresentationManager^ aPM, Standard_Integer aMode)
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->Hilight(*((Handle_PrsMgr_PresentationManager*)aPM->Handle), aMode);
}

 void OCSelectMgr_EntityOwner::HilightWithColor(OCNaroWrappers::OCPrsMgr_PresentationManager3d^ aPM, OCQuantity_NameOfColor aColor, Standard_Integer aMode)
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->HilightWithColor(*((Handle_PrsMgr_PresentationManager3d*)aPM->Handle), (Quantity_NameOfColor)aColor, aMode);
}

 void OCSelectMgr_EntityOwner::Unhilight(OCNaroWrappers::OCPrsMgr_PresentationManager^ aPM, Standard_Integer aMode)
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->Unhilight(*((Handle_PrsMgr_PresentationManager*)aPM->Handle), aMode);
}

 void OCSelectMgr_EntityOwner::Clear(OCNaroWrappers::OCPrsMgr_PresentationManager^ aPM, Standard_Integer aMode)
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->Clear(*((Handle_PrsMgr_PresentationManager*)aPM->Handle), aMode);
}

 System::Boolean OCSelectMgr_EntityOwner::HasLocation()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_EntityOwner*)nativeHandle))->HasLocation());
}

 void OCSelectMgr_EntityOwner::SetLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc)
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->SetLocation(*((TopLoc_Location*)aLoc->Handle));
}

 void OCSelectMgr_EntityOwner::ResetLocation()
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->ResetLocation();
}

OCTopLoc_Location^ OCSelectMgr_EntityOwner::Location()
{
  TopLoc_Location* tmp = new TopLoc_Location();
  *tmp = (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->Location();
  return gcnew OCTopLoc_Location(tmp);
}

 void OCSelectMgr_EntityOwner::State(Standard_Integer aStatus)
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->State(aStatus);
}

 Standard_Integer OCSelectMgr_EntityOwner::State()
{
  return (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->State();
}

 System::Boolean OCSelectMgr_EntityOwner::IsAutoHilight()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_EntityOwner*)nativeHandle))->IsAutoHilight());
}

 System::Boolean OCSelectMgr_EntityOwner::IsForcedHilight()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_EntityOwner*)nativeHandle))->IsForcedHilight());
}

 void OCSelectMgr_EntityOwner::SetZLayer(OCNaroWrappers::OCPrsMgr_PresentationManager^ thePrsMgr, Standard_Integer theLayerId)
{
  (*((Handle_SelectMgr_EntityOwner*)nativeHandle))->SetZLayer(*((Handle_PrsMgr_PresentationManager*)thePrsMgr->Handle), theLayerId);
}


