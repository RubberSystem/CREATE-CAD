// File generated by CPPExt (Transient)
//
#ifndef _SelectMgr_ViewerSelector_OCWrappers_HeaderFile
#define _SelectMgr_ViewerSelector_OCWrappers_HeaderFile

// include the wrapped class
#include <SelectMgr_ViewerSelector.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "SelectMgr_DataMapOfIntegerSensitive.h"
#include "SelectMgr_DataMapOfSelectionActivation.h"
#include "../SelectBasics/SelectBasics_SortAlgo.h"
#include "../Bnd/Bnd_Box2d.h"
#include "SelectMgr_IndexedDataMapOfOwnerCriterion.h"
#include "../TColStd/TColStd_SequenceOfInteger.h"
#include "SelectMgr_StateOfSelection.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfInteger;
ref class OCSelectMgr_SelectionManager;
ref class OCSelectMgr_Selection;
ref class OCSelectMgr_SelectableObject;
ref class OCBnd_Box2d;
ref class OCTColgp_Array1OfPnt2d;
ref class OCSelectMgr_EntityOwner;
ref class OCTColStd_ListOfInteger;
ref class OCTCollection_AsciiString;
ref class OCSelectBasics_SensitiveEntity;
ref class OCSelectMgr_DataMapOfIntegerSensitive;


//! A framework to define finding, sorting the sensitive <br>
//! primitives in a view. Services are also provided to <br>
//! define the return of the owners of those primitives <br>
//! selected. The primitives are sorted by criteria such <br>
//! as priority of the primitive or its depth in the view <br>
//! relative to that of other primitives. <br>
//! This framework is undefined for either 2D or 3D, <br>
//! and is consequently used by both <br>
//! StdSelect_ViewerSelector2d and <br>
//! StdSelect_ViewerSelector3d, which inherit it, and <br>
//! which in turn, return 2D and 3D owners of sensitive <br>
//! primitives respectively. <br>
//! Note that in 3D, the inheriting framework <br>
//! StdSelect_ViewerSelector3d   is only to be used <br>
//! if you do not want to use the services provided by <br>
//! AIS. In 2D, you will, however, need the services <br>
//! provided by the StdSelect_ViewerSelector2d. <br>
//! Two tools are available to find and select objects <br>
//! found at a given position in the view. If you want to <br>
//! select the owners of all the objects detected at <br>
//! point x,y, you use the Init - More - Next - Picked <br>
//! loop. If, on the other hand, you want to select only <br>
//! one object detected at that point, you use the Init - <br>
//! More - OnePicked loop. In this iteration, More is <br>
//! used to see if an object was picked and <br>
//! OnePicked, to get the object closest to the pick position. <br>
//! Viewer selectors are driven by <br>
//! SelectMgr_SelectionManager, and manipulate <br>
//! the SelectMgr_Selection objects given to them by <br>
//! the selection manager. <br>
public ref class OCSelectMgr_ViewerSelector : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCSelectMgr_ViewerSelector(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelectMgr_ViewerSelector(Handle(SelectMgr_ViewerSelector)* nativeHandle);

// Methods PUBLIC


OCSelectMgr_ViewerSelector();

//! to be redefined if conversion is necessary for SensitiveEntities... <br>
virtual /*instead*/  void Convert(OCNaroWrappers::OCSelectMgr_Selection^ aSelection) ;

//! Empties all the tables, removes all selections... <br>
 /*instead*/  void Clear() ;

//! converts all the sensitive entities ; <br>
 /*instead*/  void UpdateConversion() ;

//! changes the Sensitivity of picking <br>
//!          Input value is Real. <br>
 /*instead*/  void SetSensitivity(Standard_Real aTol) ;

//! returns the Sensitivity of picking <br>
 /*instead*/  Standard_Real Sensitivity() ;

//! sets the clipping limits of dynamic picking <br>
//!          input value are Real <br>
 /*instead*/  void SetClipping(Standard_Real Xc, Standard_Real Yc, Standard_Real Height, Standard_Real Width) ;

//! sets the clipping limits of dynamic picking <br>
//!          input value are Real <br>
 /*instead*/  void SetClipping(OCNaroWrappers::OCBnd_Box2d^ aRectangle) ;

//! Performs a pick action. Xr, Yr   are the real 2D mouse <br>
//! coordinates in the view. The selector looks for areas <br>
//! and owners that are touched. <br>
 /*instead*/  void InitSelect(Standard_Real Xr, Standard_Real Yr) ;

//! Performs a pick action. aRect is a Box2d (real <br>
//! coordinates) for the selection. The selector looks for <br>
//! areas and owners that are touched. <br>
 /*instead*/  void InitSelect(OCNaroWrappers::OCBnd_Box2d^ aRect) ;

//! Performs a pick action <br>
//! -   Xmin, Ymin define the coordinates of the minimum <br>
//!   point in the lower left hand corner of the selection <br>
//!   box, and XMax, YMax define the coordinates of <br>
//!   the maximum point in the upper right hand corner <br>
//!   of the selection box. The selector looks for areas <br>
//!   and owners that are touched. <br>
 /*instead*/  void InitSelect(Standard_Real Xmin, Standard_Real Ymin, Standard_Real Xmax, Standard_Real Ymax) ;

//! pick action  - input  values of a polyline selection for selection. <br>
 /*instead*/  void InitSelect(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline) ;

//! Sorts the detected entites by priority and distance. <br>
//!          to be redefined if other criterion are used... <br>
virtual /*instead*/  void SortResult() ;

//! Begins an iteration scanning for the owners detected at a position in the view. <br>
 /*instead*/  void Init() ;

//!  Continues the interation scanning for the owners <br>
//!   detected at a position in the view, or <br>
//! -   continues the iteration scanning for the owner <br>
//!   closest to the position in the view. <br>
 /*instead*/  System::Boolean More() ;

//! Returns the next owner found in the iteration. This is <br>
//! a scan for the owners detected at a position in the view. <br>
 /*instead*/  void Next() ;

//! Returns the current selected entity detected by the selector; <br>
 /*instead*/  OCSelectMgr_EntityOwner^ Picked() ;

//! Returns the picked element with the highest priority, <br>
//! and which is the closest to the last successful mouse position. <br>
 /*instead*/  OCSelectMgr_EntityOwner^ OnePicked() ;

//! Set preference of selecting one object for OnePicked() method: <br>
//! - If True, objects with less depth (distance fron the view plane) are <br>
//!   preferred regardless of priority (priority is used then to choose among <br>
//!   objects with similar depth), <br>
//! - If False, objects with higher priority are preferred regardless of the <br>
//!   depth which is used to choose among objects of the same priority. <br>
 /*instead*/  void SetPickClosest(System::Boolean preferClosest) ;

//! Returns the number of owners found at a position in <br>
//! the view by the Init - More - Next - Picked iteration. <br>
 /*instead*/  Standard_Integer NbPicked() ;

//! Returns the  entity which is at rank <aRank> <br>
//!          in the list of stored ones. <br>
 /*instead*/  OCSelectMgr_EntityOwner^ Picked(Standard_Integer aRank) ;

//! Returns True if a successful pick was stored, <br>
//!          i.e. LastPosition method means something... <br>
 /*instead*/  System::Boolean HasStored() ;

//! Gives the last successful pick position; <br>
//!          is useful to get objects really picked <br>
 /*instead*/  void LastPosition(Standard_Real& Xr, Standard_Real& Yr) ;


 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject) ;

//! Returns the list of selection modes ModeList found in <br>
//! this selector for the selectable object aSelectableObject. <br>
//! Returns true if aSelectableObject is referenced inside <br>
//! this selector; returns false if the object is not present <br>
//! in this selector. <br>
 /*instead*/  System::Boolean Modes(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject, OCNaroWrappers::OCTColStd_ListOfInteger^ ModeList, OCSelectMgr_StateOfSelection WantedState) ;

//! Returns true if the selectable object <br>
//! aSelectableObject having the selection mode aMode <br>
//! is active in this selector. <br>
 /*instead*/  System::Boolean IsActive(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject, Standard_Integer aMode) ;

//! Returns true if the selectable object <br>
//! aSelectableObject having the selection mode aMode <br>
//! is in this selector. <br>
 /*instead*/  System::Boolean IsInside(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject, Standard_Integer aMode) ;

//! Returns the selection status Status of the selection aSelection. <br>
 /*instead*/  OCSelectMgr_StateOfSelection Status(OCNaroWrappers::OCSelectMgr_Selection^ aSelection) ;


 /*instead*/  void Dump(Standard_OStream& S) ;


 /*instead*/  OCTCollection_AsciiString^ Status(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject) ;

//! gives general information about the Selector <br>
 /*instead*/  OCTCollection_AsciiString^ Status() ;


 /*instead*/  void UpdateSort() ;


 /*instead*/  OCSelectBasics_SensitiveEntity^ Primitive(Standard_Integer Rank) ;


 /*instead*/  OCSelectMgr_DataMapOfIntegerSensitive^ Primitives() ;


 /*instead*/  void SetUpdateSortPossible(System::Boolean possible) ;


 /*instead*/  System::Boolean IsUpdateSortPossible() ;

~OCSelectMgr_ViewerSelector()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
