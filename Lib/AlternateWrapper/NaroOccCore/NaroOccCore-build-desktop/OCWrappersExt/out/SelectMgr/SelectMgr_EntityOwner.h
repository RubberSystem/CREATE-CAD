// File generated by CPPExt (Transient)
//
#ifndef _SelectMgr_EntityOwner_OCWrappers_HeaderFile
#define _SelectMgr_EntityOwner_OCWrappers_HeaderFile

// include the wrapped class
#include <SelectMgr_EntityOwner.hxx>
#include "../Converter.h"

#include "../SelectBasics/SelectBasics_EntityOwner.h"

#include "../Quantity/Quantity_NameOfColor.h"


namespace OCNaroWrappers
{

ref class OCSelectMgr_SelectableObject;
ref class OCPrsMgr_PresentationManager;
ref class OCPrsMgr_PresentationManager3d;
ref class OCTopLoc_Location;


//! A framework to define classes of owners of sensitive primitives. <br>
//! The owner is the link between application and <br>
//! selection data structures. <br>
//! For the application to make its own objects selectable, <br>
//! it must define owner classes inheriting this framework. <br>
//! <br>
public ref class OCSelectMgr_EntityOwner : OCSelectBasics_EntityOwner {

protected:
  // dummy constructor;
  OCSelectMgr_EntityOwner(OCDummy^) : OCSelectBasics_EntityOwner((OCDummy^)nullptr) {};

public:

// constructor from native
OCSelectMgr_EntityOwner(Handle(SelectMgr_EntityOwner)* nativeHandle);

// Methods PUBLIC

//! Initializes the selection priority aPriority. <br>
OCSelectMgr_EntityOwner(Standard_Integer aPriority);

//! Constructs a framework with the selectable object <br>
//! anSO being attributed the selection priority aPriority. <br>
OCSelectMgr_EntityOwner(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSO, Standard_Integer aPriority);

//! Returns true if there is a selectable object to serve as an owner. <br>
 /*instead*/  System::Boolean HasSelectable() ;

//! Returns a selectable object detected in the working context. <br>
 /*instead*/  OCSelectMgr_SelectableObject^ Selectable() ;

//! Sets the selectable object anSO to be used by the <br>
//! second constructor above. <br>
 /*instead*/  void Set(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSO) ;

//! Provides a framework to highlight any selectable <br>
//! object found subsequently which can serve as an <br>
//! owner of a sensitive primitive. <br>
virtual /*instead*/  void Hilight() ;

//! Returns true if the presentation manager aPM <br>
//! highlights selections corresponding to the selection mode aMode. <br>
virtual /*instead*/  System::Boolean IsHilighted(OCNaroWrappers::OCPrsMgr_PresentationManager^ aPM, Standard_Integer aMode) ;

//! Highlights the owner of a detected selectable object in <br>
//! the presentation manager aPM. This object could be <br>
//! the owner of a sensitive primitive. <br>
//! The display mode for the highlight is aMode; this has <br>
//! the default value of 0, that is, wireframe mode. <br>
virtual /*instead*/  void Hilight(OCNaroWrappers::OCPrsMgr_PresentationManager^ aPM, Standard_Integer aMode) ;


virtual /*instead*/  void HilightWithColor(OCNaroWrappers::OCPrsMgr_PresentationManager3d^ aPM, OCQuantity_NameOfColor aColor, Standard_Integer aMode) ;

//! Removes highlighting from the owner of a detected <br>
//! selectable object in the presentation manager aPM. <br>
//! This object could be the owner of a sensitive primitive. <br>
//! The display mode for the highlight is aMode; this has <br>
//! the default value of 0, that is, wireframe mode. <br>
virtual /*instead*/  void Unhilight(OCNaroWrappers::OCPrsMgr_PresentationManager^ aPM, Standard_Integer aMode) ;

//! Clears the owners matching the value of the selection <br>
//! mode aMode from the presentation manager object aPM. <br>
virtual /*instead*/  void Clear(OCNaroWrappers::OCPrsMgr_PresentationManager^ aPM, Standard_Integer aMode) ;


virtual /*instead*/  System::Boolean HasLocation() ;


virtual /*instead*/  void SetLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc) ;


virtual /*instead*/  void ResetLocation() ;


virtual /*instead*/  OCTopLoc_Location^ Location() ;


 /*instead*/  void State(Standard_Integer aStatus) ;


 /*instead*/  Standard_Integer State() ;

//! if owner is not auto hilighted, for group contains many such owners <br>
//!          will be called one method HilightSelected of SelectableObject <br>
virtual /*instead*/  System::Boolean IsAutoHilight() ;

//! if this method returns TRUE the owner will allways call method <br>
//!          Hilight for SelectableObject when the owner is detected. By default <br>
//!          it always return FALSE. <br>
virtual /*instead*/  System::Boolean IsForcedHilight() ;

//! Set Z layer ID and update all presentations. <br>
virtual /*instead*/  void SetZLayer(OCNaroWrappers::OCPrsMgr_PresentationManager^ thePrsMgr, Standard_Integer theLayerId) ;

~OCSelectMgr_EntityOwner()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
