// File generated by CPPExt (CPP file)
//

#include "SelectMgr_ViewerSelector.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "SelectMgr_SelectionManager.h"
#include "SelectMgr_Selection.h"
#include "SelectMgr_SelectableObject.h"
#include "../Bnd/Bnd_Box2d.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "SelectMgr_EntityOwner.h"
#include "../TColStd/TColStd_ListOfInteger.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../SelectBasics/SelectBasics_SensitiveEntity.h"
#include "SelectMgr_DataMapOfIntegerSensitive.h"


using namespace OCNaroWrappers;

OCSelectMgr_ViewerSelector::OCSelectMgr_ViewerSelector(Handle(SelectMgr_ViewerSelector)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_SelectMgr_ViewerSelector(*nativeHandle);
}

OCSelectMgr_ViewerSelector::OCSelectMgr_ViewerSelector() : OCMMgt_TShared((OCDummy^)nullptr)

{}

 void OCSelectMgr_ViewerSelector::Convert(OCNaroWrappers::OCSelectMgr_Selection^ aSelection)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Convert(*((Handle_SelectMgr_Selection*)aSelection->Handle));
}

 void OCSelectMgr_ViewerSelector::Clear()
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Clear();
}

 void OCSelectMgr_ViewerSelector::UpdateConversion()
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->UpdateConversion();
}

 void OCSelectMgr_ViewerSelector::SetSensitivity(Standard_Real aTol)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->SetSensitivity(aTol);
}

 Standard_Real OCSelectMgr_ViewerSelector::Sensitivity()
{
  return (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Sensitivity();
}

 void OCSelectMgr_ViewerSelector::SetClipping(Standard_Real Xc, Standard_Real Yc, Standard_Real Height, Standard_Real Width)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->SetClipping(Xc, Yc, Height, Width);
}

 void OCSelectMgr_ViewerSelector::SetClipping(OCNaroWrappers::OCBnd_Box2d^ aRectangle)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->SetClipping(*((Bnd_Box2d*)aRectangle->Handle));
}

 void OCSelectMgr_ViewerSelector::InitSelect(Standard_Real Xr, Standard_Real Yr)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->InitSelect(Xr, Yr);
}

 void OCSelectMgr_ViewerSelector::InitSelect(OCNaroWrappers::OCBnd_Box2d^ aRect)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->InitSelect(*((Bnd_Box2d*)aRect->Handle));
}

 void OCSelectMgr_ViewerSelector::InitSelect(Standard_Real Xmin, Standard_Real Ymin, Standard_Real Xmax, Standard_Real Ymax)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->InitSelect(Xmin, Ymin, Xmax, Ymax);
}

 void OCSelectMgr_ViewerSelector::InitSelect(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->InitSelect(*((TColgp_Array1OfPnt2d*)Polyline->Handle));
}

 void OCSelectMgr_ViewerSelector::SortResult()
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->SortResult();
}

 void OCSelectMgr_ViewerSelector::Init()
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Init();
}

 System::Boolean OCSelectMgr_ViewerSelector::More()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->More());
}

 void OCSelectMgr_ViewerSelector::Next()
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Next();
}

OCSelectMgr_EntityOwner^ OCSelectMgr_ViewerSelector::Picked()
{
  Handle(SelectMgr_EntityOwner) tmp = (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Picked();
  return gcnew OCSelectMgr_EntityOwner(&tmp);
}

OCSelectMgr_EntityOwner^ OCSelectMgr_ViewerSelector::OnePicked()
{
  Handle(SelectMgr_EntityOwner) tmp = (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->OnePicked();
  return gcnew OCSelectMgr_EntityOwner(&tmp);
}

 void OCSelectMgr_ViewerSelector::SetPickClosest(System::Boolean preferClosest)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->SetPickClosest(OCConverter::BooleanToStandardBoolean(preferClosest));
}

 Standard_Integer OCSelectMgr_ViewerSelector::NbPicked()
{
  return (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->NbPicked();
}

OCSelectMgr_EntityOwner^ OCSelectMgr_ViewerSelector::Picked(Standard_Integer aRank)
{
  Handle(SelectMgr_EntityOwner) tmp = (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Picked(aRank);
  return gcnew OCSelectMgr_EntityOwner(&tmp);
}

 System::Boolean OCSelectMgr_ViewerSelector::HasStored()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->HasStored());
}

 void OCSelectMgr_ViewerSelector::LastPosition(Standard_Real& Xr, Standard_Real& Yr)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->LastPosition(Xr, Yr);
}

 System::Boolean OCSelectMgr_ViewerSelector::Contains(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Contains(*((Handle_SelectMgr_SelectableObject*)aSelectableObject->Handle)));
}

 System::Boolean OCSelectMgr_ViewerSelector::Modes(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject, OCNaroWrappers::OCTColStd_ListOfInteger^ ModeList, OCSelectMgr_StateOfSelection WantedState)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Modes(*((Handle_SelectMgr_SelectableObject*)aSelectableObject->Handle), *((TColStd_ListOfInteger*)ModeList->Handle), (SelectMgr_StateOfSelection)WantedState));
}

 System::Boolean OCSelectMgr_ViewerSelector::IsActive(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject, Standard_Integer aMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->IsActive(*((Handle_SelectMgr_SelectableObject*)aSelectableObject->Handle), aMode));
}

 System::Boolean OCSelectMgr_ViewerSelector::IsInside(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject, Standard_Integer aMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->IsInside(*((Handle_SelectMgr_SelectableObject*)aSelectableObject->Handle), aMode));
}

 OCSelectMgr_StateOfSelection OCSelectMgr_ViewerSelector::Status(OCNaroWrappers::OCSelectMgr_Selection^ aSelection)
{
  return (OCSelectMgr_StateOfSelection)((*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Status(*((Handle_SelectMgr_Selection*)aSelection->Handle)));
}

 void OCSelectMgr_ViewerSelector::Dump(Standard_OStream& S)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Dump(S);
}

OCTCollection_AsciiString^ OCSelectMgr_ViewerSelector::Status(OCNaroWrappers::OCSelectMgr_SelectableObject^ aSelectableObject)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Status(*((Handle_SelectMgr_SelectableObject*)aSelectableObject->Handle));
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCSelectMgr_ViewerSelector::Status()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Status();
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCSelectMgr_ViewerSelector::UpdateSort()
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->UpdateSort();
}

OCSelectBasics_SensitiveEntity^ OCSelectMgr_ViewerSelector::Primitive(Standard_Integer Rank)
{
  Handle(SelectBasics_SensitiveEntity) tmp = (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Primitive(Rank);
  return gcnew OCSelectBasics_SensitiveEntity(&tmp);
}

OCSelectMgr_DataMapOfIntegerSensitive^ OCSelectMgr_ViewerSelector::Primitives()
{
  SelectMgr_DataMapOfIntegerSensitive* tmp = new SelectMgr_DataMapOfIntegerSensitive(0);
  *tmp = (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->Primitives();
  return gcnew OCSelectMgr_DataMapOfIntegerSensitive(tmp);
}

 void OCSelectMgr_ViewerSelector::SetUpdateSortPossible(System::Boolean possible)
{
  (*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->SetUpdateSortPossible(OCConverter::BooleanToStandardBoolean(possible));
}

 System::Boolean OCSelectMgr_ViewerSelector::IsUpdateSortPossible()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_SelectMgr_ViewerSelector*)nativeHandle))->IsUpdateSortPossible());
}


