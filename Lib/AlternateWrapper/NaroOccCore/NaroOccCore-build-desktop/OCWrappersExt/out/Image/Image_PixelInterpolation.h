// File generated by CPPExt (MPV)
//
#ifndef _Image_PixelInterpolation_OCWrappers_HeaderFile
#define _Image_PixelInterpolation_OCWrappers_HeaderFile

// include native header
#include <Image_PixelInterpolation.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCImage_Image;
ref class OCAspect_Pixel;
ref class OCImage_DColorImage;
ref class OCAspect_ColorPixel;
ref class OCImage_DIndexedImage;
ref class OCAspect_IndexPixel;


//! The class PixelInterpolation is used to compute a Pixel <br>
//!            value on non-integer Image coordinate. This Pixel type <br>
//!	      is called SubPixel . <br>
//!          PixelInterpolation is the default and is the simplest one, <br>
//!	      SubPixel value on non-integer Image coordinate is the <br>
//!	      value of the nearest Pixel at integer coordinate. <br>
//!	    The user can create a new kind of PixelInterpolation with a <br>
//!	      new algorithm by creating a new derived PixelInterpolation <br>
//!	      class and redefined Interpolate() method. <br>
//!	    If V1  is the value of the nearest Image Pixel <br>
//!		V = V1 is the Image SubPixel value on non-integer <br>
//!	      coordinate (FX,FY) <br>
public ref class OCImage_PixelInterpolation  {

protected:
  Image_PixelInterpolation* nativeHandle;
  OCImage_PixelInterpolation(OCDummy^) {};

public:
  property Image_PixelInterpolation* Handle
  {
    Image_PixelInterpolation* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCImage_PixelInterpolation(Image_PixelInterpolation* nativeHandle);

// Methods PUBLIC

//! Create a PixelInterpolation  object. <br>
OCImage_PixelInterpolation();

//! Compute SubPixel's value on non-integer Image coordinate. <br>
//!	    LowerX,LowerY,UpperX,UpperY is the Image Min Max, it's used <br>
//!	    to check if the SubPixel coordinate X,Y is outside of image. <br>
//!          Return True  if Interpolation Succes. <br>
//!	    Retrun False if the SubPixel is out from Image. <br>
virtual /*instead*/  System::Boolean Interpolate(OCNaroWrappers::OCImage_Image^ aImage, Standard_Real X, Standard_Real Y, Standard_Integer LowerX, Standard_Integer LowerY, Standard_Integer UpperX, Standard_Integer UpperY, OCNaroWrappers::OCAspect_Pixel^ RetPixel) ;

//! Compute SubPixel's value on non-integer Image coordinate for <br>
//!	      DColorImage and ColorPixel. <br>
//!	    LowerX,LowerY,UpperX,UpperY is the Image Min Max, it's used <br>
//!	      to check if the SubPixel coordinate FX,FY is outside of <br>
//!	      image. <br>
//!          Return True  if Interpolation Succes. <br>
//!	    Return False if the SubPixel is out from Image. <br>
virtual /*instead*/  System::Boolean Interpolate(OCNaroWrappers::OCImage_DColorImage^ aImage, Standard_Real FX, Standard_Real FY, Standard_Integer LowerX, Standard_Integer LowerY, Standard_Integer UpperX, Standard_Integer UpperY, OCNaroWrappers::OCAspect_ColorPixel^ RetPixel) ;

//! Compute SubPixel's value on non-integer Image coordinate for <br>
//!	      DIndexedImage and IndexPixel. <br>
//!	    LowerX,LowerY,UpperX,UpperY is the Image Min Max, it's use <br>
//!	    check if the SubPixel coordinate X,Y is outside of image. <br>
//!          Return True  if Interpolation Succes. <br>
//!	    Return False if the SubPixel is out from Image. <br>
virtual /*instead*/  System::Boolean Interpolate(OCNaroWrappers::OCImage_DIndexedImage^ aImage, Standard_Real FX, Standard_Real FY, Standard_Integer LowerX, Standard_Integer LowerY, Standard_Integer UpperX, Standard_Integer UpperY, OCNaroWrappers::OCAspect_IndexPixel^ RetPixel) ;

~OCImage_PixelInterpolation()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
