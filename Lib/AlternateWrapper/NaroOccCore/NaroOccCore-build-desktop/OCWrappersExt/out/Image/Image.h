// File generated by CPPExt (Package)
//

#ifndef _Image_OCWrappers_HeaderFile
#define _Image_OCWrappers_HeaderFile

// Include the wrapped header
#include <Image.hxx>

#include "Image_Image.h"
#include "Image_PixelInterpolation.h"
#include "Image_AveragePixelInterpolation.h"
#include "Image_BalancedPixelInterpolation.h"
#include "Image_PlanarPixelInterpolation.h"
#include "Image_BilinearPixelInterpolation.h"
#include "Image_GPixelField.h"
#include "Image_GImage.h"
#include "Image_PixelRow.h"
#include "Image_PixelField.h"
#include "Image_DColorImage.h"
#include "Image_DIndexedImage.h"
#include "Image_PseudoColorImage.h"
#include "Image_ColorImage.h"
#include "Image_Convertor.h"
#include "Image_ColorPixelMapHasher.h"
#include "Image_ColorPixelDataMap.h"
#include "Image_IndexPixelMapHasher.h"
#include "Image_LookupTable.h"
#include "Image_PixelRowOfDColorImage.h"
#include "Image_PixelFieldOfDColorImage.h"
#include "Image_PixelRowOfDIndexedImage.h"
#include "Image_PixelFieldOfDIndexedImage.h"
#include "Image_DataMapNodeOfColorPixelDataMap.h"
#include "Image_DataMapIteratorOfColorPixelDataMap.h"
#include "Image_DataMapNodeOfLookupTable.h"
#include "Image_DataMapIteratorOfLookupTable.h"


namespace OCNaroWrappers
{
//! The package Image provide PseudoColorImage and ColorImage <br>
//!		definition and a set of key functions from the fields <br>
//!		of image. <br>
public ref class OCImage abstract sealed
{

public:
// Methods

//! Zoom an Image with a specific PixelInterpolation method. <br>
static /*instead*/  void Zoom(OCNaroWrappers::OCImage_Image^ aImage, OCNaroWrappers::OCImage_PixelInterpolation^ aInterpolation, Standard_Real aCoefX, Standard_Real aCoefY) ;

//! Zoom an Image with the default PixelInterpolation method. <br>
static /*instead*/  void Zoom(OCNaroWrappers::OCImage_Image^ aImage, Standard_Real aCoefX, Standard_Real aCoefY) ;

//! Rotate an Image with a specific PixelInterpolation method. <br>
static /*instead*/  void Rotate(OCNaroWrappers::OCImage_Image^ aImage, OCNaroWrappers::OCImage_PixelInterpolation^ aInterpolation, Quantity_PlaneAngle aAngle) ;

//! Rotate an Image with the default PixelInterpolation method. <br>
static /*instead*/  void Rotate(OCNaroWrappers::OCImage_Image^ aImage, Quantity_PlaneAngle aAngle) ;

//! Translate an Image with a specific PixelInterpolation <br>
//!		method. <br>
static /*instead*/  void Translate(OCNaroWrappers::OCImage_Image^ aImage, OCNaroWrappers::OCImage_PixelInterpolation^ aInterpolation, Standard_Real DX, Standard_Real DY) ;

//! Translate an Image with the default PixelInterpolation <br>
//!		method. <br>
static /*instead*/  void Translate(OCNaroWrappers::OCImage_Image^ aImage, Standard_Real DX, Standard_Real DY) ;

//! General transformation of an Image with a specific <br>
//!		PixelInterpolation method. <br>
//!	Warning: <br>
//!  		Raises an exception if the matrix of the transformation <br>
//!  		is not inversible. <br>
static /*instead*/  void Affine(OCNaroWrappers::OCImage_Image^ aImage, OCNaroWrappers::OCImage_PixelInterpolation^ aInterpolation, OCNaroWrappers::OCgp_GTrsf2d^ Trsf) ;

//! General transformation of an Image with the default <br>
//!		PixelInterpolation method. <br>
//!	Warning: <br>
//!  		Raises an exception if the matrix of the transformation <br>
//!  		is not inversible. <br>
static /*instead*/  void Affine(OCNaroWrappers::OCImage_Image^ aImage, OCNaroWrappers::OCgp_GTrsf2d^ Trsf) ;

//! General transformation of an Image with a specific <br>
//!		PixelInterpolation method. <br>
//!	Warning: <br>
//!  		Raises an exception if the matrix of the transformation <br>
//!  		is not inversible. <br>
static /*instead*/  void Affine(OCNaroWrappers::OCImage_Image^ aImage, OCNaroWrappers::OCImage_PixelInterpolation^ aInterpolation, OCNaroWrappers::OCgp_Trsf^ Trsf) ;

//! General transformation of an Image with the default <br>
//!		PixelInterpolation method. <br>
//!	Warning: <br>
//!  		Raises an exception if the matrix of the transformation <br>
//!  		is not inversible. <br>
static /*instead*/  void Affine(OCNaroWrappers::OCImage_Image^ aImage, OCNaroWrappers::OCgp_Trsf^ Trsf) ;


};

}; // OCNaroWrappers

#endif
