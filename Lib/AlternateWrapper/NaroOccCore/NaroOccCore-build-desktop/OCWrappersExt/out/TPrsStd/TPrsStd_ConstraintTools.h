// File generated by CPPExt (MPV)
//
#ifndef _TPrsStd_ConstraintTools_OCWrappers_HeaderFile
#define _TPrsStd_ConstraintTools_OCWrappers_HeaderFile

// include native header
#include <TPrsStd_ConstraintTools.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCAIS_InteractiveObject;
ref class OCTCollection_ExtendedString;
ref class OCTopoDS_Shape;
ref class OCGeom_Geometry;



public ref class OCTPrsStd_ConstraintTools  {

protected:
  TPrsStd_ConstraintTools* nativeHandle;
  OCTPrsStd_ConstraintTools(OCDummy^) {};

public:
  property TPrsStd_ConstraintTools* Handle
  {
    TPrsStd_ConstraintTools* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTPrsStd_ConstraintTools(TPrsStd_ConstraintTools* nativeHandle);

// Methods PUBLIC


static /*instead*/  void UpdateOnlyValue(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeDistance(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeParallel(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeTangent(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputePerpendicular(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeConcentric(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeSymmetry(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeMidPoint(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeAngle(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeRadius(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeMinRadius(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeMaxRadius(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeEqualDistance(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeEqualRadius(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeFix(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeDiameter(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeOffset(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputePlacement(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeCoincident(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeRound(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeOthers(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;


static /*instead*/  void ComputeTextAndValue(, Standard_Real& aValue, OCNaroWrappers::OCTCollection_ExtendedString^ aText, System::Boolean anIsAngle) ;


static /*instead*/  void ComputeAngleForOneFace(, OCNaroWrappers::OCAIS_InteractiveObject^ anAIS) ;

~OCTPrsStd_ConstraintTools()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
