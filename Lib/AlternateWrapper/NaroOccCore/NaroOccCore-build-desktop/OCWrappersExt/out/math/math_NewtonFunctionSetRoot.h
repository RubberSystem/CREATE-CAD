// File generated by CPPExt (MPV)
//
#ifndef _math_NewtonFunctionSetRoot_OCWrappers_HeaderFile
#define _math_NewtonFunctionSetRoot_OCWrappers_HeaderFile

// include native header
#include <math_NewtonFunctionSetRoot.hxx>
#include "../Converter.h"


#include "math_Vector.h"
#include "math_IntegerVector.h"
#include "math_Matrix.h"


namespace OCNaroWrappers
{

ref class OCmath_FunctionSetWithDerivatives;
ref class OCmath_Vector;
ref class OCmath_Matrix;



//! This class computes the root of a set of N functions of N variables, <br>
//! knowing an initial guess at the solution and using the <br>
//! Newton Raphson algorithm. Knowledge of all the partial <br>
//! derivatives (Jacobian) is required. <br>
public ref class OCmath_NewtonFunctionSetRoot  {

protected:
  math_NewtonFunctionSetRoot* nativeHandle;
  OCmath_NewtonFunctionSetRoot(OCDummy^) {};

public:
  property math_NewtonFunctionSetRoot* Handle
  {
    math_NewtonFunctionSetRoot* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_NewtonFunctionSetRoot(math_NewtonFunctionSetRoot* nativeHandle);

// Methods PUBLIC


//! This constructor should be used in a sub-class to initialize <br>
//! correctly all the fields of this class. <br>
//! The range (1, F.NbVariables()) must be especially respected for <br>
//! all vectors and matrix declarations. <br>
OCmath_NewtonFunctionSetRoot(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, OCNaroWrappers::OCmath_Vector^ XTol, Standard_Real FTol, Standard_Integer NbIterations);


//! This constructor should be used in a sub-class to initialize <br>
//! correctly all the fields of this class. <br>
//! The range (1, F.NbVariables()) must be especially respected for <br>
//! all vectors and matrix declarations. <br>
//! The method SetTolerance must be called before performing the <br>
//! algorithm. <br>
OCmath_NewtonFunctionSetRoot(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, Standard_Real FTol, Standard_Integer NbIterations);


//! The Newton method is done to improve the root of the function F <br>
//! from the initial guess StartingPoint. <br>
//! The tolerance required on the root is given by Tolerance. <br>
//! The solution is found when : <br>
//!    abs(Xj - Xj-1)(i) <= XTol(i) and abs(Fi) <= FTol for all i; <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
OCmath_NewtonFunctionSetRoot(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, OCNaroWrappers::OCmath_Vector^ XTol, Standard_Real FTol, Standard_Integer NbIterations);


//! The Newton method is done to improve the root of the function F <br>
//! from the initial guess StartingPoint. <br>
//! The tolerance required on the root is given by Tolerance. <br>
//! The solution is found when : <br>
//!    abs(Xj - Xj-1)(i) <= XTol(i) and abs(Fi) <= FTol for all i; <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
OCmath_NewtonFunctionSetRoot(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, OCNaroWrappers::OCmath_Vector^ InfBound, OCNaroWrappers::OCmath_Vector^ SupBound, OCNaroWrappers::OCmath_Vector^ XTol, Standard_Real FTol, Standard_Integer NbIterations);


virtual /*instead*/  void Delete() ;

//! Initializes the tolerance values for the unknowns. <br>
 /*instead*/  void SetTolerance(OCNaroWrappers::OCmath_Vector^ XTol) ;

//! Improves the root of function F from the initial guess <br>
//! StartingPoint. infBound and supBound may be given, to constrain the solution. <br>
//! Warning <br>
//! This method must be called when the solution is not computed by the constructors. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, OCNaroWrappers::OCmath_Vector^ InfBound, OCNaroWrappers::OCmath_Vector^ SupBound) ;


//! This method is called at the end of each iteration to check if the <br>
//! solution is found. <br>
//! Vectors DeltaX, Fvalues and Jacobian Matrix are consistent with the <br>
//! possible solution Vector Sol and can be inspected to decide whether <br>
//! the solution is reached or not. <br>
virtual /*instead*/  System::Boolean IsSolutionReached(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F) ;

//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the value of the root of function F. <br>
//! Exceptions <br>
//! StdFail_NotDone if the algorithm fails (and IsDone returns false). <br>
 /*instead*/  OCmath_Vector^ Root() ;

//! outputs the root vector in Root. <br>
//! Exception NotDone is raised if the root was not found. <br>
//! Exception DimensionError is raised if the range of Root is <br>
//! not equal to the range of the StartingPoint. <br>
 /*instead*/  void Root(OCNaroWrappers::OCmath_Vector^ Root) ;

//! Outputs the state number associated with the solution <br>
//!          vector root. <br>
 /*instead*/  Standard_Integer StateNumber() ;

//! Returns the matrix value of the derivative at the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  OCmath_Matrix^ Derivative() ;

//! Outputs the matrix value of the derivative at the root in <br>
//! Der. <br>
//! Exception NotDone is raised if the root was not found. <br>
//! Exception DimensionError is raised if the range of Der is <br>
//! not equal to the range of the StartingPoint. <br>
 /*instead*/  void Derivative(OCNaroWrappers::OCmath_Matrix^ Der) ;

//! Returns the vector value of the error done on the <br>
//! functions at the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  OCmath_Vector^ FunctionSetErrors() ;

//! Outputs the vector value of the error done on the <br>
//! functions at the root in Err. <br>
//! Exception NotDone is raised if the root was not found. <br>
//! Exception DimensionError is raised if the range of Err is <br>
//! not equal to the range of the StartingPoint. <br>
 /*instead*/  void FunctionSetErrors(OCNaroWrappers::OCmath_Vector^ Err) ;

//! Returns the number of iterations really done <br>
//! during the computation of the Root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Integer NbIterations() ;

//! Prints information on the current state of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_NewtonFunctionSetRoot()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
