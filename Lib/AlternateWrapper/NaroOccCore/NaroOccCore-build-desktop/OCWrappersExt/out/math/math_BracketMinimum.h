// File generated by CPPExt (MPV)
//
#ifndef _math_BracketMinimum_OCWrappers_HeaderFile
#define _math_BracketMinimum_OCWrappers_HeaderFile

// include native header
#include <math_BracketMinimum.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCmath_Function;


//!Given two distinct initial points, BracketMinimum <br>
//! implements the computation of three points (a, b, c) which <br>
//! bracket the minimum of the function and verify A less than <br>
//! B, B less than C and F(A) less than F(B), F(B) less than (C). <br>
public ref class OCmath_BracketMinimum  {

protected:
  math_BracketMinimum* nativeHandle;
  OCmath_BracketMinimum(OCDummy^) {};

public:
  property math_BracketMinimum* Handle
  {
    math_BracketMinimum* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_BracketMinimum(math_BracketMinimum* nativeHandle);

// Methods PUBLIC


//! Given two initial values this class computes a <br>
//! bracketing triplet of abscissae Ax, Bx, Cx <br>
//! (such that Bx is between Ax and Cx, F(Bx) is <br>
//! less than both F(Bx) and F(Cx)) the Brent minimization is done <br>
//! on the function F. <br>
OCmath_BracketMinimum(OCNaroWrappers::OCmath_Function^ F, Standard_Real A, Standard_Real B);


//! Given two initial values this class computes a <br>
//! bracketing triplet of abscissae Ax, Bx, Cx <br>
//! (such that Bx is between Ax and Cx, F(Bx) is <br>
//! less than both F(Bx) and F(Cx)) the Brent minimization is done <br>
//! on the function F. <br>
//! This constructor has to be used if F(A) is known. <br>
OCmath_BracketMinimum(OCNaroWrappers::OCmath_Function^ F, Standard_Real A, Standard_Real B, Standard_Real FA);


//! Given two initial values this class computes a <br>
//! bracketing triplet of abscissae Ax, Bx, Cx <br>
//! (such that Bx is between Ax and Cx, F(Bx) is <br>
//! less than both F(Bx) and F(Cx)) the Brent minimization is done <br>
//! on the function F. <br>
//! This constructor has to be used if F(A) and F(B) are known. <br>
OCmath_BracketMinimum(OCNaroWrappers::OCmath_Function^ F, Standard_Real A, Standard_Real B, Standard_Real FA, Standard_Real FB);

//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the bracketed triplet of abscissae. <br>
//! Exceptions <br>
//! StdFail_NotDone if the algorithm fails (and IsDone returns false). <br>
 /*instead*/  void Values(Standard_Real& A, Standard_Real& B, Standard_Real& C) ;

//! returns the bracketed triplet function values. <br>
//! Exceptions <br>
//! StdFail_NotDone if the algorithm fails (and IsDone returns false). <br>
 /*instead*/  void FunctionValues(Standard_Real& FA, Standard_Real& FB, Standard_Real& FC) ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_BracketMinimum()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
