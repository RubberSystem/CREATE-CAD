// File generated by CPPExt (MPV)
//
#ifndef _math_Powell_OCWrappers_HeaderFile
#define _math_Powell_OCWrappers_HeaderFile

// include native header
#include <math_Powell.hxx>
#include "../Converter.h"


#include "math_Vector.h"
#include "math_Status.h"
#include "math_Matrix.h"


namespace OCNaroWrappers
{

ref class OCmath_MultipleVarFunction;
ref class OCmath_Vector;
ref class OCmath_Matrix;



//! This class implements the Powell method to find the minimum of <br>
//! function of multiple variables (the gradient does not have to be known). <br>
public ref class OCmath_Powell  {

protected:
  math_Powell* nativeHandle;
  OCmath_Powell(OCDummy^) {};

public:
  property math_Powell* Handle
  {
    math_Powell* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_Powell(math_Powell* nativeHandle);

// Methods PUBLIC


//! Computes Powell minimization on the function F given <br>
//! StartingPoint, and an initial matrix StartingDirection <br>
//! whose columns contain the initial set of directions. The <br>
//! solution F = Fi is found when 2.0 * abs(Fi - Fi-1) = <br>
//! <Tolerance * (abs(Fi) + abs(Fi-1) + ZEPS). The maximum <br>
//!    number of iterations allowed is given by NbIterations. <br>
OCmath_Powell(OCNaroWrappers::OCmath_MultipleVarFunction^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, OCNaroWrappers::OCmath_Matrix^ StartingDirections, Standard_Real Tolerance, Standard_Integer NbIterations, Standard_Real ZEPS);

//! is used in a sub-class to initialize correctly all the fields <br>
//!          of this class. <br>
OCmath_Powell(OCNaroWrappers::OCmath_MultipleVarFunction^ F, Standard_Real Tolerance, Standard_Integer NbIterations, Standard_Real ZEPS);


virtual /*instead*/  void Delete() ;

//! Use this method after a call to the initialization constructor <br>
//! to compute the minimum of function F. <br>
//! Warning <br>
//! The initialization constructor must have been called before <br>
//! the Perform method is called. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCmath_MultipleVarFunction^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, OCNaroWrappers::OCmath_Matrix^ StartingDirections) ;


//!  solution F = Fi is found when : <br>
//!   2.0 * abs(Fi - Fi-1) <= Tolerance * (abs(Fi) + abs(Fi-1)) + ZEPS. <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
virtual /*instead*/  System::Boolean IsSolutionReached(OCNaroWrappers::OCmath_MultipleVarFunction^ F) ;

//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! returns the location vector of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  OCmath_Vector^ Location() ;

//! outputs the location vector of the minimum in Loc. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
//! Exception DimensionError is raised if the range of Loc is not <br>
//! equal to the range of the StartingPoint. <br>
 /*instead*/  void Location(OCNaroWrappers::OCmath_Vector^ Loc) ;

//! Returns the value of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Real Minimum() ;

//! Returns the number of iterations really done during the <br>
//! computation of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Integer NbIterations() ;

//! Prints information on the current state of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_Powell()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
