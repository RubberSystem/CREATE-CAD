// File generated by CPPExt (MPV)
//
#ifndef _math_FRPR_OCWrappers_HeaderFile
#define _math_FRPR_OCWrappers_HeaderFile

// include native header
#include <math_FRPR.hxx>
#include "../Converter.h"


#include "math_Vector.h"
#include "math_Status.h"


namespace OCNaroWrappers
{

ref class OCmath_MultipleVarFunctionWithGradient;
ref class OCmath_Vector;



//! this class implements the Fletcher-Reeves-Polak_Ribiere minimization <br>
//! algorithm of a function of multiple variables. <br>
//! Knowledge of the function's gradient is required. <br>
public ref class OCmath_FRPR  {

protected:
  math_FRPR* nativeHandle;
  OCmath_FRPR(OCDummy^) {};

public:
  property math_FRPR* Handle
  {
    math_FRPR* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_FRPR(math_FRPR* nativeHandle);

// Methods PUBLIC

//!	  Computes FRPR minimization function F from input vector <br>
//! StartingPoint. The solution F = Fi is found when 2.0 * <br>
//! abs(Fi - Fi-1) <= Tolerance * (abs(Fi) + abs(Fi-1) + <br>
//! ZEPS). The maximum number of iterations allowed is given <br>
//! by NbIterations. <br>
OCmath_FRPR(OCNaroWrappers::OCmath_MultipleVarFunctionWithGradient^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, Standard_Real Tolerance, Standard_Integer NbIterations, Standard_Real ZEPS);

//! Purpose <br>
//! Initializes the computation of the minimum of F. <br>
//! Warning <br>
//! A call to the Perform method must be made after this <br>
//! initialization to compute the minimum of the function. <br>
OCmath_FRPR(OCNaroWrappers::OCmath_MultipleVarFunctionWithGradient^ F, Standard_Real Tolerance, Standard_Integer NbIterations, Standard_Real ZEPS);


virtual /*instead*/  void Delete() ;

//! Use this method after a call to the initialization constructor <br>
//! to compute the minimum of function F. <br>
//! Warning <br>
//! The initialization constructor must have been called before <br>
//! the Perform method is called <br>
 /*instead*/  void Perform(OCNaroWrappers::OCmath_MultipleVarFunctionWithGradient^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint) ;


//! The solution F = Fi is found when : <br>
//!   2.0 * abs(Fi - Fi-1) <= Tolerance * (abs(Fi) + abs(Fi-1)) + ZEPS. <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
virtual /*instead*/  System::Boolean IsSolutionReached(OCNaroWrappers::OCmath_MultipleVarFunctionWithGradient^ F) ;

//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! returns the location vector of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  OCmath_Vector^ Location() ;

//! outputs the location vector of the minimum in Loc. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
//! Exception DimensionError is raised if the range of Loc is not <br>
//! equal to the range of the StartingPoint. <br>
 /*instead*/  void Location(OCNaroWrappers::OCmath_Vector^ Loc) ;

//! returns the value of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Real Minimum() ;

//! returns the gradient vector at the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  OCmath_Vector^ Gradient() ;

//! outputs the gradient vector at the minimum in Grad. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
//! Exception DimensionError is raised if the range of Grad is not <br>
//! equal to the range of the StartingPoint. <br>
 /*instead*/  void Gradient(OCNaroWrappers::OCmath_Vector^ Grad) ;

//! returns the number of iterations really done during the <br>
//! computation of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Integer NbIterations() ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_FRPR()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
