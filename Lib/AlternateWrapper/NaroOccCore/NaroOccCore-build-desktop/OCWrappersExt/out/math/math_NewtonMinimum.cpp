// File generated by CPPExt (CPP file)
//

#include "math_NewtonMinimum.h"
#include "../Converter.h"
#include "math_MultipleVarFunctionWithHessian.h"
#include "math_Vector.h"


using namespace OCNaroWrappers;

OCmath_NewtonMinimum::OCmath_NewtonMinimum(math_NewtonMinimum* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCmath_NewtonMinimum::OCmath_NewtonMinimum(OCNaroWrappers::OCmath_MultipleVarFunctionWithHessian^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, Standard_Real Tolerance, Standard_Integer NbIterations, Standard_Real Convexity, System::Boolean WithSingularity) 
{
  nativeHandle = new math_NewtonMinimum(*((math_MultipleVarFunctionWithHessian*)F->Handle), *((math_Vector*)StartingPoint->Handle), Tolerance, NbIterations, Convexity, OCConverter::BooleanToStandardBoolean(WithSingularity));
}

OCmath_NewtonMinimum::OCmath_NewtonMinimum(OCNaroWrappers::OCmath_MultipleVarFunctionWithHessian^ F, Standard_Real Tolerance, Standard_Integer NbIterations, Standard_Real Convexity, System::Boolean WithSingularity) 
{
  nativeHandle = new math_NewtonMinimum(*((math_MultipleVarFunctionWithHessian*)F->Handle), Tolerance, NbIterations, Convexity, OCConverter::BooleanToStandardBoolean(WithSingularity));
}

 void OCmath_NewtonMinimum::Delete()
{
  ((math_NewtonMinimum*)nativeHandle)->Delete();
}

 void OCmath_NewtonMinimum::Perform(OCNaroWrappers::OCmath_MultipleVarFunctionWithHessian^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint)
{
  ((math_NewtonMinimum*)nativeHandle)->Perform(*((math_MultipleVarFunctionWithHessian*)F->Handle), *((math_Vector*)StartingPoint->Handle));
}

 System::Boolean OCmath_NewtonMinimum::IsConverged()
{
  return OCConverter::StandardBooleanToBoolean(((math_NewtonMinimum*)nativeHandle)->IsConverged());
}

 System::Boolean OCmath_NewtonMinimum::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((math_NewtonMinimum*)nativeHandle)->IsDone());
}

 System::Boolean OCmath_NewtonMinimum::IsConvex()
{
  return OCConverter::StandardBooleanToBoolean(((math_NewtonMinimum*)nativeHandle)->IsConvex());
}

OCmath_Vector^ OCmath_NewtonMinimum::Location()
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_NewtonMinimum*)nativeHandle)->Location();
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_NewtonMinimum::Location(OCNaroWrappers::OCmath_Vector^ Loc)
{
  ((math_NewtonMinimum*)nativeHandle)->Location(*((math_Vector*)Loc->Handle));
}

 Standard_Real OCmath_NewtonMinimum::Minimum()
{
  return ((math_NewtonMinimum*)nativeHandle)->Minimum();
}

OCmath_Vector^ OCmath_NewtonMinimum::Gradient()
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_NewtonMinimum*)nativeHandle)->Gradient();
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_NewtonMinimum::Gradient(OCNaroWrappers::OCmath_Vector^ Grad)
{
  ((math_NewtonMinimum*)nativeHandle)->Gradient(*((math_Vector*)Grad->Handle));
}

 Standard_Integer OCmath_NewtonMinimum::NbIterations()
{
  return ((math_NewtonMinimum*)nativeHandle)->NbIterations();
}

 void OCmath_NewtonMinimum::Dump(Standard_OStream& o)
{
  ((math_NewtonMinimum*)nativeHandle)->Dump(o);
}


