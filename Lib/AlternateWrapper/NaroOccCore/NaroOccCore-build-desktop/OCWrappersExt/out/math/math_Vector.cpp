// File generated by CPPExt (CPP file)
//

#include "math_Vector.h"
#include "../Converter.h"
#include "math_Matrix.h"


using namespace OCNaroWrappers;

OCmath_Vector::OCmath_Vector(math_Vector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCmath_Vector::OCmath_Vector(Standard_Integer Lower, Standard_Integer Upper) 
{
  nativeHandle = new math_Vector(Lower, Upper);
}

OCmath_Vector::OCmath_Vector(Standard_Integer Lower, Standard_Integer Upper, Standard_Real InitialValue) 
{
  nativeHandle = new math_Vector(Lower, Upper, InitialValue);
}

OCmath_Vector::OCmath_Vector(Standard_Address Tab, Standard_Integer Lower, Standard_Integer Upper) 
{
  nativeHandle = new math_Vector(Tab, Lower, Upper);
}

 void OCmath_Vector::Init(Standard_Real InitialValue)
{
  ((math_Vector*)nativeHandle)->Init(InitialValue);
}

OCmath_Vector::OCmath_Vector(OCNaroWrappers::OCmath_Vector^ Other) 
{
  nativeHandle = new math_Vector(*((math_Vector*)Other->Handle));
}

 Standard_Integer OCmath_Vector::Length()
{
  return ((math_Vector*)nativeHandle)->Length();
}

 Standard_Integer OCmath_Vector::Lower()
{
  return ((math_Vector*)nativeHandle)->Lower();
}

 Standard_Integer OCmath_Vector::Upper()
{
  return ((math_Vector*)nativeHandle)->Upper();
}

 Standard_Real OCmath_Vector::Norm()
{
  return ((math_Vector*)nativeHandle)->Norm();
}

 Standard_Real OCmath_Vector::Norm2()
{
  return ((math_Vector*)nativeHandle)->Norm2();
}

 Standard_Integer OCmath_Vector::Max()
{
  return ((math_Vector*)nativeHandle)->Max();
}

 Standard_Integer OCmath_Vector::Min()
{
  return ((math_Vector*)nativeHandle)->Min();
}

 void OCmath_Vector::Normalize()
{
  ((math_Vector*)nativeHandle)->Normalize();
}

OCmath_Vector^ OCmath_Vector::Normalized()
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Normalized();
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Vector::Invert()
{
  ((math_Vector*)nativeHandle)->Invert();
}

OCmath_Vector^ OCmath_Vector::Inverse()
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Inverse();
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Vector::Set(Standard_Integer I1, Standard_Integer I2, OCNaroWrappers::OCmath_Vector^ V)
{
  ((math_Vector*)nativeHandle)->Set(I1, I2, *((math_Vector*)V->Handle));
}

OCmath_Vector^ OCmath_Vector::Slice(Standard_Integer I1, Standard_Integer I2)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Slice(I1, I2);
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Vector::Multiply(Standard_Real Right)
{
  ((math_Vector*)nativeHandle)->Multiply(Right);
}

OCmath_Vector^ OCmath_Vector::Multiplied(Standard_Real Right)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Multiplied(Right);
  return gcnew OCmath_Vector(tmp);
}

OCmath_Vector^ OCmath_Vector::TMultiplied(Standard_Real Right)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->TMultiplied(Right);
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Vector::Divide(Standard_Real Right)
{
  ((math_Vector*)nativeHandle)->Divide(Right);
}

OCmath_Vector^ OCmath_Vector::Divided(Standard_Real Right)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Divided(Right);
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Vector::Add(OCNaroWrappers::OCmath_Vector^ Right)
{
  ((math_Vector*)nativeHandle)->Add(*((math_Vector*)Right->Handle));
}

OCmath_Vector^ OCmath_Vector::Added(OCNaroWrappers::OCmath_Vector^ Right)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Added(*((math_Vector*)Right->Handle));
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Vector::Multiply(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Matrix^ Right)
{
  ((math_Vector*)nativeHandle)->Multiply(*((math_Vector*)Left->Handle), *((math_Matrix*)Right->Handle));
}

 void OCmath_Vector::Multiply(OCNaroWrappers::OCmath_Matrix^ Left, OCNaroWrappers::OCmath_Vector^ Right)
{
  ((math_Vector*)nativeHandle)->Multiply(*((math_Matrix*)Left->Handle), *((math_Vector*)Right->Handle));
}

 void OCmath_Vector::TMultiply(OCNaroWrappers::OCmath_Matrix^ TLeft, OCNaroWrappers::OCmath_Vector^ Right)
{
  ((math_Vector*)nativeHandle)->TMultiply(*((math_Matrix*)TLeft->Handle), *((math_Vector*)Right->Handle));
}

 void OCmath_Vector::TMultiply(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Matrix^ TRight)
{
  ((math_Vector*)nativeHandle)->TMultiply(*((math_Vector*)Left->Handle), *((math_Matrix*)TRight->Handle));
}

 void OCmath_Vector::Add(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Vector^ Right)
{
  ((math_Vector*)nativeHandle)->Add(*((math_Vector*)Left->Handle), *((math_Vector*)Right->Handle));
}

 void OCmath_Vector::Subtract(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Vector^ Right)
{
  ((math_Vector*)nativeHandle)->Subtract(*((math_Vector*)Left->Handle), *((math_Vector*)Right->Handle));
}

 Standard_Real OCmath_Vector::Value(Standard_Integer Num)
{
  return ((math_Vector*)nativeHandle)->Value(Num);
}

OCmath_Vector^ OCmath_Vector::Initialized(OCNaroWrappers::OCmath_Vector^ Other)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Initialized(*((math_Vector*)Other->Handle));
  return gcnew OCmath_Vector(tmp);
}

 Standard_Real OCmath_Vector::Multiplied(OCNaroWrappers::OCmath_Vector^ Right)
{
  return ((math_Vector*)nativeHandle)->Multiplied(*((math_Vector*)Right->Handle));
}

OCmath_Vector^ OCmath_Vector::Multiplied(OCNaroWrappers::OCmath_Matrix^ Right)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Multiplied(*((math_Matrix*)Right->Handle));
  return gcnew OCmath_Vector(tmp);
}

OCmath_Vector^ OCmath_Vector::Opposite()
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Opposite();
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Vector::Subtract(OCNaroWrappers::OCmath_Vector^ Right)
{
  ((math_Vector*)nativeHandle)->Subtract(*((math_Vector*)Right->Handle));
}

OCmath_Vector^ OCmath_Vector::Subtracted(OCNaroWrappers::OCmath_Vector^ Right)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Vector*)nativeHandle)->Subtracted(*((math_Vector*)Right->Handle));
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Vector::Multiply(Standard_Real Left, OCNaroWrappers::OCmath_Vector^ Right)
{
  ((math_Vector*)nativeHandle)->Multiply(Left, *((math_Vector*)Right->Handle));
}

 void OCmath_Vector::Dump(Standard_OStream& o)
{
  ((math_Vector*)nativeHandle)->Dump(o);
}


