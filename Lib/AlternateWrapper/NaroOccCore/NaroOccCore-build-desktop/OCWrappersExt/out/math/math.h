// File generated by CPPExt (Package)
//

#ifndef _math_OCWrappers_HeaderFile
#define _math_OCWrappers_HeaderFile

// Include the wrapped header
#include <math.hxx>

#include "math_Vector.h"
#include "math_IntegerVector.h"
#include "math_Matrix.h"
#include "math_Function.h"
#include "math_FunctionWithDerivative.h"
#include "math_MultipleVarFunction.h"
#include "math_MultipleVarFunctionWithGradient.h"
#include "math_MultipleVarFunctionWithHessian.h"
#include "math_FunctionSet.h"
#include "math_FunctionSetWithDerivatives.h"
#include "math_IntegerRandom.h"
#include "math_Gauss.h"
#include "math_GaussLeastSquare.h"
#include "math_SVD.h"
#include "math_DirectPolynomialRoots.h"
#include "math_FunctionRoots.h"
#include "math_BissecNewton.h"
#include "math_FunctionRoot.h"
#include "math_NewtonFunctionRoot.h"
#include "math_BracketedRoot.h"
#include "math_FunctionSetRoot.h"
#include "math_NewtonFunctionSetRoot.h"
#include "math_BracketMinimum.h"
#include "math_BrentMinimum.h"
#include "math_Powell.h"
#include "math_FRPR.h"
#include "math_BFGS.h"
#include "math_NewtonMinimum.h"
#include "math_Jacobi.h"
#include "math_GaussSingleIntegration.h"
#include "math_GaussMultipleIntegration.h"
#include "math_GaussSetIntegration.h"
#include "math_RealRandom.h"
#include "math_FunctionSample.h"
#include "math_FunctionAllRoots.h"
#include "math_Householder.h"
#include "math_Crout.h"
#include "math_Uzawa.h"
#include "math_TrigonometricFunctionRoots.h"
#include "math_KronrodSingleIntegration.h"
#include "math_EigenValuesSearcher.h"
#include "math_ComputeGaussPointsAndWeights.h"
#include "math_ComputeKronrodPointsAndWeights.h"
#include "math_ValueAndWeight.h"
#include "math_Array1OfValueAndWeight.h"
#include "math_CompareOfValueAndWeight.h"
#include "math_QuickSortOfValueAndWeight.h"
#include "math_SingleTab.h"
#include "math_DoubleTab.h"
#include "math_SingleTabOfReal.h"
#include "math_SingleTabOfInteger.h"
#include "math_DoubleTabOfReal.h"


namespace OCNaroWrappers
{

public ref class OCmath abstract sealed
{

public:
// Methods


static /*instead*/  Standard_Integer GaussPointsMax() ;


static /*instead*/  void GaussPoints(Standard_Integer Index, OCNaroWrappers::OCmath_Vector^ Points) ;


static /*instead*/  void GaussWeights(Standard_Integer Index, OCNaroWrappers::OCmath_Vector^ Weights) ;

//! Returns the maximal number of points for that the values <br>
//!          are stored in the table. If the number is greater then <br>
//!          KronrodPointsMax, the points will be computed. <br>
static /*instead*/  Standard_Integer KronrodPointsMax() ;


static /*instead*/  System::Boolean OrderedGaussPointsAndWeights(Standard_Integer Index, OCNaroWrappers::OCmath_Vector^ Points, OCNaroWrappers::OCmath_Vector^ Weights) ;


static /*instead*/  System::Boolean KronrodPointsAndWeights(Standard_Integer Index, OCNaroWrappers::OCmath_Vector^ Points, OCNaroWrappers::OCmath_Vector^ Weights) ;


};

}; // OCNaroWrappers

#endif
