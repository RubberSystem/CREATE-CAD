// File generated by CPPExt (MPV)
//
#ifndef _math_Crout_OCWrappers_HeaderFile
#define _math_Crout_OCWrappers_HeaderFile

// include native header
#include <math_Crout.hxx>
#include "../Converter.h"


#include "math_Matrix.h"


namespace OCNaroWrappers
{

ref class OCmath_Matrix;
ref class OCmath_Vector;


//! This class implements the Crout algorithm used to solve a <br>
//!          system A*X = B where A is a symmetric matrix. It can be used to <br>
//!          invert a symmetric matrix. <br>
//!          This algorithm is similar to Gauss but is faster than Gauss. <br>
//!          Only the inferior triangle of A and the diagonal can be given. <br>
public ref class OCmath_Crout  {

protected:
  math_Crout* nativeHandle;
  OCmath_Crout(OCDummy^) {};

public:
  property math_Crout* Handle
  {
    math_Crout* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_Crout(math_Crout* nativeHandle);

// Methods PUBLIC

//! Given an input matrix A, this algorithm inverts A by the <br>
//!          Crout algorithm. The user can give only the inferior <br>
//!          triangle for the implementation. <br>
//!          A can be decomposed like this: <br>
//!          A = L * D * T(L) where L is triangular inferior and D is <br>
//!          diagonal. <br>
//!          If one element of A is less than MinPivot, A is <br>
//!          considered as singular. <br>
//!          Exception NotSquare is raised if A is not a square matrix. <br>
OCmath_Crout(OCNaroWrappers::OCmath_Matrix^ A, Standard_Real MinPivot);

//! Returns True if all has been correctly done. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Given an input vector <B>, this routine returns the <br>
//!          solution of the set of linear equations A . X = B. <br>
//!          Exception NotDone is raised if the decomposition was not <br>
//!          done successfully. <br>
//!          Exception DimensionError is raised if the range of B is <br>
//!          not equal to the rowrange of A. <br>
 /*instead*/  void Solve(OCNaroWrappers::OCmath_Vector^ B, OCNaroWrappers::OCmath_Vector^ X) ;

//! returns the inverse matrix of A. Only the inferior <br>
//!          triangle is returned. <br>
//!          Exception NotDone is raised if NotDone. <br>
 /*instead*/  OCmath_Matrix^ Inverse() ;

//! returns in Inv the inverse matrix of A. Only the inferior <br>
//!          triangle is returned. <br>
//!          Exception NotDone is raised if NotDone. <br>
 /*instead*/  void Invert(OCNaroWrappers::OCmath_Matrix^ Inv) ;

//! Returns the value of the determinant of the previously LU <br>
//! decomposed matrix A. Zero is returned if the matrix A is considered as singular. <br>
//! Exceptions <br>
//! StdFail_NotDone if the algorithm fails (and IsDone returns false). <br>
 /*instead*/  Standard_Real Determinant() ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_Crout()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
