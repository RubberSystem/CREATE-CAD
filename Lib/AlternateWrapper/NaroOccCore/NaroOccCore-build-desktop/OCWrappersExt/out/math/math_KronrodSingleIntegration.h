// File generated by CPPExt (MPV)
//
#ifndef _math_KronrodSingleIntegration_OCWrappers_HeaderFile
#define _math_KronrodSingleIntegration_OCWrappers_HeaderFile

// include native header
#include <math_KronrodSingleIntegration.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCmath_Function;
ref class OCmath_Vector;


//! This class implements the Gauss-Kronrod method of <br>
//!          integral computation. <br>
public ref class OCmath_KronrodSingleIntegration  {

protected:
  math_KronrodSingleIntegration* nativeHandle;
  OCmath_KronrodSingleIntegration(OCDummy^) {};

public:
  property math_KronrodSingleIntegration* Handle
  {
    math_KronrodSingleIntegration* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_KronrodSingleIntegration(math_KronrodSingleIntegration* nativeHandle);

// Methods PUBLIC

//! An empty constructor. <br>
OCmath_KronrodSingleIntegration();

//! Constructor. Takes the function, the lower and upper bound <br>
//!          values, the initial number of Kronrod points <br>
OCmath_KronrodSingleIntegration(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, Standard_Integer theNbPnts);

//! Constructor. Takes the function, the lower and upper bound <br>
//!          values, the initial number of Kronrod points, the <br>
//!          tolerance value and the maximal number of iterations as <br>
//!          parameters. <br>
OCmath_KronrodSingleIntegration(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, Standard_Integer theNbPnts, Standard_Real theTolerance, Standard_Integer theMaxNbIter);

//! Computation of the integral. Takes the function, <br>
//!          the lower and upper bound values, the initial number <br>
//!          of Kronrod points, the relative tolerance value and the <br>
//!          maximal number of iterations as parameters. <br>
//!          theNbPnts should be odd and greater then or equal to 3. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, Standard_Integer theNbPnts) ;

//! Computation of the integral. Takes the function, <br>
//!          the lower and upper bound values, the initial number <br>
//!          of Kronrod points, the relative tolerance value and the <br>
//!          maximal number of iterations as parameters. <br>
//!          theNbPnts should be odd and greater then or equal to 3. <br>
//!          Note that theTolerance is relative, i.e. the criterion of <br>
//!          solution reaching is: <br>
//!          Abs(Kronrod - Gauss)/Abs(Kronrod) < theTolerance. <br>
//!          theTolerance should be positive. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, Standard_Integer theNbPnts, Standard_Real theTolerance, Standard_Integer theMaxNbIter) ;

//! Returns Standard_True if computation is performed <br>
//!          successfully. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the value of the integral. <br>
 /*instead*/  Standard_Real Value() ;

//! Returns the value of the relative error reached. <br>
 /*instead*/  Standard_Real ErrorReached() ;

//! Returns the value of the relative error reached. <br>
 /*instead*/  Standard_Real AbsolutError() ;

//! Returns the number of Kronrod points <br>
//!          for which the result is computed. <br>
 /*instead*/  Standard_Integer OrderReached() ;

//! Returns the number of iterations <br>
//!          that were made to compute result. <br>
 /*instead*/  Standard_Integer NbIterReached() ;


static /*instead*/  System::Boolean GKRule(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, OCNaroWrappers::OCmath_Vector^ theGaussP, OCNaroWrappers::OCmath_Vector^ theGaussW, OCNaroWrappers::OCmath_Vector^ theKronrodP, OCNaroWrappers::OCmath_Vector^ theKronrodW, Standard_Real& theValue, Standard_Real& theError) ;

~OCmath_KronrodSingleIntegration()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
