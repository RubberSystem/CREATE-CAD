// File generated by CPPExt (MPV)
//
#ifndef _math_Vector_OCWrappers_HeaderFile
#define _math_Vector_OCWrappers_HeaderFile

// include native header
#include <math_Vector.hxx>
#include "../Converter.h"


#include "math_SingleTabOfReal.h"


namespace OCNaroWrappers
{

ref class OCmath_Matrix;



//! This class implements the real vector abstract data type. <br>
//! Vectors can have an arbitrary range which must be defined at <br>
//! the declaration and cannot be changed after this declaration. <br>
//!    math_Vector V1(-3, 5); // a vector with range [-3..5] <br>
public ref class OCmath_Vector  {

protected:
  math_Vector* nativeHandle;
  OCmath_Vector(OCDummy^) {};

public:
  property math_Vector* Handle
  {
    math_Vector* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_Vector(math_Vector* nativeHandle);

// Methods PUBLIC

//! Contructs a non-initialized vector in the range [Lower..Upper] <br>
//! Lower and Upper are the indexes of the lower and upper <br>
//! bounds of the constructed vector. <br>
OCmath_Vector(Standard_Integer Lower, Standard_Integer Upper);

//! Contructs a vector in the range [Lower..Upper] <br>
//!         whose values are all initialized with the value   InitialValue.. <br>
OCmath_Vector(Standard_Integer Lower, Standard_Integer Upper, Standard_Real InitialValue);

//! Constructs a vector in the range [Lower..Upper] <br>
//!          with the "c array" Tab. <br>
OCmath_Vector(Standard_Address Tab, Standard_Integer Lower, Standard_Integer Upper);

//! Initialize all the elements of a vector with InitialValue. <br>
 /*instead*/  void Init(Standard_Real InitialValue) ;

//! Constructs a copy for initialization. <br>
//!          An exception is raised if the lengths of the vectors are <br>
//!          different. <br>
OCmath_Vector(OCNaroWrappers::OCmath_Vector^ Other);

//! Returns the length of a vector <br>
 /*instead*/  Standard_Integer Length() ;

//! Returns the value of the Lower index of a vector. <br>
 /*instead*/  Standard_Integer Lower() ;

//! Returns the value of the Upper index of a vector. <br>
 /*instead*/  Standard_Integer Upper() ;

//! Returns the value or the square  of the norm of this vector. <br>
 /*instead*/  Standard_Real Norm() ;

//! Returns the value of the square of the norm of a vector. <br>
 /*instead*/  Standard_Real Norm2() ;

//! Returns the value of the Index of the maximum element of a vector. <br>
 /*instead*/  Standard_Integer Max() ;

//! Returns the value of the Index of the minimum element  of a vector. <br>
 /*instead*/  Standard_Integer Min() ;

//! Normalizes this vector (the norm of the result <br>
//! is equal to 1.0) and assigns the result to this vector <br>
//!   Exceptions <br>
//! Standard_NullValue if this vector is null (i.e. if its norm is <br>
//! less than or equal to Standard_Real::RealEpsilon(). <br>
 /*instead*/  void Normalize() ;

//! Normalizes this vector (the norm of the result <br>
//! is equal to 1.0) and creates a new vector <br>
//!   Exceptions <br>
//! Standard_NullValue if this vector is null (i.e. if its norm is <br>
//! less than or equal to Standard_Real::RealEpsilon(). <br>
 /*instead*/  OCmath_Vector^ Normalized() ;

//! Inverts this vector and assigns the result to this vector. <br>
 /*instead*/  void Invert() ;

//! Inverts this vector and creates a new vector. <br>
 /*instead*/  OCmath_Vector^ Inverse() ;

//! sets a vector from <I1> to <I2> to the vector <V>; <br>
//! An exception is raised if I1<LowerIndex or I2>UpperIndex or I1>I2. <br>
//! An exception is raised if I2-I1+1 is different from the Length of V. <br>
 /*instead*/  void Set(Standard_Integer I1, Standard_Integer I2, OCNaroWrappers::OCmath_Vector^ V) ;

//!Creates a new vector by inverting the values of this vector <br>
//!  between indexes I1 and I2. <br>
//! If the values of this vector were (1., 2., 3., 4., <br>
//! 5., 6.), by slicing it between indexes 2 and 5 the <br>
//! values of the resulting vector are (1., 5., 4., 3., 2., 6.) <br>
 /*instead*/  OCmath_Vector^ Slice(Standard_Integer I1, Standard_Integer I2) ;

//! returns the product of a vector and a real value. <br>
 /*instead*/  void Multiply(Standard_Real Right) ;

//! returns the product of a vector and a real value. <br>
 /*instead*/  OCmath_Vector^ Multiplied(Standard_Real Right) ;

//! returns the product of a vector and a real value. <br>
 /*instead*/  OCmath_Vector^ TMultiplied(Standard_Real Right) ;

//! divides a vector by the value <Right>. <br>
//! An exception is raised if <Right> = 0. <br>
 /*instead*/  void Divide(Standard_Real Right) ;

//! divides a vector by the value <Right>. <br>
//! An exception is raised if <Right> = 0. <br>
 /*instead*/  OCmath_Vector^ Divided(Standard_Real Right) ;

//! adds the vector <Right> to a vector. <br>
//! An exception is raised if the vectors have not the same length. <br>
//! Warning <br>
//! In order to avoid time-consuming copying of vectors, it <br>
//! is preferable to use operator += or the function Add whenever possible. <br>
 /*instead*/  void Add(OCNaroWrappers::OCmath_Vector^ Right) ;

//! adds the vector <Right> to a vector. <br>
//! An exception is raised if the vectors have not the same length. <br>
//! An exception is raised if the lengths are not equal. <br>
 /*instead*/  OCmath_Vector^ Added(OCNaroWrappers::OCmath_Vector^ Right) ;

//! sets a vector to the product of the vector <Left> <br>
//!          with the matrix <Right>. <br>
 /*instead*/  void Multiply(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Matrix^ Right) ;

//!sets a vector to the product of the matrix <Left> <br>
//!         with the vector <Right>. <br>
 /*instead*/  void Multiply(OCNaroWrappers::OCmath_Matrix^ Left, OCNaroWrappers::OCmath_Vector^ Right) ;

//! sets a vector to the product of the transpose <br>
//!           of the matrix <TLeft> by the vector <Right>. <br>
 /*instead*/  void TMultiply(OCNaroWrappers::OCmath_Matrix^ TLeft, OCNaroWrappers::OCmath_Vector^ Right) ;

//! sets a vector to the product of the vector <br>
//!          <Left> by the transpose of the matrix <TRight>. <br>
 /*instead*/  void TMultiply(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Matrix^ TRight) ;

//! sets a vector to the sum of the vector <Left> <br>
//!          and the vector <Right>. <br>
//! An exception is raised if the lengths are different. <br>
 /*instead*/  void Add(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Vector^ Right) ;

//! sets a vector to the Subtraction of the <br>
//!           vector <Right> from the vector <Left>. <br>
//! An exception is raised if the vectors have not the same length. <br>
//!  Warning <br>
//! In order to avoid time-consuming copying of vectors, it <br>
//! is preferable to use operator -= or the function <br>
//! Subtract whenever possible. <br>
 /*instead*/  void Subtract(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Vector^ Right) ;

//! accesses (in read or write mode) the value of index Num of <br>
//!          a vector. <br>
 /*instead*/  Standard_Real Value(Standard_Integer Num) ;

//! Initialises a vector by copying <Other>. <br>
//!          An exception is raised if the Lengths are differents. <br>
 /*instead*/  OCmath_Vector^ Initialized(OCNaroWrappers::OCmath_Vector^ Other) ;

//! returns the inner product of 2 vectors. <br>
//! An exception is raised if the lengths are not equal. <br>
 /*instead*/  Standard_Real Multiplied(OCNaroWrappers::OCmath_Vector^ Right) ;

//! returns the product of a vector by a matrix. <br>
 /*instead*/  OCmath_Vector^ Multiplied(OCNaroWrappers::OCmath_Matrix^ Right) ;

//! returns the opposite of a vector. <br>
 /*instead*/  OCmath_Vector^ Opposite() ;

//! returns the subtraction of <Right> from <me>. <br>
//! An exception is raised if the vectors have not the same length. <br>
 /*instead*/  void Subtract(OCNaroWrappers::OCmath_Vector^ Right) ;

//! returns the subtraction of <Right> from <me>. <br>
//! An exception is raised if the vectors have not the same length. <br>
 /*instead*/  OCmath_Vector^ Subtracted(OCNaroWrappers::OCmath_Vector^ Right) ;

//! returns the multiplication of a real by a vector. <br>
//!          <me> = <Left> * <Right> <br>
 /*instead*/  void Multiply(Standard_Real Left, OCNaroWrappers::OCmath_Vector^ Right) ;

//! Prints information on the current state of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_Vector()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
