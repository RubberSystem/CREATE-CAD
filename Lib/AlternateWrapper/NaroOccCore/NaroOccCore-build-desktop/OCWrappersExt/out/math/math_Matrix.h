// File generated by CPPExt (MPV)
//
#ifndef _math_Matrix_OCWrappers_HeaderFile
#define _math_Matrix_OCWrappers_HeaderFile

// include native header
#include <math_Matrix.hxx>
#include "../Converter.h"


#include "math_DoubleTabOfReal.h"
#include "math_Vector.h"


namespace OCNaroWrappers
{

ref class OCmath_Vector;


//! This class implements the real matrix abstract data type. <br>
//!          Matrixes can have an arbitrary range which must be defined <br>
//!          at the declaration and cannot be changed after this declaration <br>
//!          math_Matrix(-3,5,2,4); //a vector with range [-3..5, 2..4] <br>
//!          Matrix values may be initialized and <br>
//!          retrieved using indexes which must lie within the range <br>
//!          of definition of the matrix. <br>
//!          Matrix objects follow "value semantics", that is, they <br>
//!          cannot be shared and are copied through assignment <br>
//!          Matrices are copied through assignement: <br>
//!          math_Matrix M2(1, 9, 1, 3); <br>
//!          ... <br>
//!          M2 = M1; <br>
//!          M1(1) = 2.0;//the matrix M2 will not be modified. <br>
//! <br>
//!          The exception RangeError is raised when trying to access <br>
//!          outside the range of a matrix : <br>
//!          M1(11, 1)=0.0// --> will raise RangeError. <br>
//! <br>
//!          The exception DimensionError is raised when the dimensions of <br>
//!          two matrices or vectors are not compatible. <br>
//!          math_Matrix M3(1, 2, 1, 2); <br>
//!          M3 = M1;   // will raise DimensionError <br>
//!          M1.Add(M3) // --> will raise DimensionError. <br>
//!          A Matrix can be constructed with a a pointer to "c array". <br>
//!          It allows to carry the bounds inside the matrix. <br>
//! Exemple : <br>
//! 	    Standard_Real tab1[10][20]; <br>
//! 	    Standard_Real tab2[200]; <br>
//! <br>
//!      math_Matrix A (tab1[0][0], 1, 10, 1, 20); <br>
//!      math_Matrix B (tab2[0],    1, 10, 1, 20); <br>
public ref class OCmath_Matrix  {

protected:
  math_Matrix* nativeHandle;
  OCmath_Matrix(OCDummy^) {};

public:
  property math_Matrix* Handle
  {
    math_Matrix* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_Matrix(math_Matrix* nativeHandle);

// Methods PUBLIC

//! Constructs a non-initialized  matrix of range [LowerRow..UpperRow, <br>
//!                                        LowerCol..UpperCol] <br>
//! For the constructed matrix: <br>
//! -   LowerRow and UpperRow are the indexes of the <br>
//!   lower and upper bounds of a row, and <br>
//! -   LowerCol and UpperCol are the indexes of the <br>
//!   lower and upper bounds of a column. <br>
OCmath_Matrix(Standard_Integer LowerRow, Standard_Integer UpperRow, Standard_Integer LowerCol, Standard_Integer UpperCol);

//! constructs a non-initialized matrix of range [LowerRow..UpperRow, <br>
//!                                        LowerCol..UpperCol] <br>
//!       whose values are all initialized with the value InitialValue. <br>
OCmath_Matrix(Standard_Integer LowerRow, Standard_Integer UpperRow, Standard_Integer LowerCol, Standard_Integer UpperCol, Standard_Real InitialValue);

//! constructs a matrix of range [LowerRow..UpperRow, <br>
//!                                        LowerCol..UpperCol] <br>
//! Sharing data with a "C array" pointed by Tab. <br>
OCmath_Matrix(Standard_Address Tab, Standard_Integer LowerRow, Standard_Integer UpperRow, Standard_Integer LowerCol, Standard_Integer UpperCol);

//! constructs a matrix for copy in initialization. <br>
//! An exception is raised if the matrixes have not the same dimensions. <br>
OCmath_Matrix(OCNaroWrappers::OCmath_Matrix^ Other);

//!Initialize all the elements of a matrix to InitialValue. <br>
 /*instead*/  void Init(Standard_Real InitialValue) ;

//! Returns the number of rows  of this matrix. <br>
//! Note that for a matrix A you always have the following relations: <br>
//! - A.RowNumber() = A.UpperRow() -   A.LowerRow() + 1 <br>
//! - A.ColNumber() = A.UpperCol() -   A.LowerCol() + 1 <br>
//! - the length of a row of A is equal to the number of columns of A, <br>
//! - the length of a column of A is equal to the number of <br>
//!   rows of A.returns the row range of a matrix. <br>
 /*instead*/  Standard_Integer RowNumber() ;

//! Returns the number of rows  of this matrix. <br>
//! Note that for a matrix A you always have the following relations: <br>
//! - A.RowNumber() = A.UpperRow() -   A.LowerRow() + 1 <br>
//! - A.ColNumber() = A.UpperCol() -   A.LowerCol() + 1 <br>
//! - the length of a row of A is equal to the number of columns of A, <br>
//! - the length of a column of A is equal to the number of <br>
//!   rows of A.returns the row range of a matrix. <br>
 /*instead*/  Standard_Integer ColNumber() ;

//! Returns the value of the Lower index of the row <br>
//!          range of a matrix. <br>
 /*instead*/  Standard_Integer LowerRow() ;

//! Returns the Upper index of the row range <br>
//!          of a matrix. <br>
 /*instead*/  Standard_Integer UpperRow() ;

//! Returns the value of the Lower index of the <br>
//!          column range of a matrix. <br>
 /*instead*/  Standard_Integer LowerCol() ;

//! Returns the value of the upper index of the <br>
//!          column range of a matrix. <br>
 /*instead*/  Standard_Integer UpperCol() ;

//! Computes the determinant of a matrix. <br>
//! An exception is raised if the matrix is not a square matrix. <br>
 /*instead*/  Standard_Real Determinant() ;

//! Transposes a given matrix. <br>
//! An exception is raised if the matrix is not a square matrix. <br>
 /*instead*/  void Transpose() ;

//! Inverts a matrix using Gauss algorithm. <br>
//! Exception NotSquare is raised if the matrix is not square. <br>
//! Exception SingularMatrix is raised if the matrix is singular. <br>
 /*instead*/  void Invert() ;

//! Sets this matrix to the product of the matrix Left, and the matrix Right. <br>
//! Example <br>
//! math_Matrix A (1, 3, 1, 3); <br>
//! math_Matrix B (1, 3, 1, 3); <br>
//! // A = ... , B = ... <br>
//! math_Matrix C (1, 3, 1, 3); <br>
//! C.Multiply(A, B); <br>
//! Exceptions <br>
//! Standard_DimensionError if matrices are of incompatible dimensions, i.e. if: <br>
//! -   the number of columns of matrix Left, or the number of <br>
//!   rows of matrix TLeft is not equal to the number of rows <br>
//!   of matrix Right, or <br>
//! -   the number of rows of matrix Left, or the number of <br>
//!   columns of matrix TLeft is not equal to the number of <br>
//!   rows of this matrix, or <br>
//! -   the number of columns of matrix Right is not equal to <br>
//!   the number of columns of this matrix. <br>
 /*instead*/  void Multiply(Standard_Real Right) ;

//! multiplies all the elements of a matrix by the <br>
//!          value <Right>. <br>
 /*instead*/  OCmath_Matrix^ Multiplied(Standard_Real Right) ;

//! Sets this matrix to the product of the <br>
//! transposed matrix TLeft, and the matrix Right. <br>
//! Example <br>
//! math_Matrix A (1, 3, 1, 3); <br>
//! math_Matrix B (1, 3, 1, 3); <br>
//! // A = ... , B = ... <br>
//! math_Matrix C (1, 3, 1, 3); <br>
//! C.Multiply(A, B); <br>
//! Exceptions <br>
//! Standard_DimensionError if matrices are of incompatible dimensions, i.e. if: <br>
//! -   the number of columns of matrix Left, or the number of <br>
//!   rows of matrix TLeft is not equal to the number of rows <br>
//!   of matrix Right, or <br>
//! -   the number of rows of matrix Left, or the number of <br>
//!   columns of matrix TLeft is not equal to the number of <br>
//!   rows of this matrix, or <br>
//! -   the number of columns of matrix Right is not equal to <br>
//!   the number of columns of this matrix. <br>
 /*instead*/  OCmath_Matrix^ TMultiplied(Standard_Real Right) ;

//! divides all the elements of a matrix by the value <Right>. <br>
//!          An exception is raised if <Right> = 0. <br>
 /*instead*/  void Divide(Standard_Real Right) ;

//! divides all the elements of a matrix by the value <Right>. <br>
//!          An exception is raised if <Right> = 0. <br>
 /*instead*/  OCmath_Matrix^ Divided(Standard_Real Right) ;

//! adds the matrix <Right> to a matrix. <br>
//! An exception is raised if the dimensions are different. <br>
//! 	Warning <br>
//! In order to save time when copying matrices, it is <br>
//! preferable to use operator += or the function Add <br>
//! whenever possible. <br>
 /*instead*/  void Add(OCNaroWrappers::OCmath_Matrix^ Right) ;

//! adds the matrix <Right> to a matrix. <br>
//! An exception is raised if the dimensions are different. <br>
 /*instead*/  OCmath_Matrix^ Added(OCNaroWrappers::OCmath_Matrix^ Right) ;

//! sets a  matrix to the addition of <Left> and <Right>. <br>
//! An exception is raised if the dimensions are different. <br>
 /*instead*/  void Add(OCNaroWrappers::OCmath_Matrix^ Left, OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Subtracts the matrix <Right> from <me>. <br>
//!          An exception is raised if the dimensions are different. <br>
//!    	Warning <br>
//! In order to avoid time-consuming copying of matrices, it <br>
//! is preferable to use operator -= or the function <br>
//! Subtract whenever possible. <br>
 /*instead*/  void Subtract(OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Returns the result of the subtraction of <Right> from <me>. <br>
//!          An exception is raised if the dimensions are different. <br>
 /*instead*/  OCmath_Matrix^ Subtracted(OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Sets the values of this matrix, <br>
//! -   from index I1 to index I2 on the row dimension, and <br>
//! -   from index J1 to index J2 on the column dimension, <br>
//!   to those of matrix M. <br>
//! Exceptions <br>
//! Standard_DimensionError if: <br>
//! -   I1 is less than the index of the lower row bound of this matrix, or <br>
//! -   I2 is greater than the index of the upper row bound of this matrix, or <br>
//! -   J1 is less than the index of the lower column bound of this matrix, or <br>
//! -   J2 is greater than the index of the upper column bound of this matrix, or <br>
//! -   I2 - I1 + 1 is not equal to the number of rows of matrix M, or <br>
//! -   J2 - J1 + 1 is not equal to the number of columns of matrix M. <br>
 /*instead*/  void Set(Standard_Integer I1, Standard_Integer I2, Standard_Integer J1, Standard_Integer J2, OCNaroWrappers::OCmath_Matrix^ M) ;

//! Sets the row of index Row of a matrix to the vector <V>. <br>
//!          An exception is raised if the dimensions are different. <br>
//!          An exception is raises if <Row> is inferior to the lower <br>
//!          row of the matrix or <Row> is superior to the upper row. <br>
 /*instead*/  void SetRow(Standard_Integer Row, OCNaroWrappers::OCmath_Vector^ V) ;

//! Sets the column of index Col of a matrix to the vector <V>. <br>
//!          An exception is raised if the dimensions are different. <br>
//!          An exception is raises if <Col> is inferior to the lower <br>
//!          column of the matrix or <Col> is superior to the upper <br>
//!          column. <br>
 /*instead*/  void SetCol(Standard_Integer Col, OCNaroWrappers::OCmath_Vector^ V) ;

//! Sets the diagonal of a matrix to the value <Value>. <br>
//! An exception is raised if the matrix is not square. <br>
 /*instead*/  void SetDiag(Standard_Real Value) ;

//! Returns the row of index Row of a matrix. <br>
 /*instead*/  OCmath_Vector^ Row(Standard_Integer Row) ;

//! Returns the column of index <Col> of a matrix. <br>
 /*instead*/  OCmath_Vector^ Col(Standard_Integer Col) ;

//! Swaps the rows of index Row1 and Row2. <br>
//! An exception is raised if <Row1> or <Row2> is out of range. <br>
 /*instead*/  void SwapRow(Standard_Integer Row1, Standard_Integer Row2) ;

//! Swaps the columns of index <Col1> and <Col2>. <br>
//! An exception is raised if <Col1> or <Col2> is out of range. <br>
 /*instead*/  void SwapCol(Standard_Integer Col1, Standard_Integer Col2) ;

//! Teturns the transposed of a matrix. <br>
//! An exception is raised if the matrix is not a square matrix. <br>
 /*instead*/  OCmath_Matrix^ Transposed() ;

//! Returns the inverse of a matrix. <br>
//! Exception NotSquare is raised if the matrix is not square. <br>
//! Exception SingularMatrix is raised if the matrix is singular. <br>
 /*instead*/  OCmath_Matrix^ Inverse() ;

//! Returns the product of the transpose of a matrix with <br>
//! the matrix <Right>. <br>
//! An exception is raised if the dimensions are different. <br>
 /*instead*/  OCmath_Matrix^ TMultiply(OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Computes a matrix as the product of 2 vectors. <br>
//! An exception is raised if the dimensions are different. <br>
//! <me> = <Left> * <Right>. <br>
 /*instead*/  void Multiply(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Vector^ Right) ;

//! Computes a matrix as the product of 2 matrixes. <br>
//! An exception is raised if the dimensions are different. <br>
 /*instead*/  void Multiply(OCNaroWrappers::OCmath_Matrix^ Left, OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Computes a matrix to the product of the transpose of <br>
//!          the matrix <TLeft> with the matrix <Right>. <br>
//! An exception is raised if the dimensions are different. <br>
 /*instead*/  void TMultiply(OCNaroWrappers::OCmath_Matrix^ TLeft, OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Sets a matrix to the Subtraction of the matrix <Right> <br>
//!           from the matrix <Left>. <br>
//! An exception is raised if the dimensions are different. <br>
 /*instead*/  void Subtract(OCNaroWrappers::OCmath_Matrix^ Left, OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Accesses (in read or write mode) the value of index <Row> <br>
//!          and <Col> of a matrix. <br>
//!          An exception is raised if <Row> and <Col> are not <br>
//!          in the correct range. <br>
 /*instead*/  Standard_Real Value(Standard_Integer Row, Standard_Integer Col) ;

//! Matrixes are copied through assignement. <br>
//!          An exception is raised if the dimensions are differents. <br>
 /*instead*/  OCmath_Matrix^ Initialized(OCNaroWrappers::OCmath_Matrix^ Other) ;

//! Returns the product of 2 matrices. <br>
//!          An exception is raised if the dimensions are different. <br>
 /*instead*/  void Multiply(OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Returns the product of 2 matrices. <br>
//!          An exception is raised if the dimensions are different. <br>
 /*instead*/  OCmath_Matrix^ Multiplied(OCNaroWrappers::OCmath_Matrix^ Right) ;

//! Returns the product of a matrix by a vector. <br>
//!          An exception is raised if the dimensions are different. <br>
 /*instead*/  OCmath_Vector^ Multiplied(OCNaroWrappers::OCmath_Vector^ Right) ;

//! Returns the opposite of a matrix. <br>
//!          An exception is raised if the dimensions are different. <br>
 /*instead*/  OCmath_Matrix^ Opposite() ;

//! Prints information on the current state of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_Matrix()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
