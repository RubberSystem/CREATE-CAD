// File generated by CPPExt (CPP file)
//

#include "math_DirectPolynomialRoots.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCmath_DirectPolynomialRoots::OCmath_DirectPolynomialRoots(math_DirectPolynomialRoots* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCmath_DirectPolynomialRoots::OCmath_DirectPolynomialRoots(Standard_Real A, Standard_Real B, Standard_Real C, Standard_Real D, Standard_Real E) 
{
  nativeHandle = new math_DirectPolynomialRoots(A, B, C, D, E);
}

OCmath_DirectPolynomialRoots::OCmath_DirectPolynomialRoots(Standard_Real A, Standard_Real B, Standard_Real C, Standard_Real D) 
{
  nativeHandle = new math_DirectPolynomialRoots(A, B, C, D);
}

OCmath_DirectPolynomialRoots::OCmath_DirectPolynomialRoots(Standard_Real A, Standard_Real B, Standard_Real C) 
{
  nativeHandle = new math_DirectPolynomialRoots(A, B, C);
}

OCmath_DirectPolynomialRoots::OCmath_DirectPolynomialRoots(Standard_Real A, Standard_Real B) 
{
  nativeHandle = new math_DirectPolynomialRoots(A, B);
}

 System::Boolean OCmath_DirectPolynomialRoots::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((math_DirectPolynomialRoots*)nativeHandle)->IsDone());
}

 System::Boolean OCmath_DirectPolynomialRoots::InfiniteRoots()
{
  return OCConverter::StandardBooleanToBoolean(((math_DirectPolynomialRoots*)nativeHandle)->InfiniteRoots());
}

 Standard_Integer OCmath_DirectPolynomialRoots::NbSolutions()
{
  return ((math_DirectPolynomialRoots*)nativeHandle)->NbSolutions();
}

 Standard_Real OCmath_DirectPolynomialRoots::Value(Standard_Integer Nieme)
{
  return ((math_DirectPolynomialRoots*)nativeHandle)->Value(Nieme);
}

 void OCmath_DirectPolynomialRoots::Dump(Standard_OStream& o)
{
  ((math_DirectPolynomialRoots*)nativeHandle)->Dump(o);
}


