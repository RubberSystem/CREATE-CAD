// File generated by CPPExt (CPP file)
//

#include "math_Matrix.h"
#include "../Converter.h"
#include "math_Vector.h"


using namespace OCNaroWrappers;

OCmath_Matrix::OCmath_Matrix(math_Matrix* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCmath_Matrix::OCmath_Matrix(Standard_Integer LowerRow, Standard_Integer UpperRow, Standard_Integer LowerCol, Standard_Integer UpperCol) 
{
  nativeHandle = new math_Matrix(LowerRow, UpperRow, LowerCol, UpperCol);
}

OCmath_Matrix::OCmath_Matrix(Standard_Integer LowerRow, Standard_Integer UpperRow, Standard_Integer LowerCol, Standard_Integer UpperCol, Standard_Real InitialValue) 
{
  nativeHandle = new math_Matrix(LowerRow, UpperRow, LowerCol, UpperCol, InitialValue);
}

OCmath_Matrix::OCmath_Matrix(Standard_Address Tab, Standard_Integer LowerRow, Standard_Integer UpperRow, Standard_Integer LowerCol, Standard_Integer UpperCol) 
{
  nativeHandle = new math_Matrix(Tab, LowerRow, UpperRow, LowerCol, UpperCol);
}

OCmath_Matrix::OCmath_Matrix(OCNaroWrappers::OCmath_Matrix^ Other) 
{
  nativeHandle = new math_Matrix(*((math_Matrix*)Other->Handle));
}

 void OCmath_Matrix::Init(Standard_Real InitialValue)
{
  ((math_Matrix*)nativeHandle)->Init(InitialValue);
}

 Standard_Integer OCmath_Matrix::RowNumber()
{
  return ((math_Matrix*)nativeHandle)->RowNumber();
}

 Standard_Integer OCmath_Matrix::ColNumber()
{
  return ((math_Matrix*)nativeHandle)->ColNumber();
}

 Standard_Integer OCmath_Matrix::LowerRow()
{
  return ((math_Matrix*)nativeHandle)->LowerRow();
}

 Standard_Integer OCmath_Matrix::UpperRow()
{
  return ((math_Matrix*)nativeHandle)->UpperRow();
}

 Standard_Integer OCmath_Matrix::LowerCol()
{
  return ((math_Matrix*)nativeHandle)->LowerCol();
}

 Standard_Integer OCmath_Matrix::UpperCol()
{
  return ((math_Matrix*)nativeHandle)->UpperCol();
}

 Standard_Real OCmath_Matrix::Determinant()
{
  return ((math_Matrix*)nativeHandle)->Determinant();
}

 void OCmath_Matrix::Transpose()
{
  ((math_Matrix*)nativeHandle)->Transpose();
}

 void OCmath_Matrix::Invert()
{
  ((math_Matrix*)nativeHandle)->Invert();
}

 void OCmath_Matrix::Multiply(Standard_Real Right)
{
  ((math_Matrix*)nativeHandle)->Multiply(Right);
}

OCmath_Matrix^ OCmath_Matrix::Multiplied(Standard_Real Right)
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Multiplied(Right);
  return gcnew OCmath_Matrix(tmp);
}

OCmath_Matrix^ OCmath_Matrix::TMultiplied(Standard_Real Right)
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->TMultiplied(Right);
  return gcnew OCmath_Matrix(tmp);
}

 void OCmath_Matrix::Divide(Standard_Real Right)
{
  ((math_Matrix*)nativeHandle)->Divide(Right);
}

OCmath_Matrix^ OCmath_Matrix::Divided(Standard_Real Right)
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Divided(Right);
  return gcnew OCmath_Matrix(tmp);
}

 void OCmath_Matrix::Add(OCNaroWrappers::OCmath_Matrix^ Right)
{
  ((math_Matrix*)nativeHandle)->Add(*((math_Matrix*)Right->Handle));
}

OCmath_Matrix^ OCmath_Matrix::Added(OCNaroWrappers::OCmath_Matrix^ Right)
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Added(*((math_Matrix*)Right->Handle));
  return gcnew OCmath_Matrix(tmp);
}

 void OCmath_Matrix::Add(OCNaroWrappers::OCmath_Matrix^ Left, OCNaroWrappers::OCmath_Matrix^ Right)
{
  ((math_Matrix*)nativeHandle)->Add(*((math_Matrix*)Left->Handle), *((math_Matrix*)Right->Handle));
}

 void OCmath_Matrix::Subtract(OCNaroWrappers::OCmath_Matrix^ Right)
{
  ((math_Matrix*)nativeHandle)->Subtract(*((math_Matrix*)Right->Handle));
}

OCmath_Matrix^ OCmath_Matrix::Subtracted(OCNaroWrappers::OCmath_Matrix^ Right)
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Subtracted(*((math_Matrix*)Right->Handle));
  return gcnew OCmath_Matrix(tmp);
}

 void OCmath_Matrix::Set(Standard_Integer I1, Standard_Integer I2, Standard_Integer J1, Standard_Integer J2, OCNaroWrappers::OCmath_Matrix^ M)
{
  ((math_Matrix*)nativeHandle)->Set(I1, I2, J1, J2, *((math_Matrix*)M->Handle));
}

 void OCmath_Matrix::SetRow(Standard_Integer Row, OCNaroWrappers::OCmath_Vector^ V)
{
  ((math_Matrix*)nativeHandle)->SetRow(Row, *((math_Vector*)V->Handle));
}

 void OCmath_Matrix::SetCol(Standard_Integer Col, OCNaroWrappers::OCmath_Vector^ V)
{
  ((math_Matrix*)nativeHandle)->SetCol(Col, *((math_Vector*)V->Handle));
}

 void OCmath_Matrix::SetDiag(Standard_Real Value)
{
  ((math_Matrix*)nativeHandle)->SetDiag(Value);
}

OCmath_Vector^ OCmath_Matrix::Row(Standard_Integer Row)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Row(Row);
  return gcnew OCmath_Vector(tmp);
}

OCmath_Vector^ OCmath_Matrix::Col(Standard_Integer Col)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Col(Col);
  return gcnew OCmath_Vector(tmp);
}

 void OCmath_Matrix::SwapRow(Standard_Integer Row1, Standard_Integer Row2)
{
  ((math_Matrix*)nativeHandle)->SwapRow(Row1, Row2);
}

 void OCmath_Matrix::SwapCol(Standard_Integer Col1, Standard_Integer Col2)
{
  ((math_Matrix*)nativeHandle)->SwapCol(Col1, Col2);
}

OCmath_Matrix^ OCmath_Matrix::Transposed()
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Transposed();
  return gcnew OCmath_Matrix(tmp);
}

OCmath_Matrix^ OCmath_Matrix::Inverse()
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Inverse();
  return gcnew OCmath_Matrix(tmp);
}

OCmath_Matrix^ OCmath_Matrix::TMultiply(OCNaroWrappers::OCmath_Matrix^ Right)
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->TMultiply(*((math_Matrix*)Right->Handle));
  return gcnew OCmath_Matrix(tmp);
}

 void OCmath_Matrix::Multiply(OCNaroWrappers::OCmath_Vector^ Left, OCNaroWrappers::OCmath_Vector^ Right)
{
  ((math_Matrix*)nativeHandle)->Multiply(*((math_Vector*)Left->Handle), *((math_Vector*)Right->Handle));
}

 void OCmath_Matrix::Multiply(OCNaroWrappers::OCmath_Matrix^ Left, OCNaroWrappers::OCmath_Matrix^ Right)
{
  ((math_Matrix*)nativeHandle)->Multiply(*((math_Matrix*)Left->Handle), *((math_Matrix*)Right->Handle));
}

 void OCmath_Matrix::TMultiply(OCNaroWrappers::OCmath_Matrix^ TLeft, OCNaroWrappers::OCmath_Matrix^ Right)
{
  ((math_Matrix*)nativeHandle)->TMultiply(*((math_Matrix*)TLeft->Handle), *((math_Matrix*)Right->Handle));
}

 void OCmath_Matrix::Subtract(OCNaroWrappers::OCmath_Matrix^ Left, OCNaroWrappers::OCmath_Matrix^ Right)
{
  ((math_Matrix*)nativeHandle)->Subtract(*((math_Matrix*)Left->Handle), *((math_Matrix*)Right->Handle));
}

 Standard_Real OCmath_Matrix::Value(Standard_Integer Row, Standard_Integer Col)
{
  return ((math_Matrix*)nativeHandle)->Value(Row, Col);
}

OCmath_Matrix^ OCmath_Matrix::Initialized(OCNaroWrappers::OCmath_Matrix^ Other)
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Initialized(*((math_Matrix*)Other->Handle));
  return gcnew OCmath_Matrix(tmp);
}

 void OCmath_Matrix::Multiply(OCNaroWrappers::OCmath_Matrix^ Right)
{
  ((math_Matrix*)nativeHandle)->Multiply(*((math_Matrix*)Right->Handle));
}

OCmath_Matrix^ OCmath_Matrix::Multiplied(OCNaroWrappers::OCmath_Matrix^ Right)
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Multiplied(*((math_Matrix*)Right->Handle));
  return gcnew OCmath_Matrix(tmp);
}

OCmath_Vector^ OCmath_Matrix::Multiplied(OCNaroWrappers::OCmath_Vector^ Right)
{
  math_Vector* tmp = new math_Vector(0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Multiplied(*((math_Vector*)Right->Handle));
  return gcnew OCmath_Vector(tmp);
}

OCmath_Matrix^ OCmath_Matrix::Opposite()
{
  math_Matrix* tmp = new math_Matrix(0, 0, 0, 0);
  *tmp = ((math_Matrix*)nativeHandle)->Opposite();
  return gcnew OCmath_Matrix(tmp);
}

 void OCmath_Matrix::Dump(Standard_OStream& o)
{
  ((math_Matrix*)nativeHandle)->Dump(o);
}


