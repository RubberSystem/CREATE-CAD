// File generated by CPPExt (MPV)
//
#ifndef _math_FunctionRoot_OCWrappers_HeaderFile
#define _math_FunctionRoot_OCWrappers_HeaderFile

// include native header
#include <math_FunctionRoot.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCmath_FunctionWithDerivative;



//! This class implements the computation of a root of a function of <br>
//! a single variable which is near an initial guess using a minimization <br>
//! algorithm.Knowledge of the derivative is required. The <br>
//! algorithm used is the same as in <br>
public ref class OCmath_FunctionRoot  {

protected:
  math_FunctionRoot* nativeHandle;
  OCmath_FunctionRoot(OCDummy^) {};

public:
  property math_FunctionRoot* Handle
  {
    math_FunctionRoot* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_FunctionRoot(math_FunctionRoot* nativeHandle);

// Methods PUBLIC


//! The Newton-Raphson method is done to find the root of the function F <br>
//! from the initial guess Guess.The tolerance required on <br>
//! the root is given by Tolerance. Iterations are stopped if <br>
//! the expected solution does not stay in the range A..B. <br>
//! The solution is found when abs(Xi - Xi-1) <= Tolerance; <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
OCmath_FunctionRoot(OCNaroWrappers::OCmath_FunctionWithDerivative^ F, Standard_Real Guess, Standard_Real Tolerance, Standard_Integer NbIterations);


//! The Newton-Raphson method is done to find the root of the function F <br>
//! from the initial guess Guess. <br>
//! The tolerance required on the root is given by Tolerance. <br>
//! Iterations are stopped if the expected solution does not stay in the <br>
//! range A..B <br>
//! The solution is found when abs(Xi - Xi-1) <= Tolerance; <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
OCmath_FunctionRoot(OCNaroWrappers::OCmath_FunctionWithDerivative^ F, Standard_Real Guess, Standard_Real Tolerance, Standard_Real A, Standard_Real B, Standard_Integer NbIterations);

//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! returns the value of the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Real Root() ;

//! returns the value of the derivative at the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Real Derivative() ;

//! returns the value of the function at the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Real Value() ;

//! returns the number of iterations really done on the <br>
//! computation of the Root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Integer NbIterations() ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_FunctionRoot()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
