// File generated by CPPExt (CPP file)
//

#include "math_IntegerVector.h"
#include "../Converter.h"
#include "math_Matrix.h"


using namespace OCNaroWrappers;

OCmath_IntegerVector::OCmath_IntegerVector(math_IntegerVector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCmath_IntegerVector::OCmath_IntegerVector(Standard_Integer First, Standard_Integer Last) 
{
  nativeHandle = new math_IntegerVector(First, Last);
}

OCmath_IntegerVector::OCmath_IntegerVector(Standard_Integer First, Standard_Integer Last, Standard_Integer InitialValue) 
{
  nativeHandle = new math_IntegerVector(First, Last, InitialValue);
}

 void OCmath_IntegerVector::Init(Standard_Integer InitialValue)
{
  ((math_IntegerVector*)nativeHandle)->Init(InitialValue);
}

OCmath_IntegerVector::OCmath_IntegerVector(Standard_Address Tab, Standard_Integer First, Standard_Integer Last) 
{
  nativeHandle = new math_IntegerVector(Tab, First, Last);
}

OCmath_IntegerVector::OCmath_IntegerVector(OCNaroWrappers::OCmath_IntegerVector^ Other) 
{
  nativeHandle = new math_IntegerVector(*((math_IntegerVector*)Other->Handle));
}

 Standard_Integer OCmath_IntegerVector::Length()
{
  return ((math_IntegerVector*)nativeHandle)->Length();
}

 Standard_Integer OCmath_IntegerVector::Lower()
{
  return ((math_IntegerVector*)nativeHandle)->Lower();
}

 Standard_Integer OCmath_IntegerVector::Upper()
{
  return ((math_IntegerVector*)nativeHandle)->Upper();
}

 Standard_Real OCmath_IntegerVector::Norm()
{
  return ((math_IntegerVector*)nativeHandle)->Norm();
}

 Standard_Real OCmath_IntegerVector::Norm2()
{
  return ((math_IntegerVector*)nativeHandle)->Norm2();
}

 Standard_Integer OCmath_IntegerVector::Max()
{
  return ((math_IntegerVector*)nativeHandle)->Max();
}

 Standard_Integer OCmath_IntegerVector::Min()
{
  return ((math_IntegerVector*)nativeHandle)->Min();
}

 void OCmath_IntegerVector::Invert()
{
  ((math_IntegerVector*)nativeHandle)->Invert();
}

OCmath_IntegerVector^ OCmath_IntegerVector::Inverse()
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((math_IntegerVector*)nativeHandle)->Inverse();
  return gcnew OCmath_IntegerVector(tmp);
}

 void OCmath_IntegerVector::Set(Standard_Integer I1, Standard_Integer I2, OCNaroWrappers::OCmath_IntegerVector^ V)
{
  ((math_IntegerVector*)nativeHandle)->Set(I1, I2, *((math_IntegerVector*)V->Handle));
}

OCmath_IntegerVector^ OCmath_IntegerVector::Slice(Standard_Integer I1, Standard_Integer I2)
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((math_IntegerVector*)nativeHandle)->Slice(I1, I2);
  return gcnew OCmath_IntegerVector(tmp);
}

 void OCmath_IntegerVector::Multiply(Standard_Integer Right)
{
  ((math_IntegerVector*)nativeHandle)->Multiply(Right);
}

OCmath_IntegerVector^ OCmath_IntegerVector::Multiplied(Standard_Integer Right)
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((math_IntegerVector*)nativeHandle)->Multiplied(Right);
  return gcnew OCmath_IntegerVector(tmp);
}

OCmath_IntegerVector^ OCmath_IntegerVector::TMultiplied(Standard_Integer Right)
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((math_IntegerVector*)nativeHandle)->TMultiplied(Right);
  return gcnew OCmath_IntegerVector(tmp);
}

 void OCmath_IntegerVector::Add(OCNaroWrappers::OCmath_IntegerVector^ Right)
{
  ((math_IntegerVector*)nativeHandle)->Add(*((math_IntegerVector*)Right->Handle));
}

OCmath_IntegerVector^ OCmath_IntegerVector::Added(OCNaroWrappers::OCmath_IntegerVector^ Right)
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((math_IntegerVector*)nativeHandle)->Added(*((math_IntegerVector*)Right->Handle));
  return gcnew OCmath_IntegerVector(tmp);
}

 void OCmath_IntegerVector::Add(OCNaroWrappers::OCmath_IntegerVector^ Left, OCNaroWrappers::OCmath_IntegerVector^ Right)
{
  ((math_IntegerVector*)nativeHandle)->Add(*((math_IntegerVector*)Left->Handle), *((math_IntegerVector*)Right->Handle));
}

 void OCmath_IntegerVector::Subtract(OCNaroWrappers::OCmath_IntegerVector^ Left, OCNaroWrappers::OCmath_IntegerVector^ Right)
{
  ((math_IntegerVector*)nativeHandle)->Subtract(*((math_IntegerVector*)Left->Handle), *((math_IntegerVector*)Right->Handle));
}

 Standard_Integer OCmath_IntegerVector::Value(Standard_Integer Num)
{
  return ((math_IntegerVector*)nativeHandle)->Value(Num);
}

OCmath_IntegerVector^ OCmath_IntegerVector::Initialized(OCNaroWrappers::OCmath_IntegerVector^ Other)
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((math_IntegerVector*)nativeHandle)->Initialized(*((math_IntegerVector*)Other->Handle));
  return gcnew OCmath_IntegerVector(tmp);
}

 Standard_Integer OCmath_IntegerVector::Multiplied(OCNaroWrappers::OCmath_IntegerVector^ Right)
{
  return ((math_IntegerVector*)nativeHandle)->Multiplied(*((math_IntegerVector*)Right->Handle));
}

OCmath_IntegerVector^ OCmath_IntegerVector::Opposite()
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((math_IntegerVector*)nativeHandle)->Opposite();
  return gcnew OCmath_IntegerVector(tmp);
}

 void OCmath_IntegerVector::Subtract(OCNaroWrappers::OCmath_IntegerVector^ Right)
{
  ((math_IntegerVector*)nativeHandle)->Subtract(*((math_IntegerVector*)Right->Handle));
}

OCmath_IntegerVector^ OCmath_IntegerVector::Subtracted(OCNaroWrappers::OCmath_IntegerVector^ Right)
{
  math_IntegerVector* tmp = new math_IntegerVector(0, 0);
  *tmp = ((math_IntegerVector*)nativeHandle)->Subtracted(*((math_IntegerVector*)Right->Handle));
  return gcnew OCmath_IntegerVector(tmp);
}

 void OCmath_IntegerVector::Multiply(Standard_Integer Left, OCNaroWrappers::OCmath_IntegerVector^ Right)
{
  ((math_IntegerVector*)nativeHandle)->Multiply(Left, *((math_IntegerVector*)Right->Handle));
}

 void OCmath_IntegerVector::Dump(Standard_OStream& o)
{
  ((math_IntegerVector*)nativeHandle)->Dump(o);
}


