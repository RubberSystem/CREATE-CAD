// File generated by CPPExt (MPV)
//
#ifndef _math_BissecNewton_OCWrappers_HeaderFile
#define _math_BissecNewton_OCWrappers_HeaderFile

// include native header
#include <math_BissecNewton.hxx>
#include "../Converter.h"


#include "math_Status.h"


namespace OCNaroWrappers
{

ref class OCmath_FunctionWithDerivative;



//! This class implements a combination of Newton-Raphson and bissection <br>
//!  methods to find the root of the function between two bounds. <br>
//! Knowledge of the derivative is required. <br>
public ref class OCmath_BissecNewton  {

protected:
  math_BissecNewton* nativeHandle;
  OCmath_BissecNewton(OCDummy^) {};

public:
  property math_BissecNewton* Handle
  {
    math_BissecNewton* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_BissecNewton(math_BissecNewton* nativeHandle);

// Methods PUBLIC


//! A combination of Newton-Raphson and bissection methods is done to find <br>
//! the root of the function F between the bounds Bound1 and Bound2. <br>
//! on the function F. <br>
//! The tolerance required on the root is given by TolX. <br>
//! The solution is found when : <br>
//!    abs(Xi - Xi-1) <= TolX and F(Xi) * F(Xi-1) <= 0 <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
OCmath_BissecNewton(OCNaroWrappers::OCmath_FunctionWithDerivative^ F, Standard_Real Bound1, Standard_Real Bound2, Standard_Real TolX, Standard_Integer NbIterations);


//! This method is called at the end of each iteration to check if the <br>
//! solution has been found. <br>
//! It can be redefined in a sub-class to implement a specific test to <br>
//! stop the iterations. <br>
virtual /*instead*/  System::Boolean IsSolutionReached(OCNaroWrappers::OCmath_FunctionWithDerivative^ F) ;

//! Tests is the root has been successfully found. <br>
 /*instead*/  System::Boolean IsDone() ;

//! returns the value of the root. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Real Root() ;

//! returns the value of the derivative at the root. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Real Derivative() ;

//! returns the value of the function at the root. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Real Value() ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
//!          Is used to redifine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_BissecNewton()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
