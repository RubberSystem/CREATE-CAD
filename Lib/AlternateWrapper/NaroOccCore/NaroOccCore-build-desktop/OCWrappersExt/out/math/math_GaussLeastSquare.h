// File generated by CPPExt (MPV)
//
#ifndef _math_GaussLeastSquare_OCWrappers_HeaderFile
#define _math_GaussLeastSquare_OCWrappers_HeaderFile

// include native header
#include <math_GaussLeastSquare.hxx>
#include "../Converter.h"


#include "math_Matrix.h"
#include "math_IntegerVector.h"


namespace OCNaroWrappers
{

ref class OCmath_Matrix;
ref class OCmath_Vector;



//! This class implements the least square solution of a set of <br>
//! n linear equations of m unknowns (n >= m) using the gauss LU <br>
//! decomposition algorithm. <br>
//! This algorithm is more likely subject to numerical instability <br>
//!  than math_SVD. <br>
public ref class OCmath_GaussLeastSquare  {

protected:
  math_GaussLeastSquare* nativeHandle;
  OCmath_GaussLeastSquare(OCDummy^) {};

public:
  property math_GaussLeastSquare* Handle
  {
    math_GaussLeastSquare* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_GaussLeastSquare(math_GaussLeastSquare* nativeHandle);

// Methods PUBLIC

//! Given an input n X m matrix A with n >= m this constructor <br>
//!          performs the LU decomposition with partial pivoting <br>
//!          (interchange of rows) of the matrix AA = A.Transposed() * A; <br>
//! 	        This LU decomposition is stored internally and may be used <br>
//! 	        to do subsequent calculation. <br>
//!          If the largest pivot found is less than MinPivot the matrix <A> <br>
//!          is considered as singular. <br>
OCmath_GaussLeastSquare(OCNaroWrappers::OCmath_Matrix^ A, Standard_Real MinPivot);

//! Returns true if the computations are successful, otherwise returns false.e <br>
 /*instead*/  System::Boolean IsDone() ;

//! Given the input Vector <B> this routine solves the set <br>
//!          of linear equations A . X = B. <br>
//!          Exception NotDone is raised if the decomposition of A was <br>
//!          not done successfully. <br>
//!          Exception DimensionError is raised if the range of B Inv is <br>
//!          not equal to the rowrange of A. <br>
//!          Exception DimensionError is raised if the range of X Inv is <br>
//!          not equal to the colrange of A. <br>
 /*instead*/  void Solve(OCNaroWrappers::OCmath_Vector^ B, OCNaroWrappers::OCmath_Vector^ X) ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_GaussLeastSquare()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
