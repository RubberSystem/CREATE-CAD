// File generated by CPPExt (MPV)
//
#ifndef _math_FunctionSetRoot_OCWrappers_HeaderFile
#define _math_FunctionSetRoot_OCWrappers_HeaderFile

// include native header
#include <math_FunctionSetRoot.hxx>
#include "../Converter.h"


#include "math_Vector.h"
#include "math_Matrix.h"
#include "math_IntegerVector.h"


namespace OCNaroWrappers
{

ref class OCmath_FunctionSetWithDerivatives;
ref class OCmath_Vector;
ref class OCmath_Matrix;


//! The math_FunctionSetRoot class calculates the root <br>
//! of a set of N functions of M variables (N<M, N=M or N>M). Knowing <br>
//! an initial guess of the solution and using a minimization algorithm, a search <br>
//! is made in the Newton direction and then in the Gradient direction if there <br>
//! is no success in the Newton direction. This algorithm can also be <br>
//! used for functions minimization. Knowledge of all the partial <br>
//! derivatives (the Jacobian) is required. <br>
public ref class OCmath_FunctionSetRoot  {

protected:
  math_FunctionSetRoot* nativeHandle;
  OCmath_FunctionSetRoot(OCDummy^) {};

public:
  property math_FunctionSetRoot* Handle
  {
    math_FunctionSetRoot* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_FunctionSetRoot(math_FunctionSetRoot* nativeHandle);

// Methods PUBLIC

//! is used in a sub-class to initialize correctly all the fields <br>
//!          of this class. <br>
//!          The range (1, F.NbVariables()) must be especially <br>
//!          respected for all vectors and matrix declarations. <br>
OCmath_FunctionSetRoot(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, OCNaroWrappers::OCmath_Vector^ Tolerance, Standard_Integer NbIterations);

//! is used in a sub-class to initialize correctly all the fields <br>
//!          of this class. <br>
//!          The range (1, F.NbVariables()) must be especially <br>
//!          respected for all vectors and matrix declarations. <br>
//!          The method SetTolerance must be called after this <br>
//!          constructor. <br>
OCmath_FunctionSetRoot(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, Standard_Integer NbIterations);

//! is used to improve the root of the function F <br>
//!          from the initial guess StartingPoint. <br>
//!          The maximum number of iterations allowed is given by <br>
//!          NbIterations. <br>
//!          In this case, the solution is found when: <br>
//!          abs(Xi - Xi-1)(j) <= Tolerance(j) for all unknowns. <br>
OCmath_FunctionSetRoot(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, OCNaroWrappers::OCmath_Vector^ Tolerance, Standard_Integer NbIterations);

//! is used to improve the root of the function F <br>
//!          from the initial guess StartingPoint. <br>
//!          The maximum number of iterations allowed is given <br>
//!          by NbIterations. <br>
//!          In this case, the solution is found when: <br>
//!          abs(Xi - Xi-1) <= Tolerance for all unknowns. <br>
OCmath_FunctionSetRoot(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, OCNaroWrappers::OCmath_Vector^ Tolerance, OCNaroWrappers::OCmath_Vector^ infBound, OCNaroWrappers::OCmath_Vector^ supBound, Standard_Integer NbIterations);


virtual /*instead*/  void Delete() ;

//! Initializes the tolerance values. <br>
 /*instead*/  void SetTolerance(OCNaroWrappers::OCmath_Vector^ Tolerance) ;

//! Improves the root of function F from the initial guess <br>
//! StartingPoint. infBound and supBound may be given to constrain the solution. <br>
//! Warning <br>
//! This method is called when computation of the solution is <br>
//! not performed by the constructors. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F, OCNaroWrappers::OCmath_Vector^ StartingPoint, OCNaroWrappers::OCmath_Vector^ infBound, OCNaroWrappers::OCmath_Vector^ supBound) ;

//! This routine is called at the end of each iteration <br>
//!          to check if the solution was found. It can be redefined <br>
//!          in a sub-class to implement a specific test to stop the <br>
//!          iterations. <br>
//!          In this case, the solution is found when: <br>
//!          abs(Xi - Xi-1) <= Tolerance for all unknowns. <br>
virtual /*instead*/  System::Boolean IsSolutionReached(OCNaroWrappers::OCmath_FunctionSetWithDerivatives^ F) ;


//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the number of iterations really done <br>
//!          during the computation of the root. <br>
//!          Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Integer NbIterations() ;

//! returns the stateNumber (as returned by <br>
//!          F.GetStateNumber()) associated to the root found. <br>
 /*instead*/  Standard_Integer StateNumber() ;

//! Returns the value of the root of function F. <br>
//!          Exception NotDone is raised if the root was not found. <br>
 /*instead*/  OCmath_Vector^ Root() ;

//! Outputs the root vector in Root. <br>
//!          Exception NotDone is raised if the root was not found. <br>
//!          Exception DimensionError is raised if the range of Root <br>
//!          is not equal to the range of the StartingPoint. <br>
 /*instead*/  void Root(OCNaroWrappers::OCmath_Vector^ Root) ;

//! Returns the matrix value of the derivative at the root. <br>
//!          Exception NotDone is raised if the root was not found. <br>
 /*instead*/  OCmath_Matrix^ Derivative() ;

//! outputs the matrix value of the derivative <br>
//!          at the root in Der. <br>
//!          Exception NotDone is raised if the root was not found. <br>
//!          Exception DimensionError is raised if the column range <br>
//!          of <Der> is not equal to the range of the startingPoint. <br>
 /*instead*/  void Derivative(OCNaroWrappers::OCmath_Matrix^ Der) ;

//! returns the vector value of the error done <br>
//!          on the functions at the root. <br>
//!          Exception NotDone is raised if the root was not found. <br>
 /*instead*/  OCmath_Vector^ FunctionSetErrors() ;

//! outputs the vector value of the error done <br>
//!          on the functions at the root in Err. <br>
//!          Exception NotDone is raised if the root was not found. <br>
//!          Exception DimensionError is raised if the range of Err <br>
//!          is not equal to the range of the StartingPoint. <br>
 /*instead*/  void FunctionSetErrors(OCNaroWrappers::OCmath_Vector^ Err) ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_FunctionSetRoot()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
