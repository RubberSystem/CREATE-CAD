// File generated by CPPExt (MPV)
//
#ifndef _math_Uzawa_OCWrappers_HeaderFile
#define _math_Uzawa_OCWrappers_HeaderFile

// include native header
#include <math_Uzawa.hxx>
#include "../Converter.h"


#include "math_Vector.h"
#include "math_Matrix.h"


namespace OCNaroWrappers
{

ref class OCmath_Matrix;
ref class OCmath_Vector;


//! This class implements a system resolution C*X = B with <br>
//!          an approach solution X0. There are no conditions on the <br>
//!          number of equations. The algorithm used is the Uzawa <br>
//!          algorithm. It is possible to have equal or inequal  (<) <br>
//!          equations to solve. The resolution is done with a <br>
//!          minimization of Norm(X-X0). <br>
//!          If there are only equal equations, the resolution is directly <br>
//!          done and is similar to Gauss resolution with an optimisation <br>
//!          because the matrix is a symmetric matrix. <br>
//!          (The resolution is done with Crout algorithm) <br>
public ref class OCmath_Uzawa  {

protected:
  math_Uzawa* nativeHandle;
  OCmath_Uzawa(OCDummy^) {};

public:
  property math_Uzawa* Handle
  {
    math_Uzawa* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_Uzawa(math_Uzawa* nativeHandle);

// Methods PUBLIC

//! Given an input matrix Cont, two input vectors Secont <br>
//!          and StartingPoint, it solves Cont*X = Secont (only <br>
//!          = equations) with a minimization of Norme(X-X0). <br>
//!          The maximun iterations number allowed is fixed to <br>
//!          NbIterations. <br>
//!          The tolerance EpsLic is fixed for the dual variable <br>
//!          convergence. The tolerance EpsLix is used for the <br>
//!          convergence of X. <br>
//!          Exception ConstuctionError is raised if the line number <br>
//!          of Cont is different from the length of Secont. <br>
OCmath_Uzawa(OCNaroWrappers::OCmath_Matrix^ Cont, OCNaroWrappers::OCmath_Vector^ Secont, OCNaroWrappers::OCmath_Vector^ StartingPoint, Standard_Real EpsLix, Standard_Real EpsLic, Standard_Integer NbIterations);

//! Given an input matrix Cont, two input vectors Secont <br>
//!          and StartingPoint, it solves Cont*X = Secont (the Nce <br>
//!          first equations are equal equations and the Nci last <br>
//!          equations are inequalities <) with a minimization <br>
//!          of Norme(X-X0). <br>
//!          The maximun iterations number allowed is fixed to <br>
//!          NbIterations. <br>
//!          The tolerance EpsLic is fixed for the dual variable <br>
//!          convergence. The tolerance EpsLix is used for the <br>
//!          convergence of X. <br>
//!          There are no conditions on Nce and Nci. <br>
//!          Exception ConstuctionError is raised if the line number <br>
//!          of Cont is different from the length of Secont and from <br>
//!          Nce + Nci. <br>
OCmath_Uzawa(OCNaroWrappers::OCmath_Matrix^ Cont, OCNaroWrappers::OCmath_Vector^ Secont, OCNaroWrappers::OCmath_Vector^ StartingPoint, Standard_Integer Nci, Standard_Integer Nce, Standard_Real EpsLix, Standard_Real EpsLic, Standard_Integer NbIterations);

//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the vector solution of the system above. <br>
//!          An exception is raised if NotDone. <br>
 /*instead*/  OCmath_Vector^ Value() ;

//! Returns the initial error Cont*StartingPoint-Secont. <br>
//!          An exception is raised if NotDone. <br>
 /*instead*/  OCmath_Vector^ InitialError() ;

//! returns the duale variables V of the systeme. <br>
 /*instead*/  void Duale(OCNaroWrappers::OCmath_Vector^ V) ;

//! Returns the difference between X solution and the <br>
//!          StartingPoint. <br>
//!          An exception is raised if NotDone. <br>
 /*instead*/  OCmath_Vector^ Error() ;

//! returns the number of iterations really done. <br>
//!          An exception is raised if NotDone. <br>
 /*instead*/  Standard_Integer NbIterations() ;

//! returns the inverse matrix of (C * Transposed(C)). <br>
//!          This result is needed for the computation of the gradient <br>
//!          when approximating a curve. <br>
 /*instead*/  OCmath_Matrix^ InverseCont() ;

//! Prints information on the current state of the object. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_Uzawa()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
