// File generated by CPPExt (CPP file)
//

#include "math_FunctionAllRoots.h"
#include "../Converter.h"
#include "math_FunctionWithDerivative.h"
#include "math_FunctionSample.h"


using namespace OCNaroWrappers;

OCmath_FunctionAllRoots::OCmath_FunctionAllRoots(math_FunctionAllRoots* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCmath_FunctionAllRoots::OCmath_FunctionAllRoots(OCNaroWrappers::OCmath_FunctionWithDerivative^ F, OCNaroWrappers::OCmath_FunctionSample^ S, Standard_Real EpsX, Standard_Real EpsF, Standard_Real EpsNul) 
{
  nativeHandle = new math_FunctionAllRoots(*((math_FunctionWithDerivative*)F->Handle), *((math_FunctionSample*)S->Handle), EpsX, EpsF, EpsNul);
}

 System::Boolean OCmath_FunctionAllRoots::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((math_FunctionAllRoots*)nativeHandle)->IsDone());
}

 Standard_Integer OCmath_FunctionAllRoots::NbIntervals()
{
  return ((math_FunctionAllRoots*)nativeHandle)->NbIntervals();
}

 void OCmath_FunctionAllRoots::GetInterval(Standard_Integer Index, Standard_Real& A, Standard_Real& B)
{
  ((math_FunctionAllRoots*)nativeHandle)->GetInterval(Index, A, B);
}

 void OCmath_FunctionAllRoots::GetIntervalState(Standard_Integer Index, Standard_Integer& IFirst, Standard_Integer& ILast)
{
  ((math_FunctionAllRoots*)nativeHandle)->GetIntervalState(Index, IFirst, ILast);
}

 Standard_Integer OCmath_FunctionAllRoots::NbPoints()
{
  return ((math_FunctionAllRoots*)nativeHandle)->NbPoints();
}

 Standard_Real OCmath_FunctionAllRoots::GetPoint(Standard_Integer Index)
{
  return ((math_FunctionAllRoots*)nativeHandle)->GetPoint(Index);
}

 Standard_Integer OCmath_FunctionAllRoots::GetPointState(Standard_Integer Index)
{
  return ((math_FunctionAllRoots*)nativeHandle)->GetPointState(Index);
}

 void OCmath_FunctionAllRoots::Dump(Standard_OStream& o)
{
  ((math_FunctionAllRoots*)nativeHandle)->Dump(o);
}


