// File generated by CPPExt (CPP file)
//

#include "math_KronrodSingleIntegration.h"
#include "../Converter.h"
#include "math_Function.h"
#include "math_Vector.h"


using namespace OCNaroWrappers;

OCmath_KronrodSingleIntegration::OCmath_KronrodSingleIntegration(math_KronrodSingleIntegration* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCmath_KronrodSingleIntegration::OCmath_KronrodSingleIntegration() 
{
  nativeHandle = new math_KronrodSingleIntegration();
}

OCmath_KronrodSingleIntegration::OCmath_KronrodSingleIntegration(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, Standard_Integer theNbPnts) 
{
  nativeHandle = new math_KronrodSingleIntegration(*((math_Function*)theFunction->Handle), theLower, theUpper, theNbPnts);
}

OCmath_KronrodSingleIntegration::OCmath_KronrodSingleIntegration(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, Standard_Integer theNbPnts, Standard_Real theTolerance, Standard_Integer theMaxNbIter) 
{
  nativeHandle = new math_KronrodSingleIntegration(*((math_Function*)theFunction->Handle), theLower, theUpper, theNbPnts, theTolerance, theMaxNbIter);
}

 void OCmath_KronrodSingleIntegration::Perform(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, Standard_Integer theNbPnts)
{
  ((math_KronrodSingleIntegration*)nativeHandle)->Perform(*((math_Function*)theFunction->Handle), theLower, theUpper, theNbPnts);
}

 void OCmath_KronrodSingleIntegration::Perform(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, Standard_Integer theNbPnts, Standard_Real theTolerance, Standard_Integer theMaxNbIter)
{
  ((math_KronrodSingleIntegration*)nativeHandle)->Perform(*((math_Function*)theFunction->Handle), theLower, theUpper, theNbPnts, theTolerance, theMaxNbIter);
}

 System::Boolean OCmath_KronrodSingleIntegration::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((math_KronrodSingleIntegration*)nativeHandle)->IsDone());
}

 Standard_Real OCmath_KronrodSingleIntegration::Value()
{
  return ((math_KronrodSingleIntegration*)nativeHandle)->Value();
}

 Standard_Real OCmath_KronrodSingleIntegration::ErrorReached()
{
  return ((math_KronrodSingleIntegration*)nativeHandle)->ErrorReached();
}

 Standard_Real OCmath_KronrodSingleIntegration::AbsolutError()
{
  return ((math_KronrodSingleIntegration*)nativeHandle)->AbsolutError();
}

 Standard_Integer OCmath_KronrodSingleIntegration::OrderReached()
{
  return ((math_KronrodSingleIntegration*)nativeHandle)->OrderReached();
}

 Standard_Integer OCmath_KronrodSingleIntegration::NbIterReached()
{
  return ((math_KronrodSingleIntegration*)nativeHandle)->NbIterReached();
}

 System::Boolean OCmath_KronrodSingleIntegration::GKRule(OCNaroWrappers::OCmath_Function^ theFunction, Standard_Real theLower, Standard_Real theUpper, OCNaroWrappers::OCmath_Vector^ theGaussP, OCNaroWrappers::OCmath_Vector^ theGaussW, OCNaroWrappers::OCmath_Vector^ theKronrodP, OCNaroWrappers::OCmath_Vector^ theKronrodW, Standard_Real& theValue, Standard_Real& theError)
{
  return OCConverter::StandardBooleanToBoolean(math_KronrodSingleIntegration::GKRule(*((math_Function*)theFunction->Handle), theLower, theUpper, *((math_Vector*)theGaussP->Handle), *((math_Vector*)theGaussW->Handle), *((math_Vector*)theKronrodP->Handle), *((math_Vector*)theKronrodW->Handle), theValue, theError));
}


