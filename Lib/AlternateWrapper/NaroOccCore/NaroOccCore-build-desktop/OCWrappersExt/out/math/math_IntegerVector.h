// File generated by CPPExt (MPV)
//
#ifndef _math_IntegerVector_OCWrappers_HeaderFile
#define _math_IntegerVector_OCWrappers_HeaderFile

// include native header
#include <math_IntegerVector.hxx>
#include "../Converter.h"


#include "math_SingleTabOfInteger.h"


namespace OCNaroWrappers
{

ref class OCmath_Matrix;



//! This class implements the real IntegerVector abstract data type. <br>
//! IntegerVectors can have an arbitrary range which must be define at <br>
//! the declaration and cannot be changed after this declaration. <br>
//! Example: math_IntegerVector V1(-3, 5); // an IntegerVector with <br>
//!  range [-3..5] <br>
public ref class OCmath_IntegerVector  {

protected:
  math_IntegerVector* nativeHandle;
  OCmath_IntegerVector(OCDummy^) {};

public:
  property math_IntegerVector* Handle
  {
    math_IntegerVector* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_IntegerVector(math_IntegerVector* nativeHandle);

// Methods PUBLIC

//! contructs an IntegerVector in the range [Lower..Upper] <br>
OCmath_IntegerVector(Standard_Integer First, Standard_Integer Last);

//! contructs an IntegerVector in the range [Lower..Upper] <br>
//!          with all the elements set to InitialValue. <br>
OCmath_IntegerVector(Standard_Integer First, Standard_Integer Last, Standard_Integer InitialValue);

//! Initialize an IntegerVector with all the elements <br>
//!          set to InitialValue. <br>
 /*instead*/  void Init(Standard_Integer InitialValue) ;

//! constructs an IntegerVector in the range [Lower..Upper] <br>
//!          which share the "c array" Tab. <br>
OCmath_IntegerVector(Standard_Address Tab, Standard_Integer First, Standard_Integer Last);

//! constructs a copy for initialization. <br>
//!          An exception is raised if the lengths of the IntegerVectors <br>
//!          are different. <br>
OCmath_IntegerVector(OCNaroWrappers::OCmath_IntegerVector^ Other);

//! returns the length of an IntegerVector <br>
 /*instead*/  Standard_Integer Length() ;

//! returns the value of the Lower index of an IntegerVector. <br>
 /*instead*/  Standard_Integer Lower() ;

//! returns the value of the Upper index of an IntegerVector. <br>
 /*instead*/  Standard_Integer Upper() ;

//! returns the value of the norm of an IntegerVector. <br>
 /*instead*/  Standard_Real Norm() ;

//! returns the value of the square of the norm of an <br>
//!          IntegerVector. <br>
 /*instead*/  Standard_Real Norm2() ;

//! returns the value of the Index of the maximum element of <br>
//!           an IntegerVector. <br>
 /*instead*/  Standard_Integer Max() ;

//! returns the value of the Index of the minimum element <br>
//!          of an IntegerVector. <br>
 /*instead*/  Standard_Integer Min() ;

//! inverses an IntegerVector. <br>
 /*instead*/  void Invert() ;

//! returns the inverse IntegerVector of an IntegerVector. <br>
 /*instead*/  OCmath_IntegerVector^ Inverse() ;

//! sets an IntegerVector from <I1> to <I2> to the <br>
//!          IntegerVector <V>; <br>
//! An exception is raised if I1<LowerIndex or I2>UpperIndex or I1>I2. <br>
//! An exception is raised if I2-I1+1 is different from the Length of V. <br>
 /*instead*/  void Set(Standard_Integer I1, Standard_Integer I2, OCNaroWrappers::OCmath_IntegerVector^ V) ;

//! slices the values of the IntegerVector between <I1> and <br>
//!          <I2>: <br>
//! Example: [2, 1, 2, 3, 4, 5] becomes [2, 4, 3, 2, 1, 5] between 2 and 5. <br>
//! An exception is raised if I1<LowerIndex or I2>UpperIndex. <br>
 /*instead*/  OCmath_IntegerVector^ Slice(Standard_Integer I1, Standard_Integer I2) ;

//! returns the product of an IntegerVector by an integer value. <br>
 /*instead*/  void Multiply(Standard_Integer Right) ;

//! returns the product of an IntegerVector by an integer value. <br>
 /*instead*/  OCmath_IntegerVector^ Multiplied(Standard_Integer Right) ;

//! returns the product of a vector and a real value. <br>
 /*instead*/  OCmath_IntegerVector^ TMultiplied(Standard_Integer Right) ;

//! adds the IntegerVector <Right> to an IntegerVector. <br>
//! An exception is raised if the IntegerVectors have not the same <br>
//! length. <br>
//! An exception is raised if the lengths are not equal. <br>
 /*instead*/  void Add(OCNaroWrappers::OCmath_IntegerVector^ Right) ;

//! adds the IntegerVector <Right> to an IntegerVector. <br>
//! An exception is raised if the IntegerVectors have not the same <br>
//! length. <br>
//! An exception is raised if the lengths are not equal. <br>
 /*instead*/  OCmath_IntegerVector^ Added(OCNaroWrappers::OCmath_IntegerVector^ Right) ;

//! sets an IntegerVector to the sum of the IntegerVector <br>
//!          <Left> and the IntegerVector <Right>. <br>
//! An exception is raised if the lengths are different. <br>
 /*instead*/  void Add(OCNaroWrappers::OCmath_IntegerVector^ Left, OCNaroWrappers::OCmath_IntegerVector^ Right) ;

//! sets an IntegerVector to the substraction of <br>
//!          <Right> from <Left>. <br>
//! An exception is raised if the IntegerVectors have not the same <br>
//! length. <br>
 /*instead*/  void Subtract(OCNaroWrappers::OCmath_IntegerVector^ Left, OCNaroWrappers::OCmath_IntegerVector^ Right) ;

//! accesses (in read or write mode) the value of index Num of <br>
//!          an IntegerVector. <br>
 /*instead*/  Standard_Integer Value(Standard_Integer Num) ;

//! Initialises an IntegerVector by copying <Other>. <br>
//!          An exception is raised if the Lengths are different. <br>
 /*instead*/  OCmath_IntegerVector^ Initialized(OCNaroWrappers::OCmath_IntegerVector^ Other) ;

//! returns the inner product of 2 IntegerVectors. <br>
//! An exception is raised if the lengths are not equal. <br>
 /*instead*/  Standard_Integer Multiplied(OCNaroWrappers::OCmath_IntegerVector^ Right) ;

//! returns the opposite of an IntegerVector. <br>
 /*instead*/  OCmath_IntegerVector^ Opposite() ;

//! returns the subtraction of <Right> from <me>. <br>
//! An exception is raised if the IntegerVectors have not the same length. <br>
 /*instead*/  void Subtract(OCNaroWrappers::OCmath_IntegerVector^ Right) ;

//! returns the subtraction of  <Right> from <me>. <br>
//! An exception is raised if the IntegerVectors have not the same length. <br>
 /*instead*/  OCmath_IntegerVector^ Subtracted(OCNaroWrappers::OCmath_IntegerVector^ Right) ;

//! returns the multiplication of an integer by an <br>
//!          IntegerVector. <br>
 /*instead*/  void Multiply(Standard_Integer Left, OCNaroWrappers::OCmath_IntegerVector^ Right) ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_IntegerVector()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
