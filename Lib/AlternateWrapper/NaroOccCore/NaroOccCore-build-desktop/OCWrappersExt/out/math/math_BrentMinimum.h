// File generated by CPPExt (MPV)
//
#ifndef _math_BrentMinimum_OCWrappers_HeaderFile
#define _math_BrentMinimum_OCWrappers_HeaderFile

// include native header
#include <math_BrentMinimum.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCmath_Function;



//! This class implements the Brent's method to find the minimum of <br>
//! a function of a single variable. <br>
//! No knowledge of the derivative is required. <br>
public ref class OCmath_BrentMinimum  {

protected:
  math_BrentMinimum* nativeHandle;
  OCmath_BrentMinimum(OCDummy^) {};

public:
  property math_BrentMinimum* Handle
  {
    math_BrentMinimum* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_BrentMinimum(math_BrentMinimum* nativeHandle);

// Methods PUBLIC


//! This constructor should be used in a sub-class to initialize <br>
//! correctly all the fields of this class. <br>
OCmath_BrentMinimum(Standard_Real TolX, Standard_Integer NbIterations, Standard_Real ZEPS);


//! This constructor should be used in a sub-class to initialize <br>
//! correctly all the fields of this class. <br>
//! It has to be used if F(Bx) is known. <br>
OCmath_BrentMinimum(Standard_Real TolX, Standard_Real Fbx, Standard_Integer NbIterations, Standard_Real ZEPS);


//! Given a bracketing triplet of abscissae Ax, Bx, Cx <br>
//! (such as Bx is between Ax and Cx, F(Bx) is <br>
//! less than both F(Bx) and F(Cx)) the Brent minimization is done <br>
//! on the function F. <br>
//! The tolerance required on F is given by Tolerance. <br>
//! The solution is found when : <br>
//!    abs(Xi - Xi-1) <= TolX * abs(Xi) + ZEPS; <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
OCmath_BrentMinimum(OCNaroWrappers::OCmath_Function^ F, Standard_Real Ax, Standard_Real Bx, Standard_Real Cx, Standard_Real TolX, Standard_Integer NbIterations, Standard_Real ZEPS);


//! Brent minimization is performed on function F from a given <br>
//! bracketing triplet of abscissas Ax, Bx, Cx (such that Bx is <br>
//! between Ax and Cx, F(Bx) is less than both F(Bx) and F(Cx)) <br>
//! Warning <br>
//! The initialization constructors must have been called <br>
//! before the call to the Perform method. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCmath_Function^ F, Standard_Real Ax, Standard_Real Bx, Standard_Real Cx) ;


//! This method is called at the end of each iteration to check if the <br>
//! solution is found. <br>
//! It can be redefined in a sub-class to implement a specific test to <br>
//! stop the iterations. <br>
virtual /*instead*/  System::Boolean IsSolutionReached(OCNaroWrappers::OCmath_Function^ F) ;

//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! returns the location value of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Real Location() ;

//! returns the value of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Real Minimum() ;

//! returns the number of iterations really done during the <br>
//! computation of the minimum. <br>
//! Exception NotDone is raised if the minimum was not found. <br>
 /*instead*/  Standard_Integer NbIterations() ;

//! Prints on the stream o information on the current state <br>
//!          of the object. <br>
//!          Is used to redefine the operator <<. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_BrentMinimum()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
