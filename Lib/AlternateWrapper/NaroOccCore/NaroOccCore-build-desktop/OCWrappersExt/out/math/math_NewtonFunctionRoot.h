// File generated by CPPExt (MPV)
//
#ifndef _math_NewtonFunctionRoot_OCWrappers_HeaderFile
#define _math_NewtonFunctionRoot_OCWrappers_HeaderFile

// include native header
#include <math_NewtonFunctionRoot.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCmath_FunctionWithDerivative;



//! This class implements the calculation of a root of a function of <br>
//! a single variable starting from an initial near guess using the <br>
//! Newton algorithm. Knowledge of the derivative is required. <br>
public ref class OCmath_NewtonFunctionRoot  {

protected:
  math_NewtonFunctionRoot* nativeHandle;
  OCmath_NewtonFunctionRoot(OCDummy^) {};

public:
  property math_NewtonFunctionRoot* Handle
  {
    math_NewtonFunctionRoot* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCmath_NewtonFunctionRoot(math_NewtonFunctionRoot* nativeHandle);

// Methods PUBLIC


//! The Newton method is done to find the root of the function F <br>
//! from the initial guess Guess. <br>
//! The tolerance required on the root is given by Tolerance. <br>
//! The solution is found when : <br>
//!  abs(Xi - Xi-1) <= EpsX and abs(F(Xi))<= EpsF <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
OCmath_NewtonFunctionRoot(OCNaroWrappers::OCmath_FunctionWithDerivative^ F, Standard_Real Guess, Standard_Real EpsX, Standard_Real EpsF, Standard_Integer NbIterations);


//! The Newton method is done to find the root of the function F <br>
//! from the initial guess Guess. <br>
//! The solution must be inside the interval [A, B]. <br>
//! The tolerance required on the root is given by Tolerance. <br>
//! The solution is found when : <br>
//!  abs(Xi - Xi-1) <= EpsX and abs(F(Xi))<= EpsF <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
OCmath_NewtonFunctionRoot(OCNaroWrappers::OCmath_FunctionWithDerivative^ F, Standard_Real Guess, Standard_Real EpsX, Standard_Real EpsF, Standard_Real A, Standard_Real B, Standard_Integer NbIterations);

//! is used in a sub-class to initialize correctly all the fields <br>
//!          of this class. <br>
OCmath_NewtonFunctionRoot(Standard_Real A, Standard_Real B, Standard_Real EpsX, Standard_Real EpsF, Standard_Integer NbIterations);

//! is used internally by the constructors. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCmath_FunctionWithDerivative^ F, Standard_Real Guess) ;

//! Returns true if the computations are successful, otherwise returns false. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the value of the root of function <F>. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Real Root() ;

//! returns the value of the derivative at the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Real Derivative() ;

//! returns the value of the function at the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Real Value() ;

//! Returns the number of iterations really done on the <br>
//! computation of the Root. <br>
//! Exception NotDone is raised if the root was not found. <br>
 /*instead*/  Standard_Integer NbIterations() ;

//! Prints information on the current state of the object. <br>
 /*instead*/  void Dump(Standard_OStream& o) ;

~OCmath_NewtonFunctionRoot()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
