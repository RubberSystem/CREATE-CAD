// File generated by CPPExt (Transient)
//
#ifndef _WNT_TextManager_OCWrappers_HeaderFile
#define _WNT_TextManager_OCWrappers_HeaderFile

// include the wrapped class
#include <WNT_TextManager.hxx>
#include "../Converter.h"

#include "../MFT/MFT_TextManager.h"

#include "../Aspect/Aspect_TypeOfText.h"


namespace OCNaroWrappers
{

ref class OCWNT_WDriver;



public ref class OCWNT_TextManager : OCMFT_TextManager {

protected:
  // dummy constructor;
  OCWNT_TextManager(OCDummy^) : OCMFT_TextManager((OCDummy^)nullptr) {};

public:

// constructor from native
OCWNT_TextManager(Handle(WNT_TextManager)* nativeHandle);

// Methods PUBLIC


OCWNT_TextManager(Standard_Real aPixelToUnit);

//! Calls when string drawing is started. <br>
//!          with a string aspect <aPaintType> : <br>
//!            0 for filled string <br>
//!            1 for stroke string <br>
//!            2 for outline string <br>
//!          The origine of the string <X>,<Y>, <br>
//!          The orientation of the string <anOrientation>, <br>
//!          The medium size of the char <aWidth,aHeight>, <br>
//!          The Slant of the char <aSlant>, <br>
virtual /*instead*/  void BeginString(Quantity_Length X, Quantity_Length Y, Quantity_PlaneAngle anOrientation, Quantity_Length aWidth, Quantity_Length aHeight, Quantity_PlaneAngle aSlant, Standard_Integer aPaintType) override;

//! Calls when a char drawing is started <br>
//!          and give the current string position for this char. <br>
//!          and give the relative char position from the beginning <br>
//!          of the string. <br>
//!          The application can returns FALSE for skipping the char drawing. <br>
virtual /*instead*/  System::Boolean BeginChar(Standard_Integer aCharCode, Quantity_Length X, Quantity_Length Y) override;

//! Calls to defines the current char bounding-box. <br>
//!	    The application can returns FALSE for ending the char drawing. <br>
virtual /*instead*/  System::Boolean SetCharBoundingBox(Quantity_Length X1, Quantity_Length Y1, Quantity_Length X2, Quantity_Length Y2, Quantity_Length X3, Quantity_Length Y3, Quantity_Length X4, Quantity_Length Y4) override;

//! Calls to defines the current char encoding. <br>
//!  Warning: The application can returns FALSE for skipping the char drawing. <br>
virtual /*instead*/  System::Boolean SetCharEncoding(System::String^ anEncoding) override;

//! Calls to sets the current string position. <br>
//!	    The application can returns FALSE for ending the char drawing. <br>
virtual /*instead*/  System::Boolean Moveto(Quantity_Length X, Quantity_Length Y) override;

//! Calls to drawn to the current string position. <br>
//!	    The application can returns FALSE for ending the char drawing. <br>
virtual /*instead*/  System::Boolean Lineto(Quantity_Length X, Quantity_Length Y) override;

//! Calls to drawn to the current string position. <br>
//!          The application can drawn the curve defined by <br>
//!          his descriptor P1,P2,P3,P4 or <br>
//!          returns FALSE to let the interpretor compute the curve <br>
//!          vectors. <br>
virtual /*instead*/  System::Boolean Curveto(Quantity_Length X1, Quantity_Length Y1, Quantity_Length X2, Quantity_Length Y2, Quantity_Length X3, Quantity_Length Y3, Quantity_Length X4, Quantity_Length Y4) override;

//! Calls when a char path drawing is ended <br>
virtual /*instead*/  void ClosePath() override;

//! Calls when a char drawing is ended <br>
//!          and give the relative char ending position from the <br>
//!          beginning of the string. <br>
//!          The application can returns FALSE for skipping the string <br>
//!          drawing. <br>
virtual /*instead*/  System::Boolean EndChar(Quantity_Length X, Quantity_Length Y) override;

//! Calls when string drawing is ended (Normally the last call). <br>
virtual /*instead*/  void EndString() override;

//! Called when starting to draw the string <br>
 /*instead*/  void SetDrawAttribs(Standard_Address aDrawData) ;

//! Sets the current attribs of the text. <br>
 /*instead*/  void SetTextAttribs(Standard_Integer aTextColor, OCAspect_TypeOfText aTypeOfText, Quantity_Length anUnderlinePosition) ;

~OCWNT_TextManager()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
