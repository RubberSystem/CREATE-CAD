// File generated by CPPExt (CPP file)
//

#include "WNT_FontMapEntry.h"
#include "../Converter.h"
#include "WNT_WDriver.h"
#include "WNT_DDriver.h"


using namespace OCNaroWrappers;

OCWNT_FontMapEntry::OCWNT_FontMapEntry(Handle(WNT_FontMapEntry)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_WNT_FontMapEntry(*nativeHandle);
}

OCWNT_FontMapEntry::OCWNT_FontMapEntry(System::String^ aFontName) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_FontMapEntry(new WNT_FontMapEntry(OCConverter::StringToStandardCString(aFontName)));
}

 System::IntPtr OCWNT_FontMapEntry::HFont()
{
  return System::IntPtr((*((Handle_WNT_FontMapEntry*)nativeHandle))->HFont());
}

 System::IntPtr OCWNT_FontMapEntry::SetAttrib(WNT_Dword aFlags, Standard_Address aData, System::Boolean aRepl)
{
  return System::IntPtr((*((Handle_WNT_FontMapEntry*)nativeHandle))->SetAttrib(aFlags, aData, OCConverter::BooleanToStandardBoolean(aRepl)));
}

 Quantity_PlaneAngle OCWNT_FontMapEntry::SetSlant(Quantity_PlaneAngle aSlant)
{
  return (*((Handle_WNT_FontMapEntry*)nativeHandle))->SetSlant(aSlant);
}

 Quantity_Factor OCWNT_FontMapEntry::SetScale(Quantity_Factor aScale)
{
  return (*((Handle_WNT_FontMapEntry*)nativeHandle))->SetScale(aScale);
}

 Quantity_PlaneAngle OCWNT_FontMapEntry::Slant()
{
  return (*((Handle_WNT_FontMapEntry*)nativeHandle))->Slant();
}

 Quantity_Factor OCWNT_FontMapEntry::Scale()
{
  return (*((Handle_WNT_FontMapEntry*)nativeHandle))->Scale();
}

 Standard_Address OCWNT_FontMapEntry::LogFont()
{
  return (*((Handle_WNT_FontMapEntry*)nativeHandle))->LogFont();
}


