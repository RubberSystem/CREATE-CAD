// File generated by CPPExt (CPP file)
//

#include "WNT_GraphicDevice.h"
#include "../Converter.h"
#include "WNT_Window.h"
#include "../Quantity/Quantity_Color.h"
#include "../Aspect/Aspect_ColorMap.h"
#include "WNT_HColorTable.h"
#include "../Aspect/Aspect_GraphicDriver.h"


using namespace OCNaroWrappers;

OCWNT_GraphicDevice::OCWNT_GraphicDevice(Handle(WNT_GraphicDevice)* nativeHandle) : OCAspect_GraphicDevice((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_WNT_GraphicDevice(*nativeHandle);
}

OCWNT_GraphicDevice::OCWNT_GraphicDevice(System::Boolean aColorCube, System::IntPtr aDevContext) : OCAspect_GraphicDevice((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_GraphicDevice(new WNT_GraphicDevice(OCConverter::BooleanToStandardBoolean(aColorCube), aDevContext.ToPointer()));
}

OCWNT_GraphicDevice::OCWNT_GraphicDevice(System::Boolean aColorCube, Standard_Integer aDevContext) : OCAspect_GraphicDevice((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_GraphicDevice(new WNT_GraphicDevice(OCConverter::BooleanToStandardBoolean(aColorCube), aDevContext));
}

 WNT_ColorRef OCWNT_GraphicDevice::SetColor(OCNaroWrappers::OCQuantity_Color^ aColor, System::Boolean aHighlight)
{
  return (*((Handle_WNT_GraphicDevice*)nativeHandle))->SetColor(*((Quantity_Color*)aColor->Handle), OCConverter::BooleanToStandardBoolean(aHighlight));
}

 WNT_ColorRef OCWNT_GraphicDevice::SetColor(Standard_Integer aRed, Standard_Integer aGreen, Standard_Integer aBlue, System::Boolean aHighlight)
{
  return (*((Handle_WNT_GraphicDevice*)nativeHandle))->SetColor(aRed, aGreen, aBlue, OCConverter::BooleanToStandardBoolean(aHighlight));
}

 void OCWNT_GraphicDevice::SetColor(WNT_Long aPixel)
{
  (*((Handle_WNT_GraphicDevice*)nativeHandle))->SetColor(aPixel);
}

 void OCWNT_GraphicDevice::MapColors(OCNaroWrappers::OCAspect_ColorMap^ aColorMap, OCNaroWrappers::OCWNT_HColorTable^ aColorTable)
{
  (*((Handle_WNT_GraphicDevice*)nativeHandle))->MapColors(*((Handle_Aspect_ColorMap*)aColorMap->Handle), *((Handle_WNT_HColorTable*)aColorTable->Handle));
}

 System::IntPtr OCWNT_GraphicDevice::HPalette()
{
  return System::IntPtr((*((Handle_WNT_GraphicDevice*)nativeHandle))->HPalette());
}

 void OCWNT_GraphicDevice::DisplaySize(Standard_Integer& aWidth, Standard_Integer& aHeight)
{
  (*((Handle_WNT_GraphicDevice*)nativeHandle))->DisplaySize(aWidth, aHeight);
}

 void OCWNT_GraphicDevice::DisplaySize(Quantity_Length& aWidth, Quantity_Length& aHeight)
{
  (*((Handle_WNT_GraphicDevice*)nativeHandle))->DisplaySize(aWidth, aHeight);
}

 System::Boolean OCWNT_GraphicDevice::IsPaletteDevice()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_GraphicDevice*)nativeHandle))->IsPaletteDevice());
}

 Standard_Integer OCWNT_GraphicDevice::NumColors()
{
  return (*((Handle_WNT_GraphicDevice*)nativeHandle))->NumColors();
}

 WNT_ColorRef OCWNT_GraphicDevice::HighlightColor()
{
  return (*((Handle_WNT_GraphicDevice*)nativeHandle))->HighlightColor();
}

OCAspect_GraphicDriver^ OCWNT_GraphicDevice::GraphicDriver()
{
  Handle(Aspect_GraphicDriver) tmp = (*((Handle_WNT_GraphicDevice*)nativeHandle))->GraphicDriver();
  return gcnew OCAspect_GraphicDriver(&tmp);
}


