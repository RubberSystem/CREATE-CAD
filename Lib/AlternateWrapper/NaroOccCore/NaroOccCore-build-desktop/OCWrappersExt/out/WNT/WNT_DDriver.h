// File generated by CPPExt (Transient)
//
#ifndef _WNT_DDriver_OCWrappers_HeaderFile
#define _WNT_DDriver_OCWrappers_HeaderFile

// include the wrapped class
#include <WNT_DDriver.hxx>
#include "../Converter.h"

#include "../PlotMgt/PlotMgt_PlotterDriver.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "WNT_OrientationType.h"
#include "../Aspect/Aspect_PlotMode.h"
#include "../Aspect/Aspect_TypeOfText.h"


namespace OCNaroWrappers
{

ref class OCTCollection_HAsciiString;
ref class OCWNT_GraphicDevice;
ref class OCWNT_HColorTable;
ref class OCWNT_HFontTable;
ref class OCTColStd_HArray1OfInteger;
ref class OCWNT_HListOfMFTFonts;
ref class OCTShort_HArray1OfShortReal;
ref class OCWNT_TextManager;
ref class OCStandard_Transient;
ref class OCTCollection_ExtendedString;
ref class OCAspect_ColorMap;
ref class OCAspect_TypeMap;
ref class OCAspect_WidthMap;
ref class OCAspect_FontMap;
ref class OCAspect_MarkMap;
ref class OCTColStd_HSequenceOfAsciiString;
ref class OCTCollection_AsciiString;
ref class OCMFT_FontManager;


//! Defines the device-independent Windows NT driver. <br>
//!          After graphics output enhanced metafile will be created. <br>
//!          It is possible to play this file on device several times <br>
//!          by Spool () method. <br>
public ref class OCWNT_DDriver : OCPlotMgt_PlotterDriver {

protected:
  // dummy constructor;
  OCWNT_DDriver(OCDummy^) : OCPlotMgt_PlotterDriver((OCDummy^)nullptr) {};

public:

// constructor from native
OCWNT_DDriver(Handle(WNT_DDriver)* nativeHandle);

// Methods PUBLIC

//! Constructs a device driver framework defined by the <br>
//! string aDeviceName, the path specified as an <br>
//! argument for OSD_Path, the type of orientation <br>
//! anOrientation, the scale aScale, the number of copies <br>
//! aCopies and the flag aPrintFlag. <br>
OCWNT_DDriver(System::String^ aDeviceName, System::String^ aFileName, OCWNT_OrientationType anOrientation, Quantity_Factor aScale, Standard_Integer aCopies);


//! Creates the class object. An empty path is authorized <br>
//! and in this case, a temporary enhanced metafile is <br>
//! created. You can delete this file by using the EndDraw function. <br>
//! Warning - OSD_Path corresponds to an ASCII string. <br>
//! Exceptions <br>
//! Aspect_DriverDefinitionError if the driver could not be defined. <br>
OCWNT_DDriver(System::String^ aFileName, Standard_Integer aCopies);

//! Begins a new picture of graphics in the enhanced metafile <br>
virtual /*instead*/  void BeginDraw() ;

//! Flushes all graphics, closes enhanced metafile. <br>
virtual /*instead*/  void EndDraw(System::Boolean fSynchronize) ;

//! Spools the driver onto a printer spool. <br>
//! Stretches the picture so that it fits into the device <br>
//! workspace if the Boolean anOriginalSize is False <br>
//! and the workspace dimensions of the original <br>
//! device differ from those of the current device. This <br>
//! flag is ignored if aDeviceName is NULL. <br>
//! Warning <br>
//! If aDeviceName is NULL, then the driver should be <br>
//! created with the first constructor. Otherwise, use <br>
//! the second constructor to create a class object. <br>
//! Exceptions <br>
//! Aspect_DriverError if the driver is not correctly defined. <br>
virtual /*instead*/  System::Boolean Spool(OCAspect_PlotMode aPlotMode, System::String^ aDeviceName, System::Boolean anOriginalSize) override;

//! Defines the Current Line Attibutes <br>
virtual /*instead*/  void SetLineAttrib(Standard_Integer ColorIndex, Standard_Integer TypeIndex, Standard_Integer WidthIndex) override;

//! Defines the Current Text Attributes <br>
virtual /*instead*/  void SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex) override;

//! Defines the Current Extended Text Attributes <br>
virtual /*instead*/  void SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex, Quantity_PlaneAngle aSlant, Quantity_Factor aHScale, Quantity_Factor aWScale, System::Boolean isUnderlined) override;

//! Sets the poly attributes <br>
virtual /*instead*/  void SetPolyAttrib(Standard_Integer ColorIndex, Standard_Integer TileIndex, System::Boolean DrawEdge) override;

//! Defines the Current Marker Attributes <br>
virtual /*instead*/  void SetMarkerAttrib(Standard_Integer ColorIndex, Standard_Integer WidthIndex, System::Boolean FillMarker) override;


virtual /*instead*/  System::Boolean IsKnownImage(OCNaroWrappers::OCStandard_Transient^ anImage) override;


virtual /*instead*/  System::Boolean SizeOfImageFile(System::String^ anImageFile, Standard_Integer& aWidth, Standard_Integer& aHeight) override;


virtual /*instead*/  void ClearImage(OCNaroWrappers::OCStandard_Transient^ anImageId) override;


virtual /*instead*/  void ClearImageFile(System::String^ anImageFile) override;


virtual /*instead*/  void DrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY) override;


virtual /*instead*/  void DrawImageFile(System::String^ anImageFile, Standard_ShortReal aX, Standard_ShortReal aY, Quantity_Factor aScale) override;

//! Fills a complete Image . <br>
virtual /*instead*/  void FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels) override;

//! Fills a line of the Image . <br>
//!  Warning: 0 <= anIndexOfLine < aHeight <br>
//!              anIndexOfLine = 0 must be the first call <br>
virtual /*instead*/  void FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer anIndexOfLine, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels) override;

//! Begin an incremental polyline primitive of <aNumber> of points <br>
//!  Warning: Points must be added by the the DrawPoint() method. <br>
virtual /*instead*/  void BeginPolyline(Standard_Integer aNumber) override;

//! Begin an incremental polygon primitive of <aNumber> of points <br>
//!  Warning: Points must be added by the the DrawPoint() method. <br>
virtual /*instead*/  void BeginPolygon(Standard_Integer aNumber) override;

//! Begin a set of segments . <br>
//!  Warning: Segments must be added by the DrawSegment() method <br>
virtual /*instead*/  void BeginSegments() override;

//! Begin a set of circles or ellips . <br>
//!  Warning: Arcs must be added by the DrawArc() methods <br>
virtual /*instead*/  void BeginArcs() override;

//! Begin a set of polygon circles or ellips <br>
//!  Warning: Arcs must be added by the DrawPolyArc() methods <br>
virtual /*instead*/  void BeginPolyArcs() override;

//! Begin a set of markers . <br>
//!  Warning: Markers must be added by the DrawMarker() method <br>
virtual /*instead*/  void BeginMarkers() override;

//! Begin a set of points . <br>
//!  Warning: Points must be added by the DrawPoint() method <br>
virtual /*instead*/  void BeginPoints() override;

//! Close the last Begining primitive <br>
virtual /*instead*/  void ClosePrimitive() override;

//! Returns the Available WorkSpace in DWU coordinates <br>
virtual /*instead*/  void WorkSpace(Quantity_Length& Width, Quantity_Length& Heigth) override;

//! Returns the DWU value depending of <br>
//!          the PIXEL value. <br>
virtual /*instead*/  Quantity_Length Convert(Standard_Integer PV) override;

//! Returns the PIXEL value depending of the DWU value. <br>
virtual /*instead*/  Standard_Integer Convert(Quantity_Length DV) override;

//! Returns the DWU position depending of the PIXEL position . <br>
virtual /*instead*/  void Convert(Standard_Integer PX, Standard_Integer PY, Quantity_Length& DX, Quantity_Length& DY) override;

//! Returns the PIXEL position depending of the DWU position <br>
virtual /*instead*/  void Convert(Quantity_Length DX, Quantity_Length DY, Standard_Integer& PX, Standard_Integer& PY) override;

//! Returns the TEXT size in DWU space depending <br>
//!          of the required FontIndex if aFontIndex is >= 0 <br>
//!          or the current FontIndex if < 0 (default). <br>
 /*instead*/  void TextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_Integer aFontIndex) ;

//! Returns the TEXT size and offsets <br>
//!          in DWU space depending <br>
//!          of the required FontIndex if aFontIndex is >= 0 <br>
//!          or the current FontIndex if < 0 (default). <br>
 /*instead*/  void TextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_ShortReal& anXoffset, Standard_ShortReal& anYoffset, Standard_Integer aFontIndex) ;

//! Returns the TEXT size in DWU space depending <br>
//!          of the required FontIndex if aFontIndex is >= 0 <br>
//!          or the current FontIndex if < 0 (default). <br>
 /*instead*/  void TextSize(System::String^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_ShortReal& anXoffset, Standard_ShortReal& anYoffset, Standard_Integer aFontIndex) ;

//! Returns device context handle <br>
 /*instead*/  System::IntPtr HDC() ;

//! Returns dimensions of the device <br>
 /*instead*/  void ClientRect(Standard_Integer& aWidth, Standard_Integer& aHeigth) ;

//! Returns graphic device <br>
 /*instead*/  OCWNT_GraphicDevice^ GraphicDevice() ;

//! Returns list of available graphic devices. <br>
//!          First element is default device <br>
static /*instead*/  OCTColStd_HSequenceOfAsciiString^ DeviceList() ;

//! Returns size of a specified device. <br>
static /*instead*/  void DeviceSize(OCNaroWrappers::OCTCollection_AsciiString^ aDevice, Standard_Real& aWidth, Standard_Real& aHeight) ;

//! returns dimensions, in .01 millimeter units, <br>
//!           of a rectangle that surrounds the picture stored <br>
//!           in the metafile ( parameters <aWidth> & <aHeight> ). <br>
//!           <aSwap> value idicates whether rotate operation <br>
//!           (portrait/landscape) was performed or not. Valid <br>
//!           values are: <0> - no rotation <br>
//!                       <1> - do rotation <br>
//!                       <2> - could not determine <br>
//!           Returns ratio between <aWidth> & <aHeight>. <br>
//!  Warning:  returns <-1> in case of error <br>
 /*instead*/  Standard_Real EMFDim(Standard_Integer& aWidth, Standard_Integer& aHeight, Standard_Integer& aSwap) ;


 /*instead*/  OCWNT_TextManager^ TextManager() ;


 /*instead*/  OCMFT_FontManager^ MFT_Font(Standard_Integer anIndex) ;


 /*instead*/  Standard_ShortReal MFT_Size(Standard_Integer anIndex) ;

~OCWNT_DDriver()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
