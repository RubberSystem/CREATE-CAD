// File generated by CPPExt (MPV)
//
#ifndef _WNT_ListOfMFTFonts_OCWrappers_HeaderFile
#define _WNT_ListOfMFTFonts_OCWrappers_HeaderFile

// include native header
#include <WNT_ListOfMFTFonts.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCMFT_FontManager;



public ref class OCWNT_ListOfMFTFonts  {

protected:
  WNT_ListOfMFTFonts* nativeHandle;
  OCWNT_ListOfMFTFonts(OCDummy^) {};

public:
  property WNT_ListOfMFTFonts* Handle
  {
    WNT_ListOfMFTFonts* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCWNT_ListOfMFTFonts(WNT_ListOfMFTFonts* nativeHandle);

// Methods PUBLIC


OCWNT_ListOfMFTFonts(Standard_Integer Low, Standard_Integer Up);


OCWNT_ListOfMFTFonts(OCNaroWrappers::OCMFT_FontManager^ Item, Standard_Integer Low, Standard_Integer Up);


 /*instead*/  void Init(OCNaroWrappers::OCMFT_FontManager^ V) ;


 /*instead*/  System::Boolean IsAllocated() ;


 /*instead*/  OCWNT_ListOfMFTFonts^ Assign(OCNaroWrappers::OCWNT_ListOfMFTFonts^ Other) ;


 /*instead*/  Standard_Integer Length() ;


 /*instead*/  Standard_Integer Lower() ;


 /*instead*/  Standard_Integer Upper() ;


 /*instead*/  void SetValue(Standard_Integer Index, OCNaroWrappers::OCMFT_FontManager^ Value) ;


 /*instead*/  OCMFT_FontManager^ Value(Standard_Integer Index) ;


 /*instead*/  OCMFT_FontManager^ ChangeValue(Standard_Integer Index) ;

~OCWNT_ListOfMFTFonts()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
