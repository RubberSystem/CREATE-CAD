// File generated by CPPExt (CPP file)
//

#include "WNT_TextManager.h"
#include "../Converter.h"
#include "WNT_WDriver.h"


using namespace OCNaroWrappers;

OCWNT_TextManager::OCWNT_TextManager(Handle(WNT_TextManager)* nativeHandle) : OCMFT_TextManager((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_WNT_TextManager(*nativeHandle);
}

OCWNT_TextManager::OCWNT_TextManager(Standard_Real aPixelToUnit) : OCMFT_TextManager((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_TextManager(new WNT_TextManager(aPixelToUnit));
}

 void OCWNT_TextManager::BeginString(Quantity_Length X, Quantity_Length Y, Quantity_PlaneAngle anOrientation, Quantity_Length aWidth, Quantity_Length aHeight, Quantity_PlaneAngle aSlant, Standard_Integer aPaintType)
{
  (*((Handle_WNT_TextManager*)nativeHandle))->BeginString(X, Y, anOrientation, aWidth, aHeight, aSlant, aPaintType);
}

 System::Boolean OCWNT_TextManager::BeginChar(Standard_Integer aCharCode, Quantity_Length X, Quantity_Length Y)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_TextManager*)nativeHandle))->BeginChar(aCharCode, X, Y));
}

 System::Boolean OCWNT_TextManager::SetCharBoundingBox(Quantity_Length X1, Quantity_Length Y1, Quantity_Length X2, Quantity_Length Y2, Quantity_Length X3, Quantity_Length Y3, Quantity_Length X4, Quantity_Length Y4)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_TextManager*)nativeHandle))->SetCharBoundingBox(X1, Y1, X2, Y2, X3, Y3, X4, Y4));
}

 System::Boolean OCWNT_TextManager::SetCharEncoding(System::String^ anEncoding)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_TextManager*)nativeHandle))->SetCharEncoding(OCConverter::StringToStandardCString(anEncoding)));
}

 System::Boolean OCWNT_TextManager::Moveto(Quantity_Length X, Quantity_Length Y)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_TextManager*)nativeHandle))->Moveto(X, Y));
}

 System::Boolean OCWNT_TextManager::Lineto(Quantity_Length X, Quantity_Length Y)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_TextManager*)nativeHandle))->Lineto(X, Y));
}

 System::Boolean OCWNT_TextManager::Curveto(Quantity_Length X1, Quantity_Length Y1, Quantity_Length X2, Quantity_Length Y2, Quantity_Length X3, Quantity_Length Y3, Quantity_Length X4, Quantity_Length Y4)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_TextManager*)nativeHandle))->Curveto(X1, Y1, X2, Y2, X3, Y3, X4, Y4));
}

 void OCWNT_TextManager::ClosePath()
{
  (*((Handle_WNT_TextManager*)nativeHandle))->ClosePath();
}

 System::Boolean OCWNT_TextManager::EndChar(Quantity_Length X, Quantity_Length Y)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_TextManager*)nativeHandle))->EndChar(X, Y));
}

 void OCWNT_TextManager::EndString()
{
  (*((Handle_WNT_TextManager*)nativeHandle))->EndString();
}

 void OCWNT_TextManager::SetDrawAttribs(Standard_Address aDrawData)
{
  (*((Handle_WNT_TextManager*)nativeHandle))->SetDrawAttribs(aDrawData);
}

 void OCWNT_TextManager::SetTextAttribs(Standard_Integer aTextColor, OCAspect_TypeOfText aTypeOfText, Quantity_Length anUnderlinePosition)
{
  (*((Handle_WNT_TextManager*)nativeHandle))->SetTextAttribs(aTextColor, (Aspect_TypeOfText)aTypeOfText, anUnderlinePosition);
}


