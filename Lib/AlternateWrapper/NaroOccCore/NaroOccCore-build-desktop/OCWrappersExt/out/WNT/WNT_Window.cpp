// File generated by CPPExt (CPP file)
//

#include "WNT_Window.h"
#include "../Converter.h"
#include "WNT_WClass.h"
#include "WNT_ImageManager.h"
#include "WNT_Icon.h"
#include "WNT_WDriver.h"
#include "WNT_IconBox.h"
#include "WNT_GraphicDevice.h"
#include "../Aspect/Aspect_Background.h"
#include "../Quantity/Quantity_Color.h"
#include "../Aspect/Aspect_GradientBackground.h"


using namespace OCNaroWrappers;

OCWNT_Window::OCWNT_Window(Handle(WNT_Window)* nativeHandle) : OCAspect_Window((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_WNT_Window(*nativeHandle);
}

OCWNT_Window::OCWNT_Window(OCNaroWrappers::OCWNT_GraphicDevice^ aDevice, System::String^ aTitle, OCNaroWrappers::OCWNT_WClass^ aClass, WNT_Dword aStyle, Quantity_Parameter Xc, Quantity_Parameter Yc, Quantity_Parameter aWidth, Quantity_Parameter aHeight, OCQuantity_NameOfColor aBackColor, System::IntPtr aParent, System::IntPtr aMenu, Standard_Address aClientStruct) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_Window(new WNT_Window(*((Handle_WNT_GraphicDevice*)aDevice->Handle), OCConverter::StringToStandardCString(aTitle), *((Handle_WNT_WClass*)aClass->Handle), aStyle, Xc, Yc, aWidth, aHeight, (Quantity_NameOfColor)aBackColor, aParent.ToPointer(), aMenu.ToPointer(), aClientStruct));
}

OCWNT_Window::OCWNT_Window(OCNaroWrappers::OCWNT_GraphicDevice^ theDevice, System::String^ theTitle, OCNaroWrappers::OCWNT_WClass^ theClass, WNT_Dword theStyle, Standard_Integer thePxLeft, Standard_Integer thePxTop, Standard_Integer thePxWidth, Standard_Integer thePxHeight, OCQuantity_NameOfColor theBackColor, System::IntPtr theParent, System::IntPtr theMenu, Standard_Address theClientStruct) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_Window(new WNT_Window(*((Handle_WNT_GraphicDevice*)theDevice->Handle), OCConverter::StringToStandardCString(theTitle), *((Handle_WNT_WClass*)theClass->Handle), theStyle, thePxLeft, thePxTop, thePxWidth, thePxHeight, (Quantity_NameOfColor)theBackColor, theParent.ToPointer(), theMenu.ToPointer(), theClientStruct));
}

OCWNT_Window::OCWNT_Window(OCNaroWrappers::OCWNT_GraphicDevice^ aDevice, System::IntPtr aHandle, OCQuantity_NameOfColor aBackColor) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_Window(new WNT_Window(*((Handle_WNT_GraphicDevice*)aDevice->Handle), aHandle.ToPointer(), (Quantity_NameOfColor)aBackColor));
}

OCWNT_Window::OCWNT_Window(OCNaroWrappers::OCWNT_GraphicDevice^ aDevice, Standard_Integer aPart1, Standard_Integer aPart2, OCQuantity_NameOfColor aBackColor) : OCAspect_Window((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_Window(new WNT_Window(*((Handle_WNT_GraphicDevice*)aDevice->Handle), aPart1, aPart2, (Quantity_NameOfColor)aBackColor));
}

 void OCWNT_Window::SetBackground(OCNaroWrappers::OCAspect_Background^ Background)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetBackground(*((Aspect_Background*)Background->Handle));
}

 void OCWNT_Window::SetBackground(OCQuantity_NameOfColor BackColor)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetBackground((Quantity_NameOfColor)BackColor);
}

 void OCWNT_Window::SetBackground(OCNaroWrappers::OCQuantity_Color^ color)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetBackground(*((Quantity_Color*)color->Handle));
}

 void OCWNT_Window::SetBackground(System::IntPtr aBackPixmap)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetBackground(aBackPixmap.ToPointer());
}

 System::Boolean OCWNT_Window::SetBackground(System::String^ aName, OCAspect_FillMethod aMethod)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->SetBackground(OCConverter::StringToStandardCString(aName), (Aspect_FillMethod)aMethod));
}

 void OCWNT_Window::SetBackground(OCNaroWrappers::OCAspect_GradientBackground^ Background)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetBackground(*((Aspect_GradientBackground*)Background->Handle));
}

 void OCWNT_Window::SetBackground(OCNaroWrappers::OCQuantity_Color^ aCol1, OCNaroWrappers::OCQuantity_Color^ aCol2, OCAspect_GradientFillMethod aMethod)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetBackground(*((Quantity_Color*)aCol1->Handle), *((Quantity_Color*)aCol2->Handle), (Aspect_GradientFillMethod)aMethod);
}

 void OCWNT_Window::SetCursor(System::IntPtr aCursor)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetCursor(aCursor.ToPointer());
}

 void OCWNT_Window::SetIcon(System::IntPtr anIcon, System::String^ aName)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetIcon(anIcon.ToPointer(), OCConverter::StringToStandardCString(aName));
}

 void OCWNT_Window::SetIconName(System::String^ aName)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetIconName(OCConverter::StringToStandardCString(aName));
}

 void OCWNT_Window::SetDoubleBuffer(System::Boolean DBmode)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetDoubleBuffer(OCConverter::BooleanToStandardBoolean(DBmode));
}

 void OCWNT_Window::Flush()
{
  (*((Handle_WNT_Window*)nativeHandle))->Flush();
}

 void OCWNT_Window::Map()
{
  (*((Handle_WNT_Window*)nativeHandle))->Map();
}

 void OCWNT_Window::Map(Standard_Integer aMapMode)
{
  (*((Handle_WNT_Window*)nativeHandle))->Map(aMapMode);
}

 void OCWNT_Window::Unmap()
{
  (*((Handle_WNT_Window*)nativeHandle))->Unmap();
}

 OCAspect_TypeOfResize OCWNT_Window::DoResize()
{
  return (OCAspect_TypeOfResize)((*((Handle_WNT_Window*)nativeHandle))->DoResize());
}

 System::Boolean OCWNT_Window::DoMapping()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->DoMapping());
}

 void OCWNT_Window::Clear()
{
  (*((Handle_WNT_Window*)nativeHandle))->Clear();
}

 void OCWNT_Window::ClearArea(Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height)
{
  (*((Handle_WNT_Window*)nativeHandle))->ClearArea(Xc, Yc, Width, Height);
}

 void OCWNT_Window::Restore()
{
  (*((Handle_WNT_Window*)nativeHandle))->Restore();
}

 void OCWNT_Window::RestoreArea(Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height)
{
  (*((Handle_WNT_Window*)nativeHandle))->RestoreArea(Xc, Yc, Width, Height);
}

 System::Boolean OCWNT_Window::Dump(System::String^ aFilename, Standard_Real aGammaValue)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->Dump(OCConverter::StringToStandardCString(aFilename), aGammaValue));
}

 System::Boolean OCWNT_Window::DumpArea(System::String^ aFilename, Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height, Standard_Real aGammaValue)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->DumpArea(OCConverter::StringToStandardCString(aFilename), Xc, Yc, Width, Height, aGammaValue));
}

 System::Boolean OCWNT_Window::ToPixMap(Image_PixMap& theImage)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->ToPixMap(theImage));
}

 System::Boolean OCWNT_Window::Load(System::String^ aFilename)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->Load(OCConverter::StringToStandardCString(aFilename)));
}

 System::Boolean OCWNT_Window::LoadArea(System::String^ aFilename, Standard_Integer Xc, Standard_Integer Yc, Standard_Integer Width, Standard_Integer Height)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->LoadArea(OCConverter::StringToStandardCString(aFilename), Xc, Yc, Width, Height));
}

 void OCWNT_Window::SetOutputFormat(OCWNT_TypeOfImage aFormat)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetOutputFormat((WNT_TypeOfImage)aFormat);
}

 void OCWNT_Window::SetPos(Standard_Integer X, Standard_Integer Y, Standard_Integer X1, Standard_Integer Y1)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetPos(X, Y, X1, Y1);
}

 void OCWNT_Window::SetFlags(Standard_Integer aFlags)
{
  (*((Handle_WNT_Window*)nativeHandle))->SetFlags(aFlags);
}

 void OCWNT_Window::ResetFlags(Standard_Integer aFlags)
{
  (*((Handle_WNT_Window*)nativeHandle))->ResetFlags(aFlags);
}

 System::Boolean OCWNT_Window::BackingStore()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->BackingStore());
}

 System::Boolean OCWNT_Window::DoubleBuffer()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->DoubleBuffer());
}

 System::Boolean OCWNT_Window::IsMapped()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_Window*)nativeHandle))->IsMapped());
}

 Quantity_Ratio OCWNT_Window::Ratio()
{
  return (*((Handle_WNT_Window*)nativeHandle))->Ratio();
}

 void OCWNT_Window::Position(Quantity_Parameter& X1, Quantity_Parameter& Y1, Quantity_Parameter& X2, Quantity_Parameter& Y2)
{
  (*((Handle_WNT_Window*)nativeHandle))->Position(X1, Y1, X2, Y2);
}

 void OCWNT_Window::Position(Standard_Integer& X1, Standard_Integer& Y1, Standard_Integer& X2, Standard_Integer& Y2)
{
  (*((Handle_WNT_Window*)nativeHandle))->Position(X1, Y1, X2, Y2);
}

 void OCWNT_Window::Size(Quantity_Parameter& Width, Quantity_Parameter& Height)
{
  (*((Handle_WNT_Window*)nativeHandle))->Size(Width, Height);
}

 void OCWNT_Window::Size(Standard_Integer& Width, Standard_Integer& Height)
{
  (*((Handle_WNT_Window*)nativeHandle))->Size(Width, Height);
}

 void OCWNT_Window::MMSize(Standard_Real& Width, Standard_Real& Height)
{
  (*((Handle_WNT_Window*)nativeHandle))->MMSize(Width, Height);
}

 Quantity_Parameter OCWNT_Window::Convert(Standard_Integer PV)
{
  return (*((Handle_WNT_Window*)nativeHandle))->Convert(PV);
}

 Standard_Integer OCWNT_Window::Convert(Quantity_Parameter DV)
{
  return (*((Handle_WNT_Window*)nativeHandle))->Convert(DV);
}

 void OCWNT_Window::Convert(Standard_Integer PX, Standard_Integer PY, Quantity_Parameter& DX, Quantity_Parameter& DY)
{
  (*((Handle_WNT_Window*)nativeHandle))->Convert(PX, PY, DX, DY);
}

 void OCWNT_Window::Convert(Quantity_Parameter DX, Quantity_Parameter DY, Standard_Integer& PX, Standard_Integer& PY)
{
  (*((Handle_WNT_Window*)nativeHandle))->Convert(DX, DY, PX, PY);
}

 System::IntPtr OCWNT_Window::HWindow()
{
  return System::IntPtr((*((Handle_WNT_Window*)nativeHandle))->HWindow());
}

 System::IntPtr OCWNT_Window::HParentWindow()
{
  return System::IntPtr((*((Handle_WNT_Window*)nativeHandle))->HParentWindow());
}

 System::IntPtr OCWNT_Window::HPixmap()
{
  return System::IntPtr((*((Handle_WNT_Window*)nativeHandle))->HPixmap());
}

 Standard_Address OCWNT_Window::WndProc()
{
  return (*((Handle_WNT_Window*)nativeHandle))->WndProc();
}

OCWNT_ImageManager^ OCWNT_Window::ImageManager()
{
  Handle(WNT_ImageManager) tmp = (*((Handle_WNT_Window*)nativeHandle))->ImageManager();
  return gcnew OCWNT_ImageManager(&tmp);
}


