// File generated by CPPExt (CPP file)
//

#include "WNT_DDriver.h"
#include "../Converter.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "WNT_GraphicDevice.h"
#include "WNT_HColorTable.h"
#include "WNT_HFontTable.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "WNT_HListOfMFTFonts.h"
#include "../TShort/TShort_HArray1OfShortReal.h"
#include "WNT_TextManager.h"
#include "../Standard/Standard_Transient.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../Aspect/Aspect_ColorMap.h"
#include "../Aspect/Aspect_TypeMap.h"
#include "../Aspect/Aspect_WidthMap.h"
#include "../Aspect/Aspect_FontMap.h"
#include "../Aspect/Aspect_MarkMap.h"
#include "../TColStd/TColStd_HSequenceOfAsciiString.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../MFT/MFT_FontManager.h"


using namespace OCNaroWrappers;

OCWNT_DDriver::OCWNT_DDriver(Handle(WNT_DDriver)* nativeHandle) : OCPlotMgt_PlotterDriver((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_WNT_DDriver(*nativeHandle);
}

OCWNT_DDriver::OCWNT_DDriver(System::String^ aDeviceName, System::String^ aFileName, OCWNT_OrientationType anOrientation, Quantity_Factor aScale, Standard_Integer aCopies) : OCPlotMgt_PlotterDriver((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_DDriver(new WNT_DDriver(OCConverter::StringToStandardCString(aDeviceName), OCConverter::StringToStandardCString(aFileName), (WNT_OrientationType)anOrientation, aScale, aCopies));
}

OCWNT_DDriver::OCWNT_DDriver(System::String^ aFileName, Standard_Integer aCopies) : OCPlotMgt_PlotterDriver((OCDummy^)nullptr)

{
  nativeHandle = new Handle_WNT_DDriver(new WNT_DDriver(OCConverter::StringToStandardCString(aFileName), aCopies));
}

 void OCWNT_DDriver::BeginDraw()
{
  (*((Handle_WNT_DDriver*)nativeHandle))->BeginDraw();
}

 void OCWNT_DDriver::EndDraw(System::Boolean fSynchronize)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->EndDraw(OCConverter::BooleanToStandardBoolean(fSynchronize));
}

 System::Boolean OCWNT_DDriver::Spool(OCAspect_PlotMode aPlotMode, System::String^ aDeviceName, System::Boolean anOriginalSize)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_DDriver*)nativeHandle))->Spool((Aspect_PlotMode)aPlotMode, OCConverter::StringToStandardCString(aDeviceName), OCConverter::BooleanToStandardBoolean(anOriginalSize)));
}

 void OCWNT_DDriver::SetLineAttrib(Standard_Integer ColorIndex, Standard_Integer TypeIndex, Standard_Integer WidthIndex)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->SetLineAttrib(ColorIndex, TypeIndex, WidthIndex);
}

 void OCWNT_DDriver::SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->SetTextAttrib(ColorIndex, FontIndex);
}

 void OCWNT_DDriver::SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex, Quantity_PlaneAngle aSlant, Quantity_Factor aHScale, Quantity_Factor aWScale, System::Boolean isUnderlined)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->SetTextAttrib(ColorIndex, FontIndex, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined));
}

 void OCWNT_DDriver::SetPolyAttrib(Standard_Integer ColorIndex, Standard_Integer TileIndex, System::Boolean DrawEdge)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->SetPolyAttrib(ColorIndex, TileIndex, OCConverter::BooleanToStandardBoolean(DrawEdge));
}

 void OCWNT_DDriver::SetMarkerAttrib(Standard_Integer ColorIndex, Standard_Integer WidthIndex, System::Boolean FillMarker)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->SetMarkerAttrib(ColorIndex, WidthIndex, OCConverter::BooleanToStandardBoolean(FillMarker));
}

 System::Boolean OCWNT_DDriver::IsKnownImage(OCNaroWrappers::OCStandard_Transient^ anImage)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_DDriver*)nativeHandle))->IsKnownImage(*((Handle_Standard_Transient*)anImage->Handle)));
}

 System::Boolean OCWNT_DDriver::SizeOfImageFile(System::String^ anImageFile, Standard_Integer& aWidth, Standard_Integer& aHeight)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_WNT_DDriver*)nativeHandle))->SizeOfImageFile(OCConverter::StringToStandardCString(anImageFile), aWidth, aHeight));
}

 void OCWNT_DDriver::ClearImage(OCNaroWrappers::OCStandard_Transient^ anImageId)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->ClearImage(*((Handle_Standard_Transient*)anImageId->Handle));
}

 void OCWNT_DDriver::ClearImageFile(System::String^ anImageFile)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->ClearImageFile(OCConverter::StringToStandardCString(anImageFile));
}

 void OCWNT_DDriver::DrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->DrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY);
}

 void OCWNT_DDriver::DrawImageFile(System::String^ anImageFile, Standard_ShortReal aX, Standard_ShortReal aY, Quantity_Factor aScale)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->DrawImageFile(OCConverter::StringToStandardCString(anImageFile), aX, aY, aScale);
}

 void OCWNT_DDriver::FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->FillAndDrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY, aWidth, aHeight, anArrayOfPixels);
}

 void OCWNT_DDriver::FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer anIndexOfLine, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->FillAndDrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY, anIndexOfLine, aWidth, aHeight, anArrayOfPixels);
}

 void OCWNT_DDriver::BeginPolyline(Standard_Integer aNumber)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->BeginPolyline(aNumber);
}

 void OCWNT_DDriver::BeginPolygon(Standard_Integer aNumber)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->BeginPolygon(aNumber);
}

 void OCWNT_DDriver::BeginSegments()
{
  (*((Handle_WNT_DDriver*)nativeHandle))->BeginSegments();
}

 void OCWNT_DDriver::BeginArcs()
{
  (*((Handle_WNT_DDriver*)nativeHandle))->BeginArcs();
}

 void OCWNT_DDriver::BeginPolyArcs()
{
  (*((Handle_WNT_DDriver*)nativeHandle))->BeginPolyArcs();
}

 void OCWNT_DDriver::BeginMarkers()
{
  (*((Handle_WNT_DDriver*)nativeHandle))->BeginMarkers();
}

 void OCWNT_DDriver::BeginPoints()
{
  (*((Handle_WNT_DDriver*)nativeHandle))->BeginPoints();
}

 void OCWNT_DDriver::ClosePrimitive()
{
  (*((Handle_WNT_DDriver*)nativeHandle))->ClosePrimitive();
}

 void OCWNT_DDriver::WorkSpace(Quantity_Length& Width, Quantity_Length& Heigth)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->WorkSpace(Width, Heigth);
}

 Quantity_Length OCWNT_DDriver::Convert(Standard_Integer PV)
{
  return (*((Handle_WNT_DDriver*)nativeHandle))->Convert(PV);
}

 Standard_Integer OCWNT_DDriver::Convert(Quantity_Length DV)
{
  return (*((Handle_WNT_DDriver*)nativeHandle))->Convert(DV);
}

 void OCWNT_DDriver::Convert(Standard_Integer PX, Standard_Integer PY, Quantity_Length& DX, Quantity_Length& DY)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->Convert(PX, PY, DX, DY);
}

 void OCWNT_DDriver::Convert(Quantity_Length DX, Quantity_Length DY, Standard_Integer& PX, Standard_Integer& PY)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->Convert(DX, DY, PX, PY);
}

 void OCWNT_DDriver::TextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_Integer aFontIndex)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->TextSize(*((TCollection_ExtendedString*)aText->Handle), aWidth, aHeight, aFontIndex);
}

 void OCWNT_DDriver::TextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_ShortReal& anXoffset, Standard_ShortReal& anYoffset, Standard_Integer aFontIndex)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->TextSize(*((TCollection_ExtendedString*)aText->Handle), aWidth, aHeight, anXoffset, anYoffset, aFontIndex);
}

 void OCWNT_DDriver::TextSize(System::String^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_ShortReal& anXoffset, Standard_ShortReal& anYoffset, Standard_Integer aFontIndex)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->TextSize(OCConverter::StringToStandardCString(aText), aWidth, aHeight, anXoffset, anYoffset, aFontIndex);
}

 System::IntPtr OCWNT_DDriver::HDC()
{
  return System::IntPtr((*((Handle_WNT_DDriver*)nativeHandle))->HDC());
}

 void OCWNT_DDriver::ClientRect(Standard_Integer& aWidth, Standard_Integer& aHeigth)
{
  (*((Handle_WNT_DDriver*)nativeHandle))->ClientRect(aWidth, aHeigth);
}

OCWNT_GraphicDevice^ OCWNT_DDriver::GraphicDevice()
{
  Handle(WNT_GraphicDevice) tmp = (*((Handle_WNT_DDriver*)nativeHandle))->GraphicDevice();
  return gcnew OCWNT_GraphicDevice(&tmp);
}

OCTColStd_HSequenceOfAsciiString^ OCWNT_DDriver::DeviceList()
{
  Handle(TColStd_HSequenceOfAsciiString) tmp = WNT_DDriver::DeviceList();
  return gcnew OCTColStd_HSequenceOfAsciiString(&tmp);
}

 void OCWNT_DDriver::DeviceSize(OCNaroWrappers::OCTCollection_AsciiString^ aDevice, Standard_Real& aWidth, Standard_Real& aHeight)
{
  WNT_DDriver::DeviceSize(*((TCollection_AsciiString*)aDevice->Handle), aWidth, aHeight);
}

 Standard_Real OCWNT_DDriver::EMFDim(Standard_Integer& aWidth, Standard_Integer& aHeight, Standard_Integer& aSwap)
{
  return (*((Handle_WNT_DDriver*)nativeHandle))->EMFDim(aWidth, aHeight, aSwap);
}

OCWNT_TextManager^ OCWNT_DDriver::TextManager()
{
  Handle(WNT_TextManager) tmp = (*((Handle_WNT_DDriver*)nativeHandle))->TextManager();
  return gcnew OCWNT_TextManager(&tmp);
}

OCMFT_FontManager^ OCWNT_DDriver::MFT_Font(Standard_Integer anIndex)
{
  Handle(MFT_FontManager) tmp = (*((Handle_WNT_DDriver*)nativeHandle))->MFT_Font(anIndex);
  return gcnew OCMFT_FontManager(&tmp);
}

 Standard_ShortReal OCWNT_DDriver::MFT_Size(Standard_Integer anIndex)
{
  return (*((Handle_WNT_DDriver*)nativeHandle))->MFT_Size(anIndex);
}


