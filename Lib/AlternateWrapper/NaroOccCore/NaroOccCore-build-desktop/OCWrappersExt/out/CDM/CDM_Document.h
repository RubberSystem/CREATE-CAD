// File generated by CPPExt (Transient)
//
#ifndef _CDM_Document_OCWrappers_HeaderFile
#define _CDM_Document_OCWrappers_HeaderFile

// include the wrapped class
#include <CDM_Document.hxx>
#include "../Converter.h"

#include "../Standard/Standard_Transient.h"

#include "../TColStd/TColStd_SequenceOfExtendedString.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "CDM_ListOfReferences.h"
#include "../Standard/Standard_GUID.h"
#include "CDM_CanCloseStatus.h"


namespace OCNaroWrappers
{

ref class OCCDM_MetaData;
ref class OCCDM_Application;
ref class OCStandard_Failure;
ref class OCCDM_Reference;
ref class OCCDM_ReferenceIterator;
ref class OCTCollection_ExtendedString;
ref class OCTColStd_SequenceOfExtendedString;
ref class OCResource_Manager;
ref class OCStandard_GUID;


//! An applicative document is an instance of a class inheriting CDM_Document. <br>
//!          These documents have the following properties: <br>
//!        - they can have references to other documents. <br>
//!        - the modifications of a document are propagated to the referencing <br>
//!          documents. <br>
//!        - a  document can be   stored in different formats, with  or <br>
//!          without a persistent model. <br>
//!        - the drivers  for  storing  and retrieving documents  are <br>
//!          plugged in when necessary. <br>
//!        - a  document has a modification counter. This counter is <br>
//!          incremented when the document is  modified.  When a document <br>
//!          is stored,  the current  counter  value is memorized as the <br>
//!          last storage  version of the   document.  A document  is <br>
//!          considered to be  modified   when the  counter value  is <br>
//!          different from the storage version.  Once  the document is <br>
//!          saved  the storage  version  and the  counter  value are <br>
//!          identical.  The document  is  now  not considered  to  be <br>
//!          modified. <br>
//!        - a reference is a link between two documents. A reference has two <br>
//!          components: the "From Document" and the "To Document". When <br>
//!          a reference is created, an identifier of the reference is generated. <br>
//!          This identifier is unique in the scope of the From Document and <br>
//!          is conserved during storage and retrieval. This means that the <br>
//!          referenced document will be always accessible through this <br>
//!          identifier. <br>
//!        - a reference memorizes the counter value of the To Document when <br>
//!          the reference is created. The From Document is considered to <br>
//!          be up to date relative to the To Document when the <br>
//!          reference counter value is equal to the To Document counter value. <br>
//!        -  retrieval of a document  having references does not imply <br>
//!           the retrieving of the referenced documents. <br>
public ref class OCCDM_Document : OCStandard_Transient {

protected:
  // dummy constructor;
  OCCDM_Document(OCDummy^) : OCStandard_Transient((OCDummy^)nullptr) {};

public:

// constructor from native
OCCDM_Document(Handle(CDM_Document)* nativeHandle);

// Methods PUBLIC


OCCDM_Document();

//! The Update  method  will be called  once  for each <br>
//!          reference, but it  should not perform any computation, <br>
//!          to avoid multiple computation of a same document. <br>
virtual /*instead*/  void Update(OCNaroWrappers::OCCDM_Document^ aToDocument, Standard_Integer aReferenceIdentifier, Standard_Address aModifContext) ;

//! This method Update   will be called <br>
//!          to signal the end   of the modified references list. <br>
//!          The    document     should    be  recomputed     and <br>
//!          UpdateFromDocuments  should be called.  Update should <br>
//!          returns True in case  of success, false otherwise.  In <br>
//!          case of Failure, additional information can be given in <br>
//!          ErrorString. <br>
virtual /*instead*/  System::Boolean Update(OCNaroWrappers::OCTCollection_ExtendedString^ ErrorString) ;

//! by default empties the extensions. <br>
//! <br>
virtual /*instead*/  void Extensions(OCNaroWrappers::OCTColStd_SequenceOfExtendedString^ Extensions) ;

//! This method can be redefined to extract another document in <br>
//!           a different format. For example, to extract a MDTV-Shape <br>
//!           from an applicative document. <br>
virtual /*instead*/  System::Boolean GetAlternativeDocument(OCNaroWrappers::OCTCollection_ExtendedString^ aFormat, OCNaroWrappers::OCCDM_Document^ anAlternativeDocument) ;

//! Creates a reference from this document to {anOtherDocument}. <br>
//!          Returns a reference identifier. This reference identifier <br>
//!          is unique in the document and will not be used for the <br>
//!           next references, even after the storing of the document. <br>
//!           If there is already a reference between the two documents, <br>
//!           the reference is not created, but its reference identifier <br>
//!           is returned. <br>
 /*instead*/  Standard_Integer CreateReference(OCNaroWrappers::OCCDM_Document^ anOtherDocument) ;

//! Removes the reference between the From Document and the <br>
//!          To Document identified by a reference identifier. <br>
 /*instead*/  void RemoveReference(Standard_Integer aReferenceIdentifier) ;

//! Removes all references having this document for From Document. <br>
 /*instead*/  void RemoveAllReferences() ;

//!  Returns the To Document  of the reference identified by <br>
//!           aReferenceIdentifier. If the ToDocument is stored and <br>
//!           has not yet been retrieved, this method will retrieve it. <br>
 /*instead*/  OCCDM_Document^ Document(Standard_Integer aReferenceIdentifier) ;

//!   returns True if   the  To Document of the  reference <br>
//!          identified by aReferenceIdentifier is in session,  False <br>
//!          if it corresponds to a not yet retrieved document. <br>
 /*instead*/  System::Boolean IsInSession(Standard_Integer aReferenceIdentifier) ;

//!   returns True if   the  To Document of the  reference <br>
//!          identified by aReferenceIdentifier has already been stored, <br>
//!          False  otherwise. <br>
 /*instead*/  System::Boolean IsStored(Standard_Integer aReferenceIdentifier) ;

//! returns the name of the metadata of the To Document of <br>
//!          the reference identified by aReferenceIdentifier. <br>
 /*instead*/  OCTCollection_ExtendedString^ Name(Standard_Integer aReferenceIdentifier) ;

//!  call  virtual  method   Update  on  all   referencing <br>
//!             documents.   This method keeps  the list  of the -- <br>
//!            documents  to process.It may  be the starting of an <br>
//!              update -- cycle. If  not,  the reentrant calls made by <br>
//!            Update  method (without argument)  will append the <br>
//!            referencing documents to the list and call the Update method <br>
//!            (with arguments). Only the first call to UpdateFromDocuments <br>
//!            generate call to Update(). <br>
 /*instead*/  void UpdateFromDocuments(Standard_Address aModifContext) ;

//! returns the number of references having this document as <br>
//!          From Document. <br>
 /*instead*/  Standard_Integer ToReferencesNumber() ;

//! returns the number of references having this document as <br>
//!          To Document. <br>
 /*instead*/  Standard_Integer FromReferencesNumber() ;

//! returns True is this document references aDocument; <br>
//! <br>
 /*instead*/  System::Boolean ShallowReferences(OCNaroWrappers::OCCDM_Document^ aDocument) ;

//! returns True is this document references aDocument; <br>
//! <br>
 /*instead*/  System::Boolean DeepReferences(OCNaroWrappers::OCCDM_Document^ aDocument) ;

//! Copies a  reference  to  this document.   This  method <br>
//!          avoid retrieval of referenced document.  The arguments <br>
//!          are  the  original  document  and a  valid  reference <br>
//!          identifier Returns the  local identifier. <br>
//! <br>
 /*instead*/  Standard_Integer CopyReference(OCNaroWrappers::OCCDM_Document^ aFromDocument, Standard_Integer aReferenceIdentifier) ;

//! indicates  that  this document cannot be   modified. <br>
 /*instead*/  System::Boolean IsReadOnly() ;

//! indicates that the referenced document cannot be modified, <br>
 /*instead*/  System::Boolean IsReadOnly(Standard_Integer aReferenceIdentifier) ;


 /*instead*/  void SetIsReadOnly() ;


 /*instead*/  void UnsetIsReadOnly() ;

//! Indicates that this document has been modified. <br>
//!          This method increments the modification counter. <br>
//! <br>
 /*instead*/  void Modify() ;

//! returns the current modification counter. <br>
 /*instead*/  Standard_Integer Modifications() ;


 /*instead*/  void UnModify() ;

//! returns true if the modification counter found in the given <br>
//!          reference is equal to the actual modification counter of <br>
//!          the To Document. This method is able to deal with a reference <br>
//!          to a not retrieved document. <br>
 /*instead*/  System::Boolean IsUpToDate(Standard_Integer aReferenceIdentifier) ;

//! Resets the modification counter in the given reference <br>
//!          to the actual modification counter of its To Document. <br>
//!          This method should be called after the application has updated <br>
//!          this document. <br>
 /*instead*/  void SetIsUpToDate(Standard_Integer aReferenceIdentifier) ;

//! associates a comment with this document. <br>
 /*instead*/  void SetComment(OCNaroWrappers::OCTCollection_ExtendedString^ aComment) ;

//! appends a comment into comments of this document. <br>
 /*instead*/  void AddComment(OCNaroWrappers::OCTCollection_ExtendedString^ aComment) ;

//! associates a comments with this document. <br>
 /*instead*/  void SetComments(OCNaroWrappers::OCTColStd_SequenceOfExtendedString^ aComments) ;

//! returns the associated comments through <aComments>. <br>
//!          Returns empty sequence if no comments are associated. <br>
 /*instead*/  void Comments(OCNaroWrappers::OCTColStd_SequenceOfExtendedString^ aComments) ;

//! returns the first of associated comments. By defaut <br>
//!          the comment is an empty string. <br>
 /*instead*/  System::String^ Comment() ;

//! Returns an alphanumeric string identifying this document <br>
//!          in a unique manner in the current process. The presentation <br>
//!          may change when the document is stored. <br>
//!          Tries to get the 'FileFormat`.Presentation resource <br>
//!          This item is used to give a default presentation <br>
//!          to the document. <br>
 /*instead*/  System::String^ Presentation() ;

//! returns the document having the given alphanumeric presentation. <br>
static /*instead*/  OCCDM_Document^ FindFromPresentation(OCNaroWrappers::OCTCollection_ExtendedString^ aPresentation) ;

//! indicates whether a document having the given presentation <br>
//!          does exist. <br>
static /*instead*/  System::Boolean FindPresentation(OCNaroWrappers::OCTCollection_ExtendedString^ aPresentation) ;


 /*instead*/  System::Boolean IsStored() ;

//! returns  the value of  the modification counter at the <br>
//!          time of storage. By default returns 0. <br>
 /*instead*/  Standard_Integer StorageVersion() ;

//!  associates database  information to  a document which <br>
//!          has been stored.  The name of the  document is now the <br>
//!          name which has beenused to store the data. <br>
 /*instead*/  void SetMetaData(OCNaroWrappers::OCCDM_MetaData^ aMetaData) ;


 /*instead*/  void UnsetIsStored() ;


 /*instead*/  OCCDM_MetaData^ MetaData() ;


 /*instead*/  OCTCollection_ExtendedString^ Folder() ;

//! defines the folder in which the object should be stored. <br>
 /*instead*/  void SetRequestedFolder(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder) ;


 /*instead*/  OCTCollection_ExtendedString^ RequestedFolder() ;


 /*instead*/  System::Boolean HasRequestedFolder() ;

//! defines the name under which the object should be stored. <br>
 /*instead*/  void SetRequestedName(OCNaroWrappers::OCTCollection_ExtendedString^ aName) ;

//! determines  under  which the document  is  going to be <br>
//!           store.  By default the name of the document wil be -- <br>
//!           used.  If the document has  no name  its presentation <br>
//!           will be used. <br>
 /*instead*/  OCTCollection_ExtendedString^ RequestedName() ;


 /*instead*/  void SetRequestedPreviousVersion(OCNaroWrappers::OCTCollection_ExtendedString^ aPreviousVersion) ;


 /*instead*/  void UnsetRequestedPreviousVersion() ;


 /*instead*/  System::Boolean HasRequestedPreviousVersion() ;


 /*instead*/  OCTCollection_ExtendedString^ RequestedPreviousVersion() ;

//! defines the Comment with  which the object should be stored. <br>
 /*instead*/  void SetRequestedComment(OCNaroWrappers::OCTCollection_ExtendedString^ aComment) ;


 /*instead*/  OCTCollection_ExtendedString^ RequestedComment() ;

//! read (or rereads) the following resource. <br>
 /*instead*/  void LoadResources() ;


 /*instead*/  System::Boolean FindFileExtension() ;

//! gets the Desktop.Domain.Application.`FileFormat`.FileExtension resource. <br>
 /*instead*/  OCTCollection_ExtendedString^ FileExtension() ;


 /*instead*/  System::Boolean FindDataType() ;

//! this datatype will be used if the DBMS deals with this concept <br>//! gets the `FileFormat`.DataType resource. <br>
//!          concept. <br>
 /*instead*/  OCTCollection_ExtendedString^ DataType() ;


 /*instead*/  System::Boolean FindVersionDataType() ;

//! this datatype will be used if the DBMS deals with this concept <br>//! gets the `FileFormat`.VersionDataType resource. <br>
//! <br>
 /*instead*/  OCTCollection_ExtendedString^ VersionDataType() ;


 /*instead*/  System::Boolean FindDescription() ;

//! gets the `FileFormat`.Description resource. <br>
 /*instead*/  OCTCollection_ExtendedString^ Description() ;


 /*instead*/  System::Boolean FindDomain() ;

//! gets the `FileFormat`.Domain resource. <br>
 /*instead*/  OCTCollection_ExtendedString^ Domain() ;


 /*instead*/  System::Boolean FindStoragePlugin() ;


 /*instead*/  OCStandard_GUID^ StoragePlugin() ;

//! returns  true  if the   version is greater  than   the <br>
//!          storage version <br>
 /*instead*/  System::Boolean IsModified() ;


 /*instead*/  Standard_OStream& Print(Standard_OStream& anOStream) ;


 /*instead*/  System::Boolean IsOpened() ;


 /*instead*/  void Open(OCNaroWrappers::OCCDM_Application^ anApplication) ;


 /*instead*/  OCCDM_CanCloseStatus CanClose() ;


 /*instead*/  void Close() ;


 /*instead*/  OCCDM_Application^ Application() ;

//! A  referenced  document  may  indicate   through  this <br>
//!          virtual  method that it does  not allow the closing of <br>
//!          aDocument  which  it references through  the reference <br>
//!          aReferenceIdentifier. By default returns Standard_True;; <br>
virtual /*instead*/  System::Boolean CanCloseReference(OCNaroWrappers::OCCDM_Document^ aDocument, Standard_Integer aReferenceIdentifier) ;

//! A referenced document may update its internal <br>
//!          data structure when {aDocument} which it references <br>
//!          through the reference {aReferenceIdentifier} is being closed. <br>
//!          By default this method does nothing. <br>
virtual /*instead*/  void CloseReference(OCNaroWrappers::OCCDM_Document^ aDocument, Standard_Integer aReferenceIdentifier) ;

//!  returns true if  the   document corresponding to  the <br>
//!           given   reference has    been retrieved  and  opened. <br>
//!          Otherwise returns false. This method does not retrieve <br>
//!          the referenced document <br>
 /*instead*/  System::Boolean IsOpened(Standard_Integer aReferenceIdentifier) ;


 /*instead*/  void CreateReference(OCNaroWrappers::OCCDM_MetaData^ aMetaData, Standard_Integer aReferenceIdentifier, OCNaroWrappers::OCCDM_Application^ anApplication, Standard_Integer aToDocumentVersion, System::Boolean UseStorageConfiguration) ;


 /*instead*/  Standard_Integer CreateReference(OCNaroWrappers::OCCDM_MetaData^ aMetaData, OCNaroWrappers::OCCDM_Application^ anApplication, Standard_Integer aDocumentVersion, System::Boolean UseStorageConfiguration) ;


 /*instead*/  Standard_Integer ReferenceCounter() ;

//! the following method should be used instead: <br>
//! <br>
//!  Update(me:mutable; ErrorString: out ExtendedString from TCollection) <br>
//!  returns Boolean from Standard <br>
virtual /*instead*/  void Update() ;

~OCCDM_Document()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
