// File generated by CPPExt (CPP file)
//

#include "CDM_MetaData.h"
#include "../Converter.h"
#include "CDM_Reference.h"
#include "CDM_Document.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "CDM_MetaDataLookUpTable.h"
#include "CDM_Application.h"


using namespace OCNaroWrappers;

OCCDM_MetaData::OCCDM_MetaData(Handle(CDM_MetaData)* nativeHandle) : OCStandard_Transient((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_CDM_MetaData(*nativeHandle);
}

OCCDM_MetaData^ OCCDM_MetaData::LookUp(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName, OCNaroWrappers::OCTCollection_ExtendedString^ aPath, OCNaroWrappers::OCTCollection_ExtendedString^ aFileName, System::Boolean ReadOnly)
{
  Handle(CDM_MetaData) tmp = CDM_MetaData::LookUp(*((TCollection_ExtendedString*)aFolder->Handle), *((TCollection_ExtendedString*)aName->Handle), *((TCollection_ExtendedString*)aPath->Handle), *((TCollection_ExtendedString*)aFileName->Handle), OCConverter::BooleanToStandardBoolean(ReadOnly));
  return gcnew OCCDM_MetaData(&tmp);
}

OCCDM_MetaData^ OCCDM_MetaData::LookUp(OCNaroWrappers::OCTCollection_ExtendedString^ aFolder, OCNaroWrappers::OCTCollection_ExtendedString^ aName, OCNaroWrappers::OCTCollection_ExtendedString^ aPath, OCNaroWrappers::OCTCollection_ExtendedString^ aVersion, OCNaroWrappers::OCTCollection_ExtendedString^ aFileName, System::Boolean ReadOnly)
{
  Handle(CDM_MetaData) tmp = CDM_MetaData::LookUp(*((TCollection_ExtendedString*)aFolder->Handle), *((TCollection_ExtendedString*)aName->Handle), *((TCollection_ExtendedString*)aPath->Handle), *((TCollection_ExtendedString*)aVersion->Handle), *((TCollection_ExtendedString*)aFileName->Handle), OCConverter::BooleanToStandardBoolean(ReadOnly));
  return gcnew OCCDM_MetaData(&tmp);
}

 System::Boolean OCCDM_MetaData::IsRetrieved()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_CDM_MetaData*)nativeHandle))->IsRetrieved());
}

OCCDM_Document^ OCCDM_MetaData::Document()
{
  Handle(CDM_Document) tmp = (*((Handle_CDM_MetaData*)nativeHandle))->Document();
  return gcnew OCCDM_Document(&tmp);
}

OCTCollection_ExtendedString^ OCCDM_MetaData::Folder()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_CDM_MetaData*)nativeHandle))->Folder();
  return gcnew OCTCollection_ExtendedString(tmp);
}

OCTCollection_ExtendedString^ OCCDM_MetaData::Name()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_CDM_MetaData*)nativeHandle))->Name();
  return gcnew OCTCollection_ExtendedString(tmp);
}

OCTCollection_ExtendedString^ OCCDM_MetaData::Version()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_CDM_MetaData*)nativeHandle))->Version();
  return gcnew OCTCollection_ExtendedString(tmp);
}

 System::Boolean OCCDM_MetaData::HasVersion()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_CDM_MetaData*)nativeHandle))->HasVersion());
}

OCTCollection_ExtendedString^ OCCDM_MetaData::FileName()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_CDM_MetaData*)nativeHandle))->FileName();
  return gcnew OCTCollection_ExtendedString(tmp);
}

 Standard_OStream& OCCDM_MetaData::Print(Standard_OStream& anOStream)
{
  return (*((Handle_CDM_MetaData*)nativeHandle))->Print(anOStream);
}

OCTCollection_ExtendedString^ OCCDM_MetaData::Path()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_CDM_MetaData*)nativeHandle))->Path();
  return gcnew OCTCollection_ExtendedString(tmp);
}

 void OCCDM_MetaData::UnsetDocument()
{
  (*((Handle_CDM_MetaData*)nativeHandle))->UnsetDocument();
}

 System::Boolean OCCDM_MetaData::IsReadOnly()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_CDM_MetaData*)nativeHandle))->IsReadOnly());
}

 void OCCDM_MetaData::SetIsReadOnly()
{
  (*((Handle_CDM_MetaData*)nativeHandle))->SetIsReadOnly();
}

 void OCCDM_MetaData::UnsetIsReadOnly()
{
  (*((Handle_CDM_MetaData*)nativeHandle))->UnsetIsReadOnly();
}


