// File generated by CPPExt (Transient)
//
#ifndef _AIS_TexturedShape_OCWrappers_HeaderFile
#define _AIS_TexturedShape_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_TexturedShape.hxx>
#include "../Converter.h"

#include "AIS_Shape.h"

#include "../Graphic3d/Graphic3d_NameOfTexture2D.h"
#include "../TCollection/TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCGraphic3d_AspectFillArea3d;
ref class OCGraphic3d_Texture2Dmanual;
ref class OCTopoDS_Shape;
ref class OCTCollection_AsciiString;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;


//! This class allows to map textures on shapes <br>
//!  Textures are image files. <br>
//!   The texture itself is parametrized in (0,1)x(0,1). <br>
//!  Each face of a shape located in <br>
//! UV space is provided with these parameters: <br>
//!    -      Umin - starting position in U <br>
//!    -      Umax - ending position in U <br>
//!    -      Vmin - starting position in V <br>
//!    -      Vmax - ending position in V <br>
//!  Each face is triangulated and a texel is assigned to each <br>
//!  node. Facets are then filled using a linear interpolation <br>
//!  of texture between each 'three texels' <br>
//!  User can act on : <br>
//!  - the number of occurences of the texture on the face <br>
//!  - the position of the origin of the texture <br>
//!  - the scale factor of the texture <br>
public ref class OCAIS_TexturedShape : OCAIS_Shape {

protected:
  // dummy constructor;
  OCAIS_TexturedShape(OCDummy^) : OCAIS_Shape((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_TexturedShape(Handle(AIS_TexturedShape)* nativeHandle);

// Methods PUBLIC

//!      Initializes the textured shape ashape. <br>
OCAIS_TexturedShape(OCNaroWrappers::OCTopoDS_Shape^ shap);

//! Sets the name of the texture file to map. The accepted <br>
//!      file types are those used in AlienImage with extensions <br>
//!      such as xwd, bmp, gif, rgb, ras, rs and more. <br>
virtual /*instead*/  void SetTextureFileName(OCNaroWrappers::OCTCollection_AsciiString^ TextureFileName) ;

//! Sets the number of occurrences of <br>
//! the texture on each face. The texture itself is parameterized <br>
//! in (0,1) by (0,1) . Each face of the shape to be textured is <br>
//! parameterized in UV space (Umin,Umax) by (Vmin,Vmax). If <br>
//! RepeatYN is set to false, texture coordinates are clamped in the <br>
//! range (0,1)x(0,1) of the face. <br>
virtual /*instead*/  void SetTextureRepeat(System::Boolean RepeatYN, Standard_Real URepeat, Standard_Real VRepeat) ;

//! Use this method to change the origin of the <br>
//!         texture. The texel (0,0) will be mapped to the <br>
//!         surfel (UOrigin,VOrigin) <br>
virtual /*instead*/  void SetTextureOrigin(System::Boolean SetTextureOriginYN, Standard_Real UOrigin, Standard_Real VOrigin) ;

//! Use this method to scale the texture (percent of <br>
//!         the face). <br>
//!         You can specify a scale factor for both U and V. <br>
//! <br>
//!         example : if you set ScaleU and ScaleV to 0.5 and <br>
//!         you enable texture repeat, the texture will appear <br>
//!         twice on the face in each direction. <br>
virtual /*instead*/  void SetTextureScale(System::Boolean SetTextureScaleYN, Standard_Real ScaleU, Standard_Real ScaleV) ;

//! Use this method to show the triangulation of <br>
//!         the shape. This is not very esthetic but can be <br>
//!         usefull for debug ... <br>
virtual /*instead*/  void ShowTriangles(System::Boolean ShowTrianglesYN) ;

//! Enables texture mapping <br>
 /*instead*/  void SetTextureMapOn() ;

//! Disables texture mapping <br>
 /*instead*/  void SetTextureMapOff() ;

//! Enables texture modulation <br>
 /*instead*/  void EnableTextureModulate() ;

//! Disables texture modulation <br>
 /*instead*/  void DisableTextureModulate() ;

//! Use this method to display the textured shape <br>
//!         without recomputing the whole presentation. <br>
//!         Use this method when ONLY the texture has been changed. <br>
//!         ie : myTShape->UpdateAttributes() <br>
//! <br>
//!         If other parameters (ie: scale factors, <br>
//!         texture origin, texture repeat ...) have changed, <br>
//!         the whole presentation has to be recomputed. <br>
//!         ie : if (myShape->DisplayMode() == 3) <br>
//!	    	       myAISContext->RecomputePrsOnly(myShape); <br>
//!	    	    else <br>
//!	    	       { <br>
//!	    	         myAISContext->SetDisplayMode(myShape,3,Standard_False); <br>
//!	                 myAISContext->Display(myShape, Standard_True); <br>
//!	               } <br>
 /*instead*/  void UpdateAttributes() ;


 /*instead*/  System::Boolean TextureMapState() ;


 /*instead*/  Standard_Real URepeat() ;


 /*instead*/  System::Boolean TextureRepeat() ;


 /*instead*/  Standard_Real Deflection() ;


 /*instead*/  System::String^ TextureFile() ;


 /*instead*/  Standard_Real VRepeat() ;


 /*instead*/  System::Boolean ShowTriangles() ;


 /*instead*/  Standard_Real TextureUOrigin() ;


 /*instead*/  Standard_Real TextureVOrigin() ;


 /*instead*/  Standard_Real TextureScaleU() ;


 /*instead*/  Standard_Real TextureScaleV() ;


 /*instead*/  System::Boolean TextureScale() ;


 /*instead*/  System::Boolean TextureOrigin() ;


 /*instead*/  System::Boolean TextureModulate() ;

~OCAIS_TexturedShape()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
