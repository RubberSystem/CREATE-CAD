// File generated by CPPExt (Transient)
//
#ifndef _AIS_Triangulation_OCWrappers_HeaderFile
#define _AIS_Triangulation_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_Triangulation.hxx>
#include "../Converter.h"

#include "AIS_InteractiveObject.h"



namespace OCNaroWrappers
{

ref class OCPoly_Triangulation;
ref class OCTColStd_HArray1OfInteger;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCSelectMgr_Selection;


//! Interactive object that draws data from  Poly_Triangulation, optionally with colors associated <br>
//!          with each triangulation vertex. For maximum efficiency colors are represented as 32-bit integers <br>
//!          instead of classic Quantity_Color values. <br>
//!          Interactive selection of triangles and vertices is not yet implemented. <br>
public ref class OCAIS_Triangulation : OCAIS_InteractiveObject {

protected:
  // dummy constructor;
  OCAIS_Triangulation(OCDummy^) : OCAIS_InteractiveObject((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_Triangulation(Handle(AIS_Triangulation)* nativeHandle);

// Methods PUBLIC

//! Constructs the Triangulation display object <br>
OCAIS_Triangulation(OCNaroWrappers::OCPoly_Triangulation^ aTriangulation);


//! Set the color for each node. <br>
//! Each 32-bit color is Alpha << 24 + Blue << 16 + Green << 8 + Red <br>
//! Order of color components is essential for further usage by OpenGL <br>
 /*instead*/  void SetColors(OCNaroWrappers::OCTColStd_HArray1OfInteger^ aColor) ;


//! Get the color for each node. <br>
//! Each 32-bit color is Alpha << 24 + Blue << 16 + Green << 8 + Red <br>
 /*instead*/  OCTColStd_HArray1OfInteger^ GetColors() ;


 /*instead*/  void SetTriangulation(OCNaroWrappers::OCPoly_Triangulation^ aTriangulation) ;

//! Returns Poly_Triangulation . <br>
 /*instead*/  OCPoly_Triangulation^ GetTriangulation() ;

~OCAIS_Triangulation()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
