// File generated by CPPExt (CPP file)
//

#include "AIS_AngleDimension.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../Geom/Geom_Plane.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../gp/gp_Pnt.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../gp/gp_Ax1.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../PrsMgr/PrsMgr_PresentationManager3d.h"
#include "../Prs3d/Prs3d_Presentation.h"
#include "../Prs3d/Prs3d_Projector.h"
#include "../PrsMgr/PrsMgr_PresentationManager2d.h"
#include "../Graphic2d/Graphic2d_GraphicObject.h"
#include "../Geom/Geom_Transformation.h"
#include "../SelectMgr/SelectMgr_Selection.h"
#include "../Geom/Geom_Line.h"


using namespace OCNaroWrappers;

OCAIS_AngleDimension::OCAIS_AngleDimension(Handle(AIS_AngleDimension)* nativeHandle) : OCAIS_Relation((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AIS_AngleDimension(*nativeHandle);
}

OCAIS_AngleDimension::OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Edge^ aFirstEdge, OCNaroWrappers::OCTopoDS_Edge^ aSecondEdge, OCNaroWrappers::OCGeom_Plane^ aPlane, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText) : OCAIS_Relation((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_AngleDimension(new AIS_AngleDimension(*((TopoDS_Edge*)aFirstEdge->Handle), *((TopoDS_Edge*)aSecondEdge->Handle), *((Handle_Geom_Plane*)aPlane->Handle), aVal, *((TCollection_ExtendedString*)aText->Handle)));
}

OCAIS_AngleDimension::OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Edge^ aFirstEdge, OCNaroWrappers::OCTopoDS_Edge^ aSecondEdge, OCNaroWrappers::OCGeom_Plane^ aPlane, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize) : OCAIS_Relation((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_AngleDimension(new AIS_AngleDimension(*((TopoDS_Edge*)aFirstEdge->Handle), *((TopoDS_Edge*)aSecondEdge->Handle), *((Handle_Geom_Plane*)aPlane->Handle), aVal, *((TCollection_ExtendedString*)aText->Handle), *((gp_Pnt*)aPosition->Handle), (DsgPrs_ArrowSide)aSymbolPrs, anArrowSize));
}

OCAIS_AngleDimension::OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aCone, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText) : OCAIS_Relation((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_AngleDimension(new AIS_AngleDimension(*((TopoDS_Face*)aCone->Handle), aVal, *((TCollection_ExtendedString*)aText->Handle)));
}

OCAIS_AngleDimension::OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aCone, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize) : OCAIS_Relation((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_AngleDimension(new AIS_AngleDimension(*((TopoDS_Face*)aCone->Handle), aVal, *((TCollection_ExtendedString*)aText->Handle), *((gp_Pnt*)aPosition->Handle), (DsgPrs_ArrowSide)aSymbolPrs, anArrowSize));
}

OCAIS_AngleDimension::OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aFirstFace, OCNaroWrappers::OCTopoDS_Face^ aSecondFace, OCNaroWrappers::OCgp_Ax1^ anAxis, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText) : OCAIS_Relation((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_AngleDimension(new AIS_AngleDimension(*((TopoDS_Face*)aFirstFace->Handle), *((TopoDS_Face*)aSecondFace->Handle), *((gp_Ax1*)anAxis->Handle), aVal, *((TCollection_ExtendedString*)aText->Handle)));
}

OCAIS_AngleDimension::OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aFirstFace, OCNaroWrappers::OCTopoDS_Face^ aSecondFace, OCNaroWrappers::OCgp_Ax1^ anAxis, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize) : OCAIS_Relation((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_AngleDimension(new AIS_AngleDimension(*((TopoDS_Face*)aFirstFace->Handle), *((TopoDS_Face*)aSecondFace->Handle), *((gp_Ax1*)anAxis->Handle), aVal, *((TCollection_ExtendedString*)aText->Handle), *((gp_Pnt*)aPosition->Handle), (DsgPrs_ArrowSide)aSymbolPrs, anArrowSize));
}

OCAIS_AngleDimension::OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aFFace, OCNaroWrappers::OCTopoDS_Face^ aSFace, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText) : OCAIS_Relation((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_AngleDimension(new AIS_AngleDimension(*((TopoDS_Face*)aFFace->Handle), *((TopoDS_Face*)aSFace->Handle), aVal, *((TCollection_ExtendedString*)aText->Handle)));
}

OCAIS_AngleDimension::OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aFFace, OCNaroWrappers::OCTopoDS_Face^ aSFace, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize) : OCAIS_Relation((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_AngleDimension(new AIS_AngleDimension(*((TopoDS_Face*)aFFace->Handle), *((TopoDS_Face*)aSFace->Handle), aVal, *((TCollection_ExtendedString*)aText->Handle), *((gp_Pnt*)aPosition->Handle), (DsgPrs_ArrowSide)aSymbolPrs, anArrowSize));
}

OCgp_Ax1^ OCAIS_AngleDimension::Axis()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = (*((Handle_AIS_AngleDimension*)nativeHandle))->Axis();
  return gcnew OCgp_Ax1(tmp);
}

 void OCAIS_AngleDimension::SetAxis(OCNaroWrappers::OCgp_Ax1^ anAxis)
{
  (*((Handle_AIS_AngleDimension*)nativeHandle))->SetAxis(*((gp_Ax1*)anAxis->Handle));
}

 void OCAIS_AngleDimension::SetConeFace(OCNaroWrappers::OCTopoDS_Face^ aConeFace)
{
  (*((Handle_AIS_AngleDimension*)nativeHandle))->SetConeFace(*((TopoDS_Face*)aConeFace->Handle));
}

 void OCAIS_AngleDimension::SetFirstShape(OCNaroWrappers::OCTopoDS_Shape^ aFShape)
{
  (*((Handle_AIS_AngleDimension*)nativeHandle))->SetFirstShape(*((TopoDS_Shape*)aFShape->Handle));
}

 void OCAIS_AngleDimension::SetSecondShape(OCNaroWrappers::OCTopoDS_Shape^ aSShape)
{
  (*((Handle_AIS_AngleDimension*)nativeHandle))->SetSecondShape(*((TopoDS_Shape*)aSShape->Handle));
}

 OCAIS_KindOfDimension OCAIS_AngleDimension::KindOfDimension()
{
  return (OCAIS_KindOfDimension)((*((Handle_AIS_AngleDimension*)nativeHandle))->KindOfDimension());
}

 System::Boolean OCAIS_AngleDimension::IsMovable()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_AngleDimension*)nativeHandle))->IsMovable());
}

 void OCAIS_AngleDimension::Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation)
{
  (*((Handle_AIS_AngleDimension*)nativeHandle))->Compute(*((Handle_Prs3d_Projector*)aProjector->Handle), *((Handle_Geom_Transformation*)aTrsf->Handle), *((Handle_Prs3d_Presentation*)aPresentation->Handle));
}


