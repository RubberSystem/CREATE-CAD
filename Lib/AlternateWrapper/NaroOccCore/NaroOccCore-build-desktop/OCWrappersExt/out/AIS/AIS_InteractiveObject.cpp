// File generated by CPPExt (CPP file)
//

#include "AIS_InteractiveObject.h"
#include "../Converter.h"
#include "../Standard/Standard_Transient.h"
#include "AIS_Drawer.h"
#include "AIS_InteractiveContext.h"
#include "../Quantity/Quantity_Color.h"
#include "../TColStd/TColStd_ListOfTransient.h"
#include "../Graphic3d/Graphic3d_MaterialAspect.h"
#include "../TColStd/TColStd_ListOfInteger.h"
#include "../Geom/Geom_Transformation.h"
#include "../Prs3d/Prs3d_Presentation.h"
#include "../Prs3d/Prs3d_BasicAspect.h"


using namespace OCNaroWrappers;

OCAIS_InteractiveObject::OCAIS_InteractiveObject(Handle(AIS_InteractiveObject)* nativeHandle) : OCSelectMgr_SelectableObject((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AIS_InteractiveObject(*nativeHandle);
}

OCAIS_InteractiveObject::OCAIS_InteractiveObject(OCPrsMgr_TypeOfPresentation3d aTypeOfPresentation3d) : OCSelectMgr_SelectableObject((OCDummy^)nullptr)

{}

 OCAIS_KindOfInteractive OCAIS_InteractiveObject::Type()
{
  return (OCAIS_KindOfInteractive)((*((Handle_AIS_InteractiveObject*)nativeHandle))->Type());
}

 Standard_Integer OCAIS_InteractiveObject::Signature()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->Signature();
}

 System::Boolean OCAIS_InteractiveObject::AcceptShapeDecomposition()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->AcceptShapeDecomposition());
}

 void OCAIS_InteractiveObject::SetCurrentFacingModel(OCAspect_TypeOfFacingModel aModel)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetCurrentFacingModel((Aspect_TypeOfFacingModel)aModel);
}

 OCAspect_TypeOfFacingModel OCAIS_InteractiveObject::CurrentFacingModel()
{
  return (OCAspect_TypeOfFacingModel)((*((Handle_AIS_InteractiveObject*)nativeHandle))->CurrentFacingModel());
}

 void OCAIS_InteractiveObject::SetColor(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetColor(*((Quantity_Color*)aColor->Handle));
}

 void OCAIS_InteractiveObject::SetColor(OCQuantity_NameOfColor aColor)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetColor((Quantity_NameOfColor)aColor);
}

 void OCAIS_InteractiveObject::UnsetColor()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetColor();
}

 void OCAIS_InteractiveObject::SetWidth(Standard_Real aValue)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetWidth(aValue);
}

 void OCAIS_InteractiveObject::UnsetWidth()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetWidth();
}

 System::Boolean OCAIS_InteractiveObject::AcceptDisplayMode(Standard_Integer aMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->AcceptDisplayMode(aMode));
}

 Standard_Integer OCAIS_InteractiveObject::DefaultDisplayMode()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->DefaultDisplayMode();
}

 void OCAIS_InteractiveObject::Redisplay(System::Boolean AllModes)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->Redisplay(OCConverter::BooleanToStandardBoolean(AllModes));
}

 void OCAIS_InteractiveObject::SetInfiniteState(System::Boolean aFlag)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetInfiniteState(OCConverter::BooleanToStandardBoolean(aFlag));
}

 System::Boolean OCAIS_InteractiveObject::IsInfinite()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->IsInfinite());
}

 System::Boolean OCAIS_InteractiveObject::HasInteractiveContext()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasInteractiveContext());
}

OCAIS_InteractiveContext^ OCAIS_InteractiveObject::GetContext()
{
  Handle(AIS_InteractiveContext) tmp = (*((Handle_AIS_InteractiveObject*)nativeHandle))->GetContext();
  return gcnew OCAIS_InteractiveContext(&tmp);
}

 void OCAIS_InteractiveObject::SetContext(OCNaroWrappers::OCAIS_InteractiveContext^ aCtx)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetContext(*((Handle_AIS_InteractiveContext*)aCtx->Handle));
}

 System::Boolean OCAIS_InteractiveObject::HasOwner()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasOwner());
}

OCStandard_Transient^ OCAIS_InteractiveObject::GetOwner()
{
  Handle(Standard_Transient) tmp = (*((Handle_AIS_InteractiveObject*)nativeHandle))->GetOwner();
  return gcnew OCStandard_Transient(&tmp);
}

 void OCAIS_InteractiveObject::SetOwner(OCNaroWrappers::OCStandard_Transient^ ApplicativeEntity)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetOwner(*((Handle_Standard_Transient*)ApplicativeEntity->Handle));
}

 void OCAIS_InteractiveObject::ClearOwner()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->ClearOwner();
}

 System::Boolean OCAIS_InteractiveObject::HasUsers()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasUsers());
}

OCTColStd_ListOfTransient^ OCAIS_InteractiveObject::Users()
{
  TColStd_ListOfTransient* tmp = new TColStd_ListOfTransient();
  *tmp = (*((Handle_AIS_InteractiveObject*)nativeHandle))->Users();
  return gcnew OCTColStd_ListOfTransient(tmp);
}

 void OCAIS_InteractiveObject::AddUser(OCNaroWrappers::OCStandard_Transient^ aUser)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->AddUser(*((Handle_Standard_Transient*)aUser->Handle));
}

 void OCAIS_InteractiveObject::ClearUsers()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->ClearUsers();
}

 System::Boolean OCAIS_InteractiveObject::HasDisplayMode()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasDisplayMode());
}

 void OCAIS_InteractiveObject::SetDisplayMode(Standard_Integer aMode)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetDisplayMode(aMode);
}

 void OCAIS_InteractiveObject::UnsetDisplayMode()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetDisplayMode();
}

 Standard_Integer OCAIS_InteractiveObject::DisplayMode()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->DisplayMode();
}

 System::Boolean OCAIS_InteractiveObject::HasSelectionMode()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasSelectionMode());
}

 Standard_Integer OCAIS_InteractiveObject::SelectionMode()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->SelectionMode();
}

 void OCAIS_InteractiveObject::SetSelectionMode(Standard_Integer aMode)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetSelectionMode(aMode);
}

 void OCAIS_InteractiveObject::UnsetSelectionMode()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetSelectionMode();
}

 Standard_Integer OCAIS_InteractiveObject::SelectionPriority()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->SelectionPriority();
}

 void OCAIS_InteractiveObject::SetSelectionPriority(Standard_Integer aPriority)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetSelectionPriority(aPriority);
}

 void OCAIS_InteractiveObject::UnsetSelectionPriority()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetSelectionPriority();
}

 System::Boolean OCAIS_InteractiveObject::HasSelectionPriority()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasSelectionPriority());
}

 System::Boolean OCAIS_InteractiveObject::HasHilightMode()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasHilightMode());
}

 Standard_Integer OCAIS_InteractiveObject::HilightMode()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->HilightMode();
}

 void OCAIS_InteractiveObject::SetHilightMode(Standard_Integer anIndex)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetHilightMode(anIndex);
}

 void OCAIS_InteractiveObject::UnsetHilightMode()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetHilightMode();
}

 System::Boolean OCAIS_InteractiveObject::HasColor()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasColor());
}

 OCQuantity_NameOfColor OCAIS_InteractiveObject::Color()
{
  return (OCQuantity_NameOfColor)((*((Handle_AIS_InteractiveObject*)nativeHandle))->Color());
}

 void OCAIS_InteractiveObject::Color(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->Color(*((Quantity_Color*)aColor->Handle));
}

 System::Boolean OCAIS_InteractiveObject::HasWidth()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasWidth());
}

 Standard_Real OCAIS_InteractiveObject::Width()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->Width();
}

 System::Boolean OCAIS_InteractiveObject::HasMaterial()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasMaterial());
}

 OCGraphic3d_NameOfMaterial OCAIS_InteractiveObject::Material()
{
  return (OCGraphic3d_NameOfMaterial)((*((Handle_AIS_InteractiveObject*)nativeHandle))->Material());
}

 void OCAIS_InteractiveObject::SetMaterial(OCGraphic3d_NameOfMaterial aName)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetMaterial((Graphic3d_NameOfMaterial)aName);
}

 void OCAIS_InteractiveObject::SetMaterial(OCNaroWrappers::OCGraphic3d_MaterialAspect^ aName)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetMaterial(*((Graphic3d_MaterialAspect*)aName->Handle));
}

 void OCAIS_InteractiveObject::UnsetMaterial()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetMaterial();
}

 void OCAIS_InteractiveObject::SetTransparency(Standard_Real aValue)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetTransparency(aValue);
}

 System::Boolean OCAIS_InteractiveObject::IsTransparent()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->IsTransparent());
}

 Standard_Real OCAIS_InteractiveObject::Transparency()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->Transparency();
}

 void OCAIS_InteractiveObject::UnsetTransparency()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetTransparency();
}

 void OCAIS_InteractiveObject::SetAttributes(OCNaroWrappers::OCAIS_Drawer^ aDrawer)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetAttributes(*((Handle_AIS_Drawer*)aDrawer->Handle));
}

OCAIS_Drawer^ OCAIS_InteractiveObject::Attributes()
{
  Handle(AIS_Drawer) tmp = (*((Handle_AIS_InteractiveObject*)nativeHandle))->Attributes();
  return gcnew OCAIS_Drawer(&tmp);
}

 void OCAIS_InteractiveObject::UnsetAttributes()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetAttributes();
}

 void OCAIS_InteractiveObject::State(Standard_Integer theState)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->State(theState);
}

 Standard_Integer OCAIS_InteractiveObject::State()
{
  return (*((Handle_AIS_InteractiveObject*)nativeHandle))->State();
}

 void OCAIS_InteractiveObject::SetDegenerateModel(OCAspect_TypeOfDegenerateModel aModel, Quantity_Ratio aRatio)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetDegenerateModel((Aspect_TypeOfDegenerateModel)aModel, aRatio);
}

 OCAspect_TypeOfDegenerateModel OCAIS_InteractiveObject::DegenerateModel(Quantity_Ratio& aRatio)
{
  return (OCAspect_TypeOfDegenerateModel)((*((Handle_AIS_InteractiveObject*)nativeHandle))->DegenerateModel(aRatio));
}

 void OCAIS_InteractiveObject::SetTransformation(OCNaroWrappers::OCGeom_Transformation^ aTranformation, System::Boolean postConcatenate, System::Boolean updateSelection)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetTransformation(*((Handle_Geom_Transformation*)aTranformation->Handle), OCConverter::BooleanToStandardBoolean(postConcatenate), OCConverter::BooleanToStandardBoolean(updateSelection));
}

 void OCAIS_InteractiveObject::UnsetTransformation()
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->UnsetTransformation();
}

OCGeom_Transformation^ OCAIS_InteractiveObject::Transformation()
{
  Handle(Geom_Transformation) tmp = (*((Handle_AIS_InteractiveObject*)nativeHandle))->Transformation();
  return gcnew OCGeom_Transformation(&tmp);
}

 System::Boolean OCAIS_InteractiveObject::HasTransformation()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasTransformation());
}

 System::Boolean OCAIS_InteractiveObject::HasPresentation()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasPresentation());
}

OCPrs3d_Presentation^ OCAIS_InteractiveObject::Presentation()
{
  Handle(Prs3d_Presentation) tmp = (*((Handle_AIS_InteractiveObject*)nativeHandle))->Presentation();
  return gcnew OCPrs3d_Presentation(&tmp);
}

 void OCAIS_InteractiveObject::SetAspect(OCNaroWrappers::OCPrs3d_BasicAspect^ anAspect, System::Boolean globalChange)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetAspect(*((Handle_Prs3d_BasicAspect*)anAspect->Handle), OCConverter::BooleanToStandardBoolean(globalChange));
}

 void OCAIS_InteractiveObject::SetPolygonOffsets(Standard_Integer aMode, Standard_ShortReal aFactor, Standard_ShortReal aUnits)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->SetPolygonOffsets(aMode, aFactor, aUnits);
}

 System::Boolean OCAIS_InteractiveObject::HasPolygonOffsets()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_InteractiveObject*)nativeHandle))->HasPolygonOffsets());
}

 void OCAIS_InteractiveObject::PolygonOffsets(Standard_Integer& aMode, Standard_ShortReal& aFactor, Standard_ShortReal& aUnits)
{
  (*((Handle_AIS_InteractiveObject*)nativeHandle))->PolygonOffsets(aMode, aFactor, aUnits);
}


