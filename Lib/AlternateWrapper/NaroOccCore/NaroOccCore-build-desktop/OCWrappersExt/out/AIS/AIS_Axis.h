// File generated by CPPExt (Transient)
//
#ifndef _AIS_Axis_OCWrappers_HeaderFile
#define _AIS_Axis_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_Axis.hxx>
#include "../Converter.h"

#include "AIS_InteractiveObject.h"

#include "../gp/gp_Pnt.h"
#include "AIS_TypeOfAxis.h"
#include "../gp/gp_Dir.h"
#include "AIS_KindOfInteractive.h"
#include "../Quantity/Quantity_NameOfColor.h"


namespace OCNaroWrappers
{

ref class OCGeom_Line;
ref class OCGeom_Axis2Placement;
ref class OCPrs3d_LineAspect;
ref class OCGeom_Axis1Placement;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;
ref class OCQuantity_Color;


//! Locates the x, y and z axes in an Interactive Object. <br>
//! These are used to orient it correctly in presentations <br>
//! from different viewpoints, or to construct a revolved <br>
//! shape, for example, from one of the axes. Conversely, <br>
//! an axis can be created to build a revolved shape and <br>
//! then situated relative to one of the axes of the view. <br>
public ref class OCAIS_Axis : OCAIS_InteractiveObject {

protected:
  // dummy constructor;
  OCAIS_Axis(OCDummy^) : OCAIS_InteractiveObject((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_Axis(Handle(AIS_Axis)* nativeHandle);

// Methods PUBLIC

//! Initializes the line aComponent <br>
OCAIS_Axis(OCNaroWrappers::OCGeom_Line^ aComponent);

//! initializes the axis2 position <br>
//!   aComponent. The coordinate system used is right-handed. <br>
OCAIS_Axis(OCNaroWrappers::OCGeom_Axis2Placement^ aComponent, OCAIS_TypeOfAxis anAxisType);

//! Initializes the axis1 position anAxis. <br>
OCAIS_Axis(OCNaroWrappers::OCGeom_Axis1Placement^ anAxis);


//! Returns the axis entity aComponent and identifies it <br>
//! as a component of a shape. <br>
 /*instead*/  OCGeom_Line^ Component() ;

//! Sets the coordinates of the lin aComponent. <br>
 /*instead*/  void SetComponent(OCNaroWrappers::OCGeom_Line^ aComponent) ;


//! Returns the position of axis2 and   positions it by <br>
//! identifying it as the x, y, or z axis and giving its <br>
//! direction in 3D space. The coordinate system used is right-handed. <br>
 /*instead*/  OCGeom_Axis2Placement^ Axis2Placement() ;


//! Allows you to provide settings for aComponent:the <br>
//! position and direction of an axis in 3D space. The <br>
//! coordinate system used is right-handed. <br>
 /*instead*/  void SetAxis2Placement(OCNaroWrappers::OCGeom_Axis2Placement^ aComponent, OCAIS_TypeOfAxis anAxisType) ;

//! Constructs a new line to serve as the axis anAxis in 3D space. <br>
 /*instead*/  void SetAxis1Placement(OCNaroWrappers::OCGeom_Axis1Placement^ anAxis) ;

//! Returns the type of axis. <br>
 /*instead*/  OCAIS_TypeOfAxis TypeOfAxis() ;


//! Constructs the entity aTypeAxis to stock information <br>
//! concerning type of axis. <br>
 /*instead*/  void SetTypeOfAxis(OCAIS_TypeOfAxis aTypeAxis) ;


//! Returns a signature of 2 for axis datums. When you <br>
//! activate mode 2 by a signature, you pick AIS objects <br>
//! of type AIS_Axis. <br>
 /*instead*/  System::Boolean IsXYZAxis() ;

//! Returns true if the interactive object accepts the display mode aMode. <br>
virtual /*instead*/  System::Boolean AcceptDisplayMode(Standard_Integer aMode) override;

//! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;


virtual /*instead*/  Standard_Integer Signature() override;


virtual /*instead*/  OCAIS_KindOfInteractive Type() override;


virtual /*instead*/  void SetColor(OCQuantity_NameOfColor aColor) override;


virtual /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor) override;


virtual /*instead*/  void SetWidth(Standard_Real aValue) override;


virtual /*instead*/  void UnsetColor() override;


virtual /*instead*/  void UnsetWidth() override;

~OCAIS_Axis()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
