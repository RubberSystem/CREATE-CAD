// File generated by CPPExt (Transient)
//
#ifndef _AIS_LengthDimension_OCWrappers_HeaderFile
#define _AIS_LengthDimension_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_LengthDimension.hxx>
#include "../Converter.h"

#include "AIS_Relation.h"

#include "../gp/gp_Pnt.h"
#include "../gp/gp_Dir.h"
#include "AIS_TypeOfDist.h"
#include "../DsgPrs/DsgPrs_ArrowSide.h"
#include "AIS_KindOfDimension.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Face;
ref class OCTCollection_ExtendedString;
ref class OCgp_Pnt;
ref class OCTopoDS_Edge;
ref class OCTopoDS_Shape;
ref class OCGeom_Plane;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;
ref class OCAIS_Drawer;
ref class OCBnd_Box;
ref class OCgp_Dir;
ref class OCTopoDS_Vertex;


//! A framework to display lengths. <br>
//! These can be lengths along a face or edge, or <br>
//! between two faces or two edges. <br>
//! The value of the length is given in a text figuring in this display. <br>
public ref class OCAIS_LengthDimension : OCAIS_Relation {

protected:
  // dummy constructor;
  OCAIS_LengthDimension(OCDummy^) : OCAIS_Relation((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_LengthDimension(Handle(AIS_LengthDimension)* nativeHandle);

// Methods PUBLIC

//! Constructs a length display object defined by the first <br>
//! face aFShape, the second face aSShape, the dimension aVal, and the text aText. <br>
OCAIS_LengthDimension(OCNaroWrappers::OCTopoDS_Face^ aFirstFace, OCNaroWrappers::OCTopoDS_Face^ aSecondFace, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText);

//! Constructs a length display object defined by the first <br>
//! face aFShape, the second face aSShape, the <br>
//! dimension aVal, the position aPosition, the arrow <br>
//! aSymbolPrs with the size anArrowSize and the text aText. <br>
OCAIS_LengthDimension(OCNaroWrappers::OCTopoDS_Face^ aFirstFace, OCNaroWrappers::OCTopoDS_Face^ aSecondFace, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize);

//! Constructs a length display object defined by the first <br>
//! edge or vertex aFShape, the second edge or vertex <br>
//! aSShape, the dimension aVal,and the plane aPlane. <br>
OCAIS_LengthDimension(OCNaroWrappers::OCTopoDS_Face^ Face, OCNaroWrappers::OCTopoDS_Edge^ Edge, Standard_Real Val, OCNaroWrappers::OCTCollection_ExtendedString^ Text);

//! -- Constructs a length display object defined by the first <br>
//! edge or vertex aFShape, the second edge or vertex <br>
//! aSShape, the dimension aVal,and the plane aPlane. <br>
OCAIS_LengthDimension(OCNaroWrappers::OCTopoDS_Shape^ aFShape, OCNaroWrappers::OCTopoDS_Shape^ aSShape, OCNaroWrappers::OCGeom_Plane^ aPlane, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText);

//! Constructs a length display object defined by the first <br>
//! edge or vertex aFShape, the second edge or vertex <br>
//! aSShape, the dimension aVal, the position aPosition, <br>
//! the type of distance aTypeDist, the type of arrow <br>
//! aSymbolPrs with the size anArrowSize, and the plane aPlane. <br>
OCAIS_LengthDimension(OCNaroWrappers::OCTopoDS_Shape^ aFShape, OCNaroWrappers::OCTopoDS_Shape^ aSShape, OCNaroWrappers::OCGeom_Plane^ aPlane, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, OCAIS_TypeOfDist aTypeDist, Standard_Real anArrowSize);


virtual /*instead*/  void SetFirstShape(OCNaroWrappers::OCTopoDS_Shape^ aFShape) override;


virtual /*instead*/  void SetSecondShape(OCNaroWrappers::OCTopoDS_Shape^ aSShape) override;

//! Indicates that we are concerned with a length. <br>
virtual /*instead*/  OCAIS_KindOfDimension KindOfDimension() override;

//! Returns true if the length dimension is movable. <br>
virtual /*instead*/  System::Boolean IsMovable() override;


//! Returns the type of distance of the length primitive. <br>
 /*instead*/  OCAIS_TypeOfDist TypeOfDist() ;


//! Returns true if the length dimension is movable. <br>
 /*instead*/  void SetTypeOfDist(OCAIS_TypeOfDist aTypeDist) ;

//! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;


static /*instead*/  void ComputeTwoEdgesLength(OCNaroWrappers::OCPrs3d_Presentation^ aPresentation, OCNaroWrappers::OCAIS_Drawer^ aDrawer, OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Real ArrowSize, OCNaroWrappers::OCTopoDS_Edge^ FirstEdge, OCNaroWrappers::OCTopoDS_Edge^ SecondEdge, OCNaroWrappers::OCGeom_Plane^ Plane, System::Boolean AutomaticPos, System::Boolean IsSetBndBox, OCNaroWrappers::OCBnd_Box^ BndBox, Standard_Integer& ExtShape, Standard_Real& Val, OCNaroWrappers::OCgp_Dir^ DirAttach, OCNaroWrappers::OCgp_Pnt^ Position, OCNaroWrappers::OCgp_Pnt^ FirstAttach, OCNaroWrappers::OCgp_Pnt^ SecondAttach, OCDsgPrs_ArrowSide& SymbolPrs) ;


static /*instead*/  void ComputeOneEdgeOneVertexLength(OCNaroWrappers::OCPrs3d_Presentation^ aPresentation, OCNaroWrappers::OCAIS_Drawer^ aDrawer, OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Real ArrowSize, OCNaroWrappers::OCTopoDS_Shape^ FirstShape, OCNaroWrappers::OCTopoDS_Shape^ SecondShape, OCNaroWrappers::OCGeom_Plane^ Plane, System::Boolean AutomaticPos, System::Boolean IsSetBndBox, OCNaroWrappers::OCBnd_Box^ BndBox, Standard_Integer& ExtShape, Standard_Real& Val, OCNaroWrappers::OCgp_Dir^ DirAttach, OCNaroWrappers::OCgp_Pnt^ Position, OCNaroWrappers::OCgp_Pnt^ FirstAttach, OCNaroWrappers::OCgp_Pnt^ SecondAttach, OCDsgPrs_ArrowSide& SymbolPrs) ;


static /*instead*/  void ComputeTwoVerticesLength(OCNaroWrappers::OCPrs3d_Presentation^ aPresentation, OCNaroWrappers::OCAIS_Drawer^ aDrawer, OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Real ArrowSize, OCNaroWrappers::OCTopoDS_Vertex^ FirstVertex, OCNaroWrappers::OCTopoDS_Vertex^ SecondVertex, OCNaroWrappers::OCGeom_Plane^ Plane, System::Boolean AutomaticPos, System::Boolean IsSetBndBox, OCNaroWrappers::OCBnd_Box^ BndBox, OCAIS_TypeOfDist TypeDist, Standard_Integer& ExtShape, Standard_Real& Val, OCNaroWrappers::OCgp_Dir^ DirAttach, OCNaroWrappers::OCgp_Pnt^ Position, OCNaroWrappers::OCgp_Pnt^ FirstAttach, OCNaroWrappers::OCgp_Pnt^ SecondAttach, OCDsgPrs_ArrowSide& SymbolPrs) ;

~OCAIS_LengthDimension()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
