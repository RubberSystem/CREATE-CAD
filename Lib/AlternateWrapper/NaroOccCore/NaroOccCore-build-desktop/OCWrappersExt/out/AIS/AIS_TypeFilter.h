// File generated by CPPExt (Transient)
//
#ifndef _AIS_TypeFilter_OCWrappers_HeaderFile
#define _AIS_TypeFilter_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_TypeFilter.hxx>
#include "../Converter.h"

#include "../SelectMgr/SelectMgr_Filter.h"

#include "AIS_KindOfInteractive.h"


namespace OCNaroWrappers
{

ref class OCSelectMgr_EntityOwner;


//! Selects Interactive Objects through their types. The <br>
//! filter questions each Interactive Object in local context <br>
//! to determine whether it has an non-null owner, and if <br>
//! so, whether it is of the desired type. If the object <br>
//! returns true in each case, it is kept. If not, it is rejected. <br>
//! By default, the   interactive object has a None   type <br>
//! and a signature of 0. A filter for type specifies a <br>
//! choice of type out of a range at any level enumerated <br>
//! for type or kind. The choice could be for kind of <br>
//! interactive object, of dimension, of unit, or type of axis, <br>
//! plane or attribute. <br>
//! If you want to give a particular type and signature to <br>
//! your Interactive Object, you must redefine two virtual <br>
//! methods:   Type and Signature. <br>
//! This filter is used in both Neutral Point and open local contexts. <br>
//! In the Collector viewer, you can only locate <br>
//! Interactive Objects which answer positively to the <br>
//! positioned filters when a local context is open. <br>
//! Warning <br>
//! When you close a local context, all temporary <br>
//! interactive objects are deleted, all selection modes <br>
//! concerning the context are cancelled, and all content <br>
//! filters are emptied. <br>
public ref class OCAIS_TypeFilter : OCSelectMgr_Filter {

protected:
  // dummy constructor;
  OCAIS_TypeFilter(OCDummy^) : OCSelectMgr_Filter((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_TypeFilter(Handle(AIS_TypeFilter)* nativeHandle);

// Methods PUBLIC

//! Initializes filter for type, aGivenKind. <br>
OCAIS_TypeFilter(OCAIS_KindOfInteractive aGivenKind);

//! Returns False if the transient is not an Interactive <br>
//! Object, or if the type of the Interactive Object is not <br>
//! the same as that stored in the filter. <br>
virtual /*instead*/  System::Boolean IsOk(OCNaroWrappers::OCSelectMgr_EntityOwner^ anobj) ;

~OCAIS_TypeFilter()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
