// File generated by CPPExt (Transient)
//
#ifndef _AIS_EqualDistanceRelation_OCWrappers_HeaderFile
#define _AIS_EqualDistanceRelation_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_EqualDistanceRelation.hxx>
#include "../Converter.h"

#include "AIS_Relation.h"

#include "../TopoDS/TopoDS_Shape.h"
#include "../gp/gp_Pnt.h"
#include "../DsgPrs/DsgPrs_ArrowSide.h"
#include "AIS_TypeOfDist.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCGeom_Plane;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;
ref class OCAIS_Drawer;
ref class OCTopoDS_Edge;
ref class OCBnd_Box;
ref class OCgp_Pnt;
ref class OCTopoDS_Vertex;


//! A framework to display equivalent distances between <br>
//! shapes and a given plane. <br>
//! The distance is the length of a projection from the <br>
//! shape to the plane. <br>
//! These distances are used to compare shapes by this vector alone. <br>
public ref class OCAIS_EqualDistanceRelation : OCAIS_Relation {

protected:
  // dummy constructor;
  OCAIS_EqualDistanceRelation(OCDummy^) : OCAIS_Relation((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_EqualDistanceRelation(Handle(AIS_EqualDistanceRelation)* nativeHandle);

// Methods PUBLIC

//! Constructs a framework to display equivalent <br>
//! distances between the shapes aShape1, aShape2, <br>
//! aShape3, aShape4 and the plane aPlane. <br>
//! The distance is the length of a projection from the <br>
//! shape to the plane. <br>
OCAIS_EqualDistanceRelation(OCNaroWrappers::OCTopoDS_Shape^ aShape1, OCNaroWrappers::OCTopoDS_Shape^ aShape2, OCNaroWrappers::OCTopoDS_Shape^ aShape3, OCNaroWrappers::OCTopoDS_Shape^ aShape4, OCNaroWrappers::OCGeom_Plane^ aPlane);


//! Sets the shape aShape to be used as the shape <br>
//! aShape3 in the framework created at construction time. <br>
 /*instead*/  void SetShape3(OCNaroWrappers::OCTopoDS_Shape^ aShape) ;


//! Returns the shape aShape3 from the framework <br>
//! created at construction time. <br>
 /*instead*/  OCTopoDS_Shape^ Shape3() ;


//! Sets the shape aShape to be used as the shape <br>
//! aShape4 in the framework created at construction time. <br>
 /*instead*/  void SetShape4(OCNaroWrappers::OCTopoDS_Shape^ aShape) ;


//! Returns the shape aShape4 from the framework <br>
//! created at construction time. <br>
 /*instead*/  OCTopoDS_Shape^ Shape4() ;

//! Computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;

//! Computes the location of an intreval between <br>
//!          between two edges. FirstAttach , SecondAttach <br>
//!          are the returned extreme points of the interval. <br>
static /*instead*/  void ComputeTwoEdgesLength(OCNaroWrappers::OCPrs3d_Presentation^ aPresentation, OCNaroWrappers::OCAIS_Drawer^ aDrawer, Standard_Real ArrowSize, OCNaroWrappers::OCTopoDS_Edge^ FirstEdge, OCNaroWrappers::OCTopoDS_Edge^ SecondEdge, OCNaroWrappers::OCGeom_Plane^ Plane, System::Boolean AutomaticPos, System::Boolean IsSetBndBox, OCNaroWrappers::OCBnd_Box^ BndBox, OCNaroWrappers::OCgp_Pnt^ Position, OCNaroWrappers::OCgp_Pnt^ FirstAttach, OCNaroWrappers::OCgp_Pnt^ SecondAttach, OCNaroWrappers::OCgp_Pnt^ FirstExtreme, OCNaroWrappers::OCgp_Pnt^ SecondExtreme, OCDsgPrs_ArrowSide& SymbolPrs) ;

//! Computes the interval position between two vertexs. FirstAttach, <br>
//!          SecondAttach are the returned extreme points of the interval. <br>
static /*instead*/  void ComputeTwoVerticesLength(OCNaroWrappers::OCPrs3d_Presentation^ aPresentation, OCNaroWrappers::OCAIS_Drawer^ aDrawer, Standard_Real ArrowSize, OCNaroWrappers::OCTopoDS_Vertex^ FirstVertex, OCNaroWrappers::OCTopoDS_Vertex^ SecondVertex, OCNaroWrappers::OCGeom_Plane^ Plane, System::Boolean AutomaticPos, System::Boolean IsSetBndBox, OCNaroWrappers::OCBnd_Box^ BndBox, OCAIS_TypeOfDist TypeDist, OCNaroWrappers::OCgp_Pnt^ Position, OCNaroWrappers::OCgp_Pnt^ FirstAttach, OCNaroWrappers::OCgp_Pnt^ SecondAttach, OCNaroWrappers::OCgp_Pnt^ FirstExtreme, OCNaroWrappers::OCgp_Pnt^ SecondExtreme, OCDsgPrs_ArrowSide& SymbolPrs) ;

//! Compute the interval location between a vertex and an edge. Edge may be <br>
//!          a line or a circle. <br>
static /*instead*/  void ComputeOneEdgeOneVertexLength(OCNaroWrappers::OCPrs3d_Presentation^ aPresentation, OCNaroWrappers::OCAIS_Drawer^ aDrawer, Standard_Real ArrowSize, OCNaroWrappers::OCTopoDS_Shape^ FirstShape, OCNaroWrappers::OCTopoDS_Shape^ SecondShape, OCNaroWrappers::OCGeom_Plane^ Plane, System::Boolean AutomaticPos, System::Boolean IsSetBndBox, OCNaroWrappers::OCBnd_Box^ BndBox, OCNaroWrappers::OCgp_Pnt^ Position, OCNaroWrappers::OCgp_Pnt^ FirstAttach, OCNaroWrappers::OCgp_Pnt^ SecondAttach, OCNaroWrappers::OCgp_Pnt^ FirstExtreme, OCNaroWrappers::OCgp_Pnt^ SecondExtreme, OCDsgPrs_ArrowSide& SymbolPrs) ;

~OCAIS_EqualDistanceRelation()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
