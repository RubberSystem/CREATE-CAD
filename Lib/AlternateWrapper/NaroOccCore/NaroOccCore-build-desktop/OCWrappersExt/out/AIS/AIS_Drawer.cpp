// File generated by CPPExt (CPP file)
//

#include "AIS_Drawer.h"
#include "../Converter.h"
#include "../Prs3d/Prs3d_Drawer.h"
#include "../Prs3d/Prs3d_IsoAspect.h"
#include "../Prs3d/Prs3d_LineAspect.h"
#include "../Prs3d/Prs3d_TextAspect.h"
#include "../Prs3d/Prs3d_ArrowAspect.h"
#include "../Prs3d/Prs3d_PointAspect.h"
#include "../Prs3d/Prs3d_ShadingAspect.h"
#include "../Prs3d/Prs3d_PlaneAspect.h"
#include "../Prs3d/Prs3d_DatumAspect.h"
#include "../Prs3d/Prs3d_LengthAspect.h"
#include "../Prs3d/Prs3d_AngleAspect.h"
#include "../Prs3d/Prs3d_RadiusAspect.h"


using namespace OCNaroWrappers;

OCAIS_Drawer::OCAIS_Drawer(Handle(AIS_Drawer)* nativeHandle) : OCPrs3d_Drawer((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AIS_Drawer(*nativeHandle);
}

OCAIS_Drawer::OCAIS_Drawer() : OCPrs3d_Drawer((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_Drawer(new AIS_Drawer());
}

 OCAspect_TypeOfDeflection OCAIS_Drawer::TypeOfDeflection()
{
  return (OCAspect_TypeOfDeflection)((*((Handle_AIS_Drawer*)nativeHandle))->TypeOfDeflection());
}

 Quantity_Length OCAIS_Drawer::MaximalChordialDeviation()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->MaximalChordialDeviation();
}

 void OCAIS_Drawer::SetDeviationCoefficient()
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetDeviationCoefficient();
}

 void OCAIS_Drawer::SetHLRDeviationCoefficient()
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetHLRDeviationCoefficient();
}

 void OCAIS_Drawer::SetDeviationAngle()
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetDeviationAngle();
}

 void OCAIS_Drawer::SetHLRAngle()
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetHLRAngle();
}

 void OCAIS_Drawer::SetDeviationCoefficient(Standard_Real aCoefficient)
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetDeviationCoefficient(aCoefficient);
}

 void OCAIS_Drawer::SetHLRDeviationCoefficient(Standard_Real aCoefficient)
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetHLRDeviationCoefficient(aCoefficient);
}

 void OCAIS_Drawer::SetDeviationAngle(Standard_Real anAngle)
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetDeviationAngle(anAngle);
}

 void OCAIS_Drawer::SetHLRAngle(Standard_Real anAngle)
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetHLRAngle(anAngle);
}

 Standard_Real OCAIS_Drawer::DeviationCoefficient()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->DeviationCoefficient();
}

 Standard_Real OCAIS_Drawer::HLRDeviationCoefficient()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->HLRDeviationCoefficient();
}

 Standard_Real OCAIS_Drawer::DeviationAngle()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->DeviationAngle();
}

 Standard_Real OCAIS_Drawer::HLRAngle()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->HLRAngle();
}

 Standard_Real OCAIS_Drawer::PreviousDeviationCoefficient()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->PreviousDeviationCoefficient();
}

 Standard_Real OCAIS_Drawer::PreviousHLRDeviationCoefficient()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->PreviousHLRDeviationCoefficient();
}

 Standard_Real OCAIS_Drawer::PreviousDeviationAngle()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->PreviousDeviationAngle();
}

 Standard_Real OCAIS_Drawer::PreviousHLRDeviationAngle()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->PreviousHLRDeviationAngle();
}

 System::Boolean OCAIS_Drawer::IsOwnDeviationCoefficient()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->IsOwnDeviationCoefficient());
}

 System::Boolean OCAIS_Drawer::IsOwnHLRDeviationCoefficient()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->IsOwnHLRDeviationCoefficient());
}

 System::Boolean OCAIS_Drawer::IsOwnDeviationAngle()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->IsOwnDeviationAngle());
}

 System::Boolean OCAIS_Drawer::IsOwnHLRDeviationAngle()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->IsOwnHLRDeviationAngle());
}

 Standard_Integer OCAIS_Drawer::Discretisation()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->Discretisation();
}

 Standard_Real OCAIS_Drawer::MaximalParameterValue()
{
  return (*((Handle_AIS_Drawer*)nativeHandle))->MaximalParameterValue();
}

 System::Boolean OCAIS_Drawer::IsoOnPlane()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->IsoOnPlane());
}

OCPrs3d_IsoAspect^ OCAIS_Drawer::UIsoAspect()
{
  Handle(Prs3d_IsoAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->UIsoAspect();
  return gcnew OCPrs3d_IsoAspect(&tmp);
}

OCPrs3d_IsoAspect^ OCAIS_Drawer::VIsoAspect()
{
  Handle(Prs3d_IsoAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->VIsoAspect();
  return gcnew OCPrs3d_IsoAspect(&tmp);
}

OCPrs3d_LineAspect^ OCAIS_Drawer::FreeBoundaryAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->FreeBoundaryAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::FreeBoundaryDraw()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->FreeBoundaryDraw());
}

OCPrs3d_LineAspect^ OCAIS_Drawer::WireAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->WireAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::HasLineAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasLineAspect());
}

 System::Boolean OCAIS_Drawer::HasWireAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasWireAspect());
}

 System::Boolean OCAIS_Drawer::WireDraw()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->WireDraw());
}

OCPrs3d_LineAspect^ OCAIS_Drawer::UnFreeBoundaryAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->UnFreeBoundaryAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::UnFreeBoundaryDraw()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->UnFreeBoundaryDraw());
}

OCPrs3d_LineAspect^ OCAIS_Drawer::LineAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->LineAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::HasTextAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasTextAspect());
}

OCPrs3d_TextAspect^ OCAIS_Drawer::TextAspect()
{
  Handle(Prs3d_TextAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->TextAspect();
  return gcnew OCPrs3d_TextAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::LineArrowDraw()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->LineArrowDraw());
}

OCPrs3d_ArrowAspect^ OCAIS_Drawer::ArrowAspect()
{
  Handle(Prs3d_ArrowAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->ArrowAspect();
  return gcnew OCPrs3d_ArrowAspect(&tmp);
}

OCPrs3d_PointAspect^ OCAIS_Drawer::PointAspect()
{
  Handle(Prs3d_PointAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->PointAspect();
  return gcnew OCPrs3d_PointAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::HasPointAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasPointAspect());
}

OCPrs3d_ShadingAspect^ OCAIS_Drawer::ShadingAspect()
{
  Handle(Prs3d_ShadingAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->ShadingAspect();
  return gcnew OCPrs3d_ShadingAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::HasShadingAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasShadingAspect());
}

 System::Boolean OCAIS_Drawer::ShadingAspectGlobal()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->ShadingAspectGlobal());
}

 System::Boolean OCAIS_Drawer::DrawHiddenLine()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->DrawHiddenLine());
}

OCPrs3d_LineAspect^ OCAIS_Drawer::HiddenLineAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->HiddenLineAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

OCPrs3d_LineAspect^ OCAIS_Drawer::SeenLineAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->SeenLineAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::HasPlaneAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasPlaneAspect());
}

OCPrs3d_PlaneAspect^ OCAIS_Drawer::PlaneAspect()
{
  Handle(Prs3d_PlaneAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->PlaneAspect();
  return gcnew OCPrs3d_PlaneAspect(&tmp);
}

OCPrs3d_LineAspect^ OCAIS_Drawer::VectorAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->VectorAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

 void OCAIS_Drawer::SetFaceBoundaryDraw(System::Boolean theIsEnabled)
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetFaceBoundaryDraw(OCConverter::BooleanToStandardBoolean(theIsEnabled));
}

 System::Boolean OCAIS_Drawer::IsFaceBoundaryDraw()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->IsFaceBoundaryDraw());
}

 void OCAIS_Drawer::SetFaceBoundaryAspect(OCNaroWrappers::OCPrs3d_LineAspect^ theAspect)
{
  (*((Handle_AIS_Drawer*)nativeHandle))->SetFaceBoundaryAspect(*((Handle_Prs3d_LineAspect*)theAspect->Handle));
}

OCPrs3d_LineAspect^ OCAIS_Drawer::FaceBoundaryAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->FaceBoundaryAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::IsOwnFaceBoundaryDraw()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->IsOwnFaceBoundaryDraw());
}

 System::Boolean OCAIS_Drawer::IsOwnFaceBoundaryAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->IsOwnFaceBoundaryAspect());
}

 System::Boolean OCAIS_Drawer::HasDatumAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasDatumAspect());
}

OCPrs3d_DatumAspect^ OCAIS_Drawer::DatumAspect()
{
  Handle(Prs3d_DatumAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->DatumAspect();
  return gcnew OCPrs3d_DatumAspect(&tmp);
}

OCPrs3d_LengthAspect^ OCAIS_Drawer::LengthAspect()
{
  Handle(Prs3d_LengthAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->LengthAspect();
  return gcnew OCPrs3d_LengthAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::HasLengthAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasLengthAspect());
}

OCPrs3d_AngleAspect^ OCAIS_Drawer::AngleAspect()
{
  Handle(Prs3d_AngleAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->AngleAspect();
  return gcnew OCPrs3d_AngleAspect(&tmp);
}

 System::Boolean OCAIS_Drawer::HasAngleAspect()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasAngleAspect());
}

OCPrs3d_RadiusAspect^ OCAIS_Drawer::RadiusAspect()
{
  Handle(Prs3d_RadiusAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->RadiusAspect();
  return gcnew OCPrs3d_RadiusAspect(&tmp);
}

OCPrs3d_LineAspect^ OCAIS_Drawer::SectionAspect()
{
  Handle(Prs3d_LineAspect) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->SectionAspect();
  return gcnew OCPrs3d_LineAspect(&tmp);
}

OCPrs3d_Drawer^ OCAIS_Drawer::Link()
{
  Handle(Prs3d_Drawer) tmp = (*((Handle_AIS_Drawer*)nativeHandle))->Link();
  return gcnew OCPrs3d_Drawer(&tmp);
}

 System::Boolean OCAIS_Drawer::HasLink()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasLink());
}

 void OCAIS_Drawer::Link(OCNaroWrappers::OCPrs3d_Drawer^ aDrawer)
{
  (*((Handle_AIS_Drawer*)nativeHandle))->Link(*((Handle_Prs3d_Drawer*)aDrawer->Handle));
}

 void OCAIS_Drawer::ClearLocalAttributes()
{
  (*((Handle_AIS_Drawer*)nativeHandle))->ClearLocalAttributes();
}

 System::Boolean OCAIS_Drawer::WasLastLocal()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->WasLastLocal());
}

 System::Boolean OCAIS_Drawer::HasLocalAttributes()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Drawer*)nativeHandle))->HasLocalAttributes());
}


