// File generated by CPPExt (Transient)
//
#ifndef _AIS_Trihedron_OCWrappers_HeaderFile
#define _AIS_Trihedron_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_Trihedron.hxx>
#include "../Converter.h"

#include "AIS_InteractiveObject.h"

#include "../Quantity/Quantity_NameOfColor.h"
#include "AIS_KindOfInteractive.h"


namespace OCNaroWrappers
{

ref class OCGeom_Axis2Placement;
ref class OCAIS_InteractiveObject;
ref class OCAIS_Axis;
ref class OCAIS_Point;
ref class OCAIS_Plane;
ref class OCAIS_InteractiveContext;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCTopLoc_Location;
ref class OCSelectMgr_Selection;
ref class OCQuantity_Color;
ref class OCTColgp_Array1OfPnt;


//! Create a selectable trihedron <br>
//! there are 4 modes of selection : <br>
//!  mode = 0 to select triedron    ,priority = 1 <br>
//!  mode = 1 to select its origine ,priority = 5 <br>
//!  mode = 2 to select its axis    ,priority = 3 <br>
//!  mode = 3 to select its planes  ,priority = 2 <br>
//!  a trihedron has 1 origine,3 axes,3 planes. <br>
//! Warning <br>
//! For the presentation of trihedra, the default unit of <br>
//! length is the millimetre, and the default value for the <br>
//! representation of the axes is 100. If you modify these <br>
//! dimensions, you must temporarily recover the Drawer. <br>
//! From inside it, you take the aspect in which the values <br>
//! for length are stocked. For trihedra, this is <br>
//! AIS_Drawer_FirstAxisAspect. You change the <br>
//! values inside this Aspect and recalculate the presentation. <br>
//! If you want to use extended selection modes, different than 0, <br>
//! you should take care of removing of the shapes from the interactive <br>
//! context that has been computed for selection; it might be necessary <br>
//! when you change selection mode. You can use methods Axis, Point, <br>
//! Plane to retrieve the shapes. <br>
public ref class OCAIS_Trihedron : OCAIS_InteractiveObject {

protected:
  // dummy constructor;
  OCAIS_Trihedron(OCDummy^) : OCAIS_InteractiveObject((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_Trihedron(Handle(AIS_Trihedron)* nativeHandle);

// Methods PUBLIC

//! Initializes a trihedron entity. <br>
OCAIS_Trihedron(OCNaroWrappers::OCGeom_Axis2Placement^ aComponent);

//! Returns the right-handed coordinate system set in SetComponent. <br>
 /*instead*/  OCGeom_Axis2Placement^ Component() ;

//! Constructs the right-handed coordinate system aComponent. <br>
 /*instead*/  void SetComponent(OCNaroWrappers::OCGeom_Axis2Placement^ aComponent) ;

//! Returns true if the trihedron object has a size other <br>
//! than the default size of 100 mm. along each axis. <br>
 /*instead*/  System::Boolean HasOwnSize() ;

//!  Sets the size aValue for the trihedron object. <br>
//! The default value is 100 mm. <br>
 /*instead*/  void SetSize(Standard_Real aValue) ;

//! Removes any non-default settings for size of this <br>
//! trihedron object. <br>
 /*instead*/  void UnsetSize() ;


 /*instead*/  Standard_Real Size() ;

//! Returns the "XAxis". <br>
 /*instead*/  OCAIS_Axis^ XAxis() ;

//! Returns the "YAxis". <br>
 /*instead*/  OCAIS_Axis^ YAxis() ;

//! Returns the main Axis. <br>
 /*instead*/  OCAIS_Axis^ Axis() ;

//! Returns the origine. <br>
 /*instead*/  OCAIS_Point^ Position() ;

//! Returns the "XYPlane". <br>
 /*instead*/  OCAIS_Plane^ XYPlane() ;

//! Returns the "XZPlane". <br>
 /*instead*/  OCAIS_Plane^ XZPlane() ;

//! Returns the "YZPlane". <br>
 /*instead*/  OCAIS_Plane^ YZPlane() ;

//! connection to <aCtx> default drawer implies a recomputation <br>
//!          of SubObjects values. <br>
virtual /*instead*/  void SetContext(OCNaroWrappers::OCAIS_InteractiveContext^ aCtx) override;

//! Returns true if the display mode selected, aMode, is <br>
//! valid for trihedron datums. <br>
virtual /*instead*/  System::Boolean AcceptDisplayMode(Standard_Integer aMode) override;

//! Computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;


virtual /*instead*/  void SetLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc) override;

//! Returns index 3, selection of the planes XOY, YOZ, XOZ. <br>
virtual /*instead*/  Standard_Integer Signature() override;

//! Indicates that the type of Interactive Object is datum. <br>
virtual /*instead*/  OCAIS_KindOfInteractive Type() override;


virtual /*instead*/  void SetColor(OCQuantity_NameOfColor aColor) override;

//! Sets the color aColor for this trihedron object. <br>
virtual /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor) override;


 /*instead*/  void SetTextColor(OCQuantity_NameOfColor aColor) ;


 /*instead*/  System::Boolean HasTextColor() ;


 /*instead*/  OCQuantity_NameOfColor TextColor() ;


 /*instead*/  void SetArrowColor(OCQuantity_NameOfColor aColor) ;


 /*instead*/  System::Boolean HasArrowColor() ;


 /*instead*/  OCQuantity_NameOfColor ArrowColor() ;

//! Returns the four extremities of the trihedron from the <br>
//! array of points, TheExtrem. <br>
 /*instead*/  void ExtremityPoints(OCNaroWrappers::OCTColgp_Array1OfPnt^ TheExtrem) ;

//! Removes the settings for color. <br>
virtual /*instead*/  void UnsetColor() override;

//! Removes the non-default settings for width set in SetWidth. <br>
virtual /*instead*/  void UnsetWidth() override;

~OCAIS_Trihedron()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
