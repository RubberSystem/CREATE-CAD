// File generated by CPPExt (CPP file)
//

#include "AIS_LocalStatus.h"
#include "../Converter.h"
#include "../Standard/Standard_Transient.h"
#include "../TColStd/TColStd_ListOfInteger.h"


using namespace OCNaroWrappers;

OCAIS_LocalStatus::OCAIS_LocalStatus(Handle(AIS_LocalStatus)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AIS_LocalStatus(*nativeHandle);
}

OCAIS_LocalStatus::OCAIS_LocalStatus(System::Boolean IsTemporary, System::Boolean Decompose, Standard_Integer DisplayMode, Standard_Integer SelectionMode, Standard_Integer HilightMode, System::Boolean SubIntensity, OCQuantity_NameOfColor TheHiCol) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_LocalStatus(new AIS_LocalStatus(OCConverter::BooleanToStandardBoolean(IsTemporary), OCConverter::BooleanToStandardBoolean(Decompose), DisplayMode, SelectionMode, HilightMode, OCConverter::BooleanToStandardBoolean(SubIntensity), (Quantity_NameOfColor)TheHiCol));
}

 System::Boolean OCAIS_LocalStatus::Decomposed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_LocalStatus*)nativeHandle))->Decomposed());
}

 System::Boolean OCAIS_LocalStatus::IsTemporary()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_LocalStatus*)nativeHandle))->IsTemporary());
}

 Standard_Integer OCAIS_LocalStatus::DisplayMode()
{
  return (*((Handle_AIS_LocalStatus*)nativeHandle))->DisplayMode();
}

OCTColStd_ListOfInteger^ OCAIS_LocalStatus::SelectionModes()
{
  TColStd_ListOfInteger* tmp = new TColStd_ListOfInteger();
  *tmp = (*((Handle_AIS_LocalStatus*)nativeHandle))->SelectionModes();
  return gcnew OCTColStd_ListOfInteger(tmp);
}

 System::Boolean OCAIS_LocalStatus::IsActivated(Standard_Integer aSelMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_LocalStatus*)nativeHandle))->IsActivated(aSelMode));
}

 Standard_Integer OCAIS_LocalStatus::HilightMode()
{
  return (*((Handle_AIS_LocalStatus*)nativeHandle))->HilightMode();
}

 System::Boolean OCAIS_LocalStatus::IsSubIntensityOn()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_LocalStatus*)nativeHandle))->IsSubIntensityOn());
}

 OCQuantity_NameOfColor OCAIS_LocalStatus::HilightColor()
{
  return (OCQuantity_NameOfColor)((*((Handle_AIS_LocalStatus*)nativeHandle))->HilightColor());
}

 void OCAIS_LocalStatus::SetDecomposition(System::Boolean astatus)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SetDecomposition(OCConverter::BooleanToStandardBoolean(astatus));
}

 void OCAIS_LocalStatus::SetTemporary(System::Boolean astatus)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SetTemporary(OCConverter::BooleanToStandardBoolean(astatus));
}

 void OCAIS_LocalStatus::SetDisplayMode(Standard_Integer aMode)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SetDisplayMode(aMode);
}

 void OCAIS_LocalStatus::SetFirstDisplay(System::Boolean aStatus)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SetFirstDisplay(OCConverter::BooleanToStandardBoolean(aStatus));
}

 System::Boolean OCAIS_LocalStatus::IsFirstDisplay()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_LocalStatus*)nativeHandle))->IsFirstDisplay());
}

 void OCAIS_LocalStatus::AddSelectionMode(Standard_Integer aMode)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->AddSelectionMode(aMode);
}

 void OCAIS_LocalStatus::RemoveSelectionMode(Standard_Integer aMode)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->RemoveSelectionMode(aMode);
}

 void OCAIS_LocalStatus::ClearSelectionModes()
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->ClearSelectionModes();
}

 System::Boolean OCAIS_LocalStatus::IsSelModeIn(Standard_Integer aMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_LocalStatus*)nativeHandle))->IsSelModeIn(aMode));
}

 void OCAIS_LocalStatus::SetHilightMode(Standard_Integer aMode)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SetHilightMode(aMode);
}

 void OCAIS_LocalStatus::SetHilightColor(OCQuantity_NameOfColor aHiCol)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SetHilightColor((Quantity_NameOfColor)aHiCol);
}

 void OCAIS_LocalStatus::SubIntensityOn()
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SubIntensityOn();
}

 void OCAIS_LocalStatus::SubIntensityOff()
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SubIntensityOff();
}

 void OCAIS_LocalStatus::SetPreviousState(OCNaroWrappers::OCStandard_Transient^ aStatus)
{
  (*((Handle_AIS_LocalStatus*)nativeHandle))->SetPreviousState(*((Handle_Standard_Transient*)aStatus->Handle));
}

OCStandard_Transient^ OCAIS_LocalStatus::PreviousState()
{
  Handle(Standard_Transient) tmp = (*((Handle_AIS_LocalStatus*)nativeHandle))->PreviousState();
  return gcnew OCStandard_Transient(&tmp);
}


