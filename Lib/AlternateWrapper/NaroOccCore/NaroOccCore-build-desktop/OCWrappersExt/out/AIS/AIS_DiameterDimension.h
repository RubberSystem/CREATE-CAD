// File generated by CPPExt (Transient)
//
#ifndef _AIS_DiameterDimension_OCWrappers_HeaderFile
#define _AIS_DiameterDimension_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_DiameterDimension.hxx>
#include "../Converter.h"

#include "AIS_Relation.h"

#include "../gp/gp_Circ.h"
#include "../DsgPrs/DsgPrs_ArrowSide.h"
#include "AIS_KindOfDimension.h"
#include "AIS_KindOfSurface.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTCollection_ExtendedString;
ref class OCgp_Pnt;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;
ref class OCGeom_Surface;


//! A framework to display diameter dimensions. <br>
//! A diameter is displayed with arrows and text. The <br>
//! text gives the length of the diameter. <br>
//! The algorithm takes a length along a face and <br>
//! analyzes it as an arc. It then reconstructs the circle <br>
//! corresponding to the arc and calculates the <br>
//! diameter of this circle. This diameter serves as a <br>
//! relational reference in 3d presentations of the surface. <br>
public ref class OCAIS_DiameterDimension : OCAIS_Relation {

protected:
  // dummy constructor;
  OCAIS_DiameterDimension(OCDummy^) : OCAIS_Relation((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_DiameterDimension(Handle(AIS_DiameterDimension)* nativeHandle);

// Methods PUBLIC

//! Constructs a diameter display object defined by the <br>
//! shape aFShape, the dimension aVal and the text aText. <br>
OCAIS_DiameterDimension(OCNaroWrappers::OCTopoDS_Shape^ aShape, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText);

//! Constructs a diameter display object defined by the <br>
//! shape aFShape, the dimension aVal and the text <br>
//! aText, the point of origin of the diameter aPosition, <br>
//! and the type of arrow aSymbolPrs with the size anArrowSize. <br>
//! If the Boolean aDiamSymbol is true. <br>
OCAIS_DiameterDimension(OCNaroWrappers::OCTopoDS_Shape^ aShape, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, System::Boolean aDiamSymbol, Standard_Real anArrowSize);


//! Indicates that we are concerned with a length. <br>
virtual /*instead*/  OCAIS_KindOfDimension KindOfDimension() override;


//! Returns true if the diameter dimension is movable <br>
virtual /*instead*/  System::Boolean IsMovable() override;


//! Returns the symbol for diameter dimension. This will <br>
//! be either arrow, text, or a combination of both. <br>
 /*instead*/  System::Boolean DiamSymbol() ;


//! Sets the symbol for diameter dimension aDiamSymbol. <br>
//! This can be an arrow, a text or both. <br>
 /*instead*/  void SetDiamSymbol(System::Boolean aDiamSymbol) ;

//! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;

~OCAIS_DiameterDimension()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
