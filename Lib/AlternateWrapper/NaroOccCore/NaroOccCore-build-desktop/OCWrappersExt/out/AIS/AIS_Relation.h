// File generated by CPPExt (Transient)
//
#ifndef _AIS_Relation_OCWrappers_HeaderFile
#define _AIS_Relation_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_Relation.hxx>
#include "../Converter.h"

#include "AIS_InteractiveObject.h"

#include "../TopoDS/TopoDS_Shape.h"
#include "../gp/gp_Pnt.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../DsgPrs/DsgPrs_ArrowSide.h"
#include "../gp/gp_Pln.h"
#include "AIS_KindOfSurface.h"
#include "../Bnd/Bnd_Box.h"
#include "../PrsMgr/PrsMgr_TypeOfPresentation3d.h"
#include "../Quantity/Quantity_NameOfColor.h"
#include "AIS_KindOfInteractive.h"
#include "AIS_KindOfDimension.h"
#include "../Aspect/Aspect_TypeOfLine.h"
#include "../Aspect/Aspect_TypeOfMarker.h"


namespace OCNaroWrappers
{

ref class OCGeom_Plane;
ref class OCGeom_Surface;
ref class OCQuantity_Color;
ref class OCTopoDS_Shape;
ref class OCgp_Pnt;
ref class OCTCollection_ExtendedString;
ref class OCPrs3d_Presentation;
ref class OCTopoDS_Edge;
ref class OCGeom_Curve;
ref class OCTopoDS_Vertex;


//! One of the four types of interactive object in <br>
//! AIS,comprising dimensions and constraints. Serves <br>
//! as the abstract class for the seven relation classes as <br>
//! well as the seven dimension classes. <br>
//! The statuses available for relations between shapes are as follows: <br>
//! -   0 - there is no connection to a shape; <br>
//! -   1 - there is a connection to the first shape; <br>
//! -   2 - there is a connection to the second shape. <br>
//!   The connection takes the form of an edge between the two shapes. <br>
public ref class OCAIS_Relation : OCAIS_InteractiveObject {

protected:
  // dummy constructor;
  OCAIS_Relation(OCDummy^) : OCAIS_InteractiveObject((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_Relation(Handle(AIS_Relation)* nativeHandle);

// Methods PUBLIC


OCAIS_Relation(OCPrsMgr_TypeOfPresentation3d aTypeOfPresentation3d);

//! Allows you to provide settings for the color aColor <br>
//! of the lines representing the relation between the two shapes. <br>
virtual /*instead*/  void SetColor(OCQuantity_NameOfColor aColor) override;


virtual /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor) override;

//! Allows you to remove settings for the color of the <br>
//! lines representing the relation between the two shapes. <br>
virtual /*instead*/  void UnsetColor() override;


virtual /*instead*/  OCAIS_KindOfInteractive Type() override;

//! Indicates that the type of dimension is unknown. <br>
virtual /*instead*/  OCAIS_KindOfDimension KindOfDimension() ;

//! Returns true if the interactive object is movable. <br>
virtual /*instead*/  System::Boolean IsMovable() ;


 /*instead*/  OCTopoDS_Shape^ FirstShape() ;


virtual /*instead*/  void SetFirstShape(OCNaroWrappers::OCTopoDS_Shape^ aFShape) ;

//! Returns the second shape. <br>
 /*instead*/  OCTopoDS_Shape^ SecondShape() ;

//! Allows you to identify the second shape aSShape <br>
//! relative to the first. <br>
virtual /*instead*/  void SetSecondShape(OCNaroWrappers::OCTopoDS_Shape^ aSShape) ;


 /*instead*/  void SetBndBox(Standard_Real Xmin, Standard_Real Ymin, Standard_Real Zmin, Standard_Real Xmax, Standard_Real Ymax, Standard_Real Zmax) ;


 /*instead*/  void UnsetBndBox() ;

//! Returns the plane. <br>
 /*instead*/  OCGeom_Plane^ Plane() ;


//! Allows you to set the plane aPlane. This is used to <br>
//! define relations and dimensions in several daughter classes. <br>
 /*instead*/  void SetPlane(OCNaroWrappers::OCGeom_Plane^ aPlane) ;

//! Returns the value of each object in the relation. <br>
 /*instead*/  Standard_Real Value() ;

//! Allows you to provide settings for the value aVal for <br>
//! each object in the relation. <br>
 /*instead*/  void SetValue(Standard_Real aVal) ;

//! Returns the position set using SetPosition. <br>
 /*instead*/  OCgp_Pnt^ Position() ;


//! Allows you to provide the objects in the relation with <br>
//! settings for a non-default position. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Pnt^ aPosition) ;

//! Returns settings for text aspect. <br>
 /*instead*/  OCTCollection_ExtendedString^ Text() ;

//! Allows you to provide the settings aText for text aspect. <br>
 /*instead*/  void SetText(OCNaroWrappers::OCTCollection_ExtendedString^ aText) ;


//! Returns the value for the size of the arrow identifying <br>
//! the relation between the two shapes. <br>
 /*instead*/  Standard_Real ArrowSize() ;


//! Allows you to provide settings for the size of the <br>
//! arrow anArrowsize identifying the relation between the two shapes. <br>
 /*instead*/  void SetArrowSize(Standard_Real anArrowSize) ;


//! Returns the value of the symbol presentation. This will be one of: <br>
//! -   AS_NONE - none <br>
//! -   AS_FIRSTAR - first arrow <br>
//! -   AS_LASTAR - last arrow <br>
//! -   AS_BOTHAR - both arrows <br>
//! -   AS_FIRSTPT - first point <br>
//! -   AS_LASTPT - last point <br>
//! -   AS_BOTHPT - both points <br>
//! -   AS_FIRSTAR_LASTPT - first arrow, last point <br>
//! -   AS_FIRSTPT_LASTAR - first point, last arrow <br>
 /*instead*/  OCDsgPrs_ArrowSide SymbolPrs() ;


//! Allows you to provide settings for the symbol presentation. <br>
 /*instead*/  void SetSymbolPrs(OCDsgPrs_ArrowSide aSymbolPrs) ;


//! Allows you to set the status of the extension shape by <br>
//! the index aIndex. <br>
//! The status will be one of the following: <br>
//! -   0 - there is no connection to a shape; <br>
//! -   1 - there is a connection to the first shape; <br>
//! -   2 - there is a connection to the second shape. <br>
 /*instead*/  void SetExtShape(Standard_Integer aIndex) ;


//! Returns the status index of the extension shape. <br>
 /*instead*/  Standard_Integer ExtShape() ;


//! Returns true if the display mode aMode is accepted <br>
//! for the Interactive Objects in the relation. <br>
//! ComputeProjPresentation(me; <br>
//! 	    	    	    aPres    : mutable Presentation from Prs3d; <br>
//!		    Curve1   : Curve                from Geom; <br>
//!		    Curve2   : Curve                from Geom; <br>
//!		    FirstP1  : Pnt                  from gp; <br>
//!		    LastP1   : Pnt                  from gp; <br>
//!		    FirstP2  : Pnt                  from gp; <br>
//!		    LastP2   : Pnt                  from gp; <br>
//!		    aColor   : NameOfColor          from Quantity = Quantity_NOC_PURPLE; <br>
//!		    aWidth   : Real                 from Standard = 2; <br>
//!    	    	    aProjTOL : TypeOfLine           from Aspect   = Aspect_TOL_DASH; <br>
//!		    aCallTOL : TypeOfLine           from Aspect   = Aspect_TOL_DOT) <br>
virtual /*instead*/  System::Boolean AcceptDisplayMode(Standard_Integer aMode) override;


 /*instead*/  void SetAutomaticPosition(System::Boolean aStatus) ;


 /*instead*/  System::Boolean AutomaticPosition() ;

~OCAIS_Relation()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
