// File generated by CPPExt (CPP file)
//

#include "AIS_Shape.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../PrsMgr/PrsMgr_PresentationManager3d.h"
#include "../Prs3d/Prs3d_Presentation.h"
#include "../PrsMgr/PrsMgr_PresentationManager2d.h"
#include "../Graphic2d/Graphic2d_GraphicObject.h"
#include "../Prs3d/Prs3d_Projector.h"
#include "../Geom/Geom_Transformation.h"
#include "../SelectMgr/SelectMgr_Selection.h"
#include "../Quantity/Quantity_Color.h"
#include "../Graphic3d/Graphic3d_MaterialAspect.h"
#include "../Bnd/Bnd_Box.h"
#include "../Prs3d/Prs3d_Drawer.h"


using namespace OCNaroWrappers;

OCAIS_Shape::OCAIS_Shape(Handle(AIS_Shape)* nativeHandle) : OCAIS_InteractiveObject((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AIS_Shape(*nativeHandle);
}

OCAIS_Shape::OCAIS_Shape(OCNaroWrappers::OCTopoDS_Shape^ shap) : OCAIS_InteractiveObject((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_Shape(new AIS_Shape(*((TopoDS_Shape*)shap->Handle)));
}

 Standard_Integer OCAIS_Shape::Signature()
{
  return (*((Handle_AIS_Shape*)nativeHandle))->Signature();
}

 OCAIS_KindOfInteractive OCAIS_Shape::Type()
{
  return (OCAIS_KindOfInteractive)((*((Handle_AIS_Shape*)nativeHandle))->Type());
}

 System::Boolean OCAIS_Shape::AcceptShapeDecomposition()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->AcceptShapeDecomposition());
}

 void OCAIS_Shape::Set(OCNaroWrappers::OCTopoDS_Shape^ ashap)
{
  (*((Handle_AIS_Shape*)nativeHandle))->Set(*((TopoDS_Shape*)ashap->Handle));
}

OCTopoDS_Shape^ OCAIS_Shape::Shape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = (*((Handle_AIS_Shape*)nativeHandle))->Shape();
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCAIS_Shape::SetOwnDeviationCoefficient()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->SetOwnDeviationCoefficient());
}

 System::Boolean OCAIS_Shape::SetOwnHLRDeviationCoefficient()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->SetOwnHLRDeviationCoefficient());
}

 System::Boolean OCAIS_Shape::SetOwnDeviationAngle()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->SetOwnDeviationAngle());
}

 System::Boolean OCAIS_Shape::SetOwnHLRDeviationAngle()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->SetOwnHLRDeviationAngle());
}

 void OCAIS_Shape::SetOwnDeviationCoefficient(Standard_Real aCoefficient)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetOwnDeviationCoefficient(aCoefficient);
}

 void OCAIS_Shape::SetOwnHLRDeviationCoefficient(Standard_Real aCoefficient)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetOwnHLRDeviationCoefficient(aCoefficient);
}

 void OCAIS_Shape::SetAngleAndDeviation(Standard_Real anAngle)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetAngleAndDeviation(anAngle);
}

 Standard_Real OCAIS_Shape::UserAngle()
{
  return (*((Handle_AIS_Shape*)nativeHandle))->UserAngle();
}

 void OCAIS_Shape::SetOwnDeviationAngle(Standard_Real anAngle)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetOwnDeviationAngle(anAngle);
}

 void OCAIS_Shape::SetHLRAngleAndDeviation(Standard_Real anAngle)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetHLRAngleAndDeviation(anAngle);
}

 void OCAIS_Shape::SetOwnHLRDeviationAngle(Standard_Real anAngle)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetOwnHLRDeviationAngle(anAngle);
}

 System::Boolean OCAIS_Shape::OwnDeviationCoefficient(Standard_Real& aCoefficient, Standard_Real& aPreviousCoefficient)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->OwnDeviationCoefficient(aCoefficient, aPreviousCoefficient));
}

 System::Boolean OCAIS_Shape::OwnHLRDeviationCoefficient(Standard_Real& aCoefficient, Standard_Real& aPreviousCoefficient)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->OwnHLRDeviationCoefficient(aCoefficient, aPreviousCoefficient));
}

 System::Boolean OCAIS_Shape::OwnDeviationAngle(Standard_Real& anAngle, Standard_Real& aPreviousAngle)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->OwnDeviationAngle(anAngle, aPreviousAngle));
}

 System::Boolean OCAIS_Shape::OwnHLRDeviationAngle(Standard_Real& anAngle, Standard_Real& aPreviousAngle)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Shape*)nativeHandle))->OwnHLRDeviationAngle(anAngle, aPreviousAngle));
}

 void OCAIS_Shape::SetColor(OCQuantity_NameOfColor aColor)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetColor((Quantity_NameOfColor)aColor);
}

 void OCAIS_Shape::SetColor(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetColor(*((Quantity_Color*)aColor->Handle));
}

 void OCAIS_Shape::UnsetColor()
{
  (*((Handle_AIS_Shape*)nativeHandle))->UnsetColor();
}

 void OCAIS_Shape::SetWidth(Standard_Real aValue)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetWidth(aValue);
}

 void OCAIS_Shape::UnsetWidth()
{
  (*((Handle_AIS_Shape*)nativeHandle))->UnsetWidth();
}

 void OCAIS_Shape::SetMaterial(OCGraphic3d_NameOfMaterial aName)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetMaterial((Graphic3d_NameOfMaterial)aName);
}

 void OCAIS_Shape::SetMaterial(OCNaroWrappers::OCGraphic3d_MaterialAspect^ aName)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetMaterial(*((Graphic3d_MaterialAspect*)aName->Handle));
}

 void OCAIS_Shape::UnsetMaterial()
{
  (*((Handle_AIS_Shape*)nativeHandle))->UnsetMaterial();
}

 void OCAIS_Shape::SetTransparency(Standard_Real aValue)
{
  (*((Handle_AIS_Shape*)nativeHandle))->SetTransparency(aValue);
}

 void OCAIS_Shape::UnsetTransparency()
{
  (*((Handle_AIS_Shape*)nativeHandle))->UnsetTransparency();
}

OCBnd_Box^ OCAIS_Shape::BoundingBox()
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = (*((Handle_AIS_Shape*)nativeHandle))->BoundingBox();
  return gcnew OCBnd_Box(tmp);
}

 OCQuantity_NameOfColor OCAIS_Shape::Color()
{
  return (OCQuantity_NameOfColor)((*((Handle_AIS_Shape*)nativeHandle))->Color());
}

 void OCAIS_Shape::Color(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_AIS_Shape*)nativeHandle))->Color(*((Quantity_Color*)aColor->Handle));
}

 OCGraphic3d_NameOfMaterial OCAIS_Shape::Material()
{
  return (OCGraphic3d_NameOfMaterial)((*((Handle_AIS_Shape*)nativeHandle))->Material());
}

 Standard_Real OCAIS_Shape::Transparency()
{
  return (*((Handle_AIS_Shape*)nativeHandle))->Transparency();
}

 OCTopAbs_ShapeEnum OCAIS_Shape::SelectionType(Standard_Integer aDecompositionMode)
{
  return (OCTopAbs_ShapeEnum)(AIS_Shape::SelectionType(aDecompositionMode));
}

 Standard_Integer OCAIS_Shape::SelectionMode(OCTopAbs_ShapeEnum aShapeType)
{
  return AIS_Shape::SelectionMode((TopAbs_ShapeEnum)aShapeType);
}

 Standard_Real OCAIS_Shape::GetDeflection(OCNaroWrappers::OCTopoDS_Shape^ aShape, OCNaroWrappers::OCPrs3d_Drawer^ aDrawer)
{
  return AIS_Shape::GetDeflection(*((TopoDS_Shape*)aShape->Handle), *((Handle_Prs3d_Drawer*)aDrawer->Handle));
}


