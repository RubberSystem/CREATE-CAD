// File generated by CPPExt (Transient)
//
#ifndef _AIS_Circle_OCWrappers_HeaderFile
#define _AIS_Circle_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_Circle.hxx>
#include "../Converter.h"

#include "AIS_InteractiveObject.h"

#include "AIS_KindOfInteractive.h"
#include "../Quantity/Quantity_NameOfColor.h"


namespace OCNaroWrappers
{

ref class OCGeom_Circle;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;
ref class OCQuantity_Color;


//! Constructs circle datums to be used in construction of <br>
//! composite shapes. <br>
public ref class OCAIS_Circle : OCAIS_InteractiveObject {

protected:
  // dummy constructor;
  OCAIS_Circle(OCDummy^) : OCAIS_InteractiveObject((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_Circle(Handle(AIS_Circle)* nativeHandle);

// Methods PUBLIC

//! Initializes this algorithm for constructing AIS circle <br>
//! datums initializes the circle aCircle <br>
OCAIS_Circle(OCNaroWrappers::OCGeom_Circle^ aCircle);

//! Initializes this algorithm for constructing AIS circle datums. <br>
//! Initializes the circle aCircle, the arc <br>
//!   starting point UStart, the arc ending point UEnd, <br>
//!   and the direction aSens. <br>
OCAIS_Circle(OCNaroWrappers::OCGeom_Circle^ aCircle, Standard_Real aUStart, Standard_Real aUEnd, System::Boolean aSens);

//! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;

//! Returns index 6 by default. <br>
virtual /*instead*/  Standard_Integer Signature() override;

//! Indicates that the type of Interactive Object is a datum. <br>
virtual /*instead*/  OCAIS_KindOfInteractive Type() override;

//! Returns the circle component defined in SetCircle. <br>
 /*instead*/  OCGeom_Circle^ Circle() ;


//! Constructs instances of the starting point and the end <br>
//! point parameters, u1 and u2. <br>
 /*instead*/  void Parameters(Standard_Real& u1, Standard_Real& u2) ;

//! Allows you to provide settings for the circle datum aCircle. <br>
 /*instead*/  void SetCircle(OCNaroWrappers::OCGeom_Circle^ aCircle) ;

//! Allows you to set the parameter u for the starting point of an arc. <br>
 /*instead*/  void SetFirstParam(Standard_Real u) ;

//! Allows you to provide the parameter u for the end point of an arc. <br>
 /*instead*/  void SetLastParam(Standard_Real u) ;

//! Assigns the color aColor to the solid line boundary of the circle datum. <br>
virtual /*instead*/  void SetColor(OCQuantity_NameOfColor aColor) override;


virtual /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor) override;

//! Assigns the width aValue to the solid line boundary of the circle datum. <br>
virtual /*instead*/  void SetWidth(Standard_Real aValue) override;

//! Removes color from the solid line boundary of the circle datum. <br>
virtual /*instead*/  void UnsetColor() override;

//! Removes width settings from the solid line boundary of the circle datum. <br>
virtual /*instead*/  void UnsetWidth() override;

~OCAIS_Circle()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
