// File generated by CPPExt (CPP file)
//

#include "AIS_Trihedron.h"
#include "../Converter.h"
#include "../Geom/Geom_Axis2Placement.h"
#include "AIS_InteractiveObject.h"
#include "AIS_Axis.h"
#include "AIS_Point.h"
#include "AIS_Plane.h"
#include "AIS_InteractiveContext.h"
#include "../PrsMgr/PrsMgr_PresentationManager3d.h"
#include "../Prs3d/Prs3d_Presentation.h"
#include "../Prs3d/Prs3d_Projector.h"
#include "../PrsMgr/PrsMgr_PresentationManager2d.h"
#include "../Graphic2d/Graphic2d_GraphicObject.h"
#include "../Geom/Geom_Transformation.h"
#include "../TopLoc/TopLoc_Location.h"
#include "../SelectMgr/SelectMgr_Selection.h"
#include "../Quantity/Quantity_Color.h"
#include "../TColgp/TColgp_Array1OfPnt.h"


using namespace OCNaroWrappers;

OCAIS_Trihedron::OCAIS_Trihedron(Handle(AIS_Trihedron)* nativeHandle) : OCAIS_InteractiveObject((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AIS_Trihedron(*nativeHandle);
}

OCAIS_Trihedron::OCAIS_Trihedron(OCNaroWrappers::OCGeom_Axis2Placement^ aComponent) : OCAIS_InteractiveObject((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_Trihedron(new AIS_Trihedron(*((Handle_Geom_Axis2Placement*)aComponent->Handle)));
}

OCGeom_Axis2Placement^ OCAIS_Trihedron::Component()
{
  Handle(Geom_Axis2Placement) tmp = (*((Handle_AIS_Trihedron*)nativeHandle))->Component();
  return gcnew OCGeom_Axis2Placement(&tmp);
}

 void OCAIS_Trihedron::SetComponent(OCNaroWrappers::OCGeom_Axis2Placement^ aComponent)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->SetComponent(*((Handle_Geom_Axis2Placement*)aComponent->Handle));
}

 System::Boolean OCAIS_Trihedron::HasOwnSize()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Trihedron*)nativeHandle))->HasOwnSize());
}

 void OCAIS_Trihedron::SetSize(Standard_Real aValue)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->SetSize(aValue);
}

 void OCAIS_Trihedron::UnsetSize()
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->UnsetSize();
}

 Standard_Real OCAIS_Trihedron::Size()
{
  return (*((Handle_AIS_Trihedron*)nativeHandle))->Size();
}

OCAIS_Axis^ OCAIS_Trihedron::XAxis()
{
  Handle(AIS_Axis) tmp = (*((Handle_AIS_Trihedron*)nativeHandle))->XAxis();
  return gcnew OCAIS_Axis(&tmp);
}

OCAIS_Axis^ OCAIS_Trihedron::YAxis()
{
  Handle(AIS_Axis) tmp = (*((Handle_AIS_Trihedron*)nativeHandle))->YAxis();
  return gcnew OCAIS_Axis(&tmp);
}

OCAIS_Axis^ OCAIS_Trihedron::Axis()
{
  Handle(AIS_Axis) tmp = (*((Handle_AIS_Trihedron*)nativeHandle))->Axis();
  return gcnew OCAIS_Axis(&tmp);
}

OCAIS_Point^ OCAIS_Trihedron::Position()
{
  Handle(AIS_Point) tmp = (*((Handle_AIS_Trihedron*)nativeHandle))->Position();
  return gcnew OCAIS_Point(&tmp);
}

OCAIS_Plane^ OCAIS_Trihedron::XYPlane()
{
  Handle(AIS_Plane) tmp = (*((Handle_AIS_Trihedron*)nativeHandle))->XYPlane();
  return gcnew OCAIS_Plane(&tmp);
}

OCAIS_Plane^ OCAIS_Trihedron::XZPlane()
{
  Handle(AIS_Plane) tmp = (*((Handle_AIS_Trihedron*)nativeHandle))->XZPlane();
  return gcnew OCAIS_Plane(&tmp);
}

OCAIS_Plane^ OCAIS_Trihedron::YZPlane()
{
  Handle(AIS_Plane) tmp = (*((Handle_AIS_Trihedron*)nativeHandle))->YZPlane();
  return gcnew OCAIS_Plane(&tmp);
}

 void OCAIS_Trihedron::SetContext(OCNaroWrappers::OCAIS_InteractiveContext^ aCtx)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->SetContext(*((Handle_AIS_InteractiveContext*)aCtx->Handle));
}

 System::Boolean OCAIS_Trihedron::AcceptDisplayMode(Standard_Integer aMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Trihedron*)nativeHandle))->AcceptDisplayMode(aMode));
}

 void OCAIS_Trihedron::Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->Compute(*((Handle_Prs3d_Projector*)aProjector->Handle), *((Handle_Geom_Transformation*)aTrsf->Handle), *((Handle_Prs3d_Presentation*)aPresentation->Handle));
}

 void OCAIS_Trihedron::SetLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->SetLocation(*((TopLoc_Location*)aLoc->Handle));
}

 Standard_Integer OCAIS_Trihedron::Signature()
{
  return (*((Handle_AIS_Trihedron*)nativeHandle))->Signature();
}

 OCAIS_KindOfInteractive OCAIS_Trihedron::Type()
{
  return (OCAIS_KindOfInteractive)((*((Handle_AIS_Trihedron*)nativeHandle))->Type());
}

 void OCAIS_Trihedron::SetColor(OCQuantity_NameOfColor aColor)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->SetColor((Quantity_NameOfColor)aColor);
}

 void OCAIS_Trihedron::SetColor(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->SetColor(*((Quantity_Color*)aColor->Handle));
}

 void OCAIS_Trihedron::SetTextColor(OCQuantity_NameOfColor aColor)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->SetTextColor((Quantity_NameOfColor)aColor);
}

 System::Boolean OCAIS_Trihedron::HasTextColor()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Trihedron*)nativeHandle))->HasTextColor());
}

 OCQuantity_NameOfColor OCAIS_Trihedron::TextColor()
{
  return (OCQuantity_NameOfColor)((*((Handle_AIS_Trihedron*)nativeHandle))->TextColor());
}

 void OCAIS_Trihedron::SetArrowColor(OCQuantity_NameOfColor aColor)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->SetArrowColor((Quantity_NameOfColor)aColor);
}

 System::Boolean OCAIS_Trihedron::HasArrowColor()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Trihedron*)nativeHandle))->HasArrowColor());
}

 OCQuantity_NameOfColor OCAIS_Trihedron::ArrowColor()
{
  return (OCQuantity_NameOfColor)((*((Handle_AIS_Trihedron*)nativeHandle))->ArrowColor());
}

 void OCAIS_Trihedron::ExtremityPoints(OCNaroWrappers::OCTColgp_Array1OfPnt^ TheExtrem)
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->ExtremityPoints(*((TColgp_Array1OfPnt*)TheExtrem->Handle));
}

 void OCAIS_Trihedron::UnsetColor()
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->UnsetColor();
}

 void OCAIS_Trihedron::UnsetWidth()
{
  (*((Handle_AIS_Trihedron*)nativeHandle))->UnsetWidth();
}


