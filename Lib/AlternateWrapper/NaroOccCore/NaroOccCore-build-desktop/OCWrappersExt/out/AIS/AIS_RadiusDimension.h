// File generated by CPPExt (Transient)
//
#ifndef _AIS_RadiusDimension_OCWrappers_HeaderFile
#define _AIS_RadiusDimension_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_RadiusDimension.hxx>
#include "../Converter.h"

#include "AIS_Relation.h"

#include "../gp/gp_Circ.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Lin.h"
#include "../DsgPrs/DsgPrs_ArrowSide.h"
#include "AIS_KindOfDimension.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTCollection_ExtendedString;
ref class OCgp_Pnt;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;


//!  A framework to define display of radii. <br>
//! These displays serve as relational references in 3D <br>
//! presentations of surfaces, and are particularly useful <br>
//! in viewing fillets. The display consists of arrows and <br>
//! text giving the length of a radius. This display is <br>
//! recalculated if the applicative owner shape changes <br>
//! in dimension, and the text gives the modified length. <br>
//! The algorithm analyzes a length along a face as an <br>
//! arc. It then reconstructs the circle corresponding to <br>
//! the arc and calculates the radius of this circle. <br>
public ref class OCAIS_RadiusDimension : OCAIS_Relation {

protected:
  // dummy constructor;
  OCAIS_RadiusDimension(OCDummy^) : OCAIS_Relation((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_RadiusDimension(Handle(AIS_RadiusDimension)* nativeHandle);

// Methods PUBLIC

//! Constructs the radius display object defined by the <br>
//! shape aShape, the dimension aVal, and the text aText. <br>
OCAIS_RadiusDimension(OCNaroWrappers::OCTopoDS_Shape^ aShape, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText);

//! Constructs radius display object defined by the shape <br>
//! aShape, the dimension aVal, the position aPosition, <br>
//! the type of arrow aSymbolPrs, the arrow length <br>
//! anArrowSize and the text aText. <br>
OCAIS_RadiusDimension(OCNaroWrappers::OCTopoDS_Shape^ aShape, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize);


virtual /*instead*/  void SetFirstShape(OCNaroWrappers::OCTopoDS_Shape^ aFShape) override;

//! Indicates that the dimension selected is a radius. <br>
virtual /*instead*/  OCAIS_KindOfDimension KindOfDimension() override;

//! Returns true if the radius selected is movable. <br>
virtual /*instead*/  System::Boolean IsMovable() override;


//! Draws an arrowhead pointing towards the center of <br>
//! the shape aShape defined at construction time if <br>
//! false, and away from the center if true. <br>
 /*instead*/  System::Boolean DrawFromCenter() ;


//! Sets the Boolean drawfromcenter to true or false. <br>
//! If drawfromcenter is false, the arrowhead will point <br>
//! towards the center of the shape aShape defined at <br>
//! construction time. <br>
 /*instead*/  void SetDrawFromCenter(System::Boolean drawfromcenter) ;

//! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;

~OCAIS_RadiusDimension()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
