// File generated by CPPExt (Transient)
//
#ifndef _AIS_InteractiveContext_OCWrappers_HeaderFile
#define _AIS_InteractiveContext_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_InteractiveContext.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "AIS_DataMapOfIOStatus.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../Quantity/Quantity_NameOfColor.h"
#include "AIS_DataMapOfILC.h"
#include "AIS_SequenceOfInteractive.h"
#include "AIS_KindOfInteractive.h"
#include "../StdSelect/StdSelect_SensitivityMode.h"
#include "../Aspect/Aspect_TypeOfFacingModel.h"
#include "../Graphic3d/Graphic3d_NameOfMaterial.h"
#include "../Aspect/Aspect_TypeOfDegenerateModel.h"
#include "AIS_DisplayStatus.h"
#include "AIS_DisplayMode.h"
#include "AIS_TypeOfIso.h"
#include "AIS_StatusOfDetection.h"
#include "AIS_StatusOfPick.h"
#include "AIS_ClearMode.h"
#include "../TopAbs/TopAbs_ShapeEnum.h"


namespace OCNaroWrappers
{

ref class OCSelectMgr_SelectionManager;
ref class OCPrsMgr_PresentationManager3d;
ref class OCV3d_Viewer;
ref class OCStdSelect_ViewerSelector3d;
ref class OCAIS_InteractiveObject;
ref class OCSelectMgr_OrFilter;
ref class OCPrs3d_Drawer;
ref class OCV3d_View;
ref class OCAIS_LocalContext;
ref class OCTopLoc_Location;
ref class OCQuantity_Color;
ref class OCAIS_Drawer;
ref class OCTColStd_ListOfInteger;
ref class OCTCollection_ExtendedString;
ref class OCPrs3d_LineAspect;
ref class OCPrs3d_BasicAspect;
ref class OCTColgp_Array1OfPnt2d;
ref class OCTopoDS_Shape;
ref class OCSelectMgr_EntityOwner;
ref class OCSelectMgr_IndexedMapOfOwner;
ref class OCStandard_Transient;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Filter;
ref class OCSelectMgr_ListOfFilter;
ref class OCAIS_ListOfInteractive;
ref class OCTCollection_AsciiString;


//! The Interactive Context allows you to manage <br>
//! graphic behavior and selection of Interactive Objects <br>
//! in one or more viewers. Class methods make this <br>
//! highly transparent. <br>
//! It is essential to remember that an Interactive Object <br>
//! which is already known by the Interactive Context <br>
//! must be modified using Context methods. You can <br>
//! only directly call the methods available for an <br>
//! Interactive Object if it has not been loaded into an <br>
//! Interactive Context. <br>
//! You must distinguish two states in the Interactive Context: <br>
//! -   No Open Local Context, also known as the Neutral Point. <br>
//! -   One or several open local contexts, each <br>
//!   representing a temporary state of selection and presentation. <br>
//!   Some methods can only be used in open Local <br>
//! Context; others in closed Local Context; others do <br>
//! not have the same behavior in one state as in the other. <br>
//! The possiblities of use for local contexts are <br>
//! numerous depending on the type of operation that <br>
//! you want to perform, for example: <br>
//! -   working on all visualized interactive objects, <br>
//! -   working on only a few objects, <br>
//! -   working on a single object. <br>
//!   1. When you want ot work on one type of entity, you <br>
//! should open a local context with the option <br>
//! UseDisplayedObjects set to false. DisplayedObjects <br>
//! allows you to recover the visualized Interactive <br>
//! Objects which have a given Type and <br>
//! Signature   from Neutral Point. <br>
//! 2. You must keep in mind the fact that when you open <br>
//! a Local Context with default options: <br>
//! -   The Interactive Objects visualized at Neutral Point <br>
//!   are activated with their default selection mode. You <br>
//!   must deactivate those which you do not want ot use. <br>
//! -   The Shape type Interactive Objects are <br>
//!   automatically decomposed into sub-shapes when <br>
//!   standard activation modes are launched. <br>
//! -   The "temporary" Interactive Objects present in the <br>
//!   Local Contexts are not automatically taken into <br>
//!   account. You have to load them manually if you <br>
//!  want to use them. <br>
//! -   The stages could be the following: <br>
//!   -   Open a Local Context with the right options; <br>
//!   -   Load/Visualize the required complementary <br>
//!    objects with the desired activation modes. <br>
//!   -   Activate Standard modes if necessary <br>
//! - Create its filters and add them to the Local Context <br>
//!   -   Detect/Select/recover the desired entities <br>
//!   -   Close the Local Context with the adequate index. <br>
//! -   It is useful to create an interactive editor, to which <br>
//!   you pass the Interactive Context. This will take care <br>
//!   of setting up the different contexts of <br>
//!   selection/presentation according to the operation <br>
//!   which you want to perform. <br>
public ref class OCAIS_InteractiveContext : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCAIS_InteractiveContext(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_InteractiveContext(Handle(AIS_InteractiveContext)* nativeHandle);

// Methods PUBLIC


//! Constructs the interactive context object defined by <br>
//! the principal viewer MainViewer. <br>
OCAIS_InteractiveContext(OCNaroWrappers::OCV3d_Viewer^ MainViewer);


//! Constructs the interactive context object defined by <br>
//! the principal viewer MainViewer and the collector <br>
//! (or trash) viewer. <br>
OCAIS_InteractiveContext(OCNaroWrappers::OCV3d_Viewer^ MainViewer, OCNaroWrappers::OCV3d_Viewer^ Collector);


virtual /*instead*/  void Delete() override;


 /*instead*/  System::Boolean IsCollectorClosed() ;


 /*instead*/  void CloseCollector() ;


 /*instead*/  void OpenCollector() ;


 /*instead*/  void SetAutoActivateSelection(System::Boolean Auto) ;


 /*instead*/  System::Boolean GetAutoActivateSelection() ;

//! Controls the choice between the using the display <br>
//! and selection modes of open local context which you <br>
//! have defined and activating those available by default. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the Interactive Object anIobj is <br>
//! displayed in the default active mode. This will be the <br>
//! object's default display mode, if there is one. <br>
//! Otherwise, it will be the context mode. The Interactive <br>
//! Object's default selection mode is activated. In <br>
//! general, this is 0. <br>
//! This syntax has the same behavior as local context, <br>
//! open or closed. If you want to view the object in open <br>
//! local context without selection, use the syntax below, <br>
//! setting aSelectionMode to -1. <br>
 /*instead*/  void Display(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, System::Boolean updateviewer) ;

//! Controls the choice between the using the display <br>
//! and selection modes of open local context which you <br>
//! have defined and activating those available by default. <br>
//! If no Local Context is opened. and the Interactive <br>
//! Object aniobj has no display mode of its own, the <br>
//! default display mode, 0, is used. Likewise, if aniobj <br>
//! has no selection mode of its own, the default one, 0, is used. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
//! If aSelectionMode equals -1, anIobj will not be <br>
//! activated: it will be displayed but will not be selectable. <br>
//! Use this if you want to view the object in open local <br>
//! context without selection. Note: This option is only <br>
//! available in Local Context. <br>
//! If allowDecomposition equals true, anIObj can have <br>
//! subshapes detected by selection mechanisms. anIObj <br>
//! must be able to give a shape selection modes which <br>
//! fit the AIS_Shape selection modes: <br>
//! -   vertices: 1 <br>
//! -   edges: 2 <br>
//! -   wires: 3. <br>
 /*instead*/  void Display(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, Standard_Integer amode, Standard_Integer aSelectionMode, System::Boolean updateviewer, System::Boolean allowdecomposition) ;

//! Allows you to load the Interactive Object aniobj <br>
//! with a given selection mode SelectionMode, and/or <br>
//! with the desired decomposition option, whether the <br>
//! object is visualized or not. If AllowDecomp = <br>
//! Standard_True and, if the interactive object is of <br>
//! the "Shape" type, these "standard" selection <br>
//! modes will be automatically activated as a function <br>
//! of the modes present in the Local Context. <br>
//! The loaded objects will be selectable but <br>
//! displayable in highlighting only when detected by the Selector. <br>
//! This method is available only when Local Contexts are open. <br>
 /*instead*/  void Load(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Integer SelectionMode, System::Boolean AllowDecomp) ;

//! To erase presentations in current local context, or <br>
//! failing that, in other local contexts which allow erasing. <br>
 /*instead*/  void Erase(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer, System::Boolean PutInCollector) ;

//! Updates viewer contents and returns the display <br>
//! mode of each aniobj object. Use only if more than <br>
//! one display mode is active in the main viewer. <br>
//! This method works only on presentation modes other <br>
//! than the default mode. Nothing is done if aMode is <br>
//! the default presentation mode. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void EraseMode(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Integer aMode, System::Boolean updateviewer) ;

//! Every erased object goes into the Collector viewer, <br>
//!          depending on PutInCollector value. <br>
 /*instead*/  void EraseAll(System::Boolean PutInCollector, System::Boolean updateviewer) ;

//! Displays all erased objects or display all objects from collector <br>
 /*instead*/  void DisplayAll(System::Boolean OnlyFromCollector, System::Boolean updateviewer) ;

//! display anIObj from the collector. <br>
 /*instead*/  void DisplayFromCollector(OCNaroWrappers::OCAIS_InteractiveObject^ anIObj, System::Boolean updateviewer) ;


//! Erases selected objects if there is no open active local context. <br>
//! If there is no local context activated and if <br>
//! updateviewer equals Standard_False, the <br>
//! presentation of the Interactive Object activates the <br>
//! selection mode; the object is displayed but no viewer <br>
//! will be updated. <br>
//! If a local context is open, this method is neutral. <br>
 /*instead*/  void EraseSelected(System::Boolean PutInCollector, System::Boolean updateviewer) ;

//! Displays selected objects if a local context is open. <br>
//! Displays current objects if there is no active local context. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation   of the Interactive <br>
//! Object activates   the   selection   mode; the   object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void DisplaySelected(System::Boolean updateviewer) ;

//! Changes the status of a temporary object. It will be <br>
//! kept at the neutral point, i.e. put in the list of <br>
//! displayed   objects along withwith   its temporary <br>
//! attributes. These include display mode and <br>
//! selection   mode, for example. <br>
//! Returns true if done. <br>
//! inWhichLocal gives the local context in which anIObj <br>
//! is displayed. By default, the index -1 refers to the last <br>
//! Local Context opened. <br>
 /*instead*/  System::Boolean KeepTemporary(OCNaroWrappers::OCAIS_InteractiveObject^ anIObj, Standard_Integer InWhichLocal) ;

//! Removes the interactive object aniobj from all viewers. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void Clear(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;

//! Empties the graphic presentation of the mode <br>
//! indexed by aMode. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
//! Warning <br>
//! Removes anIobj. anIobj is still active if it was <br>
//! previously activated. <br>
 /*instead*/  void ClearPrs(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Integer aMode, System::Boolean updateviewer) ;

//! Removes aniobj from every viewer. aniobj is no <br>
//! longer referenced in the Context. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation   of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void Remove(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;

//! Removes all the objects from all opened Local Contexts <br>
//!          and from the Neutral Point <br>
 /*instead*/  void RemoveAll(System::Boolean updateviewer) ;


//! Updates the display in the viewer to take dynamic <br>
//! detection into account. On dynamic detection by the <br>
//! mouse cursor, sensitive primitives are highlighted. <br>
//! The highlight color of entities detected by mouse <br>
//! movement is white by default. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void Hilight(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;


//! Changes the color of all the lines of the object in view, <br>
//! aniobj. It paints these lines the color passed as the <br>
//! argument, aCol. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void HilightWithColor(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCQuantity_NameOfColor aCol, System::Boolean updateviewer) ;


//! Removes hilighting from the entity aniobj. Updates the viewer. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void Unhilight(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;

//! Sets the display priority aPriority of the seen parts <br>
//! presentation of the entity anIobj. <br>
 /*instead*/  void SetDisplayPriority(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, Standard_Integer aPriority) ;

//! Set Z layer id for interactive object. The layer can be <br>
//! specified for displayed object only. The Z layers can be used to display <br>
//! temporarily presentations of some object in front of the other objects <br>
//! in the scene. The ids for Z layers are generated by V3d_Viewer. <br>
//! Note that Z layers differ from under-/overlayer in V3d_View: <br>
//! under-/overlayer are intended for specific 2D drawings that appear <br>
//! behind/in front of all 3D presentations, while SetZLayer() method <br>
//! applies to regular 3D presentations and does not imply any specific <br>
//! drawing methods. <br>
 /*instead*/  void SetZLayer(OCNaroWrappers::OCAIS_InteractiveObject^ theIObj, Standard_Integer theLayerId) ;

//! Get Z layer id set for displayed interactive object. <br>
//! If the object doesn't exists in context or has no computed presentations, <br>
//! the method returns -1. <br>
 /*instead*/  Standard_Integer GetZLayer(OCNaroWrappers::OCAIS_InteractiveObject^ theIObj) ;

//! Recomputes the seen parts presentation of the entity <br>
//! aniobj. If allmodes equals true, all presentations are <br>
//! present in the object even if unseen. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void Redisplay(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer, System::Boolean allmodes) ;

//! Recomputes the Prs/Selection of displayed objects of <br>
//!          a given type and a given signature. <br>
//!          if signature = -1  doesnt take signature criterion. <br>
 /*instead*/  void Redisplay(OCAIS_KindOfInteractive aTypeOfObject, Standard_Integer Signature, System::Boolean updateviewer) ;

//! Recomputes the displayed presentations, flags the others <br>
//!          Doesn't update presentations <br>
 /*instead*/  void RecomputePrsOnly(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, System::Boolean updateviewer, System::Boolean allmodes) ;

//! Recomputes the active selections, flags the others <br>
//!          Doesn't update presentations <br>
 /*instead*/  void RecomputeSelectionOnly(OCNaroWrappers::OCAIS_InteractiveObject^ anIObj) ;

//! Checks which presentations are flagged "to be recomputed" <br>
//!          and recomputes them if they are displayed. <br>
//!          This method doesn't force any Computation. <br>
//!          Recomputes Flagged selections if they are activated. <br>
 /*instead*/  void Update(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, System::Boolean updateviewer) ;


//! Sets the display mode of seen Interactive Objects. <br>
//! aMode provides the display mode index of the entity aniobj. <br>
//! If updateviewer equals Standard_True, the <br>
//! predominant mode aMode will overule the context mode. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object returns to the default selection mode; the <br>
//! object is displayed but no viewer will be updated. <br>
//! Note that display mode 3 is only used if you have an <br>
//! AIS_Textured Shape. <br>
 /*instead*/  void SetDisplayMode(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Integer aMode, System::Boolean updateviewer) ;


//! Unsets the display mode of seen Interactive Objects. <br>
//! aMode provides the display mode index of the entity aniobj. <br>
//! If updateviewer equals Standard_True, the <br>
//! predominant mode aMode will overule the context mode. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object returns to the default selection mode; the <br>
//! object is displayed but no viewer will be updated. <br>
 /*instead*/  void UnsetDisplayMode(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;


//! Sets the selection mode of Interactive Objects. <br>
//! aMode provides the selection mode index of the entity aniobj. <br>
 /*instead*/  void SetSelectionMode(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Integer aMode) ;


//! Removes selection mode from Interactive Objects. <br>
//! aMode provides the selection mode index of the entity aniobj. <br>
 /*instead*/  void UnsetSelectionMode(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;

//! Sets the selection sensitivity mode. SM_WINDOW mode <br>
//! uses the specified pixel tolerance to compute the sensitivity <br>
//! value, SM_VIEW mode allows to define the sensitivity manually. <br>
 /*instead*/  void SetSensitivityMode(OCStdSelect_SensitivityMode aMode) ;

//! Returns the selection sensitivity mode. <br>
 /*instead*/  OCStdSelect_SensitivityMode SensitivityMode() ;

//! Sets the sensitivity aPrecision <br>
//! according to the view size for the current context or local <br>
//! context if any is activated. <br>
//!   Sets the sensitivity aPrecision in pixels for the current context <br>
//! or local context if any is activated. By default, this <br>
//! sensitivity is equal to 4 pixels. <br>
//!   When a local context is open, the defined sensitivity applies to <br>
//! this local context instead of the main context. <br>
 /*instead*/  void SetSensitivity(Standard_Real aPrecision) ;

//! Returns the selection sensitivity value. <br>
 /*instead*/  Standard_Real Sensitivity() ;

//! Define the current selection pixel sensitivity <br>
//!		for this context or local context if any one is activated. <br>
//!  Warning: When a local context is open the sensitivity is apply on it <br>
//!          instead on the main context. <br>
 /*instead*/  void SetPixelTolerance(Standard_Integer aPrecision) ;

//! Returns the pixel tolerance. <br>
 /*instead*/  Standard_Integer PixelTolerance() ;

//! Puts the location aLocation on the initial graphic <br>
//! representation and the selection for the entity aniobj. <br>
//! In other words, aniobj is visible and selectable at a <br>
//! position other than initial position. <br>
//! Graphic and selection primitives are not recomputed. <br>
//! To clean the view correctly, you must reset the previous location. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCNaroWrappers::OCTopLoc_Location^ aLocation) ;

//! Puts the entity aniobj back into its initial position. <br>
 /*instead*/  void ResetLocation(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;


//! Returns true if the entity aniobj has a location. <br>
 /*instead*/  System::Boolean HasLocation(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;


//! Returns the location of the entity aniobj. <br>
 /*instead*/  OCTopLoc_Location^ Location(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;

//! change the current facing model apply on polygons for <br>
//! SetColor(), SetTransparency(), SetMaterial() methods <br>
//! default facing model is Aspect_TOFM_TWO_SIDE. This mean that attributes is <br>
//! applying both on the front and back face. <br>
 /*instead*/  void SetCurrentFacingModel(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCAspect_TypeOfFacingModel aModel) ;


 /*instead*/  void SetColor(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCQuantity_NameOfColor aColor, System::Boolean updateviewer) ;


//! Sets the color of the selected entity. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation   of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetColor(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCNaroWrappers::OCQuantity_Color^ aColor, System::Boolean updateviewer) ;

//! Removes the color selection for the selected entity. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void UnsetColor(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;


//! Sets the width of the entity aniobj. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
virtual /*instead*/  void SetWidth(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Real aValue, System::Boolean updateviewer) ;


//! Removes the width setting of the entity aniobj. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
virtual /*instead*/  void UnsetWidth(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;


//! Provides the type of material setting for the view of <br>
//! the entity aniobj. <br>
//! The range of settings includes: BRASS, BRONZE, <br>
//! GOLD, PEWTER, SILVER, STONE. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetMaterial(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCGraphic3d_NameOfMaterial aName, System::Boolean updateviewer) ;


//! Removes the type of material setting for viewing the <br>
//! entity aniobj. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void UnsetMaterial(OCNaroWrappers::OCAIS_InteractiveObject^ anObj, System::Boolean updateviewer) ;

//! Provides the transparency settings for viewing the <br>
//! entity aniobj. The transparency value aValue may be <br>
//! between 0.0, opaque, and 1.0, fully transparent. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetTransparency(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Real aValue, System::Boolean updateviewer) ;


//! Removes   the transparency settings for viewing the <br>
//! entity aniobj. The transparency value aValue may be <br>
//! between 0.0, opaque, and 1.0, fully transparent. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void UnsetTransparency(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;

//! Sets the model of degeneration for the shaded representation <br>
//!   of the object <aniobj> <br>
//!   according to the degenerate ratio >= 0. & <= 1. where : <br>
//!   <aRatio> = 0. indicate that all polygons of the object <br>
//!      will be displayed. <br>
//!   <aRatio> = 1. indicate that no polygons will be displayed !! <br>
//!   When <ARatio> is > 0 & < 1. the corresponding amount <br>
//!   of object polygons will be displayed with a random method. <br>
//!  Warning: the degenerate structure is shown only when <br>
//! the animation and degenerate flags are set to TRUE <br>
//! in V3d_View::SetAnimationMode(..) <br>
 /*instead*/  void SetDegenerateModel(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCAspect_TypeOfDegenerateModel aModel, Quantity_Ratio aRatio) ;

//! Defines the degenerate method to apply on the shaded <br>
//!  representation of all objects. <br>
 /*instead*/  void SetDegenerateModel(OCAspect_TypeOfDegenerateModel aModel, Quantity_Ratio aSkipRatio) ;


//! Sets the attributes of the interactive object aniobj by <br>
//! plugging the attribute manager aDrawer into the local <br>
//! context. The graphic attributes of aDrawer such as <br>
//! visualization mode, color, and material, are then used <br>
//! to display aniobj. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetLocalAttributes(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCNaroWrappers::OCAIS_Drawer^ aDrawer, System::Boolean updateviewer) ;


//! Removes the settings for local attributes of the entity <br>
//! anObj   and returns to the Neutral Point attributes or <br>
//! those of the previous local context. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void UnsetLocalAttributes(OCNaroWrappers::OCAIS_InteractiveObject^ anObj, System::Boolean updateviewer) ;

//! Sets up polygon offsets for the given AIS_InteractiveObject. <br>
//!          It simply calls anObj->SetPolygonOffsets() <br>
 /*instead*/  void SetPolygonOffsets(OCNaroWrappers::OCAIS_InteractiveObject^ anObj, Standard_Integer aMode, Standard_ShortReal aFactor, Standard_ShortReal aUnits, System::Boolean updateviewer) ;

//! simply calls anObj->HasPolygonOffsets() <br>
 /*instead*/  System::Boolean HasPolygonOffsets(OCNaroWrappers::OCAIS_InteractiveObject^ anObj) ;

//! Retrieves current polygon offsets settings for <anObj>. <br>
 /*instead*/  void PolygonOffsets(OCNaroWrappers::OCAIS_InteractiveObject^ anObj, Standard_Integer& aMode, Standard_ShortReal& aFactor, Standard_ShortReal& aUnits) ;

//! Sets the size aSize of the trihedron. <br>
//! Is used to change the default value 100 mm for <br>
//! display of trihedra. <br>
//! Use of this function in one of your own interactive <br>
//! objects requires a call to the Compute function of the <br>
//! new class. This will recalculate the presentation for <br>
//! every trihedron displayed. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetTrihedronSize(Standard_Real aSize, System::Boolean updateviewer) ;

//! returns the current value of trihedron size. <br>
 /*instead*/  Standard_Real TrihedronSize() ;


//! Sets the plane size defined by the length in the X <br>
//! direction XSize and that in the Y direction YSize. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetPlaneSize(Standard_Real aSizeX, Standard_Real aSizeY, System::Boolean updateviewer) ;


//! Sets the plane size aSize. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
//! May be used if PlaneSize returns true. <br>
 /*instead*/  void SetPlaneSize(Standard_Real aSize, System::Boolean updateviewer) ;

//! Returns true if the length in the X direction XSize is <br>
//! the same as that in the Y direction YSize. <br>
 /*instead*/  System::Boolean PlaneSize(Standard_Real& XSize, Standard_Real& YSize) ;

//! Returns the display status of the entity anIobj. <br>
//! This will be one of the following: <br>
//! -   DS_Displayed   displayed in main viewer <br>
//! -   DS_Erased   erased in the Collector <br>
//! -   DS_FullErased   erased everywhere but in the Collector <br>
//! -   DS_Temporary   temporarily displayed <br>
//! -   DS_None   nowhere displayed. <br>
 /*instead*/  OCAIS_DisplayStatus DisplayStatus(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj) ;


//! Returns the list of active display modes for the entity aniobj. <br>
 /*instead*/  OCTColStd_ListOfInteger^ DisplayedModes(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;

//! Returns true if anIobj is displayed in the interactive context. <br>
 /*instead*/  System::Boolean IsDisplayed(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj) ;


 /*instead*/  System::Boolean IsDisplayed(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Integer aMode) ;


 /*instead*/  System::Boolean IsHilighted(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;

//! if <anIObj> is hilighted with a specific color <br>
//!          <WithColor> will be returned TRUE <br>
//!          <theHiCol> gives the name of the hilightcolor <br>
 /*instead*/  System::Boolean IsHilighted(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, System::Boolean& WithColor, OCQuantity_NameOfColor& theHiCol) ;


//! Returns true if the entity anIobj is in the Collector viewer. <br>
 /*instead*/  System::Boolean IsInCollector(OCNaroWrappers::OCAIS_InteractiveObject^ anIObj) ;


//! Returns the display priority of the entity anIobj. This <br>
//! will be display   mode of anIobj if it is in the main <br>
//! viewer, and the highlight mode if it is in the Collector viewer. <br>
 /*instead*/  Standard_Integer DisplayPriority(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj) ;


//! Returns true if a view of the Interactive Object aniobj has color. <br>
 /*instead*/  System::Boolean HasColor(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;


 /*instead*/  OCQuantity_NameOfColor Color(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;


//! Returns the color Color of the entity aniobj in the interactive context. <br>
 /*instead*/  void Color(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, OCNaroWrappers::OCQuantity_Color^ acolor) ;


//! Returns the width of the Interactive Object aniobj in <br>
//! the interactive context. <br>
virtual /*instead*/  Standard_Real Width(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;


//! Returns the status astatus of the Interactive Context <br>
//! for the view of the Interactive Object anObj. <br>
 /*instead*/  void Status(OCNaroWrappers::OCAIS_InteractiveObject^ anObj, OCNaroWrappers::OCTCollection_ExtendedString^ astatus) ;


//! Updates the current viewer, the viewer in Neutral Point. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  void UpdateCurrentViewer() ;

//! Updates the Collector viewer. <br>
 /*instead*/  void UpdateCollector() ;

//! Returns the display mode setting. <br>
//! Note that mode 3 is only used. <br>
 /*instead*/  Standard_Integer DisplayMode() ;


//! Returns the name of the color used to show <br>
//! highlighted entities, that is, entities picked out by the mouse. <br>
 /*instead*/  OCQuantity_NameOfColor HilightColor() ;


//! Returns the name of the color used to show selected entities. <br>
//! By default, this is Quantity_NOC_GRAY80. <br>
 /*instead*/  OCQuantity_NameOfColor SelectionColor() ;

//! Returns the name of the color used to show preselection. <br>
//! By default, this is Quantity_NOC_GREEN. <br>
 /*instead*/  OCQuantity_NameOfColor PreSelectionColor() ;


//! Returns the name of the color used by default. <br>
//! By default, this is Quantity_NOC_GOLDENROD. <br>
 /*instead*/  OCQuantity_NameOfColor DefaultColor() ;


//! Returns the name of the color used to show that an <br>
//! object is not currently selected. <br>
//! By default, this is Quantity_NOC_GRAY40. <br>
 /*instead*/  OCQuantity_NameOfColor SubIntensityColor() ;


//! Sets the color used to show highlighted entities, that <br>
//! is, entities picked by the mouse. <br>
//! By default, this is Quantity_NOC_CYAN1. <br>
 /*instead*/  void SetHilightColor(OCQuantity_NameOfColor aHiCol) ;


//! Sets the color used to show selected entities. <br>
//! By default, this is Quantity_NOC_GRAY80. <br>
 /*instead*/  void SelectionColor(OCQuantity_NameOfColor aCol) ;


//! Allows you to set the color used to show preselection. <br>
//! By default, this is Quantity_NOC_GREEN. <br>
//! A preselected entity is one which has been selected <br>
//! as the domain of application of a function such as a fillet. <br>
 /*instead*/  void SetPreselectionColor(OCQuantity_NameOfColor aCol) ;


//! Sets the color used to show that an object is not currently selected. <br>
//! By default, this is Quantity_NOC_GRAY40. <br>
 /*instead*/  void SetSubIntensityColor(OCQuantity_NameOfColor aCol) ;


//! Sets the display mode of seen Interactive Objects. <br>
//! aMode provides the display mode index of the entity aniobj. <br>
//! If updateviewer equals Standard_True, the <br>
//! predominant mode aMode will overule the context mode. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object returns to the default selection mode; the <br>
//! object is displayed but no viewer will be updated. <br>
//! Note that display mode 3 is only used if you have an <br>
//! AIS_Textured Shape. <br>
 /*instead*/  void SetDisplayMode(OCAIS_DisplayMode AMode, System::Boolean updateviewer) ;


//! Sets the deviation coefficient aCoefficient. <br>
//! Drawings of curves or patches are made with respect <br>
//! to a maximal chordal deviation. A Deviation coefficient <br>
//! is used in the shading display mode. The shape is <br>
//! seen decomposed into triangles. These are used to <br>
//! calculate reflection of light from the surface of the <br>
//! object. The triangles are formed from chords of the <br>
//! curves in the shape. The deviation coefficient <br>
//! aCoefficient gives the highest value of the angle with <br>
//! which a chord can deviate from a tangent to a   curve. <br>
//! If this limit is reached, a new triangle is begun. <br>
//! This deviation is absolute and is set through the <br>
//! method: SetMaximalChordialDeviation. The default <br>
//! value is 0.001. <br>
//! In drawing shapes, however, you are allowed to ask <br>
//! for a relative deviation. This deviation will be: <br>
//! SizeOfObject * DeviationCoefficient. <br>
//! default 0.001 <br>
 /*instead*/  void SetDeviationCoefficient(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Real aCoefficient, System::Boolean updateviewer) ;


 /*instead*/  void SetDeviationAngle(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Real anAngle, System::Boolean updateviewer) ;

//! Calls the AIS_Shape SetAngleAndDeviation to set <br>
//!          both Angle and Deviation coefficients <br>
 /*instead*/  void SetAngleAndDeviation(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Real anAngle, System::Boolean updateviewer) ;


//! Sets the deviation coefficient aCoefficient for <br>
//! removal of hidden lines created by different <br>
//! viewpoints in different presentations. The Default value is 0.02. <br>
 /*instead*/  void SetHLRDeviationCoefficient(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Real aCoefficient, System::Boolean updateviewer) ;


 /*instead*/  void SetHLRDeviationAngle(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Real anAngle, System::Boolean updateviewer) ;

//! Computes a HLRAngle and a <br>
//! HLRDeviationCoefficient by means of the angle <br>
//! anAngle and sets the corresponding methods in the <br>
//! default drawing tool with these values. <br>
//! <br>
 /*instead*/  void SetHLRAngleAndDeviation(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, Standard_Real anAngle, System::Boolean updateviewer) ;

//! Sets the deviation coefficient aCoefficient. <br>
//! Drawings of curves or patches are made with respect <br>
//! to a maximal chordal deviation. A Deviation coefficient <br>
//! is used in the shading display mode. The shape is <br>
//! seen decomposed into triangles. These are used to <br>
//! calculate reflection of light from the surface of the <br>
//! object. The triangles are formed from chords of the <br>
//! curves in the shape. The deviation coefficient <br>
//! aCoefficient gives the highest value of the angle with <br>
//! which a chord can deviate from a tangent to a   curve. <br>
//! If this limit is reached, a new triangle is begun. <br>
//! This deviation is absolute and is set through the <br>
//! method: SetMaximalChordialDeviation. The default <br>
//! value is 0.001. <br>
//! In drawing shapes, however, you are allowed to ask <br>
//! for a relative deviation. This deviation will be: <br>
//! SizeOfObject * DeviationCoefficient. <br>
//! default 0.001 <br>
 /*instead*/  void SetDeviationCoefficient(Standard_Real aCoefficient) ;

//! Returns the deviation coefficient. <br>
//! Drawings of curves or patches are made with respect <br>
//! to a maximal chordal deviation. A Deviation coefficient <br>
//! is used in the shading display mode. The shape is <br>
//! seen decomposed into triangles. These are used to <br>
//! calculate reflection of light from the surface of the <br>
//! object. The triangles are formed from chords of the <br>
//! curves in the shape. The deviation coefficient gives <br>
//! the highest value of the angle with which a chord can <br>
//! deviate from a tangent to a   curve. If this limit is <br>
//! reached, a new triangle is begun. <br>
//! This deviation is absolute and is set through <br>
//! AIS_Drawer::SetMaximalChordialDeviation. The <br>
//! default value is 0.001. <br>
//! In drawing shapes, however, you are allowed to ask <br>
//! for a relative deviation. This deviation will be: <br>
//! SizeOfObject * DeviationCoefficient. <br>
 /*instead*/  Standard_Real DeviationCoefficient() ;

//! default 6degrees <br>
 /*instead*/  void SetDeviationAngle(Standard_Real anAngle) ;


 /*instead*/  Standard_Real DeviationAngle() ;

//!  Sets the deviation coefficient aCoefficient for <br>
//! removal of hidden lines created by different <br>
//! viewpoints in different presentations. The Default value is 0.02. <br>
 /*instead*/  void SetHLRDeviationCoefficient(Standard_Real aCoefficient) ;


//! Returns the real number value of the hidden line <br>
//! removal deviation coefficient. <br>
//! A Deviation coefficient is used in the shading display <br>
//! mode. The shape is seen decomposed into triangles. <br>
//! These are used to calculate reflection of light from the <br>
//! surface of the object. <br>
//! The triangles are formed from chords of the curves in <br>
//! the shape. The deviation coefficient give the highest <br>
//! value of the angle with which a chord can deviate <br>
//! from a tangent to a curve. If this limit is reached, a <br>
//! new triangle is begun. <br>
//! To find the hidden lines, hidden line display mode <br>
//! entails recalculation of the view at each different <br>
//! projector perspective. <br>
//! Because hidden lines entail calculations of more than <br>
//! usual complexity to decompose them into these <br>
//! triangles, a deviation coefficient allowing greater <br>
//! tolerance is used. This increases efficiency in calculation. <br>
//! The Default value is 0.02. <br>
 /*instead*/  Standard_Real HLRDeviationCoefficient() ;

//! Sets the HLR angle anAngle. <br>
 /*instead*/  void SetHLRAngle(Standard_Real anAngle) ;


//! Returns the real number value of the deviation angle <br>
//! in hidden line removal views in this interactive context. <br>
//! The default value is 20*PI/180. <br>
 /*instead*/  Standard_Real HLRAngle() ;

//! compute with anangle a HLRAngle and a HLRDeviationCoefficient <br>
//!          and set them in myHLRAngle and in myHLRDeviationCoefficient <br>
//!          of myDefaultDrawer ; <br>
//!          anAngle is in radian ; ( 1 deg < angle in deg < 20 deg) <br>
 /*instead*/  void SetHLRAngleAndDeviation(Standard_Real anAngle) ;

//! Initializes hidden line aspect in the default drawing tool, or Drawer. <br>
//! The default values are: <br>
//!          Color: Quantity_NOC_YELLOW <br>
//!          Type of line: Aspect_TOL_DASH <br>
//!          Width: 1. <br>
 /*instead*/  OCPrs3d_LineAspect^ HiddenLineAspect() ;


//! Sets the hidden line aspect anAspect. <br>
//! anAspect defines display attributes for hidden lines in <br>
//! HLR projections. <br>
 /*instead*/  void SetHiddenLineAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! returns Standard_True if the hidden lines are to be drawn. <br>
//!          By default the hidden lines are not drawn. <br>
 /*instead*/  System::Boolean DrawHiddenLine() ;


 /*instead*/  void EnableDrawHiddenLine() ;


 /*instead*/  void DisableDrawHiddenLine() ;

//! Sets the number of U and V isoparameters displayed. <br>
 /*instead*/  void SetIsoNumber(Standard_Integer NbIsos, OCAIS_TypeOfIso WhichIsos) ;

//! Returns the number of U and V isoparameters displayed. <br>
 /*instead*/  Standard_Integer IsoNumber(OCAIS_TypeOfIso WhichIsos) ;

//! Returns True if drawing isoparameters on planes is enabled. <br>
 /*instead*/  void IsoOnPlane(System::Boolean SwitchOn) ;

//! Returns True if drawing isoparameters on planes is enabled. <br>//! if <forUIsos> = False, <br>
 /*instead*/  System::Boolean IsoOnPlane() ;

//! Sets the graphic basic aspect to the current presentation of <br>
//!		ALL selected objects. <br>
//!          When <globalChange> is TRUE , the full object presentation <br>
//!          is changed. <br>
//!          When <globalChange> is FALSE , only the current group <br>
//!          of the object presentation is changed. <br>
//!	  	Updates the viewer or collector when <updateViewer> is TRUE <br>
 /*instead*/  void SetSelectedAspect(OCNaroWrappers::OCPrs3d_BasicAspect^ anAspect, System::Boolean globalChange, System::Boolean updateViewer) ;

//! Relays mouse position in pixels XPix and YPix to the <br>
//! interactive context selectors. This is done by the view <br>
//! aView passing this position to the main viewer and updating it. <br>
//! Functions in both Neutral Point and local contexts. <br>
 /*instead*/  OCAIS_StatusOfDetection MoveTo(Standard_Integer XPix, Standard_Integer YPix, OCNaroWrappers::OCV3d_View^ aView) ;

//! returns True  if other entities  were detected  in the <br>
//!          last mouse detection <br>
 /*instead*/  System::Boolean HasNextDetected() ;

//! if more than 1 object is detected by the selector, <br>
//!          only the "best" owner is hilighted at the mouse position. <br>
//!          This Method allows the user to hilight one after another <br>
//!          the other detected entities. <br>
//!          if The method select is called, the selected entity <br>
//!          will be the hilighted one! <br>
//!          returns the Rank of hilighted entity <br>
//!          WARNING : Loop Method. When all the detected entities <br>
//!                    have been hilighted , the next call will hilight <br>
//!                    the first one again <br>
 /*instead*/  Standard_Integer HilightNextDetected(OCNaroWrappers::OCV3d_View^ aView) ;

//! Same as previous methods in reverse direction... <br>
 /*instead*/  Standard_Integer HilightPreviousDetected(OCNaroWrappers::OCV3d_View^ aView) ;

//! Selects everything found in the bounding rectangle <br>
//! defined by the pixel minima and maxima, XPMin, <br>
//! YPMin, XPMax, and YPMax in the view, aView <br>
//! The objects detected are passed to the main viewer, <br>
//! which is then updated. <br>
 /*instead*/  OCAIS_StatusOfPick Select(Standard_Integer XPMin, Standard_Integer YPMin, Standard_Integer XPMax, Standard_Integer YPMax, OCNaroWrappers::OCV3d_View^ aView, System::Boolean updateviewer) ;

//! polyline selection; clears the previous picked list <br>
 /*instead*/  OCAIS_StatusOfPick Select(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCV3d_View^ aView, System::Boolean updateviewer) ;

//! Stores  and hilights the previous detected; Unhilights <br>
//!          the previous picked. <br>
 /*instead*/  OCAIS_StatusOfPick Select(System::Boolean updateviewer) ;

//! adds the last detected to the list of previous picked. <br>
//!          if the last detected was already declared as picked, <br>
//!          removes it from the Picked List. <br>
 /*instead*/  OCAIS_StatusOfPick ShiftSelect(System::Boolean updateviewer) ;

//! adds the last detected to the list of previous picked. <br>
//!          if the last detected was already declared as picked, <br>
//!          removes it from the Picked List. <br>
 /*instead*/  OCAIS_StatusOfPick ShiftSelect(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCV3d_View^ aView, System::Boolean updateviewer) ;

//! rectangle  of selection  ; adds new detected entities into the <br>
//!          picked list, removes the detected entities that were already stored... <br>
 /*instead*/  OCAIS_StatusOfPick ShiftSelect(Standard_Integer XPMin, Standard_Integer YPMin, Standard_Integer XPMax, Standard_Integer YPMax, OCNaroWrappers::OCV3d_View^ aView, System::Boolean updateviewer) ;

//! Specify whether selected object must be hilighted when mouse cursor <br>
//! is moved above it (in MoveTo method). By default this value is false and <br>
//! selected object is not hilighted in this case. <br>
 /*instead*/  void SetToHilightSelected(System::Boolean toHilight) ;

//! Return value specified whether selected object must be hilighted <br>
//! when mouse cursor is moved above it <br>
 /*instead*/  System::Boolean ToHilightSelected() ;


//! Updates the view of the current object in open context. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetCurrentObject(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;


//! Allows you to add a current object to the list of current <br>
//! objects or remove it from that list. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void AddOrRemoveCurrentObject(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;

//! Updates the list of current objects, i.e. hilights new <br>
//! current objects, removes hilighting from former current objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! <br>
 /*instead*/  void UpdateCurrent() ;


//! Returns the current selection touched by the cursor. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  System::Boolean WasCurrentTouched() ;


 /*instead*/  void SetOkCurrent() ;


//! Returns true if there is a non-null interactive object in Neutral Point. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  System::Boolean IsCurrent(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;


//! Initializes a scan of the current selected objects in <br>
//! Neutral Point. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  void InitCurrent() ;


//! Returns true if there is another object found by the <br>
//! scan of the list of current objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  System::Boolean MoreCurrent() ;


//! Continues the scan to the next object in the list of <br>
//! current objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  void NextCurrent() ;


//! Returns the current interactive object. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  OCAIS_InteractiveObject^ Current() ;


 /*instead*/  Standard_Integer NbCurrents() ;


//! Returns the first current object in the list of current objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  OCAIS_InteractiveObject^ FirstCurrentObject() ;


//! Highlights current objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void HilightCurrents(System::Boolean updateviewer) ;


//! Removes highlighting from current objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void UnhilightCurrents(System::Boolean updateviewer) ;


//! Empties previous current objects in order to get the <br>
//! current objects detected by the selector using <br>
//! UpdateCurrent. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void ClearCurrents(System::Boolean updateviewer) ;

//! Puts the interactive object aniObj in the list of <br>
//! selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetSelected(OCNaroWrappers::OCAIS_InteractiveObject^ aniObj, System::Boolean updateviewer) ;

//! puts the selected list in the current objects List. <br>
 /*instead*/  void SetSelectedCurrent() ;

//! updates the list of selected objects <br>
//!          i.e. hilights the new selected <br>
//!          unhilights old selected objects <br>
 /*instead*/  void UpdateSelected(System::Boolean updateviewer) ;

//!Allows you to add a selected object to the list of <br>
//! selected objects or remove it from that list. This entity <br>
//! can be an Interactive Object aniobj or its owner <br>
//! aShape as can be seen in the two syntaxes above. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void AddOrRemoveSelected(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;


//! Highlights selected objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void HilightSelected(System::Boolean updateviewer) ;


//! Removes highlighting from selected objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void UnhilightSelected(System::Boolean updateviewer) ;


//! Empties previous selected objects in order to get the <br>
//! selected objects detected by the selector using <br>
//! UpdateSelected. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void ClearSelected(System::Boolean updateviewer) ;

//!  No right to Add a selected Shape (Internal Management <br>
//!           of shape Selection). <br>
//!           A Previous selected shape may only be removed. <br>
 /*instead*/  void AddOrRemoveSelected(OCNaroWrappers::OCTopoDS_Shape^ aShape, System::Boolean updateviewer) ;

//! allows to add/remove in the selected list the entities <br>
//!          represented by <anOwner> in the selection process. <br>
 /*instead*/  void AddOrRemoveSelected(OCNaroWrappers::OCSelectMgr_EntityOwner^ anOwner, System::Boolean updateviewer) ;


//! Finds the selected object aniobj in local context and <br>
//! returns its name. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//!  local context, selected objects. <br>
 /*instead*/  System::Boolean IsSelected(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj) ;


//! Initializes a scan of the selected objects in local context. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  void InitSelected() ;


//! Returns true if there is another object found by the <br>
//! scan of the list of selected objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  System::Boolean MoreSelected() ;


//! Continues the scan to the next object in the list of <br>
//! selected objects. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  void NextSelected() ;


 /*instead*/  Standard_Integer NbSelected() ;


//! Returns true if the interactive context has a shape <br>
//! selected in it which results from the decomposition of <br>
//! another entity in local context. <br>
//! If HasSelectedShape returns true, SelectedShape <br>
//! returns the shape which has been shown to be <br>
//! selected. Interactive returns the Interactive Object <br>
//! from which the shape has been selected. <br>
//! If HasSelectedShape returns false, Interactive <br>
//! returns the interactive entity selected by the click of the mouse. <br>
 /*instead*/  System::Boolean HasSelectedShape() ;


//!        Returns the selected shape in the open local context. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  OCTopoDS_Shape^ SelectedShape() ;


//! Returns the owner of the selected entity resulting <br>
//! from the decomposition of another entity in local context. <br>
 /*instead*/  OCSelectMgr_EntityOwner^ SelectedOwner() ;

//! Returns a collection containing all entity owners <br>
//!         created for the interactive object <theIObj> in <br>
//!         the selection mode theMode (in all active modes <br>
//!         if the Mode == -1) <br>
 /*instead*/  void EntityOwners(OCNaroWrappers::OCSelectMgr_IndexedMapOfOwner^ theOwners, OCNaroWrappers::OCAIS_InteractiveObject^ theIObj, Standard_Integer theMode) ;

//! Returns the location of the selected Interactive Object. <br>
 /*instead*/  OCAIS_InteractiveObject^ Interactive() ;


 /*instead*/  OCAIS_InteractiveObject^ SelectedInteractive() ;


//! Returns true if the applicative object has an owner <br>
//! from Interactive attributed to it. <br>
 /*instead*/  System::Boolean HasApplicative() ;


//! Returns the owner of the applicative entity detected <br>
//! in interactive context. The owner can be a shape for <br>
//! a set of sub-shapes or a sub-shape for sub-shapes <br>
//! which it is composed of. <br>
 /*instead*/  OCStandard_Transient^ Applicative() ;


//! Returns true if there is a mouse-detected entity in local context. <br>
//! If there is no open local context, the objects selected <br>
//! are called current objects; selected objects if there is <br>
//! one. Iterators allow entities to be recovered in either <br>
//! case. This method is one of a set which allows you to <br>
//! manipulate the objects which have been placed in these two lists. <br>
 /*instead*/  System::Boolean HasDetected() ;


//! Returns true if there is a detected shape in local context. <br>
//! If there is no open local context, the objects selected <br>
//! are called current objects; selected objects if there is <br>
//! one. Iterators allow entities to be recovered in either <br>
//! case. This method is one of a set which allows you to <br>
//! manipulate the objects which have been placed in these two lists. <br>
 /*instead*/  System::Boolean HasDetectedShape() ;


//! Returns the shape detected in local context. <br>
//! If there is no open local context, the objects selected <br>
//! are called current objects; selected objects if there is <br>
//! one. Iterators allow entities to be recovered in either <br>
//! case. This method is one of a set which allows you to <br>
//! manipulate the objects which have been placed in these two lists. <br>
 /*instead*/  OCTopoDS_Shape^ DetectedShape() ;


//! Returns the interactive objects last detected in open context. <br>
//! If there is no open local context, the objects selected <br>
//! are called current objects; selected objects if there is <br>
//! one. Iterators allow entities to be recovered in either <br>
//! case. This method is one of a set which allows you to <br>
//! manipulate the objects which have been placed in these two lists. <br>
 /*instead*/  OCAIS_InteractiveObject^ DetectedInteractive() ;

//! returns the owner of the detected sensitive primitive. <br>
 /*instead*/  OCSelectMgr_EntityOwner^ DetectedOwner() ;


 /*instead*/  void InitDetected() ;


 /*instead*/  System::Boolean MoreDetected() ;


 /*instead*/  void NextDetected() ;


 /*instead*/  OCTopoDS_Shape^ DetectedCurrentShape() ;


 /*instead*/  OCAIS_InteractiveObject^ DetectedCurrentObject() ;


//! Opens local contexts and specifies how this is to be <br>
//! done. The options listed above function in the following manner: <br>
//! -   UseDisplayedObjects -allows you to load or not <br>
//!   load the interactive objects visualized at Neutral <br>
//!   Point in the local context which you open. If false, <br>
//!   the local context is empty after being opened. If <br>
//!   true, the objects at Neutral Point are loaded by their <br>
//!   default selection mode. <br>
//! -   AllowShapeDecomposition -AIS_Shape allows or <br>
//!   prevents decomposition in standard shape location <br>
//!   mode of objects at Neutral Point which are <br>
//!   type-"privileged". This Flag is only taken into <br>
//!   account when UseDisplayedObjects is true. <br>
//! -   AcceptEraseOfObjects -authorises other local <br>
//!   contexts to erase the interactive objects present in <br>
//!   this context. This option is rarely used. <br>
//! -   BothViewers - Has no use currently defined. <br>
//!   This method returns the index of the created local <br>
//! context. It should be kept and used to close the context. <br>
//! Opening a local context allows you to prepare an <br>
//! environment for temporary presentations and <br>
//! selections which will disappear once the local context is closed. <br>
//! You can open several local contexts, but only the last <br>
//! one will be active. <br>
 /*instead*/  Standard_Integer OpenLocalContext(System::Boolean UseDisplayedObjects, System::Boolean AllowShapeDecomposition, System::Boolean AcceptEraseOfObjects, System::Boolean BothViewers) ;

//! Allows you to close local contexts. For greater <br>
//! security, you should close the context with the <br>
//! index Index given on opening. <br>
//! When you close a local context, the one before, <br>
//! which is still on the stack,   reactivates. If none is <br>
//! left, you return to Neutral Point. <br>
//! If a local context is open and if updateviewer <br>
//! equals Standard_False, the presentation of the <br>
//! Interactive Object activates the selection mode; the <br>
//! object is displayed but no viewer will be updated. <br>
//! Warning <br>
//! When the index isn't specified, the current context <br>
//! is closed. This option can be dangerous, as other <br>
//! Interactive Functions can open local contexts <br>
//! without necessarily warning the user. <br>
 /*instead*/  void CloseLocalContext(Standard_Integer Index, System::Boolean updateviewer) ;

//! returns -1 if no opened local context. <br>
 /*instead*/  Standard_Integer IndexOfCurrentLocal() ;


//! Allows you to close all local contexts at one go and <br>
//! return to Neutral Point. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void CloseAllContexts(System::Boolean updateviewer) ;

//! to   be  used only with no  opened <br>
//!        local context..  displays and activates objects in their <br>
//!        original state before local contexts were opened... <br>
 /*instead*/  void ResetOriginalState(System::Boolean updateviewer) ;

//! clears Objects/Filters/Activated Modes list in the current opened <br>
//!          local context. <br>
 /*instead*/  void ClearLocalContext(OCAIS_ClearMode TheMode) ;


 /*instead*/  void UseDisplayedObjects() ;

//! when a local Context is opened, one is able to <br>
//!          use/not use the displayed objects at neutral point <br>
//!          at anytime. <br>
 /*instead*/  void NotUseDisplayedObjects() ;

//! initializes the list of presentations to be displayed <br>
//!          returns False if No Local COnte <br>
 /*instead*/  System::Boolean BeginImmediateDraw() ;

//! returns True if <anIObj> has been stored in the list. <br>
 /*instead*/  System::Boolean ImmediateAdd(OCNaroWrappers::OCAIS_InteractiveObject^ anIObj, Standard_Integer aMode) ;

//! returns True if <anIObj> has been removed from the list. <br>
 /*instead*/  System::Boolean ImmediateRemove(OCNaroWrappers::OCAIS_InteractiveObject^ anIObj, Standard_Integer aMode) ;

//! returns True if the immediate display has been done. <br>
 /*instead*/  System::Boolean EndImmediateDraw(OCNaroWrappers::OCV3d_View^ aView, System::Boolean DoubleBuf) ;

//! Uses the First Active View of Main Viewer!!! <br>
//!          returns True if the immediate display has been done. <br>
 /*instead*/  System::Boolean EndImmediateDraw(System::Boolean DoubleBuf) ;


 /*instead*/  System::Boolean IsImmediateModeOn() ;

//! Transforms the current presentation of the object <anObject> <br>
//!          using the transient graphic space of the view <aView> in <br>
//!          immediat mode graphics. <br>
 /*instead*/  void Drag(OCNaroWrappers::OCV3d_View^ aView, OCNaroWrappers::OCAIS_InteractiveObject^ anObject, OCNaroWrappers::OCGeom_Transformation^ aTranformation, System::Boolean postConcatenate, System::Boolean update, System::Boolean zBuffer) ;


//! Sets the highlighting status aStatus of detected and <br>
//! selected entities. <br>
//! Whether you are in Neutral Point or local context, this <br>
//! is automatically managed by the Interactive Context. <br>
//! This function allows you to disconnect the automatic mode. <br>
 /*instead*/  void SetAutomaticHilight(System::Boolean aStatus) ;


//! Returns true if the automatic highlight mode is active <br>
//! in an open context. <br>
 /*instead*/  System::Boolean AutomaticHilight() ;

//! Enables/Disables the Z detection. <br>
//!		If TRUE the detection echo can be partially hidden by the <br>
//!		detected object. <br>
 /*instead*/  void SetZDetection(System::Boolean aStatus) ;

//! Retrieves the Z detection state. <br>
 /*instead*/  System::Boolean ZDetection() ;

//! Activates the selection mode aMode whose index is <br>
//! given, for the given interactive entity anIobj. <br>
 /*instead*/  void Activate(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, Standard_Integer aMode) ;

//! Deactivates all the activated selection modes <br>
//!          of an object. <br>
 /*instead*/  void Deactivate(OCNaroWrappers::OCAIS_InteractiveObject^ anIObj) ;


//! Deactivates all the activated selection modes of the <br>
//! interactive object anIobj with a given selection mode aMode. <br>
 /*instead*/  void Deactivate(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, Standard_Integer aMode) ;


//! Returns the list of activated selection modes in an open context. <br>
 /*instead*/  void ActivatedModes(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, OCNaroWrappers::OCTColStd_ListOfInteger^ theList) ;

//! to be Used only with opened local context and <br>
//!          if <anIobj> is of type shape... <br>
//!          if <aStatus> = True <anIobj> will be sensitive to <br>
//!                         shape selection modes activation. <br>
//!                       = False, <anIobj> will not be senstive <br>
//!                       any more. <br>
//! <br>
 /*instead*/  void SetShapeDecomposition(OCNaroWrappers::OCAIS_InteractiveObject^ anIobj, System::Boolean aStatus) ;


//! Sets the temporary graphic attributes of the entity <br>
//! anObj. These are provided by the attribute manager <br>
//! aDrawer and are valid for a particular local context only. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SetTemporaryAttributes(OCNaroWrappers::OCAIS_InteractiveObject^ anObj, OCNaroWrappers::OCPrs3d_Drawer^ aDrawer, System::Boolean updateviewer) ;


//! Highlights, and removes highlights from, the displayed <br>
//! object aniobj which is displayed at Neutral Point with <br>
//! subintensity color; available only for active local <br>
//! context. There is no effect if there is no local context. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SubIntensityOn(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;


//! Removes the subintensity option for the entity aniobj. <br>
//! If a local context is open and if updateviewer equals <br>
//! Standard_False, the presentation of the Interactive <br>
//! Object activates the selection mode; the object is <br>
//! displayed but no viewer will be updated. <br>
 /*instead*/  void SubIntensityOff(OCNaroWrappers::OCAIS_InteractiveObject^ aniobj, System::Boolean updateviewer) ;

//! hilights/unhilights displayed objects which are displayed at <br>
//!          neutral state with subintensity color; <br>
//!          available only for active local context. <br>
//!          No effect if no local context. <br>
 /*instead*/  void SubIntensityOn(System::Boolean updateviewer) ;

//! removes subintensity option for all objects. <br>
 /*instead*/  void SubIntensityOff(System::Boolean updateviewer) ;

//! Allows you to add the filter aFilter to Neutral Point or <br>
//! to a local context if one or more selection modes have been activated. <br>
//! Only type filters may be active in Neutral Point. <br>
 /*instead*/  void AddFilter(OCNaroWrappers::OCSelectMgr_Filter^ aFilter) ;


//! Removes a filter from Neutral Point or a local context <br>
//! if one or more selection modes have been activated. <br>
//! Only type filters are activated in Neutral Point. <br>
 /*instead*/  void RemoveFilter(OCNaroWrappers::OCSelectMgr_Filter^ aFilter) ;

//! Remove a filter to Neutral Point or a local context if <br>
//! one or more selection modes have been activated. <br>
//! Only type filters are active in Neutral Point. <br>
 /*instead*/  void RemoveFilters() ;

//! Provides an alternative to the Display methods when <br>
//! activating specific selection modes. This has the <br>
//! effect of activating the corresponding selection mode <br>
//! aStandardActivation for all objects in Local Context <br>
//! which accept decomposition into sub-shapes. <br>
//! Every new Object which has been loaded into the <br>
//! interactive context and which answers these <br>
//! decomposition criteria is automatically activated <br>
//! according to these modes. <br>
//! Warning <br>
//! If you have opened a local context by loading an <br>
//! object with the default options <br>
//! (<AllowShapeDecomposition >= Standard_True), all <br>
//! objects of the "Shape" type are also activated with <br>
//! the same modes. You can act on the state of these <br>
//! "Standard" objects by using SetShapeDecomposition(Status). <br>
 /*instead*/  void ActivateStandardMode(OCTopAbs_ShapeEnum aStandardActivation) ;


//! Provides an alternative to the Display methods when <br>
//! deactivating specific selection modes. This has the <br>
//! effect of deactivating the corresponding selection <br>
//! mode aStandardActivation for all objects in Local <br>
//! Context which accept decomposition into sub-shapes. <br>
 /*instead*/  void DeactivateStandardMode(OCTopAbs_ShapeEnum aStandardActivation) ;


//! Returns the list of activated standard selection modes <br>
//! available in a local context. <br>
 /*instead*/  OCTColStd_ListOfInteger^ ActivatedStandardModes() ;


//! Returns the list of filters active in a local context. <br>
 /*instead*/  OCSelectMgr_ListOfFilter^ Filters() ;


//! Returns the default attribute manager. <br>
//! This contains all the color and line attributes which <br>
//! can be used by interactive objects which do not have <br>
//! their own attributes. <br>
 /*instead*/  OCPrs3d_Drawer^ DefaultDrawer() ;

//! Returns the current viewer. <br>
 /*instead*/  OCV3d_Viewer^ CurrentViewer() ;

//! Returns the list of displayed objects of a particular <br>
//! Type WhichKind and Signature WhichSignature. By <br>
//! Default, WhichSignature equals -1. This means that <br>
//! there is a check on type only. <br>
 /*instead*/  void DisplayedObjects(OCNaroWrappers::OCAIS_ListOfInteractive^ aListOfIO, System::Boolean OnlyFromNeutral) ;

//! gives the list of displayed objects of a particular <br>
//!          Type and signature. <br>
//!          by Default, <WhichSignature> = -1 means <br>
//!          control only on <WhichKind>. <br>
 /*instead*/  void DisplayedObjects(OCAIS_KindOfInteractive WhichKind, Standard_Integer WhichSignature, OCNaroWrappers::OCAIS_ListOfInteractive^ aListOfIO, System::Boolean OnlyFromNeutral) ;


 /*instead*/  OCV3d_Viewer^ Collector() ;


//! Returns the list aListOfIO of erased objects of a <br>
//! particular Type WhichKind and Signature WhichSignature. <br>
//! By Default, WhichSignature equals 1. This means <br>
//! that there is a check on type only. <br>
 /*instead*/  void ObjectsInCollector(OCNaroWrappers::OCAIS_ListOfInteractive^ aListOfIO) ;

//! gives the list of erased objects of a particular <br>
//!          Type and signature <br>
//!          by Default, <WhichSignature> = -1 means <br>
//!          control only on <WhichKind>. <br>
 /*instead*/  void ObjectsInCollector(OCAIS_KindOfInteractive WhichKind, Standard_Integer WhichSignature, OCNaroWrappers::OCAIS_ListOfInteractive^ aListOfIO) ;


//! Returns the list theListOfIO of erased objects (but not placed into collecter) <br>
//! particular Type WhichKind and Signature WhichSignature. <br>
//! By Default, WhichSignature equals 1. This means <br>
//! that there is a check on type only. <br>
 /*instead*/  void ErasedObjects(OCNaroWrappers::OCAIS_ListOfInteractive^ theListOfIO) ;

//! gives the list of erased objects (but not placed into collecter) <br>
//!          Type and signature <br>
//!          by Default, <WhichSignature> = -1 means <br>
//!          control only on <WhichKind>. <br>
 /*instead*/  void ErasedObjects(OCAIS_KindOfInteractive WhichKind, Standard_Integer WhichSignature, OCNaroWrappers::OCAIS_ListOfInteractive^ theListOfIO) ;


//! Returns the list theListOfIO of objects with indicated display status <br>
//! particular Type WhichKind and Signature WhichSignature. <br>
//! By Default, WhichSignature equals 1. This means <br>
//! that there is a check on type only. <br>
 /*instead*/  void ObjectsByDisplayStatus(OCAIS_DisplayStatus theStatus, OCNaroWrappers::OCAIS_ListOfInteractive^ theListOfIO) ;

//! gives the list of objects with indicated display status <br>
//!          Type and signature <br>
//!          by Default, <WhichSignature> = -1 means <br>
//!          control only on <WhichKind>. <br>
 /*instead*/  void ObjectsByDisplayStatus(OCAIS_KindOfInteractive WhichKind, Standard_Integer WhichSignature, OCAIS_DisplayStatus theStatus, OCNaroWrappers::OCAIS_ListOfInteractive^ theListOfIO) ;

//! fills <aListOfIO> with objects of a particular <br>
//!          Type and Signature with no consideration of display status. <br>
//!          by Default, <WhichSignature> = -1 means <br>
//!          control only on <WhichKind>. <br>
//!          if <WhichKind> = AIS_KOI_None and <WhichSignature> = -1, <br>
//!          all the objects are put into the list. <br>
 /*instead*/  void ObjectsInside(OCNaroWrappers::OCAIS_ListOfInteractive^ aListOfIO, OCAIS_KindOfInteractive WhichKind, Standard_Integer WhichSignature) ;

//! Returns true if there is an open context. <br>
 /*instead*/  System::Boolean HasOpenedContext() ;


//! Returns the name of the current selected entity in Neutral Point. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  OCTCollection_AsciiString^ CurrentName() ;


//! Returns the name of the current selected entity in <br>
//! open local context. <br>
//! Objects selected when there is no open local context <br>
//! are called current objects; those selected in open <br>
//! local context, selected objects. <br>
 /*instead*/  OCTCollection_AsciiString^ SelectionName() ;

//! Returns the domain name of the main viewer. <br>
 /*instead*/  System::String^ DomainOfMainViewer() ;

//! Returns the domain name of the Collector viewer. <br>
 /*instead*/  System::String^ DomainOfCollector() ;


//! This method is only intended for advanced operation, particularly with <br>
//! the aim to improve performance when many objects have to be selected <br>
//! together. Otherwise, you should use other (non-internal) methods of <br>
//! class AIS_InteractiveContext without trying to obtain an instance of <br>
//! AIS_LocalContext. <br>
 /*instead*/  OCAIS_LocalContext^ LocalContext() ;


 /*instead*/  OCSelectMgr_SelectionManager^ SelectionManager() ;


 /*instead*/  OCPrsMgr_PresentationManager3d^ MainPrsMgr() ;


 /*instead*/  OCPrsMgr_PresentationManager3d^ CollectorPrsMgr() ;


 /*instead*/  OCStdSelect_ViewerSelector3d^ MainSelector() ;


 /*instead*/  OCStdSelect_ViewerSelector3d^ LocalSelector() ;


 /*instead*/  OCStdSelect_ViewerSelector3d^ CollectorSelector() ;

//! Clears all the structures which don't <br>
//!          belong to objects displayed at neutral point <br>
//!          only effective when no Local Context is opened... <br>
//!          returns the number of removed  structures from the viewers. <br>
 /*instead*/  Standard_Integer PurgeDisplay(System::Boolean CollectorToo) ;


 /*instead*/  Standard_Integer HighestIndex() ;


 /*instead*/  void DisplayActiveAreas(OCNaroWrappers::OCV3d_View^ aView) ;


 /*instead*/  void ClearActiveAreas(OCNaroWrappers::OCV3d_View^ aView) ;


 /*instead*/  void DisplayActiveSensitive(OCNaroWrappers::OCV3d_View^ aView) ;


 /*instead*/  void ClearActiveSensitive(OCNaroWrappers::OCV3d_View^ aView) ;


 /*instead*/  void DisplayActiveSensitive(OCNaroWrappers::OCAIS_InteractiveObject^ anObject, OCNaroWrappers::OCV3d_View^ aView) ;


 /*instead*/  void DisplayActiveAreas(OCNaroWrappers::OCAIS_InteractiveObject^ anObject, OCNaroWrappers::OCV3d_View^ aView) ;

//! returns if possible, <br>
//!          the first local context where the object is seen <br>
 /*instead*/  System::Boolean IsInLocal(OCNaroWrappers::OCAIS_InteractiveObject^ anObject, Standard_Integer& TheIndex) ;

~OCAIS_InteractiveContext()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
