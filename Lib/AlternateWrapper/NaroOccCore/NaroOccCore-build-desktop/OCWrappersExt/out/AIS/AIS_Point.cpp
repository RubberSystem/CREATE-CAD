// File generated by CPPExt (CPP file)
//

#include "AIS_Point.h"
#include "../Converter.h"
#include "../Geom/Geom_Point.h"
#include "../PrsMgr/PrsMgr_PresentationManager3d.h"
#include "../Prs3d/Prs3d_Presentation.h"
#include "../Prs3d/Prs3d_Projector.h"
#include "../PrsMgr/PrsMgr_PresentationManager2d.h"
#include "../Graphic2d/Graphic2d_GraphicObject.h"
#include "../Geom/Geom_Transformation.h"
#include "../SelectMgr/SelectMgr_Selection.h"
#include "../Quantity/Quantity_Color.h"
#include "../TopoDS/TopoDS_Vertex.h"


using namespace OCNaroWrappers;

OCAIS_Point::OCAIS_Point(Handle(AIS_Point)* nativeHandle) : OCAIS_InteractiveObject((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_AIS_Point(*nativeHandle);
}

OCAIS_Point::OCAIS_Point(OCNaroWrappers::OCGeom_Point^ aComponent) : OCAIS_InteractiveObject((OCDummy^)nullptr)

{
  nativeHandle = new Handle_AIS_Point(new AIS_Point(*((Handle_Geom_Point*)aComponent->Handle)));
}

 Standard_Integer OCAIS_Point::Signature()
{
  return (*((Handle_AIS_Point*)nativeHandle))->Signature();
}

 OCAIS_KindOfInteractive OCAIS_Point::Type()
{
  return (OCAIS_KindOfInteractive)((*((Handle_AIS_Point*)nativeHandle))->Type());
}

OCGeom_Point^ OCAIS_Point::Component()
{
  Handle(Geom_Point) tmp = (*((Handle_AIS_Point*)nativeHandle))->Component();
  return gcnew OCGeom_Point(&tmp);
}

 void OCAIS_Point::SetComponent(OCNaroWrappers::OCGeom_Point^ aComponent)
{
  (*((Handle_AIS_Point*)nativeHandle))->SetComponent(*((Handle_Geom_Point*)aComponent->Handle));
}

 System::Boolean OCAIS_Point::AcceptDisplayMode(Standard_Integer aMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Point*)nativeHandle))->AcceptDisplayMode(aMode));
}

 void OCAIS_Point::Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation)
{
  (*((Handle_AIS_Point*)nativeHandle))->Compute(*((Handle_Prs3d_Projector*)aProjector->Handle), *((Handle_Geom_Transformation*)aTrsf->Handle), *((Handle_Prs3d_Presentation*)aPresentation->Handle));
}

 void OCAIS_Point::SetColor(OCQuantity_NameOfColor aColor)
{
  (*((Handle_AIS_Point*)nativeHandle))->SetColor((Quantity_NameOfColor)aColor);
}

 void OCAIS_Point::SetColor(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_AIS_Point*)nativeHandle))->SetColor(*((Quantity_Color*)aColor->Handle));
}

 void OCAIS_Point::UnsetColor()
{
  (*((Handle_AIS_Point*)nativeHandle))->UnsetColor();
}

 void OCAIS_Point::SetMarker(OCAspect_TypeOfMarker aType)
{
  (*((Handle_AIS_Point*)nativeHandle))->SetMarker((Aspect_TypeOfMarker)aType);
}

 void OCAIS_Point::UnsetMarker()
{
  (*((Handle_AIS_Point*)nativeHandle))->UnsetMarker();
}

 System::Boolean OCAIS_Point::HasMarker()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_AIS_Point*)nativeHandle))->HasMarker());
}

OCTopoDS_Vertex^ OCAIS_Point::Vertex()
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = (*((Handle_AIS_Point*)nativeHandle))->Vertex();
  return gcnew OCTopoDS_Vertex(tmp);
}


