// File generated by CPPExt (CPP file)
//

#include "AIS_IndexedDataMapOfOwnerPrs.h"
#include "../Converter.h"
#include "../SelectMgr/SelectMgr_EntityOwner.h"
#include "../Prs3d/Prs3d_Presentation.h"
#include "../TColStd/TColStd_MapTransientHasher.h"
#include "AIS_IndexedDataMapNodeOfIndexedDataMapOfOwnerPrs.h"


using namespace OCNaroWrappers;

OCAIS_IndexedDataMapOfOwnerPrs::OCAIS_IndexedDataMapOfOwnerPrs(AIS_IndexedDataMapOfOwnerPrs* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCAIS_IndexedDataMapOfOwnerPrs::OCAIS_IndexedDataMapOfOwnerPrs(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new AIS_IndexedDataMapOfOwnerPrs(NbBuckets);
}

OCAIS_IndexedDataMapOfOwnerPrs^ OCAIS_IndexedDataMapOfOwnerPrs::Assign(OCNaroWrappers::OCAIS_IndexedDataMapOfOwnerPrs^ Other)
{
  AIS_IndexedDataMapOfOwnerPrs* tmp = new AIS_IndexedDataMapOfOwnerPrs(0);
  *tmp = ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->Assign(*((AIS_IndexedDataMapOfOwnerPrs*)Other->Handle));
  return gcnew OCAIS_IndexedDataMapOfOwnerPrs(tmp);
}

 void OCAIS_IndexedDataMapOfOwnerPrs::ReSize(Standard_Integer NbBuckets)
{
  ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->ReSize(NbBuckets);
}

 Standard_Integer OCAIS_IndexedDataMapOfOwnerPrs::Add(OCNaroWrappers::OCSelectMgr_EntityOwner^ K, OCNaroWrappers::OCPrs3d_Presentation^ I)
{
  return ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->Add(*((Handle_SelectMgr_EntityOwner*)K->Handle), *((Handle_Prs3d_Presentation*)I->Handle));
}

 void OCAIS_IndexedDataMapOfOwnerPrs::Substitute(Standard_Integer I, OCNaroWrappers::OCSelectMgr_EntityOwner^ K, OCNaroWrappers::OCPrs3d_Presentation^ T)
{
  ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->Substitute(I, *((Handle_SelectMgr_EntityOwner*)K->Handle), *((Handle_Prs3d_Presentation*)T->Handle));
}

 void OCAIS_IndexedDataMapOfOwnerPrs::RemoveLast()
{
  ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->RemoveLast();
}

 System::Boolean OCAIS_IndexedDataMapOfOwnerPrs::Contains(OCNaroWrappers::OCSelectMgr_EntityOwner^ K)
{
  return OCConverter::StandardBooleanToBoolean(((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->Contains(*((Handle_SelectMgr_EntityOwner*)K->Handle)));
}

OCSelectMgr_EntityOwner^ OCAIS_IndexedDataMapOfOwnerPrs::FindKey(Standard_Integer I)
{
  Handle(SelectMgr_EntityOwner) tmp = ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->FindKey(I);
  return gcnew OCSelectMgr_EntityOwner(&tmp);
}

OCPrs3d_Presentation^ OCAIS_IndexedDataMapOfOwnerPrs::FindFromIndex(Standard_Integer I)
{
  Handle(Prs3d_Presentation) tmp = ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->FindFromIndex(I);
  return gcnew OCPrs3d_Presentation(&tmp);
}

OCPrs3d_Presentation^ OCAIS_IndexedDataMapOfOwnerPrs::ChangeFromIndex(Standard_Integer I)
{
  Handle(Prs3d_Presentation) tmp = ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->ChangeFromIndex(I);
  return gcnew OCPrs3d_Presentation(&tmp);
}

 Standard_Integer OCAIS_IndexedDataMapOfOwnerPrs::FindIndex(OCNaroWrappers::OCSelectMgr_EntityOwner^ K)
{
  return ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->FindIndex(*((Handle_SelectMgr_EntityOwner*)K->Handle));
}

OCPrs3d_Presentation^ OCAIS_IndexedDataMapOfOwnerPrs::FindFromKey(OCNaroWrappers::OCSelectMgr_EntityOwner^ K)
{
  Handle(Prs3d_Presentation) tmp = ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->FindFromKey(*((Handle_SelectMgr_EntityOwner*)K->Handle));
  return gcnew OCPrs3d_Presentation(&tmp);
}

OCPrs3d_Presentation^ OCAIS_IndexedDataMapOfOwnerPrs::ChangeFromKey(OCNaroWrappers::OCSelectMgr_EntityOwner^ K)
{
  Handle(Prs3d_Presentation) tmp = ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->ChangeFromKey(*((Handle_SelectMgr_EntityOwner*)K->Handle));
  return gcnew OCPrs3d_Presentation(&tmp);
}

 Standard_Address OCAIS_IndexedDataMapOfOwnerPrs::FindFromKey1(OCNaroWrappers::OCSelectMgr_EntityOwner^ K)
{
  return ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->FindFromKey1(*((Handle_SelectMgr_EntityOwner*)K->Handle));
}

 Standard_Address OCAIS_IndexedDataMapOfOwnerPrs::ChangeFromKey1(OCNaroWrappers::OCSelectMgr_EntityOwner^ K)
{
  return ((AIS_IndexedDataMapOfOwnerPrs*)nativeHandle)->ChangeFromKey1(*((Handle_SelectMgr_EntityOwner*)K->Handle));
}


