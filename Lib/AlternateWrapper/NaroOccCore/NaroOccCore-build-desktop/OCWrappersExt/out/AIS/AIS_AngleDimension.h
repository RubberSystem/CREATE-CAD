// File generated by CPPExt (Transient)
//
#ifndef _AIS_AngleDimension_OCWrappers_HeaderFile
#define _AIS_AngleDimension_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_AngleDimension.hxx>
#include "../Converter.h"

#include "AIS_Relation.h"

#include "../gp/gp_Pnt.h"
#include "../gp/gp_Dir.h"
#include "../gp/gp_Ax1.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../DsgPrs/DsgPrs_ArrowSide.h"
#include "AIS_KindOfDimension.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Edge;
ref class OCGeom_Plane;
ref class OCTCollection_ExtendedString;
ref class OCgp_Pnt;
ref class OCTopoDS_Face;
ref class OCgp_Ax1;
ref class OCTopoDS_Shape;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;
ref class OCGeom_Line;


//! A framework to define display of angles. <br>
//! These displays are particularly useful in viewing draft prisms. <br>
//! The angle displayed may define an intersection <br>
//! can be between two edges or two faces of a shape <br>
//! or a plane. The display consists of arrows and text. <br>
public ref class OCAIS_AngleDimension : OCAIS_Relation {

protected:
  // dummy constructor;
  OCAIS_AngleDimension(OCDummy^) : OCAIS_Relation((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_AngleDimension(Handle(AIS_AngleDimension)* nativeHandle);

// Methods PUBLIC

//!  Constructs the angle display object defined by the <br>
//! shapes aFShape, aSShape, the plane aPlane, the <br>
//! value aVal and the text aText. <br>
//! aFShape and aSShape are edges. <br>
OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Edge^ aFirstEdge, OCNaroWrappers::OCTopoDS_Edge^ aSecondEdge, OCNaroWrappers::OCGeom_Plane^ aPlane, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText);

//! Constructs the angle display object defined by the <br>
//! shapes aFShape, aSShape, the plane aPlane, the <br>
//! value aVal, the text aText, the point aPosition, the <br>
//! type of arrow aSymbolPrs, and the arrow length anArrowSize. <br>
//! aFShape and aSShape are edges. <br>
OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Edge^ aFirstEdge, OCNaroWrappers::OCTopoDS_Edge^ aSecondEdge, OCNaroWrappers::OCGeom_Plane^ aPlane, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize);

//!  Angle of cone <br>
OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aCone, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText);

//!  Angle of cone <br>
OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aCone, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize);

//!  TwoPlanarFaceAngle dimension <br>
OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aFirstFace, OCNaroWrappers::OCTopoDS_Face^ aSecondFace, OCNaroWrappers::OCgp_Ax1^ anAxis, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText);

//! TwoPlanarFacesAngle dimension  with   position <br>
//!           and text Face  can be Plane or Extrusion of line <br>
//!           or Offset of  those <br>
OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aFirstFace, OCNaroWrappers::OCTopoDS_Face^ aSecondFace, OCNaroWrappers::OCgp_Ax1^ anAxis, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize);

//!  Angle dimension between two curvilinear faces <br>
//!           Warning: <br>
//!           Requaired 0 <= aVal < PI, <br>
//!                     aVal must be defined exactly. <br>
OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aFFace, OCNaroWrappers::OCTopoDS_Face^ aSFace, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText);

//!  Angle dimension between two curvilinear faces <br>
//!           with position and text. Face can be Cone, Cylinder <br>
//!           Offset of Cone, Offset of Cylinder <br>
OCAIS_AngleDimension(OCNaroWrappers::OCTopoDS_Face^ aFFace, OCNaroWrappers::OCTopoDS_Face^ aSFace, Standard_Real aVal, OCNaroWrappers::OCTCollection_ExtendedString^ aText, OCNaroWrappers::OCgp_Pnt^ aPosition, OCDsgPrs_ArrowSide aSymbolPrs, Standard_Real anArrowSize);


//! Returns the axis set by the SetAxis method, which <br>
//! serves to locate the angle between two faces. <br>
 /*instead*/  OCgp_Ax1^ Axis() ;


//! Sets the axis, anAxis, which serves to locate the <br>
//! angle between two faces. <br>
 /*instead*/  void SetAxis(OCNaroWrappers::OCgp_Ax1^ anAxis) ;


 /*instead*/  void SetConeFace(OCNaroWrappers::OCTopoDS_Face^ aConeFace) ;


virtual /*instead*/  void SetFirstShape(OCNaroWrappers::OCTopoDS_Shape^ aFShape) override;


virtual /*instead*/  void SetSecondShape(OCNaroWrappers::OCTopoDS_Shape^ aSShape) override;

//! Returns PLANEANGLE as the kind of dimension. <br>
virtual /*instead*/  OCAIS_KindOfDimension KindOfDimension() override;

//! Returns true if the angle dimension is movable. <br>
virtual /*instead*/  System::Boolean IsMovable() override;

//! Computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          This method should be used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;

~OCAIS_AngleDimension()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
