// File generated by CPPExt (Transient)
//
#ifndef _AIS_Plane_OCWrappers_HeaderFile
#define _AIS_Plane_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_Plane.hxx>
#include "../Converter.h"

#include "AIS_InteractiveObject.h"

#include "../gp/gp_Pnt.h"
#include "AIS_TypeOfPlane.h"
#include "AIS_KindOfInteractive.h"
#include "../Quantity/Quantity_NameOfColor.h"


namespace OCNaroWrappers
{

ref class OCGeom_Plane;
ref class OCGeom_Axis2Placement;
ref class OCgp_Pnt;
ref class OCAIS_InteractiveContext;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;
ref class OCQuantity_Color;


//! Constructs plane datums to be used in construction of <br>
//! composite shapes. <br>
public ref class OCAIS_Plane : OCAIS_InteractiveObject {

protected:
  // dummy constructor;
  OCAIS_Plane(OCDummy^) : OCAIS_InteractiveObject((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_Plane(Handle(AIS_Plane)* nativeHandle);

// Methods PUBLIC

//! initializes the plane aComponent. If <br>
//!   the mode aCurrentMode equals true, the drawing <br>
//!   tool, "Drawer" is not initialized. <br>
OCAIS_Plane(OCNaroWrappers::OCGeom_Plane^ aComponent, System::Boolean aCurrentMode);

//!   initializes the plane aComponent and <br>
//!   the point aCenter. If the mode aCurrentMode <br>
//!   equals true, the drawing tool, "Drawer" is not <br>
//!   initialized. aCurrentMode equals true, the drawing <br>
//!   tool, "Drawer" is not initialized. <br>
OCAIS_Plane(OCNaroWrappers::OCGeom_Plane^ aComponent, OCNaroWrappers::OCgp_Pnt^ aCenter, System::Boolean aCurrentMode);

//!   initializes the plane aComponent, the <br>
//!   point aCenter, and the minimum and maximum <br>
//!   points, aPmin and aPmax. If the mode <br>
//! aCurrentMode equals true, the drawing tool, "Drawer" is not initialized. <br>
OCAIS_Plane(OCNaroWrappers::OCGeom_Plane^ aComponent, OCNaroWrappers::OCgp_Pnt^ aCenter, OCNaroWrappers::OCgp_Pnt^ aPmin, OCNaroWrappers::OCgp_Pnt^ aPmax, System::Boolean aCurrentMode);


OCAIS_Plane(OCNaroWrappers::OCGeom_Axis2Placement^ aComponent, OCAIS_TypeOfPlane aPlaneType, System::Boolean aCurrentMode);

//! Same value for x and y directions <br>
 /*instead*/  void SetSize(Standard_Real aValue) ;

//! Sets the size defined by the length along the X axis <br>
//! XVal and the length along the Y axis YVal. <br>
 /*instead*/  void SetSize(Standard_Real Xval, Standard_Real YVal) ;


 /*instead*/  void UnsetSize() ;


 /*instead*/  System::Boolean Size(Standard_Real& X, Standard_Real& Y) ;


 /*instead*/  System::Boolean HasOwnSize() ;


virtual /*instead*/  Standard_Integer Signature() override;


virtual /*instead*/  OCAIS_KindOfInteractive Type() override;

//! Returns the component specified in SetComponent. <br>
 /*instead*/  OCGeom_Plane^ Component() ;

//! Creates an instance of the plane aComponent. <br>
 /*instead*/  void SetComponent(OCNaroWrappers::OCGeom_Plane^ aComponent) ;

//! Returns the settings for the selected plane <br>
//! aComponent, provided in SetPlaneAttributes. <br>
//! These include the points aCenter, aPmin, and aPmax <br>
 /*instead*/  System::Boolean PlaneAttributes(OCNaroWrappers::OCGeom_Plane^ aComponent, OCNaroWrappers::OCgp_Pnt^ aCenter, OCNaroWrappers::OCgp_Pnt^ aPmin, OCNaroWrappers::OCgp_Pnt^ aPmax) ;

//! Allows you to provide settings other than default ones <br>
//! for the selected plane. These include: center point <br>
//! aCenter, maximum aPmax and minimum aPmin. <br>
 /*instead*/  void SetPlaneAttributes(OCNaroWrappers::OCGeom_Plane^ aComponent, OCNaroWrappers::OCgp_Pnt^ aCenter, OCNaroWrappers::OCgp_Pnt^ aPmin, OCNaroWrappers::OCgp_Pnt^ aPmax) ;

//! Returns the coordinates of the center point. <br>
 /*instead*/  OCgp_Pnt^ Center() ;


//! Provides settings for the center aCenter other than (0, 0, 0). <br>
 /*instead*/  void SetCenter(OCNaroWrappers::OCgp_Pnt^ aCenter) ;

//! Allows you to provide settings for the position and <br>
//! direction of one of the plane's axes, aComponent, in <br>
//! 3D space. The coordinate system used is <br>
//! right-handed, and the type of plane aPlaneType is one of: <br>
//! -   AIS_ TOPL_Unknown <br>
//! -   AIS_ TOPL_XYPlane <br>
//! -   AIS_ TOPL_XZPlane <br>
//! -   AIS_ TOPL_YZPlane}. <br>
 /*instead*/  void SetAxis2Placement(OCNaroWrappers::OCGeom_Axis2Placement^ aComponent, OCAIS_TypeOfPlane aPlaneType) ;

//! Returns the position of the plane's axis2 system <br>
//! identifying the x, y, or z axis and giving the plane a <br>
//! direction in 3D space. An axis2 system is a right-handed coordinate system. <br>
 /*instead*/  OCGeom_Axis2Placement^ Axis2Placement() ;

//! Returns the type of plane - xy, yz, xz or unknown. <br>
 /*instead*/  OCAIS_TypeOfPlane TypeOfPlane() ;

//! Returns the type of plane - xy, yz, or xz. <br>
 /*instead*/  System::Boolean IsXYZPlane() ;

//! Returns the non-default current display mode set by SetCurrentMode. <br>
 /*instead*/  System::Boolean CurrentMode() ;


//! Allows you to provide settings for a non-default <br>
//! current display mode. <br>
 /*instead*/  void SetCurrentMode(System::Boolean aCurrentMode) ;

//! Returns true if the display mode selected, aMode, is valid for planes. <br>
virtual /*instead*/  System::Boolean AcceptDisplayMode(Standard_Integer aMode) override;

//! connection to <aCtx> default drawer implies a recomputation of Frame values. <br>
virtual /*instead*/  void SetContext(OCNaroWrappers::OCAIS_InteractiveContext^ aCtx) override;

//! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;


virtual /*instead*/  void ComputeSelection(OCNaroWrappers::OCSelectMgr_Selection^ aSelection, Standard_Integer aMode) ;


virtual /*instead*/  void SetColor(OCQuantity_NameOfColor aColor) override;


virtual /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor) override;


virtual /*instead*/  void UnsetColor() override;

~OCAIS_Plane()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
