// File generated by CPPExt (Transient)
//
#ifndef _AIS_PlaneTrihedron_OCWrappers_HeaderFile
#define _AIS_PlaneTrihedron_OCWrappers_HeaderFile

// include the wrapped class
#include <AIS_PlaneTrihedron.hxx>
#include "../Converter.h"

#include "AIS_InteractiveObject.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "AIS_KindOfInteractive.h"
#include "../Quantity/Quantity_NameOfColor.h"


namespace OCNaroWrappers
{

ref class OCGeom_Plane;
ref class OCAIS_InteractiveObject;
ref class OCAIS_Line;
ref class OCAIS_Point;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCGeom_Transformation;
ref class OCSelectMgr_Selection;
ref class OCQuantity_Color;
ref class OCTCollection_AsciiString;


//! To construct a selectable 2d axis system in a 3d <br>
//! drawing. This can be placed anywhere in the 3d <br>
//! system, and provides a coordinate system for <br>
//! drawing curves and shapes in a plane. <br>
//! There are 3 selection modes: <br>
//! -   mode 0   selection of the whole plane "trihedron" <br>
//! -   mode 1   selection of the origin of the plane "trihedron" <br>
//! -   mode 2   selection of the axes. <br>
//!  Warning <br>
//! For the presentation of planes and trihedra, the <br>
//! millimetre is default unit of length, and 100 the default <br>
//! value for the representation of the axes. If you modify <br>
//! these dimensions, you must temporarily recover the <br>
//! Drawer object. From inside it, take the Aspects in <br>
//! which   the values for length are stocked, for example, <br>
//! PlaneAspect for planes and FirstAxisAspect for <br>
//! trihedra. Change these values and recalculate the presentation. <br>
public ref class OCAIS_PlaneTrihedron : OCAIS_InteractiveObject {

protected:
  // dummy constructor;
  OCAIS_PlaneTrihedron(OCDummy^) : OCAIS_InteractiveObject((OCDummy^)nullptr) {};

public:

// constructor from native
OCAIS_PlaneTrihedron(Handle(AIS_PlaneTrihedron)* nativeHandle);

// Methods PUBLIC

//! Initializes the plane aPlane. The plane trihedron is <br>
//!  constructed from this and an axis. <br>
OCAIS_PlaneTrihedron(OCNaroWrappers::OCGeom_Plane^ aPlane);

//! Returns the component specified in SetComponent. <br>
 /*instead*/  OCGeom_Plane^ Component() ;

//! Creates an instance of the component object aPlane. <br>
 /*instead*/  void SetComponent(OCNaroWrappers::OCGeom_Plane^ aPlane) ;

//! Returns the "XAxis". <br>
 /*instead*/  OCAIS_Line^ XAxis() ;

//! Returns the "YAxis". <br>
 /*instead*/  OCAIS_Line^ YAxis() ;

//! Returns the point of origin of the plane trihedron. <br>
 /*instead*/  OCAIS_Point^ Position() ;

//! Sets the length of the X and Y axes. <br>
 /*instead*/  void SetLength(Standard_Real theLength) ;

//! Returns the length of X and Y axes. <br>
 /*instead*/  Standard_Real GetLength() ;

//! Returns true if the display mode selected, aMode, is valid. <br>
virtual /*instead*/  System::Boolean AcceptDisplayMode(Standard_Integer aMode) override;

//! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCPrs3d_Projector^ aProjector, OCNaroWrappers::OCGeom_Transformation^ aTrsf, OCNaroWrappers::OCPrs3d_Presentation^ aPresentation) override;


virtual /*instead*/  Standard_Integer Signature() override;

//! Returns datum as the type of Interactive Object. <br>
virtual /*instead*/  OCAIS_KindOfInteractive Type() override;

//! Allows you to provide settings for the color aColor. <br>
virtual /*instead*/  void SetColor(OCQuantity_NameOfColor aColor) override;


virtual /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor) override;


 /*instead*/  void SetXLabel(OCNaroWrappers::OCTCollection_AsciiString^ aLabel) ;


 /*instead*/  void SetYLabel(OCNaroWrappers::OCTCollection_AsciiString^ aLabel) ;

~OCAIS_PlaneTrihedron()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
