// File generated by CPPExt (CPP file)
//

#include "TColGeom2d_HArray1OfBoundedCurve.h"
#include "../Converter.h"
#include "../Geom2d/Geom2d_BoundedCurve.h"
#include "TColGeom2d_Array1OfBoundedCurve.h"


using namespace OCNaroWrappers;

OCTColGeom2d_HArray1OfBoundedCurve::OCTColGeom2d_HArray1OfBoundedCurve(Handle(TColGeom2d_HArray1OfBoundedCurve)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TColGeom2d_HArray1OfBoundedCurve(*nativeHandle);
}

OCTColGeom2d_HArray1OfBoundedCurve::OCTColGeom2d_HArray1OfBoundedCurve(Standard_Integer Low, Standard_Integer Up) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TColGeom2d_HArray1OfBoundedCurve(new TColGeom2d_HArray1OfBoundedCurve(Low, Up));
}

OCTColGeom2d_HArray1OfBoundedCurve::OCTColGeom2d_HArray1OfBoundedCurve(Standard_Integer Low, Standard_Integer Up, OCNaroWrappers::OCGeom2d_BoundedCurve^ V) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TColGeom2d_HArray1OfBoundedCurve(new TColGeom2d_HArray1OfBoundedCurve(Low, Up, *((Handle_Geom2d_BoundedCurve*)V->Handle)));
}

 void OCTColGeom2d_HArray1OfBoundedCurve::Init(OCNaroWrappers::OCGeom2d_BoundedCurve^ V)
{
  (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->Init(*((Handle_Geom2d_BoundedCurve*)V->Handle));
}

 Standard_Integer OCTColGeom2d_HArray1OfBoundedCurve::Length()
{
  return (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->Length();
}

 Standard_Integer OCTColGeom2d_HArray1OfBoundedCurve::Lower()
{
  return (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->Lower();
}

 Standard_Integer OCTColGeom2d_HArray1OfBoundedCurve::Upper()
{
  return (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->Upper();
}

 void OCTColGeom2d_HArray1OfBoundedCurve::SetValue(Standard_Integer Index, OCNaroWrappers::OCGeom2d_BoundedCurve^ Value)
{
  (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->SetValue(Index, *((Handle_Geom2d_BoundedCurve*)Value->Handle));
}

OCGeom2d_BoundedCurve^ OCTColGeom2d_HArray1OfBoundedCurve::Value(Standard_Integer Index)
{
  Handle(Geom2d_BoundedCurve) tmp = (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->Value(Index);
  return gcnew OCGeom2d_BoundedCurve(&tmp);
}

OCGeom2d_BoundedCurve^ OCTColGeom2d_HArray1OfBoundedCurve::ChangeValue(Standard_Integer Index)
{
  Handle(Geom2d_BoundedCurve) tmp = (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->ChangeValue(Index);
  return gcnew OCGeom2d_BoundedCurve(&tmp);
}

OCTColGeom2d_Array1OfBoundedCurve^ OCTColGeom2d_HArray1OfBoundedCurve::Array1()
{
  TColGeom2d_Array1OfBoundedCurve* tmp = new TColGeom2d_Array1OfBoundedCurve(0, 0);
  *tmp = (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->Array1();
  return gcnew OCTColGeom2d_Array1OfBoundedCurve(tmp);
}

OCTColGeom2d_Array1OfBoundedCurve^ OCTColGeom2d_HArray1OfBoundedCurve::ChangeArray1()
{
  TColGeom2d_Array1OfBoundedCurve* tmp = new TColGeom2d_Array1OfBoundedCurve(0, 0);
  *tmp = (*((Handle_TColGeom2d_HArray1OfBoundedCurve*)nativeHandle))->ChangeArray1();
  return gcnew OCTColGeom2d_Array1OfBoundedCurve(tmp);
}


