// File generated by CPPExt (Transient)
//
#ifndef _Aspect_Grid_OCWrappers_HeaderFile
#define _Aspect_Grid_OCWrappers_HeaderFile

// include the wrapped class
#include <Aspect_Grid.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../Quantity/Quantity_Color.h"
#include "Aspect_GridDrawMode.h"


namespace OCNaroWrappers
{

ref class OCQuantity_Color;



public ref class OCAspect_Grid : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCAspect_Grid(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCAspect_Grid(Handle(Aspect_Grid)* nativeHandle);

// Methods PUBLIC

//! creates a new grid. By default this grid is not <br>
//!          active. <br>
OCAspect_Grid(Quantity_Length anXOrigin, Quantity_Length anYOrigin, Quantity_PlaneAngle aRotationAngle, OCNaroWrappers::OCQuantity_Color^ aColor, OCNaroWrappers::OCQuantity_Color^ aTenthColor);

//! defines the x Origin of the grid. <br>
 /*instead*/  void SetXOrigin(Quantity_Length anOrigin) ;

//! defines the y Origin of the grid. <br>
 /*instead*/  void SetYOrigin(Quantity_Length anOrigin) ;

//! defines the orientation of the the grid. <br>
 /*instead*/  void SetRotationAngle(Quantity_PlaneAngle anAngle) ;

//! Rotate the grid from a relative angle. <br>
 /*instead*/  void Rotate(Quantity_PlaneAngle anAngle) ;

//! Translate the grid from a relative distance. <br>
 /*instead*/  void Translate(Quantity_Length aDx, Quantity_Length aDy) ;

//! Change the colors of the grid <br>
virtual /*instead*/  void SetColors(OCNaroWrappers::OCQuantity_Color^ aColor, OCNaroWrappers::OCQuantity_Color^ aTenthColor) ;

//! returns the point of the grid the closest to the point X,Y <br>
//!          if the grid is active. If the grid is not active returns <br>
//!          X,Y. <br>
 /*instead*/  void Hit(Quantity_Length X, Quantity_Length Y, Quantity_Length& gridX, Quantity_Length& gridY) ;

//! activates the grid. The Hit method will return <br>
//!          gridx and gridx computed according to the steps <br>
//!          of the grid. <br>
 /*instead*/  void Activate() ;

//! deactivates the grid. The hit method will return <br>
//!          gridx and gridx as the enter value X & Y. <br>
 /*instead*/  void Deactivate() ;

//! returns the x Origin of the grid. <br>
 /*instead*/  Quantity_Length XOrigin() ;

//! returns the x Origin of the grid. <br>
 /*instead*/  Quantity_Length YOrigin() ;

//! returns the x Angle of the grid. <br>
 /*instead*/  Quantity_PlaneAngle RotationAngle() ;

//! Returns TRUE when the grid is active. <br>
 /*instead*/  System::Boolean IsActive() ;

//! Returns the colors of the grid. <br>
 /*instead*/  void Colors(OCNaroWrappers::OCQuantity_Color^ aColor, OCNaroWrappers::OCQuantity_Color^ aTenthColor) ;

//! Change the grid aspect. <br>
 /*instead*/  void SetDrawMode(OCAspect_GridDrawMode aDrawMode) ;

//! Returns the grid aspect. <br>
 /*instead*/  OCAspect_GridDrawMode DrawMode() ;

//! Display the grid at screen. <br>
virtual /*instead*/  void Display() ;

//! Erase the grid from screen. <br>
virtual /*instead*/  void Erase() ;

//! Returns TRUE when the grid is displayed at screen. <br>
virtual /*instead*/  System::Boolean IsDisplayed() ;

~OCAspect_Grid()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
