// File generated by CPPExt (MPV)
//
#ifndef _Aspect_FontStyle_OCWrappers_HeaderFile
#define _Aspect_FontStyle_OCWrappers_HeaderFile

// include native header
#include <Aspect_FontStyle.hxx>
#include "../Converter.h"


#include "Aspect_TypeOfFont.h"
#include "../TCollection/TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;


//! This class defines a Font Style. <br>
//!	    The Style can be Predefined or defined by the user <br>
public ref class OCAspect_FontStyle  {

protected:
  Aspect_FontStyle* nativeHandle;
  OCAspect_FontStyle(OCDummy^) {};

public:
  property Aspect_FontStyle* Handle
  {
    Aspect_FontStyle* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCAspect_FontStyle(Aspect_FontStyle* nativeHandle);

// Methods PUBLIC

//! Creates a font style with the default values of <br>
//!	    FontStyle type : DEFAULT <br>
OCAspect_FontStyle();

//! Creates the font style <Type> depending of <br>
//!	    Size given in the basic LENGTH unit and Slant in <br>
//!	    the basic PLANE ANGLE unit. <br>
//!	    When CapsHeight is TRUE the size defines the <br>
//!	    ascent height of the font;if FALSE,the size <br>
//!	    defines the ascent+descent part of the font. <br>
OCAspect_FontStyle(OCAspect_TypeOfFont Type, Quantity_Length Size, Quantity_PlaneAngle Slant, System::Boolean CapsHeight);

//! Creates a font style from Adobe font style descriptor <br>
//!	   depending of Size given in MM and Slant in RADIAN. <br>
//!	    When CapsHeight is TRUE the size defines the <br>
//!	    ascent height of the font;if FALSE,the size <br>
//!	    defines the ascent+descent part of the font. <br>
//!	    Font Style Descriptor must be : <br>
//!	       Simple form is "family"      	Ex: "helvetica" <br>
//!	       More complex form is "family-weight" Ex: "helvetica-bold" <br>
//!	       Full form is : <br>
//!		"-foundry-family-weight-slant-swdth-adstyl-pixelsize" <br>
//!		"-pointsize-resx-resy-spacing-avgWidth-registry-encoding" <br>
//!		where each field must be replaced by an "*" <br>
//!  Warning: create the smalest font size if the foundry height <br>
OCAspect_FontStyle(System::String^ Style, Quantity_Length Size, Quantity_PlaneAngle Slant, System::Boolean CapsHeight);

//! Creates a transformable font with the full font name <Style> <br>
//!  given in the XLFD descriptor : <br>
//! "-foundry-family-weight-slant-swidth-adstyl-pixelsize-pointsize- <br>
//!  resx-resy-spacing-avdWidth-registry-encoding". <br>
//! The fields pixelsize ,pointsize,resx,resy are sets to 0 <br>
//! and all unknown fields sets to '*'. <br>
//!  Example: "adobe-helvetica-bold-*-*-*-0-0-0-0-*-*-iso8859-*" <br>
//!  Warning: the height and slant of the font is supposed to be NULL <br>
//! and computed dynamically at the drawing text time. <br>
OCAspect_FontStyle(System::String^ Style);

//! Updates the font style <me> from the definition of the <br>
//!	    font style <Other>. <br>
 /*instead*/  OCAspect_FontStyle^ Assign(OCNaroWrappers::OCAspect_FontStyle^ Other) ;

//! Updates the font style <me> from the definition of the <br>
//!	    font style <Type>. <br>
 /*instead*/  void SetValues(OCAspect_TypeOfFont Type, Quantity_Length Size, Quantity_PlaneAngle Slant, System::Boolean CapsHeight) ;

//! Updates a font style with the new Abode font descriptor <br>
//!  Warning: create the smalest font size if the foundry height <br>
 /*instead*/  void SetValues(System::String^ Style, Quantity_Length Size, Quantity_PlaneAngle Slant, System::Boolean CapsHeight) ;

//! Updates a font style with the new XLFD font descriptor <br>
 /*instead*/  void SetValues(System::String^ Style) ;

//! Sets the family of the font. <br>
 /*instead*/  void SetFamily(System::String^ aName) ;

//! Sets the weight of the font. <br>
 /*instead*/  void SetWeight(System::String^ aName) ;

//! Sets the registry of the font. <br>
 /*instead*/  void SetRegistry(System::String^ aName) ;

//! Sets the encoding of the font. <br>
 /*instead*/  void SetEncoding(System::String^ aName) ;

//! Returns the type of the font style <me> <br>
 /*instead*/  OCAspect_TypeOfFont Style() ;

//! Returns the string components length of the <br>
//! font style descriptor <br>
 /*instead*/  Standard_Integer Length() ;

//! Returns the String component of a font style <br>
 /*instead*/  System::String^ Value() ;

//! Returns the Size component of a font style <br>
 /*instead*/  Quantity_Length Size() ;

//! Returns the Slant component of a font style <br>
 /*instead*/  Quantity_PlaneAngle Slant() ;

//! Returns the CapsHeight component of a font style <br>
 /*instead*/  System::Boolean CapsHeight() ;

//! Returns a shorter font name which identify the <br>
//!          main characteristics of the fonts. <br>
 /*instead*/  System::String^ AliasName() ;

//! Returns the full normalized font name <br>
 /*instead*/  System::String^ FullName() ;

//! Returns the foundry of the font. <br>
 /*instead*/  System::String^ Foundry() ;

//! Returns the family of the font. <br>
 /*instead*/  System::String^ Family() ;

//! Returns the weight of the font. <br>
 /*instead*/  System::String^ Weight() ;

//! Returns the char set registry of the font. <br>
 /*instead*/  System::String^ Registry() ;

//! Returns the char set encoding of the font. <br>
 /*instead*/  System::String^ Encoding() ;

//! Returns the slant of the font. <br>
 /*instead*/  System::String^ SSlant() ;

//! Returns the width name of the font. <br>
 /*instead*/  System::String^ SWidth() ;

//! Returns the style name of the font. <br>
 /*instead*/  System::String^ SStyle() ;

//! Returns the pixel size of the font. <br>
 /*instead*/  System::String^ SPixelSize() ;

//! Returns the point size of the font. <br>
 /*instead*/  System::String^ SPointSize() ;

//! Returns the resolution X of the font. <br>
 /*instead*/  System::String^ SResolutionX() ;

//! Returns the resolution Y of the font. <br>
 /*instead*/  System::String^ SResolutionY() ;

//! Returns the spacing of the font. <br>
 /*instead*/  System::String^ SSpacing() ;

//! Returns the average width of the font. <br>
 /*instead*/  System::String^ SAverageWidth() ;

//! Dumps the font attributes. <br>
 /*instead*/  void Dump() ;


 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCAspect_FontStyle^ Other) ;


 /*instead*/  System::Boolean IsNotEqual(OCNaroWrappers::OCAspect_FontStyle^ Other) ;

~OCAspect_FontStyle()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
