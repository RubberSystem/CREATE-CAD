// File generated by CPPExt (Transient)
//
#ifndef _Aspect_ColorScale_OCWrappers_HeaderFile
#define _Aspect_ColorScale_OCWrappers_HeaderFile

// include the wrapped class
#include <Aspect_ColorScale.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_ExtendedString.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "Aspect_TypeOfColorScaleData.h"
#include "Aspect_SequenceOfColor.h"
#include "../TColStd/TColStd_SequenceOfExtendedString.h"
#include "Aspect_TypeOfColorScalePosition.h"


namespace OCNaroWrappers
{

ref class OCQuantity_Color;
ref class OCTCollection_ExtendedString;
ref class OCTCollection_AsciiString;
ref class OCTColStd_SequenceOfExtendedString;
ref class OCAspect_SequenceOfColor;
ref class OCAspect_ColorMap;



public ref class OCAspect_ColorScale : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCAspect_ColorScale(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCAspect_ColorScale(Handle(Aspect_ColorScale)* nativeHandle);

// Methods PUBLIC

//! Calculate color according passed value; returns true if value is in range or false, if isn't <br>
 /*instead*/  System::Boolean FindColor(Standard_Real Value, OCNaroWrappers::OCQuantity_Color^ Color) ;


static /*instead*/  System::Boolean FindColor(Standard_Real Value, Standard_Real Min, Standard_Real Max, Standard_Integer ColorsCount, OCNaroWrappers::OCQuantity_Color^ Color) ;

//! Returns minimal value of color scale; <br>
 /*instead*/  Standard_Real GetMin() ;

//! Returns maximal value of color scale; <br>
 /*instead*/  Standard_Real GetMax() ;

//! Returns minimal and maximal values of color scale; <br>
 /*instead*/  void GetRange(Standard_Real& aMin, Standard_Real& aMax) ;

//! Returns the type of labels; <br>
//!         Aspect_TOCSD_AUTO - labels as boundary values for intervals <br>
//!         Aspect_TOCSD_USER - user specified label is used <br>
 /*instead*/  OCAspect_TypeOfColorScaleData GetLabelType() ;

//! Returns the type of colors; <br>
//!         Aspect_TOCSD_AUTO - value between Red and Blue <br>
//!         Aspect_TOCSD_USER - user specified color from color map <br>
 /*instead*/  OCAspect_TypeOfColorScaleData GetColorType() ;

//! Returns the number of color scale intervals; <br>
 /*instead*/  Standard_Integer GetNumberOfIntervals() ;

//! Returns the color scale title string; <br>
 /*instead*/  OCTCollection_ExtendedString^ GetTitle() ;

//! Returns the format for numbers. <br>
//!         The same like format for function printf(). <br>
//!         Used if GetLabelType() is TOCSD_AUTO; <br>
 /*instead*/  OCTCollection_AsciiString^ GetFormat() ;

//! Returns the user specified label with index <anIndex>. <br>
//!         Returns empty string if label not defined. <br>
 /*instead*/  OCTCollection_ExtendedString^ GetLabel(Standard_Integer anIndex) ;

//! Returns the user specified color from color map with index <anIndex>. <br>
//!         Returns default color if index out of range in color map. <br>
 /*instead*/  OCQuantity_Color^ GetColor(Standard_Integer anIndex) ;

//! Returns the user specified labels. <br>
 /*instead*/  void GetLabels(OCNaroWrappers::OCTColStd_SequenceOfExtendedString^ aLabels) ;

//! Returns the user specified colors. <br>
 /*instead*/  void GetColors(OCNaroWrappers::OCAspect_SequenceOfColor^ aColors) ;

//! Returns the position of labels concerning color filled rectangles. <br>
 /*instead*/  OCAspect_TypeOfColorScalePosition GetLabelPosition() ;

//! Returns the position of color scale title. <br>
 /*instead*/  OCAspect_TypeOfColorScalePosition GetTitlePosition() ;

//! Returns true if the labels and colors used in reversed order. <br>
 /*instead*/  System::Boolean IsReversed() ;

//! Returns true if the labels placed at border of color filled rectangles. <br>
 /*instead*/  System::Boolean IsLabelAtBorder() ;

//! Sets the minimal value of color scale. <br>
 /*instead*/  void SetMin(Standard_Real aMin) ;

//! Sets the maximal value of color scale. <br>
 /*instead*/  void SetMax(Standard_Real aMax) ;

//! Sets the minimal and maximal value of color scale. <br>
 /*instead*/  void SetRange(Standard_Real aMin, Standard_Real aMax) ;

//! Sets the type of labels. <br>
//!         Aspect_TOCSD_AUTO - labels as boundary values for intervals <br>
//!         Aspect_TOCSD_USER - user specified label is used <br>
 /*instead*/  void SetLabelType(OCAspect_TypeOfColorScaleData aType) ;

//! Sets the type of colors. <br>
//!         Aspect_TOCSD_AUTO - value between Red and Blue <br>
//!         Aspect_TOCSD_USER - user specified color from color map <br>
 /*instead*/  void SetColorType(OCAspect_TypeOfColorScaleData aType) ;

//! Sets the number of color scale intervals. <br>
 /*instead*/  void SetNumberOfIntervals(Standard_Integer aNum) ;

//! Sets the color scale title string. <br>
 /*instead*/  void SetTitle(OCNaroWrappers::OCTCollection_ExtendedString^ aTitle) ;

//! Sets the color scale auto label format specification. <br>
 /*instead*/  void SetFormat(OCNaroWrappers::OCTCollection_AsciiString^ aFormat) ;

//! Sets the color scale label at index. Index started from 1. <br>
 /*instead*/  void SetLabel(OCNaroWrappers::OCTCollection_ExtendedString^ aLabel, Standard_Integer anIndex) ;

//! Sets the color scale color at index. Index started from 1. <br>
 /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor, Standard_Integer anIndex) ;

//! Sets the color scale labels. <br>
 /*instead*/  void SetLabels(OCNaroWrappers::OCTColStd_SequenceOfExtendedString^ aSeq) ;

//! Sets the color scale colors. <br>
 /*instead*/  void SetColors(OCNaroWrappers::OCAspect_ColorMap^ aMap) ;

//! Sets the color scale colors. <br>
 /*instead*/  void SetColors(OCNaroWrappers::OCAspect_SequenceOfColor^ aSeq) ;

//! Sets the color scale labels position concerning color filled rectangles. <br>
 /*instead*/  void SetLabelPosition(OCAspect_TypeOfColorScalePosition aPos) ;

//! Sets the color scale title position. <br>
 /*instead*/  void SetTitlePosition(OCAspect_TypeOfColorScalePosition aPos) ;

//! Sets true if the labels and colors used in reversed order. <br>
 /*instead*/  void SetReversed(System::Boolean aReverse) ;

//! Sets true if the labels placed at border of color filled rectangles. <br>
 /*instead*/  void SetLabelAtBorder(System::Boolean anOn) ;

//! Returns the size of color scale. <br>
 /*instead*/  void GetSize(Standard_Real& aWidth, Standard_Real& aHeight) ;

//! Returns the width of color scale. <br>
 /*instead*/  Standard_Real GetWidth() ;

//! Returns the height of color scale. <br>
 /*instead*/  Standard_Real GetHeight() ;

//! Sets the size of color scale. <br>
 /*instead*/  void SetSize(Standard_Real aWidth, Standard_Real aHeight) ;

//! Sets the width of color scale. <br>
 /*instead*/  void SetWidth(Standard_Real aWidth) ;

//! Sets the height of color scale. <br>
 /*instead*/  void SetHeight(Standard_Real aHeight) ;

//! Returns the position of color scale. <br>
 /*instead*/  void GetPosition(Standard_Real& aX, Standard_Real& aY) ;

//! Returns the X position of color scale. <br>
 /*instead*/  Standard_Real GetXPosition() ;

//! Returns the height of color scale. <br>
 /*instead*/  Standard_Real GetYPosition() ;

//! Sets the position of color scale. <br>
 /*instead*/  void SetPosition(Standard_Real aX, Standard_Real aY) ;

//! Sets the X position of color scale. <br>
 /*instead*/  void SetXPosition(Standard_Real aX) ;

//! Sets the Y position of color scale. <br>
 /*instead*/  void SetYPosition(Standard_Real aY) ;


 /*instead*/  Standard_Integer GetTextHeight() ;


 /*instead*/  void SetTextHeight(Standard_Integer aHeigh) ;

~OCAspect_ColorScale()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
