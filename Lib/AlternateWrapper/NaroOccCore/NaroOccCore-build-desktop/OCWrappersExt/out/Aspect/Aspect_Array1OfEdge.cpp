// File generated by CPPExt (CPP file)
//

#include "Aspect_Array1OfEdge.h"
#include "../Converter.h"
#include "Aspect_Edge.h"


using namespace OCNaroWrappers;

OCAspect_Array1OfEdge::OCAspect_Array1OfEdge(Aspect_Array1OfEdge* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCAspect_Array1OfEdge::OCAspect_Array1OfEdge(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Aspect_Array1OfEdge(Low, Up);
}

OCAspect_Array1OfEdge::OCAspect_Array1OfEdge(OCNaroWrappers::OCAspect_Edge^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Aspect_Array1OfEdge(*((Aspect_Edge*)Item->Handle), Low, Up);
}

 void OCAspect_Array1OfEdge::Init(OCNaroWrappers::OCAspect_Edge^ V)
{
  ((Aspect_Array1OfEdge*)nativeHandle)->Init(*((Aspect_Edge*)V->Handle));
}

 System::Boolean OCAspect_Array1OfEdge::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((Aspect_Array1OfEdge*)nativeHandle)->IsAllocated());
}

OCAspect_Array1OfEdge^ OCAspect_Array1OfEdge::Assign(OCNaroWrappers::OCAspect_Array1OfEdge^ Other)
{
  Aspect_Array1OfEdge* tmp = new Aspect_Array1OfEdge(0, 0);
  *tmp = ((Aspect_Array1OfEdge*)nativeHandle)->Assign(*((Aspect_Array1OfEdge*)Other->Handle));
  return gcnew OCAspect_Array1OfEdge(tmp);
}

 Standard_Integer OCAspect_Array1OfEdge::Length()
{
  return ((Aspect_Array1OfEdge*)nativeHandle)->Length();
}

 Standard_Integer OCAspect_Array1OfEdge::Lower()
{
  return ((Aspect_Array1OfEdge*)nativeHandle)->Lower();
}

 Standard_Integer OCAspect_Array1OfEdge::Upper()
{
  return ((Aspect_Array1OfEdge*)nativeHandle)->Upper();
}

 void OCAspect_Array1OfEdge::SetValue(Standard_Integer Index, OCNaroWrappers::OCAspect_Edge^ Value)
{
  ((Aspect_Array1OfEdge*)nativeHandle)->SetValue(Index, *((Aspect_Edge*)Value->Handle));
}

OCAspect_Edge^ OCAspect_Array1OfEdge::Value(Standard_Integer Index)
{
  Aspect_Edge* tmp = new Aspect_Edge();
  *tmp = ((Aspect_Array1OfEdge*)nativeHandle)->Value(Index);
  return gcnew OCAspect_Edge(tmp);
}

OCAspect_Edge^ OCAspect_Array1OfEdge::ChangeValue(Standard_Integer Index)
{
  Aspect_Edge* tmp = new Aspect_Edge();
  *tmp = ((Aspect_Array1OfEdge*)nativeHandle)->ChangeValue(Index);
  return gcnew OCAspect_Edge(tmp);
}


