// File generated by CPPExt (CPP file)
//

#include "Aspect_FontStyle.h"
#include "../Converter.h"
#include "../TCollection/TCollection_AsciiString.h"


using namespace OCNaroWrappers;

OCAspect_FontStyle::OCAspect_FontStyle(Aspect_FontStyle* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCAspect_FontStyle::OCAspect_FontStyle() 
{
  nativeHandle = new Aspect_FontStyle();
}

OCAspect_FontStyle::OCAspect_FontStyle(OCAspect_TypeOfFont Type, Quantity_Length Size, Quantity_PlaneAngle Slant, System::Boolean CapsHeight) 
{
  nativeHandle = new Aspect_FontStyle((Aspect_TypeOfFont)Type, Size, Slant, OCConverter::BooleanToStandardBoolean(CapsHeight));
}

OCAspect_FontStyle::OCAspect_FontStyle(System::String^ Style, Quantity_Length Size, Quantity_PlaneAngle Slant, System::Boolean CapsHeight) 
{
  nativeHandle = new Aspect_FontStyle(OCConverter::StringToStandardCString(Style), Size, Slant, OCConverter::BooleanToStandardBoolean(CapsHeight));
}

OCAspect_FontStyle::OCAspect_FontStyle(System::String^ Style) 
{
  nativeHandle = new Aspect_FontStyle(OCConverter::StringToStandardCString(Style));
}

OCAspect_FontStyle^ OCAspect_FontStyle::Assign(OCNaroWrappers::OCAspect_FontStyle^ Other)
{
  Aspect_FontStyle* tmp = new Aspect_FontStyle();
  *tmp = ((Aspect_FontStyle*)nativeHandle)->Assign(*((Aspect_FontStyle*)Other->Handle));
  return gcnew OCAspect_FontStyle(tmp);
}

 void OCAspect_FontStyle::SetValues(OCAspect_TypeOfFont Type, Quantity_Length Size, Quantity_PlaneAngle Slant, System::Boolean CapsHeight)
{
  ((Aspect_FontStyle*)nativeHandle)->SetValues((Aspect_TypeOfFont)Type, Size, Slant, OCConverter::BooleanToStandardBoolean(CapsHeight));
}

 void OCAspect_FontStyle::SetValues(System::String^ Style, Quantity_Length Size, Quantity_PlaneAngle Slant, System::Boolean CapsHeight)
{
  ((Aspect_FontStyle*)nativeHandle)->SetValues(OCConverter::StringToStandardCString(Style), Size, Slant, OCConverter::BooleanToStandardBoolean(CapsHeight));
}

 void OCAspect_FontStyle::SetValues(System::String^ Style)
{
  ((Aspect_FontStyle*)nativeHandle)->SetValues(OCConverter::StringToStandardCString(Style));
}

 void OCAspect_FontStyle::SetFamily(System::String^ aName)
{
  ((Aspect_FontStyle*)nativeHandle)->SetFamily(OCConverter::StringToStandardCString(aName));
}

 void OCAspect_FontStyle::SetWeight(System::String^ aName)
{
  ((Aspect_FontStyle*)nativeHandle)->SetWeight(OCConverter::StringToStandardCString(aName));
}

 void OCAspect_FontStyle::SetRegistry(System::String^ aName)
{
  ((Aspect_FontStyle*)nativeHandle)->SetRegistry(OCConverter::StringToStandardCString(aName));
}

 void OCAspect_FontStyle::SetEncoding(System::String^ aName)
{
  ((Aspect_FontStyle*)nativeHandle)->SetEncoding(OCConverter::StringToStandardCString(aName));
}

 OCAspect_TypeOfFont OCAspect_FontStyle::Style()
{
  return (OCAspect_TypeOfFont)(((Aspect_FontStyle*)nativeHandle)->Style());
}

 Standard_Integer OCAspect_FontStyle::Length()
{
  return ((Aspect_FontStyle*)nativeHandle)->Length();
}

 System::String^ OCAspect_FontStyle::Value()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->Value());
}

 Quantity_Length OCAspect_FontStyle::Size()
{
  return ((Aspect_FontStyle*)nativeHandle)->Size();
}

 Quantity_PlaneAngle OCAspect_FontStyle::Slant()
{
  return ((Aspect_FontStyle*)nativeHandle)->Slant();
}

 System::Boolean OCAspect_FontStyle::CapsHeight()
{
  return OCConverter::StandardBooleanToBoolean(((Aspect_FontStyle*)nativeHandle)->CapsHeight());
}

 System::String^ OCAspect_FontStyle::AliasName()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->AliasName());
}

 System::String^ OCAspect_FontStyle::FullName()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->FullName());
}

 System::String^ OCAspect_FontStyle::Foundry()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->Foundry());
}

 System::String^ OCAspect_FontStyle::Family()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->Family());
}

 System::String^ OCAspect_FontStyle::Weight()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->Weight());
}

 System::String^ OCAspect_FontStyle::Registry()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->Registry());
}

 System::String^ OCAspect_FontStyle::Encoding()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->Encoding());
}

 System::String^ OCAspect_FontStyle::SSlant()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SSlant());
}

 System::String^ OCAspect_FontStyle::SWidth()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SWidth());
}

 System::String^ OCAspect_FontStyle::SStyle()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SStyle());
}

 System::String^ OCAspect_FontStyle::SPixelSize()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SPixelSize());
}

 System::String^ OCAspect_FontStyle::SPointSize()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SPointSize());
}

 System::String^ OCAspect_FontStyle::SResolutionX()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SResolutionX());
}

 System::String^ OCAspect_FontStyle::SResolutionY()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SResolutionY());
}

 System::String^ OCAspect_FontStyle::SSpacing()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SSpacing());
}

 System::String^ OCAspect_FontStyle::SAverageWidth()
{
  return OCConverter::StandardCStringToString(((Aspect_FontStyle*)nativeHandle)->SAverageWidth());
}

 void OCAspect_FontStyle::Dump()
{
  ((Aspect_FontStyle*)nativeHandle)->Dump();
}

 System::Boolean OCAspect_FontStyle::IsEqual(OCNaroWrappers::OCAspect_FontStyle^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Aspect_FontStyle*)nativeHandle)->IsEqual(*((Aspect_FontStyle*)Other->Handle)));
}

 System::Boolean OCAspect_FontStyle::IsNotEqual(OCNaroWrappers::OCAspect_FontStyle^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Aspect_FontStyle*)nativeHandle)->IsNotEqual(*((Aspect_FontStyle*)Other->Handle)));
}


