// File generated by CPPExt (CPP file)
//

#include "Aspect_Window.h"
#include "../Converter.h"
#include "Aspect_GraphicDevice.h"
#include "Aspect_Background.h"
#include "../Quantity/Quantity_Color.h"
#include "Aspect_GradientBackground.h"


using namespace OCNaroWrappers;

OCAspect_Window::OCAspect_Window(Handle(Aspect_Window)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Aspect_Window(*nativeHandle);
}

OCAspect_Window::OCAspect_Window(OCNaroWrappers::OCAspect_GraphicDevice^ aGraphicDevice) : OCMMgt_TShared((OCDummy^)nullptr)

{}

OCAspect_Background^ OCAspect_Window::Background()
{
  Aspect_Background* tmp = new Aspect_Background();
  *tmp = (*((Handle_Aspect_Window*)nativeHandle))->Background();
  return gcnew OCAspect_Background(tmp);
}

 System::String^ OCAspect_Window::BackgroundImage()
{
  return OCConverter::StandardCStringToString((*((Handle_Aspect_Window*)nativeHandle))->BackgroundImage());
}

 OCAspect_FillMethod OCAspect_Window::BackgroundFillMethod()
{
  return (OCAspect_FillMethod)((*((Handle_Aspect_Window*)nativeHandle))->BackgroundFillMethod());
}

OCAspect_GradientBackground^ OCAspect_Window::GradientBackground()
{
  Aspect_GradientBackground* tmp = new Aspect_GradientBackground();
  *tmp = (*((Handle_Aspect_Window*)nativeHandle))->GradientBackground();
  return gcnew OCAspect_GradientBackground(tmp);
}

 System::IntPtr OCAspect_Window::HBackground()
{
  return System::IntPtr((*((Handle_Aspect_Window*)nativeHandle))->HBackground());
}

OCAspect_GraphicDevice^ OCAspect_Window::GraphicDevice()
{
  Handle(Aspect_GraphicDevice) tmp = (*((Handle_Aspect_Window*)nativeHandle))->GraphicDevice();
  return gcnew OCAspect_GraphicDevice(&tmp);
}

 System::Boolean OCAspect_Window::IsVirtual()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Aspect_Window*)nativeHandle))->IsVirtual());
}

 void OCAspect_Window::SetVirtual(System::Boolean theVirtual)
{
  (*((Handle_Aspect_Window*)nativeHandle))->SetVirtual(OCConverter::BooleanToStandardBoolean(theVirtual));
}


