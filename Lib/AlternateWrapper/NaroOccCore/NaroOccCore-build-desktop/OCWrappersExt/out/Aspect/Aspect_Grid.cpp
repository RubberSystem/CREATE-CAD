// File generated by CPPExt (CPP file)
//

#include "Aspect_Grid.h"
#include "../Converter.h"
#include "../Quantity/Quantity_Color.h"


using namespace OCNaroWrappers;

OCAspect_Grid::OCAspect_Grid(Handle(Aspect_Grid)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Aspect_Grid(*nativeHandle);
}

OCAspect_Grid::OCAspect_Grid(Quantity_Length anXOrigin, Quantity_Length anYOrigin, Quantity_PlaneAngle aRotationAngle, OCNaroWrappers::OCQuantity_Color^ aColor, OCNaroWrappers::OCQuantity_Color^ aTenthColor) : OCMMgt_TShared((OCDummy^)nullptr)

{}

 void OCAspect_Grid::SetXOrigin(Quantity_Length anOrigin)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->SetXOrigin(anOrigin);
}

 void OCAspect_Grid::SetYOrigin(Quantity_Length anOrigin)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->SetYOrigin(anOrigin);
}

 void OCAspect_Grid::SetRotationAngle(Quantity_PlaneAngle anAngle)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->SetRotationAngle(anAngle);
}

 void OCAspect_Grid::Rotate(Quantity_PlaneAngle anAngle)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->Rotate(anAngle);
}

 void OCAspect_Grid::Translate(Quantity_Length aDx, Quantity_Length aDy)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->Translate(aDx, aDy);
}

 void OCAspect_Grid::SetColors(OCNaroWrappers::OCQuantity_Color^ aColor, OCNaroWrappers::OCQuantity_Color^ aTenthColor)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->SetColors(*((Quantity_Color*)aColor->Handle), *((Quantity_Color*)aTenthColor->Handle));
}

 void OCAspect_Grid::Hit(Quantity_Length X, Quantity_Length Y, Quantity_Length& gridX, Quantity_Length& gridY)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->Hit(X, Y, gridX, gridY);
}

 void OCAspect_Grid::Activate()
{
  (*((Handle_Aspect_Grid*)nativeHandle))->Activate();
}

 void OCAspect_Grid::Deactivate()
{
  (*((Handle_Aspect_Grid*)nativeHandle))->Deactivate();
}

 Quantity_Length OCAspect_Grid::XOrigin()
{
  return (*((Handle_Aspect_Grid*)nativeHandle))->XOrigin();
}

 Quantity_Length OCAspect_Grid::YOrigin()
{
  return (*((Handle_Aspect_Grid*)nativeHandle))->YOrigin();
}

 Quantity_PlaneAngle OCAspect_Grid::RotationAngle()
{
  return (*((Handle_Aspect_Grid*)nativeHandle))->RotationAngle();
}

 System::Boolean OCAspect_Grid::IsActive()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Aspect_Grid*)nativeHandle))->IsActive());
}

 void OCAspect_Grid::Colors(OCNaroWrappers::OCQuantity_Color^ aColor, OCNaroWrappers::OCQuantity_Color^ aTenthColor)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->Colors(*((Quantity_Color*)aColor->Handle), *((Quantity_Color*)aTenthColor->Handle));
}

 void OCAspect_Grid::SetDrawMode(OCAspect_GridDrawMode aDrawMode)
{
  (*((Handle_Aspect_Grid*)nativeHandle))->SetDrawMode((Aspect_GridDrawMode)aDrawMode);
}

 OCAspect_GridDrawMode OCAspect_Grid::DrawMode()
{
  return (OCAspect_GridDrawMode)((*((Handle_Aspect_Grid*)nativeHandle))->DrawMode());
}

 void OCAspect_Grid::Display()
{
  (*((Handle_Aspect_Grid*)nativeHandle))->Display();
}

 void OCAspect_Grid::Erase()
{
  (*((Handle_Aspect_Grid*)nativeHandle))->Erase();
}

 System::Boolean OCAspect_Grid::IsDisplayed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Aspect_Grid*)nativeHandle))->IsDisplayed());
}


