// File generated by CPPExt (Transient)
//
#ifndef _Storage_Root_OCWrappers_HeaderFile
#define _Storage_Root_OCWrappers_HeaderFile

// include the wrapped class
#include <Storage_Root.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCStandard_Persistent;
ref class OCStorage_Schema;
ref class OCTCollection_AsciiString;



//! A root object extracted from a Storage_Data object. <br>
//! A Storage_Root encapsulates a persistent <br>
//! object which is a root of a Storage_Data object. <br>
//! It contains additional information: the name and <br>
//! the data type of the persistent object. <br>
//! When retrieving a Storage_Data object from a <br>
//! container (for example, a file) you access its <br>
//! roots with the function Roots which returns a <br>
//! sequence of root objects. The provided functions <br>
//! allow you to request information about each root of the sequence. <br>
//! You do not create explicit roots: when inserting <br>
//! data in a Storage_Data object, you just provide <br>
//! the persistent object and optionally its name to the function AddRoot. <br>
public ref class OCStorage_Root : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCStorage_Root(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCStorage_Root(Handle(Storage_Root)* nativeHandle);

// Methods PUBLIC


OCStorage_Root();


OCStorage_Root(OCNaroWrappers::OCTCollection_AsciiString^ aName, OCNaroWrappers::OCStandard_Persistent^ anObject);


 /*instead*/  void SetName(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;


//! Returns the name of this root object. <br>
//!   The name may have been given explicitly when <br>
//! the root was inserted into the Storage_Data <br>
//! object. If not, the name is a reference number <br>
//! which was assigned automatically by the driver <br>
//! when writing the set of data into the container. <br>
//! When naming the roots, it is easier to retrieve <br>
//! objects by significant references rather than by <br>
//! references without any semantic values. <br>
//! Warning <br>
//! The returned string will be empty if you call this <br>
//! function before having named this root object, <br>
//! either explicitly, or when writing the set of data <br>
//! into the container. <br>
 /*instead*/  OCTCollection_AsciiString^ Name() ;


 /*instead*/  void SetObject(OCNaroWrappers::OCStandard_Persistent^ anObject) ;


//! Returns the persistent object encapsulated by this root. <br>
 /*instead*/  OCStandard_Persistent^ Object() ;

//! Returns the name of this root type. <br>
 /*instead*/  OCTCollection_AsciiString^ Type() ;

~OCStorage_Root()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
