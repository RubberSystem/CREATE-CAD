// File generated by CPPExt (CPP file)
//

#include "Storage_HSeqOfCallBack.h"
#include "../Converter.h"
#include "Storage_CallBack.h"
#include "Storage_SeqOfCallBack.h"


using namespace OCNaroWrappers;

OCStorage_HSeqOfCallBack::OCStorage_HSeqOfCallBack(Handle(Storage_HSeqOfCallBack)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Storage_HSeqOfCallBack(*nativeHandle);
}

OCStorage_HSeqOfCallBack::OCStorage_HSeqOfCallBack() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Storage_HSeqOfCallBack(new Storage_HSeqOfCallBack());
}

 System::Boolean OCStorage_HSeqOfCallBack::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCStorage_HSeqOfCallBack::Length()
{
  return (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Length();
}

 void OCStorage_HSeqOfCallBack::Clear()
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Clear();
}

 void OCStorage_HSeqOfCallBack::Append(OCNaroWrappers::OCStorage_CallBack^ anItem)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Append(*((Handle_Storage_CallBack*)anItem->Handle));
}

 void OCStorage_HSeqOfCallBack::Append(OCNaroWrappers::OCStorage_HSeqOfCallBack^ aSequence)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Append(*((Handle_Storage_HSeqOfCallBack*)aSequence->Handle));
}

 void OCStorage_HSeqOfCallBack::Prepend(OCNaroWrappers::OCStorage_CallBack^ anItem)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Prepend(*((Handle_Storage_CallBack*)anItem->Handle));
}

 void OCStorage_HSeqOfCallBack::Prepend(OCNaroWrappers::OCStorage_HSeqOfCallBack^ aSequence)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Prepend(*((Handle_Storage_HSeqOfCallBack*)aSequence->Handle));
}

 void OCStorage_HSeqOfCallBack::Reverse()
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Reverse();
}

 void OCStorage_HSeqOfCallBack::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCStorage_CallBack^ anItem)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->InsertBefore(anIndex, *((Handle_Storage_CallBack*)anItem->Handle));
}

 void OCStorage_HSeqOfCallBack::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCStorage_HSeqOfCallBack^ aSequence)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->InsertBefore(anIndex, *((Handle_Storage_HSeqOfCallBack*)aSequence->Handle));
}

 void OCStorage_HSeqOfCallBack::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCStorage_CallBack^ anItem)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->InsertAfter(anIndex, *((Handle_Storage_CallBack*)anItem->Handle));
}

 void OCStorage_HSeqOfCallBack::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCStorage_HSeqOfCallBack^ aSequence)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->InsertAfter(anIndex, *((Handle_Storage_HSeqOfCallBack*)aSequence->Handle));
}

 void OCStorage_HSeqOfCallBack::Exchange(Standard_Integer anIndex, Standard_Integer anOtherIndex)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Exchange(anIndex, anOtherIndex);
}

OCStorage_HSeqOfCallBack^ OCStorage_HSeqOfCallBack::Split(Standard_Integer anIndex)
{
  Handle(Storage_HSeqOfCallBack) tmp = (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Split(anIndex);
  return gcnew OCStorage_HSeqOfCallBack(&tmp);
}

 void OCStorage_HSeqOfCallBack::SetValue(Standard_Integer anIndex, OCNaroWrappers::OCStorage_CallBack^ anItem)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->SetValue(anIndex, *((Handle_Storage_CallBack*)anItem->Handle));
}

OCStorage_CallBack^ OCStorage_HSeqOfCallBack::Value(Standard_Integer anIndex)
{
  Handle(Storage_CallBack) tmp = (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Value(anIndex);
  return gcnew OCStorage_CallBack(&tmp);
}

OCStorage_CallBack^ OCStorage_HSeqOfCallBack::ChangeValue(Standard_Integer anIndex)
{
  Handle(Storage_CallBack) tmp = (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->ChangeValue(anIndex);
  return gcnew OCStorage_CallBack(&tmp);
}

 void OCStorage_HSeqOfCallBack::Remove(Standard_Integer anIndex)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Remove(anIndex);
}

 void OCStorage_HSeqOfCallBack::Remove(Standard_Integer fromIndex, Standard_Integer toIndex)
{
  (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Remove(fromIndex, toIndex);
}

OCStorage_SeqOfCallBack^ OCStorage_HSeqOfCallBack::Sequence()
{
  Storage_SeqOfCallBack* tmp = new Storage_SeqOfCallBack();
  *tmp = (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->Sequence();
  return gcnew OCStorage_SeqOfCallBack(tmp);
}

OCStorage_SeqOfCallBack^ OCStorage_HSeqOfCallBack::ChangeSequence()
{
  Storage_SeqOfCallBack* tmp = new Storage_SeqOfCallBack();
  *tmp = (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->ChangeSequence();
  return gcnew OCStorage_SeqOfCallBack(tmp);
}

OCStorage_HSeqOfCallBack^ OCStorage_HSeqOfCallBack::ShallowCopy()
{
  Handle(Storage_HSeqOfCallBack) tmp = (*((Handle_Storage_HSeqOfCallBack*)nativeHandle))->ShallowCopy();
  return gcnew OCStorage_HSeqOfCallBack(&tmp);
}


