// File generated by CPPExt (CPP file)
//

#include "Storage_HSeqOfRoot.h"
#include "../Converter.h"
#include "Storage_Root.h"
#include "Storage_SeqOfRoot.h"


using namespace OCNaroWrappers;

OCStorage_HSeqOfRoot::OCStorage_HSeqOfRoot(Handle(Storage_HSeqOfRoot)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Storage_HSeqOfRoot(*nativeHandle);
}

OCStorage_HSeqOfRoot::OCStorage_HSeqOfRoot() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Storage_HSeqOfRoot(new Storage_HSeqOfRoot());
}

 System::Boolean OCStorage_HSeqOfRoot::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_HSeqOfRoot*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCStorage_HSeqOfRoot::Length()
{
  return (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Length();
}

 void OCStorage_HSeqOfRoot::Clear()
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Clear();
}

 void OCStorage_HSeqOfRoot::Append(OCNaroWrappers::OCStorage_Root^ anItem)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Append(*((Handle_Storage_Root*)anItem->Handle));
}

 void OCStorage_HSeqOfRoot::Append(OCNaroWrappers::OCStorage_HSeqOfRoot^ aSequence)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Append(*((Handle_Storage_HSeqOfRoot*)aSequence->Handle));
}

 void OCStorage_HSeqOfRoot::Prepend(OCNaroWrappers::OCStorage_Root^ anItem)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Prepend(*((Handle_Storage_Root*)anItem->Handle));
}

 void OCStorage_HSeqOfRoot::Prepend(OCNaroWrappers::OCStorage_HSeqOfRoot^ aSequence)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Prepend(*((Handle_Storage_HSeqOfRoot*)aSequence->Handle));
}

 void OCStorage_HSeqOfRoot::Reverse()
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Reverse();
}

 void OCStorage_HSeqOfRoot::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCStorage_Root^ anItem)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->InsertBefore(anIndex, *((Handle_Storage_Root*)anItem->Handle));
}

 void OCStorage_HSeqOfRoot::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCStorage_HSeqOfRoot^ aSequence)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->InsertBefore(anIndex, *((Handle_Storage_HSeqOfRoot*)aSequence->Handle));
}

 void OCStorage_HSeqOfRoot::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCStorage_Root^ anItem)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->InsertAfter(anIndex, *((Handle_Storage_Root*)anItem->Handle));
}

 void OCStorage_HSeqOfRoot::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCStorage_HSeqOfRoot^ aSequence)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->InsertAfter(anIndex, *((Handle_Storage_HSeqOfRoot*)aSequence->Handle));
}

 void OCStorage_HSeqOfRoot::Exchange(Standard_Integer anIndex, Standard_Integer anOtherIndex)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Exchange(anIndex, anOtherIndex);
}

OCStorage_HSeqOfRoot^ OCStorage_HSeqOfRoot::Split(Standard_Integer anIndex)
{
  Handle(Storage_HSeqOfRoot) tmp = (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Split(anIndex);
  return gcnew OCStorage_HSeqOfRoot(&tmp);
}

 void OCStorage_HSeqOfRoot::SetValue(Standard_Integer anIndex, OCNaroWrappers::OCStorage_Root^ anItem)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->SetValue(anIndex, *((Handle_Storage_Root*)anItem->Handle));
}

OCStorage_Root^ OCStorage_HSeqOfRoot::Value(Standard_Integer anIndex)
{
  Handle(Storage_Root) tmp = (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Value(anIndex);
  return gcnew OCStorage_Root(&tmp);
}

OCStorage_Root^ OCStorage_HSeqOfRoot::ChangeValue(Standard_Integer anIndex)
{
  Handle(Storage_Root) tmp = (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->ChangeValue(anIndex);
  return gcnew OCStorage_Root(&tmp);
}

 void OCStorage_HSeqOfRoot::Remove(Standard_Integer anIndex)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Remove(anIndex);
}

 void OCStorage_HSeqOfRoot::Remove(Standard_Integer fromIndex, Standard_Integer toIndex)
{
  (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Remove(fromIndex, toIndex);
}

OCStorage_SeqOfRoot^ OCStorage_HSeqOfRoot::Sequence()
{
  Storage_SeqOfRoot* tmp = new Storage_SeqOfRoot();
  *tmp = (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->Sequence();
  return gcnew OCStorage_SeqOfRoot(tmp);
}

OCStorage_SeqOfRoot^ OCStorage_HSeqOfRoot::ChangeSequence()
{
  Storage_SeqOfRoot* tmp = new Storage_SeqOfRoot();
  *tmp = (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->ChangeSequence();
  return gcnew OCStorage_SeqOfRoot(tmp);
}

OCStorage_HSeqOfRoot^ OCStorage_HSeqOfRoot::ShallowCopy()
{
  Handle(Storage_HSeqOfRoot) tmp = (*((Handle_Storage_HSeqOfRoot*)nativeHandle))->ShallowCopy();
  return gcnew OCStorage_HSeqOfRoot(&tmp);
}


