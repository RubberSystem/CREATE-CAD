// File generated by CPPExt (CPP file)
//

#include "Storage_ArrayOfCallBack.h"
#include "../Converter.h"
#include "Storage_CallBack.h"


using namespace OCNaroWrappers;

OCStorage_ArrayOfCallBack::OCStorage_ArrayOfCallBack(Storage_ArrayOfCallBack* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCStorage_ArrayOfCallBack::OCStorage_ArrayOfCallBack(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Storage_ArrayOfCallBack(Low, Up);
}

OCStorage_ArrayOfCallBack::OCStorage_ArrayOfCallBack(OCNaroWrappers::OCStorage_CallBack^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Storage_ArrayOfCallBack(*((Handle_Storage_CallBack*)Item->Handle), Low, Up);
}

 void OCStorage_ArrayOfCallBack::Init(OCNaroWrappers::OCStorage_CallBack^ V)
{
  ((Storage_ArrayOfCallBack*)nativeHandle)->Init(*((Handle_Storage_CallBack*)V->Handle));
}

 System::Boolean OCStorage_ArrayOfCallBack::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((Storage_ArrayOfCallBack*)nativeHandle)->IsAllocated());
}

OCStorage_ArrayOfCallBack^ OCStorage_ArrayOfCallBack::Assign(OCNaroWrappers::OCStorage_ArrayOfCallBack^ Other)
{
  Storage_ArrayOfCallBack* tmp = new Storage_ArrayOfCallBack(0, 0);
  *tmp = ((Storage_ArrayOfCallBack*)nativeHandle)->Assign(*((Storage_ArrayOfCallBack*)Other->Handle));
  return gcnew OCStorage_ArrayOfCallBack(tmp);
}

 Standard_Integer OCStorage_ArrayOfCallBack::Length()
{
  return ((Storage_ArrayOfCallBack*)nativeHandle)->Length();
}

 Standard_Integer OCStorage_ArrayOfCallBack::Lower()
{
  return ((Storage_ArrayOfCallBack*)nativeHandle)->Lower();
}

 Standard_Integer OCStorage_ArrayOfCallBack::Upper()
{
  return ((Storage_ArrayOfCallBack*)nativeHandle)->Upper();
}

 void OCStorage_ArrayOfCallBack::SetValue(Standard_Integer Index, OCNaroWrappers::OCStorage_CallBack^ Value)
{
  ((Storage_ArrayOfCallBack*)nativeHandle)->SetValue(Index, *((Handle_Storage_CallBack*)Value->Handle));
}

OCStorage_CallBack^ OCStorage_ArrayOfCallBack::Value(Standard_Integer Index)
{
  Handle(Storage_CallBack) tmp = ((Storage_ArrayOfCallBack*)nativeHandle)->Value(Index);
  return gcnew OCStorage_CallBack(&tmp);
}

OCStorage_CallBack^ OCStorage_ArrayOfCallBack::ChangeValue(Standard_Integer Index)
{
  Handle(Storage_CallBack) tmp = ((Storage_ArrayOfCallBack*)nativeHandle)->ChangeValue(Index);
  return gcnew OCStorage_CallBack(&tmp);
}


