// File generated by CPPExt (CPP file)
//

#include "Storage_RootData.h"
#include "../Converter.h"
#include "Storage_Schema.h"
#include "Storage_Root.h"
#include "Storage_HSeqOfRoot.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../Standard/Standard_Persistent.h"


using namespace OCNaroWrappers;

OCStorage_RootData::OCStorage_RootData(Handle(Storage_RootData)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Storage_RootData(*nativeHandle);
}

OCStorage_RootData::OCStorage_RootData() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Storage_RootData(new Storage_RootData());
}

 Standard_Integer OCStorage_RootData::NumberOfRoots()
{
  return (*((Handle_Storage_RootData*)nativeHandle))->NumberOfRoots();
}

 void OCStorage_RootData::AddRoot(OCNaroWrappers::OCStorage_Root^ aRoot)
{
  (*((Handle_Storage_RootData*)nativeHandle))->AddRoot(*((Handle_Storage_Root*)aRoot->Handle));
}

OCStorage_HSeqOfRoot^ OCStorage_RootData::Roots()
{
  Handle(Storage_HSeqOfRoot) tmp = (*((Handle_Storage_RootData*)nativeHandle))->Roots();
  return gcnew OCStorage_HSeqOfRoot(&tmp);
}

OCStorage_Root^ OCStorage_RootData::Find(OCNaroWrappers::OCTCollection_AsciiString^ aName)
{
  Handle(Storage_Root) tmp = (*((Handle_Storage_RootData*)nativeHandle))->Find(*((TCollection_AsciiString*)aName->Handle));
  return gcnew OCStorage_Root(&tmp);
}

 System::Boolean OCStorage_RootData::IsRoot(OCNaroWrappers::OCTCollection_AsciiString^ aName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_RootData*)nativeHandle))->IsRoot(*((TCollection_AsciiString*)aName->Handle)));
}

 void OCStorage_RootData::RemoveRoot(OCNaroWrappers::OCTCollection_AsciiString^ aName)
{
  (*((Handle_Storage_RootData*)nativeHandle))->RemoveRoot(*((TCollection_AsciiString*)aName->Handle));
}

 OCStorage_Error OCStorage_RootData::ErrorStatus()
{
  return (OCStorage_Error)((*((Handle_Storage_RootData*)nativeHandle))->ErrorStatus());
}

OCTCollection_AsciiString^ OCStorage_RootData::ErrorStatusExtension()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_RootData*)nativeHandle))->ErrorStatusExtension();
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCStorage_RootData::ClearErrorStatus()
{
  (*((Handle_Storage_RootData*)nativeHandle))->ClearErrorStatus();
}


