// File generated by CPPExt (CPP file)
//

#include "Storage_HSeqOfPersistent.h"
#include "../Converter.h"
#include "../Standard/Standard_Persistent.h"
#include "Storage_SeqOfPersistent.h"


using namespace OCNaroWrappers;

OCStorage_HSeqOfPersistent::OCStorage_HSeqOfPersistent(Handle(Storage_HSeqOfPersistent)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Storage_HSeqOfPersistent(*nativeHandle);
}

OCStorage_HSeqOfPersistent::OCStorage_HSeqOfPersistent() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Storage_HSeqOfPersistent(new Storage_HSeqOfPersistent());
}

 System::Boolean OCStorage_HSeqOfPersistent::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCStorage_HSeqOfPersistent::Length()
{
  return (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Length();
}

 void OCStorage_HSeqOfPersistent::Clear()
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Clear();
}

 void OCStorage_HSeqOfPersistent::Append(OCNaroWrappers::OCStandard_Persistent^ anItem)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Append(*((Handle_Standard_Persistent*)anItem->Handle));
}

 void OCStorage_HSeqOfPersistent::Append(OCNaroWrappers::OCStorage_HSeqOfPersistent^ aSequence)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Append(*((Handle_Storage_HSeqOfPersistent*)aSequence->Handle));
}

 void OCStorage_HSeqOfPersistent::Prepend(OCNaroWrappers::OCStandard_Persistent^ anItem)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Prepend(*((Handle_Standard_Persistent*)anItem->Handle));
}

 void OCStorage_HSeqOfPersistent::Prepend(OCNaroWrappers::OCStorage_HSeqOfPersistent^ aSequence)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Prepend(*((Handle_Storage_HSeqOfPersistent*)aSequence->Handle));
}

 void OCStorage_HSeqOfPersistent::Reverse()
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Reverse();
}

 void OCStorage_HSeqOfPersistent::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCStandard_Persistent^ anItem)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->InsertBefore(anIndex, *((Handle_Standard_Persistent*)anItem->Handle));
}

 void OCStorage_HSeqOfPersistent::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCStorage_HSeqOfPersistent^ aSequence)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->InsertBefore(anIndex, *((Handle_Storage_HSeqOfPersistent*)aSequence->Handle));
}

 void OCStorage_HSeqOfPersistent::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCStandard_Persistent^ anItem)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->InsertAfter(anIndex, *((Handle_Standard_Persistent*)anItem->Handle));
}

 void OCStorage_HSeqOfPersistent::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCStorage_HSeqOfPersistent^ aSequence)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->InsertAfter(anIndex, *((Handle_Storage_HSeqOfPersistent*)aSequence->Handle));
}

 void OCStorage_HSeqOfPersistent::Exchange(Standard_Integer anIndex, Standard_Integer anOtherIndex)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Exchange(anIndex, anOtherIndex);
}

OCStorage_HSeqOfPersistent^ OCStorage_HSeqOfPersistent::Split(Standard_Integer anIndex)
{
  Handle(Storage_HSeqOfPersistent) tmp = (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Split(anIndex);
  return gcnew OCStorage_HSeqOfPersistent(&tmp);
}

 void OCStorage_HSeqOfPersistent::SetValue(Standard_Integer anIndex, OCNaroWrappers::OCStandard_Persistent^ anItem)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->SetValue(anIndex, *((Handle_Standard_Persistent*)anItem->Handle));
}

OCStandard_Persistent^ OCStorage_HSeqOfPersistent::Value(Standard_Integer anIndex)
{
  Handle(Standard_Persistent) tmp = (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Value(anIndex);
  return gcnew OCStandard_Persistent(&tmp);
}

OCStandard_Persistent^ OCStorage_HSeqOfPersistent::ChangeValue(Standard_Integer anIndex)
{
  Handle(Standard_Persistent) tmp = (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->ChangeValue(anIndex);
  return gcnew OCStandard_Persistent(&tmp);
}

 void OCStorage_HSeqOfPersistent::Remove(Standard_Integer anIndex)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Remove(anIndex);
}

 void OCStorage_HSeqOfPersistent::Remove(Standard_Integer fromIndex, Standard_Integer toIndex)
{
  (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Remove(fromIndex, toIndex);
}

OCStorage_SeqOfPersistent^ OCStorage_HSeqOfPersistent::Sequence()
{
  Storage_SeqOfPersistent* tmp = new Storage_SeqOfPersistent();
  *tmp = (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->Sequence();
  return gcnew OCStorage_SeqOfPersistent(tmp);
}

OCStorage_SeqOfPersistent^ OCStorage_HSeqOfPersistent::ChangeSequence()
{
  Storage_SeqOfPersistent* tmp = new Storage_SeqOfPersistent();
  *tmp = (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->ChangeSequence();
  return gcnew OCStorage_SeqOfPersistent(tmp);
}

OCStorage_HSeqOfPersistent^ OCStorage_HSeqOfPersistent::ShallowCopy()
{
  Handle(Storage_HSeqOfPersistent) tmp = (*((Handle_Storage_HSeqOfPersistent*)nativeHandle))->ShallowCopy();
  return gcnew OCStorage_HSeqOfPersistent(&tmp);
}


