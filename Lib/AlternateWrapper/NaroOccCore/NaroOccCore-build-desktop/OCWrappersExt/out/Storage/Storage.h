// File generated by CPPExt (Package)
//

#ifndef _Storage_OCWrappers_HeaderFile
#define _Storage_OCWrappers_HeaderFile

// Include the wrapped header
#include <Storage.hxx>

#include "Storage_BaseDriver.h"
#include "Storage_CallBack.h"
#include "Storage_DefaultCallBack.h"
#include "Storage_HeaderData.h"
#include "Storage_Data.h"
#include "Storage_TypeData.h"
#include "Storage_RootData.h"
#include "Storage_Root.h"
#include "Storage_Schema.h"
#include "Storage_SeqOfRoot.h"
#include "Storage_HSeqOfRoot.h"
#include "Storage_InternalData.h"
#include "Storage_stCONSTclCOM.h"
#include "Storage_TypedCallBack.h"
#include "Storage_SeqOfPersistent.h"
#include "Storage_HSeqOfPersistent.h"
#include "Storage_MapPSDHasher.h"
#include "Storage_PType.h"
#include "Storage_MapOfPers.h"
#include "Storage_MapOfCallBack.h"
#include "Storage_ArrayOfCallBack.h"
#include "Storage_HArrayOfCallBack.h"
#include "Storage_ArrayOfSchema.h"
#include "Storage_HArrayOfSchema.h"
#include "Storage_SeqOfCallBack.h"
#include "Storage_HSeqOfCallBack.h"
#include "Storage_PArray.h"
#include "Storage_HPArray.h"
#include "Storage_SequenceNodeOfSeqOfRoot.h"
#include "Storage_SequenceNodeOfSeqOfPersistent.h"
#include "Storage_IndexedDataMapNodeOfPType.h"
#include "Storage_DataMapNodeOfMapOfPers.h"
#include "Storage_DataMapIteratorOfMapOfPers.h"
#include "Storage_DataMapNodeOfMapOfCallBack.h"
#include "Storage_DataMapIteratorOfMapOfCallBack.h"
#include "Storage_SequenceNodeOfSeqOfCallBack.h"


namespace OCNaroWrappers
{
//! Storage package is used to write and read persistent objects. <br>
//!     These objects are read and written by a retrieval or storage <br>
//!  algorithm (Storage_Schema object) in a container (disk, memory, <br>
//! network ...). Drivers (FSD_File objects) assign a physical <br>
//! container for data to be stored or retrieved. <br>
//! The standard procedure for an application in <br>
//! reading a container is the following: <br>
//! -   open the driver in reading mode, <br>
//! -   call the Read function from the schema, <br>
//!   setting the driver as a parameter. This   function returns <br>
//! an instance of the   Storage_Data class which contains the   data being read, <br>
//! -   close the driver. <br>
//! The standard procedure for an application in writing a container is the following: <br>
//! -   open the driver in writing mode, <br>
//! -   create an instance of the Storage_Data   class, then <br>
//!    add the persistent data to write   with the function AddRoot, <br>
//! -   call the function Write from the schema, <br>
//!   setting the driver and the Storage_Data   instance as parameters, <br>
//! -      close the driver. <br>
public ref class OCStorage abstract sealed
{

public:
// Methods

//! returns the version of Storage's read/write routines <br>
static /*instead*/  OCTCollection_AsciiString^ Version() ;


};

}; // OCNaroWrappers

#endif
