// File generated by CPPExt (CPP file)
//

#include "Storage_Data.h"
#include "../Converter.h"
#include "Storage_HeaderData.h"
#include "Storage_RootData.h"
#include "Storage_TypeData.h"
#include "Storage_InternalData.h"
#include "Storage_Schema.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../TColStd/TColStd_SequenceOfAsciiString.h"
#include "../TColStd/TColStd_SequenceOfExtendedString.h"
#include "../Standard/Standard_Persistent.h"
#include "Storage_HSeqOfRoot.h"
#include "Storage_Root.h"
#include "../TColStd/TColStd_HSequenceOfAsciiString.h"


using namespace OCNaroWrappers;

OCStorage_Data::OCStorage_Data(Handle(Storage_Data)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Storage_Data(*nativeHandle);
}

OCStorage_Data::OCStorage_Data() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Storage_Data(new Storage_Data());
}

 OCStorage_Error OCStorage_Data::ErrorStatus()
{
  return (OCStorage_Error)((*((Handle_Storage_Data*)nativeHandle))->ErrorStatus());
}

 void OCStorage_Data::ClearErrorStatus()
{
  (*((Handle_Storage_Data*)nativeHandle))->ClearErrorStatus();
}

OCTCollection_AsciiString^ OCStorage_Data::ErrorStatusExtension()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->ErrorStatusExtension();
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCStorage_Data::CreationDate()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->CreationDate();
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCStorage_Data::StorageVersion()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->StorageVersion();
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCStorage_Data::SchemaVersion()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->SchemaVersion();
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCStorage_Data::SchemaName()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->SchemaName();
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCStorage_Data::SetApplicationVersion(OCNaroWrappers::OCTCollection_AsciiString^ aVersion)
{
  (*((Handle_Storage_Data*)nativeHandle))->SetApplicationVersion(*((TCollection_AsciiString*)aVersion->Handle));
}

OCTCollection_AsciiString^ OCStorage_Data::ApplicationVersion()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->ApplicationVersion();
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCStorage_Data::SetApplicationName(OCNaroWrappers::OCTCollection_ExtendedString^ aName)
{
  (*((Handle_Storage_Data*)nativeHandle))->SetApplicationName(*((TCollection_ExtendedString*)aName->Handle));
}

OCTCollection_ExtendedString^ OCStorage_Data::ApplicationName()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->ApplicationName();
  return gcnew OCTCollection_ExtendedString(tmp);
}

 void OCStorage_Data::SetDataType(OCNaroWrappers::OCTCollection_ExtendedString^ aType)
{
  (*((Handle_Storage_Data*)nativeHandle))->SetDataType(*((TCollection_ExtendedString*)aType->Handle));
}

OCTCollection_ExtendedString^ OCStorage_Data::DataType()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->DataType();
  return gcnew OCTCollection_ExtendedString(tmp);
}

 void OCStorage_Data::AddToUserInfo(OCNaroWrappers::OCTCollection_AsciiString^ anInfo)
{
  (*((Handle_Storage_Data*)nativeHandle))->AddToUserInfo(*((TCollection_AsciiString*)anInfo->Handle));
}

OCTColStd_SequenceOfAsciiString^ OCStorage_Data::UserInfo()
{
  TColStd_SequenceOfAsciiString* tmp = new TColStd_SequenceOfAsciiString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->UserInfo();
  return gcnew OCTColStd_SequenceOfAsciiString(tmp);
}

 void OCStorage_Data::AddToComments(OCNaroWrappers::OCTCollection_ExtendedString^ aComment)
{
  (*((Handle_Storage_Data*)nativeHandle))->AddToComments(*((TCollection_ExtendedString*)aComment->Handle));
}

OCTColStd_SequenceOfExtendedString^ OCStorage_Data::Comments()
{
  TColStd_SequenceOfExtendedString* tmp = new TColStd_SequenceOfExtendedString();
  *tmp = (*((Handle_Storage_Data*)nativeHandle))->Comments();
  return gcnew OCTColStd_SequenceOfExtendedString(tmp);
}

 Standard_Integer OCStorage_Data::NumberOfObjects()
{
  return (*((Handle_Storage_Data*)nativeHandle))->NumberOfObjects();
}

 Standard_Integer OCStorage_Data::NumberOfRoots()
{
  return (*((Handle_Storage_Data*)nativeHandle))->NumberOfRoots();
}

 void OCStorage_Data::AddRoot(OCNaroWrappers::OCStandard_Persistent^ anObject)
{
  (*((Handle_Storage_Data*)nativeHandle))->AddRoot(*((Handle_Standard_Persistent*)anObject->Handle));
}

 void OCStorage_Data::AddRoot(OCNaroWrappers::OCTCollection_AsciiString^ aName, OCNaroWrappers::OCStandard_Persistent^ anObject)
{
  (*((Handle_Storage_Data*)nativeHandle))->AddRoot(*((TCollection_AsciiString*)aName->Handle), *((Handle_Standard_Persistent*)anObject->Handle));
}

 void OCStorage_Data::RemoveRoot(OCNaroWrappers::OCTCollection_AsciiString^ aName)
{
  (*((Handle_Storage_Data*)nativeHandle))->RemoveRoot(*((TCollection_AsciiString*)aName->Handle));
}

OCStorage_HSeqOfRoot^ OCStorage_Data::Roots()
{
  Handle(Storage_HSeqOfRoot) tmp = (*((Handle_Storage_Data*)nativeHandle))->Roots();
  return gcnew OCStorage_HSeqOfRoot(&tmp);
}

OCStorage_Root^ OCStorage_Data::Find(OCNaroWrappers::OCTCollection_AsciiString^ aName)
{
  Handle(Storage_Root) tmp = (*((Handle_Storage_Data*)nativeHandle))->Find(*((TCollection_AsciiString*)aName->Handle));
  return gcnew OCStorage_Root(&tmp);
}

 System::Boolean OCStorage_Data::IsRoot(OCNaroWrappers::OCTCollection_AsciiString^ aName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_Data*)nativeHandle))->IsRoot(*((TCollection_AsciiString*)aName->Handle)));
}

 Standard_Integer OCStorage_Data::NumberOfTypes()
{
  return (*((Handle_Storage_Data*)nativeHandle))->NumberOfTypes();
}

 System::Boolean OCStorage_Data::IsType(OCNaroWrappers::OCTCollection_AsciiString^ aName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_Data*)nativeHandle))->IsType(*((TCollection_AsciiString*)aName->Handle)));
}

OCTColStd_HSequenceOfAsciiString^ OCStorage_Data::Types()
{
  Handle(TColStd_HSequenceOfAsciiString) tmp = (*((Handle_Storage_Data*)nativeHandle))->Types();
  return gcnew OCTColStd_HSequenceOfAsciiString(&tmp);
}


