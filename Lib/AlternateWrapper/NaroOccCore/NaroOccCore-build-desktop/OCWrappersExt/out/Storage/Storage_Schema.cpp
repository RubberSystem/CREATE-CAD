// File generated by CPPExt (CPP file)
//

#include "Storage_Schema.h"
#include "../Converter.h"
#include "Storage_CallBack.h"
#include "Storage_HArrayOfSchema.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "Storage_BaseDriver.h"
#include "Storage_Data.h"
#include "Storage_HeaderData.h"
#include "Storage_TypeData.h"
#include "Storage_RootData.h"
#include "../TColStd/TColStd_SequenceOfAsciiString.h"
#include "../TColStd/TColStd_HSequenceOfAsciiString.h"
#include "../Standard/Standard_Persistent.h"


using namespace OCNaroWrappers;

OCStorage_Schema::OCStorage_Schema(Handle(Storage_Schema)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Storage_Schema(*nativeHandle);
}

OCStorage_Schema::OCStorage_Schema() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Storage_Schema(new Storage_Schema());
}

 void OCStorage_Schema::SetVersion(OCNaroWrappers::OCTCollection_AsciiString^ aVersion)
{
  (*((Handle_Storage_Schema*)nativeHandle))->SetVersion(*((TCollection_AsciiString*)aVersion->Handle));
}

OCTCollection_AsciiString^ OCStorage_Schema::Version()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_Schema*)nativeHandle))->Version();
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCStorage_Schema::SetName(OCNaroWrappers::OCTCollection_AsciiString^ aSchemaName)
{
  (*((Handle_Storage_Schema*)nativeHandle))->SetName(*((TCollection_AsciiString*)aSchemaName->Handle));
}

OCTCollection_AsciiString^ OCStorage_Schema::Name()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_Storage_Schema*)nativeHandle))->Name();
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCStorage_Schema::Write(OCNaroWrappers::OCStorage_BaseDriver^ s, OCNaroWrappers::OCStorage_Data^ aData)
{
  (*((Handle_Storage_Schema*)nativeHandle))->Write(*((Storage_BaseDriver*)s->Handle), *((Handle_Storage_Data*)aData->Handle));
}

OCStorage_Data^ OCStorage_Schema::Read(OCNaroWrappers::OCStorage_BaseDriver^ s)
{
  Handle(Storage_Data) tmp = (*((Handle_Storage_Schema*)nativeHandle))->Read(*((Storage_BaseDriver*)s->Handle));
  return gcnew OCStorage_Data(&tmp);
}

OCStorage_HeaderData^ OCStorage_Schema::ReadHeaderSection(OCNaroWrappers::OCStorage_BaseDriver^ s)
{
  Handle(Storage_HeaderData) tmp = (*((Handle_Storage_Schema*)nativeHandle))->ReadHeaderSection(*((Storage_BaseDriver*)s->Handle));
  return gcnew OCStorage_HeaderData(&tmp);
}

OCStorage_TypeData^ OCStorage_Schema::ReadTypeSection(OCNaroWrappers::OCStorage_BaseDriver^ s)
{
  Handle(Storage_TypeData) tmp = (*((Handle_Storage_Schema*)nativeHandle))->ReadTypeSection(*((Storage_BaseDriver*)s->Handle));
  return gcnew OCStorage_TypeData(&tmp);
}

OCStorage_RootData^ OCStorage_Schema::ReadRootSection(OCNaroWrappers::OCStorage_BaseDriver^ s)
{
  Handle(Storage_RootData) tmp = (*((Handle_Storage_Schema*)nativeHandle))->ReadRootSection(*((Storage_BaseDriver*)s->Handle));
  return gcnew OCStorage_RootData(&tmp);
}

OCTColStd_SequenceOfAsciiString^ OCStorage_Schema::SchemaKnownTypes()
{
  TColStd_SequenceOfAsciiString* tmp = new TColStd_SequenceOfAsciiString();
  *tmp = (*((Handle_Storage_Schema*)nativeHandle))->SchemaKnownTypes();
  return gcnew OCTColStd_SequenceOfAsciiString(tmp);
}

 System::Boolean OCStorage_Schema::HasUnknownType(OCNaroWrappers::OCStorage_BaseDriver^ aDriver, OCNaroWrappers::OCTColStd_SequenceOfAsciiString^ theUnknownTypes)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_Schema*)nativeHandle))->HasUnknownType(*((Storage_BaseDriver*)aDriver->Handle), *((TColStd_SequenceOfAsciiString*)theUnknownTypes->Handle)));
}

OCTColStd_HSequenceOfAsciiString^ OCStorage_Schema::GetAllSchemaKnownTypes()
{
  Handle(TColStd_HSequenceOfAsciiString) tmp = (*((Handle_Storage_Schema*)nativeHandle))->GetAllSchemaKnownTypes();
  return gcnew OCTColStd_HSequenceOfAsciiString(&tmp);
}

 void OCStorage_Schema::SetNestedSchemas(OCNaroWrappers::OCStorage_HArrayOfSchema^ theSchemas)
{
  (*((Handle_Storage_Schema*)nativeHandle))->SetNestedSchemas(*((Handle_Storage_HArrayOfSchema*)theSchemas->Handle));
}

 void OCStorage_Schema::ClearNestedSchemas()
{
  (*((Handle_Storage_Schema*)nativeHandle))->ClearNestedSchemas();
}

OCStorage_HArrayOfSchema^ OCStorage_Schema::NestedSchemas()
{
  Handle(Storage_HArrayOfSchema) tmp = (*((Handle_Storage_Schema*)nativeHandle))->NestedSchemas();
  return gcnew OCStorage_HArrayOfSchema(&tmp);
}

OCTCollection_AsciiString^ OCStorage_Schema::ICreationDate()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = Storage_Schema::ICreationDate();
  return gcnew OCTCollection_AsciiString(tmp);
}

 System::Boolean OCStorage_Schema::CheckTypeMigration(OCNaroWrappers::OCTCollection_AsciiString^ theTypeName, OCNaroWrappers::OCTCollection_AsciiString^ theNewName)
{
  return OCConverter::StandardBooleanToBoolean(Storage_Schema::CheckTypeMigration(*((TCollection_AsciiString*)theTypeName->Handle), *((TCollection_AsciiString*)theNewName->Handle)));
}

 void OCStorage_Schema::AddReadUnknownTypeCallBack(OCNaroWrappers::OCTCollection_AsciiString^ aTypeName, OCNaroWrappers::OCStorage_CallBack^ aCallBack)
{
  (*((Handle_Storage_Schema*)nativeHandle))->AddReadUnknownTypeCallBack(*((TCollection_AsciiString*)aTypeName->Handle), *((Handle_Storage_CallBack*)aCallBack->Handle));
}

 void OCStorage_Schema::RemoveReadUnknownTypeCallBack(OCNaroWrappers::OCTCollection_AsciiString^ aTypeName)
{
  (*((Handle_Storage_Schema*)nativeHandle))->RemoveReadUnknownTypeCallBack(*((TCollection_AsciiString*)aTypeName->Handle));
}

OCTColStd_HSequenceOfAsciiString^ OCStorage_Schema::InstalledCallBackList()
{
  Handle(TColStd_HSequenceOfAsciiString) tmp = (*((Handle_Storage_Schema*)nativeHandle))->InstalledCallBackList();
  return gcnew OCTColStd_HSequenceOfAsciiString(&tmp);
}

 void OCStorage_Schema::ClearCallBackList()
{
  (*((Handle_Storage_Schema*)nativeHandle))->ClearCallBackList();
}

 void OCStorage_Schema::UseDefaultCallBack()
{
  (*((Handle_Storage_Schema*)nativeHandle))->UseDefaultCallBack();
}

 void OCStorage_Schema::DontUseDefaultCallBack()
{
  (*((Handle_Storage_Schema*)nativeHandle))->DontUseDefaultCallBack();
}

 System::Boolean OCStorage_Schema::IsUsingDefaultCallBack()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_Schema*)nativeHandle))->IsUsingDefaultCallBack());
}

 void OCStorage_Schema::SetDefaultCallBack(OCNaroWrappers::OCStorage_CallBack^ f)
{
  (*((Handle_Storage_Schema*)nativeHandle))->SetDefaultCallBack(*((Handle_Storage_CallBack*)f->Handle));
}

 void OCStorage_Schema::ResetDefaultCallBack()
{
  (*((Handle_Storage_Schema*)nativeHandle))->ResetDefaultCallBack();
}

OCStorage_CallBack^ OCStorage_Schema::DefaultCallBack()
{
  Handle(Storage_CallBack) tmp = (*((Handle_Storage_Schema*)nativeHandle))->DefaultCallBack();
  return gcnew OCStorage_CallBack(&tmp);
}

OCStorage_CallBack^ OCStorage_Schema::CallBackSelection(OCNaroWrappers::OCTCollection_AsciiString^ tName)
{
  Handle(Storage_CallBack) tmp = (*((Handle_Storage_Schema*)nativeHandle))->CallBackSelection(*((TCollection_AsciiString*)tName->Handle));
  return gcnew OCStorage_CallBack(&tmp);
}

OCStorage_CallBack^ OCStorage_Schema::AddTypeSelection(OCNaroWrappers::OCStandard_Persistent^ sp)
{
  Handle(Storage_CallBack) tmp = (*((Handle_Storage_Schema*)nativeHandle))->AddTypeSelection(*((Handle_Standard_Persistent*)sp->Handle));
  return gcnew OCStorage_CallBack(&tmp);
}

 void OCStorage_Schema::WritePersistentObjectHeader(OCNaroWrappers::OCStandard_Persistent^ sp, OCNaroWrappers::OCStorage_BaseDriver^ s)
{
  (*((Handle_Storage_Schema*)nativeHandle))->WritePersistentObjectHeader(*((Handle_Standard_Persistent*)sp->Handle), *((Storage_BaseDriver*)s->Handle));
}

 void OCStorage_Schema::ReadPersistentObjectHeader(OCNaroWrappers::OCStorage_BaseDriver^ s)
{
  (*((Handle_Storage_Schema*)nativeHandle))->ReadPersistentObjectHeader(*((Storage_BaseDriver*)s->Handle));
}

 void OCStorage_Schema::WritePersistentReference(OCNaroWrappers::OCStandard_Persistent^ sp, OCNaroWrappers::OCStorage_BaseDriver^ s)
{
  (*((Handle_Storage_Schema*)nativeHandle))->WritePersistentReference(*((Handle_Standard_Persistent*)sp->Handle), *((Storage_BaseDriver*)s->Handle));
}

 void OCStorage_Schema::ReadPersistentReference(OCNaroWrappers::OCStandard_Persistent^ sp, OCNaroWrappers::OCStorage_BaseDriver^ s)
{
  (*((Handle_Storage_Schema*)nativeHandle))->ReadPersistentReference(*((Handle_Standard_Persistent*)sp->Handle), *((Storage_BaseDriver*)s->Handle));
}

 System::Boolean OCStorage_Schema::AddPersistent(OCNaroWrappers::OCStandard_Persistent^ sp, System::String^ tName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_Schema*)nativeHandle))->AddPersistent(*((Handle_Standard_Persistent*)sp->Handle), OCConverter::StringToStandardCString(tName)));
}

 System::Boolean OCStorage_Schema::PersistentToAdd(OCNaroWrappers::OCStandard_Persistent^ sp)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Storage_Schema*)nativeHandle))->PersistentToAdd(*((Handle_Standard_Persistent*)sp->Handle)));
}


