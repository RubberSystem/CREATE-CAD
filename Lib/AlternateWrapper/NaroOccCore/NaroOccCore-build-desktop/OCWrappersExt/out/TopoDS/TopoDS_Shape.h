// File generated by CPPExt (MPV)
//
#ifndef _TopoDS_Shape_OCWrappers_HeaderFile
#define _TopoDS_Shape_OCWrappers_HeaderFile

// include native header
#include <TopoDS_Shape.hxx>
#include "../Converter.h"


#include "../TopLoc/TopLoc_Location.h"
#include "../TopAbs/TopAbs_Orientation.h"
#include "../TopAbs/TopAbs_ShapeEnum.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_TShape;
ref class OCTopLoc_Location;


//! Describes a shape which <br>
//! - references an underlying shape with the potential <br>
//!   to be given a location and an orientation <br>
//! - has a location for the underlying shape, giving its <br>
//!   placement in the local coordinate system <br>
//! - has an orientation for the underlying shape, in <br>
//!   terms of its geometry (as opposed to orientation in <br>
//!   relation to other shapes). <br>
//!   Note: A Shape is empty if it references an underlying <br>
//!   shape which has an empty list of shapes. <br>
public ref class OCTopoDS_Shape  {

protected:
  TopoDS_Shape* nativeHandle;
  OCTopoDS_Shape(OCDummy^) {};

public:
  property TopoDS_Shape* Handle
  {
    TopoDS_Shape* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopoDS_Shape(TopoDS_Shape* nativeHandle);

// Methods PUBLIC

//! Creates a NULL Shape referring to nothing. <br>
OCTopoDS_Shape();

//! Returns true if this shape is null. In other words, it <br>
//! references no underlying shape with the potential to <br>
//! be given a location and an orientation. <br>
 /*instead*/  System::Boolean IsNull() ;

//! Destroys the reference to the underlying shape <br>
//! stored in this shape. As a result, this shape becomes null. <br>
 /*instead*/  void Nullify() ;

//! Returns the shape local coordinate system. <br>
 /*instead*/  OCTopLoc_Location^ Location() ;

//! Sets the shape local coordinate system. <br>
 /*instead*/  void Location(OCNaroWrappers::OCTopLoc_Location^ Loc) ;

//! Returns a  shape  similar to <me> with   the local <br>
//!          coordinate system set to <Loc>. <br>
//! <br>
 /*instead*/  OCTopoDS_Shape^ Located(OCNaroWrappers::OCTopLoc_Location^ Loc) ;

//! Returns the shape orientation. <br>
//! <br>
 /*instead*/  OCTopAbs_Orientation Orientation() ;

//! Sets the shape orientation. <br>
 /*instead*/  void Orientation(OCTopAbs_Orientation Orient) ;

//! Returns  a    shape  similar  to  <me>   with  the <br>
//!          orientation set to <Or>. <br>
//! <br>
 /*instead*/  OCTopoDS_Shape^ Oriented(OCTopAbs_Orientation Or) ;


 /*instead*/  OCTopoDS_TShape^ TShape() ;

//! Returns the value of the TopAbs_ShapeEnum <br>
//! enumeration that corresponds to this shape, for <br>
//! example VERTEX, EDGE, and so on. <br>
//! Exceptions <br>
//! Standard_NullObject if this shape is null. <br>
 /*instead*/  OCTopAbs_ShapeEnum ShapeType() ;

//! Returns the free flag. <br>
//! <br>
 /*instead*/  System::Boolean Free() ;

//! Sets the free flag. <br>
//! <br>
 /*instead*/  void Free(System::Boolean F) ;

//! Returns the modification flag. <br>
//! <br>
 /*instead*/  System::Boolean Modified() ;

//! Sets the modification flag. <br>
//! <br>
 /*instead*/  void Modified(System::Boolean M) ;

//! Returns the checked flag. <br>
//! <br>
 /*instead*/  System::Boolean Checked() ;

//! Sets the checked flag. <br>
//! <br>
 /*instead*/  void Checked(System::Boolean C) ;

//! Returns the orientability flag. <br>
//! <br>
 /*instead*/  System::Boolean Orientable() ;

//! Sets the orientability flag. <br>
//! <br>
 /*instead*/  void Orientable(System::Boolean C) ;

//! Returns the closedness flag. <br>
//! <br>
 /*instead*/  System::Boolean Closed() ;

//! Sets the closedness flag. <br>
//! <br>
 /*instead*/  void Closed(System::Boolean C) ;

//! Returns the infinity flag. <br>
//! <br>
 /*instead*/  System::Boolean Infinite() ;

//! Sets the infinity flag. <br>
//! <br>
 /*instead*/  void Infinite(System::Boolean C) ;

//! Returns the convexness flag. <br>
//! <br>
 /*instead*/  System::Boolean Convex() ;

//! Sets the convexness flag. <br>
//! <br>
 /*instead*/  void Convex(System::Boolean C) ;

//! Multiplies the Shape location by <position>. <br>
//! <br>
 /*instead*/  void Move(OCNaroWrappers::OCTopLoc_Location^ position) ;

//! Returns  a shape similar  to  <me> with a location <br>
//!          multiplied  by <position>. <br>
//! <br>
 /*instead*/  OCTopoDS_Shape^ Moved(OCNaroWrappers::OCTopLoc_Location^ position) ;

//! Reverses the orientation, using the Reverse method <br>
//!          from the TopAbs package. <br>
//! <br>
 /*instead*/  void Reverse() ;

//! Returns    a shape  similar    to  <me>  with  the <br>
//!          orientation  reversed, using  the   Reverse method <br>
//!          from the TopAbs package. <br>
//! <br>
 /*instead*/  OCTopoDS_Shape^ Reversed() ;

//! Complements the orientation, using the  Complement <br>
//!          method from the TopAbs package. <br>
//! <br>
 /*instead*/  void Complement() ;

//! Returns  a   shape  similar  to   <me>   with  the <br>
//!          orientation complemented,  using   the  Complement <br>
//!          method from the TopAbs package. <br>
//! <br>
 /*instead*/  OCTopoDS_Shape^ Complemented() ;

//! Updates the  Shape Orientation by composition with <br>
//!          <Orient>, using the Compose method from the TopAbs <br>
//!          package. <br>
//! <br>
 /*instead*/  void Compose(OCTopAbs_Orientation Orient) ;

//! Returns  a  shape   similar   to  <me>   with  the <br>
//!          orientation  composed  with <Orient>,   using  the <br>
//!          Compose method from the TopAbs package. <br>
//! <br>
 /*instead*/  OCTopoDS_Shape^ Composed(OCTopAbs_Orientation Orient) ;

//! Returns True if two shapes  are partners, i.e.  if <br>
//!          they   share   the   same  TShape.  Locations  and <br>
//!          Orientations may differ. <br>
//! <br>
 /*instead*/  System::Boolean IsPartner(OCNaroWrappers::OCTopoDS_Shape^ other) ;

//! Returns True if two shapes are same, i.e.  if they <br>
//!          share  the  same TShape  with the same  Locations. <br>
//!          Orientations may differ. <br>
 /*instead*/  System::Boolean IsSame(OCNaroWrappers::OCTopoDS_Shape^ other) ;

//! Returns True if two shapes are equal, i.e. if they <br>
//!          share the same TShape with  the same Locations and <br>
//!          Orientations. <br>
//! <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCTopoDS_Shape^ other) ;

//! Negation of the IsEqual method. <br>
//! <br>
 /*instead*/  System::Boolean IsNotEqual(OCNaroWrappers::OCTopoDS_Shape^ other) ;

//! Returns a hashed value  denoting <me>.  This value <br>
//!          is in the range  1..<Upper>.  It is  computed from <br>
//!          the  TShape  and the  Location. The Orientation is <br>
//!          not used. <br>
//! <br>
 /*instead*/  Standard_Integer HashCode(Standard_Integer Upper) ;

//! Replace   <me> by  a  new   Shape with the    same <br>
//!          Orientation and Location and a new TShape with the <br>
//!          same geometry and no sub-shapes. <br>
//! <br>
 /*instead*/  void EmptyCopy() ;

//! Returns a new Shape with the  same Orientation and <br>
//!          Location and  a new TShape  with the same geometry <br>
//!          and no sub-shapes. <br>
//! <br>
 /*instead*/  OCTopoDS_Shape^ EmptyCopied() ;


 /*instead*/  void TShape(OCNaroWrappers::OCTopoDS_TShape^ T) ;

~OCTopoDS_Shape()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
