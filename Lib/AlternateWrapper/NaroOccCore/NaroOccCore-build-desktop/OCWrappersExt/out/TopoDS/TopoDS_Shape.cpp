// File generated by CPPExt (CPP file)
//

#include "TopoDS_Shape.h"
#include "../Converter.h"
#include "TopoDS_TShape.h"
#include "../TopLoc/TopLoc_Location.h"


using namespace OCNaroWrappers;

OCTopoDS_Shape::OCTopoDS_Shape(TopoDS_Shape* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopoDS_Shape::OCTopoDS_Shape() 
{
  nativeHandle = new TopoDS_Shape();
}

 System::Boolean OCTopoDS_Shape::IsNull()
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->IsNull());
}

 void OCTopoDS_Shape::Nullify()
{
  ((TopoDS_Shape*)nativeHandle)->Nullify();
}

OCTopLoc_Location^ OCTopoDS_Shape::Location()
{
  TopLoc_Location* tmp = new TopLoc_Location();
  *tmp = ((TopoDS_Shape*)nativeHandle)->Location();
  return gcnew OCTopLoc_Location(tmp);
}

 void OCTopoDS_Shape::Location(OCNaroWrappers::OCTopLoc_Location^ Loc)
{
  ((TopoDS_Shape*)nativeHandle)->Location(*((TopLoc_Location*)Loc->Handle));
}

OCTopoDS_Shape^ OCTopoDS_Shape::Located(OCNaroWrappers::OCTopLoc_Location^ Loc)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopoDS_Shape*)nativeHandle)->Located(*((TopLoc_Location*)Loc->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

 OCTopAbs_Orientation OCTopoDS_Shape::Orientation()
{
  return (OCTopAbs_Orientation)(((TopoDS_Shape*)nativeHandle)->Orientation());
}

 void OCTopoDS_Shape::Orientation(OCTopAbs_Orientation Orient)
{
  ((TopoDS_Shape*)nativeHandle)->Orientation((TopAbs_Orientation)Orient);
}

OCTopoDS_Shape^ OCTopoDS_Shape::Oriented(OCTopAbs_Orientation Or)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopoDS_Shape*)nativeHandle)->Oriented((TopAbs_Orientation)Or);
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_TShape^ OCTopoDS_Shape::TShape()
{
  Handle(TopoDS_TShape) tmp = ((TopoDS_Shape*)nativeHandle)->TShape();
  return gcnew OCTopoDS_TShape(&tmp);
}

 OCTopAbs_ShapeEnum OCTopoDS_Shape::ShapeType()
{
  return (OCTopAbs_ShapeEnum)(((TopoDS_Shape*)nativeHandle)->ShapeType());
}

 System::Boolean OCTopoDS_Shape::Free()
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->Free());
}

 void OCTopoDS_Shape::Free(System::Boolean F)
{
  ((TopoDS_Shape*)nativeHandle)->Free(OCConverter::BooleanToStandardBoolean(F));
}

 System::Boolean OCTopoDS_Shape::Modified()
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->Modified());
}

 void OCTopoDS_Shape::Modified(System::Boolean M)
{
  ((TopoDS_Shape*)nativeHandle)->Modified(OCConverter::BooleanToStandardBoolean(M));
}

 System::Boolean OCTopoDS_Shape::Checked()
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->Checked());
}

 void OCTopoDS_Shape::Checked(System::Boolean C)
{
  ((TopoDS_Shape*)nativeHandle)->Checked(OCConverter::BooleanToStandardBoolean(C));
}

 System::Boolean OCTopoDS_Shape::Orientable()
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->Orientable());
}

 void OCTopoDS_Shape::Orientable(System::Boolean C)
{
  ((TopoDS_Shape*)nativeHandle)->Orientable(OCConverter::BooleanToStandardBoolean(C));
}

 System::Boolean OCTopoDS_Shape::Closed()
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->Closed());
}

 void OCTopoDS_Shape::Closed(System::Boolean C)
{
  ((TopoDS_Shape*)nativeHandle)->Closed(OCConverter::BooleanToStandardBoolean(C));
}

 System::Boolean OCTopoDS_Shape::Infinite()
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->Infinite());
}

 void OCTopoDS_Shape::Infinite(System::Boolean C)
{
  ((TopoDS_Shape*)nativeHandle)->Infinite(OCConverter::BooleanToStandardBoolean(C));
}

 System::Boolean OCTopoDS_Shape::Convex()
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->Convex());
}

 void OCTopoDS_Shape::Convex(System::Boolean C)
{
  ((TopoDS_Shape*)nativeHandle)->Convex(OCConverter::BooleanToStandardBoolean(C));
}

 void OCTopoDS_Shape::Move(OCNaroWrappers::OCTopLoc_Location^ position)
{
  ((TopoDS_Shape*)nativeHandle)->Move(*((TopLoc_Location*)position->Handle));
}

OCTopoDS_Shape^ OCTopoDS_Shape::Moved(OCNaroWrappers::OCTopLoc_Location^ position)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopoDS_Shape*)nativeHandle)->Moved(*((TopLoc_Location*)position->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCTopoDS_Shape::Reverse()
{
  ((TopoDS_Shape*)nativeHandle)->Reverse();
}

OCTopoDS_Shape^ OCTopoDS_Shape::Reversed()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopoDS_Shape*)nativeHandle)->Reversed();
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCTopoDS_Shape::Complement()
{
  ((TopoDS_Shape*)nativeHandle)->Complement();
}

OCTopoDS_Shape^ OCTopoDS_Shape::Complemented()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopoDS_Shape*)nativeHandle)->Complemented();
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCTopoDS_Shape::Compose(OCTopAbs_Orientation Orient)
{
  ((TopoDS_Shape*)nativeHandle)->Compose((TopAbs_Orientation)Orient);
}

OCTopoDS_Shape^ OCTopoDS_Shape::Composed(OCTopAbs_Orientation Orient)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopoDS_Shape*)nativeHandle)->Composed((TopAbs_Orientation)Orient);
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCTopoDS_Shape::IsPartner(OCNaroWrappers::OCTopoDS_Shape^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->IsPartner(*((TopoDS_Shape*)other->Handle)));
}

 System::Boolean OCTopoDS_Shape::IsSame(OCNaroWrappers::OCTopoDS_Shape^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->IsSame(*((TopoDS_Shape*)other->Handle)));
}

 System::Boolean OCTopoDS_Shape::IsEqual(OCNaroWrappers::OCTopoDS_Shape^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->IsEqual(*((TopoDS_Shape*)other->Handle)));
}

 System::Boolean OCTopoDS_Shape::IsNotEqual(OCNaroWrappers::OCTopoDS_Shape^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TopoDS_Shape*)nativeHandle)->IsNotEqual(*((TopoDS_Shape*)other->Handle)));
}

 Standard_Integer OCTopoDS_Shape::HashCode(Standard_Integer Upper)
{
  return ((TopoDS_Shape*)nativeHandle)->HashCode(Upper);
}

 void OCTopoDS_Shape::EmptyCopy()
{
  ((TopoDS_Shape*)nativeHandle)->EmptyCopy();
}

OCTopoDS_Shape^ OCTopoDS_Shape::EmptyCopied()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopoDS_Shape*)nativeHandle)->EmptyCopied();
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCTopoDS_Shape::TShape(OCNaroWrappers::OCTopoDS_TShape^ T)
{
  ((TopoDS_Shape*)nativeHandle)->TShape(*((Handle_TopoDS_TShape*)T->Handle));
}


