// File generated by CPPExt (Transient)
//
#ifndef _MoniTool_Timer_OCWrappers_HeaderFile
#define _MoniTool_Timer_OCWrappers_HeaderFile

// include the wrapped class
#include <MoniTool_Timer.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../OSD/OSD_Timer.h"


namespace OCNaroWrappers
{

ref class OCOSD_Timer;
ref class OCMoniTool_DataMapOfTimer;


//! Provides convenient service on global timers <br>
//!          accessed by string name, mostly aimed for debugging purposes <br>
//! <br>
//!          As an instance, envelopes the OSD_Timer to have it as Handle <br>
public ref class OCMoniTool_Timer : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMoniTool_Timer(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMoniTool_Timer(Handle(MoniTool_Timer)* nativeHandle);

// Methods PUBLIC

//! Create timer in empty state <br>
OCMoniTool_Timer();


 /*instead*/  OCOSD_Timer^ Timer() ;

//! Return reference to embedded OSD_Timer <br>
 /*instead*/  OCOSD_Timer^ Timer() ;


 /*instead*/  void Start() ;


 /*instead*/  void Stop() ;

//! Start, Stop and reset the timer <br>
//!          In addition to doing that to embedded OSD_Timer, <br>
//!          manage also counter of hits <br>
 /*instead*/  void Reset() ;

//! Return value of hits counter (count of Start/Stop pairs) <br>
 /*instead*/  Standard_Integer Count() ;

//! Returns value of nesting counter <br>
 /*instead*/  Standard_Integer IsRunning() ;

//! Return value of CPU time minus accumulated amendment <br>
 /*instead*/  Standard_Real CPU() ;

//! Return value of accumulated amendment on CPU time <br>
 /*instead*/  Standard_Real Amend() ;

//! Dumps current state of a timer shortly (one-line output) <br>
 /*instead*/  void Dump(Standard_OStream& ostr) ;

//! Returns a timer from a dictionary by its name <br>
//!          If timer not existed, creates a new one <br>
static /*instead*/  OCMoniTool_Timer^ Timer(System::String^ name) ;


static /*instead*/  void Start(System::String^ name) ;

//! Inline methods to conveniently start/stop timer by name <br>
//!          Shortcut to Timer(name)->Start/Stop() <br>
static /*instead*/  void Stop(System::String^ name) ;

//! Returns map of timers <br>
static /*instead*/  OCMoniTool_DataMapOfTimer^ Dictionary() ;

//! Clears map of timers <br>
static /*instead*/  void ClearTimers() ;

//! Dumps contents of the whole dictionary <br>
static /*instead*/  void DumpTimers(Standard_OStream& ostr) ;

//! Computes and remembers amendments for times to <br>
//!          access, start, and stop of timer, and estimates <br>
//!          second-order error measured by 10 nested timers <br>
static /*instead*/  void ComputeAmendments() ;

//! The computed amendmens are returned (for information only) <br>
static /*instead*/  void GetAmendments(Standard_Real& Access, Standard_Real& Internal, Standard_Real& External, Standard_Real& Error10) ;

~OCMoniTool_Timer()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
