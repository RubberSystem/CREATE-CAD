// File generated by CPPExt (MPV)
//
#ifndef _MoniTool_ElemHasher_OCWrappers_HeaderFile
#define _MoniTool_ElemHasher_OCWrappers_HeaderFile

// include native header
#include <MoniTool_ElemHasher.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCMoniTool_Element;


//! ElemHasher defines HashCode for Element, which is : ask a <br>
//!           Element its HashCode !  Because this is the Element itself <br>
//!           which brings the HashCode for its Key <br>
//! <br>
//!           This class complies to the template given in TCollection by <br>
//!           MapHasher itself <br>
public ref class OCMoniTool_ElemHasher  {

protected:
  MoniTool_ElemHasher* nativeHandle;
  OCMoniTool_ElemHasher(OCDummy^) {};

public:
  property MoniTool_ElemHasher* Handle
  {
    MoniTool_ElemHasher* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCMoniTool_ElemHasher(MoniTool_ElemHasher* nativeHandle);

// Methods PUBLIC

//! Returns a HashCode in the range <0,Upper> for a Element : <br>
//!           asks the Element its HashCode then transforms it to be in the <br>
//!           required range <br>
static /*instead*/  Standard_Integer HashCode(OCNaroWrappers::OCMoniTool_Element^ K, Standard_Integer Upper) ;

//! Returns True if two keys are the same. <br>
//!           The test does not work on the Elements themselves but by <br>
//!           calling their methods Equates <br>
static /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCMoniTool_Element^ K1, OCNaroWrappers::OCMoniTool_Element^ K2) ;

~OCMoniTool_ElemHasher()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
