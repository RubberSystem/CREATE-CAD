// File generated by CPPExt (Transient)
//
#ifndef _MoniTool_TypedValue_OCWrappers_HeaderFile
#define _MoniTool_TypedValue_OCWrappers_HeaderFile

// include the wrapped class
#include <MoniTool_TypedValue.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "MoniTool_ValueType.h"


namespace OCNaroWrappers
{

ref class OCStandard_Type;
ref class OCTColStd_HArray1OfAsciiString;
ref class OCDico_DictionaryOfInteger;
ref class OCTCollection_HAsciiString;
ref class OCStandard_Transient;
ref class OCTCollection_AsciiString;
ref class OCMessage_Messenger;
ref class OCTColStd_HSequenceOfAsciiString;
ref class OCDico_DictionaryOfTransient;


//! This class allows to dynamically manage .. typed values, i.e. <br>
//!           values which have an alphanumeric expression, but with <br>
//!           controls. Such as "must be an Integer" or "Enumerative Text" <br>
//!           etc <br>
//! <br>
//!           Hence, a TypedValue brings a specification (type + constraints <br>
//!           if any) and a value. Its basic form is a string, it can be <br>
//!           specified as integer or real or enumerative string, then <br>
//!           queried as such. <br>
//!           Its string content, which is a Handle(HAsciiString) can be <br>
//!           shared by other data structures, hence gives a direct on line <br>
//!           access to its value. <br>
public ref class OCMoniTool_TypedValue : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMoniTool_TypedValue(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMoniTool_TypedValue(Handle(MoniTool_TypedValue)* nativeHandle);

// Methods PUBLIC

//! Creates a TypedValue, with a name <br>
//! <br>
//!           type gives the type of the parameter, default is free text <br>
//!           Also available : Integer, Real, Enum, Entity (i.e. Object) <br>
//!           More precise specifications, titles, can be given to the <br>
//!           TypedValue once created <br>
//! <br>
//!           init gives an initial value. If it is not given, the <br>
//!           TypedValue begins as "not set", its value is empty <br>
OCMoniTool_TypedValue(System::String^ name, OCMoniTool_ValueType type, System::String^ init);

//! Creates a TypedValue from another one, by duplication <br>
OCMoniTool_TypedValue(OCNaroWrappers::OCMoniTool_TypedValue^ other);

//! Access to internal data which have no other access <br>
 /*instead*/  void Internals(MoniTool_ValueInterpret& interp, MoniTool_ValueSatisfies& satisf, System::String^& satisname, OCNaroWrappers::OCDico_DictionaryOfInteger^ enums) ;

//! Returns the name <br>
 /*instead*/  System::String^ Name() ;

//! Returns the type of the value <br>
 /*instead*/  OCMoniTool_ValueType ValueType() ;

//! Returns the Definition <br>
//!           By priority, the enforced one, else an automatic one, computed <br>
//!           from the specification <br>
 /*instead*/  OCTCollection_AsciiString^ Definition() ;

//! Enforces a Definition <br>
 /*instead*/  void SetDefinition(System::String^ deftext) ;

//! Prints definition, specification, and actual status and value <br>
virtual /*instead*/  void Print(OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Prints only the Value <br>
 /*instead*/  void PrintValue(OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Completes the definition of a TypedValue by command <initext>, <br>
//!           once created with its type <br>
//!           Returns True if done, False if could not be interpreted <br>
//!           <initext> may be : <br>
//!           imin ival : minimum value for an integer <br>
//!           imax ival : maximum value for an integer <br>
//!           rmin rval : minimum value for a real <br>
//!           rmax rval : maximum value for a real <br>
//!           unit name : name of unit <br>
//!           ematch i  : enum from integer value i, match required <br>
//!           enum   i  : enum from integer value i, match not required <br>
//!           eval text : add an enumerative value (increments max by 1) <br>
//!           eval ??   : add a non-authorised enum value (to be skipped) <br>
//!           tmax   l  : maximum length for a text <br>
 /*instead*/  System::Boolean AddDef(System::String^ initext) ;

//! Sets a label, which can then be displayed <br>
 /*instead*/  void SetLabel(System::String^ label) ;

//! Returns the label, if set; else returns an empty string <br>
 /*instead*/  System::String^ Label() ;

//! Sets a maximum length for a text (active only for a free text) <br>
 /*instead*/  void SetMaxLength(Standard_Integer max) ;

//! Returns the maximum length, 0 if not set <br>
 /*instead*/  Standard_Integer MaxLength() ;

//! Sets an Integer limit (included) to <val>, the upper limit <br>
//!           if <max> is True, the lower limit if <max> is False <br>
 /*instead*/  void SetIntegerLimit(System::Boolean max, Standard_Integer val) ;

//! Gives an Integer Limit (upper if <max> True, lower if <max> <br>
//!           False). Returns True if this limit is defined, False else <br>
//!           (in that case, gives the natural limit for Integer) <br>
 /*instead*/  System::Boolean IntegerLimit(System::Boolean max, Standard_Integer& val) ;

//! Sets a Real limit (included) to <val>, the upper limit <br>
//!           if <max> is True, the lower limit if <max> is False <br>
 /*instead*/  void SetRealLimit(System::Boolean max, Standard_Real val) ;

//! Gives an Real Limit (upper if <max> True, lower if <max> <br>
//!           False). Returns True if this limit is defined, False else <br>
//!           (in that case, gives the natural limit for Real) <br>
 /*instead*/  System::Boolean RealLimit(System::Boolean max, Standard_Real& val) ;

//! Sets (Clears if <def> empty) a unit definition, as an equation <br>
//!           of dimensions. TypedValue just records this definition, does <br>
//!           not exploit it, to be done as required by user applications <br>
 /*instead*/  void SetUnitDef(System::String^ def) ;

//! Returns the recorded unit definition, empty if not set <br>
 /*instead*/  System::String^ UnitDef() ;

//! For an enumeration, precises the starting value (default 0) <br>
//!           and the match condition : if True (D), the string value must <br>
//!           match the definition, else it may take another value : in that <br>
//!           case, the Integer Value will be  Start - 1. <br>
//!           (empty value remains allowed) <br>
 /*instead*/  void StartEnum(Standard_Integer start, System::Boolean match) ;

//! Adds enumerative definitions. For more than 10, several calls <br>
 /*instead*/  void AddEnum(System::String^ v1, System::String^ v2, System::String^ v3, System::String^ v4, System::String^ v5, System::String^ v6, System::String^ v7, System::String^ v8, System::String^ v9, System::String^ v10) ;

//! Adds an enumeration definition, by its string and numeric <br>
//!           values. If it is the first setting for this value, it is <br>
//!           recorded as main value. Else, it is recognized as alternate <br>
//!           string for this numeric value <br>
 /*instead*/  void AddEnumValue(System::String^ val, Standard_Integer num) ;

//! Gives the Enum definitions : start value, end value, match <br>
//!           status. Returns True for an Enum, False else. <br>
 /*instead*/  System::Boolean EnumDef(Standard_Integer& startcase, Standard_Integer& endcase, System::Boolean& match) ;

//! Returns the value of an enumerative definition, from its rank <br>
//!           Empty string if out of range or not an Enum <br>
 /*instead*/  System::String^ EnumVal(Standard_Integer num) ;

//! Returns the case number which cooresponds to a string value <br>
//!           Works with main and additionnal values <br>
//!           Returns (StartEnum - 1) if not OK, -1 if not an Enum <br>
 /*instead*/  Standard_Integer EnumCase(System::String^ val) ;

//! Sets type of which an Object TypedValue must be kind of <br>//!           Error for a TypedValue not an Object (Entity) <br>
 /*instead*/  void SetObjectType(OCNaroWrappers::OCStandard_Type^ typ) ;

//! Returns the type of which an Object TypedValue must be kind of <br>
//!           Default is Standard_Transient <br>
//!           Null for a TypedValue not an Object <br>
 /*instead*/  OCStandard_Type^ ObjectType() ;

//! Sets a specific Interpret function <br>
 /*instead*/  void SetInterpret(MoniTool_ValueInterpret func) ;

//! Tells if a TypedValue has an Interpret <br>
virtual /*instead*/  System::Boolean HasInterpret() ;

//! Sets a specific Satisfies function : it is added to the <br>
//!           already defined criteria <br>
//!           It must match the form : <br>
//!             statisfies (val : HAsciiString) returns Boolean <br>
 /*instead*/  void SetSatisfies(MoniTool_ValueSatisfies func, System::String^ name) ;

//! Returns name of specific satisfy, empty string if none <br>
 /*instead*/  System::String^ SatisfiesName() ;

//! Returns True if the value is set (not empty/not null object) <br>
 /*instead*/  System::Boolean IsSetValue() ;

//! Returns the value, as a cstring. Empty if not set. <br>
 /*instead*/  System::String^ CStringValue() ;

//! Returns the value, as a Handle (can then be shared) <br>
//!           Null if not defined <br>
 /*instead*/  OCTCollection_HAsciiString^ HStringValue() ;

//! Interprets a value. <br>
//!           <native> True  : returns a native value <br>
//!           <native> False : returns a coded  value <br>
//!           If the Interpret function is set, calls it <br>
//!           Else, for an Enum, Native returns the Text, Coded returns <br>
//!             the number <br>
//!           STANDARD RETURNS : = hval means no specific interpretation <br>
//!            Null means senseless <br>
//!           Can also be redefined <br>
virtual /*instead*/  OCTCollection_HAsciiString^ Interpret(OCNaroWrappers::OCTCollection_HAsciiString^ hval, System::Boolean native) ;

//! Returns True if a value statifies the specification <br>
//!           (remark : does not apply to Entity : see ObjectType, for this <br>
//!           type, the string is just a comment) <br>
virtual /*instead*/  System::Boolean Satisfies(OCNaroWrappers::OCTCollection_HAsciiString^ hval) ;

//! Clears the recorded Value : it is now unset <br>
 /*instead*/  void ClearValue() ;

//! Changes the value. The new one must satisfy the specification <br>//!           Returns False (and did not set) if the new value <br>
//!             does not satisfy the specification <br>
//!           Can be redefined to be managed (in a subclass) <br>
virtual /*instead*/  System::Boolean SetCStringValue(System::String^ val) ;

//! Forces a new Handle for the Value <br>
//!           It can be empty, else (if Type is not free Text), it must <br>
//!           satisfy the specification. <br>
//!           Not only the value is changed, but also the way it is shared <br>
//!           Remark : for Type=Object, this value is not controlled, it can <br>
//!           be set as a comment <br>//!           Returns False (and did not set) if the new value <br>
//!             does not satisfy the specification <br>
//!           Can be redefined to be managed (in a subclass) <br>
virtual /*instead*/  System::Boolean SetHStringValue(OCNaroWrappers::OCTCollection_HAsciiString^ hval) ;

//! Returns the value as integer, i.e. : <br>
//!           For type = Integer, the integer itself; 0 if not set <br>
//!           For type = Enum, the designated rank (see Enum definition) <br>
//!             StartEnum - 1 if not set or not in the definition <br>
//!           Else, returns 0 <br>
 /*instead*/  Standard_Integer IntegerValue() ;

//! Changes the value as an integer, only for Integer or Enum <br>
virtual /*instead*/  System::Boolean SetIntegerValue(Standard_Integer ival) ;

//! Returns the value as real,  for a Real type TypedValue <br>
//!           Else, returns 0. <br>
 /*instead*/  Standard_Real RealValue() ;

//! Changes the value as a real, only for Real <br>
virtual /*instead*/  System::Boolean SetRealValue(Standard_Real rval) ;

//! Returns the value as Transient Object, only for Object/Entity <br>
//!           Remark that the "HString value" is IGNORED here <br>
//!           Null if not set; remains to be casted <br>
 /*instead*/  OCStandard_Transient^ ObjectValue() ;

//! Same as ObjectValue, but avoids DownCast : the receiving <br>
//!           variable is directly loaded. It is assumed that it complies <br>
//!           with the definition of ObjectType ! Otherwise, big trouble <br>
 /*instead*/  void GetObjectValue(OCNaroWrappers::OCStandard_Transient^ val) ;

//! Changes the value as Transient Object, only for Object/Entity <br>
//!           Returns False if DynamicType does not satisfy ObjectType <br>
//!           Can be redefined to be managed (in a subclass) <br>
virtual /*instead*/  System::Boolean SetObjectValue(OCNaroWrappers::OCStandard_Transient^ obj) ;

//! Returns the type name of the ObjectValue, or an empty string <br>
//!           if not set <br>
 /*instead*/  System::String^ ObjectTypeName() ;

//! Adds a TypedValue in the library. <br>
//!           It is recorded then will be accessed by its Name <br>
//!           Its Definition may be imposed, else it is computed as usual <br>
//!           By default it will be accessed by its Definition (string) <br>
//!           Returns True if done, False if tv is Null or brings no <br>
//!           Definition or <def> not defined <br>
//! <br>
//!           If a TypedValue was already recorded under this name, it is <br>
//!           replaced <br>
static /*instead*/  System::Boolean AddLib(OCNaroWrappers::OCMoniTool_TypedValue^ tv, System::String^ def) ;

//! Returns the TypedValue bound with a given Name <br>
//!           Null Handle if none recorded <br>
//!           Warning : it is the original, not duplicated <br>
static /*instead*/  OCMoniTool_TypedValue^ Lib(System::String^ def) ;

//! Returns a COPY of the TypedValue bound with a given Name <br>
//!           Null Handle if none recorded <br>
static /*instead*/  OCMoniTool_TypedValue^ FromLib(System::String^ def) ;

//! Returns the list of names of items of the Library of Types <br>
//! --    Library of TypedValue as Valued Parameters,    -- -- <br>
//!       accessed by parameter name <br>
//!       for use by management of Static Parameters <br>
static /*instead*/  OCTColStd_HSequenceOfAsciiString^ LibList() ;

//! Returns a static value from its name, null if unknown <br>
static /*instead*/  OCMoniTool_TypedValue^ StaticValue(System::String^ name) ;

~OCMoniTool_TypedValue()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
