// File generated by CPPExt (Transient)
//
#ifndef _MoniTool_Option_OCWrappers_HeaderFile
#define _MoniTool_Option_OCWrappers_HeaderFile

// include the wrapped class
#include <MoniTool_Option.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCStandard_Type;
ref class OCMoniTool_TypedValue;
ref class OCDico_DictionaryOfTransient;
ref class OCStandard_Transient;
ref class OCTCollection_AsciiString;
ref class OCTColStd_HSequenceOfAsciiString;


//! An Option gives a way of recording an enumerated list of <br>
//!           instances of a given class, each instance being identified <br>
//!           by a case name. <br>
//! <br>
//!           Also, an Option allows to manage basic types through a Typed <br>
//!           Value (which also applies to Static Parameter). It may record <br>
//!           an enumerated list of values for a TypedValue or Static <br>
//!           Parameter, each of them is recorded as a string (HAsciiString) <br>
//! <br>
//!           An Option is defined by the type of the class to be optioned, <br>
//!           or (mutually exclusive) the TypedValue/Static of which values <br>
//!           are to be optioned, a specific name, a list of named values. <br>
//!           It brings a current case with its name and value <br>
//!           It may also have a default case (the first recorded one if not <br>
//!           precised) <br>
//! <br>
//!           An Option may be created from another one, by sharing its Type <br>
//!           and its list of Items (one per case), with the same name or <br>
//!           another one. It may then be duplicated to break this sharing. <br>
public ref class OCMoniTool_Option : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMoniTool_Option(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMoniTool_Option(Handle(MoniTool_Option)* nativeHandle);

// Methods PUBLIC

//! Creates an Option from scratch, with a Type and a Name <br>
OCMoniTool_Option(OCNaroWrappers::OCStandard_Type^ atype, System::String^ aname);

//! Creates an Option for a TypedValue (for basic, non-cdl-typed, <br>
//!           value : integer, real, string ...) <br>
//!           If <name> is not given, the name of the TypedValue is taken <br>
//!           Remark that Type is then enforced to TCollection_HAsciiString <br>
OCMoniTool_Option(OCNaroWrappers::OCMoniTool_TypedValue^ aval, System::String^ aname);

//! Creates an Option from another one, the name can be redefined <br>
//!           The Type remains the same. The list of Items, too, it can also <br>
//!           be later duplicated by call to Duplicate <br>
OCMoniTool_Option(OCNaroWrappers::OCMoniTool_Option^ other, System::String^ aname);

//! Adds an item : value and name (replaces it if name is already <br>
//!           recorded) <br>
//!           Returns True when done, False if <val> is not Kind of the <br>
//!           definition Type <br>
//!           For a TypedValue, val must be a HAsciiString, its content must <br>
//!           satisfy the definition of the TypedValue <br>
 /*instead*/  System::Boolean Add(System::String^ name, OCNaroWrappers::OCStandard_Transient^ val) ;

//! Short-cut to add an item for a TypedValue (basic type) : name <br>
//!           is the name of the case, val is its value as a CString <br>
//!           If val is not provided, val = name is assumed <br>
//!           Returns True when done, False if this Option is not for a <br>
//!           TypedValue or if the new value does not satisfy the definition <br>
//!           of the TypedValue <br>
 /*instead*/  System::Boolean AddBasic(System::String^ name, System::String^ val) ;

//! Duplicates the list of items <br>
//!           It starts with the same definitions as before Duplicate, but <br>
//!           it is not longer shared with other options <br>
 /*instead*/  void Duplicate() ;

//! Returns the Name of the Option <br>
 /*instead*/  OCTCollection_AsciiString^ Name() ;

//! Returns the Type of the Option <br>
 /*instead*/  OCStandard_Type^ Type() ;

//! Returns the TypedValue of the Option, or a Null Handle <br>
 /*instead*/  OCMoniTool_TypedValue^ TypedValue() ;

//! Gives the value bound with a name, in val <br>
//!           Returns True if <name> is found, False else <br>
//!           This way of returning a Transient, bound with the Type Control <br>
//!           avoids DownCast and ensures the value is directly usable <br>
 /*instead*/  System::Boolean Item(System::String^ name, OCNaroWrappers::OCStandard_Transient^ val) ;

//! Returns the list of available item names <br>
 /*instead*/  OCTColStd_HSequenceOfAsciiString^ ItemList() ;

//! Returns the list of cases, other than <name>, which bring the <br>
//!           same value as <name> <br>
//!           Empty list (not a Null Handle) if no alias, or <name> unknown <br>
//!           if <exact> is True (D), exact name is required, no completion <br>
//!           if <exact> is False and <name> is not complete, but addresses <br>
//!           only one item, completion is done and the list includes the <br>
//!           complete name <br>
 /*instead*/  OCTColStd_HSequenceOfAsciiString^ Aliases(System::String^ name, System::Boolean exact) ;

//! Commands the Option to switch on an item name <br>
//!           Returns True when done, False if <name> is not recorded <br>
//!             (in that case, former switch remains unchanged) <br>
//!           If no switch has been called, it is active on the last added <br>
//!           items <br>
 /*instead*/  System::Boolean Switch(System::String^ name) ;

//! Returns the Name of the currently switched item (Case) <br>
 /*instead*/  OCTCollection_AsciiString^ CaseName() ;

//! Returns the Value of the currently switch item <br>
//!           To be down-casted as needed before use <br>
 /*instead*/  OCStandard_Transient^ CaseValue() ;

//! Returns the Value of the currently switch item <br>
//!           This way of returning a Transient, bound with the Type Control <br>
//!           avoids DownCast and ensures the value is directly usable <br>
//!           For a TypedValue, returns the corresponding HAsciiString <br>
 /*instead*/  void Value(OCNaroWrappers::OCStandard_Transient^ val) ;

~OCMoniTool_Option()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
