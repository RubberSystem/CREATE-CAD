// File generated by CPPExt (MPV)
//
#ifndef _MoniTool_Stat_OCWrappers_HeaderFile
#define _MoniTool_Stat_OCWrappers_HeaderFile

// include native header
#include <MoniTool_Stat.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTCollection_HAsciiString;
ref class OCTColStd_HArray1OfInteger;


//! This class manages Statistics to be queried asynchronously. <br>
//! <br>
//!           It is organized as a stack of counters, identified by their <br>
//!           levels, from one to ... . Each one has a total account of <br>
//!           items to be counted, a count of already passed items, plus a <br>
//!           count of "current items". The counters of higher level play on <br>
//!           these current items. <br>
//!           For instance, if a counter has been opened for 100 items, 40 <br>
//!           already passed, 20 current, its own percent is 40, but there <br>
//!           is the contribution of higher level counters, rated for 20 % <br>
//!           of this counter. <br>
//! <br>
//!           Hence, a counter is opened, items are added. Also items can be <br>
//!           add for sub-counter (of higher level), they will be added <br>
//!           definitively when the sub-counter will be closed. When the <br>
//!           count has ended, this counter is closed, the counter of <br>
//!           lower level cumulates it and goes on. As follows : <br>
//! <br>
//!           Way of use : <br>
//!           Open(nbitems); <br>
//!           Add(..)  :  direct adding <br>
//!           Add(..) <br>
//!           AddSub (nsub)  :  for sub-counter <br>
//!             Open (nbsubs)  :  nbsubs for this sub-counter <br>
//!             Add (..) <br>
//!             Close        : the sub-counter <br>
//!           AddEnd() <br>
//!           etc... <br>
//!           Close          : the starting counter <br>
//! <br>
//!           This means that a counter can be opened in a Stat, regardless <br>
//!           to the already opened ones :: this will be cumulated <br>
//! <br>
//!           A Current Stat is available, but it is possible to have others <br>
public ref class OCMoniTool_Stat  {

protected:
  MoniTool_Stat* nativeHandle;
  OCMoniTool_Stat(OCDummy^) {};

public:
  property MoniTool_Stat* Handle
  {
    MoniTool_Stat* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCMoniTool_Stat(MoniTool_Stat* nativeHandle);

// Methods PUBLIC

//! Creates a Stat form. At start, one default phase is defined, <br>
//!           with one default step. Then, it suffises to start with a <br>
//!           count of items (and cycles if several) then record items, <br>
//!           to have a queryable report. <br>
OCMoniTool_Stat(System::String^ title);

//! used when starting <br>
OCMoniTool_Stat(OCNaroWrappers::OCMoniTool_Stat^ other);


static /*instead*/  OCMoniTool_Stat^ Current() ;

//! Opens a new counter with a starting count of items <br>
 /*instead*/  Standard_Integer Open(Standard_Integer nb) ;

//! Adds more items to be counted by Add... on current level <br>
 /*instead*/  void OpenMore(Standard_Integer id, Standard_Integer nb) ;

//! Directly addes items <br>
 /*instead*/  void Add(Standard_Integer nb) ;

//! Declares a count of items to be added later. If a sub-counter <br>
//!           is opened, its percentage multiplies this sub-count to compute <br>
//!           the percent of current level <br>
 /*instead*/  void AddSub(Standard_Integer nb) ;

//! Ends the AddSub and cumulates the sub-count to current level <br>
 /*instead*/  void AddEnd() ;


 /*instead*/  void Close(Standard_Integer id) ;


 /*instead*/  Standard_Integer Level() ;


 /*instead*/  Standard_Real Percent(Standard_Integer fromlev) ;

~OCMoniTool_Stat()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
