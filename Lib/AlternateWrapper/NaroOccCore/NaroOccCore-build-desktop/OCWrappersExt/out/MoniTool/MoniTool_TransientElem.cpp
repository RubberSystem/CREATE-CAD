// File generated by CPPExt (CPP file)
//

#include "MoniTool_TransientElem.h"
#include "../Converter.h"
#include "../Standard/Standard_Transient.h"
#include "../TColStd/TColStd_MapTransientHasher.h"
#include "MoniTool_DataInfo.h"
#include "MoniTool_Element.h"
#include "../Standard/Standard_Type.h"


using namespace OCNaroWrappers;

OCMoniTool_TransientElem::OCMoniTool_TransientElem(Handle(MoniTool_TransientElem)* nativeHandle) : OCMoniTool_Element((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MoniTool_TransientElem(*nativeHandle);
}

OCMoniTool_TransientElem::OCMoniTool_TransientElem(OCNaroWrappers::OCStandard_Transient^ akey) : OCMoniTool_Element((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MoniTool_TransientElem(new MoniTool_TransientElem(*((Handle_Standard_Transient*)akey->Handle)));
}

OCStandard_Transient^ OCMoniTool_TransientElem::Value()
{
  Handle(Standard_Transient) tmp = (*((Handle_MoniTool_TransientElem*)nativeHandle))->Value();
  return gcnew OCStandard_Transient(&tmp);
}

 System::Boolean OCMoniTool_TransientElem::Equates(OCNaroWrappers::OCMoniTool_Element^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TransientElem*)nativeHandle))->Equates(*((Handle_MoniTool_Element*)other->Handle)));
}

OCStandard_Type^ OCMoniTool_TransientElem::ValueType()
{
  Handle(Standard_Type) tmp = (*((Handle_MoniTool_TransientElem*)nativeHandle))->ValueType();
  return gcnew OCStandard_Type(&tmp);
}

 System::String^ OCMoniTool_TransientElem::ValueTypeName()
{
  return OCConverter::StandardCStringToString((*((Handle_MoniTool_TransientElem*)nativeHandle))->ValueTypeName());
}


