// File generated by CPPExt (MPV)
//
#ifndef _MoniTool_OptValue_OCWrappers_HeaderFile
#define _MoniTool_OptValue_OCWrappers_HeaderFile

// include native header
#include <MoniTool_OptValue.hxx>
#include "../Converter.h"


#include "../TCollection/TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCStandard_Transient;
ref class OCMoniTool_Profile;


//! This class allows two kinds of use <br>
//! <br>
//!           As an object, a OptValue can be put in any operator or <br>
//!           algorithm ... to use an Option of a Profile, by recording <br>
//!           its value, hence avoiding to query the Profile eachtime <br>
//! <br>
//!           This object brings a value which can be set as coming from a <br>
//!           Profile, with a configuration name and for an Option name <br>
//!           This value is evaluated then returned immediately <br>
//! <br>
//!           As a class, it can be redefined to work on a dedicated <br>
//!           Profile, provided by such or such specific way (as static <br>
//!           context for instance) <br>
//! <br>
//!           To change configuration, etc... can be done by querying and <br>
//!           editing the Profile <br>
public ref class OCMoniTool_OptValue  {

protected:
  MoniTool_OptValue* nativeHandle;
  OCMoniTool_OptValue(OCDummy^) {};

public:
  property MoniTool_OptValue* Handle
  {
    MoniTool_OptValue* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCMoniTool_OptValue(MoniTool_OptValue* nativeHandle);

// Methods PUBLIC

//! Creates an OptValue on a given Option <br>
//!           This allows to use "shortcut" method to set the value <br>
//! <br>
//!           WARNING : loading is not done at creation time. It must be <br>
//!           done explicitly by call to Load <br>
//! <br>
//!           The reason comes from C++ : the Profile being virtual, and <br>
//!           intended to be redefined in sub-classes, must not be used in <br>
//!           the constructor. A separate method, called on the object <br>
//!           already created with its true type, must be called after <br>
OCMoniTool_OptValue(System::String^ opt);

//! Clears the Value of the OptValue <br>
 /*instead*/  void Clear() ;

//! Sets the value as coming from the Profile, according to an <br>
//!           Option name. Access as Fast or regular <br>
//!           If no value is available, the former one remains : can be <br>
//!             cleared by call to Clear <br>
 /*instead*/  void SetValue(OCNaroWrappers::OCMoniTool_Profile^ prof, System::String^ opt, System::Boolean fast) ;

//! Returns the Profile which can be used by Short Cut methods <br>
//!           Defaults returns a Null Handle, can be redefined <br>
//!           For instance, to return a static used as dictionary or context <br>
virtual /*instead*/  OCMoniTool_Profile^ Prof() ;

//! Sets the value from the Profile returned by method Prof, <br>
//!           and Option Name given at creation time. <br>
//!           FastValue by default, else Value <br>
//! <br>
//!           Does not check if already loaded : reloads anyway <br>
//!           IsLoaded allows to test <br>
 /*instead*/  void Load(System::Boolean fast) ;

//! Says if the OptValue is already loaded (i.e. Value defined) <br>
 /*instead*/  System::Boolean IsLoaded() ;

//! Returns the Value set by, either SetConf or SetValue <br>
//!           Can be Null ... (if not set or not properly set) <br>
//! <br>
//!           Returned as Argument, hence avoiding DownCast <br>
//!  Warning : type is not controlled <br>
 /*instead*/  void Value(OCNaroWrappers::OCStandard_Transient^ val) ;


virtual /*instead*/  void Delete() ;

~OCMoniTool_OptValue()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
