// File generated by CPPExt (Transient)
//
#ifndef _MoniTool_Profile_OCWrappers_HeaderFile
#define _MoniTool_Profile_OCWrappers_HeaderFile

// include the wrapped class
#include <MoniTool_Profile.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCDico_DictionaryOfTransient;
ref class OCMoniTool_Option;
ref class OCTColStd_HSequenceOfAsciiString;
ref class OCTCollection_AsciiString;
ref class OCStandard_Transient;


//! A Profile gives access to a set of options : <br>
//!           - it defines and gives access to options, by names specific <br>
//!             to this Profile, defaulted to basic names of the Options <br>
//!           - it records one or more Configurations, each of one is <br>
//!             identified by a name, and commands for each option a switch <br>
//!             value <br>
//!           - a Configuration may be partial, i.e. concern only a subset <br>
//!             of the complete list of options <br>
//!           - Values are accessed through a Current Configuration, which <br>
//!             name is fixed as ".", which can cumulate several <br>
//!             configurations (especially when they are partial) <br>
//! <br>
//!           It may also bring a "fast" access to values, which has been <br>
//!           formerly computed from current configuration or another given <br>
//!           one. But its up-to-date status regarding existing <br>
//!           configurations is not checked : it may be recomputed or <br>
//!           cleared at any time. If not set, the current configuration <br>
//!           is then taken <br>
public ref class OCMoniTool_Profile : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMoniTool_Profile(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMoniTool_Profile(Handle(MoniTool_Profile)* nativeHandle);

// Methods PUBLIC

//! Creates an empty Profile, with an empty Current Configuration <br>
//!           (named ".") <br>
OCMoniTool_Profile();

//! Adds an Option, with a Name, by default takes the Name of the <br>
//!           Option <br>
 /*instead*/  void AddOption(OCNaroWrappers::OCMoniTool_Option^ option, System::String^ name) ;

//! Returns an Option from its Name. Null Handle if unknown <br>
 /*instead*/  OCMoniTool_Option^ Option(System::String^ name) ;

//! Returns the list of Option Names <br>
 /*instead*/  OCTColStd_HSequenceOfAsciiString^ OptionList() ;

//! Returns the list of Option Names which are defined on a <br>
//!           TypedValue/Static, i.e. for Basic Type <br>
 /*instead*/  OCTColStd_HSequenceOfAsciiString^ TypedValueList() ;

//! Adds a new Configuration, yet empty, then filled by AddSwitch <br>
//!           If <confname> already existed, it is replaced from scratch <br>
//!           While AddConf creates new Conf only if it does not yet exist <br>
//! <br>
//!           Remark : the Current Configuration "." may not be changed <br>
 /*instead*/  void NewConf(System::String^ confname) ;

//! Adds a new Configuration, yet empty, then filled by AddSwitch <br>
//!           If <confname> already existed, it is kept as it is <br>
//!           While NewConf restrts from scratch anyway <br>
//! <br>
//!           Remark : the Current Configuration "." may not be changed <br>
 /*instead*/  void AddConf(System::String^ confname) ;

//! Tells if <confname> is known as a Configuration <br>
 /*instead*/  System::Boolean HasConf(System::String^ confname) ;

//! Returns the list of Configuration Names, including Current "." <br>
 /*instead*/  OCTColStd_HSequenceOfAsciiString^ ConfList() ;

//! Clears a configuration (does not remove it) <br>
//!           A cleared configuration has no effect, it can be reloaded <br>
 /*instead*/  System::Boolean ClearConf(System::String^ confname) ;

//! Adds the definitions from the configuration <otherconf> to <br>
//!           those of <confname> <br>
//!           Returns True if done, False if confname or otherconf are unknown <br>
 /*instead*/  System::Boolean AddFromOtherConf(System::String^ confname, System::String^ otherconf) ;

//! Sets the definitions of a configuration from the actual state <br>
//!           (current configuration plus current state of options for those <br>
//!           which are not recorded in current conf) <br>
 /*instead*/  System::Boolean SetFromCurrent(System::String^ confname) ;

//! Adds to the Configuration <confname>, for the option <optname> <br>
//!           the command to switch it to <casename> <br>
//!           If <casename> is not given, records the actual current <br>
//!           CaseName of this Option <br>
//!           Returns True if done, False if <confname> or <optname> is <br>
//!           unknown, or <casename> not allowed for <optname> <br>
 /*instead*/  System::Boolean AddSwitch(System::String^ confname, System::String^ optname, System::String^ casename) ;

//! Removes from the Configuration <confname>, the switch for the <br>
//!           option <optname>. Hence, it will consider the basic default <br>
//!           switch for this option <br>
//!           Returns True if done or switch was not recorded, False if <br>
//!           <confname> or <optname> is unknown <br>
 /*instead*/  System::Boolean RemoveSwitch(System::String^ confname, System::String^ optname) ;

//! Returns the list of switches properly concerned by a config : <br>
//!           two lists in parallel, <optlist> lists the names of options <br>
//!           and for each one, <caselist> gives the case for this config <br>
 /*instead*/  void SwitchList(System::String^ confname, OCNaroWrappers::OCTColStd_HSequenceOfAsciiString^ optlist, OCNaroWrappers::OCTColStd_HSequenceOfAsciiString^ caselist) ;

//! Copies (Cumulates) the definition of <confname> to current <br>
//!           Records the current name as the last current setting <br>
//! <br>
//!           Returns True if done, False (and does nothing> if <confname> <br>
//!           is not recorded as a Configuration <br>
//!           If no SetCurrent has been called, the last added one is taken <br>
//! <br>
//!           Remark : SetCurrent is for the Profile : the individual <br>
//!           options are not switched themselves, they are only queried <br>
//!           To switch the options themselves, see below RecordCurrent <br>
//! <br>
//!           Remark : for Options which are listed in the Profile but not <br>
//!           in the current Configuration, their current switch is taken <br>
 /*instead*/  System::Boolean SetCurrent(System::String^ confname) ;

//! Records the switches of current configuration in the options <br>
//!           themselves <br>
 /*instead*/  void RecordCurrent() ;

//! Returns the name of last current configuration <br>
 /*instead*/  OCTCollection_AsciiString^ Current() ;

//! Returns the selected case name of option <optname> in current <br>
//!           configuration <br>
//!           Empty String if <optname> unknown <br>
//! <br>
//!           If <proper> is False (D), if <optname> is not recorded in the <br>
//!           current configuration, the own current name of the option <br>
//!           itself is taken <br>
//!           Else, an empty string is returned <br>
 /*instead*/  OCTCollection_AsciiString^ CaseName(System::String^ optname, System::Boolean proper) ;

//! Returns the Value of the switch selected for option <optname> <br>
//!           in current configuration <br>
//!           Null Handle if <optname> unknown <br>
//!           To be down-casted as needed before use <br>
 /*instead*/  OCStandard_Transient^ CaseValue(System::String^ optname) ;

//! Returns the Value of the switch selected for option <optname> <br>
//!           in current configuration <br>
//!           Returns True if done, False + Null Handle if <optname> unknown <br>
//!           This way of returning a Transient, bound with the Type Control <br>
//!           avoids DownCast and ensures the value is directly usable <br>
 /*instead*/  System::Boolean Value(System::String^ optname, OCNaroWrappers::OCStandard_Transient^ val) ;

//! For the Options which are defined with a TypedValue/Static, <br>
//!           takes the value defined in current configuration, and sets <br>
//!           the TypedValue with it <br>
//! <br>
//!           If <proper> is False (D), takes the current value, whatever <br>
//!           it is properly recorded in current configuration or not <br>
//!           If <proper> is True, sets the value only if it is properly <br>
//!           recorded in the current configuration <br>
//! <br>
//!           By default, considers all the Options with a TypedValue <br>
//!           If <name> is given, considers the Options of which the name <br>
//!           begins by <name> <br>
 /*instead*/  void SetTypedValues(System::Boolean proper, System::String^ name) ;

//! Recomputes fast access from the definition of a configuration <br>
//!           By default, the current one <br>
//!           Else, a configuration identified by its name <br>
 /*instead*/  void SetFast(System::String^ confname) ;

//! Clears definitions of fast access <br>
 /*instead*/  void ClearFast() ;

//! Gets the value corresponding to Option <optname>, as fast <br>
//!           If not defined as fast, check "normal" access by calling Value <br>
//!           Returns True if OK (either Fast or normal), False if not found <br>
//!           (if not found, <val> is returned Null Handle) <br>
 /*instead*/  System::Boolean FastValue(System::String^ optname, OCNaroWrappers::OCStandard_Transient^ val) ;

~OCMoniTool_Profile()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
