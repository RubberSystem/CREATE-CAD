// File generated by CPPExt (CPP file)
//

#include "MoniTool_Timer.h"
#include "../Converter.h"
#include "../OSD/OSD_Timer.h"
#include "MoniTool_DataMapOfTimer.h"


using namespace OCNaroWrappers;

OCMoniTool_Timer::OCMoniTool_Timer(Handle(MoniTool_Timer)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MoniTool_Timer(*nativeHandle);
}

OCMoniTool_Timer::OCMoniTool_Timer() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MoniTool_Timer(new MoniTool_Timer());
}

OCOSD_Timer^ OCMoniTool_Timer::Timer()
{
  OSD_Timer* tmp = new OSD_Timer();
  *tmp = (*((Handle_MoniTool_Timer*)nativeHandle))->Timer();
  return gcnew OCOSD_Timer(tmp);
}

OCOSD_Timer^ OCMoniTool_Timer::Timer()
{
  OSD_Timer* tmp = new OSD_Timer();
  *tmp = (*((Handle_MoniTool_Timer*)nativeHandle))->Timer();
  return gcnew OCOSD_Timer(tmp);
}

 void OCMoniTool_Timer::Start()
{
  (*((Handle_MoniTool_Timer*)nativeHandle))->Start();
}

 void OCMoniTool_Timer::Stop()
{
  (*((Handle_MoniTool_Timer*)nativeHandle))->Stop();
}

 void OCMoniTool_Timer::Reset()
{
  (*((Handle_MoniTool_Timer*)nativeHandle))->Reset();
}

 Standard_Integer OCMoniTool_Timer::Count()
{
  return (*((Handle_MoniTool_Timer*)nativeHandle))->Count();
}

 Standard_Integer OCMoniTool_Timer::IsRunning()
{
  return (*((Handle_MoniTool_Timer*)nativeHandle))->IsRunning();
}

 Standard_Real OCMoniTool_Timer::CPU()
{
  return (*((Handle_MoniTool_Timer*)nativeHandle))->CPU();
}

 Standard_Real OCMoniTool_Timer::Amend()
{
  return (*((Handle_MoniTool_Timer*)nativeHandle))->Amend();
}

 void OCMoniTool_Timer::Dump(Standard_OStream& ostr)
{
  (*((Handle_MoniTool_Timer*)nativeHandle))->Dump(ostr);
}

OCMoniTool_Timer^ OCMoniTool_Timer::Timer(System::String^ name)
{
  Handle(MoniTool_Timer) tmp = MoniTool_Timer::Timer(OCConverter::StringToStandardCString(name));
  return gcnew OCMoniTool_Timer(&tmp);
}

 void OCMoniTool_Timer::Start(System::String^ name)
{
  MoniTool_Timer::Start(OCConverter::StringToStandardCString(name));
}

 void OCMoniTool_Timer::Stop(System::String^ name)
{
  MoniTool_Timer::Stop(OCConverter::StringToStandardCString(name));
}

OCMoniTool_DataMapOfTimer^ OCMoniTool_Timer::Dictionary()
{
  MoniTool_DataMapOfTimer* tmp = new MoniTool_DataMapOfTimer(0);
  *tmp = MoniTool_Timer::Dictionary();
  return gcnew OCMoniTool_DataMapOfTimer(tmp);
}

 void OCMoniTool_Timer::ClearTimers()
{
  MoniTool_Timer::ClearTimers();
}

 void OCMoniTool_Timer::DumpTimers(Standard_OStream& ostr)
{
  MoniTool_Timer::DumpTimers(ostr);
}

 void OCMoniTool_Timer::ComputeAmendments()
{
  MoniTool_Timer::ComputeAmendments();
}

 void OCMoniTool_Timer::GetAmendments(Standard_Real& Access, Standard_Real& Internal, Standard_Real& External, Standard_Real& Error10)
{
  MoniTool_Timer::GetAmendments(Access, Internal, External, Error10);
}


