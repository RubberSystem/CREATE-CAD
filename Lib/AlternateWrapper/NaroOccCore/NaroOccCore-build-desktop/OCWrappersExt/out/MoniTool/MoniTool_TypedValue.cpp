// File generated by CPPExt (CPP file)
//

#include "MoniTool_TypedValue.h"
#include "../Converter.h"
#include "../Standard/Standard_Type.h"
#include "../TColStd/TColStd_HArray1OfAsciiString.h"
#include "../Dico/Dico_DictionaryOfInteger.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "../Standard/Standard_Transient.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../Message/Message_Messenger.h"
#include "../TColStd/TColStd_HSequenceOfAsciiString.h"
#include "../Dico/Dico_DictionaryOfTransient.h"


using namespace OCNaroWrappers;

OCMoniTool_TypedValue::OCMoniTool_TypedValue(Handle(MoniTool_TypedValue)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MoniTool_TypedValue(*nativeHandle);
}

OCMoniTool_TypedValue::OCMoniTool_TypedValue(System::String^ name, OCMoniTool_ValueType type, System::String^ init) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MoniTool_TypedValue(new MoniTool_TypedValue(OCConverter::StringToStandardCString(name), (MoniTool_ValueType)type, OCConverter::StringToStandardCString(init)));
}

OCMoniTool_TypedValue::OCMoniTool_TypedValue(OCNaroWrappers::OCMoniTool_TypedValue^ other) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MoniTool_TypedValue(new MoniTool_TypedValue(*((Handle_MoniTool_TypedValue*)other->Handle)));
}

 void OCMoniTool_TypedValue::Internals(MoniTool_ValueInterpret& interp, MoniTool_ValueSatisfies& satisf, System::String^& satisname, OCNaroWrappers::OCDico_DictionaryOfInteger^ enums)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->Internals(interp, satisf, OCConverter::StringToStandardCString(satisname), *((Handle_Dico_DictionaryOfInteger*)enums->Handle));
}

 System::String^ OCMoniTool_TypedValue::Name()
{
  return OCConverter::StandardCStringToString((*((Handle_MoniTool_TypedValue*)nativeHandle))->Name());
}

 OCMoniTool_ValueType OCMoniTool_TypedValue::ValueType()
{
  return (OCMoniTool_ValueType)((*((Handle_MoniTool_TypedValue*)nativeHandle))->ValueType());
}

OCTCollection_AsciiString^ OCMoniTool_TypedValue::Definition()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_MoniTool_TypedValue*)nativeHandle))->Definition();
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCMoniTool_TypedValue::SetDefinition(System::String^ deftext)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetDefinition(OCConverter::StringToStandardCString(deftext));
}

 void OCMoniTool_TypedValue::Print(OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->Print(*((Handle_Message_Messenger*)S->Handle));
}

 void OCMoniTool_TypedValue::PrintValue(OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->PrintValue(*((Handle_Message_Messenger*)S->Handle));
}

 System::Boolean OCMoniTool_TypedValue::AddDef(System::String^ initext)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->AddDef(OCConverter::StringToStandardCString(initext)));
}

 void OCMoniTool_TypedValue::SetLabel(System::String^ label)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetLabel(OCConverter::StringToStandardCString(label));
}

 System::String^ OCMoniTool_TypedValue::Label()
{
  return OCConverter::StandardCStringToString((*((Handle_MoniTool_TypedValue*)nativeHandle))->Label());
}

 void OCMoniTool_TypedValue::SetMaxLength(Standard_Integer max)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetMaxLength(max);
}

 Standard_Integer OCMoniTool_TypedValue::MaxLength()
{
  return (*((Handle_MoniTool_TypedValue*)nativeHandle))->MaxLength();
}

 void OCMoniTool_TypedValue::SetIntegerLimit(System::Boolean max, Standard_Integer val)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetIntegerLimit(OCConverter::BooleanToStandardBoolean(max), val);
}

 System::Boolean OCMoniTool_TypedValue::IntegerLimit(System::Boolean max, Standard_Integer& val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->IntegerLimit(OCConverter::BooleanToStandardBoolean(max), val));
}

 void OCMoniTool_TypedValue::SetRealLimit(System::Boolean max, Standard_Real val)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetRealLimit(OCConverter::BooleanToStandardBoolean(max), val);
}

 System::Boolean OCMoniTool_TypedValue::RealLimit(System::Boolean max, Standard_Real& val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->RealLimit(OCConverter::BooleanToStandardBoolean(max), val));
}

 void OCMoniTool_TypedValue::SetUnitDef(System::String^ def)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetUnitDef(OCConverter::StringToStandardCString(def));
}

 System::String^ OCMoniTool_TypedValue::UnitDef()
{
  return OCConverter::StandardCStringToString((*((Handle_MoniTool_TypedValue*)nativeHandle))->UnitDef());
}

 void OCMoniTool_TypedValue::StartEnum(Standard_Integer start, System::Boolean match)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->StartEnum(start, OCConverter::BooleanToStandardBoolean(match));
}

 void OCMoniTool_TypedValue::AddEnum(System::String^ v1, System::String^ v2, System::String^ v3, System::String^ v4, System::String^ v5, System::String^ v6, System::String^ v7, System::String^ v8, System::String^ v9, System::String^ v10)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->AddEnum(OCConverter::StringToStandardCString(v1), OCConverter::StringToStandardCString(v2), OCConverter::StringToStandardCString(v3), OCConverter::StringToStandardCString(v4), OCConverter::StringToStandardCString(v5), OCConverter::StringToStandardCString(v6), OCConverter::StringToStandardCString(v7), OCConverter::StringToStandardCString(v8), OCConverter::StringToStandardCString(v9), OCConverter::StringToStandardCString(v10));
}

 void OCMoniTool_TypedValue::AddEnumValue(System::String^ val, Standard_Integer num)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->AddEnumValue(OCConverter::StringToStandardCString(val), num);
}

 System::Boolean OCMoniTool_TypedValue::EnumDef(Standard_Integer& startcase, Standard_Integer& endcase, System::Boolean& match)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->EnumDef(startcase, endcase, (Standard_Boolean&)(match)));
}

 System::String^ OCMoniTool_TypedValue::EnumVal(Standard_Integer num)
{
  return OCConverter::StandardCStringToString((*((Handle_MoniTool_TypedValue*)nativeHandle))->EnumVal(num));
}

 Standard_Integer OCMoniTool_TypedValue::EnumCase(System::String^ val)
{
  return (*((Handle_MoniTool_TypedValue*)nativeHandle))->EnumCase(OCConverter::StringToStandardCString(val));
}

 void OCMoniTool_TypedValue::SetObjectType(OCNaroWrappers::OCStandard_Type^ typ)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetObjectType(*((Handle_Standard_Type*)typ->Handle));
}

OCStandard_Type^ OCMoniTool_TypedValue::ObjectType()
{
  Handle(Standard_Type) tmp = (*((Handle_MoniTool_TypedValue*)nativeHandle))->ObjectType();
  return gcnew OCStandard_Type(&tmp);
}

 void OCMoniTool_TypedValue::SetInterpret(MoniTool_ValueInterpret func)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetInterpret(func);
}

 System::Boolean OCMoniTool_TypedValue::HasInterpret()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->HasInterpret());
}

 void OCMoniTool_TypedValue::SetSatisfies(MoniTool_ValueSatisfies func, System::String^ name)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->SetSatisfies(func, OCConverter::StringToStandardCString(name));
}

 System::String^ OCMoniTool_TypedValue::SatisfiesName()
{
  return OCConverter::StandardCStringToString((*((Handle_MoniTool_TypedValue*)nativeHandle))->SatisfiesName());
}

 System::Boolean OCMoniTool_TypedValue::IsSetValue()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->IsSetValue());
}

 System::String^ OCMoniTool_TypedValue::CStringValue()
{
  return OCConverter::StandardCStringToString((*((Handle_MoniTool_TypedValue*)nativeHandle))->CStringValue());
}

OCTCollection_HAsciiString^ OCMoniTool_TypedValue::HStringValue()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_MoniTool_TypedValue*)nativeHandle))->HStringValue();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTCollection_HAsciiString^ OCMoniTool_TypedValue::Interpret(OCNaroWrappers::OCTCollection_HAsciiString^ hval, System::Boolean native)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_MoniTool_TypedValue*)nativeHandle))->Interpret(*((Handle_TCollection_HAsciiString*)hval->Handle), OCConverter::BooleanToStandardBoolean(native));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 System::Boolean OCMoniTool_TypedValue::Satisfies(OCNaroWrappers::OCTCollection_HAsciiString^ hval)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->Satisfies(*((Handle_TCollection_HAsciiString*)hval->Handle)));
}

 void OCMoniTool_TypedValue::ClearValue()
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->ClearValue();
}

 System::Boolean OCMoniTool_TypedValue::SetCStringValue(System::String^ val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->SetCStringValue(OCConverter::StringToStandardCString(val)));
}

 System::Boolean OCMoniTool_TypedValue::SetHStringValue(OCNaroWrappers::OCTCollection_HAsciiString^ hval)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->SetHStringValue(*((Handle_TCollection_HAsciiString*)hval->Handle)));
}

 Standard_Integer OCMoniTool_TypedValue::IntegerValue()
{
  return (*((Handle_MoniTool_TypedValue*)nativeHandle))->IntegerValue();
}

 System::Boolean OCMoniTool_TypedValue::SetIntegerValue(Standard_Integer ival)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->SetIntegerValue(ival));
}

 Standard_Real OCMoniTool_TypedValue::RealValue()
{
  return (*((Handle_MoniTool_TypedValue*)nativeHandle))->RealValue();
}

 System::Boolean OCMoniTool_TypedValue::SetRealValue(Standard_Real rval)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->SetRealValue(rval));
}

OCStandard_Transient^ OCMoniTool_TypedValue::ObjectValue()
{
  Handle(Standard_Transient) tmp = (*((Handle_MoniTool_TypedValue*)nativeHandle))->ObjectValue();
  return gcnew OCStandard_Transient(&tmp);
}

 void OCMoniTool_TypedValue::GetObjectValue(OCNaroWrappers::OCStandard_Transient^ val)
{
  (*((Handle_MoniTool_TypedValue*)nativeHandle))->GetObjectValue(*((Handle_Standard_Transient*)val->Handle));
}

 System::Boolean OCMoniTool_TypedValue::SetObjectValue(OCNaroWrappers::OCStandard_Transient^ obj)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MoniTool_TypedValue*)nativeHandle))->SetObjectValue(*((Handle_Standard_Transient*)obj->Handle)));
}

 System::String^ OCMoniTool_TypedValue::ObjectTypeName()
{
  return OCConverter::StandardCStringToString((*((Handle_MoniTool_TypedValue*)nativeHandle))->ObjectTypeName());
}

 System::Boolean OCMoniTool_TypedValue::AddLib(OCNaroWrappers::OCMoniTool_TypedValue^ tv, System::String^ def)
{
  return OCConverter::StandardBooleanToBoolean(MoniTool_TypedValue::AddLib(*((Handle_MoniTool_TypedValue*)tv->Handle), OCConverter::StringToStandardCString(def)));
}

OCMoniTool_TypedValue^ OCMoniTool_TypedValue::Lib(System::String^ def)
{
  Handle(MoniTool_TypedValue) tmp = MoniTool_TypedValue::Lib(OCConverter::StringToStandardCString(def));
  return gcnew OCMoniTool_TypedValue(&tmp);
}

OCMoniTool_TypedValue^ OCMoniTool_TypedValue::FromLib(System::String^ def)
{
  Handle(MoniTool_TypedValue) tmp = MoniTool_TypedValue::FromLib(OCConverter::StringToStandardCString(def));
  return gcnew OCMoniTool_TypedValue(&tmp);
}

OCTColStd_HSequenceOfAsciiString^ OCMoniTool_TypedValue::LibList()
{
  Handle(TColStd_HSequenceOfAsciiString) tmp = MoniTool_TypedValue::LibList();
  return gcnew OCTColStd_HSequenceOfAsciiString(&tmp);
}

OCMoniTool_TypedValue^ OCMoniTool_TypedValue::StaticValue(System::String^ name)
{
  Handle(MoniTool_TypedValue) tmp = MoniTool_TypedValue::StaticValue(OCConverter::StringToStandardCString(name));
  return gcnew OCMoniTool_TypedValue(&tmp);
}


