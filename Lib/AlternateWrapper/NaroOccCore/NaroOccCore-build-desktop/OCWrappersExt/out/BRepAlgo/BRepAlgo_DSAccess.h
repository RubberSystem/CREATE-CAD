// File generated by CPPExt (MPV)
//
#ifndef _BRepAlgo_DSAccess_OCWrappers_HeaderFile
#define _BRepAlgo_DSAccess_OCWrappers_HeaderFile

// include native header
#include <BRepAlgo_DSAccess.hxx>
#include "../Converter.h"


#include "../TopOpeBRep/TopOpeBRep_DSFiller.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopAbs/TopAbs_State.h"
#include "../TopTools/TopTools_ListOfShape.h"
#include "../TopoDS/TopoDS_Wire.h"
#include "../TColStd/TColStd_ListOfInteger.h"
#include "../TopTools/TopTools_DataMapOfShapeShape.h"
#include "../TColStd/TColStd_SetOfInteger.h"
#include "BRepAlgo_CheckStatus.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_Kind.h"


namespace OCNaroWrappers
{

ref class OCTopOpeBRepDS_HDataStructure;
ref class OCTopOpeBRepBuild_HBuilder;
ref class OCBRepAlgo_EdgeConnector;
ref class OCBRepAlgo_BooleanOperations;
ref class OCTopoDS_Shape;
ref class OCTopTools_ListOfShape;
ref class OCTopoDS_Vertex;
ref class OCTColStd_ListOfInteger;



public ref class OCBRepAlgo_DSAccess  {

protected:
  BRepAlgo_DSAccess* nativeHandle;
  OCBRepAlgo_DSAccess(OCDummy^) {};

public:
  property BRepAlgo_DSAccess* Handle
  {
    BRepAlgo_DSAccess* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepAlgo_DSAccess(BRepAlgo_DSAccess* nativeHandle);

// Methods PUBLIC


OCBRepAlgo_DSAccess();

//! Clears the internal data structure, including the <br>
 /*instead*/  void Init() ;

//! Loads the shape in DS. <br>
//! <br>
 /*instead*/  void Load(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Loads two shapes in the DS without intersecting them. <br>
 /*instead*/  void Load(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2) ;

//! Intersects two shapes at input and loads the DS with <br>
//!          their intersection. Clears the TopOpeBRepBuild_HBuilder if <br>
//!          necessary <br>
 /*instead*/  void Intersect() ;

//! Intersects the faces contained in two given shapes <br>
//!          and loads them in the DS. Clears the TopOpeBRepBuild_HBuilder <br>
//!          if necessary <br>
 /*instead*/  void Intersect(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2) ;

//! This method does the same thing as the previous, <br>
//!          but faster. There is no intersection face/face 3D. <br>
//!          The faces have the same support(surface). No test of <br>
//!          tangency (that is why it is faster). Intersects in 2d <br>
//!          the faces tangent F1 anf F2. <br>
 /*instead*/  void SameDomain(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2) ;

//! returns compounds of Edge connected with section, which <br>
//!          contains sections between faces contained in S1 and S2. <br>
//!          returns an empty list of Shape if S1 or S2 do not contain <br>
//!          face. <br>
//!          calls GetSectionEdgeSet() if it has not already been done <br>
 /*instead*/  OCTopTools_ListOfShape^ GetSectionEdgeSet(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2) ;

//! returns all compounds of edges connected with section <br>
//!          contained in the DS <br>
 /*instead*/  OCTopTools_ListOfShape^ GetSectionEdgeSet() ;

//! NYI <br>
 /*instead*/  System::Boolean IsWire(OCNaroWrappers::OCTopoDS_Shape^ Compound) ;

//! NYI <br>
 /*instead*/  OCTopoDS_Shape^ Wire(OCNaroWrappers::OCTopoDS_Shape^ Compound) ;

//! NYI <br>
//!          returns the vertex of section, which contains the section <br>
//!          between face S1 and edge S2 (returns an empty Shape <br>
//!          if S1 is not a face or if S2 is not an edge) <br>
 /*instead*/  OCTopTools_ListOfShape^ SectionVertex(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2) ;

//! Invalidates a complete line of section. All <br>
//!          Edges connected by Vertex or a Wire. Can be <br>
//!          a group of connected Edges, which do not form a <br>
//!          standard Wire. <br>
 /*instead*/  void SuppressEdgeSet(OCNaroWrappers::OCTopoDS_Shape^ Compound) ;

//!  Modifies a line of section.  <New> -- should be a <br>
//!          Group of Edges connected by Vertex.  -- Can be a <br>
//!          Wire.  Can be a group of connected Edges that do not <br>
//!          form a standard Wire.   <New> should be sub-groupn of <Old> <br>
//! <br>
//! <br>
 /*instead*/  void ChangeEdgeSet(OCNaroWrappers::OCTopoDS_Shape^ Old, OCNaroWrappers::OCTopoDS_Shape^ New) ;

//! NYI <br>
//!          Make invalid a Vertex of section. The Vertex shoud be <br>
//!          reconstructed from a point. <br>
 /*instead*/  void SuppressSectionVertex(OCNaroWrappers::OCTopoDS_Vertex^ V) ;


 /*instead*/  OCTopoDS_Shape^ Merge(OCTopAbs_State state1, OCTopAbs_State state2) ;


 /*instead*/  OCTopoDS_Shape^ Merge(OCTopAbs_State state1) ;

//!  NYI   Propagation  of a state starting from the shape <br>
//!          FromShape = edge or vertex of section, face or <br>
//!          Coumpound de section. LoadShape is either S1, <br>
//!          or S2  (see the method Load).   Propagation   from <br>
//!          FromShape, on the states <what> of LoadShape. <br>
//!          Return a Wire in 2d, a Shell in 3d. <br>
//!          Specifications are incomplete, to be redefined for the typologies <br>
//!          correpsonding to  <FromShape> and the result : <br>
//!          exemple :    FromShape        resultat <br>
//!                         vertex           wire (or edge) <br>
//!                    edge of section       face (or shell) <br>
//!                    compound of section   shell <br>
//!                      ...                  ... <br>
 /*instead*/  OCTopoDS_Shape^ Propagate(OCTopAbs_State what, OCNaroWrappers::OCTopoDS_Shape^ FromShape, OCNaroWrappers::OCTopoDS_Shape^ LoadShape) ;

//! SectionShape est soit un Vertex de section(NYI), soit <br>
//!          une Edge de section. Propagation  des shapes <br>
//!          de section en partant de SectionShape. <br>
//!          return un Compound de section. <br>
 /*instead*/  OCTopoDS_Shape^ PropagateFromSection(OCNaroWrappers::OCTopoDS_Shape^ SectionShape) ;

//! Returns the list of the descendant shapes of the shape <S>. <br>
 /*instead*/  OCTopTools_ListOfShape^ Modified(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Returns the fact that the shape <S> has been deleted or not <br>
//!          by the boolean operation. <br>
 /*instead*/  System::Boolean IsDeleted(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! NYI <br>
//!          coherence of the internal Data Structure. <br>
 /*instead*/  OCBRepAlgo_CheckStatus Check() ;


 /*instead*/  OCTopOpeBRepDS_HDataStructure^ DS() ;


 /*instead*/  OCTopOpeBRepDS_HDataStructure^ ChangeDS() ;


 /*instead*/  OCTopOpeBRepBuild_HBuilder^ Builder() ;


 /*instead*/  OCTopOpeBRepBuild_HBuilder^ ChangeBuilder() ;

~OCBRepAlgo_DSAccess()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
