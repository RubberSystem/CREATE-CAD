// File generated by CPPExt (CPP file)
//

#include "BRepAlgo_DSAccess.h"
#include "../Converter.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_HDataStructure.h"
#include "../TopOpeBRepBuild/TopOpeBRepBuild_HBuilder.h"
#include "BRepAlgo_EdgeConnector.h"
#include "BRepAlgo_BooleanOperations.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopTools/TopTools_ListOfShape.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TColStd/TColStd_ListOfInteger.h"


using namespace OCNaroWrappers;

OCBRepAlgo_DSAccess::OCBRepAlgo_DSAccess(BRepAlgo_DSAccess* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepAlgo_DSAccess::OCBRepAlgo_DSAccess() 
{
  nativeHandle = new BRepAlgo_DSAccess();
}

 void OCBRepAlgo_DSAccess::Init()
{
  ((BRepAlgo_DSAccess*)nativeHandle)->Init();
}

 void OCBRepAlgo_DSAccess::Load(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  ((BRepAlgo_DSAccess*)nativeHandle)->Load(*((TopoDS_Shape*)S->Handle));
}

 void OCBRepAlgo_DSAccess::Load(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2)
{
  ((BRepAlgo_DSAccess*)nativeHandle)->Load(*((TopoDS_Shape*)S1->Handle), *((TopoDS_Shape*)S2->Handle));
}

 void OCBRepAlgo_DSAccess::Intersect()
{
  ((BRepAlgo_DSAccess*)nativeHandle)->Intersect();
}

 void OCBRepAlgo_DSAccess::Intersect(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2)
{
  ((BRepAlgo_DSAccess*)nativeHandle)->Intersect(*((TopoDS_Shape*)S1->Handle), *((TopoDS_Shape*)S2->Handle));
}

 void OCBRepAlgo_DSAccess::SameDomain(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2)
{
  ((BRepAlgo_DSAccess*)nativeHandle)->SameDomain(*((TopoDS_Shape*)S1->Handle), *((TopoDS_Shape*)S2->Handle));
}

OCTopTools_ListOfShape^ OCBRepAlgo_DSAccess::GetSectionEdgeSet(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2)
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->GetSectionEdgeSet(*((TopoDS_Shape*)S1->Handle), *((TopoDS_Shape*)S2->Handle));
  return gcnew OCTopTools_ListOfShape(tmp);
}

OCTopTools_ListOfShape^ OCBRepAlgo_DSAccess::GetSectionEdgeSet()
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->GetSectionEdgeSet();
  return gcnew OCTopTools_ListOfShape(tmp);
}

 System::Boolean OCBRepAlgo_DSAccess::IsWire(OCNaroWrappers::OCTopoDS_Shape^ Compound)
{
  return OCConverter::StandardBooleanToBoolean(((BRepAlgo_DSAccess*)nativeHandle)->IsWire(*((TopoDS_Shape*)Compound->Handle)));
}

OCTopoDS_Shape^ OCBRepAlgo_DSAccess::Wire(OCNaroWrappers::OCTopoDS_Shape^ Compound)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->Wire(*((TopoDS_Shape*)Compound->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopTools_ListOfShape^ OCBRepAlgo_DSAccess::SectionVertex(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2)
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->SectionVertex(*((TopoDS_Shape*)S1->Handle), *((TopoDS_Shape*)S2->Handle));
  return gcnew OCTopTools_ListOfShape(tmp);
}

 void OCBRepAlgo_DSAccess::SuppressEdgeSet(OCNaroWrappers::OCTopoDS_Shape^ Compound)
{
  ((BRepAlgo_DSAccess*)nativeHandle)->SuppressEdgeSet(*((TopoDS_Shape*)Compound->Handle));
}

 void OCBRepAlgo_DSAccess::ChangeEdgeSet(OCNaroWrappers::OCTopoDS_Shape^ Old, OCNaroWrappers::OCTopoDS_Shape^ New)
{
  ((BRepAlgo_DSAccess*)nativeHandle)->ChangeEdgeSet(*((TopoDS_Shape*)Old->Handle), *((TopoDS_Shape*)New->Handle));
}

 void OCBRepAlgo_DSAccess::SuppressSectionVertex(OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  ((BRepAlgo_DSAccess*)nativeHandle)->SuppressSectionVertex(*((TopoDS_Vertex*)V->Handle));
}

OCTopoDS_Shape^ OCBRepAlgo_DSAccess::Merge(OCTopAbs_State state1, OCTopAbs_State state2)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->Merge((TopAbs_State)state1, (TopAbs_State)state2);
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepAlgo_DSAccess::Merge(OCTopAbs_State state1)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->Merge((TopAbs_State)state1);
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepAlgo_DSAccess::Propagate(OCTopAbs_State what, OCNaroWrappers::OCTopoDS_Shape^ FromShape, OCNaroWrappers::OCTopoDS_Shape^ LoadShape)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->Propagate((TopAbs_State)what, *((TopoDS_Shape*)FromShape->Handle), *((TopoDS_Shape*)LoadShape->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepAlgo_DSAccess::PropagateFromSection(OCNaroWrappers::OCTopoDS_Shape^ SectionShape)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->PropagateFromSection(*((TopoDS_Shape*)SectionShape->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopTools_ListOfShape^ OCBRepAlgo_DSAccess::Modified(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BRepAlgo_DSAccess*)nativeHandle)->Modified(*((TopoDS_Shape*)S->Handle));
  return gcnew OCTopTools_ListOfShape(tmp);
}

 System::Boolean OCBRepAlgo_DSAccess::IsDeleted(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  return OCConverter::StandardBooleanToBoolean(((BRepAlgo_DSAccess*)nativeHandle)->IsDeleted(*((TopoDS_Shape*)S->Handle)));
}

 OCBRepAlgo_CheckStatus OCBRepAlgo_DSAccess::Check()
{
  return (OCBRepAlgo_CheckStatus)(((BRepAlgo_DSAccess*)nativeHandle)->Check());
}

OCTopOpeBRepDS_HDataStructure^ OCBRepAlgo_DSAccess::DS()
{
  Handle(TopOpeBRepDS_HDataStructure) tmp = ((BRepAlgo_DSAccess*)nativeHandle)->DS();
  return gcnew OCTopOpeBRepDS_HDataStructure(&tmp);
}

OCTopOpeBRepDS_HDataStructure^ OCBRepAlgo_DSAccess::ChangeDS()
{
  Handle(TopOpeBRepDS_HDataStructure) tmp = ((BRepAlgo_DSAccess*)nativeHandle)->ChangeDS();
  return gcnew OCTopOpeBRepDS_HDataStructure(&tmp);
}

OCTopOpeBRepBuild_HBuilder^ OCBRepAlgo_DSAccess::Builder()
{
  Handle(TopOpeBRepBuild_HBuilder) tmp = ((BRepAlgo_DSAccess*)nativeHandle)->Builder();
  return gcnew OCTopOpeBRepBuild_HBuilder(&tmp);
}

OCTopOpeBRepBuild_HBuilder^ OCBRepAlgo_DSAccess::ChangeBuilder()
{
  Handle(TopOpeBRepBuild_HBuilder) tmp = ((BRepAlgo_DSAccess*)nativeHandle)->ChangeBuilder();
  return gcnew OCTopOpeBRepBuild_HBuilder(&tmp);
}


