// File generated by CPPExt (CPP file)
//

#include "BRepAlgo_EdgeConnector.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopTools/TopTools_ListOfShape.h"
#include "../TopoDS/TopoDS_Shape.h"


using namespace OCNaroWrappers;

OCBRepAlgo_EdgeConnector::OCBRepAlgo_EdgeConnector(Handle(BRepAlgo_EdgeConnector)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_BRepAlgo_EdgeConnector(*nativeHandle);
}

OCBRepAlgo_EdgeConnector::OCBRepAlgo_EdgeConnector() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_BRepAlgo_EdgeConnector(new BRepAlgo_EdgeConnector());
}

 void OCBRepAlgo_EdgeConnector::Add(OCNaroWrappers::OCTopoDS_Edge^ e)
{
  (*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->Add(*((TopoDS_Edge*)e->Handle));
}

 void OCBRepAlgo_EdgeConnector::Add(OCNaroWrappers::OCTopTools_ListOfShape^ LOEdge)
{
  (*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->Add(*((TopTools_ListOfShape*)LOEdge->Handle));
}

 void OCBRepAlgo_EdgeConnector::AddStart(OCNaroWrappers::OCTopoDS_Shape^ e)
{
  (*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->AddStart(*((TopoDS_Shape*)e->Handle));
}

 void OCBRepAlgo_EdgeConnector::AddStart(OCNaroWrappers::OCTopTools_ListOfShape^ LOEdge)
{
  (*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->AddStart(*((TopTools_ListOfShape*)LOEdge->Handle));
}

 void OCBRepAlgo_EdgeConnector::ClearStartElement()
{
  (*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->ClearStartElement();
}

OCTopTools_ListOfShape^ OCBRepAlgo_EdgeConnector::MakeBlock()
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = (*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->MakeBlock();
  return gcnew OCTopTools_ListOfShape(tmp);
}

 void OCBRepAlgo_EdgeConnector::Done()
{
  (*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->Done();
}

 System::Boolean OCBRepAlgo_EdgeConnector::IsDone()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->IsDone());
}

 System::Boolean OCBRepAlgo_EdgeConnector::IsWire(OCNaroWrappers::OCTopoDS_Shape^ W)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRepAlgo_EdgeConnector*)nativeHandle))->IsWire(*((TopoDS_Shape*)W->Handle)));
}


