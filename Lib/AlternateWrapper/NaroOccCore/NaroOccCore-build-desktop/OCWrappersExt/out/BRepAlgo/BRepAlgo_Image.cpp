// File generated by CPPExt (CPP file)
//

#include "BRepAlgo_Image.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopTools/TopTools_ListOfShape.h"


using namespace OCNaroWrappers;

OCBRepAlgo_Image::OCBRepAlgo_Image(BRepAlgo_Image* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepAlgo_Image::OCBRepAlgo_Image() 
{
  nativeHandle = new BRepAlgo_Image();
}

 void OCBRepAlgo_Image::SetRoot(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  ((BRepAlgo_Image*)nativeHandle)->SetRoot(*((TopoDS_Shape*)S->Handle));
}

 void OCBRepAlgo_Image::Bind(OCNaroWrappers::OCTopoDS_Shape^ OldS, OCNaroWrappers::OCTopoDS_Shape^ NewS)
{
  ((BRepAlgo_Image*)nativeHandle)->Bind(*((TopoDS_Shape*)OldS->Handle), *((TopoDS_Shape*)NewS->Handle));
}

 void OCBRepAlgo_Image::Bind(OCNaroWrappers::OCTopoDS_Shape^ OldS, OCNaroWrappers::OCTopTools_ListOfShape^ NewS)
{
  ((BRepAlgo_Image*)nativeHandle)->Bind(*((TopoDS_Shape*)OldS->Handle), *((TopTools_ListOfShape*)NewS->Handle));
}

 void OCBRepAlgo_Image::Add(OCNaroWrappers::OCTopoDS_Shape^ OldS, OCNaroWrappers::OCTopoDS_Shape^ NewS)
{
  ((BRepAlgo_Image*)nativeHandle)->Add(*((TopoDS_Shape*)OldS->Handle), *((TopoDS_Shape*)NewS->Handle));
}

 void OCBRepAlgo_Image::Add(OCNaroWrappers::OCTopoDS_Shape^ OldS, OCNaroWrappers::OCTopTools_ListOfShape^ NewS)
{
  ((BRepAlgo_Image*)nativeHandle)->Add(*((TopoDS_Shape*)OldS->Handle), *((TopTools_ListOfShape*)NewS->Handle));
}

 void OCBRepAlgo_Image::Clear()
{
  ((BRepAlgo_Image*)nativeHandle)->Clear();
}

 void OCBRepAlgo_Image::Remove(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  ((BRepAlgo_Image*)nativeHandle)->Remove(*((TopoDS_Shape*)S->Handle));
}

OCTopTools_ListOfShape^ OCBRepAlgo_Image::Roots()
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BRepAlgo_Image*)nativeHandle)->Roots();
  return gcnew OCTopTools_ListOfShape(tmp);
}

 System::Boolean OCBRepAlgo_Image::IsImage(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  return OCConverter::StandardBooleanToBoolean(((BRepAlgo_Image*)nativeHandle)->IsImage(*((TopoDS_Shape*)S->Handle)));
}

OCTopoDS_Shape^ OCBRepAlgo_Image::ImageFrom(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepAlgo_Image*)nativeHandle)->ImageFrom(*((TopoDS_Shape*)S->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepAlgo_Image::Root(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((BRepAlgo_Image*)nativeHandle)->Root(*((TopoDS_Shape*)S->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCBRepAlgo_Image::HasImage(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  return OCConverter::StandardBooleanToBoolean(((BRepAlgo_Image*)nativeHandle)->HasImage(*((TopoDS_Shape*)S->Handle)));
}

OCTopTools_ListOfShape^ OCBRepAlgo_Image::Image(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((BRepAlgo_Image*)nativeHandle)->Image(*((TopoDS_Shape*)S->Handle));
  return gcnew OCTopTools_ListOfShape(tmp);
}

 void OCBRepAlgo_Image::LastImage(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_ListOfShape^ L)
{
  ((BRepAlgo_Image*)nativeHandle)->LastImage(*((TopoDS_Shape*)S->Handle), *((TopTools_ListOfShape*)L->Handle));
}

 void OCBRepAlgo_Image::Compact()
{
  ((BRepAlgo_Image*)nativeHandle)->Compact();
}

 void OCBRepAlgo_Image::Filter(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_ShapeEnum ShapeType)
{
  ((BRepAlgo_Image*)nativeHandle)->Filter(*((TopoDS_Shape*)S->Handle), (TopAbs_ShapeEnum)ShapeType);
}


