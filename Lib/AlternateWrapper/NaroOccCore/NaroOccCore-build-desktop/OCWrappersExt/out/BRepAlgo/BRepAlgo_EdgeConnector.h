// File generated by CPPExt (Transient)
//
#ifndef _BRepAlgo_EdgeConnector_OCWrappers_HeaderFile
#define _BRepAlgo_EdgeConnector_OCWrappers_HeaderFile

// include the wrapped class
#include <BRepAlgo_EdgeConnector.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TopTools/TopTools_ListOfShape.h"
#include "BRepAlgo_DataMapOfShapeBoolean.h"
#include "../TopOpeBRepBuild/TopOpeBRepBuild_BlockBuilder.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Edge;
ref class OCTopTools_ListOfShape;
ref class OCTopoDS_Shape;


//! Used by DSAccess to reconstruct an EdgeSet of connected edges. The result produced by <br>
//!           MakeBlock is a list of non-standard TopoDS_wire, <br>
//!          which  can present connexions of edge  of  order > 2 <br>
//!           in certain  vertex. The method  IsWire <br>
//!            indicates standard/non-standard character of  all wire produced. <br>
public ref class OCBRepAlgo_EdgeConnector : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCBRepAlgo_EdgeConnector(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepAlgo_EdgeConnector(Handle(BRepAlgo_EdgeConnector)* nativeHandle);

// Methods PUBLIC


OCBRepAlgo_EdgeConnector();


 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Edge^ e) ;


 /*instead*/  void Add(OCNaroWrappers::OCTopTools_ListOfShape^ LOEdge) ;


 /*instead*/  void AddStart(OCNaroWrappers::OCTopoDS_Shape^ e) ;


 /*instead*/  void AddStart(OCNaroWrappers::OCTopTools_ListOfShape^ LOEdge) ;


 /*instead*/  void ClearStartElement() ;

//! returns a list of wire non standard <br>
 /*instead*/  OCTopTools_ListOfShape^ MakeBlock() ;


 /*instead*/  void Done() ;

//! NYI <br>//! returns true if proceeded  to MakeBlock() <br>
 /*instead*/  System::Boolean IsDone() ;

//! NYI <br>//! returns true if W is  a Wire standard. <br>
//!          W must belong  to the list returned  by MakeBlock. <br>
 /*instead*/  System::Boolean IsWire(OCNaroWrappers::OCTopoDS_Shape^ W) ;

~OCBRepAlgo_EdgeConnector()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
