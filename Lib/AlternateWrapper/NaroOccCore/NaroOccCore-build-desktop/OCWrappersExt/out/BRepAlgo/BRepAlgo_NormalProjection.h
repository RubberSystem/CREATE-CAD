// File generated by CPPExt (MPV)
//
#ifndef _BRepAlgo_NormalProjection_OCWrappers_HeaderFile
#define _BRepAlgo_NormalProjection_OCWrappers_HeaderFile

// include native header
#include <BRepAlgo_NormalProjection.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Shape.h"
#include "../GeomAbs/GeomAbs_Shape.h"
#include "../TopTools/TopTools_DataMapOfShapeShape.h"
#include "../TopTools/TopTools_DataMapOfShapeListOfShape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopoDS_Edge;
ref class OCTopTools_ListOfShape;
ref class OCAdaptor3d_Curve;


//! This class makes the projection  of a wire on a <br>
//!           shape. <br>
public ref class OCBRepAlgo_NormalProjection  {

protected:
  BRepAlgo_NormalProjection* nativeHandle;
  OCBRepAlgo_NormalProjection(OCDummy^) {};

public:
  property BRepAlgo_NormalProjection* Handle
  {
    BRepAlgo_NormalProjection* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepAlgo_NormalProjection(BRepAlgo_NormalProjection* nativeHandle);

// Methods PUBLIC


OCBRepAlgo_NormalProjection();


OCBRepAlgo_NormalProjection(OCNaroWrappers::OCTopoDS_Shape^ S);


 /*instead*/  void Init(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Add an edge or a wire to the list of shape to project <br>
//! <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Shape^ ToProj) ;

//! Set the parameters  used  for computation <br>
//!          Tol3d is the requiered  tolerance between the  3d projected <br>
//!          curve  and its 2d representation <br>
//!          InternalContinuity  is the order of constraints <br>
//!          used for  approximation. <br>
//!          MaxDeg and MaxSeg are the maximum degree and the maximum <br>
//!          number of segment for BSpline resulting of an approximation. <br>
 /*instead*/  void SetParams(Standard_Real Tol3D, Standard_Real Tol2D, OCGeomAbs_Shape InternalContinuity, Standard_Integer MaxDegree, Standard_Integer MaxSeg) ;

//! Set the parameters  used  for computation <br>
//!          in their default values <br>
 /*instead*/  void SetDefaultParams() ;

//!  Sets the maximum distance between target shape and <br>
//!  shape to project. If this condition is not satisfied then <br>
//!  corresponding part of solution is discarded. <br>
//!  if MaxDist < 0 then this method does not affect the algorithm <br>
 /*instead*/  void SetMaxDistance(Standard_Real MaxDist) ;

//!  if  With3d = Standard_False the 3dcurve is not computed <br>
//! the  initial 3dcurve is kept  to  build the  resulting edges. <br>
 /*instead*/  void Compute3d(System::Boolean With3d) ;

//!  Manage  limitation  of  projected  edges. <br>
 /*instead*/  void SetLimit(System::Boolean FaceBoundaries) ;

//! Builds the result as a  compound. <br>
 /*instead*/  void Build() ;


 /*instead*/  System::Boolean IsDone() ;

//! returns the result <br>
 /*instead*/  OCTopoDS_Shape^ Projection() ;

//! For a resulting edge, returns the corresponding initial edge. <br>
 /*instead*/  OCTopoDS_Shape^ Ancestor(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! For a projected edge, returns the corresponding initial face. <br>
 /*instead*/  OCTopoDS_Shape^ Couple(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Returns the  list   of shapes generated   from the <br>
//!          shape <S>. <br>
 /*instead*/  OCTopTools_ListOfShape^ Generated(OCNaroWrappers::OCTopoDS_Shape^ S) ;


 /*instead*/  System::Boolean IsElementary(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;

//! build the result as a list of wire if possible in -- <br>
//!  a first returns a wire only if there is only a wire. <br>
//! <br>
 /*instead*/  System::Boolean BuildWire(OCNaroWrappers::OCTopTools_ListOfShape^ Liste) ;

~OCBRepAlgo_NormalProjection()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
