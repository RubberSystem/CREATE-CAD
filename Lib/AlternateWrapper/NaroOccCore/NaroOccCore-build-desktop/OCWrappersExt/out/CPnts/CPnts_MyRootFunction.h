// File generated by CPPExt (MPV)
//
#ifndef _CPnts_MyRootFunction_OCWrappers_HeaderFile
#define _CPnts_MyRootFunction_OCWrappers_HeaderFile

// include native header
#include <CPnts_MyRootFunction.hxx>
#include "../Converter.h"

#include "../math/math_FunctionWithDerivative.h"

#include "CPnts_MyGaussFunction.h"
#include "../math/math_FunctionWithDerivative.h"


namespace OCNaroWrappers
{



//! Implements a function for the Newton algorithm to find the <br>
//!          solution of Integral(F) = L <br>
public ref class OCCPnts_MyRootFunction  : public OCmath_FunctionWithDerivative {

protected:
  // dummy constructor;
  OCCPnts_MyRootFunction(OCDummy^) : OCmath_FunctionWithDerivative((OCDummy^)nullptr) {};

public:

// constructor from native
OCCPnts_MyRootFunction(CPnts_MyRootFunction* nativeHandle);

// Methods PUBLIC


OCCPnts_MyRootFunction();

//! F  is a pointer on a  function  D is a client data <br>
//!          Order is the order of integration to use <br>
//! <br>
 /*instead*/  void Init(CPnts_RealFunction F, Standard_Address D, Standard_Integer Order) ;

//! We want to solve Integral(X0,X,F(X,D)) = L <br>
 /*instead*/  void Init(Standard_Real X0, Standard_Real L) ;

//! We want to solve Integral(X0,X,F(X,D)) = L <br>
//!  with given tolerance <br>
 /*instead*/  void Init(Standard_Real X0, Standard_Real L, Standard_Real Tol) ;

//! This is Integral(X0,X,F(X,D)) - L <br>
 /*instead*/  System::Boolean Value(Standard_Real X, Standard_Real& F) ;

//! This is F(X,D) <br>
 /*instead*/  System::Boolean Derivative(Standard_Real X, Standard_Real& Df) ;


 /*instead*/  System::Boolean Values(Standard_Real X, Standard_Real& F, Standard_Real& Df) ;

~OCCPnts_MyRootFunction()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
