// File generated by CPPExt (CPP file)
//

#include "CPnts_UniformDeflection.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "../Adaptor2d/Adaptor2d_Curve2d.h"


using namespace OCNaroWrappers;

OCCPnts_UniformDeflection::OCCPnts_UniformDeflection(CPnts_UniformDeflection* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCCPnts_UniformDeflection::OCCPnts_UniformDeflection() 
{
  nativeHandle = new CPnts_UniformDeflection();
}

OCCPnts_UniformDeflection::OCCPnts_UniformDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, Standard_Real Resolution, System::Boolean WithControl) 
{
  nativeHandle = new CPnts_UniformDeflection(*((Adaptor3d_Curve*)C->Handle), Deflection, Resolution, OCConverter::BooleanToStandardBoolean(WithControl));
}

OCCPnts_UniformDeflection::OCCPnts_UniformDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, Standard_Real Resolution, System::Boolean WithControl) 
{
  nativeHandle = new CPnts_UniformDeflection(*((Adaptor2d_Curve2d*)C->Handle), Deflection, Resolution, OCConverter::BooleanToStandardBoolean(WithControl));
}

OCCPnts_UniformDeflection::OCCPnts_UniformDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, Standard_Real Resolution, System::Boolean WithControl) 
{
  nativeHandle = new CPnts_UniformDeflection(*((Adaptor3d_Curve*)C->Handle), Deflection, U1, U2, Resolution, OCConverter::BooleanToStandardBoolean(WithControl));
}

OCCPnts_UniformDeflection::OCCPnts_UniformDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, Standard_Real Resolution, System::Boolean WithControl) 
{
  nativeHandle = new CPnts_UniformDeflection(*((Adaptor2d_Curve2d*)C->Handle), Deflection, U1, U2, Resolution, OCConverter::BooleanToStandardBoolean(WithControl));
}

 void OCCPnts_UniformDeflection::Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, Standard_Real Resolution, System::Boolean WithControl)
{
  ((CPnts_UniformDeflection*)nativeHandle)->Initialize(*((Adaptor3d_Curve*)C->Handle), Deflection, Resolution, OCConverter::BooleanToStandardBoolean(WithControl));
}

 void OCCPnts_UniformDeflection::Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, Standard_Real Resolution, System::Boolean WithControl)
{
  ((CPnts_UniformDeflection*)nativeHandle)->Initialize(*((Adaptor2d_Curve2d*)C->Handle), Deflection, Resolution, OCConverter::BooleanToStandardBoolean(WithControl));
}

 void OCCPnts_UniformDeflection::Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, Standard_Real Resolution, System::Boolean WithControl)
{
  ((CPnts_UniformDeflection*)nativeHandle)->Initialize(*((Adaptor3d_Curve*)C->Handle), Deflection, U1, U2, Resolution, OCConverter::BooleanToStandardBoolean(WithControl));
}

 void OCCPnts_UniformDeflection::Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, Standard_Real Resolution, System::Boolean WithControl)
{
  ((CPnts_UniformDeflection*)nativeHandle)->Initialize(*((Adaptor2d_Curve2d*)C->Handle), Deflection, U1, U2, Resolution, OCConverter::BooleanToStandardBoolean(WithControl));
}

 System::Boolean OCCPnts_UniformDeflection::IsAllDone()
{
  return OCConverter::StandardBooleanToBoolean(((CPnts_UniformDeflection*)nativeHandle)->IsAllDone());
}

 void OCCPnts_UniformDeflection::Next()
{
  ((CPnts_UniformDeflection*)nativeHandle)->Next();
}

 System::Boolean OCCPnts_UniformDeflection::More()
{
  return OCConverter::StandardBooleanToBoolean(((CPnts_UniformDeflection*)nativeHandle)->More());
}

 Standard_Real OCCPnts_UniformDeflection::Value()
{
  return ((CPnts_UniformDeflection*)nativeHandle)->Value();
}

OCgp_Pnt^ OCCPnts_UniformDeflection::Point()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((CPnts_UniformDeflection*)nativeHandle)->Point();
  return gcnew OCgp_Pnt(tmp);
}


