// File generated by CPPExt (CPP file)
//

#include "CPnts_MyRootFunction.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCCPnts_MyRootFunction::OCCPnts_MyRootFunction(CPnts_MyRootFunction* nativeHandle) : OCmath_FunctionWithDerivative((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCCPnts_MyRootFunction::OCCPnts_MyRootFunction() : OCmath_FunctionWithDerivative((OCDummy^)nullptr)

{
  nativeHandle = new CPnts_MyRootFunction();
}

 void OCCPnts_MyRootFunction::Init(CPnts_RealFunction F, Standard_Address D, Standard_Integer Order)
{
  ((CPnts_MyRootFunction*)nativeHandle)->Init(F, D, Order);
}

 void OCCPnts_MyRootFunction::Init(Standard_Real X0, Standard_Real L)
{
  ((CPnts_MyRootFunction*)nativeHandle)->Init(X0, L);
}

 void OCCPnts_MyRootFunction::Init(Standard_Real X0, Standard_Real L, Standard_Real Tol)
{
  ((CPnts_MyRootFunction*)nativeHandle)->Init(X0, L, Tol);
}

 System::Boolean OCCPnts_MyRootFunction::Value(Standard_Real X, Standard_Real& F)
{
  return OCConverter::StandardBooleanToBoolean(((CPnts_MyRootFunction*)nativeHandle)->Value(X, F));
}

 System::Boolean OCCPnts_MyRootFunction::Derivative(Standard_Real X, Standard_Real& Df)
{
  return OCConverter::StandardBooleanToBoolean(((CPnts_MyRootFunction*)nativeHandle)->Derivative(X, Df));
}

 System::Boolean OCCPnts_MyRootFunction::Values(Standard_Real X, Standard_Real& F, Standard_Real& Df)
{
  return OCConverter::StandardBooleanToBoolean(((CPnts_MyRootFunction*)nativeHandle)->Values(X, F, Df));
}


