// File generated by CPPExt (MPV)
//
#ifndef _IntPatch_Point_OCWrappers_HeaderFile
#define _IntPatch_Point_OCWrappers_HeaderFile

// include native header
#include <IntPatch_Point.hxx>
#include "../Converter.h"


#include "../IntSurf/IntSurf_PntOn2S.h"
#include "../IntSurf/IntSurf_Transition.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HVertex;
ref class OCAdaptor2d_HCurve2d;
ref class OCgp_Pnt;
ref class OCIntSurf_Transition;
ref class OCIntSurf_PntOn2S;


//! Definition of an intersection point between two surfaces. <br>
//!          Such a point is contains geometrical informations (see <br>
//!          the Value method) and logical informations. <br>
public ref class OCIntPatch_Point  {

protected:
  IntPatch_Point* nativeHandle;
  OCIntPatch_Point(OCDummy^) {};

public:
  property IntPatch_Point* Handle
  {
    IntPatch_Point* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntPatch_Point(IntPatch_Point* nativeHandle);

// Methods PUBLIC

//! Empty constructor. <br>
OCIntPatch_Point();

//! Sets the values of a point which is on no domain, <br>
//!          when both surfaces are implicit ones. <br>
//!          If Tangent is True, the point is a point of tangency <br>
//!          between the surfaces. <br>
 /*instead*/  void SetValue(OCNaroWrappers::OCgp_Pnt^ Pt, Standard_Real Tol, System::Boolean Tangent) ;


 /*instead*/  void SetValue(OCNaroWrappers::OCgp_Pnt^ Pt) ;


 /*instead*/  void SetTolerance(Standard_Real Tol) ;

//! Sets the values of the parameters of the point <br>
//!          on each surface. <br>
 /*instead*/  void SetParameters(Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2) ;

//! Set the value of the parameter on the intersection line. <br>
 /*instead*/  void SetParameter(Standard_Real Para) ;

//! Sets the values of a point which is a vertex on <br>
//!          the initial facet of restriction of one <br>
//!          of the surface. <br>
//!          If OnFirst is True, the point is on the domain of the <br>
//!          first patch, otherwise the point is on the domain of the <br>
//!          second surface. <br>
 /*instead*/  void SetVertex(System::Boolean OnFirst, OCNaroWrappers::OCAdaptor3d_HVertex^ V) ;

//! Sets the values of a point which is on one of the domain, <br>
//!          when both surfaces are implicit ones. <br>
//!          If OnFirst is True, the point is on the domain of the <br>
//!          first patch, otherwise the point is on the domain of the <br>
//!          second surface. <br>
 /*instead*/  void SetArc(System::Boolean OnFirst, OCNaroWrappers::OCAdaptor2d_HCurve2d^ A, Standard_Real Param, OCNaroWrappers::OCIntSurf_Transition^ TLine, OCNaroWrappers::OCIntSurf_Transition^ TArc) ;

//! Sets (or unsets) the point as a point on several <br>
//!          intersection line. <br>
 /*instead*/  void SetMultiple(System::Boolean IsMult) ;

//! Returns the intersection point (geometric information). <br>
 /*instead*/  OCgp_Pnt^ Value() ;

//! This method returns the parameter of the point <br>
//!          on the intersection line. <br>
//!          If the points does not belong to an intersection line, <br>
//!          the value returned does not have any sens. <br>
 /*instead*/  Standard_Real ParameterOnLine() ;

//! This method returns the fuzziness on the point. <br>
 /*instead*/  Standard_Real Tolerance() ;

//! Returns True if the Point is a tangency point between <br>
//!          the surfaces. <br>
//!          If the Point is on one of the domain (IsOnDomS1 returns <br>
//!          True or IsOnDomS2 returns True), an exception is raised. <br>
 /*instead*/  System::Boolean IsTangencyPoint() ;

//! Returns the parameters on the first surface of the point. <br>
 /*instead*/  void ParametersOnS1(Standard_Real& U1, Standard_Real& V1) ;

//! Returns the parameters on the second surface of the point. <br>
 /*instead*/  void ParametersOnS2(Standard_Real& U2, Standard_Real& V2) ;

//! Returns True if the point belongs to several intersection <br>
//!          lines. <br>
 /*instead*/  System::Boolean IsMultiple() ;

//! Returns TRUE if the point is on a boundary of the domain <br>
//!          of the first patch. <br>
 /*instead*/  System::Boolean IsOnDomS1() ;

//! Returns TRUE if the point is a vertex on the initial <br>
//!          restriction facet of the first surface. <br>
 /*instead*/  System::Boolean IsVertexOnS1() ;

//! Returns the information about the point when it is <br>
//!          on the domain of the first patch, i-e when the function <br>
//!          IsVertexOnS1 returns True. <br>
//!          Otherwise, an exception is raised. <br>
 /*instead*/  OCAdaptor3d_HVertex^ VertexOnS1() ;

//! Returns the arc of restriction containing the <br>
//!          vertex. <br>
//!          The exception DomainError is raised if <br>
//!          IsOnDomS1 returns False. <br>
 /*instead*/  OCAdaptor2d_HCurve2d^ ArcOnS1() ;

//! Returns the transition of the point on the <br>
//!          intersection line with the arc on S1. <br>
//!          The exception DomainError is raised if IsOnDomS1 <br>
//!          returns False. <br>
 /*instead*/  OCIntSurf_Transition^ TransitionLineArc1() ;

//! Returns the transition between the intersection line <br>
//!          returned by the method Line and the arc on S1 returned <br>
//!          by ArcOnS1(). <br>
//!          The exception DomainError is raised if <br>
//!          IsOnDomS1 returns False. <br>
 /*instead*/  OCIntSurf_Transition^ TransitionOnS1() ;

//! Returns the parameter of the point on the <br>
//!          arc returned by the method ArcOnS2. <br>
//!          The exception DomainError is raised if <br>
//!          IsOnDomS1 returns False. <br>
 /*instead*/  Standard_Real ParameterOnArc1() ;

//! Returns TRUE if the point is on a boundary of the domain <br>
//!          of the second patch. <br>
 /*instead*/  System::Boolean IsOnDomS2() ;

//! Returns TRUE if the point is a vertex on the initial <br>
//!          restriction facet of the first surface. <br>
 /*instead*/  System::Boolean IsVertexOnS2() ;

//! Returns the information about the point when it is <br>
//!          on the domain of the second patch, i-e when the function <br>
//!          IsVertexOnS2 returns True. <br>
//!          Otherwise, an exception is raised. <br>
 /*instead*/  OCAdaptor3d_HVertex^ VertexOnS2() ;

//! Returns the arc of restriction containing the <br>
//!          vertex. <br>
//!          The exception DomainError is raised if <br>
//!          IsOnDomS2 returns False. <br>
 /*instead*/  OCAdaptor2d_HCurve2d^ ArcOnS2() ;

//! Returns the transition of the point on the <br>
//!          intersection line with the arc on S2. <br>
//!          The exception DomainError is raised if IsOnDomS2 <br>
//!          returns False. <br>
 /*instead*/  OCIntSurf_Transition^ TransitionLineArc2() ;

//! Returns the transition between the intersection line <br>
//!          returned by the method Line and the arc on S2 returned <br>
//!          by ArcOnS2. <br>
//!          The exception DomainError is raised if <br>
//!          IsOnDomS2 returns False. <br>
 /*instead*/  OCIntSurf_Transition^ TransitionOnS2() ;

//! Returns the parameter of the point on the <br>
//!          arc returned by the method ArcOnS2. <br>
//!          The exception DomainError is raised if <br>
//!          IsOnDomS2 returns False. <br>
 /*instead*/  Standard_Real ParameterOnArc2() ;

//! Returns the PntOn2S <br>
//!          (geometric Point and the parameters) <br>
//! <br>
 /*instead*/  OCIntSurf_PntOn2S^ PntOn2S() ;

//! Returns the parameters on the first and on the <br>
//!          second surface of the point. <br>
 /*instead*/  void Parameters(Standard_Real& U1, Standard_Real& V1, Standard_Real& U2, Standard_Real& V2) ;


 /*instead*/  void ReverseTransition() ;


 /*instead*/  void Dump() ;

~OCIntPatch_Point()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
