// File generated by CPPExt (CPP file)
//

#include "IntPatch_ImpPrmIntersection.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Adaptor3d/Adaptor3d_TopolTool.h"
#include "IntPatch_Point.h"
#include "IntPatch_Line.h"


using namespace OCNaroWrappers;

OCIntPatch_ImpPrmIntersection::OCIntPatch_ImpPrmIntersection(IntPatch_ImpPrmIntersection* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntPatch_ImpPrmIntersection::OCIntPatch_ImpPrmIntersection() 
{
  nativeHandle = new IntPatch_ImpPrmIntersection();
}

OCIntPatch_ImpPrmIntersection::OCIntPatch_ImpPrmIntersection(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor3d_TopolTool^ D1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, OCNaroWrappers::OCAdaptor3d_TopolTool^ D2, Standard_Real TolArc, Standard_Real TolTang, Standard_Real Fleche, Standard_Real Pas) 
{
  nativeHandle = new IntPatch_ImpPrmIntersection(*((Handle_Adaptor3d_HSurface*)Surf1->Handle), *((Handle_Adaptor3d_TopolTool*)D1->Handle), *((Handle_Adaptor3d_HSurface*)Surf2->Handle), *((Handle_Adaptor3d_TopolTool*)D2->Handle), TolArc, TolTang, Fleche, Pas);
}

 void OCIntPatch_ImpPrmIntersection::SetStartPoint(Standard_Real U, Standard_Real V)
{
  ((IntPatch_ImpPrmIntersection*)nativeHandle)->SetStartPoint(U, V);
}

 void OCIntPatch_ImpPrmIntersection::Perform(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor3d_TopolTool^ D1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, OCNaroWrappers::OCAdaptor3d_TopolTool^ D2, Standard_Real TolArc, Standard_Real TolTang, Standard_Real Fleche, Standard_Real Pas)
{
  ((IntPatch_ImpPrmIntersection*)nativeHandle)->Perform(*((Handle_Adaptor3d_HSurface*)Surf1->Handle), *((Handle_Adaptor3d_TopolTool*)D1->Handle), *((Handle_Adaptor3d_HSurface*)Surf2->Handle), *((Handle_Adaptor3d_TopolTool*)D2->Handle), TolArc, TolTang, Fleche, Pas);
}

 System::Boolean OCIntPatch_ImpPrmIntersection::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_ImpPrmIntersection*)nativeHandle)->IsDone());
}

 System::Boolean OCIntPatch_ImpPrmIntersection::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_ImpPrmIntersection*)nativeHandle)->IsEmpty());
}

 Standard_Integer OCIntPatch_ImpPrmIntersection::NbPnts()
{
  return ((IntPatch_ImpPrmIntersection*)nativeHandle)->NbPnts();
}

OCIntPatch_Point^ OCIntPatch_ImpPrmIntersection::Point(Standard_Integer Index)
{
  IntPatch_Point* tmp = new IntPatch_Point();
  *tmp = ((IntPatch_ImpPrmIntersection*)nativeHandle)->Point(Index);
  return gcnew OCIntPatch_Point(tmp);
}

 Standard_Integer OCIntPatch_ImpPrmIntersection::NbLines()
{
  return ((IntPatch_ImpPrmIntersection*)nativeHandle)->NbLines();
}

OCIntPatch_Line^ OCIntPatch_ImpPrmIntersection::Line(Standard_Integer Index)
{
  Handle(IntPatch_Line) tmp = ((IntPatch_ImpPrmIntersection*)nativeHandle)->Line(Index);
  return gcnew OCIntPatch_Line(&tmp);
}


