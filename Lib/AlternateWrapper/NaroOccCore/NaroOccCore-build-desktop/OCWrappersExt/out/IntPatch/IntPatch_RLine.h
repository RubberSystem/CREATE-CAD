// File generated by CPPExt (Transient)
//
#ifndef _IntPatch_RLine_OCWrappers_HeaderFile
#define _IntPatch_RLine_OCWrappers_HeaderFile

// include the wrapped class
#include <IntPatch_RLine.hxx>
#include "../Converter.h"

#include "IntPatch_Line.h"

#include "IntPatch_SequenceOfPoint.h"
#include "../IntSurf/IntSurf_TypeTrans.h"
#include "../IntSurf/IntSurf_Situation.h"


namespace OCNaroWrappers
{

ref class OCAdaptor2d_HCurve2d;
ref class OCIntSurf_LineOn2S;
ref class OCIntPatch_Point;
ref class OCIntSurf_PntOn2S;


//! Implementation of an intersection line described by a <br>
//!          restriction line on one of the surfaces. <br>
public ref class OCIntPatch_RLine : OCIntPatch_Line {

protected:
  // dummy constructor;
  OCIntPatch_RLine(OCDummy^) : OCIntPatch_Line((OCDummy^)nullptr) {};

public:

// constructor from native
OCIntPatch_RLine(Handle(IntPatch_RLine)* nativeHandle);

// Methods PUBLIC

//! Creates a restriction as an intersection line <br>
//!          when the transitions are In or Out. <br>
OCIntPatch_RLine(System::Boolean Tang, OCIntSurf_TypeTrans Trans1, OCIntSurf_TypeTrans Trans2);

//! Creates a restriction as an intersection line <br>
//!          when the transitions are Touch. <br>
OCIntPatch_RLine(System::Boolean Tang, OCIntSurf_Situation Situ1, OCIntSurf_Situation Situ2);

//! Creates a restriction as an intersection line <br>
//!          when the transitions are Undecided. <br>
OCIntPatch_RLine(System::Boolean Tang);

//! To add a vertex in the list. <br>
 /*instead*/  void AddVertex(OCNaroWrappers::OCIntPatch_Point^ Pnt) ;

//! Replaces the element of range Index in the list <br>
//!          of points. <br>
 /*instead*/  void Replace(Standard_Integer Index, OCNaroWrappers::OCIntPatch_Point^ Pnt) ;


 /*instead*/  void SetFirstPoint(Standard_Integer IndFirst) ;


 /*instead*/  void SetLastPoint(Standard_Integer IndLast) ;


 /*instead*/  void Add(OCNaroWrappers::OCIntSurf_LineOn2S^ L) ;

//! Returns True if the intersection is on the domain of the <br>
//!          first patch. <br>
//!          Returns False if the intersection is on the domain of <br>
//!          the second patch. <br>
 /*instead*/  System::Boolean IsArcOnS1() ;

//! Returns True if the intersection is on the domain of the <br>
//!          first patch. <br>
//!          Returns False if the intersection is on the domain of <br>
//!          the second patch. <br>
 /*instead*/  System::Boolean IsArcOnS2() ;


 /*instead*/  void SetArcOnS1(OCNaroWrappers::OCAdaptor2d_HCurve2d^ A) ;


 /*instead*/  void SetArcOnS2(OCNaroWrappers::OCAdaptor2d_HCurve2d^ A) ;


 /*instead*/  void SetParamOnS1(Standard_Real p1, Standard_Real p2) ;


 /*instead*/  void SetParamOnS2(Standard_Real& p1, Standard_Real& p2) ;

//! Returns the concerned arc. <br>
 /*instead*/  OCAdaptor2d_HCurve2d^ ArcOnS1() ;

//! Returns the concerned arc. <br>
 /*instead*/  OCAdaptor2d_HCurve2d^ ArcOnS2() ;


 /*instead*/  void ParamOnS1(Standard_Real& p1, Standard_Real& p2) ;


 /*instead*/  void ParamOnS2(Standard_Real& p1, Standard_Real& p2) ;

//! Returns True if the line has a known First point. <br>
//!          This point is given by the method FirstPoint(). <br>
 /*instead*/  System::Boolean HasFirstPoint() ;

//! Returns True if the line has a known Last point. <br>
//!          This point is given by the method LastPoint(). <br>
 /*instead*/  System::Boolean HasLastPoint() ;

//! Returns the IntPoint corresponding to the FirstPoint. <br>
//!          An exception is raised when HasFirstPoint returns False. <br>
 /*instead*/  OCIntPatch_Point^ FirstPoint() ;

//! Returns the IntPoint corresponding to the LastPoint. <br>
//!          An exception is raised when HasLastPoint returns False. <br>
 /*instead*/  OCIntPatch_Point^ LastPoint() ;


 /*instead*/  Standard_Integer NbVertex() ;

//! Returns the vertex of range Index on the line. <br>
 /*instead*/  OCIntPatch_Point^ Vertex(Standard_Integer Index) ;


 /*instead*/  System::Boolean HasPolygon() ;

//! Returns the number of intersection points. <br>
 /*instead*/  Standard_Integer NbPnts() ;

//! Returns the intersection point of range Index. <br>
 /*instead*/  OCIntSurf_PntOn2S^ Point(Standard_Integer Index) ;

//! Set the Point of index <Index> in the LineOn2S <br>
 /*instead*/  void SetPoint(Standard_Integer Index, OCNaroWrappers::OCIntPatch_Point^ Pnt) ;

//! Set the parameters of all the vertex on the line. <br>
//!          if a vertex is already in the line, <br>
//!             its parameter is modified <br>
//!          else a new point in the line is inserted. <br>
 /*instead*/  void ComputeVertexParameters(Standard_Real Tol) ;

~OCIntPatch_RLine()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
