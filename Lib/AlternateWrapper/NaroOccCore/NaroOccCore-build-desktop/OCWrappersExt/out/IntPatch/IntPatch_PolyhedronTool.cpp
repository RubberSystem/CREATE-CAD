// File generated by CPPExt (CPP file)
//

#include "IntPatch_PolyhedronTool.h"
#include "../Converter.h"
#include "../Bnd/Bnd_Box.h"
#include "IntPatch_Polyhedron.h"
#include "../Bnd/Bnd_HArray1OfBox.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCIntPatch_PolyhedronTool::OCIntPatch_PolyhedronTool(IntPatch_PolyhedronTool* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBnd_Box^ OCIntPatch_PolyhedronTool::Bounding(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh)
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = IntPatch_PolyhedronTool::Bounding(*((IntPatch_Polyhedron*)thePolyh->Handle));
  return gcnew OCBnd_Box(tmp);
}

OCBnd_HArray1OfBox^ OCIntPatch_PolyhedronTool::ComponentsBounding(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh)
{
  Handle(Bnd_HArray1OfBox) tmp = IntPatch_PolyhedronTool::ComponentsBounding(*((IntPatch_Polyhedron*)thePolyh->Handle));
  return gcnew OCBnd_HArray1OfBox(&tmp);
}

 Standard_Real OCIntPatch_PolyhedronTool::DeflectionOverEstimation(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh)
{
  return IntPatch_PolyhedronTool::DeflectionOverEstimation(*((IntPatch_Polyhedron*)thePolyh->Handle));
}

 Standard_Integer OCIntPatch_PolyhedronTool::NbTriangles(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh)
{
  return IntPatch_PolyhedronTool::NbTriangles(*((IntPatch_Polyhedron*)thePolyh->Handle));
}

 void OCIntPatch_PolyhedronTool::Triangle(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh, Standard_Integer Index, Standard_Integer& P1, Standard_Integer& P2, Standard_Integer& P3)
{
  IntPatch_PolyhedronTool::Triangle(*((IntPatch_Polyhedron*)thePolyh->Handle), Index, P1, P2, P3);
}

OCgp_Pnt^ OCIntPatch_PolyhedronTool::Point(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh, Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = IntPatch_PolyhedronTool::Point(*((IntPatch_Polyhedron*)thePolyh->Handle), Index);
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Integer OCIntPatch_PolyhedronTool::TriConnex(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh, Standard_Integer Triang, Standard_Integer Pivot, Standard_Integer Pedge, Standard_Integer& TriCon, Standard_Integer& OtherP)
{
  return IntPatch_PolyhedronTool::TriConnex(*((IntPatch_Polyhedron*)thePolyh->Handle), Triang, Pivot, Pedge, TriCon, OtherP);
}


