// File generated by CPPExt (MPV)
//
#ifndef _IntPatch_ImpPrmIntersection_OCWrappers_HeaderFile
#define _IntPatch_ImpPrmIntersection_OCWrappers_HeaderFile

// include native header
#include <IntPatch_ImpPrmIntersection.hxx>
#include "../Converter.h"


#include "IntPatch_SequenceOfPoint.h"
#include "IntPatch_SequenceOfLine.h"
#include "IntPatch_TheSOnBounds.h"
#include "IntPatch_TheSearchInside.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HSurface;
ref class OCAdaptor3d_TopolTool;
ref class OCIntPatch_Point;
ref class OCIntPatch_Line;


//! Implementation of the intersection between a natural <br>
//!          quadric patch : Plane, Cone, Cylinder or Sphere and <br>
//!          a bi-parametrised surface. <br>
public ref class OCIntPatch_ImpPrmIntersection  {

protected:
  IntPatch_ImpPrmIntersection* nativeHandle;
  OCIntPatch_ImpPrmIntersection(OCDummy^) {};

public:
  property IntPatch_ImpPrmIntersection* Handle
  {
    IntPatch_ImpPrmIntersection* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntPatch_ImpPrmIntersection(IntPatch_ImpPrmIntersection* nativeHandle);

// Methods PUBLIC


OCIntPatch_ImpPrmIntersection();


OCIntPatch_ImpPrmIntersection(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor3d_TopolTool^ D1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, OCNaroWrappers::OCAdaptor3d_TopolTool^ D2, Standard_Real TolArc, Standard_Real TolTang, Standard_Real Fleche, Standard_Real Pas);

//! to search for solution from the given point <br>
 /*instead*/  void SetStartPoint(Standard_Real U, Standard_Real V) ;


 /*instead*/  void Perform(OCNaroWrappers::OCAdaptor3d_HSurface^ Surf1, OCNaroWrappers::OCAdaptor3d_TopolTool^ D1, OCNaroWrappers::OCAdaptor3d_HSurface^ Surf2, OCNaroWrappers::OCAdaptor3d_TopolTool^ D2, Standard_Real TolArc, Standard_Real TolTang, Standard_Real Fleche, Standard_Real Pas) ;

//! Returns true if the calculus was succesfull. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns true if the is no intersection. <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! Returns the number of "single" points. <br>
 /*instead*/  Standard_Integer NbPnts() ;

//! Returns the point of range Index. <br>
//!          An exception is raised if Index<=0 or Index>NbPnt. <br>
 /*instead*/  OCIntPatch_Point^ Point(Standard_Integer Index) ;

//! Returns the number of intersection lines. <br>
 /*instead*/  Standard_Integer NbLines() ;

//! Returns the line of range Index. <br>
//!          An exception is raised if Index<=0 or Index>NbLine. <br>
 /*instead*/  OCIntPatch_Line^ Line(Standard_Integer Index) ;

~OCIntPatch_ImpPrmIntersection()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
