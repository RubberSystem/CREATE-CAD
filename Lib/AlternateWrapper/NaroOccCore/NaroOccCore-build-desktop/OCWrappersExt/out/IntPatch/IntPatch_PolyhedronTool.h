// File generated by CPPExt (MPV)
//
#ifndef _IntPatch_PolyhedronTool_OCWrappers_HeaderFile
#define _IntPatch_PolyhedronTool_OCWrappers_HeaderFile

// include native header
#include <IntPatch_PolyhedronTool.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCBnd_Box;
ref class OCIntPatch_Polyhedron;
ref class OCBnd_HArray1OfBox;
ref class OCgp_Pnt;


//! Describe  the signature  of  a  polyedral surface with <br>
//!          only triangular  facets and the necessary informations <br>
//!          to compute the interferences. <br>
public ref class OCIntPatch_PolyhedronTool  {

protected:
  IntPatch_PolyhedronTool* nativeHandle;
  OCIntPatch_PolyhedronTool(OCDummy^) {};

public:
  property IntPatch_PolyhedronTool* Handle
  {
    IntPatch_PolyhedronTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntPatch_PolyhedronTool(IntPatch_PolyhedronTool* nativeHandle);

// Methods PUBLIC

//! Give the bounding box of the Polyhedron. <br>
static /*instead*/  OCBnd_Box^ Bounding(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh) ;

//! Give the array of boxes. The box <n> corresponding <br>
//!          to the triangle <n>. <br>
static /*instead*/  OCBnd_HArray1OfBox^ ComponentsBounding(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh) ;

//! Give the tolerance of the polygon. <br>
static /*instead*/  Standard_Real DeflectionOverEstimation(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh) ;

//! Give the number of triangles in this polyedral surface. <br>
static /*instead*/  Standard_Integer NbTriangles(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh) ;

//! Give the indices  of  the 3 points of  the triangle of <br>
//!          address Index in the Polyhedron. <br>
static /*instead*/  void Triangle(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh, Standard_Integer Index, Standard_Integer& P1, Standard_Integer& P2, Standard_Integer& P3) ;

//! Give the point of index i in the polyedral surface. <br>
static /*instead*/  OCgp_Pnt^ Point(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh, Standard_Integer Index) ;

//! Gives the  addresse Tricon of   the triangle connexe to <br>
//!          the triangle of address Triang by the edge Pivot Pedge <br>
//!          and the third point of this  connexe triangle. When we <br>
//!          are on  a free edge TriCon==0  but the function return <br>
//!          the value of  the triangle in the  other side of Pivot <br>
//!          on the free edge.  Used to turn around a vertex. <br>
static /*instead*/  Standard_Integer TriConnex(OCNaroWrappers::OCIntPatch_Polyhedron^ thePolyh, Standard_Integer Triang, Standard_Integer Pivot, Standard_Integer Pedge, Standard_Integer& TriCon, Standard_Integer& OtherP) ;

~OCIntPatch_PolyhedronTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
