// File generated by CPPExt (CPP file)
//

#include "IntPatch_TheSurfFunction.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Adaptor3d/Adaptor3d_HSurfaceTool.h"
#include "../IntSurf/IntSurf_Quadric.h"
#include "../IntSurf/IntSurf_QuadricTool.h"
#include "../math/math_Vector.h"
#include "../math/math_Matrix.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Dir2d.h"


using namespace OCNaroWrappers;

OCIntPatch_TheSurfFunction::OCIntPatch_TheSurfFunction(IntPatch_TheSurfFunction* nativeHandle) : OCmath_FunctionSetWithDerivatives((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCIntPatch_TheSurfFunction::OCIntPatch_TheSurfFunction() : OCmath_FunctionSetWithDerivatives((OCDummy^)nullptr)

{
  nativeHandle = new IntPatch_TheSurfFunction();
}

OCIntPatch_TheSurfFunction::OCIntPatch_TheSurfFunction(OCNaroWrappers::OCAdaptor3d_HSurface^ PS, OCNaroWrappers::OCIntSurf_Quadric^ IS) : OCmath_FunctionSetWithDerivatives((OCDummy^)nullptr)

{
  nativeHandle = new IntPatch_TheSurfFunction(*((Handle_Adaptor3d_HSurface*)PS->Handle), *((IntSurf_Quadric*)IS->Handle));
}

OCIntPatch_TheSurfFunction::OCIntPatch_TheSurfFunction(OCNaroWrappers::OCIntSurf_Quadric^ IS) : OCmath_FunctionSetWithDerivatives((OCDummy^)nullptr)

{
  nativeHandle = new IntPatch_TheSurfFunction(*((IntSurf_Quadric*)IS->Handle));
}

 void OCIntPatch_TheSurfFunction::Set(OCNaroWrappers::OCAdaptor3d_HSurface^ PS)
{
  ((IntPatch_TheSurfFunction*)nativeHandle)->Set(*((Handle_Adaptor3d_HSurface*)PS->Handle));
}

 void OCIntPatch_TheSurfFunction::SetImplicitSurface(OCNaroWrappers::OCIntSurf_Quadric^ IS)
{
  ((IntPatch_TheSurfFunction*)nativeHandle)->SetImplicitSurface(*((IntSurf_Quadric*)IS->Handle));
}

 void OCIntPatch_TheSurfFunction::Set(Standard_Real Tolerance)
{
  ((IntPatch_TheSurfFunction*)nativeHandle)->Set(Tolerance);
}

 Standard_Integer OCIntPatch_TheSurfFunction::NbVariables()
{
  return ((IntPatch_TheSurfFunction*)nativeHandle)->NbVariables();
}

 Standard_Integer OCIntPatch_TheSurfFunction::NbEquations()
{
  return ((IntPatch_TheSurfFunction*)nativeHandle)->NbEquations();
}

 System::Boolean OCIntPatch_TheSurfFunction::Value(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F)
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_TheSurfFunction*)nativeHandle)->Value(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle)));
}

 System::Boolean OCIntPatch_TheSurfFunction::Derivatives(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_TheSurfFunction*)nativeHandle)->Derivatives(*((math_Vector*)X->Handle), *((math_Matrix*)D->Handle)));
}

 System::Boolean OCIntPatch_TheSurfFunction::Values(OCNaroWrappers::OCmath_Vector^ X, OCNaroWrappers::OCmath_Vector^ F, OCNaroWrappers::OCmath_Matrix^ D)
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_TheSurfFunction*)nativeHandle)->Values(*((math_Vector*)X->Handle), *((math_Vector*)F->Handle), *((math_Matrix*)D->Handle)));
}

 Standard_Real OCIntPatch_TheSurfFunction::Root()
{
  return ((IntPatch_TheSurfFunction*)nativeHandle)->Root();
}

 Standard_Real OCIntPatch_TheSurfFunction::Tolerance()
{
  return ((IntPatch_TheSurfFunction*)nativeHandle)->Tolerance();
}

OCgp_Pnt^ OCIntPatch_TheSurfFunction::Point()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntPatch_TheSurfFunction*)nativeHandle)->Point();
  return gcnew OCgp_Pnt(tmp);
}

 System::Boolean OCIntPatch_TheSurfFunction::IsTangent()
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_TheSurfFunction*)nativeHandle)->IsTangent());
}

OCgp_Vec^ OCIntPatch_TheSurfFunction::Direction3d()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((IntPatch_TheSurfFunction*)nativeHandle)->Direction3d();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Dir2d^ OCIntPatch_TheSurfFunction::Direction2d()
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((IntPatch_TheSurfFunction*)nativeHandle)->Direction2d();
  return gcnew OCgp_Dir2d(tmp);
}

OCAdaptor3d_HSurface^ OCIntPatch_TheSurfFunction::PSurface()
{
  Handle(Adaptor3d_HSurface) tmp = ((IntPatch_TheSurfFunction*)nativeHandle)->PSurface();
  return gcnew OCAdaptor3d_HSurface(&tmp);
}

OCIntSurf_Quadric^ OCIntPatch_TheSurfFunction::ISurface()
{
  IntSurf_Quadric* tmp = new IntSurf_Quadric();
  *tmp = ((IntPatch_TheSurfFunction*)nativeHandle)->ISurface();
  return gcnew OCIntSurf_Quadric(tmp);
}


