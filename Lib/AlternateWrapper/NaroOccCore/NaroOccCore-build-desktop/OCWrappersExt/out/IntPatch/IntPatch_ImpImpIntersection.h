// File generated by CPPExt (MPV)
//
#ifndef _IntPatch_ImpImpIntersection_OCWrappers_HeaderFile
#define _IntPatch_ImpImpIntersection_OCWrappers_HeaderFile

// include native header
#include <IntPatch_ImpImpIntersection.hxx>
#include "../Converter.h"


#include "IntPatch_SequenceOfPoint.h"
#include "IntPatch_SequenceOfLine.h"
#include "IntPatch_TheSOnBounds.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HSurface;
ref class OCAdaptor3d_TopolTool;
ref class OCIntPatch_Point;
ref class OCIntPatch_Line;


//! Implementation of the intersection between two <br>
//!          quadric patches : Plane, Cone, Cylinder or Sphere. <br>
public ref class OCIntPatch_ImpImpIntersection  {

protected:
  IntPatch_ImpImpIntersection* nativeHandle;
  OCIntPatch_ImpImpIntersection(OCDummy^) {};

public:
  property IntPatch_ImpImpIntersection* Handle
  {
    IntPatch_ImpImpIntersection* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntPatch_ImpImpIntersection(IntPatch_ImpImpIntersection* nativeHandle);

// Methods PUBLIC


OCIntPatch_ImpImpIntersection();


OCIntPatch_ImpImpIntersection(OCNaroWrappers::OCAdaptor3d_HSurface^ S1, OCNaroWrappers::OCAdaptor3d_TopolTool^ D1, OCNaroWrappers::OCAdaptor3d_HSurface^ S2, OCNaroWrappers::OCAdaptor3d_TopolTool^ D2, Standard_Real TolArc, Standard_Real TolTang);


 /*instead*/  void Perform(OCNaroWrappers::OCAdaptor3d_HSurface^ S1, OCNaroWrappers::OCAdaptor3d_TopolTool^ D1, OCNaroWrappers::OCAdaptor3d_HSurface^ S2, OCNaroWrappers::OCAdaptor3d_TopolTool^ D2, Standard_Real TolArc, Standard_Real TolTang) ;

//! Returns True if the calculus was succesfull. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns true if the is no intersection. <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! Returns True if the two patches are considered as <br>
//!          entierly tangent, i-e every restriction arc of one <br>
//!          patch is inside the geometric base of the otehr patch. <br>
 /*instead*/  System::Boolean TangentFaces() ;

//! Returns True when the TangentFaces returns True and the <br>
//!          normal vectors evaluated at a point on the first and the <br>
//!          second surface are opposite. <br>
//!          The exception DomainError is raised if TangentFaces <br>
//!          returns False. <br>
 /*instead*/  System::Boolean OppositeFaces() ;

//! Returns the number of "single" points. <br>
 /*instead*/  Standard_Integer NbPnts() ;

//! Returns the point of range Index. <br>
//!          An exception is raised if Index<=0 or Index>NbPnt. <br>
 /*instead*/  OCIntPatch_Point^ Point(Standard_Integer Index) ;

//! Returns the number of intersection lines. <br>
 /*instead*/  Standard_Integer NbLines() ;

//! Returns the line of range Index. <br>
//!          An exception is raised if Index<=0 or Index>NbLine. <br>
 /*instead*/  OCIntPatch_Line^ Line(Standard_Integer Index) ;

~OCIntPatch_ImpImpIntersection()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
