// File generated by CPPExt (CPP file)
//

#include "IntPatch_SequenceOfPoint.h"
#include "../Converter.h"
#include "IntPatch_Point.h"
#include "IntPatch_SequenceNodeOfSequenceOfPoint.h"


using namespace OCNaroWrappers;

OCIntPatch_SequenceOfPoint::OCIntPatch_SequenceOfPoint(IntPatch_SequenceOfPoint* nativeHandle) : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCIntPatch_SequenceOfPoint::OCIntPatch_SequenceOfPoint() : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  nativeHandle = new IntPatch_SequenceOfPoint();
}

OCIntPatch_SequenceOfPoint^ OCIntPatch_SequenceOfPoint::Assign(OCNaroWrappers::OCIntPatch_SequenceOfPoint^ Other)
{
  IntPatch_SequenceOfPoint* tmp = new IntPatch_SequenceOfPoint();
  *tmp = ((IntPatch_SequenceOfPoint*)nativeHandle)->Assign(*((IntPatch_SequenceOfPoint*)Other->Handle));
  return gcnew OCIntPatch_SequenceOfPoint(tmp);
}

 void OCIntPatch_SequenceOfPoint::Append(OCNaroWrappers::OCIntPatch_Point^ T)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->Append(*((IntPatch_Point*)T->Handle));
}

 void OCIntPatch_SequenceOfPoint::Append(OCNaroWrappers::OCIntPatch_SequenceOfPoint^ S)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->Append(*((IntPatch_SequenceOfPoint*)S->Handle));
}

 void OCIntPatch_SequenceOfPoint::Prepend(OCNaroWrappers::OCIntPatch_Point^ T)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->Prepend(*((IntPatch_Point*)T->Handle));
}

 void OCIntPatch_SequenceOfPoint::Prepend(OCNaroWrappers::OCIntPatch_SequenceOfPoint^ S)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->Prepend(*((IntPatch_SequenceOfPoint*)S->Handle));
}

 void OCIntPatch_SequenceOfPoint::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCIntPatch_Point^ T)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->InsertBefore(Index, *((IntPatch_Point*)T->Handle));
}

 void OCIntPatch_SequenceOfPoint::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCIntPatch_SequenceOfPoint^ S)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->InsertBefore(Index, *((IntPatch_SequenceOfPoint*)S->Handle));
}

 void OCIntPatch_SequenceOfPoint::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCIntPatch_Point^ T)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->InsertAfter(Index, *((IntPatch_Point*)T->Handle));
}

 void OCIntPatch_SequenceOfPoint::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCIntPatch_SequenceOfPoint^ S)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->InsertAfter(Index, *((IntPatch_SequenceOfPoint*)S->Handle));
}

OCIntPatch_Point^ OCIntPatch_SequenceOfPoint::First()
{
  IntPatch_Point* tmp = new IntPatch_Point();
  *tmp = ((IntPatch_SequenceOfPoint*)nativeHandle)->First();
  return gcnew OCIntPatch_Point(tmp);
}

OCIntPatch_Point^ OCIntPatch_SequenceOfPoint::Last()
{
  IntPatch_Point* tmp = new IntPatch_Point();
  *tmp = ((IntPatch_SequenceOfPoint*)nativeHandle)->Last();
  return gcnew OCIntPatch_Point(tmp);
}

 void OCIntPatch_SequenceOfPoint::Split(Standard_Integer Index, OCNaroWrappers::OCIntPatch_SequenceOfPoint^ Sub)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->Split(Index, *((IntPatch_SequenceOfPoint*)Sub->Handle));
}

OCIntPatch_Point^ OCIntPatch_SequenceOfPoint::Value(Standard_Integer Index)
{
  IntPatch_Point* tmp = new IntPatch_Point();
  *tmp = ((IntPatch_SequenceOfPoint*)nativeHandle)->Value(Index);
  return gcnew OCIntPatch_Point(tmp);
}

 void OCIntPatch_SequenceOfPoint::SetValue(Standard_Integer Index, OCNaroWrappers::OCIntPatch_Point^ I)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->SetValue(Index, *((IntPatch_Point*)I->Handle));
}

OCIntPatch_Point^ OCIntPatch_SequenceOfPoint::ChangeValue(Standard_Integer Index)
{
  IntPatch_Point* tmp = new IntPatch_Point();
  *tmp = ((IntPatch_SequenceOfPoint*)nativeHandle)->ChangeValue(Index);
  return gcnew OCIntPatch_Point(tmp);
}

 void OCIntPatch_SequenceOfPoint::Remove(Standard_Integer Index)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->Remove(Index);
}

 void OCIntPatch_SequenceOfPoint::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  ((IntPatch_SequenceOfPoint*)nativeHandle)->Remove(FromIndex, ToIndex);
}


