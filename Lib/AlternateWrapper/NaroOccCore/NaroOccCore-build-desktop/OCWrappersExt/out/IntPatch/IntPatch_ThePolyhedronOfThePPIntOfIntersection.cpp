// File generated by CPPExt (CPP file)
//

#include "IntPatch_ThePolyhedronOfThePPIntOfIntersection.h"
#include "../Converter.h"
#include "../Bnd/Bnd_HArray1OfBox.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "IntPatch_HSurfaceTool.h"
#include "IntPatch_HInterTool.h"
#include "../gp/gp_Pnt.h"
#include "../Bnd/Bnd_Box.h"
#include "../gp/gp_XYZ.h"


using namespace OCNaroWrappers;

OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::OCIntPatch_ThePolyhedronOfThePPIntOfIntersection(IntPatch_ThePolyhedronOfThePPIntOfIntersection* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::OCIntPatch_ThePolyhedronOfThePPIntOfIntersection(OCNaroWrappers::OCAdaptor3d_HSurface^ Surface, Standard_Integer nbdU, Standard_Integer nbdV) 
{
  nativeHandle = new IntPatch_ThePolyhedronOfThePPIntOfIntersection(*((Handle_Adaptor3d_HSurface*)Surface->Handle), nbdU, nbdV);
}

OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::OCIntPatch_ThePolyhedronOfThePPIntOfIntersection(OCNaroWrappers::OCAdaptor3d_HSurface^ Surface) 
{
  nativeHandle = new IntPatch_ThePolyhedronOfThePPIntOfIntersection(*((Handle_Adaptor3d_HSurface*)Surface->Handle));
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Perform(OCNaroWrappers::OCAdaptor3d_HSurface^ Surface, Standard_Integer nbdU, Standard_Integer nbdV)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Perform(*((Handle_Adaptor3d_HSurface*)Surface->Handle), nbdU, nbdV);
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::DeflectionOverEstimation(Standard_Real flec)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->DeflectionOverEstimation(flec);
}

 Standard_Real OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::DeflectionOnTriangle(OCNaroWrappers::OCAdaptor3d_HSurface^ Surface, Standard_Integer Index)
{
  return ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->DeflectionOnTriangle(*((Handle_Adaptor3d_HSurface*)Surface->Handle), Index);
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::UMinSingularity(System::Boolean Sing)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->UMinSingularity(OCConverter::BooleanToStandardBoolean(Sing));
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::UMaxSingularity(System::Boolean Sing)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->UMaxSingularity(OCConverter::BooleanToStandardBoolean(Sing));
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::VMinSingularity(System::Boolean Sing)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->VMinSingularity(OCConverter::BooleanToStandardBoolean(Sing));
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::VMaxSingularity(System::Boolean Sing)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->VMaxSingularity(OCConverter::BooleanToStandardBoolean(Sing));
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Size(Standard_Integer& nbdu, Standard_Integer& nbdv)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Size(nbdu, nbdv);
}

 Standard_Integer OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::NbTriangles()
{
  return ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->NbTriangles();
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Triangle(Standard_Integer Index, Standard_Integer& P1, Standard_Integer& P2, Standard_Integer& P3)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Triangle(Index, P1, P2, P3);
}

 Standard_Integer OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::TriConnex(Standard_Integer Triang, Standard_Integer Pivot, Standard_Integer Pedge, Standard_Integer& TriCon, Standard_Integer& OtherP)
{
  return ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->TriConnex(Triang, Pivot, Pedge, TriCon, OtherP);
}

 Standard_Integer OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::NbPoints()
{
  return ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->NbPoints();
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Point(OCNaroWrappers::OCgp_Pnt^ thePnt, Standard_Integer lig, Standard_Integer col, Standard_Real U, Standard_Real V)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Point(*((gp_Pnt*)thePnt->Handle), lig, col, U, V);
}

OCgp_Pnt^ OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Point(Standard_Integer Index, Standard_Real& U, Standard_Real& V)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Point(Index, U, V);
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Point(Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Point(Index);
  return gcnew OCgp_Pnt(tmp);
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Point(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ P)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Point(Index, *((gp_Pnt*)P->Handle));
}

OCBnd_Box^ OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Bounding()
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Bounding();
  return gcnew OCBnd_Box(tmp);
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::FillBounding()
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->FillBounding();
}

OCBnd_HArray1OfBox^ OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::ComponentsBounding()
{
  Handle(Bnd_HArray1OfBox) tmp = ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->ComponentsBounding();
  return gcnew OCBnd_HArray1OfBox(&tmp);
}

 Standard_Real OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::DeflectionOverEstimation()
{
  return ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->DeflectionOverEstimation();
}

 System::Boolean OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::HasUMinSingularity()
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->HasUMinSingularity());
}

 System::Boolean OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::HasUMaxSingularity()
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->HasUMaxSingularity());
}

 System::Boolean OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::HasVMinSingularity()
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->HasVMinSingularity());
}

 System::Boolean OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::HasVMaxSingularity()
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->HasVMaxSingularity());
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::PlaneEquation(Standard_Integer Triang, OCNaroWrappers::OCgp_XYZ^ NormalVector, Standard_Real& PolarDistance)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->PlaneEquation(Triang, *((gp_XYZ*)NormalVector->Handle), PolarDistance);
}

 System::Boolean OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Contain(Standard_Integer Triang, OCNaroWrappers::OCgp_Pnt^ ThePnt)
{
  return OCConverter::StandardBooleanToBoolean(((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Contain(Triang, *((gp_Pnt*)ThePnt->Handle)));
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Parameters(Standard_Integer Index, Standard_Real& U, Standard_Real& V)
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Parameters(Index, U, V);
}

 void OCIntPatch_ThePolyhedronOfThePPIntOfIntersection::Dump()
{
  ((IntPatch_ThePolyhedronOfThePPIntOfIntersection*)nativeHandle)->Dump();
}


