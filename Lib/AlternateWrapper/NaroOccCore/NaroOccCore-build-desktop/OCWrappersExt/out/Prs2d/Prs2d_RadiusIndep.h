// File generated by CPPExt (Transient)
//
#ifndef _Prs2d_RadiusIndep_OCWrappers_HeaderFile
#define _Prs2d_RadiusIndep_OCWrappers_HeaderFile

// include the wrapped class
#include <Prs2d_RadiusIndep.hxx>
#include "../Converter.h"

#include "../Graphic2d/Graphic2d_Line.h"

#include "../TCollection/TCollection_ExtendedString.h"
#include "../TShort/TShort_Array1OfShortReal.h"
#include "../gp/gp_Pnt2d.h"
#include "Prs2d_TypeOfRadius.h"


namespace OCNaroWrappers
{

ref class OCGraphic2d_GraphicObject;
ref class OCgp_Pnt2d;
ref class OCTCollection_ExtendedString;
ref class OCGraphic2d_Drawer;


//! Constructs the primitive Radius <br>
public ref class OCPrs2d_RadiusIndep : OCGraphic2d_Line {

protected:
  // dummy constructor;
  OCPrs2d_RadiusIndep(OCDummy^) : OCGraphic2d_Line((OCDummy^)nullptr) {};

public:

// constructor from native
OCPrs2d_RadiusIndep(Handle(Prs2d_RadiusIndep)* nativeHandle);

// Methods PUBLIC

//! Creates the radius of the circle <aCenter, aRad> passing through <br>
//!          the point <anAttachPnt1> on the circle <br>
OCPrs2d_RadiusIndep(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGO, OCNaroWrappers::OCgp_Pnt2d^ anAttachPnt, OCNaroWrappers::OCgp_Pnt2d^ aCenter, Standard_Real aRad, OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Real aLength, OCPrs2d_TypeOfRadius aTypeRad, Standard_Real aTxtScale);

//! allows to get the properties of the radius <br>
 /*instead*/  void Values(OCNaroWrappers::OCgp_Pnt2d^ anAttPnt, OCNaroWrappers::OCgp_Pnt2d^ aCenter, Standard_Real& aRad, OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Real& aLength, OCPrs2d_TypeOfRadius& aTypeRad, Standard_Real& aTxtScale) ;

//! Defines the text <br>
 /*instead*/  void SetText(OCNaroWrappers::OCTCollection_ExtendedString^ aTxt) ;

//! Defines the scale factor of text <br>
 /*instead*/  void SetTextScale(Standard_Real aTxtScale) ;

//! Sets the index of the font of this text to this dimension <br>
 /*instead*/  void SetTextFont(Standard_Integer aTF) ;

//! Sets the index of the font of the symbol to this dimension <br>
 /*instead*/  void SetFontOfSymb(Standard_Integer aFS) ;

//! Sets the flag for drawing additional symbol <br>
 /*instead*/  void DrawSymbol(System::Boolean isDraw) ;

//! Sets the ASCII code of the symbol <br>
 /*instead*/  void SetSymbolCode(Standard_Integer aCode) ;

//! Returns the index of the font of this text of this dimension <br>
 /*instead*/  Standard_Integer TextFont() ;

//! Returns the index of the font of the symbol of this dimension <br>
 /*instead*/  Standard_Integer FontOfSymb() ;

//! Return true if symbol is drawn, false - in otherwise <br>
 /*instead*/  System::Boolean IsDrawSymbol() ;

//! Return ASCII code of the symbol <br>
 /*instead*/  Standard_Integer SymbolCode() ;


virtual /*instead*/  void Save(Aspect_FStream& aFStream) ;

~OCPrs2d_RadiusIndep()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
