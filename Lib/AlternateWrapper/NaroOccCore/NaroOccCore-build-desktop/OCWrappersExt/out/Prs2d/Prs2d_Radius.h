// File generated by CPPExt (Transient)
//
#ifndef _Prs2d_Radius_OCWrappers_HeaderFile
#define _Prs2d_Radius_OCWrappers_HeaderFile

// include the wrapped class
#include <Prs2d_Radius.hxx>
#include "../Converter.h"

#include "Prs2d_Dimension.h"

#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Circ2d.h"
#include "Prs2d_TypeOfArrow.h"
#include "Prs2d_ArrowSide.h"


namespace OCNaroWrappers
{

ref class OCGraphic2d_GraphicObject;
ref class OCgp_Pnt2d;
ref class OCgp_Circ2d;
ref class OCTCollection_ExtendedString;
ref class OCGraphic2d_Drawer;


//! Constructs the primitive Radius <br>
public ref class OCPrs2d_Radius : OCPrs2d_Dimension {

protected:
  // dummy constructor;
  OCPrs2d_Radius(OCDummy^) : OCPrs2d_Dimension((OCDummy^)nullptr) {};

public:

// constructor from native
OCPrs2d_Radius(Handle(Prs2d_Radius)* nativeHandle);

// Methods PUBLIC

//! Creates the radius of the circle passing through <br>
//!          the point <anAttachPnt> <br>
OCPrs2d_Radius(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject, OCNaroWrappers::OCgp_Pnt2d^ anAttachPnt, OCNaroWrappers::OCgp_Circ2d^ aCircle, OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Real aTxtScale, Standard_Real anArrAngle, Standard_Real anArrLength, OCPrs2d_TypeOfArrow anArrType, OCPrs2d_ArrowSide anArrow, System::Boolean IsReverseArrow);

//! allows to get the properties of the diameter <br>
 /*instead*/  void Values(OCNaroWrappers::OCgp_Pnt2d^ anAttPnt, OCNaroWrappers::OCgp_Circ2d^ aCirc) ;


virtual /*instead*/  void Save(Aspect_FStream& aFStream) ;

~OCPrs2d_Radius()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
