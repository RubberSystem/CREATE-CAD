// File generated by CPPExt (CPP file)
//

#include "Prs2d_AspectText.h"
#include "../Converter.h"
#include "../Quantity/Quantity_Color.h"
#include "../Aspect/Aspect_FontStyle.h"


using namespace OCNaroWrappers;

OCPrs2d_AspectText::OCPrs2d_AspectText(Handle(Prs2d_AspectText)* nativeHandle) : OCPrs2d_AspectRoot((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Prs2d_AspectText(*nativeHandle);
}

OCPrs2d_AspectText::OCPrs2d_AspectText(OCQuantity_NameOfColor aColor, System::String^ aFont, Quantity_Length anHeight, OCAspect_TypeOfText aType, System::Boolean isUnderlined) : OCPrs2d_AspectRoot((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Prs2d_AspectText(new Prs2d_AspectText((Quantity_NameOfColor)aColor, OCConverter::StringToStandardCString(aFont), anHeight, (Aspect_TypeOfText)aType, OCConverter::BooleanToStandardBoolean(isUnderlined)));
}

OCPrs2d_AspectText::OCPrs2d_AspectText(OCNaroWrappers::OCQuantity_Color^ aColor, OCNaroWrappers::OCAspect_FontStyle^ aFont, OCAspect_TypeOfText aType, System::Boolean isUnderlined) : OCPrs2d_AspectRoot((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Prs2d_AspectText(new Prs2d_AspectText(*((Quantity_Color*)aColor->Handle), *((Aspect_FontStyle*)aFont->Handle), (Aspect_TypeOfText)aType, OCConverter::BooleanToStandardBoolean(isUnderlined)));
}

 void OCPrs2d_AspectText::SetColor(OCQuantity_NameOfColor aColor)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetColor((Quantity_NameOfColor)aColor);
}

 void OCPrs2d_AspectText::SetColor(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetColor(*((Quantity_Color*)aColor->Handle));
}

 void OCPrs2d_AspectText::SetFont(OCNaroWrappers::OCAspect_FontStyle^ aFont)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetFont(*((Aspect_FontStyle*)aFont->Handle));
}

 void OCPrs2d_AspectText::SetFont(OCAspect_TypeOfFont aFont)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetFont((Aspect_TypeOfFont)aFont);
}

 void OCPrs2d_AspectText::SetRelativeSlant(Quantity_PlaneAngle aSlant)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetRelativeSlant(aSlant);
}

 void OCPrs2d_AspectText::SetHeight(Quantity_Length anHeight, System::Boolean isCapsHeight)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetHeight(anHeight, OCConverter::BooleanToStandardBoolean(isCapsHeight));
}

 void OCPrs2d_AspectText::SetType(OCAspect_TypeOfText aType)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetType((Aspect_TypeOfText)aType);
}

 void OCPrs2d_AspectText::SetUnderlined(System::Boolean anIsUnderline)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetUnderlined(OCConverter::BooleanToStandardBoolean(anIsUnderline));
}

 void OCPrs2d_AspectText::Values(OCNaroWrappers::OCQuantity_Color^ aColor, OCNaroWrappers::OCAspect_FontStyle^ aFont, Quantity_PlaneAngle& aSlant, OCAspect_TypeOfText& aType, System::Boolean& isUnderlined)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->Values(*((Quantity_Color*)aColor->Handle), *((Aspect_FontStyle*)aFont->Handle), aSlant, (Aspect_TypeOfText&)aType, (Standard_Boolean&)(isUnderlined));
}

 Standard_Integer OCPrs2d_AspectText::FontIndex()
{
  return (*((Handle_Prs2d_AspectText*)nativeHandle))->FontIndex();
}

 Standard_Integer OCPrs2d_AspectText::ColorIndex()
{
  return (*((Handle_Prs2d_AspectText*)nativeHandle))->ColorIndex();
}

 void OCPrs2d_AspectText::SetFontIndex(Standard_Integer anInd)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetFontIndex(anInd);
}

 void OCPrs2d_AspectText::SetColorIndex(Standard_Integer anInd)
{
  (*((Handle_Prs2d_AspectText*)nativeHandle))->SetColorIndex(anInd);
}


