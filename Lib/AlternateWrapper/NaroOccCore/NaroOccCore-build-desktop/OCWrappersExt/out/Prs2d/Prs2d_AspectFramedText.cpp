// File generated by CPPExt (CPP file)
//

#include "Prs2d_AspectFramedText.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCPrs2d_AspectFramedText::OCPrs2d_AspectFramedText(Handle(Prs2d_AspectFramedText)* nativeHandle) : OCPrs2d_AspectRoot((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Prs2d_AspectFramedText(*nativeHandle);
}

OCPrs2d_AspectFramedText::OCPrs2d_AspectFramedText(OCQuantity_NameOfColor ColorInd, OCQuantity_NameOfColor FrameColorInd, OCAspect_WidthOfLine FrameWidthInd, OCAspect_TypeOfFont FontInd, Standard_ShortReal aSlant, Standard_ShortReal aHScale, Standard_ShortReal aWScale, System::Boolean isUnderlined) : OCPrs2d_AspectRoot((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Prs2d_AspectFramedText(new Prs2d_AspectFramedText((Quantity_NameOfColor)ColorInd, (Quantity_NameOfColor)FrameColorInd, (Aspect_WidthOfLine)FrameWidthInd, (Aspect_TypeOfFont)FontInd, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined)));
}

 void OCPrs2d_AspectFramedText::SetColorOfText(OCQuantity_NameOfColor aColor)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->SetColorOfText((Quantity_NameOfColor)aColor);
}

 void OCPrs2d_AspectFramedText::SetFrameColor(OCQuantity_NameOfColor aFrameColor)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->SetFrameColor((Quantity_NameOfColor)aFrameColor);
}

 void OCPrs2d_AspectFramedText::SetFrameWidth(OCAspect_WidthOfLine aFrameWidth)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->SetFrameWidth((Aspect_WidthOfLine)aFrameWidth);
}

 void OCPrs2d_AspectFramedText::SetFontOfText(OCAspect_TypeOfFont aFont)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->SetFontOfText((Aspect_TypeOfFont)aFont);
}

 void OCPrs2d_AspectFramedText::SetSlant(Standard_ShortReal aSlant)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->SetSlant(aSlant);
}

 void OCPrs2d_AspectFramedText::SetHScale(Standard_ShortReal aHScale)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->SetHScale(aHScale);
}

 void OCPrs2d_AspectFramedText::SetWScale(Standard_ShortReal aWScale)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->SetWScale(aWScale);
}

 void OCPrs2d_AspectFramedText::SetUnderlined(System::Boolean anIsUnderlined)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->SetUnderlined(OCConverter::BooleanToStandardBoolean(anIsUnderlined));
}

 void OCPrs2d_AspectFramedText::Values(OCQuantity_NameOfColor& aColorInd, OCQuantity_NameOfColor& aFrameColorInd, OCAspect_WidthOfLine& aFrameWidthInd, OCAspect_TypeOfFont& aFontInd, Standard_ShortReal& aSlant, Standard_ShortReal& aHScale, Standard_ShortReal& aWScale, System::Boolean& isUnderlined)
{
  (*((Handle_Prs2d_AspectFramedText*)nativeHandle))->Values((Quantity_NameOfColor&)aColorInd, (Quantity_NameOfColor&)aFrameColorInd, (Aspect_WidthOfLine&)aFrameWidthInd, (Aspect_TypeOfFont&)aFontInd, aSlant, aHScale, aWScale, (Standard_Boolean&)(isUnderlined));
}


