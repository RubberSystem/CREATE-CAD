// File generated by CPPExt (CPP file)
//

#include "Prs2d_AspectHidingText.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCPrs2d_AspectHidingText::OCPrs2d_AspectHidingText(Handle(Prs2d_AspectHidingText)* nativeHandle) : OCPrs2d_AspectRoot((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Prs2d_AspectHidingText(*nativeHandle);
}

OCPrs2d_AspectHidingText::OCPrs2d_AspectHidingText(OCQuantity_NameOfColor ColorInd, OCQuantity_NameOfColor HidingColorInd, OCQuantity_NameOfColor FrameColorInd, OCAspect_WidthOfLine FrameWidthInd, OCAspect_TypeOfFont FontInd, Standard_ShortReal aSlantInd, Standard_ShortReal aHScaleInd, Standard_ShortReal aWScaleInd, System::Boolean isUnderlined) : OCPrs2d_AspectRoot((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Prs2d_AspectHidingText(new Prs2d_AspectHidingText((Quantity_NameOfColor)ColorInd, (Quantity_NameOfColor)HidingColorInd, (Quantity_NameOfColor)FrameColorInd, (Aspect_WidthOfLine)FrameWidthInd, (Aspect_TypeOfFont)FontInd, aSlantInd, aHScaleInd, aWScaleInd, OCConverter::BooleanToStandardBoolean(isUnderlined)));
}

 void OCPrs2d_AspectHidingText::SetColorOfText(OCQuantity_NameOfColor aColorInd)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetColorOfText((Quantity_NameOfColor)aColorInd);
}

 void OCPrs2d_AspectHidingText::SetHidingColorOfText(OCQuantity_NameOfColor aHidColorInd)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetHidingColorOfText((Quantity_NameOfColor)aHidColorInd);
}

 void OCPrs2d_AspectHidingText::SetFrameColorOfText(OCQuantity_NameOfColor aFrameColorInd)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetFrameColorOfText((Quantity_NameOfColor)aFrameColorInd);
}

 void OCPrs2d_AspectHidingText::SetFrameWidthOfText(OCAspect_WidthOfLine aFrameWidthInd)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetFrameWidthOfText((Aspect_WidthOfLine)aFrameWidthInd);
}

 void OCPrs2d_AspectHidingText::SetFontOfText(OCAspect_TypeOfFont aFontInd)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetFontOfText((Aspect_TypeOfFont)aFontInd);
}

 void OCPrs2d_AspectHidingText::SetSlant(Standard_ShortReal aSlantInd)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetSlant(aSlantInd);
}

 void OCPrs2d_AspectHidingText::SetHScale(Standard_ShortReal aHScaleInd)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetHScale(aHScaleInd);
}

 void OCPrs2d_AspectHidingText::SetWScale(Standard_ShortReal aWScaleInd)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetWScale(aWScaleInd);
}

 void OCPrs2d_AspectHidingText::SetUnderlined(System::Boolean anIsUnderline)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->SetUnderlined(OCConverter::BooleanToStandardBoolean(anIsUnderline));
}

 void OCPrs2d_AspectHidingText::Values(OCQuantity_NameOfColor& ColorInd, OCQuantity_NameOfColor& HidingColorInd, OCQuantity_NameOfColor& FrameColorInd, OCAspect_WidthOfLine& FrameWidthInd, OCAspect_TypeOfFont& FontInd, Standard_ShortReal& aSlantInd, Standard_ShortReal& aHScaleInd, Standard_ShortReal& aWScaleInd, System::Boolean& isUnderlined)
{
  (*((Handle_Prs2d_AspectHidingText*)nativeHandle))->Values((Quantity_NameOfColor&)ColorInd, (Quantity_NameOfColor&)HidingColorInd, (Quantity_NameOfColor&)FrameColorInd, (Aspect_WidthOfLine&)FrameWidthInd, (Aspect_TypeOfFont&)FontInd, aSlantInd, aHScaleInd, aWScaleInd, (Standard_Boolean&)(isUnderlined));
}


