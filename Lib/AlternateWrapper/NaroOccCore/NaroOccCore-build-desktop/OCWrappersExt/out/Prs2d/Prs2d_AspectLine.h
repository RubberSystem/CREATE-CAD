// File generated by CPPExt (Transient)
//
#ifndef _Prs2d_AspectLine_OCWrappers_HeaderFile
#define _Prs2d_AspectLine_OCWrappers_HeaderFile

// include the wrapped class
#include <Prs2d_AspectLine.hxx>
#include "../Converter.h"

#include "Prs2d_AspectRoot.h"

#include "../Quantity/Quantity_Color.h"
#include "../Aspect/Aspect_TypeOfLine.h"
#include "../Aspect/Aspect_WidthOfLine.h"
#include "../Graphic2d/Graphic2d_TypeOfPolygonFilling.h"
#include "../Quantity/Quantity_NameOfColor.h"


namespace OCNaroWrappers
{

ref class OCQuantity_Color;


//! defines the attributes when drawing a line presentation <br>
public ref class OCPrs2d_AspectLine : OCPrs2d_AspectRoot {

protected:
  // dummy constructor;
  OCPrs2d_AspectLine(OCDummy^) : OCPrs2d_AspectRoot((OCDummy^)nullptr) {};

public:

// constructor from native
OCPrs2d_AspectLine(Handle(Prs2d_AspectLine)* nativeHandle);

// Methods PUBLIC

//! default constructor <br>
OCPrs2d_AspectLine();

//! Initializes the AspectLine defined values <br>
OCPrs2d_AspectLine(OCQuantity_NameOfColor aColor, OCAspect_TypeOfLine aType, OCAspect_WidthOfLine aWidth, OCQuantity_NameOfColor aInterColor, OCGraphic2d_TypeOfPolygonFilling aTypeFill, Standard_Integer aTiled, System::Boolean aDrawEdge);

//! Initializes the AspectLine defined values <br>
OCPrs2d_AspectLine(OCNaroWrappers::OCQuantity_Color^ aColor, OCAspect_TypeOfLine aType, OCAspect_WidthOfLine aWidth, OCNaroWrappers::OCQuantity_Color^ aInterColor, OCGraphic2d_TypeOfPolygonFilling aTypeFill, Standard_Integer aTileInd, System::Boolean aDrawEdge);

//! Modifies the Aspect by redefining a color <br>
 /*instead*/  void SetColor(OCQuantity_NameOfColor aColor) ;

//! Modifies the Aspect by redefining a color <br>
 /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor) ;

//! Modifies the Aspect by redefining a type of line <br>
 /*instead*/  void SetType(OCAspect_TypeOfLine aType) ;

//! Modifies the Aspect by redefining a width of line <br>
 /*instead*/  void SetWidth(OCAspect_WidthOfLine aWidth) ;

//! Modifies the Aspect by redefining a interior color <br>
 /*instead*/  void SetInterColor(OCQuantity_NameOfColor aColor) ;

//! Modifies the Aspect by redefining a interior color <br>
 /*instead*/  void SetInterColor(OCNaroWrappers::OCQuantity_Color^ aColor) ;

//! Modifies the Aspect Polygon by redefining its type of polygon filling <br>
 /*instead*/  void SetTypeOfFill(OCGraphic2d_TypeOfPolygonFilling aType) ;

//! Sets the tile of the Aspect Polygon <br>
 /*instead*/  void SetTile(Standard_Integer aTile) ;

//! Sets the flag <aDrawEdge> <br>
 /*instead*/  void SetDrawEdge(System::Boolean aDrawEdge) ;

//! Return the current values of this line <br>
 /*instead*/  void ValuesOfLine(OCNaroWrappers::OCQuantity_Color^ aColor, OCAspect_TypeOfLine& aType, OCAspect_WidthOfLine& aWidth) ;

//! Returns the current values of this closed line <br>
 /*instead*/  void ValuesOfPoly(OCNaroWrappers::OCQuantity_Color^ aColor, OCGraphic2d_TypeOfPolygonFilling& aTypeFill, Standard_Integer& aTile, System::Boolean& aDrawEdge) ;

//! Returns current color index according to the color aspect <br>
 /*instead*/  Standard_Integer ColorIndex() ;

//! Returns current type index according to the type aspect <br>
 /*instead*/  Standard_Integer TypeIndex() ;

//! Returns current width index according to the width aspect <br>
 /*instead*/  Standard_Integer WidthIndex() ;

//! Returns current color index according to the color aspect <br>
 /*instead*/  Standard_Integer InterColorIndex() ;

//! Sets current color index according to the color aspect <br>
 /*instead*/  void SetColorIndex(Standard_Integer anInd) ;

//! Sets current type index according to the type aspect <br>
 /*instead*/  void SetTypeIndex(Standard_Integer anInd) ;

//! Sets current width index according to the width aspect <br>
 /*instead*/  void SetWidthIndex(Standard_Integer anInd) ;

//! Sets current color index according to the color aspect <br>
 /*instead*/  void SetIntColorInd(Standard_Integer anInd) ;

~OCPrs2d_AspectLine()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
