// File generated by CPPExt (Transient)
//
#ifndef _Font_SystemFont_OCWrappers_HeaderFile
#define _Font_SystemFont_OCWrappers_HeaderFile

// include the wrapped class
#include <Font_SystemFont.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "Font_FontAspect.h"


namespace OCNaroWrappers
{

ref class OCTCollection_HAsciiString;


//! Structure for store of Font System Information <br>
public ref class OCFont_SystemFont : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCFont_SystemFont(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCFont_SystemFont(Handle(Font_SystemFont)* nativeHandle);

// Methods PUBLIC

//! Creates empty font object <br>
OCFont_SystemFont();

//! Creates Font object initialized with <FontName> as name <br>
//!         <FontAspect>.... TODO <br>
OCFont_SystemFont(OCNaroWrappers::OCTCollection_HAsciiString^ FontName, OCFont_FontAspect Aspect, OCNaroWrappers::OCTCollection_HAsciiString^ FilePath);

//! TODO <br>
OCFont_SystemFont(OCNaroWrappers::OCTCollection_HAsciiString^ XLFD, OCNaroWrappers::OCTCollection_HAsciiString^ FilePath);

//! Returns font family name <br>
 /*instead*/  OCTCollection_HAsciiString^ FontName() ;

//! Returns font file path <br>
//! Level: Public <br>
 /*instead*/  OCTCollection_HAsciiString^ FontPath() ;

//! Returns font aspect <br>
//! Level: Public <br>
 /*instead*/  OCFont_FontAspect FontAspect() ;

//! Returns font height <br>
//! If returned value is equal -1 it means that font is resizable <br>
//! Level: Public <br>
 /*instead*/  Standard_Integer FontHeight() ;


 /*instead*/  System::Boolean IsValid() ;

~OCFont_SystemFont()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
