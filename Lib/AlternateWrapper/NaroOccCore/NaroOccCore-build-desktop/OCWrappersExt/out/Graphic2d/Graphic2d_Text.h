// File generated by CPPExt (Transient)
//
#ifndef _Graphic2d_Text_OCWrappers_HeaderFile
#define _Graphic2d_Text_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic2d_Text.hxx>
#include "../Converter.h"

#include "Graphic2d_Primitive.h"

#include "../Aspect/Aspect_TypeOfText.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "Graphic2d_TypeOfAlignment.h"


namespace OCNaroWrappers
{

ref class OCGraphic2d_GraphicObject;
ref class OCTCollection_ExtendedString;
ref class OCGraphic2d_Drawer;


//! The primitive Text <br>
public ref class OCGraphic2d_Text : OCGraphic2d_Primitive {

protected:
  // dummy constructor;
  OCGraphic2d_Text(OCDummy^) : OCGraphic2d_Primitive((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic2d_Text(Handle(Graphic2d_Text)* nativeHandle);

// Methods PUBLIC

//! Creates a text in a graphic object <aGraphicObject> <br>
//!	    The text is <aText>. <br>
//!	    The reference point is <X>, <Y>. <br>
//!	    The orientation angle is <anAngle>. <br>
//!	    The type of text is <aType> and must be one of : <br>
//!		Aspect_TOT_SOLID, <br>
//!		Aspect_TOT_OUTLINE, <br>
//!	    The scale factor apply to the original font size, <br>
//!	    Angles are measured counterclockwise with 0 radian <br>
//!	    at 3 o'clock. <br>
//!  Warning: a text can be orientable,slantable,zoomable or outlinable <br>
//! only when this options are enable regardless of the graphic driver. <br>
//! i.e: Xw driver does not,but Xdps or PS driver does. <br>
OCGraphic2d_Text(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject, OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Real X, Standard_Real Y, Quantity_PlaneAngle anAngle, OCAspect_TypeOfText aType, Quantity_Factor aScale);

//! Sets the font index for the text <me>. <br>
//!  Warning: Note that the index 0 can be undefined as a FontMapEntry, <br>
//!        in this case the default system text font is taken. <br>
 /*instead*/  void SetFontIndex(Standard_Integer anIndex) ;

//! Sets the slant angle of the text <me>. <br>
 /*instead*/  void SetSlant(Quantity_PlaneAngle aSlant) ;

//! The text <me> follows the scale factor of the view <br>
//!          if the flag is Standard_True. <br>
 /*instead*/  void SetZoomable(System::Boolean aFlag) ;

//! Sets the Device space offset of the text <me>. <br>
 /*instead*/  void SetOffset(Standard_Real aDx, Standard_Real aDy) ;

//! Enable/Disable text underline. <br>
 /*instead*/  void SetUnderline(System::Boolean isUnderlined) ;

//! Sets the  text alignment. <br>
 /*instead*/  void SetAlignment(OCGraphic2d_TypeOfAlignment anAlignment) ;

//! Compute text size depending of a required bounding box, <br>
//!	    Adjust the text position depending of the text origine <br>
//!	    and base line if "Adjust" is TRUE, <br>
//!	    Expand the text when the Width is smaller that the <br>
//!	    Fit Width if "Expand" is TRUE. <br>
//!          and returns Standard_True if the current Driver used is <br>
//!	    enable to fit the text size. <br>
//!  Warning: The fit computation is apply only if the corresponding <br>
//! dimension is > 0. <br>
virtual /*instead*/  System::Boolean Fit(Quantity_Length aWidth, Quantity_Length aHeight, System::Boolean Adjust, System::Boolean Expand) ;

//! Trunc the text when the Width of the text is greater <br>
//!	    that the defined Width Max, <br>
//!          and returns Standard_True if the current Driver used is <br>
//!	    enable to trunc the text size. <br>
virtual /*instead*/  System::Boolean Trunc(Quantity_Length aWidth) ;

//! Returns Standard_True if the Text <me> follows <br>
//!          the scale factor of the view. <br>
 /*instead*/  System::Boolean IsZoomable() ;

//! Returns Standard_True if the Text <me> is underlined. <br>
 /*instead*/  System::Boolean IsUnderlined() ;

//! Returns Standard_True if the current Driver used is enabled <br>
//!	   to get the right size in the <br>
//!	   world size parameter <aWidth>,<aHeight> <br>
//!	   depending of the attributes of the text and the current scale <br>
//!	   of the view. <br>
 /*instead*/  System::Boolean TextSize(Quantity_Length& aWidth, Quantity_Length& aHeight) ;

//! Returns Standard_True if the current Driver used is enabled <br>
//!	   to get the right size and text offsets in the <br>
//!	   world size parameter <aWidth>,<aHeight>,<anXoffset>,<anYoffset> <br>
//!	   depending of the attributes of the text and the current scale <br>
//!	   of the view. <br>
//!	    NOTE that the text offsets defines the relative position of the <br>
//!	   of the text string origin from the lower left corner of the text <br>
//!	   boundary limits. <br>
virtual /*instead*/  System::Boolean TextSize(Quantity_Length& aWidth, Quantity_Length& aHeight, Quantity_Length& anXoffset, Quantity_Length& anYoffset) ;

//! Returns the text position. <br>
 /*instead*/  void Position(Quantity_Length& X, Quantity_Length& Y) ;

//! Returns the text Offset. <br>
 /*instead*/  void Offset(Standard_Real& X, Standard_Real& Y) ;

//! Returns the text slant. <br>
 /*instead*/  Quantity_PlaneAngle Slant() ;

//! Returns the text orientation. <br>
 /*instead*/  Quantity_PlaneAngle Angle() ;

//! Returns the text font index. <br>
 /*instead*/  Standard_Integer FontIndex() ;

//! Returns the text scale. <br>
 /*instead*/  Quantity_Factor Scale() ;

//! Returns the text alignment. <br>
 /*instead*/  OCGraphic2d_TypeOfAlignment Alignment() ;

//! Returns the text string <br>
 /*instead*/  OCTCollection_ExtendedString^ GetText() ;

//! Returns the type text <br>
 /*instead*/  OCAspect_TypeOfText GetType() ;


virtual /*instead*/  void Save(Aspect_FStream& aFStream) ;

~OCGraphic2d_Text()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
