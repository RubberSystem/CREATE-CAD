// File generated by CPPExt (CPP file)
//

#include "Graphic2d_Drawer.h"
#include "../Converter.h"
#include "../Aspect/Aspect_Driver.h"
#include "../Aspect/Aspect_WindowDriver.h"
#include "../PlotMgt/PlotMgt_PlotterDriver.h"
#include "../Standard/Standard_Transient.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../TShort/TShort_Array1OfShortReal.h"
#include "../TShort/TShort_HArray1OfShortReal.h"


using namespace OCNaroWrappers;

OCGraphic2d_Drawer::OCGraphic2d_Drawer(Handle(Graphic2d_Drawer)* nativeHandle) : OCStandard_Transient((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Graphic2d_Drawer(*nativeHandle);
}

OCGraphic2d_Drawer::OCGraphic2d_Drawer() : OCStandard_Transient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Graphic2d_Drawer(new Graphic2d_Drawer());
}

 void OCGraphic2d_Drawer::SetDriver(OCNaroWrappers::OCAspect_Driver^ aDriver)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetDriver(*((Handle_Aspect_Driver*)aDriver->Handle));
}

OCAspect_Driver^ OCGraphic2d_Drawer::Driver()
{
  Handle(Aspect_Driver) tmp = (*((Handle_Graphic2d_Drawer*)nativeHandle))->Driver();
  return gcnew OCAspect_Driver(&tmp);
}

 System::Boolean OCGraphic2d_Drawer::IsWindowDriver()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->IsWindowDriver());
}

OCAspect_WindowDriver^ OCGraphic2d_Drawer::WindowDriver()
{
  Handle(Aspect_WindowDriver) tmp = (*((Handle_Graphic2d_Drawer*)nativeHandle))->WindowDriver();
  return gcnew OCAspect_WindowDriver(&tmp);
}

 System::Boolean OCGraphic2d_Drawer::IsPlotterDriver()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->IsPlotterDriver());
}

OCPlotMgt_PlotterDriver^ OCGraphic2d_Drawer::PlotterDriver()
{
  Handle(PlotMgt_PlotterDriver) tmp = (*((Handle_Graphic2d_Drawer*)nativeHandle))->PlotterDriver();
  return gcnew OCPlotMgt_PlotterDriver(&tmp);
}

 void OCGraphic2d_Drawer::SetDrawPrecision(Standard_Real aPrecision, Standard_Real aCoefficient, OCAspect_TypeOfDeflection aType)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetDrawPrecision(aPrecision, aCoefficient, (Aspect_TypeOfDeflection)aType);
}

 void OCGraphic2d_Drawer::DrawPrecision(Standard_ShortReal& aPrecision, Standard_ShortReal& aCoefficient, OCAspect_TypeOfDeflection& aType)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawPrecision(aPrecision, aCoefficient, (Aspect_TypeOfDeflection&)aType);
}

 void OCGraphic2d_Drawer::SetTextPrecision(Standard_ShortReal aPrecision)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetTextPrecision(aPrecision);
}

 Standard_ShortReal OCGraphic2d_Drawer::TextPrecision()
{
  return (*((Handle_Graphic2d_Drawer*)nativeHandle))->TextPrecision();
}

 void OCGraphic2d_Drawer::SetValues(Standard_Real XF, Standard_Real YF, Standard_Real SF, Standard_Real XT, Standard_Real YT, Standard_Real ST, Standard_Real ZF)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetValues(XF, YF, SF, XT, YT, ST, ZF);
}

 void OCGraphic2d_Drawer::Values(Standard_ShortReal& XF, Standard_ShortReal& YF, Standard_ShortReal& SF, Standard_ShortReal& XT, Standard_ShortReal& YT, Standard_ShortReal& ST, Standard_ShortReal& ZF)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->Values(XF, YF, SF, XT, YT, ST, ZF);
}

 void OCGraphic2d_Drawer::SetOverride(System::Boolean aValue)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetOverride(OCConverter::BooleanToStandardBoolean(aValue));
}

 void OCGraphic2d_Drawer::SetOverrideColor(Standard_Integer anIndex)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetOverrideColor(anIndex);
}

 void OCGraphic2d_Drawer::SetOffSet(Standard_Integer anOffSet)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetOffSet(anOffSet);
}

 void OCGraphic2d_Drawer::SetLineAttrib(Standard_Integer ColorIndex, Standard_Integer TypeIndex, Standard_Integer WidthIndex)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetLineAttrib(ColorIndex, TypeIndex, WidthIndex);
}

 void OCGraphic2d_Drawer::SetMarkerAttrib(Standard_Integer ColorIndex, Standard_Integer WidthIndex, System::Boolean FillMarker)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetMarkerAttrib(ColorIndex, WidthIndex, OCConverter::BooleanToStandardBoolean(FillMarker));
}

 void OCGraphic2d_Drawer::SetPolyAttrib(Standard_Integer ColorIndex, Standard_Integer TileIndex, System::Boolean DrawEdge)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetPolyAttrib(ColorIndex, TileIndex, OCConverter::BooleanToStandardBoolean(DrawEdge));
}

 void OCGraphic2d_Drawer::SetHidingPolyAttrib(Standard_Integer HidingColorIndex, Standard_Integer FrameColorIndex, Standard_Integer FrameTypeIndex, Standard_Integer FrameWidthIndex)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetHidingPolyAttrib(HidingColorIndex, FrameColorIndex, FrameTypeIndex, FrameWidthIndex);
}

 void OCGraphic2d_Drawer::SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex, Standard_ShortReal aSlant, Standard_ShortReal aHScale, Standard_ShortReal aWScale, System::Boolean isUnderlined)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetTextAttrib(ColorIndex, FontIndex, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined));
}

 void OCGraphic2d_Drawer::SetHidingTextAttrib(Standard_Integer ColorIndex, Standard_Integer HidingColorIndex, Standard_Integer FrameColorIndex, Standard_Integer FrameWidthIndex, Standard_Integer FontIndex, Standard_ShortReal aSlant, Standard_ShortReal aHScale, Standard_ShortReal aWScale, System::Boolean isUnderlined)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetHidingTextAttrib(ColorIndex, HidingColorIndex, FrameColorIndex, FrameWidthIndex, FontIndex, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined));
}

 void OCGraphic2d_Drawer::SetFramedTextAttrib(Standard_Integer ColorIndex, Standard_Integer FrameColorIndex, Standard_Integer FrameWidthIndex, Standard_Integer FontIndex, Standard_ShortReal aSlant, Standard_ShortReal aHScale, Standard_ShortReal aWScale, System::Boolean isUnderlined)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetFramedTextAttrib(ColorIndex, FrameColorIndex, FrameWidthIndex, FontIndex, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined));
}

 System::Boolean OCGraphic2d_Drawer::IsKnownImage(OCNaroWrappers::OCStandard_Transient^ anImageId)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->IsKnownImage(*((Handle_Standard_Transient*)anImageId->Handle)));
}

 void OCGraphic2d_Drawer::ClearImage(OCNaroWrappers::OCStandard_Transient^ anImageId)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->ClearImage(*((Handle_Standard_Transient*)anImageId->Handle));
}

 void OCGraphic2d_Drawer::DrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY);
}

 void OCGraphic2d_Drawer::ClearImageFile(System::String^ aName)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->ClearImageFile(OCConverter::StringToStandardCString(aName));
}

 void OCGraphic2d_Drawer::DrawImageFile(System::String^ aName, Standard_ShortReal aX, Standard_ShortReal aY, Quantity_Factor aScale)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawImageFile(OCConverter::StringToStandardCString(aName), aX, aY, aScale);
}

 void OCGraphic2d_Drawer::FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->FillAndDrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY, aWidth, aHeight, anArrayOfPixels);
}

 void OCGraphic2d_Drawer::FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer anIndexOfLine, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->FillAndDrawImage(*((Handle_Standard_Transient*)anImageId->Handle), aX, aY, anIndexOfLine, aWidth, aHeight, anArrayOfPixels);
}

 void OCGraphic2d_Drawer::GetMapFrom(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal& x2, Standard_ShortReal& y2)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->GetMapFrom(x1, y1, x2, y2);
}

 void OCGraphic2d_Drawer::GetMapFromTo(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal& x2, Standard_ShortReal& y2)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->GetMapFromTo(x1, y1, x2, y2);
}

 System::Boolean OCGraphic2d_Drawer::GetTextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->GetTextSize(*((TCollection_ExtendedString*)aText->Handle), aWidth, aHeight));
}

 System::Boolean OCGraphic2d_Drawer::GetTextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_ShortReal& anXoffset, Standard_ShortReal& anYoffset)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->GetTextSize(*((TCollection_ExtendedString*)aText->Handle), aWidth, aHeight, anXoffset, anYoffset));
}

 System::Boolean OCGraphic2d_Drawer::GetFontSize(Standard_ShortReal& aHeight, Standard_ShortReal& aBheight, Standard_ShortReal& aSlant)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->GetFontSize(aHeight, aBheight, aSlant));
}

 System::Boolean OCGraphic2d_Drawer::GetImageSize(System::String^ aFileName, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->GetImageSize(OCConverter::StringToStandardCString(aFileName), aWidth, aHeight));
}

 System::Boolean OCGraphic2d_Drawer::GetImageSize(System::String^ aFileName, Standard_Integer& aWidth, Standard_Integer& aHeight)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->GetImageSize(OCConverter::StringToStandardCString(aFileName), aWidth, aHeight));
}

 void OCGraphic2d_Drawer::UnMapFromTo(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal& x2, Standard_ShortReal& y2)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->UnMapFromTo(x1, y1, x2, y2);
}

 Standard_ShortReal OCGraphic2d_Drawer::Convert(Standard_ShortReal aValue)
{
  return (*((Handle_Graphic2d_Drawer*)nativeHandle))->Convert(aValue);
}

 Standard_ShortReal OCGraphic2d_Drawer::Convert(Standard_Integer aValue)
{
  return (*((Handle_Graphic2d_Drawer*)nativeHandle))->Convert(aValue);
}

 Standard_ShortReal OCGraphic2d_Drawer::ConvertMapToFrom(Standard_ShortReal x)
{
  return (*((Handle_Graphic2d_Drawer*)nativeHandle))->ConvertMapToFrom(x);
}

 Standard_ShortReal OCGraphic2d_Drawer::Scale()
{
  return (*((Handle_Graphic2d_Drawer*)nativeHandle))->Scale();
}

 void OCGraphic2d_Drawer::DrawSegment(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal x2, Standard_ShortReal y2)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawSegment(x1, y1, x2, y2);
}

 void OCGraphic2d_Drawer::DrawPolyline(Standard_Real aDeltaX, Standard_Real aDeltaY, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawPolyline(aDeltaX, aDeltaY, *((TShort_Array1OfShortReal*)aListX->Handle), *((TShort_Array1OfShortReal*)aListY->Handle));
}

 void OCGraphic2d_Drawer::DrawPolygon(Standard_Real aDeltaX, Standard_Real aDeltaY, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawPolygon(aDeltaX, aDeltaY, *((TShort_Array1OfShortReal*)aListX->Handle), *((TShort_Array1OfShortReal*)aListY->Handle));
}

 void OCGraphic2d_Drawer::DrawArc(Standard_Real aDeltaX, Standard_Real aDeltaY, Standard_ShortReal aRadius, Standard_ShortReal angle1, Standard_ShortReal angle2)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawArc(aDeltaX, aDeltaY, aRadius, angle1, angle2);
}

 void OCGraphic2d_Drawer::DrawPolyArc(Standard_Real aDeltaX, Standard_Real aDeltaY, Standard_ShortReal aRadius, Standard_ShortReal angle1, Standard_ShortReal angle2)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawPolyArc(aDeltaX, aDeltaY, aRadius, angle1, angle2);
}

 void OCGraphic2d_Drawer::DrawInfiniteLine(Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal dx, Standard_ShortReal dy)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawInfiniteLine(x, y, dx, dy);
}

 void OCGraphic2d_Drawer::DrawMarker(Standard_Integer anindex, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal awidth, Standard_ShortReal anheight, Standard_ShortReal angle)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawMarker(anindex, x, y, awidth, anheight, angle);
}

 void OCGraphic2d_Drawer::DrawText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, OCAspect_TypeOfText aType)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawText(*((TCollection_ExtendedString*)aText->Handle), x, y, angle, (Aspect_TypeOfText)aType);
}

 void OCGraphic2d_Drawer::DrawPolyText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal margin, OCAspect_TypeOfText aType)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawPolyText(*((TCollection_ExtendedString*)aText->Handle), x, y, angle, margin, (Aspect_TypeOfText)aType);
}

 void OCGraphic2d_Drawer::DrawFramedText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal margin, OCAspect_TypeOfText aType)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->DrawFramedText(*((TCollection_ExtendedString*)aText->Handle), x, y, angle, margin, (Aspect_TypeOfText)aType);
}

 void OCGraphic2d_Drawer::MapInfiniteLineFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal dx, Standard_ShortReal dy)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapInfiniteLineFromTo(x, y, dx, dy);
}

 void OCGraphic2d_Drawer::MapSegmentFromTo(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal x2, Standard_ShortReal y2, Standard_Integer aMode)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapSegmentFromTo(x1, y1, x2, y2, aMode);
}

 void OCGraphic2d_Drawer::MapMarkerFromTo(Standard_Integer anindex, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal awidth, Standard_ShortReal anheight, Standard_ShortReal angle, Standard_Integer aMode)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapMarkerFromTo(anindex, x, y, awidth, anheight, angle, aMode);
}

 void OCGraphic2d_Drawer::MapMarkersFromTo(Standard_Integer index, OCNaroWrappers::OCTShort_HArray1OfShortReal^ x, OCNaroWrappers::OCTShort_HArray1OfShortReal^ y, Standard_ShortReal awidth, Standard_ShortReal anheight, Standard_ShortReal angle, Standard_Integer aMode)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapMarkersFromTo(index, *((Handle_TShort_HArray1OfShortReal*)x->Handle), *((Handle_TShort_HArray1OfShortReal*)y->Handle), awidth, anheight, angle, aMode);
}

 void OCGraphic2d_Drawer::MapPolylineFromTo(OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY, Standard_Integer aNumber)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapPolylineFromTo(*((TShort_Array1OfShortReal*)aListX->Handle), *((TShort_Array1OfShortReal*)aListY->Handle), aNumber);
}

 void OCGraphic2d_Drawer::MapPolylineFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_Integer aMode)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapPolylineFromTo(x, y, aMode);
}

 void OCGraphic2d_Drawer::MapPolygonFromTo(OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY, Standard_Integer aNumber)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapPolygonFromTo(*((TShort_Array1OfShortReal*)aListX->Handle), *((TShort_Array1OfShortReal*)aListY->Handle), aNumber);
}

 void OCGraphic2d_Drawer::MapPolygonFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_Integer aMode)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapPolygonFromTo(x, y, aMode);
}

 void OCGraphic2d_Drawer::MapTextFromTo(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal aDeltax, Standard_ShortReal aDeltay, OCAspect_TypeOfText aType)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapTextFromTo(*((TCollection_ExtendedString*)aText->Handle), x, y, angle, aDeltax, aDeltay, (Aspect_TypeOfText)aType);
}

 void OCGraphic2d_Drawer::MapPolyTextFromTo(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal margin, Standard_ShortReal aDeltax, Standard_ShortReal aDeltay, OCAspect_TypeOfText aType)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapPolyTextFromTo(*((TCollection_ExtendedString*)aText->Handle), x, y, angle, margin, aDeltax, aDeltay, (Aspect_TypeOfText)aType);
}

 void OCGraphic2d_Drawer::MapFramedTextFromTo(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal margin, Standard_ShortReal aDeltax, Standard_ShortReal aDeltay, OCAspect_TypeOfText aType)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapFramedTextFromTo(*((TCollection_ExtendedString*)aText->Handle), x, y, angle, margin, aDeltax, aDeltay, (Aspect_TypeOfText)aType);
}

 void OCGraphic2d_Drawer::MapArcFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal aRadius, Standard_ShortReal angle1, Standard_ShortReal angle2, Standard_Integer aMode)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapArcFromTo(x, y, aRadius, angle1, angle2, aMode);
}

 void OCGraphic2d_Drawer::MapPolyArcFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal aRadius, Standard_ShortReal angle1, Standard_ShortReal angle2, Standard_Integer aMode)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->MapPolyArcFromTo(x, y, aRadius, angle1, angle2, aMode);
}

 void OCGraphic2d_Drawer::SetRejection(System::Boolean aClipFlag)
{
  (*((Handle_Graphic2d_Drawer*)nativeHandle))->SetRejection(OCConverter::BooleanToStandardBoolean(aClipFlag));
}

 System::Boolean OCGraphic2d_Drawer::IsIn(Standard_ShortReal aMinX, Standard_ShortReal aMaxX, Standard_ShortReal aMinY, Standard_ShortReal aMaxY)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Drawer*)nativeHandle))->IsIn(aMinX, aMaxX, aMinY, aMaxY));
}


