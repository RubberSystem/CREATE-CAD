// File generated by CPPExt (Transient)
//
#ifndef _Graphic2d_Drawer_OCWrappers_HeaderFile
#define _Graphic2d_Drawer_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic2d_Drawer.hxx>
#include "../Converter.h"

#include "../Standard/Standard_Transient.h"

#include "../Aspect/Aspect_TypeOfDeflection.h"
#include "../Aspect/Aspect_TypeOfText.h"


namespace OCNaroWrappers
{

ref class OCAspect_Driver;
ref class OCAspect_WindowDriver;
ref class OCPlotMgt_PlotterDriver;
ref class OCStandard_Transient;
ref class OCTCollection_ExtendedString;
ref class OCTShort_Array1OfShortReal;
ref class OCTShort_HArray1OfShortReal;


//! A Drawer groups all conversion methods. <br>
public ref class OCGraphic2d_Drawer : OCStandard_Transient {

protected:
  // dummy constructor;
  OCGraphic2d_Drawer(OCDummy^) : OCStandard_Transient((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic2d_Drawer(Handle(Graphic2d_Drawer)* nativeHandle);

// Methods PUBLIC

//! A drawer is : <br>
//!      - a driver <br>
//!      - a "map from" and a "map to" <br>
//!      - attributes <br>
OCGraphic2d_Drawer();

//! Associates the driver <ADriver> to the drawer <me>. <br>
 /*instead*/  void SetDriver(OCNaroWrappers::OCAspect_Driver^ aDriver) ;

//! Returns the associated driver. <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  OCAspect_Driver^ Driver() ;

//! Returns TRUE if the driver is a window driver. <br>
 /*instead*/  System::Boolean IsWindowDriver() ;

//! Returns the associated window driver. <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined or is not a WindowDriver. <br>
 /*instead*/  OCAspect_WindowDriver^ WindowDriver() ;

//! Returns TRUE if the driver is a plotter driver. <br>
 /*instead*/  System::Boolean IsPlotterDriver() ;

//! Returns the associated plotter driver. <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined or is not a PlotterDriver <br>
 /*instead*/  OCPlotMgt_PlotterDriver^ PlotterDriver() ;

//! Sets the chordal deviation. <br>
//!          <aPrecision> is the chordal deviation when the type of <br>
//!          deflection is Aspect_TOD_ABSOLUTE. <br>
//!          <aCoefficient> is used when when the type of <br>
//!          deflection is Aspect_TOD_RELATIVE. <br>
//!      TypeOfDeflection is : <br>
//!              Aspect_TOD_RELATIVE <br>
//!              Aspect_TOD_ABSOLUTE <br>
//!      TypeOfDeflection defines if the maximal chordal deviation <br>
//!      used when drawing an object is absolute or relative to the <br>
//!      size of the object. <br>
//!  Warning: Specify a chordal deviation that is smaller than the <br>
//!          workstation pixel size will not improve the display, <br>
//!          but will slow the drawing. <br>
 /*instead*/  void SetDrawPrecision(Standard_Real aPrecision, Standard_Real aCoefficient, OCAspect_TypeOfDeflection aType) ;

//! Returns the chordal deviation. <br>
 /*instead*/  void DrawPrecision(Standard_ShortReal& aPrecision, Standard_ShortReal& aCoefficient, OCAspect_TypeOfDeflection& aType) ;

//! Sets the Text precision in METER <br>
//! Any text is displayed only if his height is greater than <br>
 /*instead*/  void SetTextPrecision(Standard_ShortReal aPrecision) ;

//! Returns the Text precision in METER. <br>
 /*instead*/  Standard_ShortReal TextPrecision() ;

//! Defines the "map from" and the "map to" of the drawer. <br>
//!          The "map from" is defined by the viewmapping. <br>
//!          The "map to" is defined by the device. <br>
//!          example : the X window for a X driver. <br>
 /*instead*/  void SetValues(Standard_Real XF, Standard_Real YF, Standard_Real SF, Standard_Real XT, Standard_Real YT, Standard_Real ST, Standard_Real ZF) ;

//! Returns the "map from" and the "map to". <br>
 /*instead*/  void Values(Standard_ShortReal& XF, Standard_ShortReal& YF, Standard_ShortReal& SF, Standard_ShortReal& XT, Standard_ShortReal& YT, Standard_ShortReal& ST, Standard_ShortReal& ZF) ;

//! Manages the highlight, if the highlight color index <br>
//!          is defined (No default value) <br>
 /*instead*/  void SetOverride(System::Boolean aValue) ;

//! Sets the highlight color index. <br>
//!  Warning: No default value. <br>
 /*instead*/  void SetOverrideColor(Standard_Integer anIndex) ;

//! Specifies an offset applied to the original color <br>
//!      index when drawing a primitives, those already created <br>
//!      and the future one. <br>
//!  Warning: To reset the real color of the primitives when drawing <br>
//!      then this method is called with <anOffSet> = 0. <br>
 /*instead*/  void SetOffSet(Standard_Integer anOffSet) ;

//! Methods to define the Current Line Attributes <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
virtual /*instead*/  void SetLineAttrib(Standard_Integer ColorIndex, Standard_Integer TypeIndex, Standard_Integer WidthIndex) ;

//! Methods to define the Current Marker Attributes <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void SetMarkerAttrib(Standard_Integer ColorIndex, Standard_Integer WidthIndex, System::Boolean FillMarker) ;

//! Methods to define the Current polygon Attributes <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void SetPolyAttrib(Standard_Integer ColorIndex, Standard_Integer TileIndex, System::Boolean DrawEdge) ;

//! Methods to define the Current hiding polygon Attributes <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void SetHidingPolyAttrib(Standard_Integer HidingColorIndex, Standard_Integer FrameColorIndex, Standard_Integer FrameTypeIndex, Standard_Integer FrameWidthIndex) ;

//! Methods to define the Current Text Attributes <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex, Standard_ShortReal aSlant, Standard_ShortReal aHScale, Standard_ShortReal aWScale, System::Boolean isUnderlined) ;

//! Methods to define the Current Hiding Text Attributes <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void SetHidingTextAttrib(Standard_Integer ColorIndex, Standard_Integer HidingColorIndex, Standard_Integer FrameColorIndex, Standard_Integer FrameWidthIndex, Standard_Integer FontIndex, Standard_ShortReal aSlant, Standard_ShortReal aHScale, Standard_ShortReal aWScale, System::Boolean isUnderlined) ;

//! Methods to define the Current Framed Text Attributes <br>
//!  Category: Methods to manage the attributes <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void SetFramedTextAttrib(Standard_Integer ColorIndex, Standard_Integer FrameColorIndex, Standard_Integer FrameWidthIndex, Standard_Integer FontIndex, Standard_ShortReal aSlant, Standard_ShortReal aHScale, Standard_ShortReal aWScale, System::Boolean isUnderlined) ;

//! Returns Standard_True if the associated driver <br>
//!          have stored the image and Standard_False if not. <br>
//!          For example, returns Standard_True if the associated <br>
//!          driver is a X Driver. <br>
//!  Category: Methods to manage the images <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  System::Boolean IsKnownImage(OCNaroWrappers::OCStandard_Transient^ anImageId) ;

//! Clears the image in the associated driver. <br>
//!  Category: Methods to manage the images <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void ClearImage(OCNaroWrappers::OCStandard_Transient^ anImageId) ;

//! Draws the image in the associated driver. <br>
//!          <aX>, <aY> is the center of the image. <br>
//!  Category: Methods to manage the images <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY) ;

//! Clears the image file in the associated driver. <br>
//!  Category: Methods to manage the images <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void ClearImageFile(System::String^ aName) ;

//! Draws the image in the associated driver. <br>
//!          <aX>, <aY> is the center of the image. <br>
//!          <aScale> = (if the image is zoomable) <br>
//!              initial scale factor of the image * <br>
//!              scale factor of the view. <br>
//!          <aScale> = (if the image is not zoomable) <br>
//!              initial scale factor of the image <br>
//!  Category: Methods to manage the images <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawImageFile(System::String^ aName, Standard_ShortReal aX, Standard_ShortReal aY, Quantity_Factor aScale) ;

//! Stores a complete image and draws it in the associated <br>
//!          driver. <br>
//!          <aX>, <aY> is ???? <br>
//!  Category: Methods to manage the images <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels) ;

//! Stores a line of an image and draws it in the associated <br>
//!          driver. <br>
//!          <aX>, <aY> is ???? <br>
//!  Category: Methods to manage the images <br>
//!  Warning: Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer anIndexOfLine, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels) ;


//!  Category: Convert methods <br>
 /*instead*/  void GetMapFrom(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal& x2, Standard_ShortReal& y2) ;


 /*instead*/  void GetMapFromTo(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal& x2, Standard_ShortReal& y2) ;

//! Get text size in world space with the current text <br>
//!         attributes and returns TRUE if the driver is enabled <br>
//!         to get the right size (WindowDriver ONLY!). <br>
//!  Category: Convert methods <br>
virtual /*instead*/  System::Boolean GetTextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight) ;

//! Get text size and offsets <br>
//!         in world space with the current text <br>
//!         attributes and returns TRUE if the driver is enabled <br>
//!         to get the right size (WindowDriver ONLY!). <br>
//!          NOTE that the text offsets defines the relative position of the <br>
//!         of the text string origin from the lower left corner of the text <br>
//!         boundary limits. <br>
//!  Warning : SetTextAttrib(...) must be call before. <br>
//!  Category: Convert methods <br>
 /*instead*/  System::Boolean GetTextSize(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight, Standard_ShortReal& anXoffset, Standard_ShortReal& anYoffset) ;

//! Get font height,baseline height and slant <br>
//!         in world space with the current text <br>
//!         attributes and returns TRUE if the driver is enabled <br>
//!       to get the right size (WindowDriver ONLY!). <br>
//!  Warning : SetTextAttrib(...) must be call before. <br>
//!  Category: Convert methods <br>
 /*instead*/  System::Boolean GetFontSize(Standard_ShortReal& aHeight, Standard_ShortReal& aBheight, Standard_ShortReal& aSlant) ;

//! Get image size in world space <br>
//!         and returns TRUE if the driver is enabled <br>
//!         to get the right size (WindowDriver ONLY!). <br>
 /*instead*/  System::Boolean GetImageSize(System::String^ aFileName, Standard_ShortReal& aWidth, Standard_ShortReal& aHeight) ;

//! Get image size in pixel space <br>
//!         and returns TRUE if the driver is enabled <br>
//!         to get the right size (WindowDriver ONLY!). <br>
 /*instead*/  System::Boolean GetImageSize(System::String^ aFileName, Standard_Integer& aWidth, Standard_Integer& aHeight) ;


 /*instead*/  void UnMapFromTo(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal& x2, Standard_ShortReal& y2) ;


 /*instead*/  Standard_ShortReal Convert(Standard_ShortReal aValue) ;


 /*instead*/  Standard_ShortReal Convert(Standard_Integer aValue) ;


 /*instead*/  Standard_ShortReal ConvertMapToFrom(Standard_ShortReal x) ;


 /*instead*/  Standard_ShortReal Scale() ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawSegment(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal x2, Standard_ShortReal y2) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawPolyline(Standard_Real aDeltaX, Standard_Real aDeltaY, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawPolygon(Standard_Real aDeltaX, Standard_Real aDeltaY, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawArc(Standard_Real aDeltaX, Standard_Real aDeltaY, Standard_ShortReal aRadius, Standard_ShortReal angle1, Standard_ShortReal angle2) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawPolyArc(Standard_Real aDeltaX, Standard_Real aDeltaY, Standard_ShortReal aRadius, Standard_ShortReal angle1, Standard_ShortReal angle2) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawInfiniteLine(Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal dx, Standard_ShortReal dy) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawMarker(Standard_Integer anindex, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal awidth, Standard_ShortReal anheight, Standard_ShortReal angle) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, OCAspect_TypeOfText aType) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawPolyText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal margin, OCAspect_TypeOfText aType) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void DrawFramedText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal margin, OCAspect_TypeOfText aType) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapInfiniteLineFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal dx, Standard_ShortReal dy) ;

//!  RRaises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
virtual /*instead*/  void MapSegmentFromTo(Standard_ShortReal x1, Standard_ShortReal y1, Standard_ShortReal x2, Standard_ShortReal y2, Standard_Integer aMode) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapMarkerFromTo(Standard_Integer anindex, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal awidth, Standard_ShortReal anheight, Standard_ShortReal angle, Standard_Integer aMode) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapMarkersFromTo(Standard_Integer index, OCNaroWrappers::OCTShort_HArray1OfShortReal^ x, OCNaroWrappers::OCTShort_HArray1OfShortReal^ y, Standard_ShortReal awidth, Standard_ShortReal anheight, Standard_ShortReal angle, Standard_Integer aMode) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapPolylineFromTo(OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY, Standard_Integer aNumber) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapPolylineFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_Integer aMode) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapPolygonFromTo(OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY, Standard_Integer aNumber) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapPolygonFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_Integer aMode) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
virtual /*instead*/  void MapTextFromTo(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal aDeltax, Standard_ShortReal aDeltay, OCAspect_TypeOfText aType) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapPolyTextFromTo(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal margin, Standard_ShortReal aDeltax, Standard_ShortReal aDeltay, OCAspect_TypeOfText aType) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapFramedTextFromTo(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal angle, Standard_ShortReal margin, Standard_ShortReal aDeltax, Standard_ShortReal aDeltay, OCAspect_TypeOfText aType) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
virtual /*instead*/  void MapArcFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal aRadius, Standard_ShortReal angle1, Standard_ShortReal angle2, Standard_Integer aMode) ;

//! Raises DrawerDefinitionError if the <br>
//!          associated driver is not defined. <br>
 /*instead*/  void MapPolyArcFromTo(Standard_ShortReal x, Standard_ShortReal y, Standard_ShortReal aRadius, Standard_ShortReal angle1, Standard_ShortReal angle2, Standard_Integer aMode) ;

//! Sets the clipping flag with <aClipFlag> value. <br>
 /*instead*/  void SetRejection(System::Boolean aClipFlag) ;

//! Returns Standard_True if the given min max intersects <br>
//!          with the drawer space. <br>
//!          Called by the method Draw of a primitive. <br>
//!          IsIn permits the rejection of the primitive only <br>
//!          if the Clipping flag is TRUE. <br>
//!          When the Clipping flag is FALSE,this method returns <br>
//!          always TRUE. <br>
 /*instead*/  System::Boolean IsIn(Standard_ShortReal aMinX, Standard_ShortReal aMaxX, Standard_ShortReal aMinY, Standard_ShortReal aMaxY) ;

~OCGraphic2d_Drawer()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
