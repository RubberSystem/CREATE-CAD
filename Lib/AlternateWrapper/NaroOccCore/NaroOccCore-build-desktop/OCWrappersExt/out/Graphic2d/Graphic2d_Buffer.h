// File generated by CPPExt (Transient)
//
#ifndef _Graphic2d_Buffer_OCWrappers_HeaderFile
#define _Graphic2d_Buffer_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic2d_Buffer.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../Aspect/Aspect_TypeOfDrawMode.h"
#include "Graphic2d_SequenceOfPrimitives.h"
#include "Graphic2d_SequenceOfGraphicObject.h"


namespace OCNaroWrappers
{

ref class OCAspect_WindowDriver;
ref class OCGraphic2d_View;
ref class OCGraphic2d_GraphicObject;
ref class OCGraphic2d_Primitive;
ref class OCGraphic2d_ViewMapping;


//! This class constructs a 2D graphic buffer in a view.   It <br>
//! manages a set of graphic objects and/or primitives. <br>
//! To draw the buffer, the following elements are required: <br>
//! -   the override color <br>
//! -   the font <br>
//! -   a solid line type <br>
//! -   thickness of 1 pixel. <br>
//! With this category , the user can drag the geometry <br>
//! stored in the buffer without changing the fixed <br>
//! background.   This mechanism is reserved for the <br>
//! special driver Aspect_WindowDriver:   if no other <br>
//! driver has been defined, nothing will be drawn.   Both <br>
//! this driver and view mapping are used to draw the buffer. <br>
//! Warning <br>
//! -   This class manages dragging only.   It does not <br>
//!   manage "sketching" or "rubberbanding".   For example: <br>
//!   -   There is no empty constructor for this <br>
//!    primitive.   Therefore we must create a primitive <br>
//!    in a dummy object simply to add this primitive to the buffer. <br>
//!   -   There is no Buffer->Add (anArrayOfPoints) <br>
//!    method.   Therefor it is not possible to add <br>
//!    shapes to the buffer. <br>
//!   -   There are no Polyline->ChangeApoint () nor <br>
//!    Circle->ChangeRadius () methods.   Therefore <br>
//!    we must call the primitive's destructor to modify <br>
//!    the definition of one primitive in a buffer. <br>
//! -   The Graphic2d_Image class is a primitive.   For <br>
//!   this class, we replace the definition of the image <br>
//!   with a rectangle with the same size and the same position. <br>
//! -   You can add or remove primitives to the buffer <br>
//!   after creating and displaying it again. <br>
public ref class OCGraphic2d_Buffer : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCGraphic2d_Buffer(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic2d_Buffer(Handle(Graphic2d_Buffer)* nativeHandle);

// Methods PUBLIC

//!	Creates an empty graphic buffer in the view <aView>. <br>
//!		A graphic buffer manages a set of graphic objects <br>
//!		and/or primitives. <br>
//!		A buffer color and font index can be defined, <br>
//!		in place of the default overrideColor or systemFont. <br>
//!		When the drawmode is REPLACE the buffer is drawn with <br>
//!		the right color and background drawing is used for <br>
//!		restoring it at Erase() time. <br>
//!		When the drawmode is XOR the buffer is drawn or erase <br>
//!		with an optimal color depending of the background color <br>
//!		but some side effects can appears depending of <br>
//!		background drawing pixels values. <br>
OCGraphic2d_Buffer(OCNaroWrappers::OCGraphic2d_View^ aView, Quantity_Length aPivotX, Quantity_Length aPivotY, Standard_Integer aWidthIndex, Standard_Integer aColorIndex, Standard_Integer aFontIndex, OCAspect_TypeOfDrawMode aDrawMode);

//!	Adds the graphic object <anObject> in the graphic <br>
//!		buffer <me>. <br>
 /*instead*/  void Add(OCNaroWrappers::OCGraphic2d_GraphicObject^ anObject) ;

//!	Adds the primitive <aPrimitive> in the graphic <br>
//!		buffer <me>. <br>
 /*instead*/  void Add(OCNaroWrappers::OCGraphic2d_Primitive^ aPrimitive) ;

//!     Removes the object <anObject> from the graphic <br>
//!              buffer <me>. <br>
 /*instead*/  void Remove(OCNaroWrappers::OCGraphic2d_GraphicObject^ anObject) ;

//!     Removes the primitive <aPrimitive> from the graphic <br>
//!              buffer <me>. <br>
 /*instead*/  void Remove(OCNaroWrappers::OCGraphic2d_Primitive^ aPrimitive) ;

//!	Clears the graphic buffer <me>. <br>
//!		Removes all the primitives from the graphic buffer <me>. <br>
 /*instead*/  void Clear() ;

//!	Updates the default buffer color with a new <br>
//!		color index defines in the user ColorMap. <br>
//!         	Update the default buffer font with a new <br>
//!		font index defines in the user FontMap. <br>
//!		Update the default buffer drawmode with <br>
//!		REPLACE or XOR . <br>
//!		You can specify the width index <br>
//!		- -1 draw all lines with the largest width <br>
//!		  defined in the buffer <me> <br>
//!		- 0 draw all lines with the default width <br>
//!		  defined in the driver (1 pixel) <br>
//!		- draw all lines with the specified width <br>
//!		  <aWidthIndex> <br>
//!		You can specify the color index <br>
//!		- -1 draw all primitives with the color of <br>
//!		  the first primitive color defined in the buffer. <br>
//!		- 0 draw all primitives with the default color. <br>
//!		You can specify the font index <br>
//!		- -1 draw all text primitives with the font of <br>
//!		  the first primitive text defined in the buffer. <br>
//!		- 0 draw all text primitives with the default font. <br>
//!  Warning:	The buffer is redisplayed again if it was posted. <br>
 /*instead*/  void SetAttrib(Standard_Integer aWidthIndex, Standard_Integer aColorIndex, Standard_Integer aFontIndex, OCAspect_TypeOfDrawMode aDrawMode) ;

//!	Updates the buffer pivot position. <br>
//!  Warning:	The buffer is redisplayed again if it was posted. <br>
 /*instead*/  void SetPivot(Quantity_Length aPivotX, Quantity_Length aPivotY) ;

//!	Updates the buffer pivot position with the actual position. <br>
 /*instead*/  void SetPivot() ;

//!	Moves the graphic buffer <me> at the specified <br>
//!		position. The new position of the buffer is : <br>
//!		(<aPivotX> + <aDeltaX>, <aPivotY> + <aDeltaY>) <br>
 /*instead*/  void Move(Quantity_Length aDeltaX, Quantity_Length aDeltaY) ;

//!	Rotates the graphic buffer <me> with the specified <br>
//!		absolute counter clockwise angle from the pivot X axis. <br>
 /*instead*/  void Rotate(Quantity_PlaneAngle anAngle) ;

//!	Scales the graphic buffer <me> with the specified <br>
//!		absolute scale factor from the pivot point. <br>
 /*instead*/  void Scale(Quantity_Factor aFactor) ;

//!	Returns the view which manages the graphic buffer <me>. <br>
 /*instead*/  OCGraphic2d_View^ View() ;

//!	Returns Standard_True if the graphic buffer <me> <br>
//!		is empty, Standard_False if not. <br>
 /*instead*/  System::Boolean IsEmpty() ;

//!	Returns Standard_True if the primitive <aPrimitive> <br>
//!		is in the graphic buffer <me>, Standard_False if not. <br>
 /*instead*/  System::Boolean IsIn(OCNaroWrappers::OCGraphic2d_Primitive^ aPrimitive) ;

//!	Returns Standard_True if the graphic object <anObject> <br>
//!		is in the graphic buffer <me>, Standard_False if not. <br>
 /*instead*/  System::Boolean IsIn(OCNaroWrappers::OCGraphic2d_GraphicObject^ anObject) ;

//!	Post the graphic buffer in the current View driver <br>
//! and display it. <br>
//!  Warning: The view driver must be defined and of type WindowDriver <br>
//! or nothing is drawn . <br>
 /*instead*/  void Post() ;

//!	Post the graphic buffer in a View driver and display it. <br>
 /*instead*/  void Post(OCNaroWrappers::OCAspect_WindowDriver^ aDriver, OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale) ;

//!	Unpost the graphic buffer from the view and erase it. <br>
 /*instead*/  void UnPost() ;

//!	Returns Standard_True if the graphic buffer <me> <br>
//!		is posted in the view, Standard_False if not. <br>
 /*instead*/  System::Boolean IsPosted() ;

//!	Returns the value of the rotation angle of the <br>
//!		graphic buffer <me>. <br>
 /*instead*/  Quantity_PlaneAngle Angle() ;

//!	Returns the value of the scale factor of the <br>
//!		graphic buffer <me>. <br>
 /*instead*/  Quantity_Factor Scale() ;

//!	Returns the actual value of the X pivot point. <br>
//!		of the graphic buffer <me>. <br>
 /*instead*/  Quantity_Length Xpivot() ;

//!	Returns the actual value of the Y pivot point. <br>
//!		of the graphic buffer <me>. <br>
 /*instead*/  Quantity_Length Ypivot() ;

~OCGraphic2d_Buffer()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
