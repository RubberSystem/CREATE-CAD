// File generated by CPPExt (Transient)
//
#ifndef _Graphic2d_FramedText_OCWrappers_HeaderFile
#define _Graphic2d_FramedText_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic2d_FramedText.hxx>
#include "../Converter.h"

#include "Graphic2d_Text.h"

#include "../Aspect/Aspect_TypeOfText.h"


namespace OCNaroWrappers
{

ref class OCGraphic2d_GraphicObject;
ref class OCTCollection_ExtendedString;
ref class OCGraphic2d_Drawer;


//! The class defines the primitive FramedText <br>
public ref class OCGraphic2d_FramedText : OCGraphic2d_Text {

protected:
  // dummy constructor;
  OCGraphic2d_FramedText(OCDummy^) : OCGraphic2d_Text((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic2d_FramedText(Handle(Graphic2d_FramedText)* nativeHandle);

// Methods PUBLIC

//! Creates a framed text in a graphic object <aGraphicObject> <br>
//!	    The text is <aText>. <br>
//!	    The reference point is <X>, <Y>. <br>
//!	    The orientation angle is <anAngle>. <br>
//!          The margin ratio is <aMargin>,defines the proportional <br>
//!          margin between the text height and the outline frame. <br>
//!	    The type of text is <aType> and must be one of : <br>
//!		Aspect_TOT_SOLID, <br>
//!		Aspect_TOT_OUTLINE, <br>
//!          The scale factor apply to the original font size, <br>
//!	    Angles are measured counterclockwise with 0 radian <br>
//!	    at 3 o'clock. <br>
//! <br>
//!  Warning: a text can be orientable,slantable,zoomable or outlinable <br>
//! only when this options are enable regardless of the graphic driver. <br>
//! i.e: Xw driver does not,but Xdps or PS driver does. <br>
OCGraphic2d_FramedText(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject, OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Real X, Standard_Real Y, Quantity_PlaneAngle anAngle, Quantity_Ratio aMargin, OCAspect_TypeOfText aType, Quantity_Factor aScale);

//! Sets the color index for the frame of the text <me>. <br>
//!          default color is 0 (the same color that the text). <br>
 /*instead*/  void SetFrameColorIndex(Standard_Integer anIndex) ;

//! Sets the width index for the frame of the text <me>. <br>
//!          default width is 0 (1 pixel out line frame is drawn). <br>
 /*instead*/  void SetFrameWidthIndex(Standard_Integer anIndex) ;

//! Defines the size of the text according to a bounding <br>
//! box. If Adjust corresponds to TRUE, text positioning <br>
//! depends on the text origin and bottom line. The <br>
//! method returns Standard_True if the current Driver is <br>
//! compatible with the text size. <br>
//! Warning <br>
//! Fit computation is executed only if the dimension is > 0. <br>
virtual /*instead*/  System::Boolean Fit(Quantity_Length aWidth, Quantity_Length aHeight, System::Boolean Adjust, System::Boolean Expand) override;

//! Trunc the text when the Width of the text is greater <br>
//!          that the defined Width Max, <br>
//!          and returns Standard_True if the current Driver used is <br>
//!          enable to trunc the text size. <br>
virtual /*instead*/  System::Boolean Trunc(Quantity_Length aWidth) override;

//! Returns Standard_True if the current Driver used is enabled <br>
//!         to get the right size and framed text offsets in the <br>
//!         world size parameter <aWidth>,<aHeight>,<anXoffset>,<anYoffset> <br>
//!         depending of the attributes of the text and the current scale <br>
//!         of the view. <br>
//!          NOTE that the text offsets defines the relative position of the <br>
//!         of the text string origin from the lower left corner of the framed text <br>
//!         boundary limits. <br>
virtual /*instead*/  System::Boolean TextSize(Quantity_Length& aWidth, Quantity_Length& aHeight, Quantity_Length& anXoffset, Quantity_Length& anYoffset) override;

//! Returns the text margin. <br>
 /*instead*/  Quantity_Ratio Margin() ;

//! Returns the text frame color index. <br>
 /*instead*/  Standard_Integer FrameColorIndex() ;

//! Returns the text frame width index. <br>
 /*instead*/  Standard_Integer FrameWidthIndex() ;


virtual /*instead*/  void Save(Aspect_FStream& aFStream) override;

~OCGraphic2d_FramedText()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
