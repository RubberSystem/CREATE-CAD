// File generated by CPPExt (CPP file)
//

#include "Graphic2d_TransientManager.h"
#include "../Converter.h"
#include "Graphic2d_View.h"
#include "../Aspect/Aspect_WindowDriver.h"
#include "Graphic2d_ViewMapping.h"
#include "Graphic2d_Primitive.h"
#include "Graphic2d_GraphicObject.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../gp/gp_GTrsf2d.h"


using namespace OCNaroWrappers;

OCGraphic2d_TransientManager::OCGraphic2d_TransientManager(Handle(Graphic2d_TransientManager)* nativeHandle) : OCGraphic2d_Drawer((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Graphic2d_TransientManager(*nativeHandle);
}

OCGraphic2d_TransientManager::OCGraphic2d_TransientManager(OCNaroWrappers::OCGraphic2d_View^ aView) : OCGraphic2d_Drawer((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Graphic2d_TransientManager(new Graphic2d_TransientManager(*((Handle_Graphic2d_View*)aView->Handle)));
}

OCGraphic2d_TransientManager::OCGraphic2d_TransientManager(Graphic2d_ViewPtr aView) : OCGraphic2d_Drawer((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Graphic2d_TransientManager(new Graphic2d_TransientManager(aView));
}

 System::Boolean OCGraphic2d_TransientManager::BeginDraw(OCNaroWrappers::OCAspect_WindowDriver^ aDriver, System::Boolean ClearBefore)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_TransientManager*)nativeHandle))->BeginDraw(*((Handle_Aspect_WindowDriver*)aDriver->Handle), OCConverter::BooleanToStandardBoolean(ClearBefore)));
}

 System::Boolean OCGraphic2d_TransientManager::BeginDraw(OCNaroWrappers::OCAspect_WindowDriver^ aDriver, OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale, System::Boolean ClearBefore)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_TransientManager*)nativeHandle))->BeginDraw(*((Handle_Aspect_WindowDriver*)aDriver->Handle), *((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), aXPosition, aYPosition, aScale, OCConverter::BooleanToStandardBoolean(ClearBefore)));
}

 void OCGraphic2d_TransientManager::EndDraw(System::Boolean Synchronize)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->EndDraw(OCConverter::BooleanToStandardBoolean(Synchronize));
}

 System::Boolean OCGraphic2d_TransientManager::Restore(OCNaroWrappers::OCAspect_WindowDriver^ aDriver)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_TransientManager*)nativeHandle))->Restore(*((Handle_Aspect_WindowDriver*)aDriver->Handle)));
}

 System::Boolean OCGraphic2d_TransientManager::RestoreArea(OCNaroWrappers::OCAspect_WindowDriver^ aDriver)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_TransientManager*)nativeHandle))->RestoreArea(*((Handle_Aspect_WindowDriver*)aDriver->Handle)));
}

 void OCGraphic2d_TransientManager::Draw(OCNaroWrappers::OCGraphic2d_Primitive^ aPrimitive)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->Draw(*((Handle_Graphic2d_Primitive*)aPrimitive->Handle));
}

 void OCGraphic2d_TransientManager::Draw(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->Draw(*((Handle_Graphic2d_GraphicObject*)aGraphicObject->Handle));
}

 void OCGraphic2d_TransientManager::DrawElement(OCNaroWrappers::OCGraphic2d_Primitive^ aPrimitive, Standard_Integer anIndex)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawElement(*((Handle_Graphic2d_Primitive*)aPrimitive->Handle), anIndex);
}

 void OCGraphic2d_TransientManager::DrawPickedElements(OCNaroWrappers::OCGraphic2d_Primitive^ aPrimitive)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawPickedElements(*((Handle_Graphic2d_Primitive*)aPrimitive->Handle));
}

 void OCGraphic2d_TransientManager::DrawVertex(OCNaroWrappers::OCGraphic2d_Primitive^ aPrimitive, Standard_Integer anIndex)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawVertex(*((Handle_Graphic2d_Primitive*)aPrimitive->Handle), anIndex);
}

 void OCGraphic2d_TransientManager::BeginPrimitive(OCAspect_TypeOfPrimitive aType, Standard_Integer aSize)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->BeginPrimitive((Aspect_TypeOfPrimitive)aType, aSize);
}

 void OCGraphic2d_TransientManager::ClosePrimitive()
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->ClosePrimitive();
}

 void OCGraphic2d_TransientManager::DrawSegment(Quantity_Length X1, Quantity_Length Y1, Quantity_Length X2, Quantity_Length Y2)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawSegment(X1, Y1, X2, Y2);
}

 void OCGraphic2d_TransientManager::DrawInfiniteLine(Quantity_Length X, Quantity_Length Y, Quantity_Length Dx, Quantity_Length Dy)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawInfiniteLine(X, Y, Dx, Dy);
}

 void OCGraphic2d_TransientManager::DrawArc(Quantity_Length Xc, Quantity_Length Yc, Quantity_Length aRadius, Quantity_PlaneAngle anAngle1, Quantity_PlaneAngle anAngle2)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawArc(Xc, Yc, aRadius, anAngle1, anAngle2);
}

 void OCGraphic2d_TransientManager::DrawPolyArc(Quantity_Length Xc, Quantity_Length Yc, Quantity_Length aRadius, Quantity_PlaneAngle anAngle1, Quantity_PlaneAngle anAngle2)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawPolyArc(Xc, Yc, aRadius, anAngle1, anAngle2);
}

 void OCGraphic2d_TransientManager::DrawPoint(Quantity_Length X, Quantity_Length Y)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawPoint(X, Y);
}

 void OCGraphic2d_TransientManager::DrawMarker(Standard_Integer anIndex, Quantity_Length X, Quantity_Length Y, Quantity_Length aWidth, Quantity_Length anHeight, Quantity_PlaneAngle anAngle)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawMarker(anIndex, X, Y, aWidth, anHeight, anAngle);
}

 void OCGraphic2d_TransientManager::DrawText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Quantity_Length X, Quantity_Length Y, Quantity_PlaneAngle anAngle, Standard_Real aDeltaX, Standard_Real aDeltaY, OCAspect_TypeOfText aType, OCGraphic2d_TypeOfAlignment anAlignment)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawText(*((TCollection_ExtendedString*)aText->Handle), X, Y, anAngle, aDeltaX, aDeltaY, (Aspect_TypeOfText)aType, (Graphic2d_TypeOfAlignment)anAlignment);
}

 void OCGraphic2d_TransientManager::DrawPolyText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Quantity_Length X, Quantity_Length Y, Quantity_PlaneAngle anAngle, Quantity_Ratio aMargin, Standard_Real aDeltaX, Standard_Real aDeltaY, OCAspect_TypeOfText aType, OCGraphic2d_TypeOfAlignment anAlignment)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawPolyText(*((TCollection_ExtendedString*)aText->Handle), X, Y, anAngle, aMargin, aDeltaX, aDeltaY, (Aspect_TypeOfText)aType, (Graphic2d_TypeOfAlignment)anAlignment);
}

 void OCGraphic2d_TransientManager::DrawFramedText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Quantity_Length X, Quantity_Length Y, Quantity_PlaneAngle anAngle, Quantity_Ratio aMargin, Standard_Real aDeltaX, Standard_Real aDeltaY, OCAspect_TypeOfText aType, OCGraphic2d_TypeOfAlignment anAlignment)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->DrawFramedText(*((TCollection_ExtendedString*)aText->Handle), X, Y, anAngle, aMargin, aDeltaX, aDeltaY, (Aspect_TypeOfText)aType, (Graphic2d_TypeOfAlignment)anAlignment);
}

 void OCGraphic2d_TransientManager::SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex, Quantity_PlaneAngle aSlant, Quantity_Factor aHScale, Quantity_Factor aWScale, System::Boolean isUnderlined, System::Boolean isZoomable)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->SetTextAttrib(ColorIndex, FontIndex, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined), OCConverter::BooleanToStandardBoolean(isZoomable));
}

 void OCGraphic2d_TransientManager::SetHidingTextAttrib(Standard_Integer ColorIndex, Standard_Integer HidingColorIndex, Standard_Integer FrameColorIndex, Standard_Integer FrameWidthIndex, Standard_Integer FontIndex, Quantity_PlaneAngle aSlant, Quantity_Factor aHScale, Quantity_Factor aWScale, System::Boolean isUnderlined, System::Boolean isZoomable)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->SetHidingTextAttrib(ColorIndex, HidingColorIndex, FrameColorIndex, FrameWidthIndex, FontIndex, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined), OCConverter::BooleanToStandardBoolean(isZoomable));
}

 void OCGraphic2d_TransientManager::SetFramedTextAttrib(Standard_Integer ColorIndex, Standard_Integer FrameColorIndex, Standard_Integer FrameWidthIndex, Standard_Integer FontIndex, Quantity_PlaneAngle aSlant, Quantity_Factor aHScale, Quantity_Factor aWScale, System::Boolean isUnderlined, System::Boolean isZoomable)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->SetFramedTextAttrib(ColorIndex, FrameColorIndex, FrameWidthIndex, FontIndex, aSlant, aHScale, aWScale, OCConverter::BooleanToStandardBoolean(isUnderlined), OCConverter::BooleanToStandardBoolean(isZoomable));
}

 void OCGraphic2d_TransientManager::SetTransform(OCNaroWrappers::OCgp_GTrsf2d^ aTrsf, OCGraphic2d_TypeOfComposition aType)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->SetTransform(*((gp_GTrsf2d*)aTrsf->Handle), (Graphic2d_TypeOfComposition)aType);
}

 void OCGraphic2d_TransientManager::SetMapping(System::Boolean aStatus)
{
  (*((Handle_Graphic2d_TransientManager*)nativeHandle))->SetMapping(OCConverter::BooleanToStandardBoolean(aStatus));
}

 System::Boolean OCGraphic2d_TransientManager::MinMax(Quantity_Length& XMin, Quantity_Length& YMin, Quantity_Length& XMax, Quantity_Length& YMax)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_TransientManager*)nativeHandle))->MinMax(XMin, YMin, XMax, YMax));
}

OCgp_GTrsf2d^ OCGraphic2d_TransientManager::Transform()
{
  gp_GTrsf2d* tmp = new gp_GTrsf2d();
  *tmp = (*((Handle_Graphic2d_TransientManager*)nativeHandle))->Transform();
  return gcnew OCgp_GTrsf2d(tmp);
}


