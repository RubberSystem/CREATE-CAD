// File generated by CPPExt (Transient)
//
#ifndef _Graphic2d_Primitive_OCWrappers_HeaderFile
#define _Graphic2d_Primitive_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic2d_Primitive.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TColStd/TColStd_MapOfInteger.h"
#include "Graphic2d_TypeOfPrimitive.h"
#include "Graphic2d_GraphicObject.h"
#include "Graphic2d_PickMode.h"
#include "Graphic2d_TransientManager.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HSequenceOfInteger;
ref class OCGraphic2d_Buffer;
ref class OCGraphic2d_Drawer;
ref class OCGraphic2d_GraphicObject;
ref class OCTColStd_MapOfInteger;


//! Groups all drawing elements which can be stored <br>
//!	    in a graphic object. <br>
//!	    Each primitive have a postion in the space model. <br>
public ref class OCGraphic2d_Primitive : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCGraphic2d_Primitive(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic2d_Primitive(Handle(Graphic2d_Primitive)* nativeHandle);

// Methods PUBLIC

//! Creates a primitive in a graphic object <aGraphicObject>. <br>
OCGraphic2d_Primitive(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject);

//! Defines the index, in the color map, of the primitive color. <br>
//!  Warning: For an image, this method defines the color of the <br>
//!	    boundary rectangle. <br>
 /*instead*/  void SetColorIndex(Standard_Integer anIndex) ;

//! Returns the index, in the color map, of the primitive color. <br>
//!  Warning: For an image, it is the color of the border. <br>
 /*instead*/  Standard_Integer ColorIndex() ;

//! Declares that previously highlighted elements will be selected ones. <br>
//!  Warning: If a descendant redefines this method then it  must return <true>! <br>
virtual /*instead*/  System::Boolean SetElementsSelected() ;


virtual /*instead*/  System::Boolean HasSelectedElements() ;


virtual /*instead*/  void ClearSelectedElements() ;

//! Returns number of elements of primitive <br>
virtual /*instead*/  Standard_Integer NumOfElemIndices() ;

//! Returns number of vertices of primitive <br>
virtual /*instead*/  Standard_Integer NumOfVertIndices() ;

//! Returns the index of the last picked primitive element. <br>
//!  Warning: This is available only if the Pick() method has <br>
//!         returned Standard_True. <br>
 /*instead*/  Standard_Integer PickedIndex() ;


 /*instead*/  OCTColStd_MapOfInteger^ PickedIndices() ;

//! Highlights the primitive <me> or a part of the <br>
//!	    primitive with the override color of the view. <br>
//!	    When <anIndex> is 0 all the primitive is highlighted <br>
//!		 >0 only the requested element is highlighted. <br>
//!		 <0 only the requested vertex is highlighted. <br>
 /*instead*/  void Highlight(Standard_Integer anIndex) ;

//! Suppress the highlight on the primitive <me>. <br>
 /*instead*/  void Unhighlight() ;

//! Returns Standard_True if the primitive <me> <br>
//!          is highlighted, Standard_False if not. <br>
 /*instead*/  System::Boolean IsHighlighted() ;

//! Returns the sequence of highlight indices of the primitive <me> <br>
 /*instead*/  OCTColStd_HSequenceOfInteger^ HighlightIndices() ;

//! Sets the display mode of primitive <br>
 /*instead*/  void SetDisplayMode(Standard_Integer aMode) ;

//! Indicates the display mode of primitive <br>
 /*instead*/  Standard_Integer DisplayMode() ;

//! Returns TRUE and the min max values of <me>. <br>
//!	    or FALSE when the primitive is empty. <br>
//!	    Called by the method Graphic2d_GraphicObject::MinMax <br>
 /*instead*/  System::Boolean MinMax(Standard_ShortReal& Minx, Standard_ShortReal& Maxx, Standard_ShortReal& Miny, Standard_ShortReal& Maxy) ;

//! Returns Standard_True if the point <X>, <Y> is in the <br>
//!	    rectangle defined by the min max values of <me>. <br>
//!  Warning: If <me> is in a transformed GraphicObject then <br>
//!	    the min max values are transformed. <br>
 /*instead*/  System::Boolean IsInMinMax(Standard_ShortReal X, Standard_ShortReal Y, Standard_ShortReal aPrecision) ;

~OCGraphic2d_Primitive()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
