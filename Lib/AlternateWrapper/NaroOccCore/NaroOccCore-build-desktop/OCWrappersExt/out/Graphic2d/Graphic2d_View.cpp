// File generated by CPPExt (CPP file)
//

#include "Graphic2d_View.h"
#include "../Converter.h"
#include "Graphic2d_DisplayList.h"
#include "Graphic2d_TransientManager.h"
#include "Graphic2d_GraphicObject.h"
#include "Graphic2d_Buffer.h"
#include "Graphic2d_Primitive.h"
#include "../Aspect/Aspect_Driver.h"
#include "Graphic2d_ViewMapping.h"
#include "Graphic2d_Drawer.h"


using namespace OCNaroWrappers;

OCGraphic2d_View::OCGraphic2d_View(Handle(Graphic2d_View)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Graphic2d_View(*nativeHandle);
}

OCGraphic2d_View::OCGraphic2d_View() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Graphic2d_View(new Graphic2d_View());
}

 void OCGraphic2d_View::Remove()
{
  (*((Handle_Graphic2d_View*)nativeHandle))->Remove();
}

 void OCGraphic2d_View::Erase()
{
  (*((Handle_Graphic2d_View*)nativeHandle))->Erase();
}

 void OCGraphic2d_View::Update(OCNaroWrappers::OCAspect_Driver^ aDriver, OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale, System::Boolean ClearBefore)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->Update(*((Handle_Aspect_Driver*)aDriver->Handle), *((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), aXPosition, aYPosition, aScale, OCConverter::BooleanToStandardBoolean(ClearBefore));
}

 void OCGraphic2d_View::TinyUpdate(OCNaroWrappers::OCAspect_Driver^ aDriver, OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale, System::Boolean Reset)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->TinyUpdate(*((Handle_Aspect_Driver*)aDriver->Handle), *((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), aXPosition, aYPosition, aScale, OCConverter::BooleanToStandardBoolean(Reset));
}

 void OCGraphic2d_View::Update(OCNaroWrappers::OCAspect_Driver^ aDriver, OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject, OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->Update(*((Handle_Aspect_Driver*)aDriver->Handle), *((Handle_Graphic2d_GraphicObject*)aGraphicObject->Handle), *((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), aXPosition, aYPosition, aScale);
}

 void OCGraphic2d_View::Update(OCNaroWrappers::OCAspect_Driver^ aDriver, OCNaroWrappers::OCGraphic2d_Primitive^ aPrimitive, OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->Update(*((Handle_Aspect_Driver*)aDriver->Handle), *((Handle_Graphic2d_Primitive*)aPrimitive->Handle), *((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), aXPosition, aYPosition, aScale);
}

OCGraphic2d_DisplayList^ OCGraphic2d_View::DisplayList()
{
  Handle(Graphic2d_DisplayList) tmp = (*((Handle_Graphic2d_View*)nativeHandle))->DisplayList();
  return gcnew OCGraphic2d_DisplayList(&tmp);
}

 System::Boolean OCGraphic2d_View::IsIn(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_View*)nativeHandle))->IsIn(*((Handle_Graphic2d_GraphicObject*)aGraphicObject->Handle)));
}

 void OCGraphic2d_View::MinMax(OCNaroWrappers::OCGraphic2d_DisplayList^ aList, Quantity_Length& Minx, Quantity_Length& Maxx, Quantity_Length& Miny, Quantity_Length& Maxy)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->MinMax(*((Handle_Graphic2d_DisplayList*)aList->Handle), Minx, Maxx, Miny, Maxy);
}

 void OCGraphic2d_View::MinMax(Quantity_Length& Minx, Quantity_Length& Maxx, Quantity_Length& Miny, Quantity_Length& Maxy)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->MinMax(Minx, Maxx, Miny, Maxy);
}

 void OCGraphic2d_View::MarkerMinMax(OCNaroWrappers::OCGraphic2d_DisplayList^ aList, Quantity_Length& Minx, Quantity_Length& Maxx, Quantity_Length& Miny, Quantity_Length& Maxy)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->MarkerMinMax(*((Handle_Graphic2d_DisplayList*)aList->Handle), Minx, Maxx, Miny, Maxy);
}

 void OCGraphic2d_View::MarkerMinMax(Quantity_Length& Minx, Quantity_Length& Maxx, Quantity_Length& Miny, Quantity_Length& Maxy)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->MarkerMinMax(Minx, Maxx, Miny, Maxy);
}

OCGraphic2d_DisplayList^ OCGraphic2d_View::Pick(OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real X, Standard_Real Y, Standard_Real aPrecision, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale)
{
  Handle(Graphic2d_DisplayList) tmp = (*((Handle_Graphic2d_View*)nativeHandle))->Pick(*((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), X, Y, aPrecision, aXPosition, aYPosition, aScale);
  return gcnew OCGraphic2d_DisplayList(&tmp);
}

OCGraphic2d_DisplayList^ OCGraphic2d_View::PickByCircle(OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real X, Standard_Real Y, Standard_Real Radius, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale)
{
  Handle(Graphic2d_DisplayList) tmp = (*((Handle_Graphic2d_View*)nativeHandle))->PickByCircle(*((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), X, Y, Radius, aXPosition, aYPosition, aScale);
  return gcnew OCGraphic2d_DisplayList(&tmp);
}

OCGraphic2d_DisplayList^ OCGraphic2d_View::Pick(OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real Xmin, Standard_Real Ymin, Standard_Real Xmax, Standard_Real Ymax, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale, OCGraphic2d_PickMode aPickMode)
{
  Handle(Graphic2d_DisplayList) tmp = (*((Handle_Graphic2d_View*)nativeHandle))->Pick(*((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), Xmin, Ymin, Xmax, Ymax, aXPosition, aYPosition, aScale, (Graphic2d_PickMode)aPickMode);
  return gcnew OCGraphic2d_DisplayList(&tmp);
}

 Standard_Integer OCGraphic2d_View::DefaultOverrideColor()
{
  return (*((Handle_Graphic2d_View*)nativeHandle))->DefaultOverrideColor();
}

 System::Boolean OCGraphic2d_View::IsDefinedColor()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_View*)nativeHandle))->IsDefinedColor());
}

 void OCGraphic2d_View::SetDefaultOverrideColor(Standard_Integer anIndex)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->SetDefaultOverrideColor(anIndex);
}

 void OCGraphic2d_View::SetTypeOfDeflection(OCAspect_TypeOfDeflection aTypeOfDeflection)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->SetTypeOfDeflection((Aspect_TypeOfDeflection)aTypeOfDeflection);
}

 OCAspect_TypeOfDeflection OCGraphic2d_View::TypeOfDeflection()
{
  return (OCAspect_TypeOfDeflection)((*((Handle_Graphic2d_View*)nativeHandle))->TypeOfDeflection());
}

 void OCGraphic2d_View::SetDeflection(Quantity_Length aDeflection)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->SetDeflection(aDeflection);
}

 Standard_Real OCGraphic2d_View::Deflection()
{
  return (*((Handle_Graphic2d_View*)nativeHandle))->Deflection();
}

 void OCGraphic2d_View::SetDeflectionCoefficient(Standard_Real aCoefficient)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->SetDeflectionCoefficient(aCoefficient);
}

 Standard_Real OCGraphic2d_View::DeflectionCoefficient()
{
  return (*((Handle_Graphic2d_View*)nativeHandle))->DeflectionCoefficient();
}

 void OCGraphic2d_View::SetTextPrecision(Standard_Real aPrecision)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->SetTextPrecision(aPrecision);
}

 Standard_Real OCGraphic2d_View::TextPrecision()
{
  return (*((Handle_Graphic2d_View*)nativeHandle))->TextPrecision();
}

 void OCGraphic2d_View::Convert(OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real aDrawPositionX, Standard_Real aDrawPositionY, Standard_Real aXPosition, Standard_Real aYPosition, Standard_Real aScale, Standard_Real& aX, Standard_Real& aY)
{
  (*((Handle_Graphic2d_View*)nativeHandle))->Convert(*((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), aDrawPositionX, aDrawPositionY, aXPosition, aYPosition, aScale, aX, aY);
}

 Standard_Real OCGraphic2d_View::Convert(OCNaroWrappers::OCGraphic2d_ViewMapping^ aViewMapping, Standard_Real aScalar, Standard_Real aScale)
{
  return (*((Handle_Graphic2d_View*)nativeHandle))->Convert(*((Handle_Graphic2d_ViewMapping*)aViewMapping->Handle), aScalar, aScale);
}

OCGraphic2d_Drawer^ OCGraphic2d_View::Drawer()
{
  Handle(Graphic2d_Drawer) tmp = (*((Handle_Graphic2d_View*)nativeHandle))->Drawer();
  return gcnew OCGraphic2d_Drawer(&tmp);
}


