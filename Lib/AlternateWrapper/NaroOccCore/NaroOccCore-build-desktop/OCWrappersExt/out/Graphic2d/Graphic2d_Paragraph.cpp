// File generated by CPPExt (CPP file)
//

#include "Graphic2d_Paragraph.h"
#include "../Converter.h"
#include "Graphic2d_GraphicObject.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "Graphic2d_Drawer.h"


using namespace OCNaroWrappers;

OCGraphic2d_Paragraph::OCGraphic2d_Paragraph(Handle(Graphic2d_Paragraph)* nativeHandle) : OCGraphic2d_Primitive((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Graphic2d_Paragraph(*nativeHandle);
}

OCGraphic2d_Paragraph::OCGraphic2d_Paragraph(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject, Standard_Real X, Standard_Real Y, Quantity_PlaneAngle anAngle, OCAspect_CardinalPoints anOffset, Quantity_Factor aScale) : OCGraphic2d_Primitive((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Graphic2d_Paragraph(new Graphic2d_Paragraph(*((Handle_Graphic2d_GraphicObject*)aGraphicObject->Handle), X, Y, anAngle, (Aspect_CardinalPoints)anOffset, aScale));
}

 void OCGraphic2d_Paragraph::SetSlant(Quantity_PlaneAngle aSlant)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetSlant(aSlant);
}

 void OCGraphic2d_Paragraph::SetSpacing(Quantity_Ratio aSpacing)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetSpacing(aSpacing);
}

 void OCGraphic2d_Paragraph::SetMargin(Quantity_Length aMargin)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetMargin(aMargin);
}

 void OCGraphic2d_Paragraph::SetZoomable(System::Boolean aFlag)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetZoomable(OCConverter::BooleanToStandardBoolean(aFlag));
}

 void OCGraphic2d_Paragraph::SetFrameColorIndex(Standard_Integer anIndex)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetFrameColorIndex(anIndex);
}

 void OCGraphic2d_Paragraph::SetFrameWidthIndex(Standard_Integer anIndex)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetFrameWidthIndex(anIndex);
}

 void OCGraphic2d_Paragraph::SetHidingColorIndex(Standard_Integer anIndex)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetHidingColorIndex(anIndex);
}

 void OCGraphic2d_Paragraph::SetCurrentColorIndex(Standard_Integer anIndex)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetCurrentColorIndex(anIndex);
}

 void OCGraphic2d_Paragraph::SetCurrentFontIndex(Standard_Integer anIndex, Quantity_Length aHScale, Quantity_Length aWScale)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetCurrentFontIndex(anIndex, aHScale, aWScale);
}

 void OCGraphic2d_Paragraph::SetCurrentAlignment(OCGraphic2d_TypeOfAlignment anAlignment)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetCurrentAlignment((Graphic2d_TypeOfAlignment)anAlignment);
}

 void OCGraphic2d_Paragraph::SetCurrentUnderline(System::Boolean isUnderlined)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->SetCurrentUnderline(OCConverter::BooleanToStandardBoolean(isUnderlined));
}

 void OCGraphic2d_Paragraph::AddText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Integer aRow, Standard_Integer aColumn)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->AddText(*((TCollection_ExtendedString*)aText->Handle), aRow, aColumn);
}

 void OCGraphic2d_Paragraph::ChangeText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_Integer aRow, Standard_Integer aColumn)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->ChangeText(*((TCollection_ExtendedString*)aText->Handle), aRow, aColumn);
}

 void OCGraphic2d_Paragraph::Clear()
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Clear();
}

 System::Boolean OCGraphic2d_Paragraph::IsZoomable()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Paragraph*)nativeHandle))->IsZoomable());
}

 void OCGraphic2d_Paragraph::Size(Quantity_Length& aWidth, Quantity_Length& aHeight)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Size(aWidth, aHeight);
}

 void OCGraphic2d_Paragraph::Position(Quantity_Length& X, Quantity_Length& Y)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Position(X, Y);
}

 OCAspect_CardinalPoints OCGraphic2d_Paragraph::Offset(Quantity_Length& Dx, Quantity_Length& Dy)
{
  return (OCAspect_CardinalPoints)((*((Handle_Graphic2d_Paragraph*)nativeHandle))->Offset(Dx, Dy));
}

 Quantity_PlaneAngle OCGraphic2d_Paragraph::Angle()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Angle();
}

 Quantity_PlaneAngle OCGraphic2d_Paragraph::Slant()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Slant();
}

 Quantity_Ratio OCGraphic2d_Paragraph::Spacing()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Spacing();
}

 Quantity_Length OCGraphic2d_Paragraph::Margin()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Margin();
}

 Standard_Integer OCGraphic2d_Paragraph::HidingColorIndex()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->HidingColorIndex();
}

 Standard_Integer OCGraphic2d_Paragraph::FrameColorIndex()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->FrameColorIndex();
}

 Standard_Integer OCGraphic2d_Paragraph::FrameWidthIndex()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->FrameWidthIndex();
}

OCTCollection_ExtendedString^ OCGraphic2d_Paragraph::Text(Standard_Integer aRank, Standard_Integer& aRow, Standard_Integer& aColumn, Standard_Integer& aColorIndex, Standard_Integer& aFontIndex, OCGraphic2d_TypeOfAlignment& anAlignment)
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Text(aRank, aRow, aColumn, aColorIndex, aFontIndex, (Graphic2d_TypeOfAlignment&)anAlignment);
  return gcnew OCTCollection_ExtendedString(tmp);
}

 System::Boolean OCGraphic2d_Paragraph::TextSize(Standard_Integer aRank, Quantity_Length& aWidth, Quantity_Length& aHeight, Quantity_Length& anXoffset, Quantity_Length& anYoffset)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Paragraph*)nativeHandle))->TextSize(aRank, aWidth, aHeight, anXoffset, anYoffset));
}

 Standard_Integer OCGraphic2d_Paragraph::Length()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Length();
}

 Standard_Integer OCGraphic2d_Paragraph::MaxRow()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->MaxRow();
}

 Standard_Integer OCGraphic2d_Paragraph::MaxColumn()
{
  return (*((Handle_Graphic2d_Paragraph*)nativeHandle))->MaxColumn();
}

 System::Boolean OCGraphic2d_Paragraph::ComputeMinMax()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Graphic2d_Paragraph*)nativeHandle))->ComputeMinMax());
}

 void OCGraphic2d_Paragraph::Save(Aspect_FStream& aFStream)
{
  (*((Handle_Graphic2d_Paragraph*)nativeHandle))->Save(aFStream);
}


