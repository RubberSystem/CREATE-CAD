// File generated by CPPExt (Transient)
//
#ifndef _Graphic2d_SetOfMarkers_OCWrappers_HeaderFile
#define _Graphic2d_SetOfMarkers_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic2d_SetOfMarkers.hxx>
#include "../Converter.h"

#include "Graphic2d_Line.h"

#include "../TColStd/TColStd_SequenceOfInteger.h"
#include "../TShort/TShort_SequenceOfShortReal.h"
#include "../TColStd/TColStd_MapOfInteger.h"
#include "Graphic2d_PickMode.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HSequenceOfInteger;
ref class OCGraphic2d_GraphicObject;
ref class OCGraphic2d_Drawer;
ref class OCTShort_HArray1OfShortReal;
ref class OCTColStd_MapOfInteger;


//! The primitive SetOfMarkers <br>
//!  Warning: This primitive must be use as possible for performance <br>
//!	   improvment but is drawn with a global marker attributes <br>
//!	   for all the set. <br>
//!	   NOTE: than the method PickedIndex() permits to known <br>
//!	        the last picked marker in the set. <br>
//!      SAV : 14/11/01 : Added a set of methods (marked SAV before declaration) <br>
//!                       to provide highlighting/selection <br>
//!                       of SetOfMarkers elements. These methods should be redefined <br>
//!                       for other SetOf<>. <br>
//! <br>
//!      SAV : 23/05/02 : WARNING!!! method PickByCircle performs only detection <br>
//!      function. It doesn't cause any visual highlighting. <br>
public ref class OCGraphic2d_SetOfMarkers : OCGraphic2d_Line {

protected:
  // dummy constructor;
  OCGraphic2d_SetOfMarkers(OCDummy^) : OCGraphic2d_Line((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic2d_SetOfMarkers(Handle(Graphic2d_SetOfMarkers)* nativeHandle);

// Methods PUBLIC

//! Creates an empty set of markers in the graphic <br>
//!         object <aGraphicObject>. <br>
OCGraphic2d_SetOfMarkers(OCNaroWrappers::OCGraphic2d_GraphicObject^ aGraphicObject);

//! Add a pixel point marker in the set <br>
 /*instead*/  void Add(Quantity_Length X, Quantity_Length Y) ;

//! Add a marker of predefined index <anIndex> in the set <br>
//!          at position <X>,<Y> and size <aWidth>,<aHeight>. <br>
//!          Angle is measured counterclockwise with 0 radian <br>
//!          at 3 o'clock. <br>
//!  Trigger: Raises MarkerDefinitionError if the <br>
//!          marker index is <= 0 or undefined in the MarkMap, <br>
//!          or the marker size <aWidth,anHeight> is <= 0. <br>
 /*instead*/  void Add(Standard_Integer anIndex, Quantity_Length X, Quantity_Length Y, Quantity_Length aWidth, Quantity_Length anHeight, Quantity_PlaneAngle anAngle) ;

//! Returns the number of markers in the set. <br>
 /*instead*/  Standard_Integer Length() ;

//! Returns the marker type, position, sizes and angle <br>
//!          and type from the set at rank <aRank>. <br>
//!  Warning: For the pixel point marker the returned <anIndex> is NULL <br>
//!  Trigger: Raises OutOfRange if <aRank> is <1 or >Length() <br>
 /*instead*/  void Values(Standard_Integer aRank, Standard_Integer& anIndex, Quantity_Length& X, Quantity_Length& Y, Quantity_Length& aW, Quantity_Length& aH, Quantity_PlaneAngle& anAngle) ;

//! Declares that previously highlighted elements will be selected ones. <br>
virtual /*instead*/  System::Boolean SetElementsSelected() override;


virtual /*instead*/  System::Boolean HasSelectedElements() override;


virtual /*instead*/  void ClearSelectedElements() override;


 /*instead*/  OCTColStd_MapOfInteger^ GetSelectedElements() ;

//! adds/removes marker to/from selection map. <br>
 /*instead*/  void AddOrRemoveSelected(Standard_Integer index) ;


virtual /*instead*/  void Save(Aspect_FStream& aFStream) ;

//! sets limit of number elements to be highlighted. <br>
 /*instead*/  void SetHighlightedLimit(Standard_Integer number) ;

//! Changes myScaledWidth field. As this value used in detection <br>
//!          mechanism it should be reset after view transformation. <br>
 /*instead*/  void SetScaledWidth(Standard_ShortReal width) ;

~OCGraphic2d_SetOfMarkers()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
