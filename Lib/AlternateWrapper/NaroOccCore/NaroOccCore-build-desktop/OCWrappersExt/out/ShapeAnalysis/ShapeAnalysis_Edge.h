// File generated by CPPExt (MPV)
//
#ifndef _ShapeAnalysis_Edge_OCWrappers_HeaderFile
#define _ShapeAnalysis_Edge_OCWrappers_HeaderFile

// include native header
#include <ShapeAnalysis_Edge.hxx>
#include "../Converter.h"


#include "../ShapeExtend/ShapeExtend_Status.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Edge;
ref class OCGeom_Curve;
ref class OCTopoDS_Face;
ref class OCGeom_Surface;
ref class OCTopLoc_Location;
ref class OCGeom2d_Curve;
ref class OCgp_Pnt2d;
ref class OCTopoDS_Vertex;
ref class OCgp_Vec2d;
ref class OCgp_Pnt;


//! Tool for analyzing the edge. <br>
//!          Queries geometrical representations of the edge (3d curve, pcurve <br>
//!          on the given face or surface) and topological sub-shapes (bounding <br>
//!          vertices). <br>
//!          Provides methods for analyzing geometry and topology consistency <br>
//!          (3d and pcurve(s) consistency, their adjacency to the vertices). <br>
public ref class OCShapeAnalysis_Edge  {

protected:
  ShapeAnalysis_Edge* nativeHandle;
  OCShapeAnalysis_Edge(OCDummy^) {};

public:
  property ShapeAnalysis_Edge* Handle
  {
    ShapeAnalysis_Edge* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCShapeAnalysis_Edge(ShapeAnalysis_Edge* nativeHandle);

// Methods PUBLIC

//! Empty constructor; initialises Status to OK <br>
OCShapeAnalysis_Edge();

//! Tells if the edge has a 3d curve <br>
 /*instead*/  System::Boolean HasCurve3d(OCNaroWrappers::OCTopoDS_Edge^ edge) ;

//! Returns the 3d curve and bounding parameteres for the edge <br>
//!          Returns False if no 3d curve. <br>
//!          If <orient> is True (default), takes orientation into account: <br>
//!          if the edge is reversed, cf and cl are toggled <br>
 /*instead*/  System::Boolean Curve3d(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCGeom_Curve^ C3d, Standard_Real& cf, Standard_Real& cl, System::Boolean orient) ;

//! Gives True if the edge has a 3d curve, this curve is closed, <br>
//!          and the edge has the same vertex at start and end <br>
 /*instead*/  System::Boolean IsClosed3d(OCNaroWrappers::OCTopoDS_Edge^ edge) ;

//! Tells if the Edge has a pcurve on the face. <br>
 /*instead*/  System::Boolean HasPCurve(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCTopoDS_Face^ face) ;

//! Tells if the edge has a pcurve on the surface (with location). <br>
 /*instead*/  System::Boolean HasPCurve(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCGeom_Surface^ surface, OCNaroWrappers::OCTopLoc_Location^ location) ;


 /*instead*/  System::Boolean PCurve(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCTopoDS_Face^ face, OCNaroWrappers::OCGeom2d_Curve^ C2d, Standard_Real& cf, Standard_Real& cl, System::Boolean orient) ;

//! Returns the pcurve and bounding parameteres for the edge <br>
//!          lying on the surface. <br>
//!          Returns False if the edge has no pcurve on this surface. <br>
//!          If <orient> is True (default), takes orientation into account: <br>
//!          if the edge is reversed, cf and cl are toggled <br>
 /*instead*/  System::Boolean PCurve(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCGeom_Surface^ surface, OCNaroWrappers::OCTopLoc_Location^ location, OCNaroWrappers::OCGeom2d_Curve^ C2d, Standard_Real& cf, Standard_Real& cl, System::Boolean orient) ;


 /*instead*/  System::Boolean BoundUV(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCTopoDS_Face^ face, OCNaroWrappers::OCgp_Pnt2d^ first, OCNaroWrappers::OCgp_Pnt2d^ last) ;

//! Returns the ends of pcurve <br>
//!          Calls method PCurve with <orient> equal to True <br>
 /*instead*/  System::Boolean BoundUV(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCGeom_Surface^ surface, OCNaroWrappers::OCTopLoc_Location^ location, OCNaroWrappers::OCgp_Pnt2d^ first, OCNaroWrappers::OCgp_Pnt2d^ last) ;


 /*instead*/  System::Boolean IsSeam(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCTopoDS_Face^ face) ;

//! Returns True if the edge has two pcurves on one surface <br>
 /*instead*/  System::Boolean IsSeam(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCGeom_Surface^ surface, OCNaroWrappers::OCTopLoc_Location^ location) ;

//! Returns start vertex of the edge (taking edge orientation <br>
//!          into account). <br>
 /*instead*/  OCTopoDS_Vertex^ FirstVertex(OCNaroWrappers::OCTopoDS_Edge^ edge) ;

//! Returns end vertex of the edge (taking edge orientation <br>
//!          into account). <br>
 /*instead*/  OCTopoDS_Vertex^ LastVertex(OCNaroWrappers::OCTopoDS_Edge^ edge) ;


 /*instead*/  System::Boolean GetEndTangent2d(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCTopoDS_Face^ face, System::Boolean atEnd, OCNaroWrappers::OCgp_Pnt2d^ pos, OCNaroWrappers::OCgp_Vec2d^ tang, Standard_Real dparam) ;

//! Returns tangent of the edge pcurve at its start (if atEnd is <br>
//!          False) or end (if True), regarding the orientation of edge. <br>
//!          If edge is REVERSED, tangent is reversed before return. <br>
//!          Returns True if pcurve is available and tangent is computed <br>
//!          and is not null, else False. <br>
 /*instead*/  System::Boolean GetEndTangent2d(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCGeom_Surface^ surface, OCNaroWrappers::OCTopLoc_Location^ location, System::Boolean atEnd, OCNaroWrappers::OCgp_Pnt2d^ pos, OCNaroWrappers::OCgp_Vec2d^ tang, Standard_Real dparam) ;

//! Checks the start and/or end vertex of the edge for matching <br>
//!          with 3d curve with the given precision. <br>
//!          <vtx> = 1 : start vertex only <br>
//!          <vtx> = 2 : end vertex only <br>
//!          <vtx> = 0 : both (default) <br>
//!          If preci < 0 the vertices are considered with their own <br>
//!          tolerances, else with the given <preci>. <br>
 /*instead*/  System::Boolean CheckVerticesWithCurve3d(OCNaroWrappers::OCTopoDS_Edge^ edge, Standard_Real preci, Standard_Integer vtx) ;


 /*instead*/  System::Boolean CheckVerticesWithPCurve(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCTopoDS_Face^ face, Standard_Real preci, Standard_Integer vtx) ;

//! Checks the start and/or end vertex of the edge for matching <br>
//!          with pcurve with the given precision. <br>
//!          <vtx> = 1 : start vertex <br>
//!          <vtx> = 2 : end vertex <br>
//!          <vtx> = 0 : both <br>
//!          If preci < 0 the vertices are considered with their own <br>
//!          tolerances, else with the given <preci>. <br>
 /*instead*/  System::Boolean CheckVerticesWithPCurve(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCGeom_Surface^ surface, OCNaroWrappers::OCTopLoc_Location^ location, Standard_Real preci, Standard_Integer vtx) ;


 /*instead*/  System::Boolean CheckVertexTolerance(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCTopoDS_Face^ face, Standard_Real& toler1, Standard_Real& toler2) ;

//! Checks if it is necessary to increase tolerances of the edge <br>
//!          vertices to comprise the ends of 3d curve and pcurve on <br>
//!          the given face (first method) or all pcurves stored in an edge <br>
//!          (second one) <br>
//!          toler1 returns necessary tolerance for first vertex, <br>
//!          toler2 returns necessary tolerance for last vertex. <br>
 /*instead*/  System::Boolean CheckVertexTolerance(OCNaroWrappers::OCTopoDS_Edge^ edge, Standard_Real& toler1, Standard_Real& toler2) ;


 /*instead*/  System::Boolean CheckCurve3dWithPCurve(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCTopoDS_Face^ face) ;

//! Checks mutual orientation of 3d curve and pcurve on the <br>
//!          analysis of curves bounding points <br>
 /*instead*/  System::Boolean CheckCurve3dWithPCurve(OCNaroWrappers::OCTopoDS_Edge^ edge, OCNaroWrappers::OCGeom_Surface^ surface, OCNaroWrappers::OCTopLoc_Location^ location) ;

//! Returns the status (in the form of True/False) of last Check <br>
 /*instead*/  System::Boolean Status(OCShapeExtend_Status status) ;

//! Checks the edge to be SameParameter. <br>
//!          Calculates the maximal deviation between 3d curve and each <br>
//!          pcurve of the edge on <NbControl> equidistant points (the same <br>
//!          algorithm as in BRepCheck; default value is 23 as in BRepCheck). <br>
//!          This deviation is returned in <maxdev> parameter. <br>
//!          If deviation is greater than tolerance of the edge (i.e. <br>
//!          incorrect flag) returns False, else returns True. <br>
 /*instead*/  System::Boolean CheckSameParameter(OCNaroWrappers::OCTopoDS_Edge^ edge, Standard_Real& maxdev, Standard_Integer NbControl) ;

//! Checks the first edge is overlapped with second edge. <br>
//!          If distance between two edges is less then theTolOverlap <br>
//!          edges is overlapped. <br>
//!          theDomainDis - length of part of edges on wich edges is overlapped. <br>
 /*instead*/  System::Boolean CheckOverlapping(OCNaroWrappers::OCTopoDS_Edge^ theEdge1, OCNaroWrappers::OCTopoDS_Edge^ theEdge2, Standard_Real& theTolOverlap, Standard_Real theDomainDist) ;

~OCShapeAnalysis_Edge()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
