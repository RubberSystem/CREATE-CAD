// File generated by CPPExt (Package)
//

#ifndef _ShapeAnalysis_OCWrappers_HeaderFile
#define _ShapeAnalysis_OCWrappers_HeaderFile

// Include the wrapped header
#include <ShapeAnalysis.hxx>

#include "ShapeAnalysis_Geom.h"
#include "ShapeAnalysis_Curve.h"
#include "ShapeAnalysis_Surface.h"
#include "ShapeAnalysis_Edge.h"
#include "ShapeAnalysis_Wire.h"
#include "ShapeAnalysis_WireOrder.h"
#include "ShapeAnalysis_WireVertex.h"
#include "ShapeAnalysis_CheckSmallFace.h"
#include "ShapeAnalysis_Shell.h"
#include "ShapeAnalysis_ShapeTolerance.h"
#include "ShapeAnalysis_ShapeContents.h"
#include "ShapeAnalysis_FreeBounds.h"
#include "ShapeAnalysis_FreeBoundData.h"
#include "ShapeAnalysis_FreeBoundsProperties.h"
#include "ShapeAnalysis_TransferParameters.h"
#include "ShapeAnalysis_TransferParametersProj.h"
#include "ShapeAnalysis_SequenceOfFreeBounds.h"
#include "ShapeAnalysis_HSequenceOfFreeBounds.h"
#include "ShapeAnalysis_DataMapOfShapeListOfReal.h"
#include "ShapeAnalysis_SequenceNodeOfSequenceOfFreeBounds.h"
#include "ShapeAnalysis_DataMapNodeOfDataMapOfShapeListOfReal.h"
#include "ShapeAnalysis_DataMapIteratorOfDataMapOfShapeListOfReal.h"


namespace OCNaroWrappers
{
//! This package is intended to analyze geometrical objects <br>
//! and topological shapes. Analysis domain includes both <br>
//! exploring geometrical and topological properties of <br>
//! shapes and checking their conformance to Open CASCADE requirements. <br>
//! The directions of analysis provided by tools of this package are: <br>
//! computing quantities of subshapes, <br>
//! computing parameters of points on curve and surface, <br>
//! computing surface singularities, <br>
//! checking edge and wire consistency, <br>
//! checking edges order in the wire, <br>
//! checking face bounds orientation, <br>
//! checking small faces, <br>
//! analyzing shape tolerances, <br>
//! analyzing of free bounds of the shape. <br>
public ref class OCShapeAnalysis abstract sealed
{

public:
// Methods

//! Returns the outer wire on the face <Face>. <br>
//!          This is replacement of the method BRepTools::OuterWire <br>
//!          until it works badly. <br>
//!          Returns the first wire oriented as outer according to <br>
//!          FClass2d_Classifier. If none, last wire is returned. <br>
static /*instead*/  OCTopoDS_Wire^ OuterWire(OCNaroWrappers::OCTopoDS_Face^ face) ;

//! Returns a total area of 2d wire <br>
static /*instead*/  Standard_Real TotCross2D(OCNaroWrappers::OCShapeExtend_WireData^ sewd, OCNaroWrappers::OCTopoDS_Face^ aFace) ;

//! Returns a total area of 3d wire <br>
static /*instead*/  Standard_Real ContourArea(OCNaroWrappers::OCTopoDS_Wire^ theWire) ;

//! Returns True if <F> has outer bound. <br>
static /*instead*/  System::Boolean IsOuterBound(OCNaroWrappers::OCTopoDS_Face^ face) ;

//! Returns a shift required to move point <br>
//!          <Val> to the range [ToVal-Period/2,ToVal+Period/2]. <br>
//!          This shift will be the divisible by Period. <br>
//!          Intended for adjusting parameters on periodic surfaces. <br>
static /*instead*/  Standard_Real AdjustByPeriod(Standard_Real Val, Standard_Real ToVal, Standard_Real Period) ;

//! Returns a shift required to move point <br>
//!          <Val> to the range [ValMin,ValMax]. <br>
//!          This shift will be the divisible by Period <br>
//!          with Period = ValMax - ValMin. <br>
//!          Intended for adjusting parameters on periodic surfaces. <br>
static /*instead*/  Standard_Real AdjustToPeriod(Standard_Real Val, Standard_Real ValMin, Standard_Real ValMax) ;

//! Finds the start and end vertices of the shape <br>
//!          Shape can be of the following type: <br>
//!          vertex: V1 and V2 are the same and equal to <shape>, <br>
//!          edge  : V1 is start and V2 is end vertex (see ShapeAnalysis_Edge <br>
//!                  methods FirstVertex and LastVertex), <br>
//!          wire  : V1 is start vertex of the first edge, V2 is end vertex <br>
//!                  of the last edge (also see ShapeAnalysis_Edge). <br>
//!                  If wire contains no edges V1 and V2 are nullified <br>
//!          If none of the above V1 and V2 are nullified <br>
static /*instead*/  void FindBounds(OCNaroWrappers::OCTopoDS_Shape^ shape, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2) ;

//! Computes exact UV bounds of all wires on the face <br>
static /*instead*/  void GetFaceUVBounds(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real& Umin, Standard_Real& Umax, Standard_Real& Vmin, Standard_Real& Vmax) ;


};

}; // OCNaroWrappers

#endif
