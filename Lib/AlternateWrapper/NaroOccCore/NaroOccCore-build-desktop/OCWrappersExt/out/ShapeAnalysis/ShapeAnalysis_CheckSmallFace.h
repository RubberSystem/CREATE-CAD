// File generated by CPPExt (MPV)
//
#ifndef _ShapeAnalysis_CheckSmallFace_OCWrappers_HeaderFile
#define _ShapeAnalysis_CheckSmallFace_OCWrappers_HeaderFile

// include native header
#include <ShapeAnalysis_CheckSmallFace.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Shape.h"
#include "../ShapeExtend/ShapeExtend_Status.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Face;
ref class OCgp_Pnt;
ref class OCTopoDS_Edge;
ref class OCTopTools_DataMapOfShapeListOfShape;
ref class OCShapeAnalysis_DataMapOfShapeListOfReal;
ref class OCTopoDS_Compound;
ref class OCTopTools_DataMapOfShapeShape;



public ref class OCShapeAnalysis_CheckSmallFace  {

protected:
  ShapeAnalysis_CheckSmallFace* nativeHandle;
  OCShapeAnalysis_CheckSmallFace(OCDummy^) {};

public:
  property ShapeAnalysis_CheckSmallFace* Handle
  {
    ShapeAnalysis_CheckSmallFace* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCShapeAnalysis_CheckSmallFace(ShapeAnalysis_CheckSmallFace* nativeHandle);

// Methods PUBLIC

//!Creates an empty tool <br>//! Checks a Shape i.e. each of its faces, records checks as <br>
//!           diagnostics in the <infos> <br>
//! <br>
//!           If <infos> has not been set before, no check is done <br>
//! <br>
//!           For faces which are in a Shell, topological data are recorded <br>
//!           to allow recovering connectivities after fixing or removing <br>
//!           the small faces or parts of faces <br>//! Enchains various checks on a face <br>
//!           inshell : to compute more informations, relevant to topology <br>
OCShapeAnalysis_CheckSmallFace();

//! Checks if a Face is as a Spot <br>
//!           Returns 0 if not, 1 if yes, 2 if yes and all vertices are the <br>
//!           same <br>
//!           By default, considers the tolerance zone of its vertices <br>
//!           A given value <tol> may be given to check a spot of this size <br>
//!           If a Face is a Spot, its location is returned in <spot>, and <br>
//!           <spotol> returns an equivalent tolerance, which is computed as <br>
//!           half of max dimension of min-max box of the face <br>
 /*instead*/  Standard_Integer IsSpotFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCgp_Pnt^ spot, Standard_Real& spotol, Standard_Real tol) ;

//! Acts as IsSpotFace, but records in <infos> a diagnostic <br>
//!           "SpotFace" with the Pnt as value (data "Location") <br>
 /*instead*/  System::Boolean CheckSpotFace(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real tol) ;

//! Checks if a Face lies on a Surface which is a strip <br>
//!           So the Face is a strip. But a Face may be a strip elsewhere .. <br>
//! <br>
//!           A given value <tol> may be given to check max width <br>
//!           By default, considers the tolerance zone of its edges <br>
//!           Returns 0 if not a strip support, 1 strip in U, 2 strip in V <br>
 /*instead*/  System::Boolean IsStripSupport(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real tol) ;

//! Checks if two edges define a strip, i.e. distance maxi below <br>
//!           tolerance, given or some of those of E1 and E2 <br>
 /*instead*/  System::Boolean CheckStripEdges(OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2, Standard_Real tol, Standard_Real& dmax) ;

//! Searchs for two and only two edges up tolerance <br>
//!           Returns True if OK, false if not 2 edges <br>
//!           If True, returns the two edges and their maximum distance <br>
 /*instead*/  System::Boolean FindStripEdges(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2, Standard_Real tol, Standard_Real& dmax) ;

//! Checks if a Face is a single strip, i.e. brings two great <br>
//!           edges which are confused on their whole length, possible other <br>
//!           edges are small or null length <br>
//! <br>
//!           Returns 0 if not a strip support, 1 strip in U, 2 strip in V <br>
//!           Records diagnostic in info if it is a single strip <br>
 /*instead*/  System::Boolean CheckSingleStrip(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2, Standard_Real tol) ;

//! Checks if a Face is as a Strip <br>
//!           Returns 0 if not or non determined, 1 if in U, 2 if in V <br>
//!           By default, considers the tolerance zone of its edges <br>
//!           A given value <tol> may be given to check a strip of max this width <br>
//! <br>
//!           If a Face is determined as a Strip, it is delinited by two <br>
//!           lists of edges. These lists are recorded in diagnostic <br>
//!           Diagnostic "StripFace" brings data "Direction" (U or V), <br>
//!           "List1" , "List2" (if they could be computed) <br>
 /*instead*/  System::Boolean CheckStripFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2, Standard_Real tol) ;

//! Checks if a Face brings vertices which split it, either <br>
//!           confused with non adjacent vertices, or confused with their <br>
//!           projection on non adjacent edges <br>
//!           Returns the count of found splitting vertices <br>
//!           Each vertex then brings a diagnostic "SplittingVertex", <br>
//!           with data : "Face" for the face, "Edge" for the split edge <br>
 /*instead*/  Standard_Integer CheckSplittingVertices(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopTools_DataMapOfShapeListOfShape^ MapEdges, OCNaroWrappers::OCShapeAnalysis_DataMapOfShapeListOfReal^ MapParam, OCNaroWrappers::OCTopoDS_Compound^ theAllVert) ;

//! Checks if a Face has a pin, which can be edited <br>
//!           No singularity : no pin, returns 0 <br>
//!           If there is a pin, checked topics, with returned value : <br>
//!           - 0 : nothing to do more <br>
//!           - 1 : "smooth", i.e. not a really sharp pin <br>
//!             -> diagnostic "SmoothPin" <br>
//!           - 2 : stretched pin, i.e. is possible to relimit the face by <br>
//!             another vertex, so that this vertex still gives a pin <br>
//!             -> diagnostic "StretchedPin" with location of vertex (Pnt) <br>
 /*instead*/  System::Boolean CheckPin(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Integer& whatrow, Standard_Integer& sence) ;

//! Checks if a Face is twisted (apart from checking Pin, i.e. it <br>
//!           does not give information on pin, only "it is twisted") <br>
 /*instead*/  System::Boolean CheckTwisted(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real& paramu, Standard_Real& paramv) ;


 /*instead*/  System::Boolean CheckPinFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ mapEdges, Standard_Real toler) ;


 /*instead*/  System::Boolean CheckPinEdges(OCNaroWrappers::OCTopoDS_Edge^ theFirstEdge, OCNaroWrappers::OCTopoDS_Edge^ theSecondEdge, Standard_Real coef1, Standard_Real coef2, Standard_Real toler) ;

//! Returns the status of last call to Perform() <br>
//!          ShapeExtend_OK   : face was OK, nothing done <br>
//!          ShapeExtend_DONE1: some wires are fixed <br>
//!          ShapeExtend_DONE2: orientation of wires fixed <br>
//!          ShapeExtend_DONE3: missing seam added <br>
//!          ShapeExtend_DONE4: small area wire removed <br>
//!          ShapeExtend_DONE5: natural bounds added <br>
//!          ShapeExtend_FAIL1: some fails during fixing wires <br>
//!          ShapeExtend_FAIL2: cannot fix orientation of wires <br>
//!          ShapeExtend_FAIL3: cannot add missing seam <br>
//!          ShapeExtend_FAIL4: cannot remove small area wire <br>
 /*instead*/  System::Boolean Status(OCShapeExtend_Status status) ;

//! Sets a fixed Tolerance to check small face <br>
//!           By default, local tolerance zone is considered <br>//! Sets a fixed MaxTolerance to check small face <br>//! Sets a fixed Tolerance to check small face <br>
//!           By default, local tolerance zone is considered <br>//! Unset fixed tolerance, comes back to local tolerance zones <br>//! Unset fixed tolerance, comes back to local tolerance zones <br>
 /*instead*/  void SetTolerance(Standard_Real tol) ;

//! Returns the tolerance to check small faces, negative value if <br>
//!           local tolerances zones are to be considered <br>
 /*instead*/  Standard_Real Tolerance() ;


 /*instead*/  System::Boolean StatusSpot(OCShapeExtend_Status status) ;


 /*instead*/  System::Boolean StatusStrip(OCShapeExtend_Status status) ;


 /*instead*/  System::Boolean StatusPin(OCShapeExtend_Status status) ;


 /*instead*/  System::Boolean StatusTwisted(OCShapeExtend_Status status) ;


 /*instead*/  System::Boolean StatusSplitVert(OCShapeExtend_Status status) ;


 /*instead*/  System::Boolean StatusPinFace(OCShapeExtend_Status status) ;


 /*instead*/  System::Boolean StatusPinEdges(OCShapeExtend_Status status) ;

~OCShapeAnalysis_CheckSmallFace()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
