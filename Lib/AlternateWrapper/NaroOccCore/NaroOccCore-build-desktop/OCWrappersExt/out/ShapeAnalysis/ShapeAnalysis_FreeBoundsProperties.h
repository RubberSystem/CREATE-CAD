// File generated by CPPExt (MPV)
//
#ifndef _ShapeAnalysis_FreeBoundsProperties_OCWrappers_HeaderFile
#define _ShapeAnalysis_FreeBoundsProperties_OCWrappers_HeaderFile

// include native header
#include <ShapeAnalysis_FreeBoundsProperties.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Shape.h"


namespace OCNaroWrappers
{

ref class OCShapeAnalysis_HSequenceOfFreeBounds;
ref class OCTopoDS_Shape;
ref class OCShapeAnalysis_FreeBoundData;
ref class OCTopoDS_Wire;


//! This class is intended to calculate shape free bounds <br>
//!          properties. <br>
//!          This class provides the following functionalities: <br>
//!          - calculates area of the contour, <br>
//!          - calculates perimeter of the contour, <br>
//!          - calculates ratio of average length to average width of the <br>
//!            contour, <br>
//!          - estimates average width of contour, <br>
//!          - finds the notches (narrow 'V'-like sub-contour) on the <br>
//!            contour. <br>
public ref class OCShapeAnalysis_FreeBoundsProperties  {

protected:
  ShapeAnalysis_FreeBoundsProperties* nativeHandle;
  OCShapeAnalysis_FreeBoundsProperties(OCDummy^) {};

public:
  property ShapeAnalysis_FreeBoundsProperties* Handle
  {
    ShapeAnalysis_FreeBoundsProperties* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCShapeAnalysis_FreeBoundsProperties(ShapeAnalysis_FreeBoundsProperties* nativeHandle);

// Methods PUBLIC

//! Empty constructor <br>
OCShapeAnalysis_FreeBoundsProperties();

//! Creates the object and calls corresponding Init. <br>
//!          <shape> should be a compound of faces. <br>
OCShapeAnalysis_FreeBoundsProperties(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Real tolerance, System::Boolean splitclosed, System::Boolean splitopen);

//! Creates the object and calls corresponding Init. <br>
//!          <shape> should be a compound of shells. <br>
OCShapeAnalysis_FreeBoundsProperties(OCNaroWrappers::OCTopoDS_Shape^ shape, System::Boolean splitclosed, System::Boolean splitopen);

//! Initializes the object with given parameters. <br>
//!          <shape> should be a compound of faces. <br>
 /*instead*/  void Init(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Real tolerance, System::Boolean splitclosed, System::Boolean splitopen) ;

//! Initializes the object with given parameters. <br>
//!          <shape> should be a compound of shells. <br>
 /*instead*/  void Init(OCNaroWrappers::OCTopoDS_Shape^ shape, System::Boolean splitclosed, System::Boolean splitopen) ;

//! Builds and analyzes free bounds of the shape. <br>
//!          First calls ShapeAnalysis_FreeBounds for building free <br>
//!          bounds. <br>
//!          Then on each free bound computes its properties: <br>
//!          - area of the contour, <br>
//!          - perimeter of the contour, <br>
//!          - ratio of average length to average width of the contour, <br>
//!          - average width of contour, <br>
//!          - notches on the contour and for each notch <br>
//!            - maximum width of the notch. <br>
 /*instead*/  System::Boolean Perform() ;

//! Returns True if shape is loaded <br>
 /*instead*/  System::Boolean IsLoaded() ;

//! Returns shape <br>
 /*instead*/  OCTopoDS_Shape^ Shape() ;

//! Returns tolerance <br>
 /*instead*/  Standard_Real Tolerance() ;

//! Returns number of free bounds <br>
 /*instead*/  Standard_Integer NbFreeBounds() ;

//! Returns number of closed free bounds <br>
 /*instead*/  Standard_Integer NbClosedFreeBounds() ;

//! Returns number of open free bounds <br>
 /*instead*/  Standard_Integer NbOpenFreeBounds() ;

//! Returns all closed free bounds <br>
 /*instead*/  OCShapeAnalysis_HSequenceOfFreeBounds^ ClosedFreeBounds() ;

//! Returns all open free bounds <br>
 /*instead*/  OCShapeAnalysis_HSequenceOfFreeBounds^ OpenFreeBounds() ;

//! Returns properties of closed free bound specified by its rank <br>
//!          number <br>
 /*instead*/  OCShapeAnalysis_FreeBoundData^ ClosedFreeBound(Standard_Integer index) ;

//! Returns properties of open free bound specified by its rank <br>
//!          number <br>
 /*instead*/  OCShapeAnalysis_FreeBoundData^ OpenFreeBound(Standard_Integer index) ;


 /*instead*/  System::Boolean DispatchBounds() ;


 /*instead*/  System::Boolean CheckContours(Standard_Real prec) ;


 /*instead*/  System::Boolean CheckNotches(Standard_Real prec) ;


 /*instead*/  System::Boolean CheckNotches(OCNaroWrappers::OCShapeAnalysis_FreeBoundData^ fbData, Standard_Real prec) ;


 /*instead*/  System::Boolean CheckNotches(OCNaroWrappers::OCTopoDS_Wire^ freebound, Standard_Integer num, OCNaroWrappers::OCTopoDS_Wire^ notch, Standard_Real& distMax, Standard_Real prec) ;


 /*instead*/  System::Boolean FillProperties(OCNaroWrappers::OCShapeAnalysis_FreeBoundData^ fbData, Standard_Real prec) ;

~OCShapeAnalysis_FreeBoundsProperties()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
