// File generated by CPPExt (MPV)
//
#ifndef _ShapeAnalysis_FreeBounds_OCWrappers_HeaderFile
#define _ShapeAnalysis_FreeBounds_OCWrappers_HeaderFile

// include native header
#include <ShapeAnalysis_FreeBounds.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Compound.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopoDS_Compound;
ref class OCTopTools_HSequenceOfShape;
ref class OCTopTools_DataMapOfShapeShape;


//! This class is intended to output free bounds of the shape <br>
//!          (free bounds are the wires consisting of edges referenced by the <br>
//!          only face). <br>
//!          This class works on two distinct types of shapes when analyzing <br>
//!          their free bounds: <br>
//!          1. compound of faces. <br>
//!            Analyzer of sewing algorithm (BRepAlgo_Sewing) is used for <br>
//!            for forecasting free bounds that would be obtained after <br>
//!            performing sewing <br>
//!          2. compound of shells. <br>
//!            Actual free bounds (edges shared by the only face in the shell) <br>
//!            are output in this case. ShapeAnalysis_Shell is used for that. <br>
public ref class OCShapeAnalysis_FreeBounds  {

protected:
  ShapeAnalysis_FreeBounds* nativeHandle;
  OCShapeAnalysis_FreeBounds(OCDummy^) {};

public:
  property ShapeAnalysis_FreeBounds* Handle
  {
    ShapeAnalysis_FreeBounds* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCShapeAnalysis_FreeBounds(ShapeAnalysis_FreeBounds* nativeHandle);

// Methods PUBLIC

//! Empty constructor <br>
OCShapeAnalysis_FreeBounds();

//! Builds forecasting free bounds of the <shape>. <br>
//!          <shape> should be a compound of faces. <br>
//!          This constructor is to be used for forecasting free edges <br>
//!          with help of sewing analyzer BRepAlgo_Sewing which is called <br>
//!          with tolerance <toler>. <br>
//!          Free edges are connected into wires only when their ends are <br>
//!          at distance less than <toler>. <br>
//!          If <splitclosed> is True extracts closed sub-wires out of <br>
//!          built closed wires. <br>
//!          If <splitopen> is True extracts closed sub-wires out of <br>
//!          built open wires. <br>
OCShapeAnalysis_FreeBounds(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Real toler, System::Boolean splitclosed, System::Boolean splitopen);

//! Builds actual free bounds of the <shape>. <br>
//!          <shape> should be a compound of shells. <br>
//!          This constructor is to be used for getting free edges (ones <br>
//!          referenced by the only face) with help of analyzer <br>
//!          ShapeAnalysis_Shell. <br>
//!          Free edges are connected into wires only when they share the <br>
//!          same vertex. <br>
//!          If <splitclosed> is True extracts closed sub-wires out of <br>
//!          built closed wires. <br>
//!          If <splitopen> is True extracts closed sub-wires out of <br>
//!          built open wires. <br>
OCShapeAnalysis_FreeBounds(OCNaroWrappers::OCTopoDS_Shape^ shape, System::Boolean splitclosed, System::Boolean splitopen, System::Boolean checkinternaledges);

//! Returns compound of closed wires out of free edges. <br>
 /*instead*/  OCTopoDS_Compound^ GetClosedWires() ;

//! Returns compound of open wires out of free edges. <br>
 /*instead*/  OCTopoDS_Compound^ GetOpenWires() ;

//! Builds sequnce of <wires> out of sequence of not sorted <br>
//!          <edges>. <br>
//!          Tries to build wires of maximum length. Building a wire is <br>
//!          stopped when no edges can be connected to it at its head or <br>
//!          at its tail. <br>
static /*instead*/  void ConnectEdgesToWires(OCNaroWrappers::OCTopTools_HSequenceOfShape^ edges, Standard_Real toler, System::Boolean shared, OCNaroWrappers::OCTopTools_HSequenceOfShape^ wires) ;


static /*instead*/  void ConnectWiresToWires(OCNaroWrappers::OCTopTools_HSequenceOfShape^ iwires, Standard_Real toler, System::Boolean shared, OCNaroWrappers::OCTopTools_HSequenceOfShape^ owires) ;

//! Builds sequnce of <owires> out of sequence of not sorted <br>
//!          <iwires>. <br>
//!          Tries to build wires of maximum length. Building a wire is <br>
//!          stopped when no wires can be connected to it at its head or <br>
//!          at its tail. <br>
static /*instead*/  void ConnectWiresToWires(OCNaroWrappers::OCTopTools_HSequenceOfShape^ iwires, Standard_Real toler, System::Boolean shared, OCNaroWrappers::OCTopTools_HSequenceOfShape^ owires, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ vertices) ;

//! Extracts closed sub-wires out of <wires> and adds them <br>
//!          to <closed>, open wires remained after extraction are put <br>
//!          into <open>. <br>
//!          If <shared> is True extraction is performed only when <br>
//!          edges share the same vertex. <br>
//!          If <shared> is False connection is performed only when <br>
//!          ends of the edges are at distance less than <toler>. <br>
static /*instead*/  void SplitWires(OCNaroWrappers::OCTopTools_HSequenceOfShape^ wires, Standard_Real toler, System::Boolean shared, OCNaroWrappers::OCTopTools_HSequenceOfShape^ closed, OCNaroWrappers::OCTopTools_HSequenceOfShape^ open) ;

//! Dispatches sequence of <wires> into two compounds <br>
//!          <closed> for closed wires and <open> for open wires. <br>
//!          If a compound is not empty wires are added into it. <br>
static /*instead*/  void DispatchWires(OCNaroWrappers::OCTopTools_HSequenceOfShape^ wires, OCNaroWrappers::OCTopoDS_Compound^ closed, OCNaroWrappers::OCTopoDS_Compound^ open) ;

~OCShapeAnalysis_FreeBounds()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
