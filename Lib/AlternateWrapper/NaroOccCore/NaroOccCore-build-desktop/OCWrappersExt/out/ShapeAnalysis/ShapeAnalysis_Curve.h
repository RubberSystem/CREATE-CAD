// File generated by CPPExt (MPV)
//
#ifndef _ShapeAnalysis_Curve_OCWrappers_HeaderFile
#define _ShapeAnalysis_Curve_OCWrappers_HeaderFile

// include native header
#include <ShapeAnalysis_Curve.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCGeom_Curve;
ref class OCgp_Pnt;
ref class OCAdaptor3d_Curve;
ref class OCGeom2d_Curve;
ref class OCBnd_Box2d;
ref class OCTColgp_Array1OfPnt;
ref class OCgp_XYZ;
ref class OCTColgp_SequenceOfPnt2d;
ref class OCTColgp_SequenceOfPnt;


//! Analyzing tool for 2d or 3d curve. <br>
//!          Computes parameters of projected point onto a curve. <br>
public ref class OCShapeAnalysis_Curve  {

protected:
  ShapeAnalysis_Curve* nativeHandle;
  OCShapeAnalysis_Curve(OCDummy^) {};

public:
  property ShapeAnalysis_Curve* Handle
  {
    ShapeAnalysis_Curve* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCShapeAnalysis_Curve(ShapeAnalysis_Curve* nativeHandle);

// Methods PUBLIC

//! Projects a Point on a Curve. <br>
//!           Computes the projected point and its parameter on the curve. <br>
//!           <preci> is used as 3d precision (hence, 0 will produce <br>
//!           reject unless exact confusion). <br>
//!           The number of iterations is limited. <br>
//!           If AdjustToEnds is True, point will be adjusted to the end <br>
//!           of the curve if distance is less than <preci> <br>
//! <br>
//!           Returned value is the distance between the given point and <br>
//!           computed one. <br>
 /*instead*/  Standard_Real Project(OCNaroWrappers::OCGeom_Curve^ C3D, OCNaroWrappers::OCgp_Pnt^ P3D, Standard_Real preci, OCNaroWrappers::OCgp_Pnt^ proj, Standard_Real& param, System::Boolean AdjustToEnds) ;

//! Projects a Point on a Curve. <br>
//!           Computes the projected point and its parameter on the curve. <br>
//!           <preci> is used as 3d precision (hence, 0 will produce <br>
//!           reject unless exact confusion). <br>
//!           The number of iterations is limited. <br>
//! <br>
//!           Returned value is the distance between the given point and <br>
//!           computed one. <br>
 /*instead*/  Standard_Real Project(OCNaroWrappers::OCAdaptor3d_Curve^ C3D, OCNaroWrappers::OCgp_Pnt^ P3D, Standard_Real preci, OCNaroWrappers::OCgp_Pnt^ proj, Standard_Real& param, System::Boolean AdjustToEnds) ;

//! Projects a Point on a Curve, but parameters are limited <br>
//!           between <cf> and <cl>. <br>
//!           The range [cf, cl] is extended with help of Adaptor3d on the <br>
//!           basis of 3d precision <preci>. <br>
//!           If AdjustToEnds is True, point will be adjusted to the end <br>
//!           of the curve if distance is less than <preci> <br>
 /*instead*/  Standard_Real Project(OCNaroWrappers::OCGeom_Curve^ C3D, OCNaroWrappers::OCgp_Pnt^ P3D, Standard_Real preci, OCNaroWrappers::OCgp_Pnt^ proj, Standard_Real& param, Standard_Real cf, Standard_Real cl, System::Boolean AdjustToEnds) ;


 /*instead*/  Standard_Real ProjectAct(OCNaroWrappers::OCAdaptor3d_Curve^ C3D, OCNaroWrappers::OCgp_Pnt^ P3D, Standard_Real preci, OCNaroWrappers::OCgp_Pnt^ proj, Standard_Real& param) ;

//! Projects a Point on a Curve using Newton method. <br>
//!          <paramPrev> is taken as the first approximation of solution. <br>
//!          If Newton algorithm fails the method Project() is used. <br>
//!          If AdjustToEnds is True, point will be adjusted to the end <br>
//!          of the curve if distance is less than <preci> <br>
 /*instead*/  Standard_Real NextProject(Standard_Real paramPrev, OCNaroWrappers::OCGeom_Curve^ C3D, OCNaroWrappers::OCgp_Pnt^ P3D, Standard_Real preci, OCNaroWrappers::OCgp_Pnt^ proj, Standard_Real& param, Standard_Real cf, Standard_Real cl, System::Boolean AdjustToEnds) ;

//! Projects a Point on a Curve using Newton method. <br>
//!          <paramPrev> is taken as the first approximation of solution. <br>
//!          If Newton algorithm fails the method Project() is used. <br>
 /*instead*/  Standard_Real NextProject(Standard_Real paramPrev, OCNaroWrappers::OCAdaptor3d_Curve^ C3D, OCNaroWrappers::OCgp_Pnt^ P3D, Standard_Real preci, OCNaroWrappers::OCgp_Pnt^ proj, Standard_Real& param) ;

//! Validate parameters First and Last for the given curve <br>
//!          in order to make them valid for creation of edge. <br>
//!          This includes: <br>
//!          - limiting range [First,Last] by range of curve <br>
//!          - adjusting range [First,Last] for periodic (or closed) <br>
//!            curve if Last < First <br>
//!          Returns True if parameters are OK or are successfully <br>
//!          corrected, or False if parameters cannot be corrected. <br>
//!          In the latter case, parameters are reset to range of curve. <br>
 /*instead*/  System::Boolean ValidateRange(OCNaroWrappers::OCGeom_Curve^ Crv, Standard_Real& First, Standard_Real& Last, Standard_Real prec) ;

//! Computes a boundary box on segment of curve C2d from First <br>
//!          to Last. This is done by taking NPoints points from the <br>
//!          curve and, if Exact is True, by searching for exact <br>
//!          extrema. All these points are added to Box. <br>
 /*instead*/  void FillBndBox(OCNaroWrappers::OCGeom2d_Curve^ C2d, Standard_Real First, Standard_Real Last, Standard_Integer NPoints, System::Boolean Exact, OCNaroWrappers::OCBnd_Box2d^ Box) ;

//! Defines which pcurve (C1 or C2) should be chosen for FORWARD <br>
//!          seam edge. <br>
 /*instead*/  Standard_Integer SelectForwardSeam(OCNaroWrappers::OCGeom2d_Curve^ C1, OCNaroWrappers::OCGeom2d_Curve^ C2) ;

//! Checks if points are planar with given preci. If Normal has not zero <br>
//!          modulus, checks with given normal <br>
static /*instead*/  System::Boolean IsPlanar(OCNaroWrappers::OCTColgp_Array1OfPnt^ pnts, OCNaroWrappers::OCgp_XYZ^ Normal, Standard_Real preci) ;

//! Checks if curve is planar with given preci. If Normal has not zero <br>
//!          modulus, checks with given normal <br>
static /*instead*/  System::Boolean IsPlanar(OCNaroWrappers::OCGeom_Curve^ curve, OCNaroWrappers::OCgp_XYZ^ Normal, Standard_Real preci) ;

//! Returns sample points which will serve as linearisation <br>
//!          of the2d curve in range (first, last) <br>
//!          The distribution of sample points is consystent with <br>
//!          what is used by BRepTopAdaptor_FClass2d <br>
static /*instead*/  System::Boolean GetSamplePoints(OCNaroWrappers::OCGeom2d_Curve^ curve, Standard_Real first, Standard_Real last, OCNaroWrappers::OCTColgp_SequenceOfPnt2d^ seq) ;

//! Returns sample points which will serve as linearisation <br>
//!          of the curve in range (first, last) <br>
static /*instead*/  System::Boolean GetSamplePoints(OCNaroWrappers::OCGeom_Curve^ curve, Standard_Real first, Standard_Real last, OCNaroWrappers::OCTColgp_SequenceOfPnt^ seq) ;

//! Tells if the Curve is closed with given precision. <br>
//!          If <preci> < 0 then Precision::Confusion is used. <br>
static /*instead*/  System::Boolean IsClosed(OCNaroWrappers::OCGeom_Curve^ curve, Standard_Real preci) ;

//! This method was implemented as fix for changes in trimmed curve <br>
//!          behaviour. For the moment trimmed curve returns false anyway. <br>
//!          So it is necessary to adapt all Data exchange tools for this behaviour. <br>
//!          Current implementation takes into account that curve may be offset. <br>
static /*instead*/  System::Boolean IsPeriodic(OCNaroWrappers::OCGeom_Curve^ curve) ;

//! The same as for Curve3d. <br>
static /*instead*/  System::Boolean IsPeriodic(OCNaroWrappers::OCGeom2d_Curve^ curve) ;

~OCShapeAnalysis_Curve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
