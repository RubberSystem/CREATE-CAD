// File generated by CPPExt (CPP file)
//

#include "ShapeAnalysis_FreeBoundsProperties.h"
#include "../Converter.h"
#include "ShapeAnalysis_HSequenceOfFreeBounds.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "ShapeAnalysis_FreeBoundData.h"
#include "../TopoDS/TopoDS_Wire.h"


using namespace OCNaroWrappers;

OCShapeAnalysis_FreeBoundsProperties::OCShapeAnalysis_FreeBoundsProperties(ShapeAnalysis_FreeBoundsProperties* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCShapeAnalysis_FreeBoundsProperties::OCShapeAnalysis_FreeBoundsProperties() 
{
  nativeHandle = new ShapeAnalysis_FreeBoundsProperties();
}

OCShapeAnalysis_FreeBoundsProperties::OCShapeAnalysis_FreeBoundsProperties(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Real tolerance, System::Boolean splitclosed, System::Boolean splitopen) 
{
  nativeHandle = new ShapeAnalysis_FreeBoundsProperties(*((TopoDS_Shape*)shape->Handle), tolerance, OCConverter::BooleanToStandardBoolean(splitclosed), OCConverter::BooleanToStandardBoolean(splitopen));
}

OCShapeAnalysis_FreeBoundsProperties::OCShapeAnalysis_FreeBoundsProperties(OCNaroWrappers::OCTopoDS_Shape^ shape, System::Boolean splitclosed, System::Boolean splitopen) 
{
  nativeHandle = new ShapeAnalysis_FreeBoundsProperties(*((TopoDS_Shape*)shape->Handle), OCConverter::BooleanToStandardBoolean(splitclosed), OCConverter::BooleanToStandardBoolean(splitopen));
}

 void OCShapeAnalysis_FreeBoundsProperties::Init(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Real tolerance, System::Boolean splitclosed, System::Boolean splitopen)
{
  ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->Init(*((TopoDS_Shape*)shape->Handle), tolerance, OCConverter::BooleanToStandardBoolean(splitclosed), OCConverter::BooleanToStandardBoolean(splitopen));
}

 void OCShapeAnalysis_FreeBoundsProperties::Init(OCNaroWrappers::OCTopoDS_Shape^ shape, System::Boolean splitclosed, System::Boolean splitopen)
{
  ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->Init(*((TopoDS_Shape*)shape->Handle), OCConverter::BooleanToStandardBoolean(splitclosed), OCConverter::BooleanToStandardBoolean(splitopen));
}

 System::Boolean OCShapeAnalysis_FreeBoundsProperties::Perform()
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->Perform());
}

 System::Boolean OCShapeAnalysis_FreeBoundsProperties::IsLoaded()
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->IsLoaded());
}

OCTopoDS_Shape^ OCShapeAnalysis_FreeBoundsProperties::Shape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->Shape();
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Real OCShapeAnalysis_FreeBoundsProperties::Tolerance()
{
  return ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->Tolerance();
}

 Standard_Integer OCShapeAnalysis_FreeBoundsProperties::NbFreeBounds()
{
  return ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->NbFreeBounds();
}

 Standard_Integer OCShapeAnalysis_FreeBoundsProperties::NbClosedFreeBounds()
{
  return ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->NbClosedFreeBounds();
}

 Standard_Integer OCShapeAnalysis_FreeBoundsProperties::NbOpenFreeBounds()
{
  return ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->NbOpenFreeBounds();
}

OCShapeAnalysis_HSequenceOfFreeBounds^ OCShapeAnalysis_FreeBoundsProperties::ClosedFreeBounds()
{
  Handle(ShapeAnalysis_HSequenceOfFreeBounds) tmp = ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->ClosedFreeBounds();
  return gcnew OCShapeAnalysis_HSequenceOfFreeBounds(&tmp);
}

OCShapeAnalysis_HSequenceOfFreeBounds^ OCShapeAnalysis_FreeBoundsProperties::OpenFreeBounds()
{
  Handle(ShapeAnalysis_HSequenceOfFreeBounds) tmp = ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->OpenFreeBounds();
  return gcnew OCShapeAnalysis_HSequenceOfFreeBounds(&tmp);
}

OCShapeAnalysis_FreeBoundData^ OCShapeAnalysis_FreeBoundsProperties::ClosedFreeBound(Standard_Integer index)
{
  Handle(ShapeAnalysis_FreeBoundData) tmp = ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->ClosedFreeBound(index);
  return gcnew OCShapeAnalysis_FreeBoundData(&tmp);
}

OCShapeAnalysis_FreeBoundData^ OCShapeAnalysis_FreeBoundsProperties::OpenFreeBound(Standard_Integer index)
{
  Handle(ShapeAnalysis_FreeBoundData) tmp = ((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->OpenFreeBound(index);
  return gcnew OCShapeAnalysis_FreeBoundData(&tmp);
}

 System::Boolean OCShapeAnalysis_FreeBoundsProperties::DispatchBounds()
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->DispatchBounds());
}

 System::Boolean OCShapeAnalysis_FreeBoundsProperties::CheckContours(Standard_Real prec)
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->CheckContours(prec));
}

 System::Boolean OCShapeAnalysis_FreeBoundsProperties::CheckNotches(Standard_Real prec)
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->CheckNotches(prec));
}

 System::Boolean OCShapeAnalysis_FreeBoundsProperties::CheckNotches(OCNaroWrappers::OCShapeAnalysis_FreeBoundData^ fbData, Standard_Real prec)
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->CheckNotches(*((Handle_ShapeAnalysis_FreeBoundData*)fbData->Handle), prec));
}

 System::Boolean OCShapeAnalysis_FreeBoundsProperties::CheckNotches(OCNaroWrappers::OCTopoDS_Wire^ freebound, Standard_Integer num, OCNaroWrappers::OCTopoDS_Wire^ notch, Standard_Real& distMax, Standard_Real prec)
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->CheckNotches(*((TopoDS_Wire*)freebound->Handle), num, *((TopoDS_Wire*)notch->Handle), distMax, prec));
}

 System::Boolean OCShapeAnalysis_FreeBoundsProperties::FillProperties(OCNaroWrappers::OCShapeAnalysis_FreeBoundData^ fbData, Standard_Real prec)
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_FreeBoundsProperties*)nativeHandle)->FillProperties(*((Handle_ShapeAnalysis_FreeBoundData*)fbData->Handle), prec));
}


