// File generated by CPPExt (CPP file)
//

#include "ShapeAnalysis_Shell.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopoDS/TopoDS_Compound.h"


using namespace OCNaroWrappers;

OCShapeAnalysis_Shell::OCShapeAnalysis_Shell(ShapeAnalysis_Shell* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 void OCShapeAnalysis_Shell::Clear()
{
  ((ShapeAnalysis_Shell*)nativeHandle)->Clear();
}

 void OCShapeAnalysis_Shell::LoadShells(OCNaroWrappers::OCTopoDS_Shape^ shape)
{
  ((ShapeAnalysis_Shell*)nativeHandle)->LoadShells(*((TopoDS_Shape*)shape->Handle));
}

 System::Boolean OCShapeAnalysis_Shell::CheckOrientedShells(OCNaroWrappers::OCTopoDS_Shape^ shape, System::Boolean alsofree, System::Boolean checkinternaledges)
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_Shell*)nativeHandle)->CheckOrientedShells(*((TopoDS_Shape*)shape->Handle), OCConverter::BooleanToStandardBoolean(alsofree), OCConverter::BooleanToStandardBoolean(checkinternaledges)));
}

 System::Boolean OCShapeAnalysis_Shell::IsLoaded(OCNaroWrappers::OCTopoDS_Shape^ shape)
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_Shell*)nativeHandle)->IsLoaded(*((TopoDS_Shape*)shape->Handle)));
}

 Standard_Integer OCShapeAnalysis_Shell::NbLoaded()
{
  return ((ShapeAnalysis_Shell*)nativeHandle)->NbLoaded();
}

OCTopoDS_Shape^ OCShapeAnalysis_Shell::Loaded(Standard_Integer num)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((ShapeAnalysis_Shell*)nativeHandle)->Loaded(num);
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCShapeAnalysis_Shell::HasBadEdges()
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_Shell*)nativeHandle)->HasBadEdges());
}

OCTopoDS_Compound^ OCShapeAnalysis_Shell::BadEdges()
{
  TopoDS_Compound* tmp = new TopoDS_Compound();
  *tmp = ((ShapeAnalysis_Shell*)nativeHandle)->BadEdges();
  return gcnew OCTopoDS_Compound(tmp);
}

 System::Boolean OCShapeAnalysis_Shell::HasFreeEdges()
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_Shell*)nativeHandle)->HasFreeEdges());
}

OCTopoDS_Compound^ OCShapeAnalysis_Shell::FreeEdges()
{
  TopoDS_Compound* tmp = new TopoDS_Compound();
  *tmp = ((ShapeAnalysis_Shell*)nativeHandle)->FreeEdges();
  return gcnew OCTopoDS_Compound(tmp);
}

 System::Boolean OCShapeAnalysis_Shell::HasConnectedEdges()
{
  return OCConverter::StandardBooleanToBoolean(((ShapeAnalysis_Shell*)nativeHandle)->HasConnectedEdges());
}


