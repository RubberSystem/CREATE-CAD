// File generated by CPPExt (MPV)
//
#ifndef _ShapeAnalysis_WireVertex_OCWrappers_HeaderFile
#define _ShapeAnalysis_WireVertex_OCWrappers_HeaderFile

// include native header
#include <ShapeAnalysis_WireVertex.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCShapeExtend_WireData;
ref class OCTColStd_HArray1OfInteger;
ref class OCTColgp_HArray1OfXYZ;
ref class OCTColStd_HArray1OfReal;
ref class OCTopoDS_Wire;
ref class OCgp_XYZ;


//! Analyzes and records status of vertices in a Wire <br>
//! <br>
//!          The Wire has formerly been loaded in a ShapeExtend_WireData <br>
//!          For each Vertex, a status and some data can be attached <br>
//!          (case found, position and parameters) <br>
//!          Then, these informations can be used to fix problems <br>
public ref class OCShapeAnalysis_WireVertex  {

protected:
  ShapeAnalysis_WireVertex* nativeHandle;
  OCShapeAnalysis_WireVertex(OCDummy^) {};

public:
  property ShapeAnalysis_WireVertex* Handle
  {
    ShapeAnalysis_WireVertex* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCShapeAnalysis_WireVertex(ShapeAnalysis_WireVertex* nativeHandle);

// Methods PUBLIC

//! Empty constructor <br>
OCShapeAnalysis_WireVertex();


 /*instead*/  void Init(OCNaroWrappers::OCTopoDS_Wire^ wire, Standard_Real preci) ;


 /*instead*/  void Init(OCNaroWrappers::OCShapeExtend_WireData^ swbd, Standard_Real preci) ;


 /*instead*/  void Load(OCNaroWrappers::OCTopoDS_Wire^ wire) ;


 /*instead*/  void Load(OCNaroWrappers::OCShapeExtend_WireData^ sbwd) ;

//! Sets the precision for work <br>
//!          Analysing: for each Vertex, comparison between the end of the <br>
//!          preceeding edge and the start of the following edge <br>
//!          Each Vertex rank corresponds to the End Vertex of the Edge of <br>
//!          same rank, in the ShapeExtend_WireData. I.E. for Vertex <num>, <br>
//!          Edge <num> is the preceeding one, <num+1> is the following one <br>
 /*instead*/  void SetPrecision(Standard_Real preci) ;


 /*instead*/  void Analyze() ;

//! Records status "Same Vertex" (logically) on Vertex <num> <br>
 /*instead*/  void SetSameVertex(Standard_Integer num) ;

//! Records status "Same Coords" (at the Vertices Tolerances) <br>
 /*instead*/  void SetSameCoords(Standard_Integer num) ;

//! Records status "Close Coords" (at the Precision of <me>) <br>
 /*instead*/  void SetClose(Standard_Integer num) ;

//! <num> is the End of preceeding Edge, and its projection on the <br>
//!          following one lies on it at the Precision of <me> <br>
//!          <ufol> gives the parameter on the following edge <br>
 /*instead*/  void SetEnd(Standard_Integer num, OCNaroWrappers::OCgp_XYZ^ pos, Standard_Real ufol) ;

//! <num> is the Start of following Edge, its projection on the <br>
//!          preceeding one lies on it at the Precision of <me> <br>
//!          <upre> gives the parameter on the preceeding edge <br>
 /*instead*/  void SetStart(Standard_Integer num, OCNaroWrappers::OCgp_XYZ^ pos, Standard_Real upre) ;

//! <num> is the Intersection of both Edges <br>
//!          <upre> is the parameter on preceeding edge, <ufol> on <br>
//!          following edge <br>
 /*instead*/  void SetInters(Standard_Integer num, OCNaroWrappers::OCgp_XYZ^ pos, Standard_Real upre, Standard_Real ufol) ;

//! <num> cannot be said as same vertex <br>
 /*instead*/  void SetDisjoined(Standard_Integer num) ;

//! Returns True if analysis was performed, else returns False <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns precision value used in analysis <br>
 /*instead*/  Standard_Real Precision() ;

//! Returns the number of edges in analyzed wire (i.e. the <br>
//!          length of all arrays) <br>
 /*instead*/  Standard_Integer NbEdges() ;

//! Returns analyzed wire <br>
 /*instead*/  OCShapeExtend_WireData^ WireData() ;

//! Returns the recorded status for a vertex <br>
//!          More detail by method Data <br>
 /*instead*/  Standard_Integer Status(Standard_Integer num) ;


 /*instead*/  OCgp_XYZ^ Position(Standard_Integer num) ;


 /*instead*/  Standard_Real UPrevious(Standard_Integer num) ;


 /*instead*/  Standard_Real UFollowing(Standard_Integer num) ;

//! Returns the recorded status for a vertex <br>
//!          With its recorded position and parameters on both edges <br>
//!          These values are relevant regarding the status: <br>
//!          Status  Meaning   Position  Preceeding  Following <br>
//!          0       Same       no        no          no <br>
//!          1       SameCoord  no        no          no <br>
//!          2       Close      no        no          no <br>
//!          3       End        yes       no          yes <br>
//!          4       Start      yes       yes         no <br>
//!          5       Inters     yes       yes         yes <br>
//!         -1       Disjoined  no        no          no <br>
 /*instead*/  Standard_Integer Data(Standard_Integer num, OCNaroWrappers::OCgp_XYZ^ pos, Standard_Real& upre, Standard_Real& ufol) ;

//! For a given status, returns the rank of the vertex which <br>
//!          follows <num> and has the same status. 0 if no more <br>
//!          Acts as an iterator, starts on the first one <br>
 /*instead*/  Standard_Integer NextStatus(Standard_Integer stat, Standard_Integer num) ;

//! For a given criter, returns the rank of the vertex which <br>
//!           follows <num> and has the same status. 0 if no more <br>
//!           Acts as an iterator, starts on the first one <br>
//!           Criters are: <br>
//!           0: same vertex (status 0) <br>
//!           1: a solution exists (status >= 0) <br>
//!           2: same coords (i.e. same params) (status 0 1 2) <br>
//!           3: same coods but not same vertex (status 1 2) <br>
//!           4: redefined coords (status 3 4 5) <br>
//!          -1: no solution (status -1) <br>
 /*instead*/  Standard_Integer NextCriter(Standard_Integer crit, Standard_Integer num) ;

~OCShapeAnalysis_WireVertex()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
