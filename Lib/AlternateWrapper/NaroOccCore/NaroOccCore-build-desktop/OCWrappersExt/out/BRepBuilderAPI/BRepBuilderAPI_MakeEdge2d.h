// File generated by CPPExt (MPV)
//
#ifndef _BRepBuilderAPI_MakeEdge2d_OCWrappers_HeaderFile
#define _BRepBuilderAPI_MakeEdge2d_OCWrappers_HeaderFile

// include native header
#include <BRepBuilderAPI_MakeEdge2d.hxx>
#include "../Converter.h"

#include "BRepBuilderAPI_MakeShape.h"

#include "../BRepLib/BRepLib_MakeEdge2d.h"
#include "BRepBuilderAPI_MakeShape.h"
#include "BRepBuilderAPI_EdgeError.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Vertex;
ref class OCgp_Pnt2d;
ref class OCgp_Lin2d;
ref class OCgp_Circ2d;
ref class OCgp_Elips2d;
ref class OCgp_Hypr2d;
ref class OCgp_Parab2d;
ref class OCGeom2d_Curve;
ref class OCTopoDS_Edge;


//! Provides methods to build edges. <br>
//! <br>
//!          The   methods have  the  following   syntax, where <br>
//!          TheCurve is one of Lin2d, Circ2d, ... <br>
//! <br>
//!          Create(C : TheCurve) <br>
//! <br>
//!            Makes an edge on  the whole curve.  Add vertices <br>
//!            on finite curves. <br>
//! <br>
//!          Create(C : TheCurve; p1,p2 : Real) <br>
//! <br>
//!            Make an edge  on the curve between parameters p1 <br>
//!            and p2. if p2 < p1 the edge will be REVERSED. If <br>
//!            p1  or p2 is infinite the  curve will be open in <br>
//!            that  direction. Vertices are created for finite <br>
//!            values of p1 and p2. <br>
//! <br>
//!          Create(C : TheCurve; P1, P2 : Pnt2d from gp) <br>
//! <br>
//!            Make an edge on the curve  between the points P1 <br>
//!            and P2. The  points are projected on   the curve <br>
//!            and the   previous method is  used. An  error is <br>
//!            raised if the points are not on the curve. <br>
//! <br>
//!          Create(C : TheCurve; V1, V2 : Vertex from TopoDS) <br>
//! <br>
//!            Make an edge  on the curve  between the vertices <br>
//!            V1 and V2. Same as the  previous but no vertices <br>
//!            are created. If a vertex is  Null the curve will <br>
//!            be open in this direction. <br>
public ref class OCBRepBuilderAPI_MakeEdge2d  : public OCBRepBuilderAPI_MakeShape {

protected:
  // dummy constructor;
  OCBRepBuilderAPI_MakeEdge2d(OCDummy^) : OCBRepBuilderAPI_MakeShape((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepBuilderAPI_MakeEdge2d(BRepBuilderAPI_MakeEdge2d* nativeHandle);

// Methods PUBLIC


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Lin2d^ L);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real p1, Standard_Real p2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Circ2d^ L);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Circ2d^ L, Standard_Real p1, Standard_Real p2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Circ2d^ L, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Circ2d^ L, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Elips2d^ L);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Elips2d^ L, Standard_Real p1, Standard_Real p2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Elips2d^ L, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Elips2d^ L, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Hypr2d^ L);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Hypr2d^ L, Standard_Real p1, Standard_Real p2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Hypr2d^ L, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Hypr2d^ L, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Parab2d^ L);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Parab2d^ L, Standard_Real p1, Standard_Real p2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Parab2d^ L, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCgp_Parab2d^ L, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCGeom2d_Curve^ L);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCGeom2d_Curve^ L, Standard_Real p1, Standard_Real p2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCGeom2d_Curve^ L, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCGeom2d_Curve^ L, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCGeom2d_Curve^ L, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2, Standard_Real p1, Standard_Real p2);


OCBRepBuilderAPI_MakeEdge2d(OCNaroWrappers::OCGeom2d_Curve^ L, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2, Standard_Real p1, Standard_Real p2);


 /*instead*/  void Init(OCNaroWrappers::OCGeom2d_Curve^ C) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom2d_Curve^ C, Standard_Real p1, Standard_Real p2) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom2d_Curve^ C, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom2d_Curve^ C, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom2d_Curve^ C, OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2, Standard_Real p1, Standard_Real p2) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom2d_Curve^ C, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2, Standard_Real p1, Standard_Real p2) ;


virtual /*instead*/  System::Boolean IsDone() override;

//! Returns the error description when NotDone. <br>
 /*instead*/  OCBRepBuilderAPI_EdgeError Error() ;


 /*instead*/  OCTopoDS_Edge^ Edge() ;

//! Returns the first vertex of the edge. May be Null. <br>
//! <br>
 /*instead*/  OCTopoDS_Vertex^ Vertex1() ;

//! Returns the second vertex of the edge. May be Null. <br>
//! <br>
 /*instead*/  OCTopoDS_Vertex^ Vertex2() ;

~OCBRepBuilderAPI_MakeEdge2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
