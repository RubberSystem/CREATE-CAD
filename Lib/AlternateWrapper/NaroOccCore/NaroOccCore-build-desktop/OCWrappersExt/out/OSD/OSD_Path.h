// File generated by CPPExt (MPV)
//
#ifndef _OSD_Path_OCWrappers_HeaderFile
#define _OSD_Path_OCWrappers_HeaderFile

// include native header
#include <OSD_Path.hxx>
#include "../Converter.h"


#include "../TCollection/TCollection_AsciiString.h"
#include "OSD_SysType.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;



public ref class OCOSD_Path  {

protected:
  OSD_Path* nativeHandle;
  OCOSD_Path(OCDummy^) {};

public:
  property OSD_Path* Handle
  {
    OSD_Path* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCOSD_Path(OSD_Path* nativeHandle);

// Methods PUBLIC

//! Creates a Path object initialized to an empty string. <br>
//!          i.e. current directory. <br>
OCOSD_Path();

//! Creates a Path object initialized by dependant path. <br>
//!          ex: OSD_Path me ("/usr/bin/myprog.sh",OSD_UnixBSD); <br>
//! <br>
//!              OSD_Path me ("sys$common:[syslib]cc.exe",OSD_OSF) will <br>
//!              raise a ProgramError due to invalid name for this <br>
//!              type of system. <br>
//!              In order to avoid a 'ProgramError' , use IsValid(...) <br>
//!              to ensure you the validity of <aDependentName>. <br>
//!              Raises ConstructionError when the path is either null <br>
//!              or contains characters not in range of ' '...'~'. <br>
OCOSD_Path(OCNaroWrappers::OCTCollection_AsciiString^ aDependentName, OCOSD_SysType aSysType);

//! Initializes a system independent path. <br>
//!          By default , the Path conversion will be assumed using <br>
//!          currently used system. <br>
//!          A special syntax is used to specify a "aTrek" in an <br>
//!          independent manner : <br>
//!          a "|" represents directory separator <br>
//!          a "^" means directory above (father) <br>
//!          examples: <br>
//!          "|usr|bin" - On UNIX -> "/usr/bin" <br>
//!                     - On VMS  -> "[usr.bin]" <br>
//!                     - On MSDOS-> "\usr\bin" <br>
//!                     - On MacOs-> ": usr : bin" <br>
OCOSD_Path(OCNaroWrappers::OCTCollection_AsciiString^ aNode, OCNaroWrappers::OCTCollection_AsciiString^ aUsername, OCNaroWrappers::OCTCollection_AsciiString^ aPassword, OCNaroWrappers::OCTCollection_AsciiString^ aDisk, OCNaroWrappers::OCTCollection_AsciiString^ aTrek, OCNaroWrappers::OCTCollection_AsciiString^ aName, OCNaroWrappers::OCTCollection_AsciiString^ anExtension);

//! Gets each component of a path. <br>
 /*instead*/  void Values(OCNaroWrappers::OCTCollection_AsciiString^ aNode, OCNaroWrappers::OCTCollection_AsciiString^ aUsername, OCNaroWrappers::OCTCollection_AsciiString^ aPassword, OCNaroWrappers::OCTCollection_AsciiString^ aDisk, OCNaroWrappers::OCTCollection_AsciiString^ aTrek, OCNaroWrappers::OCTCollection_AsciiString^ aName, OCNaroWrappers::OCTCollection_AsciiString^ anExtension) ;

//! Sets each component of a path. <br>
 /*instead*/  void SetValues(OCNaroWrappers::OCTCollection_AsciiString^ aNode, OCNaroWrappers::OCTCollection_AsciiString^ aUsername, OCNaroWrappers::OCTCollection_AsciiString^ aPassword, OCNaroWrappers::OCTCollection_AsciiString^ aDisk, OCNaroWrappers::OCTCollection_AsciiString^ aTrek, OCNaroWrappers::OCTCollection_AsciiString^ aName, OCNaroWrappers::OCTCollection_AsciiString^ anExtension) ;

//! Returns system dependent path <br>
//!          <aType> is one among Unix,VMS ... <br>
//!          This function is not private because you may need to <br>
//!          display system dependent path on a front-end. <br>
//!          It can be useful when communicating with another system. <br>
//!          For instance when you want to communicate between VMS and Unix <br>
//!          to transfer files, or to do a remote procedure call <br>
//!          using files. <br>
//!          example : <br>
//!          OSD_Path myPath ("sparc4", "sga", "secret_passwd", <br>
//!                           "$5$dkb100","|users|examples"); <br>
//!          Internal ( Dependent_name ); <br>
//!          On UNIX  sga"secret_passwd"@sparc4:/users/examples <br>
//!          On VMS   sparc4"sga secret_passwd"::$5$dkb100:[users.examples] <br>//! Sets each component of a Path giving its system dependent name. <br>
 /*instead*/  void SystemName(OCNaroWrappers::OCTCollection_AsciiString^ FullName, OCOSD_SysType aType) ;

//! Returns system dependent path resolving logical symbols. <br>
 /*instead*/  void ExpandedName(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Returns TRUE if <aDependentName> is valid for this SysType. <br>
 /*instead*/  System::Boolean IsValid(OCNaroWrappers::OCTCollection_AsciiString^ aDependentName, OCOSD_SysType aSysType) ;

//! This removes the last directory name in <aTrek> <br>
//!          and returns result. <br>
//!          ex:  me = "|usr|bin|todo.sh" <br>
//!               me.UpTrek() gives me = "|usr|todo.sh" <br>
//!          if <me> contains "|", me.UpTrek() will give again "|" <br>
//!          without any error. <br>
 /*instead*/  void UpTrek() ;

//! This appends a directory name into the Trek. <br>
//!          ex: me = "|usr|todo.sh" <br>
//!              me.DownTrek("bin") gives me = "|usr|bin|todo.sh". <br>
 /*instead*/  void DownTrek(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Returns number of components in Trek of <me>. <br>
//!          ex: me = "|usr|sys|etc|bin" <br>
//!              me.TrekLength() returns 4. <br>
 /*instead*/  Standard_Integer TrekLength() ;

//! This removes a component of Trek in <me> at position <where>. <br>
//!          The first component of Trek is numbered 1. <br>
//!          ex:   me = "|usr|bin|" <br>
//!                me.RemoveATrek(1) gives me = "|bin|" <br>
//!          To avoid a 'NumericError' because of a bad <where>, use <br>
//!          TrekLength() to know number of components of Trek in <me>. <br>
 /*instead*/  void RemoveATrek(Standard_Integer where) ;

//! This removes <aName> from <me> in Trek. <br>
//!          No error is raised if <aName> is not in <me>. <br>
//!          ex:  me = "|usr|sys|etc|doc" <br>
//!               me.RemoveATrek("sys") gives me = "|usr|etc|doc". <br>
 /*instead*/  void RemoveATrek(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Returns component of Trek in <me> at position <where>. <br>
//!          ex:  me = "|usr|bin|sys|" <br>
//!               me.TrekValue(2) returns "bin" <br>
 /*instead*/  OCTCollection_AsciiString^ TrekValue(Standard_Integer where) ;

//! This inserts <aName> at position <where> into Trek of <me>. <br>
//!          ex:  me = "|usr|etc|" <br>
//!               me.InsertATrek("sys",2) gives me = "|usr|sys|etc" <br>
 /*instead*/  void InsertATrek(OCNaroWrappers::OCTCollection_AsciiString^ aName, Standard_Integer where) ;

//! Returns Node of <me>. <br>
 /*instead*/  OCTCollection_AsciiString^ Node() ;

//! Returns UserName of <me>. <br>
 /*instead*/  OCTCollection_AsciiString^ UserName() ;

//! Returns Password of <me>. <br>
 /*instead*/  OCTCollection_AsciiString^ Password() ;

//! Returns Disk of <me>. <br>
 /*instead*/  OCTCollection_AsciiString^ Disk() ;

//! Returns Trek of <me>. <br>
 /*instead*/  OCTCollection_AsciiString^ Trek() ;

//! Returns file name of <me>. <br>
//!          If <me> hasn't been initialized, it returns an empty AsciiString. <br>
 /*instead*/  OCTCollection_AsciiString^ Name() ;

//! Returns my extension name. <br>
//!          This returns an empty string if path contains no file name. <br>
 /*instead*/  OCTCollection_AsciiString^ Extension() ;

//! Sets Node of <me>. <br>
 /*instead*/  void SetNode(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Sets UserName of <me>. <br>
 /*instead*/  void SetUserName(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Sets Password of <me>. <br>
 /*instead*/  void SetPassword(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Sets Disk of <me>. <br>
 /*instead*/  void SetDisk(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Sets Trek of <me>. <br>
 /*instead*/  void SetTrek(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Sets file name of <me>. <br>
//!          If <me> hasn't been initialized, it returns an empty AsciiString. <br>
 /*instead*/  void SetName(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Sets my extension name. <br>
 /*instead*/  void SetExtension(OCNaroWrappers::OCTCollection_AsciiString^ aName) ;

//! Finds the full path of an executable file, like the <br>
//!          "which" Unix utility. Uses the path environment variable. <br>
//!          Returns False if executable file not found. <br>
 /*instead*/  System::Boolean LocateExecFile(OCNaroWrappers::OCOSD_Path^ aPath) ;

//! Returns the relative file path between the absolute directory <br>
//!         path <DirPath>  and the absolute file path <AbsFilePath>. <br>
//!         If <DirPath> starts with "/", pathes are handled as <br>
//!         on Unix, if it starts with a letter followed by ":", as on <br>
//!         WNT. In particular on WNT directory names are not key sensitive. <br>
//!         If handling fails, an empty string is returned. <br>
static /*instead*/  OCTCollection_AsciiString^ RelativePath(OCNaroWrappers::OCTCollection_AsciiString^ DirPath, OCNaroWrappers::OCTCollection_AsciiString^ AbsFilePath) ;

//! Returns the absolute file path from the absolute directory path <br>
//!         <DirPath> and the relative file path returned by RelativePath(). <br>
//!         If the RelFilePath is an absolute path, it is returned and the <br>
//!         directory path is ignored. <br>
//!         If handling fails, an empty string is returned. <br>
static /*instead*/  OCTCollection_AsciiString^ AbsolutePath(OCNaroWrappers::OCTCollection_AsciiString^ DirPath, OCNaroWrappers::OCTCollection_AsciiString^ RelFilePath) ;

~OCOSD_Path()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
