// File generated by CPPExt (Package)
//

#ifndef _OSD_OCWrappers_HeaderFile
#define _OSD_OCWrappers_HeaderFile

// Include the wrapped header
#include <OSD.hxx>

#include "OSD_Error.h"
#include "OSD_Protection.h"
#include "OSD_Path.h"
#include "OSD_FileNode.h"
#include "OSD_Disk.h"
#include "OSD_File.h"
#include "OSD_FileIterator.h"
#include "OSD_Directory.h"
#include "OSD_DirectoryIterator.h"
#include "OSD_Chronometer.h"
#include "OSD_Timer.h"
#include "OSD_Printer.h"
#include "OSD_Host.h"
#include "OSD_Environment.h"
#include "OSD_EnvironmentIterator.h"
#include "OSD_Process.h"
#include "OSD_SharedMemory.h"
#include "OSD_Semaphore.h"
#include "OSD_MailBox.h"
#include "OSD_SharedLibrary.h"
#include "OSD_Thread.h"
#include "OSD_Real2String.h"
#include "OSD_Localizer.h"


namespace OCNaroWrappers
{
//! Set of Operating Sytem Dependent Tools <br>
//!         (O)perating (S)ystem (D)ependent <br>
public ref class OCOSD abstract sealed
{

public:
// Methods


//!   1) Arms some floating point signals, and sets a "Handler" for them. <br>
//!   2) Sets a "Handler" for the "Hardware" signals. <br>
//!   For Win32 users: under VC++ you can control which method of handling <br>
//!   exceptions is used by means of UseSETranslator method before calling <br>
//!   SetSignal <br>
static /*instead*/  void SetSignal(System::Boolean aFloatingSignal) ;

//! Returns available memory in Kilobytes. <br>
static /*instead*/  Standard_Integer AvailableMemory() ;

//! Commands the process to sleep for a number of seconds. <br>
static /*instead*/  void SecSleep(Standard_Integer aDelay) ;

//! Commands the process to sleep for a number of milliseconds <br>
static /*instead*/  void MilliSecSleep(Standard_Integer aDelay) ;


//!  Converts aReal into aCstring in exponential format with a period as <br>
//!  decimal point, no thousand separator and no grouping of digits. <br>
//!  The conversion is independant from the current locale <br>
static /*instead*/  System::Boolean RealToCString(Standard_Real aReal, Standard_PCharacter& aString) ;


//!  Converts aCstring representing a real with a period as <br>
//!  decimal point, no thousand separator and no grouping of digits <br>
//!  into aReal . <br>
//!  The conversion is independant from the current locale. <br>
static /*instead*/  System::Boolean CStringToReal(System::String^ aString, Standard_Real& aReal) ;

//! Tests if the quotient theDividend/theDivisor <br>
//!          does not overflow <br>
static /*instead*/  System::Boolean IsDivisible(Standard_Real aDividend, Standard_Real aDivisor) ;

//! Returns the exponent in base 2 of a floating-point number. <br>
static /*instead*/  Standard_Integer GetExponent(Standard_Real aReal) ;

//! Returns the mantissa of a floating-point number. <br>
static /*instead*/  Standard_Real GetMantissa(Standard_Real aReal) ;

//! since Windows NT does not support 'SIGINT' signal like UNIX, <br>
//!          then this method checks whether Ctrl-Break keystroke was or <br>
//!          not. If yes then raises Exception_CTRL_BREAK. <br>
static /*instead*/  void ControlBreak() ;

//! Defines whether SetSignal must use _se_translator_function or <br>
//!          SetUnhandledExceptionFilter and signal to catch system <br>
//!          exceptions. The default behaviour is to use SE translator. <br>
//!  Warning: Using SE translator method SetSignal should be called for each <br>
//!          new created thread, while using the alternative method <br>
//!          the exception handler is established once for the whole <br>
//!          process and all its threads. <br>
//!          This function takes effect only under VC++ compiler. <br>
static /*instead*/  void UseSETranslator(System::Boolean useSE) ;

//! Returns the current value of the flag set by above method. <br>
static /*instead*/  System::Boolean UseSETranslator() ;


};

}; // OCNaroWrappers

#endif
