// File generated by CPPExt (MPV)
//
#ifndef _OSD_Timer_OCWrappers_HeaderFile
#define _OSD_Timer_OCWrappers_HeaderFile

// include native header
#include <OSD_Timer.hxx>
#include "../Converter.h"

#include "OSD_Chronometer.h"

#include "OSD_Chronometer.h"


namespace OCNaroWrappers
{



//! Working on heterogeneous platforms <br>
//! we need to use the system call gettimeofday. <br>
//! This function is portable and it measures ELAPSED <br>
//! time and CPU time in seconds and microseconds. <br>
//! Example: OSD_Timer aTimer; <br>
//!          aTimer.Start();   // Start  the timers (t1). <br>
//!           .....            // Do something. <br>
//!          aTimer.Stop();    // Stop the timers (t2). <br>
//!          aTimer.Show();    // Give the elapsed time between t1 and t2. <br>
//!                            // Give also the process CPU time between <br>
//!                            // t1 and t2. <br>
public ref class OCOSD_Timer  : public OCOSD_Chronometer {

protected:
  // dummy constructor;
  OCOSD_Timer(OCDummy^) : OCOSD_Chronometer((OCDummy^)nullptr) {};

public:

// constructor from native
OCOSD_Timer(OSD_Timer* nativeHandle);

// Methods PUBLIC

//! Builds a Chronometer initialized and stopped. <br>
OCOSD_Timer();

//! Stops and reinitializes the timer. <br>
virtual /*instead*/  void Reset() override;

//! Shows both the elapsed time and CPU time on the standard output <br>
//!          stream <cout>.The chronometer can be running (Lap Time) or <br>
//!          stopped. <br>
virtual /*instead*/  void Show() override;

//! Shows both the elapsed time and CPU  time on the <br>
//!          output stream <OS>. <br>
virtual /*instead*/  void Show(Standard_OStream& os) override;

//! returns both the elapsed time(seconds,minutes,hours) <br>
//!          and CPU  time. <br>
 /*instead*/  void Show(Standard_Real& seconds, Standard_Integer& minutes, Standard_Integer& hours, Standard_Real& CPUtime) ;

//! Stops the Timer. <br>
virtual /*instead*/  void Stop() override;

//! Starts (after Create or Reset) or restarts (after Stop) <br>
//!          the Timer. <br>
virtual /*instead*/  void Start() override;

//! Returns elapsed time in seconds. <br>
 /*instead*/  Standard_Real ElapsedTime() ;

~OCOSD_Timer()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
