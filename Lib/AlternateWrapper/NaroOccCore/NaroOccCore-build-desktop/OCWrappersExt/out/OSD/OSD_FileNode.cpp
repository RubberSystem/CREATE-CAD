// File generated by CPPExt (CPP file)
//

#include "OSD_FileNode.h"
#include "../Converter.h"
#include "OSD_Path.h"
#include "OSD_Protection.h"
#include "../Quantity/Quantity_Date.h"


using namespace OCNaroWrappers;

OCOSD_FileNode::OCOSD_FileNode(OSD_FileNode* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCOSD_FileNode::OCOSD_FileNode() 
{}

OCOSD_FileNode::OCOSD_FileNode(OCNaroWrappers::OCOSD_Path^ Name) 
{}

 void OCOSD_FileNode::Path(OCNaroWrappers::OCOSD_Path^ Name)
{
  ((OSD_FileNode*)nativeHandle)->Path(*((OSD_Path*)Name->Handle));
}

 void OCOSD_FileNode::SetPath(OCNaroWrappers::OCOSD_Path^ Name)
{
  ((OSD_FileNode*)nativeHandle)->SetPath(*((OSD_Path*)Name->Handle));
}

 System::Boolean OCOSD_FileNode::Exists()
{
  return OCConverter::StandardBooleanToBoolean(((OSD_FileNode*)nativeHandle)->Exists());
}

 void OCOSD_FileNode::Remove()
{
  ((OSD_FileNode*)nativeHandle)->Remove();
}

 void OCOSD_FileNode::Move(OCNaroWrappers::OCOSD_Path^ NewPath)
{
  ((OSD_FileNode*)nativeHandle)->Move(*((OSD_Path*)NewPath->Handle));
}

 void OCOSD_FileNode::Copy(OCNaroWrappers::OCOSD_Path^ ToPath)
{
  ((OSD_FileNode*)nativeHandle)->Copy(*((OSD_Path*)ToPath->Handle));
}

OCOSD_Protection^ OCOSD_FileNode::Protection()
{
  OSD_Protection* tmp = new OSD_Protection();
  *tmp = ((OSD_FileNode*)nativeHandle)->Protection();
  return gcnew OCOSD_Protection(tmp);
}

 void OCOSD_FileNode::SetProtection(OCNaroWrappers::OCOSD_Protection^ Prot)
{
  ((OSD_FileNode*)nativeHandle)->SetProtection(*((OSD_Protection*)Prot->Handle));
}

OCQuantity_Date^ OCOSD_FileNode::AccessMoment()
{
  Quantity_Date* tmp = new Quantity_Date();
  *tmp = ((OSD_FileNode*)nativeHandle)->AccessMoment();
  return gcnew OCQuantity_Date(tmp);
}

OCQuantity_Date^ OCOSD_FileNode::CreationMoment()
{
  Quantity_Date* tmp = new Quantity_Date();
  *tmp = ((OSD_FileNode*)nativeHandle)->CreationMoment();
  return gcnew OCQuantity_Date(tmp);
}

 Standard_Integer OCOSD_FileNode::UserId()
{
  return ((OSD_FileNode*)nativeHandle)->UserId();
}

 Standard_Integer OCOSD_FileNode::GroupId()
{
  return ((OSD_FileNode*)nativeHandle)->GroupId();
}

 System::Boolean OCOSD_FileNode::Failed()
{
  return OCConverter::StandardBooleanToBoolean(((OSD_FileNode*)nativeHandle)->Failed());
}

 void OCOSD_FileNode::Reset()
{
  ((OSD_FileNode*)nativeHandle)->Reset();
}

 void OCOSD_FileNode::Perror()
{
  ((OSD_FileNode*)nativeHandle)->Perror();
}

 Standard_Integer OCOSD_FileNode::Error()
{
  return ((OSD_FileNode*)nativeHandle)->Error();
}


