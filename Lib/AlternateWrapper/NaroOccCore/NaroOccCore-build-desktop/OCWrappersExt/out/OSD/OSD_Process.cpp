// File generated by CPPExt (CPP file)
//

#include "OSD_Process.h"
#include "../Converter.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../Quantity/Quantity_Date.h"
#include "OSD_Path.h"


using namespace OCNaroWrappers;

OCOSD_Process::OCOSD_Process(OSD_Process* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCOSD_Process::OCOSD_Process() 
{
  nativeHandle = new OSD_Process();
}

 void OCOSD_Process::Spawn(OCNaroWrappers::OCTCollection_AsciiString^ cmd, System::Boolean ShowWindow)
{
  ((OSD_Process*)nativeHandle)->Spawn(*((TCollection_AsciiString*)cmd->Handle), OCConverter::BooleanToStandardBoolean(ShowWindow));
}

 void OCOSD_Process::TerminalType(OCNaroWrappers::OCTCollection_AsciiString^ Name)
{
  ((OSD_Process*)nativeHandle)->TerminalType(*((TCollection_AsciiString*)Name->Handle));
}

OCQuantity_Date^ OCOSD_Process::SystemDate()
{
  Quantity_Date* tmp = new Quantity_Date();
  *tmp = ((OSD_Process*)nativeHandle)->SystemDate();
  return gcnew OCQuantity_Date(tmp);
}

 Standard_Integer OCOSD_Process::UserId()
{
  return ((OSD_Process*)nativeHandle)->UserId();
}

OCTCollection_AsciiString^ OCOSD_Process::UserName()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((OSD_Process*)nativeHandle)->UserName();
  return gcnew OCTCollection_AsciiString(tmp);
}

 System::Boolean OCOSD_Process::IsSuperUser()
{
  return OCConverter::StandardBooleanToBoolean(((OSD_Process*)nativeHandle)->IsSuperUser());
}

 Standard_Integer OCOSD_Process::ProcessId()
{
  return ((OSD_Process*)nativeHandle)->ProcessId();
}

OCOSD_Path^ OCOSD_Process::CurrentDirectory()
{
  OSD_Path* tmp = new OSD_Path();
  *tmp = ((OSD_Process*)nativeHandle)->CurrentDirectory();
  return gcnew OCOSD_Path(tmp);
}

 void OCOSD_Process::SetCurrentDirectory(OCNaroWrappers::OCOSD_Path^ where)
{
  ((OSD_Process*)nativeHandle)->SetCurrentDirectory(*((OSD_Path*)where->Handle));
}

 System::Boolean OCOSD_Process::Failed()
{
  return OCConverter::StandardBooleanToBoolean(((OSD_Process*)nativeHandle)->Failed());
}

 void OCOSD_Process::Reset()
{
  ((OSD_Process*)nativeHandle)->Reset();
}

 void OCOSD_Process::Perror()
{
  ((OSD_Process*)nativeHandle)->Perror();
}

 Standard_Integer OCOSD_Process::Error()
{
  return ((OSD_Process*)nativeHandle)->Error();
}


