// File generated by CPPExt (MPV)
//
#ifndef _OSD_Semaphore_OCWrappers_HeaderFile
#define _OSD_Semaphore_OCWrappers_HeaderFile

// include native header
#include <OSD_Semaphore.hxx>
#include "../Converter.h"


#include "../TCollection/TCollection_AsciiString.h"
#include "OSD_Error.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;


//! IPC Tools -Semaphores <br>
//!          The semaphores are used to facilitate shared resources. <br>
//!          This implementation provides a way to ensure mutual <br>
//!          exclusion using 'Lock' and 'Free' primitives. <br>
//!          The Lock is used to prevent access if it's not yet allowed. <br>
//!          The Free validates the semaphores and if possible, frees process <br>
//!          waiting for a common resource. <br>
public ref class OCOSD_Semaphore  {

protected:
  OSD_Semaphore* nativeHandle;
  OCOSD_Semaphore(OCDummy^) {};

public:
  property OSD_Semaphore* Handle
  {
    OSD_Semaphore* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCOSD_Semaphore(OSD_Semaphore* nativeHandle);

// Methods PUBLIC

//! Allocate room for semaphore name. <br>
//!          This is to be used with 'Open'. <br>
//!          so the process is a client. <br>
OCOSD_Semaphore();

//! Instantiates Semaphore object with a name. <br>
//!          The name is the only way provided to work with a common <br>
//!          semaphore for different processes. <br>
//!          Each process working with the same semaphore must use <br>
//!          a common known access : the semaphore's NAME. <br>
//!          Raises ConstructionError when the name contains characters <br>
//!          not in range of ' '...'~'. <br>
//!          This is for a server process. <br>
OCOSD_Semaphore(OCNaroWrappers::OCTCollection_AsciiString^ Name);

//! Sets semaphore (physically) into memory <br>
 /*instead*/  void Build() ;

//! Opens (physically) a semaphore <br>
//!          Raises ConstructionError when the name contains characters <br>
//!          not in range of ' '...'~'. <br>
 /*instead*/  void Open(OCNaroWrappers::OCTCollection_AsciiString^ Name) ;

//! Returns current value of the semaphore's counter. <br>
//!          Raises ProgramError when the semaphore is not open. <br>
 /*instead*/  Standard_Integer GetCounter() ;

//! Sets the semaphore's counter to a specific value. <br>
//!          Raises ProgramError when the semaphore is not open. <br>
 /*instead*/  void SetCounter(Standard_Integer Value) ;

//! Removes the semaphore. <br>
//!          This is used only by server process ! <br>
//!          Raise ProgramError if the semaphore is already deleted. <br>
 /*instead*/  void Delete() ;

//! Makes current process waiting for access <br>
//!          Raises ProgramError when the semaphore does't exist. <br>
 /*instead*/  void Lock() ;

//! Frees one access to a semaphore. <br>
//!          Raises ProgramError when the semaphore does't exist. <br>
 /*instead*/  void Free() ;

//! Resets semaphore counter to zero. <br>
//!          Raises ProgramError when the semaphore does't exist. <br>
 /*instead*/  void Restore() ;

//! Returns TRUE if an error occurs <br>
 /*instead*/  System::Boolean Failed() ;

//! Resets error counter to zero <br>
 /*instead*/  void Reset() ;

//! Raises OSD_Error <br>
 /*instead*/  void Perror() ;

//! Returns error number if 'Failed' is TRUE. <br>
 /*instead*/  Standard_Integer Error() ;

~OCOSD_Semaphore()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
