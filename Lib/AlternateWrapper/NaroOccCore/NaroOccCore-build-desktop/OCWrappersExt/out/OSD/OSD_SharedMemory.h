// File generated by CPPExt (MPV)
//
#ifndef _OSD_SharedMemory_OCWrappers_HeaderFile
#define _OSD_SharedMemory_OCWrappers_HeaderFile

// include native header
#include <OSD_SharedMemory.hxx>
#include "../Converter.h"


#include "../TCollection/TCollection_AsciiString.h"
#include "OSD_Error.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;


//! IPC Tools -Shared Memory <br>
//!          This is a low level interface for communications. <br>
//!          Using shared memory, processes can use a common area to <br>
//!          communicate. <br>
//!          You can create and delete a shared memory. <br>
public ref class OCOSD_SharedMemory  {

protected:
  OSD_SharedMemory* nativeHandle;
  OCOSD_SharedMemory(OCDummy^) {};

public:
  property OSD_SharedMemory* Handle
  {
    OSD_SharedMemory* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCOSD_SharedMemory(OSD_SharedMemory* nativeHandle);

// Methods PUBLIC

//! Allocates room for shared memory name. <br>
//!          This is to be used with 'Open'. <br>
//!          In this case, the process is a client of shared memory. <br>
OCOSD_SharedMemory();

//! Instantiates SharedMemory object with parameters. <br>
//!          A name to make sure shared memory is unique and a size in <br>
//!          bytes for the size of shared memory. <br>
OCOSD_SharedMemory(OCNaroWrappers::OCTCollection_AsciiString^ Name, Standard_Integer size);

//! Creates a shared memory in the system <br>
//!          This is for a server process. <br>
 /*instead*/  void Build() ;

//! Opens a shared memory <br>
//!          Raises ConstructionError when the name contains characters <br>
//!          not in range of ' '...'~'. <br>
//!          Raises ProgramError when the size given is negative or null. <br>
//!          This is for a server process. <br>
//! <br>
 /*instead*/  void Open(OCNaroWrappers::OCTCollection_AsciiString^ Name, Standard_Integer size) ;

//! Removes a shared memory access. <br>
//!          This is used only by a server process ! <br>
 /*instead*/  void Delete() ;

//! Returns address of shared memory. <br>
//!          Raises NullObject when the Shared Memory is not created. <br>
 /*instead*/  Standard_Address GiveAddress() ;

//! Returns TRUE if an error occurs <br>
 /*instead*/  System::Boolean Failed() ;

//! Resets error counter to zero <br>
 /*instead*/  void Reset() ;

//! Raises OSD_Error <br>
 /*instead*/  void Perror() ;

//! Returns error number if 'Failed' is TRUE. <br>
 /*instead*/  Standard_Integer Error() ;

~OCOSD_SharedMemory()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
