// File generated by CPPExt (MPV)
//
#ifndef _OSD_SharedLibrary_OCWrappers_HeaderFile
#define _OSD_SharedLibrary_OCWrappers_HeaderFile

// include native header
#include <OSD_SharedLibrary.hxx>
#include "../Converter.h"


#include "OSD_LoadMode.h"


namespace OCNaroWrappers
{



//! Interface to dynamic library loader. <br>
public ref class OCOSD_SharedLibrary  {

protected:
  OSD_SharedLibrary* nativeHandle;
  OCOSD_SharedLibrary(OCDummy^) {};

public:
  property OSD_SharedLibrary* Handle
  {
    OSD_SharedLibrary* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCOSD_SharedLibrary(OSD_SharedLibrary* nativeHandle);

// Methods PUBLIC

//! Creates a SharedLibrary object with name NULL. <br>
OCOSD_SharedLibrary();

//! Creates a SharedLibrary object with name aFilename. <br>
OCOSD_SharedLibrary(System::String^ aFilename);

//! Sets a name associated to the shared object. <br>
 /*instead*/  void SetName(System::String^ aName) ;

//! Returns the name associated to the shared object. <br>
 /*instead*/  System::String^ Name() ;

//!   The DlOpen method provides an interface to the <br>
//!            dynamic library loader to allow shared libraries <br>
//!            to be loaded and called at runtime.  The DlOpen <br>
//!            function attempts to load Filename, in the address <br>
//!            space of the process, resolving symbols as appropriate. <br>
//!            Any libraries that Filename depends upon are also loaded. <br>
//!            If MODE is RTLD_LAZY, then the runtime loader <br>
//!            does symbol resolution only as needed. <br>
//!            Typically, this means that the first call to a function <br>
//!            in the newly	loaded library will cause the resolution of <br>
//!            the	address	of that	function to occur. <br>
//!            If Mode is RTLD_NOW, then the runtime loader must do all <br>
//!            symbol binding during the DlOpen call. <br>
//!            The DlOpen method returns a	handle that is used by DlSym <br>
//!            or DlClose. <br>
//!            If there is an error, Standard_False is returned, <br>
//!            Standard_True otherwise. <br>
//!            If a NULL Filename is specified, DlOpen returns a handle <br>
//!            for the main	executable, which allows access to dynamic <br>
//!            symbols in the running program. <br>
 /*instead*/  System::Boolean DlOpen(OCOSD_LoadMode Mode) ;

//! The dlsym function returns the address of the <br>
//!          symbol name found in the shared library. <br>
//!          If the symbol is not found, a NULL pointer is <br>
//!          returned. <br>
 /*instead*/  OSD_Function DlSymb(System::String^ Name) ;

//! Deallocates the address space for the library <br>
//!          corresponding to the shared object. <br>
//!          If any user function continues to call a symbol <br>
//!          resolved in the address space of a library <br>
//!          that has been since been deallocated by DlClose, <br>
//!          the results are undefined. <br>
 /*instead*/  void DlClose() ;

//! The dlerror function returns a string describing <br>
//!          the last error that occurred from <br>
//!          a call to DlOpen, DlClose or DlSym. <br>
 /*instead*/  System::String^ DlError() ;

~OCOSD_SharedLibrary()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
