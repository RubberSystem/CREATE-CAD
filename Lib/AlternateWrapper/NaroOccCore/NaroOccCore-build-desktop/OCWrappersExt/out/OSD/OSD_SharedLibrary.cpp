// File generated by CPPExt (CPP file)
//

#include "OSD_SharedLibrary.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCOSD_SharedLibrary::OCOSD_SharedLibrary(OSD_SharedLibrary* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCOSD_SharedLibrary::OCOSD_SharedLibrary() 
{
  nativeHandle = new OSD_SharedLibrary();
}

OCOSD_SharedLibrary::OCOSD_SharedLibrary(System::String^ aFilename) 
{
  nativeHandle = new OSD_SharedLibrary(OCConverter::StringToStandardCString(aFilename));
}

 void OCOSD_SharedLibrary::SetName(System::String^ aName)
{
  ((OSD_SharedLibrary*)nativeHandle)->SetName(OCConverter::StringToStandardCString(aName));
}

 System::String^ OCOSD_SharedLibrary::Name()
{
  return OCConverter::StandardCStringToString(((OSD_SharedLibrary*)nativeHandle)->Name());
}

 System::Boolean OCOSD_SharedLibrary::DlOpen(OCOSD_LoadMode Mode)
{
  return OCConverter::StandardBooleanToBoolean(((OSD_SharedLibrary*)nativeHandle)->DlOpen((OSD_LoadMode)Mode));
}

 OSD_Function OCOSD_SharedLibrary::DlSymb(System::String^ Name)
{
  return ((OSD_SharedLibrary*)nativeHandle)->DlSymb(OCConverter::StringToStandardCString(Name));
}

 void OCOSD_SharedLibrary::DlClose()
{
  ((OSD_SharedLibrary*)nativeHandle)->DlClose();
}

 System::String^ OCOSD_SharedLibrary::DlError()
{
  return OCConverter::StandardCStringToString(((OSD_SharedLibrary*)nativeHandle)->DlError());
}


