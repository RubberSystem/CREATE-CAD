// File generated by CPPExt (MPV)
//
#ifndef _OSD_FileNode_OCWrappers_HeaderFile
#define _OSD_FileNode_OCWrappers_HeaderFile

// include native header
#include <OSD_FileNode.hxx>
#include "../Converter.h"


#include "OSD_Path.h"
#include "OSD_Error.h"


namespace OCNaroWrappers
{

ref class OCOSD_Path;
ref class OCOSD_Protection;
ref class OCQuantity_Date;


//! A class for 'File' and 'Directory' grouping common <br>
//!          methods. <br>
//!          The "file oriented" name means files or directories which are <br>
//!          in fact hard coded as files. <br>
public ref class OCOSD_FileNode  {

protected:
  OSD_FileNode* nativeHandle;
  OCOSD_FileNode(OCDummy^) {};

public:
  property OSD_FileNode* Handle
  {
    OSD_FileNode* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCOSD_FileNode(OSD_FileNode* nativeHandle);

// Methods PUBLIC

//! Creates FileNode object <br>
//!          This is to be used with SetPath . <br>
//!          Allocate space for the file name and initializes this <br>
//!          name to an empty name. <br>
OCOSD_FileNode();

//! Instantiates the object FileNode storing its name. <br>
//!          If a name is not found, it raises a program error. <br>
OCOSD_FileNode(OCNaroWrappers::OCOSD_Path^ Name);

//! Gets file name and path. <br>
 /*instead*/  void Path(OCNaroWrappers::OCOSD_Path^ Name) ;

//! Sets file name and path. <br>
//!          If a name is not found, it raises a program error. <br>
 /*instead*/  void SetPath(OCNaroWrappers::OCOSD_Path^ Name) ;

//! Returns TRUE if <me> exists. <br>
 /*instead*/  System::Boolean Exists() ;

//! Erases the FileNode from directory <br>
 /*instead*/  void Remove() ;

//! Moves <me> into another directory <br>
 /*instead*/  void Move(OCNaroWrappers::OCOSD_Path^ NewPath) ;

//! Copies <me> to another FileNode <br>
 /*instead*/  void Copy(OCNaroWrappers::OCOSD_Path^ ToPath) ;

//! Returns access mode of <me>. <br>
 /*instead*/  OCOSD_Protection^ Protection() ;

//! Changes protection of the FileNode <br>
 /*instead*/  void SetProtection(OCNaroWrappers::OCOSD_Protection^ Prot) ;

//! Returns last write access. <br>
//!          On UNIX, AccessMoment and CreationMoment return the <br>
//!          same value. <br>
 /*instead*/  OCQuantity_Date^ AccessMoment() ;

//! Returns creation date. <br>
//!          On UNIX, AccessMoment and CreationMoment return the <br>
//!          same value. <br>
 /*instead*/  OCQuantity_Date^ CreationMoment() ;

//! Returns User Identification. <br>
 /*instead*/  Standard_Integer UserId() ;

//! Returns Group Identification. <br>
 /*instead*/  Standard_Integer GroupId() ;

//! Returns TRUE if an error occurs <br>
 /*instead*/  System::Boolean Failed() ;

//! Resets error counter to zero <br>
 /*instead*/  void Reset() ;

//! Raises OSD_Error <br>
 /*instead*/  void Perror() ;

//! Returns error number if 'Failed' is TRUE. <br>
 /*instead*/  Standard_Integer Error() ;

~OCOSD_FileNode()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
