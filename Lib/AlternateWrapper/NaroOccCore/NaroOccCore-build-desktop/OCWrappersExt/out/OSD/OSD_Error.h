// File generated by CPPExt (MPV)
//
#ifndef _OSD_Error_OCWrappers_HeaderFile
#define _OSD_Error_OCWrappers_HeaderFile

// include native header
#include <OSD_Error.hxx>
#include "../Converter.h"


#include "../TCollection/TCollection_AsciiString.h"
#include "OSD_WhoAmI.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;


//! Management of OSD errors <br>
public ref class OCOSD_Error  {

protected:
  OSD_Error* nativeHandle;
  OCOSD_Error(OCDummy^) {};

public:
  property OSD_Error* Handle
  {
    OSD_Error* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCOSD_Error(OSD_Error* nativeHandle);

// Methods PUBLIC

//! Initializes Error to be without any Error. <br>
//!          This is only used by OSD, not by programmer. <br>
OCOSD_Error();

//! Raises OSD_Error with accurate error message. <br>
 /*instead*/  void Perror() ;

//! Instantiates error <br>
//!          This is only used by OSD methods to instantiates an error code. <br>
//!          No description is done for the programmer. <br>
 /*instead*/  void SetValue(Standard_Integer Errcode, Standard_Integer From, OCNaroWrappers::OCTCollection_AsciiString^ Message) ;

//! Returns an accurate error code. <br>
//!          To test these values, you must include "OSD_ErrorList.hxx" <br>
 /*instead*/  Standard_Integer Error() ;

//! Returns TRUE if an error occurs <br>
//!          This is a way to test if a system call succeeded or not. <br>
 /*instead*/  System::Boolean Failed() ;

//! Resets error counter to zero <br>
//!          This allows the user to ignore an error (WARNING). <br>
 /*instead*/  void Reset() ;

~OCOSD_Error()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
