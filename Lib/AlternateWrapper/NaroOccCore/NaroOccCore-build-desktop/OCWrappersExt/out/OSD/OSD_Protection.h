// File generated by CPPExt (MPV)
//
#ifndef _OSD_Protection_OCWrappers_HeaderFile
#define _OSD_Protection_OCWrappers_HeaderFile

// include native header
#include <OSD_Protection.hxx>
#include "../Converter.h"


#include "OSD_SingleProtection.h"


namespace OCNaroWrappers
{

ref class OCOSD_FileNode;
ref class OCOSD_File;
ref class OCOSD_Directory;


//! This  class provides data to manage file protection <br>
//!  Example:These rights are treated in a system dependent manner : <br>
//!          On UNIX you have User,Group and Other rights <br>
//!          On VMS  you have Owner,Group,World and System rights <br>
//!          An automatic conversion is done between OSD and UNIX/VMS. <br>
//! <br>
//!          OSD	VMS	UNIX <br>
//!          User     Owner   User <br>
//!          Group    Group   Group <br>
//!          World    World   Other <br>
//!          System   System  (combined with Other) <br>
//! <br>
//!          When you use System protection on UNIX you must know that <br>
//!          Other rights and System rights are inclusively "ORed". <br>
//!          So Other with only READ access and System with WRITE access <br>
//!          will produce on UNIX Other with READ and WRITE access. <br>
public ref class OCOSD_Protection  {

protected:
  OSD_Protection* nativeHandle;
  OCOSD_Protection(OCDummy^) {};

public:
  property OSD_Protection* Handle
  {
    OSD_Protection* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCOSD_Protection(OSD_Protection* nativeHandle);

// Methods PUBLIC

//! Initializes global access rights as follows <br>
OCOSD_Protection();

//! Sets values of fields <br>
OCOSD_Protection(OCOSD_SingleProtection System, OCOSD_SingleProtection User, OCOSD_SingleProtection Group, OCOSD_SingleProtection World);

//! Retrieves values of fields <br>
 /*instead*/  void Values(OCOSD_SingleProtection& System, OCOSD_SingleProtection& User, OCOSD_SingleProtection& Group, OCOSD_SingleProtection& World) ;

//! Sets values of fields <br>
 /*instead*/  void SetValues(OCOSD_SingleProtection System, OCOSD_SingleProtection User, OCOSD_SingleProtection Group, OCOSD_SingleProtection World) ;

//! Sets protection of 'System' <br>
 /*instead*/  void SetSystem(OCOSD_SingleProtection priv) ;

//! Sets protection of 'User' <br>
 /*instead*/  void SetUser(OCOSD_SingleProtection priv) ;

//! Sets protection of 'Group' <br>
 /*instead*/  void SetGroup(OCOSD_SingleProtection priv) ;

//! Sets protection of 'World' <br>
 /*instead*/  void SetWorld(OCOSD_SingleProtection priv) ;

//! Gets protection of 'System' <br>
 /*instead*/  OCOSD_SingleProtection System() ;

//! Gets protection of 'User' <br>
 /*instead*/  OCOSD_SingleProtection User() ;

//! Gets protection of 'Group' <br>
 /*instead*/  OCOSD_SingleProtection Group() ;

//! Gets protection of 'World' <br>
 /*instead*/  OCOSD_SingleProtection World() ;

//! Add a right to a single protection. <br>
//!          ex: aProt = RWD <br>
//!              me.Add(aProt,X)  ->  aProt = RWXD <br>
 /*instead*/  void Add(OCOSD_SingleProtection& aProt, OCOSD_SingleProtection aRight) ;

//! Subtract a right to a single protection. <br>
//!           ex: aProt = RWD <br>
//!               me.Sub(aProt,RW) ->  aProt = D <br>
//!               But me.Sub(aProt,RWX) is also valid and gives same result. <br>
 /*instead*/  void Sub(OCOSD_SingleProtection& aProt, OCOSD_SingleProtection aRight) ;

~OCOSD_Protection()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
