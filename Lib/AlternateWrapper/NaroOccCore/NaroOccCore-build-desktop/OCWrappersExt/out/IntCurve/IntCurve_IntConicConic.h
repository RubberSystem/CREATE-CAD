// File generated by CPPExt (MPV)
//
#ifndef _IntCurve_IntConicConic_OCWrappers_HeaderFile
#define _IntCurve_IntConicConic_OCWrappers_HeaderFile

// include native header
#include <IntCurve_IntConicConic.hxx>
#include "../Converter.h"

#include "../IntRes2d/IntRes2d_Intersection.h"

#include "IntCurve_IntImpConicParConic.h"
#include "../IntRes2d/IntRes2d_Intersection.h"


namespace OCNaroWrappers
{

ref class OCgp_Lin2d;
ref class OCIntRes2d_Domain;
ref class OCgp_Circ2d;
ref class OCgp_Elips2d;
ref class OCgp_Parab2d;
ref class OCgp_Hypr2d;


//! Provides methods to intersect two conics. <br>
//!          The exception ConstructionError is raised  in constructors <br>
//!          or in Perform methods  when a domain  (Domain from IntRes2d) <br>
//!          is not correct, i-e when a Circle (Circ2d from  gp) or <br>
//!          an Ellipse (i-e Elips2d from  gp) do not have a closed <br>
//!          domain (use the  SetEquivalentParameters method for a domain <br>
//!          on a circle or an ellipse). <br>
public ref class OCIntCurve_IntConicConic  : public OCIntRes2d_Intersection {

protected:
  // dummy constructor;
  OCIntCurve_IntConicConic(OCDummy^) : OCIntRes2d_Intersection((OCDummy^)nullptr) {};

public:

// constructor from native
OCIntCurve_IntConicConic(IntCurve_IntConicConic* nativeHandle);

// Methods PUBLIC

//! Empty Constructor <br>
OCIntCurve_IntConicConic();

//! Intersection between 2 lines from gp. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Lin2d^ L1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Lin2d^ L2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between 2 lines from gp. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Lin2d^ L2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between a line and a circle. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the circle returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntRes2d_Domain^ DL, OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntRes2d_Domain^ DC, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between a line and a circle. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the circle returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntRes2d_Domain^ DL, OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntRes2d_Domain^ DC, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between a line and an ellipse. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the ellipse returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntRes2d_Domain^ DL, OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntRes2d_Domain^ DE, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between a line and an ellipse. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the ellipse returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntRes2d_Domain^ DL, OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntRes2d_Domain^ DE, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between a line and a parabola from gp. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntRes2d_Domain^ DL, OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntRes2d_Domain^ DP, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between a line and a parabola from gp. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntRes2d_Domain^ DL, OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntRes2d_Domain^ DP, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between a line and an hyperbola. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntRes2d_Domain^ DL, OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntRes2d_Domain^ DH, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between a line and an hyperbola. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L, OCNaroWrappers::OCIntRes2d_Domain^ DL, OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntRes2d_Domain^ DH, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between 2 circles from gp. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of one of the domain returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Circ2d^ C1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Circ2d^ C2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between 2 circles from gp. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of one of the circle returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ2d^ C1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Circ2d^ C2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between a circle and an ellipse. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of one the domain returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntRes2d_Domain^ DC, OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntRes2d_Domain^ DE, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between a circle and an ellipse. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of one the domain returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntRes2d_Domain^ DC, OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntRes2d_Domain^ DE, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between a circle and a parabola. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the circle returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntRes2d_Domain^ DC, OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntRes2d_Domain^ DP, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between a circle and a parabola. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the circle returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntRes2d_Domain^ DC, OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntRes2d_Domain^ DP, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between a circle and an hyperbola. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the circle returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntRes2d_Domain^ DC, OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntRes2d_Domain^ DH, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between a circle and an hyperbola. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the circle returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ2d^ C, OCNaroWrappers::OCIntRes2d_Domain^ DC, OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntRes2d_Domain^ DH, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between 2 ellipses. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of one of the domain returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Elips2d^ E1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Elips2d^ E2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between 2 ellipses. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of one of the domain returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Elips2d^ E1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Elips2d^ E2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between an ellipse and a parabola. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the ellipse returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntRes2d_Domain^ DE, OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntRes2d_Domain^ DP, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between an ellipse and a parabola. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the ellipse returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntRes2d_Domain^ DE, OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntRes2d_Domain^ DP, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between an ellipse and an hyperbola. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the ellipse returns False. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntRes2d_Domain^ DE, OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntRes2d_Domain^ DH, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between an ellipse and an hyperbola. <br>
//!          The exception ConstructionError is raised if the method <br>
//!          IsClosed of the domain of the ellipse returns False. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Elips2d^ E, OCNaroWrappers::OCIntRes2d_Domain^ DE, OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntRes2d_Domain^ DH, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between 2 parabolas. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Parab2d^ P1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Parab2d^ P2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between 2 parabolas. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Parab2d^ P1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Parab2d^ P2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between a parabola and an hyperbola. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntRes2d_Domain^ DP, OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntRes2d_Domain^ DH, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between a parabola and an hyperbola. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Parab2d^ P, OCNaroWrappers::OCIntRes2d_Domain^ DP, OCNaroWrappers::OCgp_Hypr2d^ H, OCNaroWrappers::OCIntRes2d_Domain^ DH, Standard_Real TolConf, Standard_Real Tol) ;

//! Intersection between 2 hyperbolas. <br>
OCIntCurve_IntConicConic(OCNaroWrappers::OCgp_Hypr2d^ H1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Hypr2d^ H2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol);

//! Intersection between 2 hyperbolas. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Hypr2d^ H1, OCNaroWrappers::OCIntRes2d_Domain^ D1, OCNaroWrappers::OCgp_Hypr2d^ H2, OCNaroWrappers::OCIntRes2d_Domain^ D2, Standard_Real TolConf, Standard_Real Tol) ;

~OCIntCurve_IntConicConic()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
