// File generated by CPPExt (CPP file)
//

#include "Bisector_BisecPC.h"
#include "../Converter.h"
#include "../Geom2d/Geom2d_Curve.h"
#include "../gp/gp_Pnt2d.h"
#include "../Geom2d/Geom2d_Geometry.h"
#include "../gp/gp_Trsf2d.h"
#include "../gp/gp_Vec2d.h"
#include "../TColStd/TColStd_SequenceOfReal.h"


using namespace OCNaroWrappers;

OCBisector_BisecPC::OCBisector_BisecPC(Handle(Bisector_BisecPC)* nativeHandle) : OCBisector_Curve((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Bisector_BisecPC(*nativeHandle);
}

OCBisector_BisecPC::OCBisector_BisecPC() : OCBisector_Curve((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Bisector_BisecPC(new Bisector_BisecPC());
}

OCBisector_BisecPC::OCBisector_BisecPC(OCNaroWrappers::OCGeom2d_Curve^ Cu, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Side, Standard_Real DistMax) : OCBisector_Curve((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Bisector_BisecPC(new Bisector_BisecPC(*((Handle_Geom2d_Curve*)Cu->Handle), *((gp_Pnt2d*)P->Handle), Side, DistMax));
}

OCBisector_BisecPC::OCBisector_BisecPC(OCNaroWrappers::OCGeom2d_Curve^ Cu, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Side, Standard_Real UMin, Standard_Real UMax) : OCBisector_Curve((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Bisector_BisecPC(new Bisector_BisecPC(*((Handle_Geom2d_Curve*)Cu->Handle), *((gp_Pnt2d*)P->Handle), Side, UMin, UMax));
}

 void OCBisector_BisecPC::Perform(OCNaroWrappers::OCGeom2d_Curve^ Cu, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Side, Standard_Real DistMax)
{
  (*((Handle_Bisector_BisecPC*)nativeHandle))->Perform(*((Handle_Geom2d_Curve*)Cu->Handle), *((gp_Pnt2d*)P->Handle), Side, DistMax);
}

 System::Boolean OCBisector_BisecPC::IsExtendAtStart()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Bisector_BisecPC*)nativeHandle))->IsExtendAtStart());
}

 System::Boolean OCBisector_BisecPC::IsExtendAtEnd()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Bisector_BisecPC*)nativeHandle))->IsExtendAtEnd());
}

 void OCBisector_BisecPC::Reverse()
{
  (*((Handle_Bisector_BisecPC*)nativeHandle))->Reverse();
}

 Standard_Real OCBisector_BisecPC::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->ReversedParameter(U);
}

OCGeom2d_Geometry^ OCBisector_BisecPC::Copy()
{
  Handle(Geom2d_Geometry) tmp = (*((Handle_Bisector_BisecPC*)nativeHandle))->Copy();
  return gcnew OCGeom2d_Geometry(&tmp);
}

 void OCBisector_BisecPC::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  (*((Handle_Bisector_BisecPC*)nativeHandle))->Transform(*((gp_Trsf2d*)T->Handle));
}

 System::Boolean OCBisector_BisecPC::IsCN(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Bisector_BisecPC*)nativeHandle))->IsCN(N));
}

 Standard_Real OCBisector_BisecPC::FirstParameter()
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->FirstParameter();
}

 Standard_Real OCBisector_BisecPC::LastParameter()
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->LastParameter();
}

 OCGeomAbs_Shape OCBisector_BisecPC::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Bisector_BisecPC*)nativeHandle))->Continuity());
}

 Standard_Integer OCBisector_BisecPC::NbIntervals()
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->NbIntervals();
}

 Standard_Real OCBisector_BisecPC::IntervalFirst(Standard_Integer Index)
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->IntervalFirst(Index);
}

 Standard_Real OCBisector_BisecPC::IntervalLast(Standard_Integer Index)
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->IntervalLast(Index);
}

 OCGeomAbs_Shape OCBisector_BisecPC::IntervalContinuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Bisector_BisecPC*)nativeHandle))->IntervalContinuity());
}

 System::Boolean OCBisector_BisecPC::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Bisector_BisecPC*)nativeHandle))->IsClosed());
}

 System::Boolean OCBisector_BisecPC::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Bisector_BisecPC*)nativeHandle))->IsPeriodic());
}

 Standard_Real OCBisector_BisecPC::Distance(Standard_Real U)
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->Distance(U);
}

 void OCBisector_BisecPC::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  (*((Handle_Bisector_BisecPC*)nativeHandle))->D0(U, *((gp_Pnt2d*)P->Handle));
}

 void OCBisector_BisecPC::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V)
{
  (*((Handle_Bisector_BisecPC*)nativeHandle))->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V->Handle));
}

 void OCBisector_BisecPC::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  (*((Handle_Bisector_BisecPC*)nativeHandle))->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCBisector_BisecPC::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  (*((Handle_Bisector_BisecPC*)nativeHandle))->D3(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCBisector_BisecPC::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = (*((Handle_Bisector_BisecPC*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 void OCBisector_BisecPC::Dump(Standard_Integer Deep, Standard_Integer Offset)
{
  (*((Handle_Bisector_BisecPC*)nativeHandle))->Dump(Deep, Offset);
}

 Standard_Real OCBisector_BisecPC::LinkBisCurve(Standard_Real U)
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->LinkBisCurve(U);
}

 Standard_Real OCBisector_BisecPC::LinkCurveBis(Standard_Real U)
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->LinkCurveBis(U);
}

 Standard_Real OCBisector_BisecPC::Parameter(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  return (*((Handle_Bisector_BisecPC*)nativeHandle))->Parameter(*((gp_Pnt2d*)P->Handle));
}

 System::Boolean OCBisector_BisecPC::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Bisector_BisecPC*)nativeHandle))->IsEmpty());
}


