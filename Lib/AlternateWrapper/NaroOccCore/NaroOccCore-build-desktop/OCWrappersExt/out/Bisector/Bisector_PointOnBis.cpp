// File generated by CPPExt (CPP file)
//

#include "Bisector_PointOnBis.h"
#include "../Converter.h"
#include "../gp/gp_Pnt2d.h"


using namespace OCNaroWrappers;

OCBisector_PointOnBis::OCBisector_PointOnBis(Bisector_PointOnBis* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBisector_PointOnBis::OCBisector_PointOnBis() 
{
  nativeHandle = new Bisector_PointOnBis();
}

OCBisector_PointOnBis::OCBisector_PointOnBis(Standard_Real Param1, Standard_Real Param2, Standard_Real ParamBis, Standard_Real Distance, OCNaroWrappers::OCgp_Pnt2d^ Point) 
{
  nativeHandle = new Bisector_PointOnBis(Param1, Param2, ParamBis, Distance, *((gp_Pnt2d*)Point->Handle));
}

 void OCBisector_PointOnBis::ParamOnC1(Standard_Real Param)
{
  ((Bisector_PointOnBis*)nativeHandle)->ParamOnC1(Param);
}

 void OCBisector_PointOnBis::ParamOnC2(Standard_Real Param)
{
  ((Bisector_PointOnBis*)nativeHandle)->ParamOnC2(Param);
}

 void OCBisector_PointOnBis::ParamOnBis(Standard_Real Param)
{
  ((Bisector_PointOnBis*)nativeHandle)->ParamOnBis(Param);
}

 void OCBisector_PointOnBis::Distance(Standard_Real Distance)
{
  ((Bisector_PointOnBis*)nativeHandle)->Distance(Distance);
}

 void OCBisector_PointOnBis::IsInfinite(System::Boolean Infinite)
{
  ((Bisector_PointOnBis*)nativeHandle)->IsInfinite(OCConverter::BooleanToStandardBoolean(Infinite));
}

 void OCBisector_PointOnBis::Point(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((Bisector_PointOnBis*)nativeHandle)->Point(*((gp_Pnt2d*)P->Handle));
}

 Standard_Real OCBisector_PointOnBis::ParamOnC1()
{
  return ((Bisector_PointOnBis*)nativeHandle)->ParamOnC1();
}

 Standard_Real OCBisector_PointOnBis::ParamOnC2()
{
  return ((Bisector_PointOnBis*)nativeHandle)->ParamOnC2();
}

 Standard_Real OCBisector_PointOnBis::ParamOnBis()
{
  return ((Bisector_PointOnBis*)nativeHandle)->ParamOnBis();
}

 Standard_Real OCBisector_PointOnBis::Distance()
{
  return ((Bisector_PointOnBis*)nativeHandle)->Distance();
}

OCgp_Pnt2d^ OCBisector_PointOnBis::Point()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((Bisector_PointOnBis*)nativeHandle)->Point();
  return gcnew OCgp_Pnt2d(tmp);
}

 System::Boolean OCBisector_PointOnBis::IsInfinite()
{
  return OCConverter::StandardBooleanToBoolean(((Bisector_PointOnBis*)nativeHandle)->IsInfinite());
}

 void OCBisector_PointOnBis::Dump()
{
  ((Bisector_PointOnBis*)nativeHandle)->Dump();
}


