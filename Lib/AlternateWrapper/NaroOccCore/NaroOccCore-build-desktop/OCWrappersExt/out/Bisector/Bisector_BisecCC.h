// File generated by CPPExt (Transient)
//
#ifndef _Bisector_BisecCC_OCWrappers_HeaderFile
#define _Bisector_BisecCC_OCWrappers_HeaderFile

// include the wrapped class
#include <Bisector_BisecCC.hxx>
#include "../Converter.h"

#include "Bisector_Curve.h"

#include "../TColStd/TColStd_SequenceOfReal.h"
#include "Bisector_PolyBis.h"
#include "../gp/gp_Pnt2d.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom2d_Curve;
ref class OCgp_Pnt2d;
ref class OCGeom2d_Geometry;
ref class OCgp_Trsf2d;
ref class OCgp_Vec2d;
ref class OCBisector_PolyBis;
ref class OCTColStd_SequenceOfReal;


//! Construct the bisector between two curves. <br>
//!          The curves can intersect only in their extremities. <br>
public ref class OCBisector_BisecCC : OCBisector_Curve {

protected:
  // dummy constructor;
  OCBisector_BisecCC(OCDummy^) : OCBisector_Curve((OCDummy^)nullptr) {};

public:

// constructor from native
OCBisector_BisecCC(Handle(Bisector_BisecCC)* nativeHandle);

// Methods PUBLIC


OCBisector_BisecCC();

//! Constructs  the bisector  between the  curves <Cu1> <br>
//!          and <Cu2>. <br>
//! <br>
//!          <Side1>  (resp <Side2>) = 1   if the <br>
//!          bisector curve is on the left of <Cu1> (resp <Cu2>) <br>
//!          else <Side1> (resp <Side2>) = -1. <br>
//! <br>
//!          the Bisector is trimmed by the Point <Origin>. <br>
//!          <DistMax> is used to trim the bisector.The distance <br>
//!          between the points of the bisector and <Cu> is smaller <br>
//!          than <DistMax>. <br>
//! <br>
OCBisector_BisecCC(OCNaroWrappers::OCGeom2d_Curve^ Cu1, OCNaroWrappers::OCGeom2d_Curve^ Cu2, Standard_Real Side1, Standard_Real Side2, OCNaroWrappers::OCgp_Pnt2d^ Origin, Standard_Real DistMax);

//! Computes the bisector  between the  curves <Cu1> <br>
//!          and <Cu2>. <br>
//! <br>
//!          <Side1>  (resp <Side2>) = 1   if the <br>
//!          bisector curve is on the left of <Cu1> (resp <Cu2>) <br>
//!          else <Side1> (resp <Side2>) = -1. <br>
//! <br>
//!          the Bisector is trimmed by the Point <Origin>. <br>
//! <br>
//!          <DistMax> is used to trim the bisector.The distance <br>
//!          between the points of the bisector and <Cu> is smaller <br>
//!          than <DistMax>. <br>
//! <br>
 /*instead*/  void Perform(OCNaroWrappers::OCGeom2d_Curve^ Cu1, OCNaroWrappers::OCGeom2d_Curve^ Cu2, Standard_Real Side1, Standard_Real Side2, OCNaroWrappers::OCgp_Pnt2d^ Origin, Standard_Real DistMax) ;


 /*instead*/  System::Boolean IsExtendAtStart() ;


 /*instead*/  System::Boolean IsExtendAtEnd() ;


 /*instead*/  void Reverse() ;


 /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;

//! Returns the order of continuity of the curve. <br>//! Raised if N < 0. <br>
 /*instead*/  System::Boolean IsCN(Standard_Integer N) ;

//! The parameter  on <me> is linked to  the parameter <br>
//!          on the first curve. This method creates the same bisector <br>
//!          where the curves are inversed. <br>
 /*instead*/  OCBisector_BisecCC^ ChangeGuide() ;


 /*instead*/  OCGeom2d_Geometry^ Copy() ;


//!  Transformation of a geometric object. This tansformation <br>
//!  can be a translation, a rotation, a symmetry, a scaling <br>
//!  or a complex transformation obtained by combination of <br>
//!  the previous elementaries transformations. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;


 /*instead*/  Standard_Real FirstParameter() ;


 /*instead*/  Standard_Real LastParameter() ;


 /*instead*/  OCGeomAbs_Shape Continuity() ;

//! If necessary,  breaks the  curve in  intervals  of <br>
//!          continuity  <C1>.    And  returns   the number   of <br>
//!          intervals. <br>
 /*instead*/  Standard_Integer NbIntervals() ;

//! Returns  the  first  parameter    of  the  current <br>
//!          interval. <br>
 /*instead*/  Standard_Real IntervalFirst(Standard_Integer Index) ;

//! Returns  the  last  parameter    of  the  current <br>
//!          interval. <br>
 /*instead*/  Standard_Real IntervalLast(Standard_Integer Index) ;


 /*instead*/  OCGeomAbs_Shape IntervalContinuity() ;


 /*instead*/  System::Boolean IsClosed() ;


 /*instead*/  System::Boolean IsPeriodic() ;

//! Returns the point of parameter U. <br>
//!          Computes the distance between the current point and <br>
//!          the two curves I separate. <br>
//!          Computes the parameters on each curve corresponding <br>
//!          of the projection of the current point. <br>
 /*instead*/  OCgp_Pnt2d^ ValueAndDist(Standard_Real U, Standard_Real& U1, Standard_Real& U2, Standard_Real& Distance) ;

//! Returns the point of parameter U. <br>
//!          Computes the distance between the current point and <br>
//!          the two curves I separate. <br>
//!          Computes the parameters on each curve corresponding <br>
//!          of the projection of the current point. <br>
 /*instead*/  OCgp_Pnt2d^ ValueByInt(Standard_Real U, Standard_Real& U1, Standard_Real& U2, Standard_Real& Distance) ;


 /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V) ;


 /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;


 /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) ;


 /*instead*/  OCgp_Vec2d^ DN(Standard_Real U, Standard_Integer N) ;


 /*instead*/  System::Boolean IsEmpty() ;

//! Returns the parameter on the curve1 of the projection <br>
//!          of the point of parameter U on <me>. <br>
 /*instead*/  Standard_Real LinkBisCurve(Standard_Real U) ;

//! Returns the reciproque of LinkBisCurve. <br>
 /*instead*/  Standard_Real LinkCurveBis(Standard_Real U) ;


 /*instead*/  Standard_Real Parameter(OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  OCGeom2d_Curve^ Curve(Standard_Integer IndCurve) ;


 /*instead*/  OCBisector_PolyBis^ Polygon() ;


 /*instead*/  void Dump(Standard_Integer Deep, Standard_Integer Offset) ;

~OCBisector_BisecCC()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
