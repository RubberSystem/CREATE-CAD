// File generated by CPPExt (Transient)
//
#ifndef _Bisector_BisecPC_OCWrappers_HeaderFile
#define _Bisector_BisecPC_OCWrappers_HeaderFile

// include the wrapped class
#include <Bisector_BisecPC.hxx>
#include "../Converter.h"

#include "Bisector_Curve.h"

#include "../gp/gp_Pnt2d.h"
#include "../TColStd/TColStd_SequenceOfReal.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom2d_Curve;
ref class OCgp_Pnt2d;
ref class OCGeom2d_Geometry;
ref class OCgp_Trsf2d;
ref class OCgp_Vec2d;
ref class OCTColStd_SequenceOfReal;


//! Provides the bisector between a point and a curve. <br>
//!          the curvature on the curve has to be monoton. <br>
//!          the point can't be on the curve exept at the extremitys. <br>
//! <br>
public ref class OCBisector_BisecPC : OCBisector_Curve {

protected:
  // dummy constructor;
  OCBisector_BisecPC(OCDummy^) : OCBisector_Curve((OCDummy^)nullptr) {};

public:

// constructor from native
OCBisector_BisecPC(Handle(Bisector_BisecPC)* nativeHandle);

// Methods PUBLIC


OCBisector_BisecPC();

//! Constructs the bisector between the point <P> and <br>
//!          the curve <Cu>. <br>
//!          <Side> = 1. if the bisector curve is on the Left of <Cu> <br>
//!          else <Side> = -1. <br>
//!          <DistMax> is used to trim the bisector.The distance <br>
//!          between the points of the bisector and <Cu> is smaller <br>
//!          than <DistMax>. <br>
//! <br>
OCBisector_BisecPC(OCNaroWrappers::OCGeom2d_Curve^ Cu, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Side, Standard_Real DistMax);

//! Constructs the bisector between the point <P> and <br>
//!          the curve <Cu> Trimmed by <UMin> and <UMax> <br>
//!          <Side> = 1. if the bisector curve is on the Left of <Cu> <br>
//!          else <Side> = -1. <br>
//!  Warning: the bisector is supposed all over defined between <br>
//!          <UMin> and <UMax>. <br>
OCBisector_BisecPC(OCNaroWrappers::OCGeom2d_Curve^ Cu, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Side, Standard_Real UMin, Standard_Real UMax);

//! Construct the bisector between the point <P> and <br>
//!          the curve <Cu>. <br>
//!          <Side> = 1. if the bisector curve is on the Left of <Cu> <br>
//!          else <Side> = -1. <br>
//!          <DistMax> is used to trim the bisector.The distance <br>
//!          between the points of the bisector and <Cu> is smaller <br>
//!          than <DistMax>. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCGeom2d_Curve^ Cu, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Side, Standard_Real DistMax) ;

//! Returns True if the bisector is extended at start. <br>
 /*instead*/  System::Boolean IsExtendAtStart() ;

//! Returns True if the bisector is extended at end. <br>
 /*instead*/  System::Boolean IsExtendAtEnd() ;


//!  Changes the direction of parametrization of <me>. <br>
//!  The orientation  of the curve is modified. If the curve <br>
//!  is bounded the StartPoint of the initial curve becomes the <br>
//!  EndPoint of the reversed curve  and the EndPoint of the initial <br>
//!  curve becomes the StartPoint of the reversed curve. <br>
 /*instead*/  void Reverse() ;

//! Returns the  parameter on the  reversed  curve for <br>
//!          the point of parameter U on <me>. <br>
 /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;


 /*instead*/  OCGeom2d_Geometry^ Copy() ;


//!  Transformation of a geometric object. This tansformation <br>
//!  can be a translation, a rotation, a symmetry, a scaling <br>
//!  or a complex transformation obtained by combination of <br>
//!  the previous elementaries transformations. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Returns the order of continuity of the curve. <br>//! Raised if N < 0. <br>
 /*instead*/  System::Boolean IsCN(Standard_Integer N) ;

//! Value of the first parameter. <br>
 /*instead*/  Standard_Real FirstParameter() ;

//! Value of the last parameter. <br>
 /*instead*/  Standard_Real LastParameter() ;


 /*instead*/  OCGeomAbs_Shape Continuity() ;

//! If necessary,  breaks the  curve in  intervals  of <br>
//!          continuity  <C1>.    And  returns   the number   of <br>
//!          intervals. <br>
 /*instead*/  Standard_Integer NbIntervals() ;

//! Returns  the  first  parameter    of  the  current <br>
//!          interval. <br>
 /*instead*/  Standard_Real IntervalFirst(Standard_Integer Index) ;

//! Returns  the  last  parameter    of  the  current <br>
//!          interval. <br>
 /*instead*/  Standard_Real IntervalLast(Standard_Integer Index) ;


 /*instead*/  OCGeomAbs_Shape IntervalContinuity() ;


 /*instead*/  System::Boolean IsClosed() ;


 /*instead*/  System::Boolean IsPeriodic() ;

//! Returns   the   distance   between  the  point  of <br>
//!          parameter U on <me> and my point or my curve. <br>
 /*instead*/  Standard_Real Distance(Standard_Real U) ;


 /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V) ;


 /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;


 /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) ;


 /*instead*/  OCgp_Vec2d^ DN(Standard_Real U, Standard_Integer N) ;


 /*instead*/  void Dump(Standard_Integer Deep, Standard_Integer Offset) ;

//! Returns the parameter on the curve1 of the projection <br>
//!          of the point of parameter U on <me>. <br>
 /*instead*/  Standard_Real LinkBisCurve(Standard_Real U) ;

//! Returns the reciproque of LinkBisCurve. <br>
 /*instead*/  Standard_Real LinkCurveBis(Standard_Real U) ;

//! Returns the parameter on <me> corresponding to <P>. <br>
 /*instead*/  Standard_Real Parameter(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Returns <True> if the bisector is empty. <br>
 /*instead*/  System::Boolean IsEmpty() ;

~OCBisector_BisecPC()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
