// File generated by CPPExt (Transient)
//
#ifndef _Bisector_BisecAna_OCWrappers_HeaderFile
#define _Bisector_BisecAna_OCWrappers_HeaderFile

// include the wrapped class
#include <Bisector_BisecAna.hxx>
#include "../Converter.h"

#include "Bisector_Curve.h"

#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom2d_TrimmedCurve;
ref class OCGeom2d_Curve;
ref class OCgp_Pnt2d;
ref class OCgp_Vec2d;
ref class OCGeom2d_Point;
ref class OCGccInt_Bisec;
ref class OCGeom2d_Geometry;
ref class OCgp_Trsf2d;



public ref class OCBisector_BisecAna : OCBisector_Curve {

protected:
  // dummy constructor;
  OCBisector_BisecAna(OCDummy^) : OCBisector_Curve((OCDummy^)nullptr) {};

public:

// constructor from native
OCBisector_BisecAna(Handle(Bisector_BisecAna)* nativeHandle);

// Methods PUBLIC


OCBisector_BisecAna();

//! Performs  the bisecting line  between the  curves <br>
//!            <Cu1> and <Cu2>. <br>
//!            <oncurve> is True if the point <P> is common to <Cu1> <br>
//!            and <Cu2>. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCGeom2d_Curve^ Cu1, OCNaroWrappers::OCGeom2d_Curve^ Cu2, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, Standard_Real Sense, Standard_Real Tolerance, System::Boolean oncurve) ;

//! Performs  the bisecting line  between the  curve <br>
//!            <Cu1> and the point <Pnt>. <br>
//!            <oncurve> is True if the point <P> is the point <Pnt>. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCGeom2d_Curve^ Cu, OCNaroWrappers::OCGeom2d_Point^ Pnt, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, Standard_Real Sense, Standard_Real Tolerance, System::Boolean oncurve) ;

//! Performs  the bisecting line  between the  curve <br>
//!            <Cu> and the point <Pnt>. <br>
//!            <oncurve> is True if the point <P> is the point <Pnt>. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCGeom2d_Point^ Pnt, OCNaroWrappers::OCGeom2d_Curve^ Cu, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, Standard_Real Sense, Standard_Real Tolerance, System::Boolean oncurve) ;

//! Performs  the bisecting line  between the two points <br>
//!            <Pnt1>  and <Pnt2>. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCGeom2d_Point^ Pnt1, OCNaroWrappers::OCGeom2d_Point^ Pnt2, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, Standard_Real Sense, Standard_Real Tolerance, System::Boolean oncurve) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom2d_TrimmedCurve^ bisector) ;


 /*instead*/  System::Boolean IsExtendAtStart() ;


 /*instead*/  System::Boolean IsExtendAtEnd() ;

//! Trim <me> by a domain defined by the curve <Cu>. <br>
//!            This domain is the set of the points which are <br>
//!            nearest from <Cu> than the extremitis of <Cu>. <br>
 /*instead*/  void SetTrim(OCNaroWrappers::OCGeom2d_Curve^ Cu) ;

//! Trim <me> by a domain defined by uf  and  ul <br>
 /*instead*/  void SetTrim(Standard_Real uf, Standard_Real ul) ;


 /*instead*/  void Reverse() ;


 /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;

//! Returns the order of continuity of the curve. <br>//! Raised if N < 0. <br>
 /*instead*/  System::Boolean IsCN(Standard_Integer N) ;


 /*instead*/  OCGeom2d_Geometry^ Copy() ;


 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;


 /*instead*/  Standard_Real FirstParameter() ;


 /*instead*/  Standard_Real LastParameter() ;


 /*instead*/  System::Boolean IsClosed() ;


 /*instead*/  System::Boolean IsPeriodic() ;


 /*instead*/  OCGeomAbs_Shape Continuity() ;


 /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1) ;


 /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;


 /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) ;


 /*instead*/  OCgp_Vec2d^ DN(Standard_Real U, Standard_Integer N) ;


 /*instead*/  OCGeom2d_Curve^ Geom2dCurve() ;


 /*instead*/  Standard_Real Parameter(OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  Standard_Real ParameterOfStartPoint() ;


 /*instead*/  Standard_Real ParameterOfEndPoint() ;

//! If necessary,  breaks the  curve in  intervals  of <br>
//!          continuity  <C1>.    And  returns   the number   of <br>
//!          intervals. <br>
 /*instead*/  Standard_Integer NbIntervals() ;

//! Returns  the  first  parameter    of  the  current <br>
//!          interval. <br>
 /*instead*/  Standard_Real IntervalFirst(Standard_Integer Index) ;

//! Returns  the  last  parameter    of  the  current <br>
//!          interval. <br>
 /*instead*/  Standard_Real IntervalLast(Standard_Integer Index) ;


 /*instead*/  void Dump(Standard_Integer Deep, Standard_Integer Offset) ;

~OCBisector_BisecAna()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
