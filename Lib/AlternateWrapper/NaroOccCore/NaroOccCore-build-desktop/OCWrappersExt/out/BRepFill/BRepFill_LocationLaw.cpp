// File generated by CPPExt (CPP file)
//

#include "BRepFill_LocationLaw.h"
#include "../Converter.h"
#include "../GeomFill/GeomFill_HArray1OfLocationLaw.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TopTools/TopTools_HArray1OfShape.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../TopoDS/TopoDS_Wire.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../GeomFill/GeomFill_LocationLaw.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopoDS/TopoDS_Shape.h"


using namespace OCNaroWrappers;

OCBRepFill_LocationLaw::OCBRepFill_LocationLaw(Handle(BRepFill_LocationLaw)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_BRepFill_LocationLaw(*nativeHandle);
}

 OCGeomFill_PipeError OCBRepFill_LocationLaw::GetStatus()
{
  return (OCGeomFill_PipeError)((*((Handle_BRepFill_LocationLaw*)nativeHandle))->GetStatus());
}

 void OCBRepFill_LocationLaw::TransformInG0Law()
{
  (*((Handle_BRepFill_LocationLaw*)nativeHandle))->TransformInG0Law();
}

 void OCBRepFill_LocationLaw::TransformInCompatibleLaw(Standard_Real AngularTolerance)
{
  (*((Handle_BRepFill_LocationLaw*)nativeHandle))->TransformInCompatibleLaw(AngularTolerance);
}

 void OCBRepFill_LocationLaw::DeleteTransform()
{
  (*((Handle_BRepFill_LocationLaw*)nativeHandle))->DeleteTransform();
}

 Standard_Integer OCBRepFill_LocationLaw::NbHoles(Standard_Real Tol)
{
  return (*((Handle_BRepFill_LocationLaw*)nativeHandle))->NbHoles(Tol);
}

 void OCBRepFill_LocationLaw::Holes(OCNaroWrappers::OCTColStd_Array1OfInteger^ Interval)
{
  (*((Handle_BRepFill_LocationLaw*)nativeHandle))->Holes(*((TColStd_Array1OfInteger*)Interval->Handle));
}

 Standard_Integer OCBRepFill_LocationLaw::NbLaw()
{
  return (*((Handle_BRepFill_LocationLaw*)nativeHandle))->NbLaw();
}

OCGeomFill_LocationLaw^ OCBRepFill_LocationLaw::Law(Standard_Integer Index)
{
  Handle(GeomFill_LocationLaw) tmp = (*((Handle_BRepFill_LocationLaw*)nativeHandle))->Law(Index);
  return gcnew OCGeomFill_LocationLaw(&tmp);
}

OCTopoDS_Wire^ OCBRepFill_LocationLaw::Wire()
{
  TopoDS_Wire* tmp = new TopoDS_Wire();
  *tmp = (*((Handle_BRepFill_LocationLaw*)nativeHandle))->Wire();
  return gcnew OCTopoDS_Wire(tmp);
}

OCTopoDS_Edge^ OCBRepFill_LocationLaw::Edge(Standard_Integer Index)
{
  TopoDS_Edge* tmp = new TopoDS_Edge();
  *tmp = (*((Handle_BRepFill_LocationLaw*)nativeHandle))->Edge(Index);
  return gcnew OCTopoDS_Edge(tmp);
}

OCTopoDS_Vertex^ OCBRepFill_LocationLaw::Vertex(Standard_Integer Index)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = (*((Handle_BRepFill_LocationLaw*)nativeHandle))->Vertex(Index);
  return gcnew OCTopoDS_Vertex(tmp);
}

 void OCBRepFill_LocationLaw::PerformVertex(Standard_Integer Index, OCNaroWrappers::OCTopoDS_Vertex^ InputVertex, Standard_Real TolMin, OCNaroWrappers::OCTopoDS_Vertex^ OutputVertex, Standard_Integer Location)
{
  (*((Handle_BRepFill_LocationLaw*)nativeHandle))->PerformVertex(Index, *((TopoDS_Vertex*)InputVertex->Handle), TolMin, *((TopoDS_Vertex*)OutputVertex->Handle), Location);
}

 void OCBRepFill_LocationLaw::CurvilinearBounds(Standard_Integer Index, Standard_Real& First, Standard_Real& Last)
{
  (*((Handle_BRepFill_LocationLaw*)nativeHandle))->CurvilinearBounds(Index, First, Last);
}

 System::Boolean OCBRepFill_LocationLaw::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRepFill_LocationLaw*)nativeHandle))->IsClosed());
}

 Standard_Integer OCBRepFill_LocationLaw::IsG1(Standard_Integer Index, Standard_Real SpatialTolerance, Standard_Real AngularTolerance)
{
  return (*((Handle_BRepFill_LocationLaw*)nativeHandle))->IsG1(Index, SpatialTolerance, AngularTolerance);
}

 void OCBRepFill_LocationLaw::D0(Standard_Real Abscissa, OCNaroWrappers::OCTopoDS_Shape^ Section)
{
  (*((Handle_BRepFill_LocationLaw*)nativeHandle))->D0(Abscissa, *((TopoDS_Shape*)Section->Handle));
}

 void OCBRepFill_LocationLaw::Parameter(Standard_Real Abscissa, Standard_Integer& Index, Standard_Real& Param)
{
  (*((Handle_BRepFill_LocationLaw*)nativeHandle))->Parameter(Abscissa, Index, Param);
}

 Standard_Real OCBRepFill_LocationLaw::Abscissa(Standard_Integer Index, Standard_Real Param)
{
  return (*((Handle_BRepFill_LocationLaw*)nativeHandle))->Abscissa(Index, Param);
}


