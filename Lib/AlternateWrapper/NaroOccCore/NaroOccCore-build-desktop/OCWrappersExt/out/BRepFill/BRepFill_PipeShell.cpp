// File generated by CPPExt (CPP file)
//

#include "BRepFill_PipeShell.h"
#include "../Converter.h"
#include "../Law/Law_Function.h"
#include "BRepFill_LocationLaw.h"
#include "BRepFill_SectionLaw.h"
#include "../TopTools/TopTools_HArray2OfShape.h"
#include "../TopoDS/TopoDS_Wire.h"
#include "../gp/gp_Ax2.h"
#include "../gp/gp_Dir.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopTools/TopTools_ListOfShape.h"
#include "BRepFill_Section.h"
#include "../gp/gp_Trsf.h"
#include "BRepFill_Sweep.h"


using namespace OCNaroWrappers;

OCBRepFill_PipeShell::OCBRepFill_PipeShell(Handle(BRepFill_PipeShell)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_BRepFill_PipeShell(*nativeHandle);
}

OCBRepFill_PipeShell::OCBRepFill_PipeShell(OCNaroWrappers::OCTopoDS_Wire^ Spine) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_BRepFill_PipeShell(new BRepFill_PipeShell(*((TopoDS_Wire*)Spine->Handle)));
}

 void OCBRepFill_PipeShell::Set(System::Boolean Frenet)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Set(OCConverter::BooleanToStandardBoolean(Frenet));
}

 void OCBRepFill_PipeShell::Set(OCNaroWrappers::OCgp_Ax2^ Axe)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Set(*((gp_Ax2*)Axe->Handle));
}

 void OCBRepFill_PipeShell::Set(OCNaroWrappers::OCgp_Dir^ BiNormal)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Set(*((gp_Dir*)BiNormal->Handle));
}

 System::Boolean OCBRepFill_PipeShell::Set(OCNaroWrappers::OCTopoDS_Shape^ SpineSupport)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRepFill_PipeShell*)nativeHandle))->Set(*((TopoDS_Shape*)SpineSupport->Handle)));
}

 void OCBRepFill_PipeShell::Set(OCNaroWrappers::OCTopoDS_Wire^ AuxiliarySpine, System::Boolean CurvilinearEquivalence, System::Boolean KeepContact)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Set(*((TopoDS_Wire*)AuxiliarySpine->Handle), OCConverter::BooleanToStandardBoolean(CurvilinearEquivalence), OCConverter::BooleanToStandardBoolean(KeepContact));
}

 void OCBRepFill_PipeShell::Add(OCNaroWrappers::OCTopoDS_Shape^ Profile, System::Boolean WithContact, System::Boolean WithCorrection)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Add(*((TopoDS_Shape*)Profile->Handle), OCConverter::BooleanToStandardBoolean(WithContact), OCConverter::BooleanToStandardBoolean(WithCorrection));
}

 void OCBRepFill_PipeShell::Add(OCNaroWrappers::OCTopoDS_Shape^ Profile, OCNaroWrappers::OCTopoDS_Vertex^ Location, System::Boolean WithContact, System::Boolean WithCorrection)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Add(*((TopoDS_Shape*)Profile->Handle), *((TopoDS_Vertex*)Location->Handle), OCConverter::BooleanToStandardBoolean(WithContact), OCConverter::BooleanToStandardBoolean(WithCorrection));
}

 void OCBRepFill_PipeShell::SetLaw(OCNaroWrappers::OCTopoDS_Shape^ Profile, OCNaroWrappers::OCLaw_Function^ L, System::Boolean WithContact, System::Boolean WithCorrection)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->SetLaw(*((TopoDS_Shape*)Profile->Handle), *((Handle_Law_Function*)L->Handle), OCConverter::BooleanToStandardBoolean(WithContact), OCConverter::BooleanToStandardBoolean(WithCorrection));
}

 void OCBRepFill_PipeShell::SetLaw(OCNaroWrappers::OCTopoDS_Shape^ Profile, OCNaroWrappers::OCLaw_Function^ L, OCNaroWrappers::OCTopoDS_Vertex^ Location, System::Boolean WithContact, System::Boolean WithCorrection)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->SetLaw(*((TopoDS_Shape*)Profile->Handle), *((Handle_Law_Function*)L->Handle), *((TopoDS_Vertex*)Location->Handle), OCConverter::BooleanToStandardBoolean(WithContact), OCConverter::BooleanToStandardBoolean(WithCorrection));
}

 void OCBRepFill_PipeShell::Delete(OCNaroWrappers::OCTopoDS_Shape^ Profile)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Delete(*((TopoDS_Shape*)Profile->Handle));
}

 System::Boolean OCBRepFill_PipeShell::IsReady()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRepFill_PipeShell*)nativeHandle))->IsReady());
}

 OCGeomFill_PipeError OCBRepFill_PipeShell::GetStatus()
{
  return (OCGeomFill_PipeError)((*((Handle_BRepFill_PipeShell*)nativeHandle))->GetStatus());
}

 void OCBRepFill_PipeShell::SetTolerance(Standard_Real Tol3d, Standard_Real BoundTol, Standard_Real TolAngular)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->SetTolerance(Tol3d, BoundTol, TolAngular);
}

 void OCBRepFill_PipeShell::SetTransition(OCBRepFill_TransitionStyle Mode, Standard_Real Angmin, Standard_Real Angmax)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->SetTransition((BRepFill_TransitionStyle)Mode, Angmin, Angmax);
}

 void OCBRepFill_PipeShell::Simulate(Standard_Integer NumberOfSection, OCNaroWrappers::OCTopTools_ListOfShape^ Sections)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Simulate(NumberOfSection, *((TopTools_ListOfShape*)Sections->Handle));
}

 System::Boolean OCBRepFill_PipeShell::Build()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRepFill_PipeShell*)nativeHandle))->Build());
}

 System::Boolean OCBRepFill_PipeShell::MakeSolid()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRepFill_PipeShell*)nativeHandle))->MakeSolid());
}

OCTopoDS_Shape^ OCBRepFill_PipeShell::Shape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = (*((Handle_BRepFill_PipeShell*)nativeHandle))->Shape();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepFill_PipeShell::FirstShape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = (*((Handle_BRepFill_PipeShell*)nativeHandle))->FirstShape();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCBRepFill_PipeShell::LastShape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = (*((Handle_BRepFill_PipeShell*)nativeHandle))->LastShape();
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCBRepFill_PipeShell::Generated(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_ListOfShape^ L)
{
  (*((Handle_BRepFill_PipeShell*)nativeHandle))->Generated(*((TopoDS_Shape*)S->Handle), *((TopTools_ListOfShape*)L->Handle));
}


