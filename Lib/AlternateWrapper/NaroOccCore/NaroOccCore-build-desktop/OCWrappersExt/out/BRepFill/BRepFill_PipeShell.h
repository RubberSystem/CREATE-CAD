// File generated by CPPExt (Transient)
//
#ifndef _BRepFill_PipeShell_OCWrappers_HeaderFile
#define _BRepFill_PipeShell_OCWrappers_HeaderFile

// include the wrapped class
#include <BRepFill_PipeShell.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TopoDS/TopoDS_Wire.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "BRepFill_SequenceOfSection.h"
#include "../TopTools/TopTools_DataMapOfShapeListOfShape.h"
#include "../GeomFill/GeomFill_Trihedron.h"
#include "BRepFill_TransitionStyle.h"
#include "../GeomFill/GeomFill_PipeError.h"


namespace OCNaroWrappers
{

ref class OCLaw_Function;
ref class OCBRepFill_LocationLaw;
ref class OCBRepFill_SectionLaw;
ref class OCTopTools_HArray2OfShape;
ref class OCTopoDS_Wire;
ref class OCgp_Ax2;
ref class OCgp_Dir;
ref class OCTopoDS_Shape;
ref class OCTopoDS_Vertex;
ref class OCTopTools_ListOfShape;
ref class OCBRepFill_Section;
ref class OCgp_Trsf;
ref class OCBRepFill_Sweep;


//! Perform general sweeping construction <br>
public ref class OCBRepFill_PipeShell : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCBRepFill_PipeShell(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepFill_PipeShell(Handle(BRepFill_PipeShell)* nativeHandle);

// Methods PUBLIC

//! Set an sweep's mode <br>
//!         If no mode are setted, the mode use in MakePipe is used <br>
OCBRepFill_PipeShell(OCNaroWrappers::OCTopoDS_Wire^ Spine);

//! Set an Frenet or an CorrectedFrenet trihedron <br>
//!          to  perform  the  sweeping <br>
 /*instead*/  void Set(System::Boolean Frenet) ;

//! Set  an  fixed  trihedron  to  perform  the  sweeping <br>
//!         all sections will be parallel. <br>
 /*instead*/  void Set(OCNaroWrappers::OCgp_Ax2^ Axe) ;

//! Set an fixed  BiNormal  direction to  perform <br>
//!  the sweeping <br>
 /*instead*/  void Set(OCNaroWrappers::OCgp_Dir^ BiNormal) ;

//! Set support to the spine to define the BiNormal <br>
//!           at   the spine, like    the  normal the surfaces. <br>
//!  Warning: To  be  effective,  Each  edge  of  the  <spine>  must <br>
//!  have an  representaion  on   one   face  of<SpineSupport> <br>
 /*instead*/  System::Boolean Set(OCNaroWrappers::OCTopoDS_Shape^ SpineSupport) ;

//! Set  an  auxiliary  spine  to  define  the Normal <br>
//!  For  each  Point  of  the  Spine  P,  an  Point  Q  is  evalued <br>
//!    on  <AuxiliarySpine> <br>
//! If <CurvilinearEquivalence> <br>
//!   Q split <AuxiliarySpine> with  the  same  length ratio <br>
//!   than P split  <Spline>. <br>
//! Else  the  plan  define  by  P  and  the  tangent  to  the  <Spine> <br>
//!       intersect <AuxiliarySpine> in Q. <br>
//! If <KeepContact> the  Normal  is  defined to  assume like  the  sweeped <br>
//!                  section is  in  contact to  the  <AuxiliarySpine> <br>
//! Else  the  Normal  is  defined  by the vector  PQ. <br>//! Give section to sweep. <br>
//! Possibilities are : <br>
//!	- Give one or sevral profile <br>
//!     - Give one profile and an homotetic law. <br>
//!     - Automatic compute of correspondance beetween profile, and section <br>
//!                 on the sweeped shape <br>
//!     - correspondance beetween profile, and section on the sweeped shape <br>
//!       defined by a vertex of the spine <br>
 /*instead*/  void Set(OCNaroWrappers::OCTopoDS_Wire^ AuxiliarySpine, System::Boolean CurvilinearEquivalence, System::Boolean KeepContact) ;

//! Set an section. The corespondance with the spine, will <br>
//!          be automaticaly performed. <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Shape^ Profile, System::Boolean WithContact, System::Boolean WithCorrection) ;

//! Set an section.   The corespondance with the spine, is <br>
//!          given by  <Location> <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Shape^ Profile, OCNaroWrappers::OCTopoDS_Vertex^ Location, System::Boolean WithContact, System::Boolean WithCorrection) ;

//! Set  an    section  and  an   homotetic    law. <br>
//! The  homotetie's  centers  is  given  by  point  on  the  <Spine>. <br>
 /*instead*/  void SetLaw(OCNaroWrappers::OCTopoDS_Shape^ Profile, OCNaroWrappers::OCLaw_Function^ L, System::Boolean WithContact, System::Boolean WithCorrection) ;

//! Set  an    section  and  an   homotetic    law. <br>
//!   The  homotetie  center  is  given  by  point  on  the  <Spine> <br>
 /*instead*/  void SetLaw(OCNaroWrappers::OCTopoDS_Shape^ Profile, OCNaroWrappers::OCLaw_Function^ L, OCNaroWrappers::OCTopoDS_Vertex^ Location, System::Boolean WithContact, System::Boolean WithCorrection) ;

//! Delete an section. <br>
 /*instead*/  void Delete(OCNaroWrappers::OCTopoDS_Shape^ Profile) ;

//! Say if <me> is ready to build the shape <br>
//!          return False if <me> do not have section definition <br>
 /*instead*/  System::Boolean IsReady() ;

//! Get a status, when Simulate or Build failed. <br>
 /*instead*/  OCGeomFill_PipeError GetStatus() ;


 /*instead*/  void SetTolerance(Standard_Real Tol3d, Standard_Real BoundTol, Standard_Real TolAngular) ;

//! Set the  Transition Mode to manage discontinuities <br>
//!          on the sweep. <br>
 /*instead*/  void SetTransition(OCBRepFill_TransitionStyle Mode, Standard_Real Angmin, Standard_Real Angmax) ;

//! Perform simulation of the sweep : <br>
//!         Somes Section are returned. <br>
 /*instead*/  void Simulate(Standard_Integer NumberOfSection, OCNaroWrappers::OCTopTools_ListOfShape^ Sections) ;

//! Builds the resulting shape (redefined from MakeShape). <br>
 /*instead*/  System::Boolean Build() ;

//! Transform the sweeping Shell in Solid. <br>
//!          If the section are not closed returns False <br>
 /*instead*/  System::Boolean MakeSolid() ;

//! Returns the result Shape. <br>
 /*instead*/  OCTopoDS_Shape^ Shape() ;

//! Returns the  TopoDS  Shape of the bottom of the sweep. <br>
 /*instead*/  OCTopoDS_Shape^ FirstShape() ;

//! Returns the TopoDS Shape of the top of the sweep. <br>
 /*instead*/  OCTopoDS_Shape^ LastShape() ;

//! Returns the  list   of shapes generated   from the <br>
//!          shape <S>. <br>
 /*instead*/  void Generated(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_ListOfShape^ L) ;

~OCBRepFill_PipeShell()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
