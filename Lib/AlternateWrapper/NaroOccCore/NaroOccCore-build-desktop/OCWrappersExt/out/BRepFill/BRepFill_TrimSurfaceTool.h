// File generated by CPPExt (MPV)
//
#ifndef _BRepFill_TrimSurfaceTool_OCWrappers_HeaderFile
#define _BRepFill_TrimSurfaceTool_OCWrappers_HeaderFile

// include native header
#include <BRepFill_TrimSurfaceTool.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Face.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom2d_Curve;
ref class OCTopoDS_Face;
ref class OCTopoDS_Edge;
ref class OCTColgp_SequenceOfPnt;
ref class OCgp_Pnt2d;
ref class OCGeom_Curve;



public ref class OCBRepFill_TrimSurfaceTool  {

protected:
  BRepFill_TrimSurfaceTool* nativeHandle;
  OCBRepFill_TrimSurfaceTool(OCDummy^) {};

public:
  property BRepFill_TrimSurfaceTool* Handle
  {
    BRepFill_TrimSurfaceTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepFill_TrimSurfaceTool(BRepFill_TrimSurfaceTool* nativeHandle);

// Methods PUBLIC


OCBRepFill_TrimSurfaceTool(OCNaroWrappers::OCGeom2d_Curve^ Bis, OCNaroWrappers::OCTopoDS_Face^ Face1, OCNaroWrappers::OCTopoDS_Face^ Face2, OCNaroWrappers::OCTopoDS_Edge^ Edge1, OCNaroWrappers::OCTopoDS_Edge^ Edge2, System::Boolean Inv1, System::Boolean Inv2);

//! Intersect <Bis>  with the  projection of the edges <br>
//!          <EdgeOnFi> and returns the intersecting parameters <br>
//!          on Bis and on the edges <br>
//!          P.X() : Parameter on Bis <br>
//!          P.Y() : Parameter on EdgeOnF1 <br>
//!          P.Z() : Parameter on EdgeOnF2 <br>//! raises if <Edge> is not a edge of Face1 or Face2. <br>
 /*instead*/  void IntersectWith(OCNaroWrappers::OCTopoDS_Edge^ EdgeOnF1, OCNaroWrappers::OCTopoDS_Edge^ EdgeOnF2, OCNaroWrappers::OCTColgp_SequenceOfPnt^ Points) ;

//! returns True if the Line (P, DZ) intersect the Faces <br>
 /*instead*/  System::Boolean IsOnFace(OCNaroWrappers::OCgp_Pnt2d^ Point) ;

//! returns the parameter of the  point <Point> on the <br>
//!          Edge <Edge>, assuming that the point is on the edge. <br>
 /*instead*/  Standard_Real ProjOn(OCNaroWrappers::OCgp_Pnt2d^ Point, OCNaroWrappers::OCTopoDS_Edge^ Edge) ;


 /*instead*/  void Project(Standard_Real U1, Standard_Real U2, OCNaroWrappers::OCGeom_Curve^ Curve, OCNaroWrappers::OCGeom2d_Curve^ PCurve1, OCNaroWrappers::OCGeom2d_Curve^ PCurve2, OCGeomAbs_Shape& myCont) ;

~OCBRepFill_TrimSurfaceTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
