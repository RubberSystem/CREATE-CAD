// File generated by CPPExt (CPP file)
//

#include "StepShape_MeasureQualification.h"
#include "../Converter.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "../StepBasic/StepBasic_MeasureWithUnit.h"
#include "StepShape_HArray1OfValueQualifier.h"
#include "StepShape_ValueQualifier.h"


using namespace OCNaroWrappers;

OCStepShape_MeasureQualification::OCStepShape_MeasureQualification(Handle(StepShape_MeasureQualification)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepShape_MeasureQualification(*nativeHandle);
}

OCStepShape_MeasureQualification::OCStepShape_MeasureQualification() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepShape_MeasureQualification(new StepShape_MeasureQualification());
}

 void OCStepShape_MeasureQualification::Init(OCNaroWrappers::OCTCollection_HAsciiString^ name, OCNaroWrappers::OCTCollection_HAsciiString^ description, OCNaroWrappers::OCStepBasic_MeasureWithUnit^ qualified_measure, OCNaroWrappers::OCStepShape_HArray1OfValueQualifier^ qualifiers)
{
  (*((Handle_StepShape_MeasureQualification*)nativeHandle))->Init(*((Handle_TCollection_HAsciiString*)name->Handle), *((Handle_TCollection_HAsciiString*)description->Handle), *((Handle_StepBasic_MeasureWithUnit*)qualified_measure->Handle), *((Handle_StepShape_HArray1OfValueQualifier*)qualifiers->Handle));
}

OCTCollection_HAsciiString^ OCStepShape_MeasureQualification::Name()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepShape_MeasureQualification*)nativeHandle))->Name();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCStepShape_MeasureQualification::SetName(OCNaroWrappers::OCTCollection_HAsciiString^ name)
{
  (*((Handle_StepShape_MeasureQualification*)nativeHandle))->SetName(*((Handle_TCollection_HAsciiString*)name->Handle));
}

OCTCollection_HAsciiString^ OCStepShape_MeasureQualification::Description()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepShape_MeasureQualification*)nativeHandle))->Description();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCStepShape_MeasureQualification::SetDescription(OCNaroWrappers::OCTCollection_HAsciiString^ description)
{
  (*((Handle_StepShape_MeasureQualification*)nativeHandle))->SetDescription(*((Handle_TCollection_HAsciiString*)description->Handle));
}

OCStepBasic_MeasureWithUnit^ OCStepShape_MeasureQualification::QualifiedMeasure()
{
  Handle(StepBasic_MeasureWithUnit) tmp = (*((Handle_StepShape_MeasureQualification*)nativeHandle))->QualifiedMeasure();
  return gcnew OCStepBasic_MeasureWithUnit(&tmp);
}

 void OCStepShape_MeasureQualification::SetQualifiedMeasure(OCNaroWrappers::OCStepBasic_MeasureWithUnit^ qualified_measure)
{
  (*((Handle_StepShape_MeasureQualification*)nativeHandle))->SetQualifiedMeasure(*((Handle_StepBasic_MeasureWithUnit*)qualified_measure->Handle));
}

OCStepShape_HArray1OfValueQualifier^ OCStepShape_MeasureQualification::Qualifiers()
{
  Handle(StepShape_HArray1OfValueQualifier) tmp = (*((Handle_StepShape_MeasureQualification*)nativeHandle))->Qualifiers();
  return gcnew OCStepShape_HArray1OfValueQualifier(&tmp);
}

 Standard_Integer OCStepShape_MeasureQualification::NbQualifiers()
{
  return (*((Handle_StepShape_MeasureQualification*)nativeHandle))->NbQualifiers();
}

 void OCStepShape_MeasureQualification::SetQualifiers(OCNaroWrappers::OCStepShape_HArray1OfValueQualifier^ qualifiers)
{
  (*((Handle_StepShape_MeasureQualification*)nativeHandle))->SetQualifiers(*((Handle_StepShape_HArray1OfValueQualifier*)qualifiers->Handle));
}

OCStepShape_ValueQualifier^ OCStepShape_MeasureQualification::QualifiersValue(Standard_Integer num)
{
  StepShape_ValueQualifier* tmp = new StepShape_ValueQualifier();
  *tmp = (*((Handle_StepShape_MeasureQualification*)nativeHandle))->QualifiersValue(num);
  return gcnew OCStepShape_ValueQualifier(tmp);
}

 void OCStepShape_MeasureQualification::SetQualifiersValue(Standard_Integer num, OCNaroWrappers::OCStepShape_ValueQualifier^ aqualifier)
{
  (*((Handle_StepShape_MeasureQualification*)nativeHandle))->SetQualifiersValue(num, *((StepShape_ValueQualifier*)aqualifier->Handle));
}


