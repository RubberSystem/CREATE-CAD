// File generated by CPPExt (CPP file)
//

#include "StepShape_ReversibleTopologyItem.h"
#include "../Converter.h"
#include "../Standard/Standard_Transient.h"
#include "StepShape_Edge.h"
#include "StepShape_Path.h"
#include "StepShape_Face.h"
#include "StepShape_FaceBound.h"
#include "StepShape_ClosedShell.h"
#include "StepShape_OpenShell.h"


using namespace OCNaroWrappers;

OCStepShape_ReversibleTopologyItem::OCStepShape_ReversibleTopologyItem(StepShape_ReversibleTopologyItem* nativeHandle) : OCStepData_SelectType((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCStepShape_ReversibleTopologyItem::OCStepShape_ReversibleTopologyItem() : OCStepData_SelectType((OCDummy^)nullptr)

{
  nativeHandle = new StepShape_ReversibleTopologyItem();
}

 Standard_Integer OCStepShape_ReversibleTopologyItem::CaseNum(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return ((StepShape_ReversibleTopologyItem*)nativeHandle)->CaseNum(*((Handle_Standard_Transient*)ent->Handle));
}

OCStepShape_Edge^ OCStepShape_ReversibleTopologyItem::Edge()
{
  StepShape_Edge* tmp = new StepShape_Edge();
  *tmp = ((StepShape_ReversibleTopologyItem*)nativeHandle)->Edge();
  return gcnew OCStepShape_Edge(tmp);
}

OCStepShape_Path^ OCStepShape_ReversibleTopologyItem::Path()
{
  StepShape_Path* tmp = new StepShape_Path();
  *tmp = ((StepShape_ReversibleTopologyItem*)nativeHandle)->Path();
  return gcnew OCStepShape_Path(tmp);
}

OCStepShape_Face^ OCStepShape_ReversibleTopologyItem::Face()
{
  StepShape_Face* tmp = new StepShape_Face();
  *tmp = ((StepShape_ReversibleTopologyItem*)nativeHandle)->Face();
  return gcnew OCStepShape_Face(tmp);
}

OCStepShape_FaceBound^ OCStepShape_ReversibleTopologyItem::FaceBound()
{
  StepShape_FaceBound* tmp = new StepShape_FaceBound();
  *tmp = ((StepShape_ReversibleTopologyItem*)nativeHandle)->FaceBound();
  return gcnew OCStepShape_FaceBound(tmp);
}

OCStepShape_ClosedShell^ OCStepShape_ReversibleTopologyItem::ClosedShell()
{
  StepShape_ClosedShell* tmp = new StepShape_ClosedShell();
  *tmp = ((StepShape_ReversibleTopologyItem*)nativeHandle)->ClosedShell();
  return gcnew OCStepShape_ClosedShell(tmp);
}

OCStepShape_OpenShell^ OCStepShape_ReversibleTopologyItem::OpenShell()
{
  StepShape_OpenShell* tmp = new StepShape_OpenShell();
  *tmp = ((StepShape_ReversibleTopologyItem*)nativeHandle)->OpenShell();
  return gcnew OCStepShape_OpenShell(tmp);
}


