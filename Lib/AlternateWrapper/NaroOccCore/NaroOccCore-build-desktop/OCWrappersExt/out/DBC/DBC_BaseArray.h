// File generated by CPPExt (MPV)
//
#ifndef _DBC_BaseArray_OCWrappers_HeaderFile
#define _DBC_BaseArray_OCWrappers_HeaderFile

// include native header
#include <DBC_BaseArray.hxx>
#include "../Converter.h"


#include "../Standard/Standard_Storable.h"


namespace OCNaroWrappers
{




public ref class OCDBC_BaseArray  {

protected:
  DBC_BaseArray* nativeHandle;
  OCDBC_BaseArray(OCDummy^) {};

public:
  property DBC_BaseArray* Handle
  {
    DBC_BaseArray* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCDBC_BaseArray(DBC_BaseArray* nativeHandle);

// Methods PUBLIC

//! Creates an BaseArray of NULL size <br>
OCDBC_BaseArray();

//! Creates  an BaseArray of lower bound 0 and <br>
//!          upper bound <Size>-1. <br>
OCDBC_BaseArray(Standard_Integer Size);

//! Creates an array which  is the copy of the given <br>
//!          argument. <br>
OCDBC_BaseArray(OCNaroWrappers::OCDBC_BaseArray^ BaseArray);


virtual /*instead*/  void Delete() override;


 /*instead*/  Standard_Integer Length() ;

//! Returns the upper bound <br>
 /*instead*/  Standard_Integer Upper() ;

//! Locks the array <me> in memory and <br>
//!          returns its virtual address <br>
 /*instead*/  Standard_Address Lock() ;

//! unlocks the array <me> from memory <br>
 /*instead*/  void Unlock() ;


virtual /*instead*/  void ShallowDump(Standard_OStream& S) override;

~OCDBC_BaseArray()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
