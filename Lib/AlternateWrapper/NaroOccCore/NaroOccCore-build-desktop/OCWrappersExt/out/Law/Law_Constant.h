// File generated by CPPExt (Transient)
//
#ifndef _Law_Constant_OCWrappers_HeaderFile
#define _Law_Constant_OCWrappers_HeaderFile

// include the wrapped class
#include <Law_Constant.hxx>
#include "../Converter.h"

#include "Law_Function.h"

#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCTColStd_Array1OfReal;
ref class OCLaw_Function;


//! Loi constante <br>
public ref class OCLaw_Constant : OCLaw_Function {

protected:
  // dummy constructor;
  OCLaw_Constant(OCDummy^) : OCLaw_Function((OCDummy^)nullptr) {};

public:

// constructor from native
OCLaw_Constant(Handle(Law_Constant)* nativeHandle);

// Methods PUBLIC


OCLaw_Constant();

//! Set the radius and the range of the constant Law. <br>
 /*instead*/  void Set(Standard_Real Radius, Standard_Real PFirst, Standard_Real PLast) ;

//! Returns GeomAbs_CN <br>
virtual /*instead*/  OCGeomAbs_Shape Continuity() ;

//! Returns  1 <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) ;


virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;

//! Returns the value at parameter X. <br>
 /*instead*/  Standard_Real Value(Standard_Real X) ;

//! Returns the value and the first derivative at parameter X. <br>
 /*instead*/  void D1(Standard_Real X, Standard_Real& F, Standard_Real& D) ;

//! Returns the value, first and second derivatives <br>
//!          at parameter X. <br>
 /*instead*/  void D2(Standard_Real X, Standard_Real& F, Standard_Real& D, Standard_Real& D2) ;


virtual /*instead*/  OCLaw_Function^ Trim(Standard_Real PFirst, Standard_Real PLast, Standard_Real Tol) ;

//! Returns the parametric bounds of the function. <br>
 /*instead*/  void Bounds(Standard_Real& PFirst, Standard_Real& PLast) ;

~OCLaw_Constant()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
