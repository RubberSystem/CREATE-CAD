// File generated by CPPExt (Transient)
//
#ifndef _Law_S_OCWrappers_HeaderFile
#define _Law_S_OCWrappers_HeaderFile

// include the wrapped class
#include <Law_S.hxx>
#include "../Converter.h"

#include "Law_BSpFunc.h"



namespace OCNaroWrappers
{



//! Describes an "S" evolution law. <br>
public ref class OCLaw_S : OCLaw_BSpFunc {

protected:
  // dummy constructor;
  OCLaw_S(OCDummy^) : OCLaw_BSpFunc((OCDummy^)nullptr) {};

public:

// constructor from native
OCLaw_S(Handle(Law_S)* nativeHandle);

// Methods PUBLIC

//! Constructs an empty "S" evolution law. <br>
OCLaw_S();


//! Defines this S evolution law by assigning both: <br>
//! -   the bounds Pdeb and Pfin of the parameter, and <br>
//! -   the values Valdeb and Valfin of the function at these <br>
//!   two parametric bounds. <br>
//! The function is assumed to have the first derivatives <br>
//! equal to 0 at the two parameter points Pdeb and Pfin. <br>
 /*instead*/  void Set(Standard_Real Pdeb, Standard_Real Valdeb, Standard_Real Pfin, Standard_Real Valfin) ;

//! Defines this S evolution law by assigning <br>
//! -   the bounds Pdeb and Pfin of the parameter, <br>
//! -   the values Valdeb and Valfin of the function at these <br>
//!   two parametric bounds, and <br>
//! -   the values Ddeb and Dfin of the first derivative of the <br>
//!   function at these two parametric bounds. <br>
 /*instead*/  void Set(Standard_Real Pdeb, Standard_Real Valdeb, Standard_Real Ddeb, Standard_Real Pfin, Standard_Real Valfin, Standard_Real Dfin) ;

~OCLaw_S()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
