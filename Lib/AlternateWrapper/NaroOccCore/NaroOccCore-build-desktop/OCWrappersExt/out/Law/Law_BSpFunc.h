// File generated by CPPExt (Transient)
//
#ifndef _Law_BSpFunc_OCWrappers_HeaderFile
#define _Law_BSpFunc_OCWrappers_HeaderFile

// include the wrapped class
#include <Law_BSpFunc.hxx>
#include "../Converter.h"

#include "Law_Function.h"

#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCLaw_BSpline;
ref class OCTColStd_Array1OfReal;
ref class OCLaw_Function;


//! Law Function based on a BSpline curve 1d.  Package <br>
//!          methods and classes are implemented in package Law <br>
//!          to    construct  the  basis    curve with  several <br>
//!          constraints. <br>
public ref class OCLaw_BSpFunc : OCLaw_Function {

protected:
  // dummy constructor;
  OCLaw_BSpFunc(OCDummy^) : OCLaw_Function((OCDummy^)nullptr) {};

public:

// constructor from native
OCLaw_BSpFunc(Handle(Law_BSpFunc)* nativeHandle);

// Methods PUBLIC


OCLaw_BSpFunc();


OCLaw_BSpFunc(OCNaroWrappers::OCLaw_BSpline^ C, Standard_Real First, Standard_Real Last);


virtual /*instead*/  OCGeomAbs_Shape Continuity() ;

//! Returns  the number  of  intervals for  continuity <br>
//!          <S>. May be one if Continuity(me) >= <S> <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) ;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;


 /*instead*/  Standard_Real Value(Standard_Real X) ;


 /*instead*/  void D1(Standard_Real X, Standard_Real& F, Standard_Real& D) ;


 /*instead*/  void D2(Standard_Real X, Standard_Real& F, Standard_Real& D, Standard_Real& D2) ;

//!   Returns a  law equivalent of  <me>  between <br>
//!        parameters <First>  and <Last>. <Tol>  is used  to <br>
//!        test for 3d points confusion. <br>
//!        It is usfule to determines the derivatives <br>
//!        in these values <First> and <Last> if <br>
//!        the Law is not Cn. <br>
virtual /*instead*/  OCLaw_Function^ Trim(Standard_Real PFirst, Standard_Real PLast, Standard_Real Tol) ;


 /*instead*/  void Bounds(Standard_Real& PFirst, Standard_Real& PLast) ;


 /*instead*/  OCLaw_BSpline^ Curve() ;


 /*instead*/  void SetCurve(OCNaroWrappers::OCLaw_BSpline^ C) ;

~OCLaw_BSpFunc()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
