// File generated by CPPExt (MPV)
//
#ifndef _Law_Interpolate_OCWrappers_HeaderFile
#define _Law_Interpolate_OCWrappers_HeaderFile

// include native header
#include <Law_Interpolate.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfReal;
ref class OCLaw_BSpline;
ref class OCTColStd_HArray1OfBoolean;
ref class OCTColStd_Array1OfReal;


//! This  class   is used  to   interpolate a BsplineCurve <br>
//!          passing through    an  array of  points,   with   a C2 <br>
//!          Continuity if tangency  is not requested at the point. <br>
//!          If tangency is  requested at the  point the continuity <br>
//!          will be C1.  If Perodicity is requested the curve will <br>
//!          be  closed  and the junction will  be  the first point <br>
//!          given. The curve will than be only C1 <br>
//! <br>
//! <br>
public ref class OCLaw_Interpolate  {

protected:
  Law_Interpolate* nativeHandle;
  OCLaw_Interpolate(OCDummy^) {};

public:
  property Law_Interpolate* Handle
  {
    Law_Interpolate* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCLaw_Interpolate(Law_Interpolate* nativeHandle);

// Methods PUBLIC

//! Tolerance is to check if  the points are not too close <br>
//!          to one an  other.  It is  also  used to check   if the <br>
//!          tangent vector  is not too small.   There should be at <br>
//!          least 2 points. If PeriodicFlag is True then the curve <br>
//!          will be periodic be periodic <br>
OCLaw_Interpolate(OCNaroWrappers::OCTColStd_HArray1OfReal^ Points, System::Boolean PeriodicFlag, Standard_Real Tolerance);

//! Tolerance is to check if  the points are not too close <br>
//!          to one an  other.  It is  also  used to check   if the <br>
//!          tangent vector  is not too small.   There should be at <br>
//!          least 2 points. If PeriodicFlag is True then the curve <br>
//!          will be periodic be periodic <br>
OCLaw_Interpolate(OCNaroWrappers::OCTColStd_HArray1OfReal^ Points, OCNaroWrappers::OCTColStd_HArray1OfReal^ Parameters, System::Boolean PeriodicFlag, Standard_Real Tolerance);

//! loads initial and final tangents if any. <br>
 /*instead*/  void Load(Standard_Real InitialTangent, Standard_Real FinalTangent) ;

//! loads the tangents. We should have as many tangents as <br>
//!          they are points  in the array if TangentFlags.Value(i) <br>
//!          is    Standard_True  use the tangent Tangents.Value(i) <br>
//!          otherwise the tangent is not constrained. <br>
//! <br>
 /*instead*/  void Load(OCNaroWrappers::OCTColStd_Array1OfReal^ Tangents, OCNaroWrappers::OCTColStd_HArray1OfBoolean^ TangentFlags) ;

//! Clears the tangents if any <br>
 /*instead*/  void ClearTangents() ;

//! Makes the interpolation <br>
 /*instead*/  void Perform() ;


 /*instead*/  OCLaw_BSpline^ Curve() ;


 /*instead*/  System::Boolean IsDone() ;

~OCLaw_Interpolate()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
