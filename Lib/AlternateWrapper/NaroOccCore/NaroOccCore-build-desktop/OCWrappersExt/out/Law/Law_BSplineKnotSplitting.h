// File generated by CPPExt (MPV)
//
#ifndef _Law_BSplineKnotSplitting_OCWrappers_HeaderFile
#define _Law_BSplineKnotSplitting_OCWrappers_HeaderFile

// include native header
#include <Law_BSplineKnotSplitting.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfInteger;
ref class OCLaw_BSpline;
ref class OCTColStd_Array1OfInteger;



//!  For a B-spline curve the discontinuities are localised at the <br>
//!  knot values and between two knots values the B-spline is <br>
//!  infinitely continuously differentiable. <br>
//!  At a knot of range index the continuity is equal to : <br>
//!  Degree - Mult (Index)   where  Degree is the degree of the <br>
//!  basis B-spline functions and Mult the multiplicity of the knot <br>
//!  of range Index. <br>
//!  If for your computation you need to have B-spline curves with a <br>
//!  minima of continuity it can be interesting to know between which <br>
//!  knot values, a B-spline curve arc, has a continuity of given order. <br>
//!  This algorithm computes the indexes of the knots where you should <br>
//!  split the curve, to obtain arcs with a constant continuity given <br>
//!  at the construction time. The splitting values are in the range <br>
//!  [FirstUKnotValue, LastUKnotValue] (See class B-spline curve from <br>
//!  package Geom). <br>
//!  If you just want to compute the local derivatives on the curve you <br>
//!  don't need to create the B-spline curve arcs, you can use the <br>
//!  functions LocalD1, LocalD2, LocalD3, LocalDN of the class <br>
//!  BSplineCurve. <br>
public ref class OCLaw_BSplineKnotSplitting  {

protected:
  Law_BSplineKnotSplitting* nativeHandle;
  OCLaw_BSplineKnotSplitting(OCDummy^) {};

public:
  property Law_BSplineKnotSplitting* Handle
  {
    Law_BSplineKnotSplitting* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCLaw_BSplineKnotSplitting(Law_BSplineKnotSplitting* nativeHandle);

// Methods PUBLIC


//!  Locates the knot values which correspond to the segmentation of <br>
//!  the curve into arcs with a continuity equal to ContinuityRange. <br>
//!  Raised if ContinuityRange is not greater or equal zero. <br>
OCLaw_BSplineKnotSplitting(OCNaroWrappers::OCLaw_BSpline^ BasisLaw, Standard_Integer ContinuityRange);


//!  Returns the number of knots corresponding to the splitting. <br>
 /*instead*/  Standard_Integer NbSplits() ;


//!  Returns the indexes of the BSpline curve knots corresponding to <br>
//!  the splitting. <br>
//!  Raised if the length of SplitValues is not equal to NbSPlit. <br>
 /*instead*/  void Splitting(OCNaroWrappers::OCTColStd_Array1OfInteger^ SplitValues) ;


//!  Returns the index of the knot corresponding to the splitting <br>
//!  of range Index. <br>
//!  Raised if Index < 1 or Index > NbSplits <br>
 /*instead*/  Standard_Integer SplitValue(Standard_Integer Index) ;

~OCLaw_BSplineKnotSplitting()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
