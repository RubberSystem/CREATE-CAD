// File generated by CPPExt (CPP file)
//

#include "Law_BSpline.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"


using namespace OCNaroWrappers;

OCLaw_BSpline::OCLaw_BSpline(Handle(Law_BSpline)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Law_BSpline(*nativeHandle);
}

OCLaw_BSpline::OCLaw_BSpline(OCNaroWrappers::OCTColStd_Array1OfReal^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Multiplicities, Standard_Integer Degree, System::Boolean Periodic) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Law_BSpline(new Law_BSpline(*((TColStd_Array1OfReal*)Poles->Handle), *((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Multiplicities->Handle), Degree, OCConverter::BooleanToStandardBoolean(Periodic)));
}

OCLaw_BSpline::OCLaw_BSpline(OCNaroWrappers::OCTColStd_Array1OfReal^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weights, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Multiplicities, Standard_Integer Degree, System::Boolean Periodic) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Law_BSpline(new Law_BSpline(*((TColStd_Array1OfReal*)Poles->Handle), *((TColStd_Array1OfReal*)Weights->Handle), *((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Multiplicities->Handle), Degree, OCConverter::BooleanToStandardBoolean(Periodic)));
}

 void OCLaw_BSpline::IncreaseDegree(Standard_Integer Degree)
{
  (*((Handle_Law_BSpline*)nativeHandle))->IncreaseDegree(Degree);
}

 void OCLaw_BSpline::IncreaseMultiplicity(Standard_Integer Index, Standard_Integer M)
{
  (*((Handle_Law_BSpline*)nativeHandle))->IncreaseMultiplicity(Index, M);
}

 void OCLaw_BSpline::IncreaseMultiplicity(Standard_Integer I1, Standard_Integer I2, Standard_Integer M)
{
  (*((Handle_Law_BSpline*)nativeHandle))->IncreaseMultiplicity(I1, I2, M);
}

 void OCLaw_BSpline::IncrementMultiplicity(Standard_Integer I1, Standard_Integer I2, Standard_Integer M)
{
  (*((Handle_Law_BSpline*)nativeHandle))->IncrementMultiplicity(I1, I2, M);
}

 void OCLaw_BSpline::InsertKnot(Standard_Real U, Standard_Integer M, Standard_Real ParametricTolerance, System::Boolean Add)
{
  (*((Handle_Law_BSpline*)nativeHandle))->InsertKnot(U, M, ParametricTolerance, OCConverter::BooleanToStandardBoolean(Add));
}

 void OCLaw_BSpline::InsertKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults, Standard_Real ParametricTolerance, System::Boolean Add)
{
  (*((Handle_Law_BSpline*)nativeHandle))->InsertKnots(*((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Mults->Handle), ParametricTolerance, OCConverter::BooleanToStandardBoolean(Add));
}

 System::Boolean OCLaw_BSpline::RemoveKnot(Standard_Integer Index, Standard_Integer M, Standard_Real Tolerance)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Law_BSpline*)nativeHandle))->RemoveKnot(Index, M, Tolerance));
}

 void OCLaw_BSpline::Reverse()
{
  (*((Handle_Law_BSpline*)nativeHandle))->Reverse();
}

 Standard_Real OCLaw_BSpline::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->ReversedParameter(U);
}

 void OCLaw_BSpline::Segment(Standard_Real U1, Standard_Real U2)
{
  (*((Handle_Law_BSpline*)nativeHandle))->Segment(U1, U2);
}

 void OCLaw_BSpline::SetKnot(Standard_Integer Index, Standard_Real K)
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetKnot(Index, K);
}

 void OCLaw_BSpline::SetKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ K)
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetKnots(*((TColStd_Array1OfReal*)K->Handle));
}

 void OCLaw_BSpline::SetKnot(Standard_Integer Index, Standard_Real K, Standard_Integer M)
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetKnot(Index, K, M);
}

 void OCLaw_BSpline::PeriodicNormalization(Standard_Real& U)
{
  (*((Handle_Law_BSpline*)nativeHandle))->PeriodicNormalization(U);
}

 void OCLaw_BSpline::SetPeriodic()
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetPeriodic();
}

 void OCLaw_BSpline::SetOrigin(Standard_Integer Index)
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetOrigin(Index);
}

 void OCLaw_BSpline::SetNotPeriodic()
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetNotPeriodic();
}

 void OCLaw_BSpline::SetPole(Standard_Integer Index, Standard_Real P)
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetPole(Index, P);
}

 void OCLaw_BSpline::SetPole(Standard_Integer Index, Standard_Real P, Standard_Real Weight)
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetPole(Index, P, Weight);
}

 void OCLaw_BSpline::SetWeight(Standard_Integer Index, Standard_Real Weight)
{
  (*((Handle_Law_BSpline*)nativeHandle))->SetWeight(Index, Weight);
}

 System::Boolean OCLaw_BSpline::IsCN(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Law_BSpline*)nativeHandle))->IsCN(N));
}

 System::Boolean OCLaw_BSpline::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Law_BSpline*)nativeHandle))->IsClosed());
}

 System::Boolean OCLaw_BSpline::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Law_BSpline*)nativeHandle))->IsPeriodic());
}

 System::Boolean OCLaw_BSpline::IsRational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Law_BSpline*)nativeHandle))->IsRational());
}

 OCGeomAbs_Shape OCLaw_BSpline::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Law_BSpline*)nativeHandle))->Continuity());
}

 Standard_Integer OCLaw_BSpline::Degree()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->Degree();
}

 Standard_Real OCLaw_BSpline::Value(Standard_Real U)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->Value(U);
}

 void OCLaw_BSpline::D0(Standard_Real U, Standard_Real& P)
{
  (*((Handle_Law_BSpline*)nativeHandle))->D0(U, P);
}

 void OCLaw_BSpline::D1(Standard_Real U, Standard_Real& P, Standard_Real& V1)
{
  (*((Handle_Law_BSpline*)nativeHandle))->D1(U, P, V1);
}

 void OCLaw_BSpline::D2(Standard_Real U, Standard_Real& P, Standard_Real& V1, Standard_Real& V2)
{
  (*((Handle_Law_BSpline*)nativeHandle))->D2(U, P, V1, V2);
}

 void OCLaw_BSpline::D3(Standard_Real U, Standard_Real& P, Standard_Real& V1, Standard_Real& V2, Standard_Real& V3)
{
  (*((Handle_Law_BSpline*)nativeHandle))->D3(U, P, V1, V2, V3);
}

 Standard_Real OCLaw_BSpline::DN(Standard_Real U, Standard_Integer N)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->DN(U, N);
}

 Standard_Real OCLaw_BSpline::LocalValue(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->LocalValue(U, FromK1, ToK2);
}

 void OCLaw_BSpline::LocalD0(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, Standard_Real& P)
{
  (*((Handle_Law_BSpline*)nativeHandle))->LocalD0(U, FromK1, ToK2, P);
}

 void OCLaw_BSpline::LocalD1(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, Standard_Real& P, Standard_Real& V1)
{
  (*((Handle_Law_BSpline*)nativeHandle))->LocalD1(U, FromK1, ToK2, P, V1);
}

 void OCLaw_BSpline::LocalD2(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, Standard_Real& P, Standard_Real& V1, Standard_Real& V2)
{
  (*((Handle_Law_BSpline*)nativeHandle))->LocalD2(U, FromK1, ToK2, P, V1, V2);
}

 void OCLaw_BSpline::LocalD3(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, Standard_Real& P, Standard_Real& V1, Standard_Real& V2, Standard_Real& V3)
{
  (*((Handle_Law_BSpline*)nativeHandle))->LocalD3(U, FromK1, ToK2, P, V1, V2, V3);
}

 Standard_Real OCLaw_BSpline::LocalDN(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, Standard_Integer N)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->LocalDN(U, FromK1, ToK2, N);
}

 Standard_Real OCLaw_BSpline::EndPoint()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->EndPoint();
}

 Standard_Integer OCLaw_BSpline::FirstUKnotIndex()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->FirstUKnotIndex();
}

 Standard_Real OCLaw_BSpline::FirstParameter()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->FirstParameter();
}

 Standard_Real OCLaw_BSpline::Knot(Standard_Integer Index)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->Knot(Index);
}

 void OCLaw_BSpline::Knots(OCNaroWrappers::OCTColStd_Array1OfReal^ K)
{
  (*((Handle_Law_BSpline*)nativeHandle))->Knots(*((TColStd_Array1OfReal*)K->Handle));
}

 void OCLaw_BSpline::KnotSequence(OCNaroWrappers::OCTColStd_Array1OfReal^ K)
{
  (*((Handle_Law_BSpline*)nativeHandle))->KnotSequence(*((TColStd_Array1OfReal*)K->Handle));
}

 OCGeomAbs_BSplKnotDistribution OCLaw_BSpline::KnotDistribution()
{
  return (OCGeomAbs_BSplKnotDistribution)((*((Handle_Law_BSpline*)nativeHandle))->KnotDistribution());
}

 Standard_Integer OCLaw_BSpline::LastUKnotIndex()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->LastUKnotIndex();
}

 Standard_Real OCLaw_BSpline::LastParameter()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->LastParameter();
}

 void OCLaw_BSpline::LocateU(Standard_Real U, Standard_Real ParametricTolerance, Standard_Integer& I1, Standard_Integer& I2, System::Boolean WithKnotRepetition)
{
  (*((Handle_Law_BSpline*)nativeHandle))->LocateU(U, ParametricTolerance, I1, I2, OCConverter::BooleanToStandardBoolean(WithKnotRepetition));
}

 Standard_Integer OCLaw_BSpline::Multiplicity(Standard_Integer Index)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->Multiplicity(Index);
}

 void OCLaw_BSpline::Multiplicities(OCNaroWrappers::OCTColStd_Array1OfInteger^ M)
{
  (*((Handle_Law_BSpline*)nativeHandle))->Multiplicities(*((TColStd_Array1OfInteger*)M->Handle));
}

 Standard_Integer OCLaw_BSpline::NbKnots()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->NbKnots();
}

 Standard_Integer OCLaw_BSpline::NbPoles()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->NbPoles();
}

 Standard_Real OCLaw_BSpline::Pole(Standard_Integer Index)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->Pole(Index);
}

 void OCLaw_BSpline::Poles(OCNaroWrappers::OCTColStd_Array1OfReal^ P)
{
  (*((Handle_Law_BSpline*)nativeHandle))->Poles(*((TColStd_Array1OfReal*)P->Handle));
}

 Standard_Real OCLaw_BSpline::StartPoint()
{
  return (*((Handle_Law_BSpline*)nativeHandle))->StartPoint();
}

 Standard_Real OCLaw_BSpline::Weight(Standard_Integer Index)
{
  return (*((Handle_Law_BSpline*)nativeHandle))->Weight(Index);
}

 void OCLaw_BSpline::Weights(OCNaroWrappers::OCTColStd_Array1OfReal^ W)
{
  (*((Handle_Law_BSpline*)nativeHandle))->Weights(*((TColStd_Array1OfReal*)W->Handle));
}

 Standard_Integer OCLaw_BSpline::MaxDegree()
{
  return Law_BSpline::MaxDegree();
}

 void OCLaw_BSpline::MovePointAndTangent(Standard_Real U, Standard_Real NewValue, Standard_Real Derivative, Standard_Real Tolerance, Standard_Integer StartingCondition, Standard_Integer EndingCondition, Standard_Integer& ErrorStatus)
{
  (*((Handle_Law_BSpline*)nativeHandle))->MovePointAndTangent(U, NewValue, Derivative, Tolerance, StartingCondition, EndingCondition, ErrorStatus);
}

 void OCLaw_BSpline::Resolution(Standard_Real Tolerance3D, Standard_Real& UTolerance)
{
  (*((Handle_Law_BSpline*)nativeHandle))->Resolution(Tolerance3D, UTolerance);
}

OCLaw_BSpline^ OCLaw_BSpline::Copy()
{
  Handle(Law_BSpline) tmp = (*((Handle_Law_BSpline*)nativeHandle))->Copy();
  return gcnew OCLaw_BSpline(&tmp);
}


