// File generated by CPPExt (CPP file)
//

#include "Law_Composite.h"
#include "../Converter.h"
#include "Law_Function.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "Law_Laws.h"


using namespace OCNaroWrappers;

OCLaw_Composite::OCLaw_Composite(Handle(Law_Composite)* nativeHandle) : OCLaw_Function((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Law_Composite(*nativeHandle);
}

OCLaw_Composite::OCLaw_Composite() : OCLaw_Function((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Law_Composite(new Law_Composite());
}

OCLaw_Composite::OCLaw_Composite(Standard_Real First, Standard_Real Last, Standard_Real Tol) : OCLaw_Function((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Law_Composite(new Law_Composite(First, Last, Tol));
}

 OCGeomAbs_Shape OCLaw_Composite::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Law_Composite*)nativeHandle))->Continuity());
}

 Standard_Integer OCLaw_Composite::NbIntervals(OCGeomAbs_Shape S)
{
  return (*((Handle_Law_Composite*)nativeHandle))->NbIntervals((GeomAbs_Shape)S);
}

 void OCLaw_Composite::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  (*((Handle_Law_Composite*)nativeHandle))->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 Standard_Real OCLaw_Composite::Value(Standard_Real X)
{
  return (*((Handle_Law_Composite*)nativeHandle))->Value(X);
}

 void OCLaw_Composite::D1(Standard_Real X, Standard_Real& F, Standard_Real& D)
{
  (*((Handle_Law_Composite*)nativeHandle))->D1(X, F, D);
}

 void OCLaw_Composite::D2(Standard_Real X, Standard_Real& F, Standard_Real& D, Standard_Real& D2)
{
  (*((Handle_Law_Composite*)nativeHandle))->D2(X, F, D, D2);
}

OCLaw_Function^ OCLaw_Composite::Trim(Standard_Real PFirst, Standard_Real PLast, Standard_Real Tol)
{
  Handle(Law_Function) tmp = (*((Handle_Law_Composite*)nativeHandle))->Trim(PFirst, PLast, Tol);
  return gcnew OCLaw_Function(&tmp);
}

 void OCLaw_Composite::Bounds(Standard_Real& PFirst, Standard_Real& PLast)
{
  (*((Handle_Law_Composite*)nativeHandle))->Bounds(PFirst, PLast);
}

OCLaw_Function^ OCLaw_Composite::ChangeElementaryLaw(Standard_Real W)
{
  Handle(Law_Function) tmp = (*((Handle_Law_Composite*)nativeHandle))->ChangeElementaryLaw(W);
  return gcnew OCLaw_Function(&tmp);
}

OCLaw_Laws^ OCLaw_Composite::ChangeLaws()
{
  Law_Laws* tmp = new Law_Laws();
  *tmp = (*((Handle_Law_Composite*)nativeHandle))->ChangeLaws();
  return gcnew OCLaw_Laws(tmp);
}

 System::Boolean OCLaw_Composite::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Law_Composite*)nativeHandle))->IsPeriodic());
}

 void OCLaw_Composite::SetPeriodic()
{
  (*((Handle_Law_Composite*)nativeHandle))->SetPeriodic();
}


