// File generated by CPPExt (CPP file)
//

#include "Law.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



OCLaw_BSpFunc^ OCLaw::MixBnd(OCNaroWrappers::OCLaw_Linear^ Lin)
{
  Handle(Law_BSpFunc) tmp = Law::MixBnd(*((Handle_Law_Linear*)Lin->Handle));
  return gcnew OCLaw_BSpFunc(&tmp);
}

OCTColStd_HArray1OfReal^ OCLaw::MixBnd(Standard_Integer Degree, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults, OCNaroWrappers::OCLaw_Linear^ Lin)
{
  Handle(TColStd_HArray1OfReal) tmp = Law::MixBnd(Degree, *((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Mults->Handle), *((Handle_Law_Linear*)Lin->Handle));
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

OCTColStd_HArray1OfReal^ OCLaw::MixTgt(Standard_Integer Degree, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults, System::Boolean NulOnTheRight, Standard_Integer Index)
{
  Handle(TColStd_HArray1OfReal) tmp = Law::MixTgt(Degree, *((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Mults->Handle), OCConverter::BooleanToStandardBoolean(NulOnTheRight), Index);
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

OCLaw_BSpline^ OCLaw::Reparametrize(OCNaroWrappers::OCAdaptor3d_Curve^ Curve, Standard_Real First, Standard_Real Last, System::Boolean HasDF, System::Boolean HasDL, Standard_Real DFirst, Standard_Real DLast, System::Boolean Rev, Standard_Integer NbPoints)
{
  Handle(Law_BSpline) tmp = Law::Reparametrize(*((Adaptor3d_Curve*)Curve->Handle), First, Last, OCConverter::BooleanToStandardBoolean(HasDF), OCConverter::BooleanToStandardBoolean(HasDL), DFirst, DLast, OCConverter::BooleanToStandardBoolean(Rev), NbPoints);
  return gcnew OCLaw_BSpline(&tmp);
}

OCLaw_BSpline^ OCLaw::Scale(Standard_Real First, Standard_Real Last, System::Boolean HasF, System::Boolean HasL, Standard_Real VFirst, Standard_Real VLast)
{
  Handle(Law_BSpline) tmp = Law::Scale(First, Last, OCConverter::BooleanToStandardBoolean(HasF), OCConverter::BooleanToStandardBoolean(HasL), VFirst, VLast);
  return gcnew OCLaw_BSpline(&tmp);
}

OCLaw_BSpline^ OCLaw::ScaleCub(Standard_Real First, Standard_Real Last, System::Boolean HasF, System::Boolean HasL, Standard_Real VFirst, Standard_Real VLast)
{
  Handle(Law_BSpline) tmp = Law::ScaleCub(First, Last, OCConverter::BooleanToStandardBoolean(HasF), OCConverter::BooleanToStandardBoolean(HasL), VFirst, VLast);
  return gcnew OCLaw_BSpline(&tmp);
}


