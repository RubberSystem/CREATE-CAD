// File generated by CPPExt (CPP file)
//

#include "Law_Interpolate.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "Law_BSpline.h"
#include "../TColStd/TColStd_HArray1OfBoolean.h"
#include "../TColStd/TColStd_Array1OfReal.h"


using namespace OCNaroWrappers;

OCLaw_Interpolate::OCLaw_Interpolate(Law_Interpolate* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCLaw_Interpolate::OCLaw_Interpolate(OCNaroWrappers::OCTColStd_HArray1OfReal^ Points, System::Boolean PeriodicFlag, Standard_Real Tolerance) 
{
  nativeHandle = new Law_Interpolate(*((Handle_TColStd_HArray1OfReal*)Points->Handle), OCConverter::BooleanToStandardBoolean(PeriodicFlag), Tolerance);
}

OCLaw_Interpolate::OCLaw_Interpolate(OCNaroWrappers::OCTColStd_HArray1OfReal^ Points, OCNaroWrappers::OCTColStd_HArray1OfReal^ Parameters, System::Boolean PeriodicFlag, Standard_Real Tolerance) 
{
  nativeHandle = new Law_Interpolate(*((Handle_TColStd_HArray1OfReal*)Points->Handle), *((Handle_TColStd_HArray1OfReal*)Parameters->Handle), OCConverter::BooleanToStandardBoolean(PeriodicFlag), Tolerance);
}

 void OCLaw_Interpolate::Load(Standard_Real InitialTangent, Standard_Real FinalTangent)
{
  ((Law_Interpolate*)nativeHandle)->Load(InitialTangent, FinalTangent);
}

 void OCLaw_Interpolate::Load(OCNaroWrappers::OCTColStd_Array1OfReal^ Tangents, OCNaroWrappers::OCTColStd_HArray1OfBoolean^ TangentFlags)
{
  ((Law_Interpolate*)nativeHandle)->Load(*((TColStd_Array1OfReal*)Tangents->Handle), *((Handle_TColStd_HArray1OfBoolean*)TangentFlags->Handle));
}

 void OCLaw_Interpolate::ClearTangents()
{
  ((Law_Interpolate*)nativeHandle)->ClearTangents();
}

 void OCLaw_Interpolate::Perform()
{
  ((Law_Interpolate*)nativeHandle)->Perform();
}

OCLaw_BSpline^ OCLaw_Interpolate::Curve()
{
  Handle(Law_BSpline) tmp = ((Law_Interpolate*)nativeHandle)->Curve();
  return gcnew OCLaw_BSpline(&tmp);
}

 System::Boolean OCLaw_Interpolate::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Law_Interpolate*)nativeHandle)->IsDone());
}


