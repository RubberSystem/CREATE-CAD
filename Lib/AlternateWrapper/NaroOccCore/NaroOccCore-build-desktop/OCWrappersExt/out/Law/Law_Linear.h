// File generated by CPPExt (Transient)
//
#ifndef _Law_Linear_OCWrappers_HeaderFile
#define _Law_Linear_OCWrappers_HeaderFile

// include the wrapped class
#include <Law_Linear.hxx>
#include "../Converter.h"

#include "Law_Function.h"

#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCTColStd_Array1OfReal;
ref class OCLaw_Function;


//! Describes an linear evolution law. <br>
public ref class OCLaw_Linear : OCLaw_Function {

protected:
  // dummy constructor;
  OCLaw_Linear(OCDummy^) : OCLaw_Function((OCDummy^)nullptr) {};

public:

// constructor from native
OCLaw_Linear(Handle(Law_Linear)* nativeHandle);

// Methods PUBLIC

//! Constructs an empty linear evolution law. <br>
OCLaw_Linear();


//! Defines this linear evolution law by assigning both: <br>
//! -   the bounds Pdeb and Pfin of the parameter, and <br>
//! -   the values Valdeb and Valfin of the function at these <br>
//!   two parametric bounds. <br>
 /*instead*/  void Set(Standard_Real Pdeb, Standard_Real Valdeb, Standard_Real Pfin, Standard_Real Valfin) ;

//! Returns GeomAbs_CN <br>
virtual /*instead*/  OCGeomAbs_Shape Continuity() ;

//! Returns  1 <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) ;


virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;

//! Returns the value of this function at the point of parameter X. <br>
 /*instead*/  Standard_Real Value(Standard_Real X) ;


//! Returns the value F and the first derivative D of this <br>
//! function at the point of parameter X. <br>
 /*instead*/  void D1(Standard_Real X, Standard_Real& F, Standard_Real& D) ;

//! Returns the value, first and second derivatives <br>
//!          at parameter X. <br>
 /*instead*/  void D2(Standard_Real X, Standard_Real& F, Standard_Real& D, Standard_Real& D2) ;

//!   Returns a  law equivalent of  <me>  between <br>
//!        parameters <First>  and <Last>. <Tol>  is used  to <br>
//!        test for 3d points confusion. <br>
//!        It is usfule to determines the derivatives <br>
//!        in these values <First> and <Last> if <br>
//!        the Law is not Cn. <br>
virtual /*instead*/  OCLaw_Function^ Trim(Standard_Real PFirst, Standard_Real PLast, Standard_Real Tol) ;

//! Returns the parametric bounds of the function. <br>
 /*instead*/  void Bounds(Standard_Real& PFirst, Standard_Real& PLast) ;

~OCLaw_Linear()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
