// File generated by CPPExt (CPP file)
//

#include "Geom_OffsetSurface.h"
#include "../Converter.h"
#include "Geom_Surface.h"
#include "Geom_Curve.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "Geom_BSplineSurface.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_GTrsf2d.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_OffsetSurface::OCGeom_OffsetSurface(Handle(Geom_OffsetSurface)* nativeHandle) : OCGeom_Surface((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_OffsetSurface(*nativeHandle);
}

OCGeom_OffsetSurface::OCGeom_OffsetSurface(OCNaroWrappers::OCGeom_Surface^ S, Standard_Real Offset) : OCGeom_Surface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_OffsetSurface(new Geom_OffsetSurface(*((Handle_Geom_Surface*)S->Handle), Offset));
}

 void OCGeom_OffsetSurface::SetBasisSurface(OCNaroWrappers::OCGeom_Surface^ S)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->SetBasisSurface(*((Handle_Geom_Surface*)S->Handle));
}

 void OCGeom_OffsetSurface::SetOffsetValue(Standard_Real D)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->SetOffsetValue(D);
}

 Standard_Real OCGeom_OffsetSurface::Offset()
{
  return (*((Handle_Geom_OffsetSurface*)nativeHandle))->Offset();
}

OCGeom_Surface^ OCGeom_OffsetSurface::BasisSurface()
{
  Handle(Geom_Surface) tmp = (*((Handle_Geom_OffsetSurface*)nativeHandle))->BasisSurface();
  return gcnew OCGeom_Surface(&tmp);
}

 void OCGeom_OffsetSurface::UReverse()
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->UReverse();
}

 Standard_Real OCGeom_OffsetSurface::UReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_OffsetSurface*)nativeHandle))->UReversedParameter(U);
}

 void OCGeom_OffsetSurface::VReverse()
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->VReverse();
}

 Standard_Real OCGeom_OffsetSurface::VReversedParameter(Standard_Real V)
{
  return (*((Handle_Geom_OffsetSurface*)nativeHandle))->VReversedParameter(V);
}

 void OCGeom_OffsetSurface::Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->Bounds(U1, U2, V1, V2);
}

 OCGeomAbs_Shape OCGeom_OffsetSurface::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Geom_OffsetSurface*)nativeHandle))->Continuity());
}

 System::Boolean OCGeom_OffsetSurface::IsCNu(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_OffsetSurface*)nativeHandle))->IsCNu(N));
}

 System::Boolean OCGeom_OffsetSurface::IsCNv(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_OffsetSurface*)nativeHandle))->IsCNv(N));
}

 System::Boolean OCGeom_OffsetSurface::IsUClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_OffsetSurface*)nativeHandle))->IsUClosed());
}

 System::Boolean OCGeom_OffsetSurface::IsVClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_OffsetSurface*)nativeHandle))->IsVClosed());
}

 System::Boolean OCGeom_OffsetSurface::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_OffsetSurface*)nativeHandle))->IsUPeriodic());
}

 Standard_Real OCGeom_OffsetSurface::UPeriod()
{
  return (*((Handle_Geom_OffsetSurface*)nativeHandle))->UPeriod();
}

 System::Boolean OCGeom_OffsetSurface::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_OffsetSurface*)nativeHandle))->IsVPeriodic());
}

 Standard_Real OCGeom_OffsetSurface::VPeriod()
{
  return (*((Handle_Geom_OffsetSurface*)nativeHandle))->VPeriod();
}

OCGeom_Curve^ OCGeom_OffsetSurface::UIso(Standard_Real U)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_OffsetSurface*)nativeHandle))->UIso(U);
  return gcnew OCGeom_Curve(&tmp);
}

OCGeom_Curve^ OCGeom_OffsetSurface::VIso(Standard_Real V)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_OffsetSurface*)nativeHandle))->VIso(V);
  return gcnew OCGeom_Curve(&tmp);
}

 void OCGeom_OffsetSurface::D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->D0(U, V, *((gp_Pnt*)P->Handle));
}

 void OCGeom_OffsetSurface::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeom_OffsetSurface::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeom_OffsetSurface::D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->D3(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeom_OffsetSurface::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_OffsetSurface*)nativeHandle))->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeom_OffsetSurface::Value(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Pnt^ Pbasis, OCNaroWrappers::OCgp_Vec^ D1Ubasis, OCNaroWrappers::OCgp_Vec^ D1Vbasis)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->Value(U, V, *((gp_Pnt*)P->Handle), *((gp_Pnt*)Pbasis->Handle), *((gp_Vec*)D1Ubasis->Handle), *((gp_Vec*)D1Vbasis->Handle));
}

 void OCGeom_OffsetSurface::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Pnt^ Pbasis, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D1Ubasis, OCNaroWrappers::OCgp_Vec^ D1Vbasis, OCNaroWrappers::OCgp_Vec^ D2Ubasis, OCNaroWrappers::OCgp_Vec^ D2Vbasis, OCNaroWrappers::OCgp_Vec^ D2UVbasis)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Pnt*)Pbasis->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D1Ubasis->Handle), *((gp_Vec*)D1Vbasis->Handle), *((gp_Vec*)D2Ubasis->Handle), *((gp_Vec*)D2Vbasis->Handle), *((gp_Vec*)D2UVbasis->Handle));
}

 void OCGeom_OffsetSurface::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Pnt^ Pbasis, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D1Ubasis, OCNaroWrappers::OCgp_Vec^ D1Vbasis, OCNaroWrappers::OCgp_Vec^ D2Ubasis, OCNaroWrappers::OCgp_Vec^ D2Vbasis, OCNaroWrappers::OCgp_Vec^ D2UVbasis, OCNaroWrappers::OCgp_Vec^ D3Ubasis, OCNaroWrappers::OCgp_Vec^ D3Vbasis, OCNaroWrappers::OCgp_Vec^ D3UUVbasis, OCNaroWrappers::OCgp_Vec^ D3UVVbasis)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Pnt*)Pbasis->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D1Ubasis->Handle), *((gp_Vec*)D1Vbasis->Handle), *((gp_Vec*)D2Ubasis->Handle), *((gp_Vec*)D2Vbasis->Handle), *((gp_Vec*)D2UVbasis->Handle), *((gp_Vec*)D3Ubasis->Handle), *((gp_Vec*)D3Vbasis->Handle), *((gp_Vec*)D3UUVbasis->Handle), *((gp_Vec*)D3UVVbasis->Handle));
}

 void OCGeom_OffsetSurface::LocalD0(Standard_Real U, Standard_Real V, Standard_Integer USide, Standard_Integer VSide, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->LocalD0(U, V, USide, VSide, *((gp_Pnt*)P->Handle));
}

 void OCGeom_OffsetSurface::LocalD1(Standard_Real U, Standard_Real V, Standard_Integer USide, Standard_Integer VSide, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->LocalD1(U, V, USide, VSide, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeom_OffsetSurface::LocalD2(Standard_Real U, Standard_Real V, Standard_Integer USide, Standard_Integer VSide, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->LocalD2(U, V, USide, VSide, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeom_OffsetSurface::LocalD3(Standard_Real U, Standard_Real V, Standard_Integer USide, Standard_Integer VSide, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->LocalD3(U, V, USide, VSide, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeom_OffsetSurface::LocalDN(Standard_Real U, Standard_Real V, Standard_Integer USide, Standard_Integer VSide, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_OffsetSurface*)nativeHandle))->LocalDN(U, V, USide, VSide, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeom_OffsetSurface::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

 void OCGeom_OffsetSurface::TransformParameters(Standard_Real& U, Standard_Real& V, OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_OffsetSurface*)nativeHandle))->TransformParameters(U, V, *((gp_Trsf*)T->Handle));
}

OCgp_GTrsf2d^ OCGeom_OffsetSurface::ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_GTrsf2d* tmp = new gp_GTrsf2d();
  *tmp = (*((Handle_Geom_OffsetSurface*)nativeHandle))->ParametricTransformation(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_GTrsf2d(tmp);
}

OCGeom_Geometry^ OCGeom_OffsetSurface::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_OffsetSurface*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}

OCGeom_Surface^ OCGeom_OffsetSurface::Surface()
{
  Handle(Geom_Surface) tmp = (*((Handle_Geom_OffsetSurface*)nativeHandle))->Surface();
  return gcnew OCGeom_Surface(&tmp);
}

 System::Boolean OCGeom_OffsetSurface::UOsculatingSurface(Standard_Real U, Standard_Real V, System::Boolean& IsOpposite, OCNaroWrappers::OCGeom_BSplineSurface^ UOsculSurf)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_OffsetSurface*)nativeHandle))->UOsculatingSurface(U, V, (Standard_Boolean&)(IsOpposite), *((Handle_Geom_BSplineSurface*)UOsculSurf->Handle)));
}

 System::Boolean OCGeom_OffsetSurface::VOsculatingSurface(Standard_Real U, Standard_Real V, System::Boolean& IsOpposite, OCNaroWrappers::OCGeom_BSplineSurface^ VOsculSurf)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_OffsetSurface*)nativeHandle))->VOsculatingSurface(U, V, (Standard_Boolean&)(IsOpposite), *((Handle_Geom_BSplineSurface*)VOsculSurf->Handle)));
}


