// File generated by CPPExt (Transient)
//
#ifndef _Geom_TrimmedCurve_OCWrappers_HeaderFile
#define _Geom_TrimmedCurve_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_TrimmedCurve.hxx>
#include "../Converter.h"

#include "Geom_BoundedCurve.h"

#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom_Curve;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Trsf;
ref class OCGeom_Geometry;


//! Describes a portion of a curve (termed the "basis <br>
//! curve") limited by two parameter values inside the <br>
//! parametric domain of the basis curve. <br>
//! The trimmed curve is defined by: <br>
//! - the basis curve, and <br>
//! - the two parameter values which limit it. <br>
//! The trimmed curve can either have the same <br>
//! orientation as the basis curve or the opposite orientation. <br>
public ref class OCGeom_TrimmedCurve : OCGeom_BoundedCurve {

protected:
  // dummy constructor;
  OCGeom_TrimmedCurve(OCDummy^) : OCGeom_BoundedCurve((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_TrimmedCurve(Handle(Geom_TrimmedCurve)* nativeHandle);

// Methods PUBLIC

//! Constructs a trimmed curve from the basis curve C <br>
//! which is limited between parameter values U1 and U2. <br>
//! Note: - U1 can be greater or less than U2; in both cases, <br>
//!   the returned curve is oriented from U1 to U2. <br>
//! - If the basis curve C is periodic, there is an <br>
//!   ambiguity because two parts are available. In this <br>
//!   case, the trimmed curve has the same orientation <br>
//!   as the basis curve if Sense is true (default value) <br>
//!   or the opposite orientation if Sense is false. <br>
//! - If the curve is closed but not periodic, it is not <br>
//!   possible to keep the part of the curve which <br>
//!   includes the junction point (except if the junction <br>
//!   point is at the beginning or at the end of the <br>
//!   trimmed curve). If you tried to do this, you could <br>
//!   alter the fundamental characteristics of the basis <br>
//!   curve, which are used, for example, to compute <br>
//!   the derivatives of the trimmed curve. The rules <br>
//!   for a closed curve are therefore the same as <br>
//!   those for an open curve. <br>
//! Warning: The trimmed curve is built from a copy of curve C. <br>
//!   Therefore, when C is modified, the trimmed curve <br>
//!   is not modified. <br>
//! - If the basis curve is periodic, the bounds of the <br>
//!   trimmed curve may be different from U1 and U2 <br>
//!   if the parametric origin of the basis curve is within <br>
//!   the arc of the trimmed curve. In this case, the <br>
//!   modified parameter will be equal to U1 or U2 <br>
//!   plus or minus the period. <br>
//!   Exceptions <br>
//! Standard_ConstructionError if: <br>
//! - C is not periodic and U1 or U2 is outside the <br>
//!   bounds of C, or <br>
//! - U1 is equal to U2. <br>
OCGeom_TrimmedCurve(OCNaroWrappers::OCGeom_Curve^ C, Standard_Real U1, Standard_Real U2, System::Boolean Sense);

//! Changes the orientation of this trimmed curve. <br>
//! As a result: <br>
//! - the basis curve is reversed, <br>
//! - the start point of the initial curve becomes the <br>
//!   end point of the reversed curve, <br>
//! - the end point of the initial curve becomes the <br>
//!   start point of the reversed curve, <br>
//! - the first and last parameters are recomputed. <br>
//!   If the trimmed curve was defined by: <br>
//! - a basis curve whose parameter range is [ 0., 1. ], <br>
//! - the two trim values U1 (first parameter) and U2 (last parameter), <br>
//!   the reversed trimmed curve is defined by: <br>
//! - the reversed basis curve, whose parameter range is still [ 0., 1. ], <br>
//! - the two trim values 1. - U2 (first parameter) and 1. - U1 (last parameter). <br>
 /*instead*/  void Reverse() ;

//! Computes the parameter on the reversed curve for <br>
//! the point of parameter U on this trimmed curve. <br>
 /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;

//!  Changes this trimmed curve, by redefining the <br>
//! parameter values U1 and U2 which limit its basis curve. <br>
//! Note: If the basis curve is periodic, the trimmed curve <br>
//! has the same orientation as the basis curve if Sense <br>
//! is true (default value) or the opposite orientation if Sense is false. <br>
//! Warning <br>
//! If the basis curve is periodic, the bounds of the <br>
//! trimmed curve may be different from U1 and U2 if the <br>
//! parametric origin of the basis curve is within the arc of <br>
//! the trimmed curve. In this case, the modified <br>
//! parameter will be equal to U1 or U2 plus or minus the period. <br>
//! Exceptions <br>
//! Standard_ConstructionError if: <br>
//! - the basis curve is not periodic, and either U1 or U2 <br>
//!   are outside the bounds of the basis curve, or <br>
//! - U1 is equal to U2. <br>
 /*instead*/  void SetTrim(Standard_Real U1, Standard_Real U2, System::Boolean Sense) ;

//! Returns the basis curve. <br>
//!   Warning <br>
//! This function does not return a constant reference. <br>
//! Consequently, any modification of the returned value <br>
//! directly modifies the trimmed curve. <br>
 /*instead*/  OCGeom_Curve^ BasisCurve() ;


//!  Returns the continuity of the curve : <br>
//! C0 : only geometric continuity, <br>
//! C1 : continuity of the first derivative all along the Curve, <br>
//! C2 : continuity of the second derivative all along the Curve, <br>
//! C3 : continuity of the third derivative all along the Curve, <br>
//! CN : the order of continuity is infinite. <br>
 /*instead*/  OCGeomAbs_Shape Continuity() ;

//! Returns true if the degree of continuity of the basis <br>
//! curve of this trimmed curve is at least N. A trimmed <br>
//! curve is at least "C0" continuous. <br>
//!  Warnings : <br>
//!  The continuity of the trimmed curve can be greater than <br>
//!  the continuity of the basis curve because you consider <br>
//!  only a part of the basis curve. <br>//! Raised if N < 0. <br>
 /*instead*/  System::Boolean IsCN(Standard_Integer N) ;


//!  Returns the end point of <me>. This point is the <br>
//!  evaluation of the curve for the "LastParameter". <br>
 /*instead*/  OCgp_Pnt^ EndPoint() ;


//!  Returns the value of the first parameter of <me>. <br>
//!  The first parameter is the parameter of the "StartPoint" <br>
//!  of the trimmed curve. <br>
 /*instead*/  Standard_Real FirstParameter() ;


//!  Returns True if the distance between the StartPoint and <br>
//!  the EndPoint is lower or equal to Resolution from package gp. <br>
 /*instead*/  System::Boolean IsClosed() ;

//! Returns true if the basis curve of this trimmed curve is periodic. <br>
 /*instead*/  System::Boolean IsPeriodic() ;

//! Returns the period of the basis curve of this trimmed curve. <br>
//! Exceptions <br>
//! Standard_NoSuchObject if the basis curve is not periodic. <br>
virtual /*instead*/  Standard_Real Period() override;


//!  Returns the value of the last parameter of <me>. <br>
//!  The last parameter is the parameter of the "EndPoint" of the <br>
//!  trimmed curve. <br>
 /*instead*/  Standard_Real LastParameter() ;


//!  Returns the start point of <me>. <br>
//!  This point is the evaluation of the curve from the <br>
//!  "FirstParameter". <br>//! value and derivatives <br>
//! Warnings : <br>
//!  The returned derivatives have the same orientation as the <br>
//!  derivatives of the basis curve even if the trimmed curve <br>
//!  has not the same orientation as the basis curve. <br>
 /*instead*/  OCgp_Pnt^ StartPoint() ;

//! Returns in P the point of parameter U. <br>
//! <br>
//!  If the basis curve is an OffsetCurve sometimes it is not <br>
//!  possible to do the evaluation of the curve at the parameter <br>
//!  U (see class OffsetCurve). <br>
 /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) ;

//! Raised if the continuity of the curve is not C1. <br>
 /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1) ;

//! Raised if the continuity of the curve is not C2. <br>
 /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;

//! Raised if the continuity of the curve is not C3. <br>
 /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) ;

//! N is the order of derivation. <br>//! Raised if the continuity of the curve is not CN. <br>//! Raised if N < 1. <br>//! geometric transformations <br>
 /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) ;

//! Applies the transformation T to this trimmed curve. <br>
//! Warning The basis curve is also modified. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Returns the  parameter on the  transformed  curve for <br>
//!          the transform of the point of parameter U on <me>. <br>
//! <br>
//!          me->Transformed(T)->Value(me->TransformedParameter(U,T)) <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U).Transformed(T) <br>
//! <br>
//!          This methods calls the basis curve method. <br>
virtual /*instead*/  Standard_Real TransformedParameter(Standard_Real U, OCNaroWrappers::OCgp_Trsf^ T) override;

//! Returns a  coefficient to compute the parameter on <br>
//!          the transformed  curve  for  the transform  of the <br>
//!          point on <me>. <br>
//! <br>
//!          Transformed(T)->Value(U * ParametricTransformation(T)) <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          Value(U).Transformed(T) <br>
//! <br>
//!          This methods calls the basis curve method. <br>
virtual /*instead*/  Standard_Real ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T) override;

//! Creates a new object which is a copy of this trimmed curve. <br>
 /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_TrimmedCurve()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
