// File generated by CPPExt (Transient)
//
#ifndef _Geom_CartesianPoint_OCWrappers_HeaderFile
#define _Geom_CartesianPoint_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_CartesianPoint.hxx>
#include "../Converter.h"

#include "Geom_Point.h"

#include "../gp/gp_Pnt.h"


namespace OCNaroWrappers
{

ref class OCgp_Pnt;
ref class OCgp_Trsf;
ref class OCGeom_Geometry;


//! Describes a point in 3D space. A <br>
//! Geom_CartesianPoint is defined by a gp_Pnt point, <br>
//! with its three Cartesian coordinates X, Y and Z. <br>
public ref class OCGeom_CartesianPoint : OCGeom_Point {

protected:
  // dummy constructor;
  OCGeom_CartesianPoint(OCDummy^) : OCGeom_Point((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_CartesianPoint(Handle(Geom_CartesianPoint)* nativeHandle);

// Methods PUBLIC

//! Returns a transient copy of P. <br>
OCGeom_CartesianPoint(OCNaroWrappers::OCgp_Pnt^ P);

//! Constructs a point defined by its three Cartesian coordinates X, Y and Z. <br>
OCGeom_CartesianPoint(Standard_Real X, Standard_Real Y, Standard_Real Z);

//! Assigns the coordinates X, Y and Z to this point. <br>
 /*instead*/  void SetCoord(Standard_Real X, Standard_Real Y, Standard_Real Z) ;

//! Set <me> to P.X(), P.Y(), P.Z() coordinates. <br>
 /*instead*/  void SetPnt(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Changes the X coordinate of me. <br>
 /*instead*/  void SetX(Standard_Real X) ;

//! Changes the Y coordinate of me. <br>
 /*instead*/  void SetY(Standard_Real Y) ;

//! Changes the Z coordinate of me. <br>
 /*instead*/  void SetZ(Standard_Real Z) ;

//! Returns the coordinates of <me>. <br>
 /*instead*/  void Coord(Standard_Real& X, Standard_Real& Y, Standard_Real& Z) ;


//!  Returns a non transient cartesian point with <br>
//!  the same coordinates as <me>. <br>
 /*instead*/  OCgp_Pnt^ Pnt() ;

//! Returns the X coordinate of <me>. <br>
 /*instead*/  Standard_Real X() ;

//! Returns the Y coordinate of <me>. <br>
 /*instead*/  Standard_Real Y() ;

//! Returns the Z coordinate of <me>. <br>
 /*instead*/  Standard_Real Z() ;

//! Applies the transformation T to this point. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//!  Creates a new object which is a copy of this point. <br>
 /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_CartesianPoint()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
