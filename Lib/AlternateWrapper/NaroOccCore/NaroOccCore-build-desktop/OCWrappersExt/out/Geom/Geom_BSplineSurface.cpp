// File generated by CPPExt (CPP file)
//

#include "Geom_BSplineSurface.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HArray2OfPnt.h"
#include "../TColStd/TColStd_HArray2OfReal.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../TColgp/TColgp_Array2OfPnt.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../TColStd/TColStd_Array2OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../gp/gp_Vec.h"
#include "Geom_Curve.h"
#include "../gp/gp_Trsf.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_BSplineSurface::OCGeom_BSplineSurface(Handle(Geom_BSplineSurface)* nativeHandle) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_BSplineSurface(*nativeHandle);
}

OCGeom_BSplineSurface::OCGeom_BSplineSurface(OCNaroWrappers::OCTColgp_Array2OfPnt^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ UKnots, OCNaroWrappers::OCTColStd_Array1OfReal^ VKnots, OCNaroWrappers::OCTColStd_Array1OfInteger^ UMults, OCNaroWrappers::OCTColStd_Array1OfInteger^ VMults, Standard_Integer UDegree, Standard_Integer VDegree, System::Boolean UPeriodic, System::Boolean VPeriodic) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_BSplineSurface(new Geom_BSplineSurface(*((TColgp_Array2OfPnt*)Poles->Handle), *((TColStd_Array1OfReal*)UKnots->Handle), *((TColStd_Array1OfReal*)VKnots->Handle), *((TColStd_Array1OfInteger*)UMults->Handle), *((TColStd_Array1OfInteger*)VMults->Handle), UDegree, VDegree, OCConverter::BooleanToStandardBoolean(UPeriodic), OCConverter::BooleanToStandardBoolean(VPeriodic)));
}

OCGeom_BSplineSurface::OCGeom_BSplineSurface(OCNaroWrappers::OCTColgp_Array2OfPnt^ Poles, OCNaroWrappers::OCTColStd_Array2OfReal^ Weights, OCNaroWrappers::OCTColStd_Array1OfReal^ UKnots, OCNaroWrappers::OCTColStd_Array1OfReal^ VKnots, OCNaroWrappers::OCTColStd_Array1OfInteger^ UMults, OCNaroWrappers::OCTColStd_Array1OfInteger^ VMults, Standard_Integer UDegree, Standard_Integer VDegree, System::Boolean UPeriodic, System::Boolean VPeriodic) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_BSplineSurface(new Geom_BSplineSurface(*((TColgp_Array2OfPnt*)Poles->Handle), *((TColStd_Array2OfReal*)Weights->Handle), *((TColStd_Array1OfReal*)UKnots->Handle), *((TColStd_Array1OfReal*)VKnots->Handle), *((TColStd_Array1OfInteger*)UMults->Handle), *((TColStd_Array1OfInteger*)VMults->Handle), UDegree, VDegree, OCConverter::BooleanToStandardBoolean(UPeriodic), OCConverter::BooleanToStandardBoolean(VPeriodic)));
}

 void OCGeom_BSplineSurface::ExchangeUV()
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->ExchangeUV();
}

 void OCGeom_BSplineSurface::SetUPeriodic()
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetUPeriodic();
}

 void OCGeom_BSplineSurface::SetVPeriodic()
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetVPeriodic();
}

 void OCGeom_BSplineSurface::PeriodicNormalization(Standard_Real& U, Standard_Real& V)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->PeriodicNormalization(U, V);
}

 void OCGeom_BSplineSurface::SetUOrigin(Standard_Integer Index)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetUOrigin(Index);
}

 void OCGeom_BSplineSurface::SetVOrigin(Standard_Integer Index)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetVOrigin(Index);
}

 void OCGeom_BSplineSurface::SetUNotPeriodic()
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetUNotPeriodic();
}

 void OCGeom_BSplineSurface::SetVNotPeriodic()
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetVNotPeriodic();
}

 void OCGeom_BSplineSurface::UReverse()
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->UReverse();
}

 void OCGeom_BSplineSurface::VReverse()
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->VReverse();
}

 Standard_Real OCGeom_BSplineSurface::UReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->UReversedParameter(U);
}

 Standard_Real OCGeom_BSplineSurface::VReversedParameter(Standard_Real V)
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->VReversedParameter(V);
}

 void OCGeom_BSplineSurface::IncreaseDegree(Standard_Integer UDegree, Standard_Integer VDegree)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->IncreaseDegree(UDegree, VDegree);
}

 void OCGeom_BSplineSurface::InsertUKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults, Standard_Real ParametricTolerance, System::Boolean Add)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->InsertUKnots(*((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Mults->Handle), ParametricTolerance, OCConverter::BooleanToStandardBoolean(Add));
}

 void OCGeom_BSplineSurface::InsertVKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults, Standard_Real ParametricTolerance, System::Boolean Add)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->InsertVKnots(*((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Mults->Handle), ParametricTolerance, OCConverter::BooleanToStandardBoolean(Add));
}

 System::Boolean OCGeom_BSplineSurface::RemoveUKnot(Standard_Integer Index, Standard_Integer M, Standard_Real Tolerance)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->RemoveUKnot(Index, M, Tolerance));
}

 System::Boolean OCGeom_BSplineSurface::RemoveVKnot(Standard_Integer Index, Standard_Integer M, Standard_Real Tolerance)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->RemoveVKnot(Index, M, Tolerance));
}

 void OCGeom_BSplineSurface::IncreaseUMultiplicity(Standard_Integer UIndex, Standard_Integer M)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->IncreaseUMultiplicity(UIndex, M);
}

 void OCGeom_BSplineSurface::IncreaseUMultiplicity(Standard_Integer FromI1, Standard_Integer ToI2, Standard_Integer M)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->IncreaseUMultiplicity(FromI1, ToI2, M);
}

 void OCGeom_BSplineSurface::IncrementUMultiplicity(Standard_Integer FromI1, Standard_Integer ToI2, Standard_Integer Step)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->IncrementUMultiplicity(FromI1, ToI2, Step);
}

 void OCGeom_BSplineSurface::IncreaseVMultiplicity(Standard_Integer VIndex, Standard_Integer M)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->IncreaseVMultiplicity(VIndex, M);
}

 void OCGeom_BSplineSurface::IncreaseVMultiplicity(Standard_Integer FromI1, Standard_Integer ToI2, Standard_Integer M)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->IncreaseVMultiplicity(FromI1, ToI2, M);
}

 void OCGeom_BSplineSurface::IncrementVMultiplicity(Standard_Integer FromI1, Standard_Integer ToI2, Standard_Integer Step)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->IncrementVMultiplicity(FromI1, ToI2, Step);
}

 void OCGeom_BSplineSurface::InsertUKnot(Standard_Real U, Standard_Integer M, Standard_Real ParametricTolerance, System::Boolean Add)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->InsertUKnot(U, M, ParametricTolerance, OCConverter::BooleanToStandardBoolean(Add));
}

 void OCGeom_BSplineSurface::InsertVKnot(Standard_Real V, Standard_Integer M, Standard_Real ParametricTolerance, System::Boolean Add)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->InsertVKnot(V, M, ParametricTolerance, OCConverter::BooleanToStandardBoolean(Add));
}

 void OCGeom_BSplineSurface::Segment(Standard_Real U1, Standard_Real U2, Standard_Real V1, Standard_Real V2)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->Segment(U1, U2, V1, V2);
}

 void OCGeom_BSplineSurface::CheckAndSegment(Standard_Real U1, Standard_Real U2, Standard_Real V1, Standard_Real V2)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->CheckAndSegment(U1, U2, V1, V2);
}

 void OCGeom_BSplineSurface::SetUKnot(Standard_Integer UIndex, Standard_Real K)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetUKnot(UIndex, K);
}

 void OCGeom_BSplineSurface::SetUKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ UK)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetUKnots(*((TColStd_Array1OfReal*)UK->Handle));
}

 void OCGeom_BSplineSurface::SetUKnot(Standard_Integer UIndex, Standard_Real K, Standard_Integer M)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetUKnot(UIndex, K, M);
}

 void OCGeom_BSplineSurface::SetVKnot(Standard_Integer VIndex, Standard_Real K)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetVKnot(VIndex, K);
}

 void OCGeom_BSplineSurface::SetVKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ VK)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetVKnots(*((TColStd_Array1OfReal*)VK->Handle));
}

 void OCGeom_BSplineSurface::SetVKnot(Standard_Integer VIndex, Standard_Real K, Standard_Integer M)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetVKnot(VIndex, K, M);
}

 void OCGeom_BSplineSurface::LocateU(Standard_Real U, Standard_Real ParametricTolerance, Standard_Integer& I1, Standard_Integer& I2, System::Boolean WithKnotRepetition)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->LocateU(U, ParametricTolerance, I1, I2, OCConverter::BooleanToStandardBoolean(WithKnotRepetition));
}

 void OCGeom_BSplineSurface::LocateV(Standard_Real V, Standard_Real ParametricTolerance, Standard_Integer& I1, Standard_Integer& I2, System::Boolean WithKnotRepetition)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->LocateV(V, ParametricTolerance, I1, I2, OCConverter::BooleanToStandardBoolean(WithKnotRepetition));
}

 void OCGeom_BSplineSurface::SetPole(Standard_Integer UIndex, Standard_Integer VIndex, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetPole(UIndex, VIndex, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BSplineSurface::SetPole(Standard_Integer UIndex, Standard_Integer VIndex, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Weight)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetPole(UIndex, VIndex, *((gp_Pnt*)P->Handle), Weight);
}

 void OCGeom_BSplineSurface::SetPoleCol(Standard_Integer VIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetPoleCol(VIndex, *((TColgp_Array1OfPnt*)CPoles->Handle));
}

 void OCGeom_BSplineSurface::SetPoleCol(Standard_Integer VIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetPoleCol(VIndex, *((TColgp_Array1OfPnt*)CPoles->Handle), *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BSplineSurface::SetPoleRow(Standard_Integer UIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetPoleRow(UIndex, *((TColgp_Array1OfPnt*)CPoles->Handle), *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BSplineSurface::SetPoleRow(Standard_Integer UIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetPoleRow(UIndex, *((TColgp_Array1OfPnt*)CPoles->Handle));
}

 void OCGeom_BSplineSurface::SetWeight(Standard_Integer UIndex, Standard_Integer VIndex, Standard_Real Weight)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetWeight(UIndex, VIndex, Weight);
}

 void OCGeom_BSplineSurface::SetWeightCol(Standard_Integer VIndex, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetWeightCol(VIndex, *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BSplineSurface::SetWeightRow(Standard_Integer UIndex, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->SetWeightRow(UIndex, *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BSplineSurface::MovePoint(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, Standard_Integer UIndex1, Standard_Integer UIndex2, Standard_Integer VIndex1, Standard_Integer VIndex2, Standard_Integer& UFirstIndex, Standard_Integer& ULastIndex, Standard_Integer& VFirstIndex, Standard_Integer& VLastIndex)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->MovePoint(U, V, *((gp_Pnt*)P->Handle), UIndex1, UIndex2, VIndex1, VIndex2, UFirstIndex, ULastIndex, VFirstIndex, VLastIndex);
}

 System::Boolean OCGeom_BSplineSurface::IsUClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsUClosed());
}

 System::Boolean OCGeom_BSplineSurface::IsVClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsVClosed());
}

 System::Boolean OCGeom_BSplineSurface::IsCNu(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsCNu(N));
}

 System::Boolean OCGeom_BSplineSurface::IsCNv(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsCNv(N));
}

 System::Boolean OCGeom_BSplineSurface::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsUPeriodic());
}

 System::Boolean OCGeom_BSplineSurface::IsURational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsURational());
}

 System::Boolean OCGeom_BSplineSurface::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsVPeriodic());
}

 System::Boolean OCGeom_BSplineSurface::IsVRational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsVRational());
}

 System::Boolean OCGeom_BSplineSurface::IsCacheValid(Standard_Real UParameter, Standard_Real VParameter)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BSplineSurface*)nativeHandle))->IsCacheValid(UParameter, VParameter));
}

 void OCGeom_BSplineSurface::Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->Bounds(U1, U2, V1, V2);
}

 OCGeomAbs_Shape OCGeom_BSplineSurface::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Geom_BSplineSurface*)nativeHandle))->Continuity());
}

 Standard_Integer OCGeom_BSplineSurface::FirstUKnotIndex()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->FirstUKnotIndex();
}

 Standard_Integer OCGeom_BSplineSurface::FirstVKnotIndex()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->FirstVKnotIndex();
}

 Standard_Integer OCGeom_BSplineSurface::LastUKnotIndex()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->LastUKnotIndex();
}

 Standard_Integer OCGeom_BSplineSurface::LastVKnotIndex()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->LastVKnotIndex();
}

 Standard_Integer OCGeom_BSplineSurface::NbUKnots()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->NbUKnots();
}

 Standard_Integer OCGeom_BSplineSurface::NbUPoles()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->NbUPoles();
}

 Standard_Integer OCGeom_BSplineSurface::NbVKnots()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->NbVKnots();
}

 Standard_Integer OCGeom_BSplineSurface::NbVPoles()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->NbVPoles();
}

OCgp_Pnt^ OCGeom_BSplineSurface::Pole(Standard_Integer UIndex, Standard_Integer VIndex)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->Pole(UIndex, VIndex);
  return gcnew OCgp_Pnt(tmp);
}

 void OCGeom_BSplineSurface::Poles(OCNaroWrappers::OCTColgp_Array2OfPnt^ P)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->Poles(*((TColgp_Array2OfPnt*)P->Handle));
}

 Standard_Integer OCGeom_BSplineSurface::UDegree()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->UDegree();
}

 Standard_Real OCGeom_BSplineSurface::UKnot(Standard_Integer UIndex)
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->UKnot(UIndex);
}

 OCGeomAbs_BSplKnotDistribution OCGeom_BSplineSurface::UKnotDistribution()
{
  return (OCGeomAbs_BSplKnotDistribution)((*((Handle_Geom_BSplineSurface*)nativeHandle))->UKnotDistribution());
}

 void OCGeom_BSplineSurface::UKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Ku)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->UKnots(*((TColStd_Array1OfReal*)Ku->Handle));
}

 void OCGeom_BSplineSurface::UKnotSequence(OCNaroWrappers::OCTColStd_Array1OfReal^ Ku)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->UKnotSequence(*((TColStd_Array1OfReal*)Ku->Handle));
}

 Standard_Integer OCGeom_BSplineSurface::UMultiplicity(Standard_Integer UIndex)
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->UMultiplicity(UIndex);
}

 void OCGeom_BSplineSurface::UMultiplicities(OCNaroWrappers::OCTColStd_Array1OfInteger^ Mu)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->UMultiplicities(*((TColStd_Array1OfInteger*)Mu->Handle));
}

 Standard_Integer OCGeom_BSplineSurface::VDegree()
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->VDegree();
}

 Standard_Real OCGeom_BSplineSurface::VKnot(Standard_Integer VIndex)
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->VKnot(VIndex);
}

 OCGeomAbs_BSplKnotDistribution OCGeom_BSplineSurface::VKnotDistribution()
{
  return (OCGeomAbs_BSplKnotDistribution)((*((Handle_Geom_BSplineSurface*)nativeHandle))->VKnotDistribution());
}

 void OCGeom_BSplineSurface::VKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Kv)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->VKnots(*((TColStd_Array1OfReal*)Kv->Handle));
}

 void OCGeom_BSplineSurface::VKnotSequence(OCNaroWrappers::OCTColStd_Array1OfReal^ Kv)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->VKnotSequence(*((TColStd_Array1OfReal*)Kv->Handle));
}

 Standard_Integer OCGeom_BSplineSurface::VMultiplicity(Standard_Integer VIndex)
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->VMultiplicity(VIndex);
}

 void OCGeom_BSplineSurface::VMultiplicities(OCNaroWrappers::OCTColStd_Array1OfInteger^ Mv)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->VMultiplicities(*((TColStd_Array1OfInteger*)Mv->Handle));
}

 Standard_Real OCGeom_BSplineSurface::Weight(Standard_Integer UIndex, Standard_Integer VIndex)
{
  return (*((Handle_Geom_BSplineSurface*)nativeHandle))->Weight(UIndex, VIndex);
}

 void OCGeom_BSplineSurface::Weights(OCNaroWrappers::OCTColStd_Array2OfReal^ W)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->Weights(*((TColStd_Array2OfReal*)W->Handle));
}

 void OCGeom_BSplineSurface::D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->D0(U, V, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BSplineSurface::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeom_BSplineSurface::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeom_BSplineSurface::D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->D3(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeom_BSplineSurface::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeom_BSplineSurface::LocalD0(Standard_Real U, Standard_Real V, Standard_Integer FromUK1, Standard_Integer ToUK2, Standard_Integer FromVK1, Standard_Integer ToVK2, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->LocalD0(U, V, FromUK1, ToUK2, FromVK1, ToVK2, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BSplineSurface::LocalD1(Standard_Real U, Standard_Real V, Standard_Integer FromUK1, Standard_Integer ToUK2, Standard_Integer FromVK1, Standard_Integer ToVK2, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->LocalD1(U, V, FromUK1, ToUK2, FromVK1, ToVK2, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeom_BSplineSurface::LocalD2(Standard_Real U, Standard_Real V, Standard_Integer FromUK1, Standard_Integer ToUK2, Standard_Integer FromVK1, Standard_Integer ToVK2, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->LocalD2(U, V, FromUK1, ToUK2, FromVK1, ToVK2, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeom_BSplineSurface::LocalD3(Standard_Real U, Standard_Real V, Standard_Integer FromUK1, Standard_Integer ToUK2, Standard_Integer FromVK1, Standard_Integer ToVK2, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->LocalD3(U, V, FromUK1, ToUK2, FromVK1, ToVK2, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeom_BSplineSurface::LocalDN(Standard_Real U, Standard_Real V, Standard_Integer FromUK1, Standard_Integer ToUK2, Standard_Integer FromVK1, Standard_Integer ToVK2, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->LocalDN(U, V, FromUK1, ToUK2, FromVK1, ToVK2, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

OCgp_Pnt^ OCGeom_BSplineSurface::LocalValue(Standard_Real U, Standard_Real V, Standard_Integer FromUK1, Standard_Integer ToUK2, Standard_Integer FromVK1, Standard_Integer ToVK2)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->LocalValue(U, V, FromUK1, ToUK2, FromVK1, ToVK2);
  return gcnew OCgp_Pnt(tmp);
}

OCGeom_Curve^ OCGeom_BSplineSurface::UIso(Standard_Real U)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->UIso(U);
  return gcnew OCGeom_Curve(&tmp);
}

OCGeom_Curve^ OCGeom_BSplineSurface::VIso(Standard_Real V)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->VIso(V);
  return gcnew OCGeom_Curve(&tmp);
}

OCGeom_Curve^ OCGeom_BSplineSurface::UIso(Standard_Real U, System::Boolean CheckRational)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->UIso(U, OCConverter::BooleanToStandardBoolean(CheckRational));
  return gcnew OCGeom_Curve(&tmp);
}

OCGeom_Curve^ OCGeom_BSplineSurface::VIso(Standard_Real V, System::Boolean CheckRational)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->VIso(V, OCConverter::BooleanToStandardBoolean(CheckRational));
  return gcnew OCGeom_Curve(&tmp);
}

 void OCGeom_BSplineSurface::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

 Standard_Integer OCGeom_BSplineSurface::MaxDegree()
{
  return Geom_BSplineSurface::MaxDegree();
}

 void OCGeom_BSplineSurface::Resolution(Standard_Real Tolerance3D, Standard_Real& UTolerance, Standard_Real& VTolerance)
{
  (*((Handle_Geom_BSplineSurface*)nativeHandle))->Resolution(Tolerance3D, UTolerance, VTolerance);
}

OCGeom_Geometry^ OCGeom_BSplineSurface::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_BSplineSurface*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}


