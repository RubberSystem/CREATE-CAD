// File generated by CPPExt (Transient)
//
#ifndef _Geom_CylindricalSurface_OCWrappers_HeaderFile
#define _Geom_CylindricalSurface_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_CylindricalSurface.hxx>
#include "../Converter.h"

#include "Geom_ElementarySurface.h"



namespace OCNaroWrappers
{

ref class OCgp_Ax3;
ref class OCgp_Cylinder;
ref class OCgp_Trsf;
ref class OCgp_GTrsf2d;
ref class OCGeom_Curve;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCGeom_Geometry;


//! This class defines the infinite cylindrical surface. <br>
//! <br>
//!  The local coordinate system of the CylindricalSurface is defined <br>
//!  with an axis placement (see class ElementarySurface). <br>
//! <br>
//!  The "ZAxis" is the symmetry axis of the CylindricalSurface, <br>
//!  it gives the direction of increasing parametric value V. <br>
//! <br>
//!  The parametrization range is : <br>
//!       U [0, 2*PI],  V ]- infinite, + infinite[ <br>
//! <br>
//!  The "XAxis" and the "YAxis" define the placement plane of the <br>
//!  surface (Z = 0, and parametric value V = 0)  perpendicular to <br>
//!  the symmetry axis. The "XAxis" defines the origin of the <br>
//!  parameter U = 0.  The trigonometric sense gives the positive <br>
//!  orientation for the parameter U. <br>
//! <br>
//!  When you create a CylindricalSurface the U and V directions of <br>
//!  parametrization are such that at each point of the surface the <br>
//!  normal is oriented towards the "outside region". <br>
//! <br>
//!  The methods UReverse VReverse change the orientation of the <br>
//!  surface. <br>
public ref class OCGeom_CylindricalSurface : OCGeom_ElementarySurface {

protected:
  // dummy constructor;
  OCGeom_CylindricalSurface(OCDummy^) : OCGeom_ElementarySurface((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_CylindricalSurface(Handle(Geom_CylindricalSurface)* nativeHandle);

// Methods PUBLIC


//!  A3 defines the local coordinate system of the cylindrical surface. <br>
//!  The "ZDirection" of A3 defines the direction of the surface's <br>
//!  axis of symmetry. <br>
//!  At the creation the parametrization of the surface is defined <br>
//!  such that the normal Vector (N = D1U ^ D1V) is oriented towards <br>
//!  the "outside region" of the surface. <br>
//! Warnings : <br>
//!  It is not forbidden to create a cylindrical surface with <br>
//!  Radius = 0.0 <br>//! Raised if Radius < 0.0 <br>
OCGeom_CylindricalSurface(OCNaroWrappers::OCgp_Ax3^ A3, Standard_Real Radius);


//!  Creates a CylindricalSurface from a non transient Cylinder <br>
//!  from package gp. <br>
OCGeom_CylindricalSurface(OCNaroWrappers::OCgp_Cylinder^ C);


//!  Set <me> so that <me> has the same geometric properties as C. <br>
 /*instead*/  void SetCylinder(OCNaroWrappers::OCgp_Cylinder^ C) ;

//! Changes the radius of the cylinder. <br>//! Raised if R < 0.0 <br>
 /*instead*/  void SetRadius(Standard_Real R) ;


//!  returns a non transient cylinder with the same geometric <br>
//!  properties as <me>. <br>
 /*instead*/  OCgp_Cylinder^ Cylinder() ;

//! Return the  parameter on the  Ureversed surface for <br>
//!          the point of parameter U on <me>. <br>
//!          Return 2.PI - U. <br>
 /*instead*/  Standard_Real UReversedParameter(Standard_Real U) ;

//! Return the  parameter on the  Vreversed surface for <br>
//!          the point of parameter V on <me>. <br>
//!          Return -V <br>
 /*instead*/  Standard_Real VReversedParameter(Standard_Real V) ;

//! Computes the  parameters on the  transformed  surface for <br>
//! the transform of the point of parameters U,V on <me>. <br>
//!          me->Transformed(T)->Value(U',V') <br>
//!          is the same point as <br>
//!          me->Value(U,V).Transformed(T) <br>
//!   Where U',V' are the new values of U,V after calling <br>
//!          me->TranformParameters(U,V,T) <br>
//!          This methods multiplies V by T.ScaleFactor() <br>
virtual /*instead*/  void TransformParameters(Standard_Real& U, Standard_Real& V, OCNaroWrappers::OCgp_Trsf^ T) override;

//! Returns a 2d transformation  used to find the  new <br>
//!          parameters of a point on the transformed surface. <br>
//!          me->Transformed(T)->Value(U',V') <br>
//!          is the same point as <br>
//!          me->Value(U,V).Transformed(T) <br>
//!  Where U',V' are  obtained by transforming U,V with <br>
//!          th 2d transformation returned by <br>
//!          me->ParametricTransformation(T) <br>
//!    This  methods  returns  a scale  centered  on  the <br>
//!          U axis with T.ScaleFactor <br>
virtual /*instead*/  OCgp_GTrsf2d^ ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T) override;


//!  The CylindricalSurface is infinite in the V direction so <br>
//!  V1 = Realfirst, V2 = RealLast from package Standard. <br>
//!  U1 = 0 and U2 = 2*PI. <br>
 /*instead*/  void Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2) ;


//!  Returns the coefficients of the implicit equation of the quadric <br>
//!  in the absolute cartesian coordinate system : <br>
//!  These coefficients are normalized. <br>
//!  A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + <br>
//!  2.(C1.X + C2.Y + C3.Z) + D = 0.0 <br>
 /*instead*/  void Coefficients(Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D) ;

//! Returns the radius of this cylinder. <br>
 /*instead*/  Standard_Real Radius() ;

//! Returns True. <br>
 /*instead*/  System::Boolean IsUClosed() ;

//! Returns False. <br>
 /*instead*/  System::Boolean IsVClosed() ;

//! Returns True. <br>
 /*instead*/  System::Boolean IsUPeriodic() ;

//! Returns False. <br>
 /*instead*/  System::Boolean IsVPeriodic() ;


//!  The UIso curve is a Line. The location point of this line is <br>
//!  on the placement plane (XAxis, YAxis) of the surface. <br>
//!  This line is parallel to the axis of symmetry of the surface. <br>
 /*instead*/  OCGeom_Curve^ UIso(Standard_Real U) ;


//!  The VIso curve is a circle. The start point of this circle <br>
//!  (U = 0) is defined with the "XAxis" of the surface. <br>
//!  The center of the circle is on the symmetry axis. <br>
 /*instead*/  OCGeom_Curve^ VIso(Standard_Real V) ;


//!  Computes the  point P (U, V) on the surface. <br>
//!  P (U, V) = Loc + Radius * (cos (U) * XDir + sin (U) * YDir) + <br>
//!             V * ZDir <br>
//!  where Loc is the origin of the placement plane (XAxis, YAxis) <br>
//!  XDir is the direction of the XAxis and YDir the direction of <br>
//!  the YAxis. <br>
 /*instead*/  void D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Computes the current point and the first derivatives in the <br>
//!  directions U and V. <br>
 /*instead*/  void D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V) ;


//!  Computes the current point, the first and the second derivatives <br>
//!  in the directions U and V. <br>
 /*instead*/  void D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV) ;


//!  Computes the current point, the first, the second and the <br>
//!  third   derivatives in the directions U and V. <br>
 /*instead*/  void D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV) ;


//!  Computes the derivative of order Nu in the direction u and Nv <br>
//!  in the direction v. <br>//! Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0. <br>
 /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv) ;

//!  Applies the transformation T to this cylinder. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//!  Creates a new object which is a copy of this cylinder. <br>
 /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_CylindricalSurface()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
