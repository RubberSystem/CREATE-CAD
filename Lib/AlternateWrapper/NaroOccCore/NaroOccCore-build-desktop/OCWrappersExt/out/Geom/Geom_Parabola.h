// File generated by CPPExt (Transient)
//
#ifndef _Geom_Parabola_OCWrappers_HeaderFile
#define _Geom_Parabola_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_Parabola.hxx>
#include "../Converter.h"

#include "Geom_Conic.h"



namespace OCNaroWrappers
{

ref class OCgp_Parab;
ref class OCgp_Ax2;
ref class OCgp_Ax1;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Trsf;
ref class OCGeom_Geometry;


//! Describes a parabola in 3D space. <br>
//! A parabola is defined by its focal length (i.e. the <br>
//! distance between its focus and its apex) and is <br>
//! positioned in space with a coordinate system <br>
//! (gp_Ax2 object) where: <br>
//! - the origin is the apex of the parabola, <br>
//! - the "X Axis" defines the axis of symmetry; the <br>
//!   parabola is on the positive side of this axis, <br>
//! - the origin, "X Direction" and "Y Direction" define the <br>
//!   plane of the parabola. <br>
//!   This coordinate system is the local coordinate <br>
//! system of the parabola. <br>
//! The "main Direction" of this coordinate system is a <br>
//! vector normal to the plane of the parabola. The axis, <br>
//! of which the origin and unit vector are respectively the <br>
//! origin and "main Direction" of the local coordinate <br>
//! system, is termed the "Axis" or "main Axis" of the parabola. <br>
//! The "main Direction" of the local coordinate system <br>
//! gives an explicit orientation to the parabola, <br>
//! determining the direction in which the parameter <br>
//! increases along the parabola. <br>
//! The Geom_Parabola parabola is parameterized as follows: <br>
//! P(U) = O + U*U/(4.*F)*XDir + U*YDir <br>
//! where: <br>
//! - P is the point of parameter U, <br>
//! - O, XDir and YDir are respectively the origin, "X <br>
//!   Direction" and "Y Direction" of its local coordinate system, <br>
//! - F is the focal length of the parabola. <br>
//!  The parameter of the parabola is therefore its Y <br>
//! coordinate in the local coordinate system, with the "X <br>
//! Axis" of the local coordinate system defining the origin <br>
//! of the parameter. <br>
//! The parameter range is ] -infinite, +infinite [. <br>
public ref class OCGeom_Parabola : OCGeom_Conic {

protected:
  // dummy constructor;
  OCGeom_Parabola(OCDummy^) : OCGeom_Conic((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_Parabola(Handle(Geom_Parabola)* nativeHandle);

// Methods PUBLIC

//! Creates a parabola from a non transient one. <br>
OCGeom_Parabola(OCNaroWrappers::OCgp_Parab^ Prb);


//!  Creates a parabola with its local coordinate system "A2" <br>
//!  and it's focal length "Focal". <br>
//!  The XDirection of A2 defines the axis of symmetry of the <br>
//!  parabola. The YDirection of A2 is parallel to the directrix <br>
//!  of the parabola. The Location point of A2 is the vertex of <br>
//!  the parabola <br>//! Raised if Focal < 0.0 <br>
OCGeom_Parabola(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Focal);


//!  D is the directrix of the parabola and F the focus point. <br>
//!  The symmetry axis (XAxis) of the parabola is normal to the <br>
//!  directrix and pass through the focus point F, but its <br>
//!  location point is the vertex of the parabola. <br>
//!  The YAxis of the parabola is parallel to D and its location <br>
//!  point is the vertex of the parabola. The normal to the plane <br>
//!  of the parabola is the cross product between the XAxis and the <br>
//!  YAxis. <br>
OCGeom_Parabola(OCNaroWrappers::OCgp_Ax1^ D, OCNaroWrappers::OCgp_Pnt^ F);

//! Assigns the value Focal to the focal distance of this parabola. <br>
//! Exceptions Standard_ConstructionError if Focal is negative. <br>
 /*instead*/  void SetFocal(Standard_Real Focal) ;

//! Converts the gp_Parab parabola Prb into this parabola. <br>
 /*instead*/  void SetParab(OCNaroWrappers::OCgp_Parab^ Prb) ;


//!  Returns the non transient parabola from gp with the same <br>
//!  geometric properties as <me>. <br>
 /*instead*/  OCgp_Parab^ Parab() ;

//! Computes the parameter on the reversed parabola, <br>
//! for the point of parameter U on this parabola. <br>
//! For a parabola, the returned value is: -U. <br>
virtual /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;

//! Returns the value of the first or last parameter of this <br>
//! parabola. This is, respectively: <br>
//! - Standard_Real::RealFirst(), or <br>
//! - Standard_Real::RealLast(). <br>
virtual /*instead*/  Standard_Real FirstParameter() ;

//! Returns the value of the first or last parameter of this <br>
//! parabola. This is, respectively: <br>
//! - Standard_Real::RealFirst(), or <br>
//! - Standard_Real::RealLast(). <br>
virtual /*instead*/  Standard_Real LastParameter() ;

//! Returns False <br>
virtual /*instead*/  System::Boolean IsClosed() ;

//! Returns False <br>
virtual /*instead*/  System::Boolean IsPeriodic() ;

//! Computes the directrix of this parabola. <br>
//! This is a line normal to the axis of symmetry, in the <br>
//! plane of this parabola, located on the negative side <br>
//! of its axis of symmetry, at a distance from the apex <br>
//! equal to the focal length. <br>
//! The directrix is returned as an axis (gp_Ax1 object), <br>
//! where the origin is located on the "X Axis" of this parabola. <br>
 /*instead*/  OCgp_Ax1^ Directrix() ;

//! Returns 1. (which is the eccentricity of any parabola). <br>
virtual /*instead*/  Standard_Real Eccentricity() ;

//! Computes the focus of this parabola. The focus is on the <br>
//! positive side of the "X Axis" of the local coordinate <br>
//! system of the parabola. <br>
 /*instead*/  OCgp_Pnt^ Focus() ;

//! Computes the focal distance of this parabola <br>
//!  The focal distance is the distance between the apex <br>
//! and the focus of the parabola. <br>
 /*instead*/  Standard_Real Focal() ;

//! Computes the parameter of this parabola which is the <br>
//! distance between its focus and its directrix. This <br>
//! distance is twice the focal length. <br>
//! If P is the parameter of the parabola, the equation of <br>
//! the parabola in its local coordinate system is: Y**2 = 2.*P*X. <br>
 /*instead*/  Standard_Real Parameter() ;

//! Returns in P the point of parameter U. <br>
//!  If U = 0 the returned point is the origin of the XAxis and <br>
//!  the YAxis of the parabola and it is the vertex of the parabola. <br>
//!  P = S + F * (U * U * XDir +  * U * YDir) <br>
//!  where S is the vertex of the parabola, XDir the XDirection and <br>
//!  YDir the YDirection of the parabola's local coordinate system. <br>
virtual /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Returns the point P of parameter U and the first derivative V1. <br>
virtual /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1) ;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>
virtual /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


//!  Returns the point P of parameter U, the first second and third <br>
//!  derivatives V1 V2 and V3. <br>
virtual /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) ;

//! For the point of parameter U of this parabola, <br>
//! computes the vector corresponding to the Nth derivative. <br>
//! Exceptions Standard_RangeError if N is less than 1. <br>
virtual /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) ;

//! Applies the transformation T to this parabola. <br>
virtual /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Returns the  parameter on the  transformed  curve for <br>
//!          the transform of the point of parameter U on <me>. <br>
//! <br>
//!          me->Transformed(T)->Value(me->TransformedParameter(U,T)) <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U).Transformed(T) <br>
//! <br>
//!          This methods returns <U> * T.ScaleFactor() <br>
virtual /*instead*/  Standard_Real TransformedParameter(Standard_Real U, OCNaroWrappers::OCgp_Trsf^ T) override;

//! Returns a  coefficient to compute the parameter on <br>
//!          the transformed  curve  for  the transform  of the <br>
//!          point on <me>. <br>
//! <br>
//!          Transformed(T)->Value(U * ParametricTransformation(T)) <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          Value(U).Transformed(T) <br>
//! <br>
//!          This methods returns T.ScaleFactor() <br>
virtual /*instead*/  Standard_Real ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T) override;

//! Creates a new object which is a copy of this parabola. <br>
virtual /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_Parabola()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
