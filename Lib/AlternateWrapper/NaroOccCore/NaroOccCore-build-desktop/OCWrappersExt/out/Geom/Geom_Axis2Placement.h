// File generated by CPPExt (Transient)
//
#ifndef _Geom_Axis2Placement_OCWrappers_HeaderFile
#define _Geom_Axis2Placement_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_Axis2Placement.hxx>
#include "../Converter.h"

#include "Geom_AxisPlacement.h"

#include "../gp/gp_Dir.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2;
ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Trsf;
ref class OCGeom_Geometry;


//!  Describes a right-handed coordinate system in 3D space. <br>
//! A coordinate system is defined by: <br>
//! - its origin, also termed the "Location point" of the coordinate system, <br>
//! - three orthogonal unit vectors, termed respectively <br>
//!   the "X Direction", "Y Direction" and "Direction" (or <br>
//!   "main Direction") of the coordinate system. <br>
//! As a Geom_Axis2Placement coordinate system is <br>
//! right-handed, its "Direction" is always equal to the <br>
//! cross product of its "X Direction" and "Y Direction". <br>
//! The "Direction" of a coordinate system is called the <br>
//! "main Direction" because when this unit vector is <br>
//! modified, the "X Direction" and "Y Direction" are <br>
//! recomputed, whereas when the "X Direction" or "Y <br>
//! Direction" is changed, the "main Direction" is <br>
//! retained. The "main Direction" is also the "Z Direction". <br>
//! Note: Geom_Axis2Placement coordinate systems <br>
//! provide the same kind of "geometric" services as <br>
//! gp_Ax2 coordinate systems but have more complex <br>
//! data structures. The geometric objects provided by <br>
//! the Geom package use gp_Ax2 objects to include <br>
//! coordinate systems in their data structures, or to <br>
//! define the geometric transformations, which are applied to them. <br>
//! Geom_Axis2Placement coordinate systems are <br>
//! used in a context where they can be shared by <br>
//! several objects contained inside a common data structure. <br>
public ref class OCGeom_Axis2Placement : OCGeom_AxisPlacement {

protected:
  // dummy constructor;
  OCGeom_Axis2Placement(OCDummy^) : OCGeom_AxisPlacement((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_Axis2Placement(Handle(Geom_Axis2Placement)* nativeHandle);

// Methods PUBLIC

//! Returns a transient copy of A2. <br>
OCGeom_Axis2Placement(OCNaroWrappers::OCgp_Ax2^ A2);


//!  P is the origin of the axis placement, N is the main <br>
//!  direction of the axis placement and Vx is the "XDirection". <br>
//!  If the two directions N and Vx are not orthogonal the <br>
//!  "XDirection" is computed as follow : <br>
//!  XDirection = N ^ (Vx ^ N). <br>//! Raised if N and Vx are parallel. <br>
OCGeom_Axis2Placement(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ N, OCNaroWrappers::OCgp_Dir^ Vx);

//! Assigns the origin and the three unit vectors of A2 to <br>
//! this coordinate system. <br>
 /*instead*/  void SetAx2(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Changes the main direction of the axis placement. <br>
//!  The "Xdirection" is modified : <br>
//!  New XDirection = V ^ (Previous_Xdirection ^ V). <br>
//!  Raised if V and the previous "XDirection" are parallel <br>
//!  because it is impossible to calculate the new "XDirection" <br>
//!  and the new "YDirection". <br>
 /*instead*/  void SetDirection(OCNaroWrappers::OCgp_Dir^ V) ;


//!  Changes the "XDirection" of the axis placement, Vx is the <br>
//!  new "XDirection". If Vx is not normal to the main direction <br>
//!  then "XDirection" is computed as follow : <br>
//!  XDirection = Direction ^ ( Vx ^ Direction). <br>
//!  The main direction is not modified. <br>//!  Raised if Vx and "Direction"  are parallel. <br>
 /*instead*/  void SetXDirection(OCNaroWrappers::OCgp_Dir^ Vx) ;


//!  Changes the "YDirection" of the axis placement, Vy is the <br>
//!  new "YDirection". If Vy is not normal to the main direction <br>
//!  then "YDirection" is computed as follow : <br>
//!  YDirection = Direction ^ ( Vy ^ Direction). <br>
//!  The main direction is not modified. The "XDirection" is <br>
//!  modified. <br>//! Raised if Vy and the main direction are parallel. <br>
 /*instead*/  void SetYDirection(OCNaroWrappers::OCgp_Dir^ Vy) ;

//! Returns a non transient copy of <me>. <br>
 /*instead*/  OCgp_Ax2^ Ax2() ;

//! Returns the "XDirection". This is a unit vector. <br>
 /*instead*/  OCgp_Dir^ XDirection() ;

//! Returns the "YDirection". This is a unit vector. <br>
 /*instead*/  OCgp_Dir^ YDirection() ;


//!  Transforms an axis placement with a Trsf. <br>
//!  The "Location" point, the "XDirection" and the <br>
//!  "YDirection" are transformed with T.  The resulting <br>
//!  main "Direction" of <me> is the cross product between <br>
//!  the "XDirection" and the "YDirection" after transformation. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Creates a new object which is a copy of this coordinate system. <br>
 /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_Axis2Placement()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
