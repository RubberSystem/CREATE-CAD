// File generated by CPPExt (Transient)
//
#ifndef _Geom_Circle_OCWrappers_HeaderFile
#define _Geom_Circle_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_Circle.hxx>
#include "../Converter.h"

#include "Geom_Conic.h"



namespace OCNaroWrappers
{

ref class OCgp_Circ;
ref class OCgp_Ax2;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Trsf;
ref class OCGeom_Geometry;


//! Describes a circle in 3D space. <br>
//! A circle is defined by its radius and, as with any conic <br>
//! curve, is positioned in space with a right-handed <br>
//! coordinate system (gp_Ax2 object) where: <br>
//! - the origin is the center of the circle, and <br>
//! - the origin, "X Direction" and "Y Direction" define the <br>
//!   plane of the circle. <br>
//! This coordinate system is the local coordinate <br>
//! system of the circle. <br>
//! The "main Direction" of this coordinate system is the <br>
//! vector normal to the plane of the circle. The axis, of <br>
//! which the origin and unit vector are respectively the <br>
//! origin and "main Direction" of the local coordinate <br>
//! system, is termed the "Axis" or "main Axis" of the circle. <br>
//! The "main Direction" of the local coordinate system <br>
//! gives an explicit orientation to the circle (definition of <br>
//! the trigonometric sense), determining the direction in <br>
//! which the parameter increases along the circle. <br>
//! The Geom_Circle circle is parameterized by an angle: <br>
//! P(U) = O + R*Cos(U)*XDir + R*Sin(U)*YDir, where: <br>
//! - P is the point of parameter U, <br>
//! - O, XDir and YDir are respectively the origin, "X <br>
//! Direction" and "Y Direction" of its local coordinate system, <br>
//! - R is the radius of the circle. <br>
//! The "X Axis" of the local coordinate system therefore <br>
//! defines the origin of the parameter of the circle. The <br>
//! parameter is the angle with this "X Direction". <br>
//! A circle is a closed and periodic curve. The period is <br>
//! 2.*Pi and the parameter range is [ 0, 2.*Pi [. <br>
public ref class OCGeom_Circle : OCGeom_Conic {

protected:
  // dummy constructor;
  OCGeom_Circle(OCDummy^) : OCGeom_Conic((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_Circle(Handle(Geom_Circle)* nativeHandle);

// Methods PUBLIC

//!  Constructs a circle by conversion of the gp_Circ circle C. <br>
OCGeom_Circle(OCNaroWrappers::OCgp_Circ^ C);

//! Constructs a circle of radius Radius, where A2 locates the circle and <br>
//!   defines its orientation in 3D space such that: <br>
//!   - the center of the circle is the origin of A2, <br>
//!   - the origin, "X Direction" and "Y Direction" of A2 <br>
//!    define the plane of the circle, <br>
//!   - A2 is the local coordinate system of the circle. <br>
//!  Note: It is possible to create a circle where Radius is equal to 0.0. <br>//! raised if Radius < 0. <br>
OCGeom_Circle(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Radius);


//!  Set <me> so that <me> has the same geometric properties as C. <br>
 /*instead*/  void SetCirc(OCNaroWrappers::OCgp_Circ^ C) ;

//! Assigns the value R to the radius of this circle. <br>
//! Note: it is possible to have a circle with a radius equal to 0.0. <br>
//! Exceptions - Standard_ConstructionError if R is negative. <br>
 /*instead*/  void SetRadius(Standard_Real R) ;


//!  returns the non transient circle from gp with the same <br>
//!  geometric properties as <me>. <br>
 /*instead*/  OCgp_Circ^ Circ() ;

//! Returns the radius of this circle. <br>
 /*instead*/  Standard_Real Radius() ;

//! Computes the parameter on the reversed circle for <br>
//! the point of parameter U on this circle. <br>
//! For a circle, the returned value is: 2.*Pi - U. <br>
virtual /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;

//! Returns the eccentricity  e = 0 for a circle. <br>
virtual /*instead*/  Standard_Real Eccentricity() ;

//! Returns the value of the first parameter of this <br>
//! circle. This is  0.0, which gives the start point of this circle, or <br>
//!  The start point and end point of a circle are coincident. <br>
virtual /*instead*/  Standard_Real FirstParameter() ;

//! Returns the value of the last parameter of this <br>
//! circle. This is 2.*Pi, which gives the end point of this circle. <br>
//! The start point and end point of a circle are coincident. <br>
virtual /*instead*/  Standard_Real LastParameter() ;

//! returns True. <br>
virtual /*instead*/  System::Boolean IsClosed() ;

//! returns True. <br>
virtual /*instead*/  System::Boolean IsPeriodic() ;

//! Returns in P the point of parameter U. <br>
//!  P = C + R * Cos (U) * XDir + R * Sin (U) * YDir <br>
//!  where C is the center of the circle , XDir the XDirection and <br>
//!  YDir the YDirection of the circle's local coordinate system. <br>
virtual /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Returns the point P of parameter U and the first derivative V1. <br>
virtual /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1) ;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>
virtual /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


//!  Returns the point P of parameter u, the first second and third <br>
//!  derivatives V1 V2 and V3. <br>
virtual /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) ;


//!  The returned vector gives the value of the derivative for the <br>
//!  order of derivation N. <br>//! Raised if N < 1. <br>
virtual /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) ;

//! Applies the transformation T to this circle. <br>
virtual /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Creates a new object which is a copy of this circle. <br>
virtual /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_Circle()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
