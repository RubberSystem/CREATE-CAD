// File generated by CPPExt (CPP file)
//

#include "Geom_Transformation.h"
#include "../Converter.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Ax1.h"
#include "../gp/gp_Ax2.h"
#include "../gp/gp_Ax3.h"
#include "../gp/gp_Vec.h"


using namespace OCNaroWrappers;

OCGeom_Transformation::OCGeom_Transformation(Handle(Geom_Transformation)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_Transformation(*nativeHandle);
}

OCGeom_Transformation::OCGeom_Transformation() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Transformation(new Geom_Transformation());
}

OCGeom_Transformation::OCGeom_Transformation(OCNaroWrappers::OCgp_Trsf^ T) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Transformation(new Geom_Transformation(*((gp_Trsf*)T->Handle)));
}

 void OCGeom_Transformation::SetMirror(OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetMirror(*((gp_Pnt*)P->Handle));
}

 void OCGeom_Transformation::SetMirror(OCNaroWrappers::OCgp_Ax1^ A1)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetMirror(*((gp_Ax1*)A1->Handle));
}

 void OCGeom_Transformation::SetMirror(OCNaroWrappers::OCgp_Ax2^ A2)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetMirror(*((gp_Ax2*)A2->Handle));
}

 void OCGeom_Transformation::SetRotation(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetRotation(*((gp_Ax1*)A1->Handle), Ang);
}

 void OCGeom_Transformation::SetScale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetScale(*((gp_Pnt*)P->Handle), S);
}

 void OCGeom_Transformation::SetTransformation(OCNaroWrappers::OCgp_Ax3^ FromSystem1, OCNaroWrappers::OCgp_Ax3^ ToSystem2)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetTransformation(*((gp_Ax3*)FromSystem1->Handle), *((gp_Ax3*)ToSystem2->Handle));
}

 void OCGeom_Transformation::SetTransformation(OCNaroWrappers::OCgp_Ax3^ ToSystem)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetTransformation(*((gp_Ax3*)ToSystem->Handle));
}

 void OCGeom_Transformation::SetTranslation(OCNaroWrappers::OCgp_Vec^ V)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetTranslation(*((gp_Vec*)V->Handle));
}

 void OCGeom_Transformation::SetTranslation(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetTranslation(*((gp_Pnt*)P1->Handle), *((gp_Pnt*)P2->Handle));
}

 void OCGeom_Transformation::SetTrsf(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->SetTrsf(*((gp_Trsf*)T->Handle));
}

 System::Boolean OCGeom_Transformation::IsNegative()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Transformation*)nativeHandle))->IsNegative());
}

 OCgp_TrsfForm OCGeom_Transformation::Form()
{
  return (OCgp_TrsfForm)((*((Handle_Geom_Transformation*)nativeHandle))->Form());
}

 Standard_Real OCGeom_Transformation::ScaleFactor()
{
  return (*((Handle_Geom_Transformation*)nativeHandle))->ScaleFactor();
}

OCgp_Trsf^ OCGeom_Transformation::Trsf()
{
  gp_Trsf* tmp = new gp_Trsf();
  *tmp = (*((Handle_Geom_Transformation*)nativeHandle))->Trsf();
  return gcnew OCgp_Trsf(tmp);
}

 Standard_Real OCGeom_Transformation::Value(Standard_Integer Row, Standard_Integer Col)
{
  return (*((Handle_Geom_Transformation*)nativeHandle))->Value(Row, Col);
}

 void OCGeom_Transformation::Invert()
{
  (*((Handle_Geom_Transformation*)nativeHandle))->Invert();
}

OCGeom_Transformation^ OCGeom_Transformation::Inverted()
{
  Handle(Geom_Transformation) tmp = (*((Handle_Geom_Transformation*)nativeHandle))->Inverted();
  return gcnew OCGeom_Transformation(&tmp);
}

OCGeom_Transformation^ OCGeom_Transformation::Multiplied(OCNaroWrappers::OCGeom_Transformation^ Other)
{
  Handle(Geom_Transformation) tmp = (*((Handle_Geom_Transformation*)nativeHandle))->Multiplied(*((Handle_Geom_Transformation*)Other->Handle));
  return gcnew OCGeom_Transformation(&tmp);
}

 void OCGeom_Transformation::Multiply(OCNaroWrappers::OCGeom_Transformation^ Other)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->Multiply(*((Handle_Geom_Transformation*)Other->Handle));
}

 void OCGeom_Transformation::Power(Standard_Integer N)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->Power(N);
}

OCGeom_Transformation^ OCGeom_Transformation::Powered(Standard_Integer N)
{
  Handle(Geom_Transformation) tmp = (*((Handle_Geom_Transformation*)nativeHandle))->Powered(N);
  return gcnew OCGeom_Transformation(&tmp);
}

 void OCGeom_Transformation::PreMultiply(OCNaroWrappers::OCGeom_Transformation^ Other)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->PreMultiply(*((Handle_Geom_Transformation*)Other->Handle));
}

 void OCGeom_Transformation::Transforms(Standard_Real& X, Standard_Real& Y, Standard_Real& Z)
{
  (*((Handle_Geom_Transformation*)nativeHandle))->Transforms(X, Y, Z);
}

OCGeom_Transformation^ OCGeom_Transformation::Copy()
{
  Handle(Geom_Transformation) tmp = (*((Handle_Geom_Transformation*)nativeHandle))->Copy();
  return gcnew OCGeom_Transformation(&tmp);
}


