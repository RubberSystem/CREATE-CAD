// File generated by CPPExt (Transient)
//
#ifndef _Geom_Plane_OCWrappers_HeaderFile
#define _Geom_Plane_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_Plane.hxx>
#include "../Converter.h"

#include "Geom_ElementarySurface.h"



namespace OCNaroWrappers
{

ref class OCgp_Ax3;
ref class OCgp_Pln;
ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Trsf;
ref class OCgp_GTrsf2d;
ref class OCGeom_Curve;
ref class OCgp_Vec;
ref class OCGeom_Geometry;


//! Describes a plane in 3D space. <br>
//! A plane is positioned in space by a coordinate system <br>
//! (a gp_Ax3 object) such that the plane is defined by <br>
//! the origin, "X Direction" and "Y Direction" of this <br>
//! coordinate system. <br>
//! This coordinate system is the "local coordinate <br>
//! system" of the plane. The following apply: <br>
//! - Its "X Direction" and "Y Direction" are respectively <br>
//!   the u and v parametric directions of the plane. <br>
//! - Its origin is the origin of the u and v parameters <br>
//!   (also called the "origin" of the plane). <br>
//! - Its "main Direction" is a vector normal to the plane. <br>
//!   This normal vector gives the orientation of the <br>
//!   plane only if the local coordinate system is "direct". <br>
//!   (The orientation of the plane is always defined by <br>
//!   the "X Direction" and the "Y Direction" of its local <br>
//!   coordinate system.) <br>
//!   The parametric equation of the plane is: <br>
//! P(u, v) = O + u*XDir + v*YDir <br>
//! where O, XDir and YDir are respectively the <br>
//! origin, the "X Direction" and the "Y Direction" of the <br>
//! local coordinate system of the plane. <br>
//! The parametric range of the two parameters u and v <br>
//! is ] -infinity, +infinity [. <br>
public ref class OCGeom_Plane : OCGeom_ElementarySurface {

protected:
  // dummy constructor;
  OCGeom_Plane(OCDummy^) : OCGeom_ElementarySurface((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_Plane(Handle(Geom_Plane)* nativeHandle);

// Methods PUBLIC


//!  Creates a plane located in 3D space with an axis placement <br>
//!  three axis.  The "ZDirection" of "A3" is the direction normal <br>
//!  to the plane.  The "Location" point of "A3" is the origin of <br>
//!  the plane. The "XDirection" and "YDirection" of "A3" define <br>
//!  the directions of the U isoparametric and V isoparametric <br>
//!  curves. <br>
OCGeom_Plane(OCNaroWrappers::OCgp_Ax3^ A3);


//!  Creates a plane from a non transient plane from package gp. <br>
OCGeom_Plane(OCNaroWrappers::OCgp_Pln^ Pl);


//!  P is the "Location" point or origin of the plane. <br>
//!  V is the direction normal to the plane. <br>
OCGeom_Plane(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V);


//!  Creates a plane from its cartesian equation : <br>
//!  Ax + By + Cz + D = 0.0 <br>
//!  Raised if Sqrt (A*A + B*B + C*C) <= Resolution from gp <br>
OCGeom_Plane(Standard_Real A, Standard_Real B, Standard_Real C, Standard_Real D);


//!  Set <me> so that <me> has the same geometric properties as Pl. <br>
 /*instead*/  void SetPln(OCNaroWrappers::OCgp_Pln^ Pl) ;

//! Converts this plane into a gp_Pln plane. <br>
 /*instead*/  OCgp_Pln^ Pln() ;


//! Changes the orientation of this plane in the u (or v) <br>
//! parametric direction. The bounds of the plane are not <br>
//! changed but the given parametric direction is <br>
//! reversed. Hence the orientation of the surface is reversed. <br>
virtual /*instead*/  void UReverse() override;

//! Computes the u  parameter on the modified <br>
//! plane, produced when reversing the u <br>
//! parametric of this plane, for any point of u parameter U  on this plane. <br>
//! In the case of a plane, these methods return - -U. <br>
 /*instead*/  Standard_Real UReversedParameter(Standard_Real U) ;


//! Changes the orientation of this plane in the u (or v) <br>
//! parametric direction. The bounds of the plane are not <br>
//! changed but the given parametric direction is <br>
//! reversed. Hence the orientation of the surface is reversed. <br>
virtual /*instead*/  void VReverse() override;

//! Computes the v parameter on the modified <br>
//! plane, produced when reversing the  v <br>
//! parametric of this plane, for any point of v parameter V on this plane. <br>
//! In the case of a plane, these methods return -V. <br>
 /*instead*/  Standard_Real VReversedParameter(Standard_Real V) ;

//! Computes the  parameters on the  transformed  surface for <br>
//!          the transform of the point of parameters U,V on <me>. <br>
//!          me->Transformed(T)->Value(U',V') <br>
//!          is the same point as <br>
//!          me->Value(U,V).Transformed(T) <br>
//!          Where U',V' are the new values of U,V after calling <br>
//!          me->TranformParameters(U,V,T) <br>
//!          This methods multiplies U and V by T.ScaleFactor() <br>
virtual /*instead*/  void TransformParameters(Standard_Real& U, Standard_Real& V, OCNaroWrappers::OCgp_Trsf^ T) override;

//! Returns a 2d transformation  used to find the  new <br>
//!          parameters of a point on the transformed surface. <br>
//!          me->Transformed(T)->Value(U',V') <br>
//!          is the same point as <br>
//!          me->Value(U,V).Transformed(T) <br>
//!          Where U',V' are  obtained by transforming U,V with <br>
//!          th 2d transformation returned by <br>
//!          me->ParametricTransformation(T) <br>
//!          This  methods  returns  a scale  centered  on  the <br>
//!          origin with T.ScaleFactor <br>
virtual /*instead*/  OCgp_GTrsf2d^ ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T) override;

//! Returns the parametric bounds U1, U2, V1 and V2 of this plane. <br>
//! Because a plane is an infinite surface, the following is always true: <br>
//! - U1 = V1 =   Standard_Real::RealFirst() <br>
//! - U2 = V2 =   Standard_Real::RealLast(). <br>
 /*instead*/  void Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2) ;


//!  Computes the normalized coefficients of the plane's <br>
//!  cartesian equation : Ax + By + Cz + D = 0.0 <br>
 /*instead*/  void Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& D) ;

//! return False <br>
 /*instead*/  System::Boolean IsUClosed() ;

//! return False <br>
 /*instead*/  System::Boolean IsVClosed() ;

//! return False. <br>
 /*instead*/  System::Boolean IsUPeriodic() ;

//! return False. <br>
 /*instead*/  System::Boolean IsVPeriodic() ;


//!  Computes the U isoparametric curve. <br>
//!  This is a Line parallel to the YAxis of the plane. <br>
 /*instead*/  OCGeom_Curve^ UIso(Standard_Real U) ;


//!  Computes the V isoparametric curve. <br>
//!  This is a Line parallel to the XAxis of the plane. <br>
 /*instead*/  OCGeom_Curve^ VIso(Standard_Real V) ;


//!  Computes the point P (U, V) on <me>. <br>
//!  P = O + U * XDir + V * YDir. <br>
//!  where O is the "Location" point of the plane, XDir the <br>
//!  "XDirection" and YDir the "YDirection" of the plane's local <br>
//!  coordinate system. <br>
 /*instead*/  void D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Computes the current point and the first derivatives in the <br>
//!  directions U and V. <br>
 /*instead*/  void D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V) ;


//!  Computes the current point, the first and the second <br>
//!  derivatives in the directions U and V. <br>
 /*instead*/  void D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV) ;


//!  Computes the current point, the first,the second and the <br>
//!  third derivatives in the directions U and V. <br>
 /*instead*/  void D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV) ;


//!  Computes the derivative of order Nu in the direction u <br>
//!  and Nv in the direction v. <br>//! Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0. <br>
 /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv) ;

//! Applies the transformation T to this plane. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Creates a new object which is a copy of this plane. <br>
 /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_Plane()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
