// File generated by CPPExt (CPP file)
//

#include "Geom_SphericalSurface.h"
#include "../Converter.h"
#include "../gp/gp_Ax3.h"
#include "../gp/gp_Sphere.h"
#include "Geom_Curve.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Trsf.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_SphericalSurface::OCGeom_SphericalSurface(Handle(Geom_SphericalSurface)* nativeHandle) : OCGeom_ElementarySurface((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_SphericalSurface(*nativeHandle);
}

OCGeom_SphericalSurface::OCGeom_SphericalSurface(OCNaroWrappers::OCgp_Ax3^ A3, Standard_Real Radius) : OCGeom_ElementarySurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_SphericalSurface(new Geom_SphericalSurface(*((gp_Ax3*)A3->Handle), Radius));
}

OCGeom_SphericalSurface::OCGeom_SphericalSurface(OCNaroWrappers::OCgp_Sphere^ S) : OCGeom_ElementarySurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_SphericalSurface(new Geom_SphericalSurface(*((gp_Sphere*)S->Handle)));
}

 void OCGeom_SphericalSurface::SetRadius(Standard_Real R)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->SetRadius(R);
}

 void OCGeom_SphericalSurface::SetSphere(OCNaroWrappers::OCgp_Sphere^ S)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->SetSphere(*((gp_Sphere*)S->Handle));
}

OCgp_Sphere^ OCGeom_SphericalSurface::Sphere()
{
  gp_Sphere* tmp = new gp_Sphere();
  *tmp = (*((Handle_Geom_SphericalSurface*)nativeHandle))->Sphere();
  return gcnew OCgp_Sphere(tmp);
}

 Standard_Real OCGeom_SphericalSurface::UReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_SphericalSurface*)nativeHandle))->UReversedParameter(U);
}

 Standard_Real OCGeom_SphericalSurface::VReversedParameter(Standard_Real V)
{
  return (*((Handle_Geom_SphericalSurface*)nativeHandle))->VReversedParameter(V);
}

 Standard_Real OCGeom_SphericalSurface::Area()
{
  return (*((Handle_Geom_SphericalSurface*)nativeHandle))->Area();
}

 void OCGeom_SphericalSurface::Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->Bounds(U1, U2, V1, V2);
}

 void OCGeom_SphericalSurface::Coefficients(Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->Coefficients(A1, A2, A3, B1, B2, B3, C1, C2, C3, D);
}

 Standard_Real OCGeom_SphericalSurface::Radius()
{
  return (*((Handle_Geom_SphericalSurface*)nativeHandle))->Radius();
}

 Standard_Real OCGeom_SphericalSurface::Volume()
{
  return (*((Handle_Geom_SphericalSurface*)nativeHandle))->Volume();
}

 System::Boolean OCGeom_SphericalSurface::IsUClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_SphericalSurface*)nativeHandle))->IsUClosed());
}

 System::Boolean OCGeom_SphericalSurface::IsVClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_SphericalSurface*)nativeHandle))->IsVClosed());
}

 System::Boolean OCGeom_SphericalSurface::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_SphericalSurface*)nativeHandle))->IsUPeriodic());
}

 System::Boolean OCGeom_SphericalSurface::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_SphericalSurface*)nativeHandle))->IsVPeriodic());
}

OCGeom_Curve^ OCGeom_SphericalSurface::UIso(Standard_Real U)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_SphericalSurface*)nativeHandle))->UIso(U);
  return gcnew OCGeom_Curve(&tmp);
}

OCGeom_Curve^ OCGeom_SphericalSurface::VIso(Standard_Real V)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_SphericalSurface*)nativeHandle))->VIso(V);
  return gcnew OCGeom_Curve(&tmp);
}

 void OCGeom_SphericalSurface::D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->D0(U, V, *((gp_Pnt*)P->Handle));
}

 void OCGeom_SphericalSurface::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeom_SphericalSurface::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeom_SphericalSurface::D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->D3(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeom_SphericalSurface::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_SphericalSurface*)nativeHandle))->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeom_SphericalSurface::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_SphericalSurface*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

OCGeom_Geometry^ OCGeom_SphericalSurface::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_SphericalSurface*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}


