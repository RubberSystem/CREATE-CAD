// File generated by CPPExt (CPP file)
//

#include "Geom_RectangularTrimmedSurface.h"
#include "../Converter.h"
#include "Geom_Surface.h"
#include "Geom_Curve.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_GTrsf2d.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_RectangularTrimmedSurface::OCGeom_RectangularTrimmedSurface(Handle(Geom_RectangularTrimmedSurface)* nativeHandle) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_RectangularTrimmedSurface(*nativeHandle);
}

OCGeom_RectangularTrimmedSurface::OCGeom_RectangularTrimmedSurface(OCNaroWrappers::OCGeom_Surface^ S, Standard_Real U1, Standard_Real U2, Standard_Real V1, Standard_Real V2, System::Boolean USense, System::Boolean VSense) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_RectangularTrimmedSurface(new Geom_RectangularTrimmedSurface(*((Handle_Geom_Surface*)S->Handle), U1, U2, V1, V2, OCConverter::BooleanToStandardBoolean(USense), OCConverter::BooleanToStandardBoolean(VSense)));
}

OCGeom_RectangularTrimmedSurface::OCGeom_RectangularTrimmedSurface(OCNaroWrappers::OCGeom_Surface^ S, Standard_Real Param1, Standard_Real Param2, System::Boolean UTrim, System::Boolean Sense) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_RectangularTrimmedSurface(new Geom_RectangularTrimmedSurface(*((Handle_Geom_Surface*)S->Handle), Param1, Param2, OCConverter::BooleanToStandardBoolean(UTrim), OCConverter::BooleanToStandardBoolean(Sense)));
}

 void OCGeom_RectangularTrimmedSurface::SetTrim(Standard_Real U1, Standard_Real U2, Standard_Real V1, Standard_Real V2, System::Boolean USense, System::Boolean VSense)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->SetTrim(U1, U2, V1, V2, OCConverter::BooleanToStandardBoolean(USense), OCConverter::BooleanToStandardBoolean(VSense));
}

 void OCGeom_RectangularTrimmedSurface::SetTrim(Standard_Real Param1, Standard_Real Param2, System::Boolean UTrim, System::Boolean Sense)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->SetTrim(Param1, Param2, OCConverter::BooleanToStandardBoolean(UTrim), OCConverter::BooleanToStandardBoolean(Sense));
}

OCGeom_Surface^ OCGeom_RectangularTrimmedSurface::BasisSurface()
{
  Handle(Geom_Surface) tmp = (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->BasisSurface();
  return gcnew OCGeom_Surface(&tmp);
}

 void OCGeom_RectangularTrimmedSurface::UReverse()
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->UReverse();
}

 Standard_Real OCGeom_RectangularTrimmedSurface::UReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->UReversedParameter(U);
}

 void OCGeom_RectangularTrimmedSurface::VReverse()
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->VReverse();
}

 Standard_Real OCGeom_RectangularTrimmedSurface::VReversedParameter(Standard_Real V)
{
  return (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->VReversedParameter(V);
}

 void OCGeom_RectangularTrimmedSurface::Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->Bounds(U1, U2, V1, V2);
}

 OCGeomAbs_Shape OCGeom_RectangularTrimmedSurface::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->Continuity());
}

 System::Boolean OCGeom_RectangularTrimmedSurface::IsUClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->IsUClosed());
}

 System::Boolean OCGeom_RectangularTrimmedSurface::IsVClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->IsVClosed());
}

 System::Boolean OCGeom_RectangularTrimmedSurface::IsCNu(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->IsCNu(N));
}

 System::Boolean OCGeom_RectangularTrimmedSurface::IsCNv(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->IsCNv(N));
}

 System::Boolean OCGeom_RectangularTrimmedSurface::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->IsUPeriodic());
}

 Standard_Real OCGeom_RectangularTrimmedSurface::UPeriod()
{
  return (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->UPeriod();
}

 System::Boolean OCGeom_RectangularTrimmedSurface::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->IsVPeriodic());
}

 Standard_Real OCGeom_RectangularTrimmedSurface::VPeriod()
{
  return (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->VPeriod();
}

OCGeom_Curve^ OCGeom_RectangularTrimmedSurface::UIso(Standard_Real U)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->UIso(U);
  return gcnew OCGeom_Curve(&tmp);
}

OCGeom_Curve^ OCGeom_RectangularTrimmedSurface::VIso(Standard_Real V)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->VIso(V);
  return gcnew OCGeom_Curve(&tmp);
}

 void OCGeom_RectangularTrimmedSurface::D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->D0(U, V, *((gp_Pnt*)P->Handle));
}

 void OCGeom_RectangularTrimmedSurface::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeom_RectangularTrimmedSurface::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeom_RectangularTrimmedSurface::D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->D3(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeom_RectangularTrimmedSurface::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeom_RectangularTrimmedSurface::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

 void OCGeom_RectangularTrimmedSurface::TransformParameters(Standard_Real& U, Standard_Real& V, OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->TransformParameters(U, V, *((gp_Trsf*)T->Handle));
}

OCgp_GTrsf2d^ OCGeom_RectangularTrimmedSurface::ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_GTrsf2d* tmp = new gp_GTrsf2d();
  *tmp = (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->ParametricTransformation(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_GTrsf2d(tmp);
}

OCGeom_Geometry^ OCGeom_RectangularTrimmedSurface::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_RectangularTrimmedSurface*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}


