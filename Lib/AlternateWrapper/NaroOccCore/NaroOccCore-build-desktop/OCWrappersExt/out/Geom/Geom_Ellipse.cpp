// File generated by CPPExt (CPP file)
//

#include "Geom_Ellipse.h"
#include "../Converter.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Ax2.h"
#include "../gp/gp_Ax1.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Trsf.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_Ellipse::OCGeom_Ellipse(Handle(Geom_Ellipse)* nativeHandle) : OCGeom_Conic((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_Ellipse(*nativeHandle);
}

OCGeom_Ellipse::OCGeom_Ellipse(OCNaroWrappers::OCgp_Elips^ E) : OCGeom_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Ellipse(new Geom_Ellipse(*((gp_Elips*)E->Handle)));
}

OCGeom_Ellipse::OCGeom_Ellipse(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real MajorRadius, Standard_Real MinorRadius) : OCGeom_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Ellipse(new Geom_Ellipse(*((gp_Ax2*)A2->Handle), MajorRadius, MinorRadius));
}

 void OCGeom_Ellipse::SetElips(OCNaroWrappers::OCgp_Elips^ E)
{
  (*((Handle_Geom_Ellipse*)nativeHandle))->SetElips(*((gp_Elips*)E->Handle));
}

 void OCGeom_Ellipse::SetMajorRadius(Standard_Real MajorRadius)
{
  (*((Handle_Geom_Ellipse*)nativeHandle))->SetMajorRadius(MajorRadius);
}

 void OCGeom_Ellipse::SetMinorRadius(Standard_Real MinorRadius)
{
  (*((Handle_Geom_Ellipse*)nativeHandle))->SetMinorRadius(MinorRadius);
}

OCgp_Elips^ OCGeom_Ellipse::Elips()
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = (*((Handle_Geom_Ellipse*)nativeHandle))->Elips();
  return gcnew OCgp_Elips(tmp);
}

 Standard_Real OCGeom_Ellipse::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_Ellipse*)nativeHandle))->ReversedParameter(U);
}

OCgp_Ax1^ OCGeom_Ellipse::Directrix1()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = (*((Handle_Geom_Ellipse*)nativeHandle))->Directrix1();
  return gcnew OCgp_Ax1(tmp);
}

OCgp_Ax1^ OCGeom_Ellipse::Directrix2()
{
  gp_Ax1* tmp = new gp_Ax1();
  *tmp = (*((Handle_Geom_Ellipse*)nativeHandle))->Directrix2();
  return gcnew OCgp_Ax1(tmp);
}

 Standard_Real OCGeom_Ellipse::Eccentricity()
{
  return (*((Handle_Geom_Ellipse*)nativeHandle))->Eccentricity();
}

 Standard_Real OCGeom_Ellipse::Focal()
{
  return (*((Handle_Geom_Ellipse*)nativeHandle))->Focal();
}

OCgp_Pnt^ OCGeom_Ellipse::Focus1()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Geom_Ellipse*)nativeHandle))->Focus1();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCGeom_Ellipse::Focus2()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Geom_Ellipse*)nativeHandle))->Focus2();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCGeom_Ellipse::MajorRadius()
{
  return (*((Handle_Geom_Ellipse*)nativeHandle))->MajorRadius();
}

 Standard_Real OCGeom_Ellipse::MinorRadius()
{
  return (*((Handle_Geom_Ellipse*)nativeHandle))->MinorRadius();
}

 Standard_Real OCGeom_Ellipse::Parameter()
{
  return (*((Handle_Geom_Ellipse*)nativeHandle))->Parameter();
}

 Standard_Real OCGeom_Ellipse::FirstParameter()
{
  return (*((Handle_Geom_Ellipse*)nativeHandle))->FirstParameter();
}

 Standard_Real OCGeom_Ellipse::LastParameter()
{
  return (*((Handle_Geom_Ellipse*)nativeHandle))->LastParameter();
}

 System::Boolean OCGeom_Ellipse::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Ellipse*)nativeHandle))->IsClosed());
}

 System::Boolean OCGeom_Ellipse::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Ellipse*)nativeHandle))->IsPeriodic());
}

 void OCGeom_Ellipse::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_Ellipse*)nativeHandle))->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCGeom_Ellipse::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1)
{
  (*((Handle_Geom_Ellipse*)nativeHandle))->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle));
}

 void OCGeom_Ellipse::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  (*((Handle_Geom_Ellipse*)nativeHandle))->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCGeom_Ellipse::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  (*((Handle_Geom_Ellipse*)nativeHandle))->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCGeom_Ellipse::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_Ellipse*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeom_Ellipse::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_Ellipse*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

OCGeom_Geometry^ OCGeom_Ellipse::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_Ellipse*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}


