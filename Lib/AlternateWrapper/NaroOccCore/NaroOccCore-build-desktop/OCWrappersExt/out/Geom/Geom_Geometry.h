// File generated by CPPExt (Transient)
//
#ifndef _Geom_Geometry_OCWrappers_HeaderFile
#define _Geom_Geometry_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_Geometry.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCgp_Pnt;
ref class OCgp_Ax1;
ref class OCgp_Ax2;
ref class OCgp_Vec;
ref class OCgp_Trsf;


//! The abstract class Geometry for 3D space is the root <br>
//! class of all geometric objects from the Geom <br>
//! package. It describes the common behavior of these objects when: <br>
//! - applying geometric transformations to objects, and <br>
//! - constructing objects by geometric transformation (including copying). <br>
//! Warning <br>
//! Only transformations which do not modify the nature <br>
//! of the geometry can be applied to Geom objects: this <br>
//! is the case with translations, rotations, symmetries <br>
//! and scales; this is also the case with gp_Trsf <br>
//! composite transformations which are used to define <br>
//! the geometric transformations applied using the <br>
//! Transform or Transformed functions. <br>
//! Note: Geometry defines the "prototype" of the <br>
//! abstract method Transform which is defined for each <br>
//! concrete type of derived object. All other <br>
//! transformations are implemented using the Transform method. <br>
public ref class OCGeom_Geometry : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCGeom_Geometry(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_Geometry(Handle(Geom_Geometry)* nativeHandle);

// Methods PUBLIC


//!  Performs the symmetrical transformation of a Geometry <br>
//!  with respect to the point P which is the center of the <br>
//!  symmetry. <br>
 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Performs the symmetrical transformation of a Geometry <br>
//!  with respect to an axis placement which is the axis of the <br>
//!  symmetry. <br>
 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Performs the symmetrical transformation of a Geometry <br>
//!  with respect to a plane. The axis placement A2 locates <br>
//!  the plane of the symmetry : (Location, XDirection, YDirection). <br>
 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Rotates a Geometry. A1 is the axis of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Scales a Geometry. S is the scaling value. <br>
 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Translates a Geometry.  V is the vector of the tanslation. <br>
 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Translates a Geometry from the point P1 to the point P2. <br>
 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;


 /*instead*/  OCGeom_Geometry^ Mirrored(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  OCGeom_Geometry^ Mirrored(OCNaroWrappers::OCgp_Ax1^ A1) ;


 /*instead*/  OCGeom_Geometry^ Mirrored(OCNaroWrappers::OCgp_Ax2^ A2) ;


 /*instead*/  OCGeom_Geometry^ Rotated(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


 /*instead*/  OCGeom_Geometry^ Scaled(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


 /*instead*/  OCGeom_Geometry^ Transformed(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  OCGeom_Geometry^ Translated(OCNaroWrappers::OCgp_Vec^ V) ;


 /*instead*/  OCGeom_Geometry^ Translated(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

~OCGeom_Geometry()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
