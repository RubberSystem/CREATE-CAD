// File generated by CPPExt (CPP file)
//

#include "Geom_BezierSurface.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HArray2OfPnt.h"
#include "../TColStd/TColStd_HArray2OfReal.h"
#include "../TColgp/TColgp_Array2OfPnt.h"
#include "../TColStd/TColStd_Array2OfReal.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "Geom_Curve.h"
#include "../gp/gp_Trsf.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_BezierSurface::OCGeom_BezierSurface(Handle(Geom_BezierSurface)* nativeHandle) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_BezierSurface(*nativeHandle);
}

OCGeom_BezierSurface::OCGeom_BezierSurface(OCNaroWrappers::OCTColgp_Array2OfPnt^ SurfacePoles) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_BezierSurface(new Geom_BezierSurface(*((TColgp_Array2OfPnt*)SurfacePoles->Handle)));
}

OCGeom_BezierSurface::OCGeom_BezierSurface(OCNaroWrappers::OCTColgp_Array2OfPnt^ SurfacePoles, OCNaroWrappers::OCTColStd_Array2OfReal^ PoleWeights) : OCGeom_BoundedSurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_BezierSurface(new Geom_BezierSurface(*((TColgp_Array2OfPnt*)SurfacePoles->Handle), *((TColStd_Array2OfReal*)PoleWeights->Handle)));
}

 void OCGeom_BezierSurface::ExchangeUV()
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->ExchangeUV();
}

 void OCGeom_BezierSurface::Increase(Standard_Integer UDeg, Standard_Integer VDeg)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->Increase(UDeg, VDeg);
}

 void OCGeom_BezierSurface::InsertPoleColAfter(Standard_Integer VIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->InsertPoleColAfter(VIndex, *((TColgp_Array1OfPnt*)CPoles->Handle));
}

 void OCGeom_BezierSurface::InsertPoleColAfter(Standard_Integer VIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->InsertPoleColAfter(VIndex, *((TColgp_Array1OfPnt*)CPoles->Handle), *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BezierSurface::InsertPoleColBefore(Standard_Integer VIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->InsertPoleColBefore(VIndex, *((TColgp_Array1OfPnt*)CPoles->Handle));
}

 void OCGeom_BezierSurface::InsertPoleColBefore(Standard_Integer VIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->InsertPoleColBefore(VIndex, *((TColgp_Array1OfPnt*)CPoles->Handle), *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BezierSurface::InsertPoleRowAfter(Standard_Integer UIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->InsertPoleRowAfter(UIndex, *((TColgp_Array1OfPnt*)CPoles->Handle));
}

 void OCGeom_BezierSurface::InsertPoleRowAfter(Standard_Integer UIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->InsertPoleRowAfter(UIndex, *((TColgp_Array1OfPnt*)CPoles->Handle), *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BezierSurface::InsertPoleRowBefore(Standard_Integer UIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->InsertPoleRowBefore(UIndex, *((TColgp_Array1OfPnt*)CPoles->Handle));
}

 void OCGeom_BezierSurface::InsertPoleRowBefore(Standard_Integer UIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->InsertPoleRowBefore(UIndex, *((TColgp_Array1OfPnt*)CPoles->Handle), *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BezierSurface::RemovePoleCol(Standard_Integer VIndex)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->RemovePoleCol(VIndex);
}

 void OCGeom_BezierSurface::RemovePoleRow(Standard_Integer UIndex)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->RemovePoleRow(UIndex);
}

 void OCGeom_BezierSurface::Segment(Standard_Real U1, Standard_Real U2, Standard_Real V1, Standard_Real V2)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->Segment(U1, U2, V1, V2);
}

 void OCGeom_BezierSurface::SetPole(Standard_Integer UIndex, Standard_Integer VIndex, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetPole(UIndex, VIndex, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BezierSurface::SetPole(Standard_Integer UIndex, Standard_Integer VIndex, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Weight)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetPole(UIndex, VIndex, *((gp_Pnt*)P->Handle), Weight);
}

 void OCGeom_BezierSurface::SetPoleCol(Standard_Integer VIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetPoleCol(VIndex, *((TColgp_Array1OfPnt*)CPoles->Handle));
}

 void OCGeom_BezierSurface::SetPoleCol(Standard_Integer VIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetPoleCol(VIndex, *((TColgp_Array1OfPnt*)CPoles->Handle), *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BezierSurface::SetPoleRow(Standard_Integer UIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetPoleRow(UIndex, *((TColgp_Array1OfPnt*)CPoles->Handle));
}

 void OCGeom_BezierSurface::SetPoleRow(Standard_Integer UIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ CPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetPoleRow(UIndex, *((TColgp_Array1OfPnt*)CPoles->Handle), *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BezierSurface::SetWeight(Standard_Integer UIndex, Standard_Integer VIndex, Standard_Real Weight)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetWeight(UIndex, VIndex, Weight);
}

 void OCGeom_BezierSurface::SetWeightCol(Standard_Integer VIndex, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetWeightCol(VIndex, *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BezierSurface::SetWeightRow(Standard_Integer UIndex, OCNaroWrappers::OCTColStd_Array1OfReal^ CPoleWeights)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->SetWeightRow(UIndex, *((TColStd_Array1OfReal*)CPoleWeights->Handle));
}

 void OCGeom_BezierSurface::UReverse()
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->UReverse();
}

 Standard_Real OCGeom_BezierSurface::UReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_BezierSurface*)nativeHandle))->UReversedParameter(U);
}

 void OCGeom_BezierSurface::VReverse()
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->VReverse();
}

 Standard_Real OCGeom_BezierSurface::VReversedParameter(Standard_Real V)
{
  return (*((Handle_Geom_BezierSurface*)nativeHandle))->VReversedParameter(V);
}

 void OCGeom_BezierSurface::Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->Bounds(U1, U2, V1, V2);
}

 OCGeomAbs_Shape OCGeom_BezierSurface::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Geom_BezierSurface*)nativeHandle))->Continuity());
}

 void OCGeom_BezierSurface::D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->D0(U, V, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BezierSurface::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeom_BezierSurface::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeom_BezierSurface::D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->D3(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeom_BezierSurface::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_BezierSurface*)nativeHandle))->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Integer OCGeom_BezierSurface::NbUPoles()
{
  return (*((Handle_Geom_BezierSurface*)nativeHandle))->NbUPoles();
}

 Standard_Integer OCGeom_BezierSurface::NbVPoles()
{
  return (*((Handle_Geom_BezierSurface*)nativeHandle))->NbVPoles();
}

OCgp_Pnt^ OCGeom_BezierSurface::Pole(Standard_Integer UIndex, Standard_Integer VIndex)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Geom_BezierSurface*)nativeHandle))->Pole(UIndex, VIndex);
  return gcnew OCgp_Pnt(tmp);
}

 void OCGeom_BezierSurface::Poles(OCNaroWrappers::OCTColgp_Array2OfPnt^ P)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->Poles(*((TColgp_Array2OfPnt*)P->Handle));
}

 Standard_Integer OCGeom_BezierSurface::UDegree()
{
  return (*((Handle_Geom_BezierSurface*)nativeHandle))->UDegree();
}

OCGeom_Curve^ OCGeom_BezierSurface::UIso(Standard_Real U)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_BezierSurface*)nativeHandle))->UIso(U);
  return gcnew OCGeom_Curve(&tmp);
}

 Standard_Integer OCGeom_BezierSurface::VDegree()
{
  return (*((Handle_Geom_BezierSurface*)nativeHandle))->VDegree();
}

OCGeom_Curve^ OCGeom_BezierSurface::VIso(Standard_Real V)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_BezierSurface*)nativeHandle))->VIso(V);
  return gcnew OCGeom_Curve(&tmp);
}

 Standard_Real OCGeom_BezierSurface::Weight(Standard_Integer UIndex, Standard_Integer VIndex)
{
  return (*((Handle_Geom_BezierSurface*)nativeHandle))->Weight(UIndex, VIndex);
}

 void OCGeom_BezierSurface::Weights(OCNaroWrappers::OCTColStd_Array2OfReal^ W)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->Weights(*((TColStd_Array2OfReal*)W->Handle));
}

 System::Boolean OCGeom_BezierSurface::IsUClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierSurface*)nativeHandle))->IsUClosed());
}

 System::Boolean OCGeom_BezierSurface::IsVClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierSurface*)nativeHandle))->IsVClosed());
}

 System::Boolean OCGeom_BezierSurface::IsCNu(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierSurface*)nativeHandle))->IsCNu(N));
}

 System::Boolean OCGeom_BezierSurface::IsCNv(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierSurface*)nativeHandle))->IsCNv(N));
}

 System::Boolean OCGeom_BezierSurface::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierSurface*)nativeHandle))->IsUPeriodic());
}

 System::Boolean OCGeom_BezierSurface::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierSurface*)nativeHandle))->IsVPeriodic());
}

 System::Boolean OCGeom_BezierSurface::IsURational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierSurface*)nativeHandle))->IsURational());
}

 System::Boolean OCGeom_BezierSurface::IsVRational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierSurface*)nativeHandle))->IsVRational());
}

 void OCGeom_BezierSurface::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

 Standard_Integer OCGeom_BezierSurface::MaxDegree()
{
  return Geom_BezierSurface::MaxDegree();
}

 void OCGeom_BezierSurface::Resolution(Standard_Real Tolerance3D, Standard_Real& UTolerance, Standard_Real& VTolerance)
{
  (*((Handle_Geom_BezierSurface*)nativeHandle))->Resolution(Tolerance3D, UTolerance, VTolerance);
}

OCGeom_Geometry^ OCGeom_BezierSurface::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_BezierSurface*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}


