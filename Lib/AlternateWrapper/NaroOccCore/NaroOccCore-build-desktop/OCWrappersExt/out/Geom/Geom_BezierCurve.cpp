// File generated by CPPExt (CPP file)
//

#include "Geom_BezierCurve.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HArray1OfPnt.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Trsf.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_BezierCurve::OCGeom_BezierCurve(Handle(Geom_BezierCurve)* nativeHandle) : OCGeom_BoundedCurve((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_BezierCurve(*nativeHandle);
}

OCGeom_BezierCurve::OCGeom_BezierCurve(OCNaroWrappers::OCTColgp_Array1OfPnt^ CurvePoles) : OCGeom_BoundedCurve((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_BezierCurve(new Geom_BezierCurve(*((TColgp_Array1OfPnt*)CurvePoles->Handle)));
}

OCGeom_BezierCurve::OCGeom_BezierCurve(OCNaroWrappers::OCTColgp_Array1OfPnt^ CurvePoles, OCNaroWrappers::OCTColStd_Array1OfReal^ PoleWeights) : OCGeom_BoundedCurve((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_BezierCurve(new Geom_BezierCurve(*((TColgp_Array1OfPnt*)CurvePoles->Handle), *((TColStd_Array1OfReal*)PoleWeights->Handle)));
}

 void OCGeom_BezierCurve::Increase(Standard_Integer Degree)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->Increase(Degree);
}

 void OCGeom_BezierCurve::InsertPoleAfter(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->InsertPoleAfter(Index, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BezierCurve::InsertPoleAfter(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Weight)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->InsertPoleAfter(Index, *((gp_Pnt*)P->Handle), Weight);
}

 void OCGeom_BezierCurve::InsertPoleBefore(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->InsertPoleBefore(Index, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BezierCurve::InsertPoleBefore(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Weight)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->InsertPoleBefore(Index, *((gp_Pnt*)P->Handle), Weight);
}

 void OCGeom_BezierCurve::RemovePole(Standard_Integer Index)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->RemovePole(Index);
}

 void OCGeom_BezierCurve::Reverse()
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->Reverse();
}

 Standard_Real OCGeom_BezierCurve::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_BezierCurve*)nativeHandle))->ReversedParameter(U);
}

 void OCGeom_BezierCurve::Segment(Standard_Real U1, Standard_Real U2)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->Segment(U1, U2);
}

 void OCGeom_BezierCurve::SetPole(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->SetPole(Index, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BezierCurve::SetPole(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Weight)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->SetPole(Index, *((gp_Pnt*)P->Handle), Weight);
}

 void OCGeom_BezierCurve::SetWeight(Standard_Integer Index, Standard_Real Weight)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->SetWeight(Index, Weight);
}

 System::Boolean OCGeom_BezierCurve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierCurve*)nativeHandle))->IsClosed());
}

 System::Boolean OCGeom_BezierCurve::IsCN(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierCurve*)nativeHandle))->IsCN(N));
}

 System::Boolean OCGeom_BezierCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierCurve*)nativeHandle))->IsPeriodic());
}

 System::Boolean OCGeom_BezierCurve::IsRational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_BezierCurve*)nativeHandle))->IsRational());
}

 OCGeomAbs_Shape OCGeom_BezierCurve::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Geom_BezierCurve*)nativeHandle))->Continuity());
}

 Standard_Integer OCGeom_BezierCurve::Degree()
{
  return (*((Handle_Geom_BezierCurve*)nativeHandle))->Degree();
}

 void OCGeom_BezierCurve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCGeom_BezierCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle));
}

 void OCGeom_BezierCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCGeom_BezierCurve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCGeom_BezierCurve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_BezierCurve*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

OCgp_Pnt^ OCGeom_BezierCurve::StartPoint()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Geom_BezierCurve*)nativeHandle))->StartPoint();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCGeom_BezierCurve::EndPoint()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Geom_BezierCurve*)nativeHandle))->EndPoint();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCGeom_BezierCurve::FirstParameter()
{
  return (*((Handle_Geom_BezierCurve*)nativeHandle))->FirstParameter();
}

 Standard_Real OCGeom_BezierCurve::LastParameter()
{
  return (*((Handle_Geom_BezierCurve*)nativeHandle))->LastParameter();
}

 Standard_Integer OCGeom_BezierCurve::NbPoles()
{
  return (*((Handle_Geom_BezierCurve*)nativeHandle))->NbPoles();
}

OCgp_Pnt^ OCGeom_BezierCurve::Pole(Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_Geom_BezierCurve*)nativeHandle))->Pole(Index);
  return gcnew OCgp_Pnt(tmp);
}

 void OCGeom_BezierCurve::Poles(OCNaroWrappers::OCTColgp_Array1OfPnt^ P)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->Poles(*((TColgp_Array1OfPnt*)P->Handle));
}

 Standard_Real OCGeom_BezierCurve::Weight(Standard_Integer Index)
{
  return (*((Handle_Geom_BezierCurve*)nativeHandle))->Weight(Index);
}

 void OCGeom_BezierCurve::Weights(OCNaroWrappers::OCTColStd_Array1OfReal^ W)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->Weights(*((TColStd_Array1OfReal*)W->Handle));
}

 void OCGeom_BezierCurve::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

 Standard_Integer OCGeom_BezierCurve::MaxDegree()
{
  return Geom_BezierCurve::MaxDegree();
}

 void OCGeom_BezierCurve::Resolution(Standard_Real Tolerance3D, Standard_Real& UTolerance)
{
  (*((Handle_Geom_BezierCurve*)nativeHandle))->Resolution(Tolerance3D, UTolerance);
}

OCGeom_Geometry^ OCGeom_BezierCurve::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_BezierCurve*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}


