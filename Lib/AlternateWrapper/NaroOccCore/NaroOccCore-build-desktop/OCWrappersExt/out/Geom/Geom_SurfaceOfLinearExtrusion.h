// File generated by CPPExt (Transient)
//
#ifndef _Geom_SurfaceOfLinearExtrusion_OCWrappers_HeaderFile
#define _Geom_SurfaceOfLinearExtrusion_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_SurfaceOfLinearExtrusion.hxx>
#include "../Converter.h"

#include "Geom_SweptSurface.h"



namespace OCNaroWrappers
{

ref class OCGeom_Curve;
ref class OCgp_Dir;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Trsf;
ref class OCgp_GTrsf2d;
ref class OCGeom_Geometry;


//! Describes a surface of linear extrusion ("extruded <br>
//! surface"), e.g. a generalized cylinder. Such a surface <br>
//! is obtained by sweeping a curve (called the "extruded <br>
//! curve" or "basis") in a given direction (referred to as <br>
//! the "direction of extrusion" and defined by a unit vector). <br>
//! The u parameter is along the extruded curve. The v <br>
//! parameter is along the direction of extrusion. <br>
//! The parameter range for the u parameter is defined <br>
//! by the reference curve. <br>
//! The parameter range for the v parameter is ] - <br>
//! infinity, + infinity [. <br>
//! The position of the curve gives the origin of the v parameter. <br>
//! The surface is "CN" in the v parametric direction. <br>
//! The form of a surface of linear extrusion is generally a <br>
//! ruled surface (GeomAbs_RuledForm). It can be: <br>
//! - a cylindrical surface, if the extruded curve is a circle, <br>
//!   or a trimmed circle, with an axis parallel to the <br>
//!   direction of extrusion (GeomAbs_CylindricalForm), or <br>
//! - a planar surface, if the extruded curve is a line <br>
//!   (GeomAbs_PlanarForm). <br>
//! Note: The surface of extrusion is built from a copy of <br>
//! the original basis curve, so the original curve is not <br>
//! modified when the surface is modified. <br>
//! Warning <br>
//! Degenerate surfaces are not detected. A degenerate <br>
//! surface is obtained, for example, when the extruded <br>
//! curve is a line and the direction of extrusion is parallel <br>
//! to that line. <br>
public ref class OCGeom_SurfaceOfLinearExtrusion : OCGeom_SweptSurface {

protected:
  // dummy constructor;
  OCGeom_SurfaceOfLinearExtrusion(OCDummy^) : OCGeom_SweptSurface((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_SurfaceOfLinearExtrusion(Handle(Geom_SurfaceOfLinearExtrusion)* nativeHandle);

// Methods PUBLIC


//!  V is the direction of extrusion. <br>
//!  C is the extruded curve. <br>
//!  The form of a SurfaceOfLinearExtrusion can be : <br>
//!  . ruled surface (RuledForm), <br>
//!  . a cylindrical surface if the extruded curve is a circle or <br>
//!    a trimmed circle (CylindricalForm), <br>
//!  . a plane surface if the extruded curve is a Line (PlanarForm). <br>
//!  Warnings : <br>
//!  Degenerated surface cases are not detected. For example if the <br>
//!  curve C is a line and V is parallel to the direction of this <br>
//!  line. <br>
OCGeom_SurfaceOfLinearExtrusion(OCNaroWrappers::OCGeom_Curve^ C, OCNaroWrappers::OCgp_Dir^ V);

//! Assigns V as the "direction of extrusion" for this <br>
//! surface of linear extrusion. <br>
 /*instead*/  void SetDirection(OCNaroWrappers::OCgp_Dir^ V) ;

//! Modifies this surface of linear extrusion by redefining <br>
//! its "basis curve" (the "extruded curve"). <br>
 /*instead*/  void SetBasisCurve(OCNaroWrappers::OCGeom_Curve^ C) ;

//!  Changes the orientation of this surface of linear <br>
//! extrusion in the u  parametric direction. The <br>
//! bounds of the surface are not changed, but the given <br>
//! parametric direction is reversed. Hence the <br>
//! orientation of the surface is reversed. <br>
//! In the case of a surface of linear extrusion: <br>
//! - UReverse reverses the basis curve, and <br>
//! - VReverse reverses the direction of linear extrusion. <br>
 /*instead*/  void UReverse() ;

//! Computes the u parameter on the modified <br>
//! surface, produced by reversing its u  parametric <br>
//! direction, for any point of u parameter U  on this surface of linear extrusion. <br>
//! In the case of an extruded surface: <br>
//! - UReverseParameter returns the reversed <br>
//!   parameter given by the function <br>
//!   ReversedParameter called with U on the basis   curve, <br>
 /*instead*/  Standard_Real UReversedParameter(Standard_Real U) ;

//! Changes the orientation of this surface of linear <br>
//! extrusion in the v parametric direction. The <br>
//! bounds of the surface are not changed, but the given <br>
//! parametric direction is reversed. Hence the <br>
//! orientation of the surface is reversed. <br>
//! In the case of a surface of linear extrusion: <br>
//! - UReverse reverses the basis curve, and <br>
//! - VReverse reverses the direction of linear extrusion. <br>
 /*instead*/  void VReverse() ;

//! Computes the v parameter on the modified <br>
//! surface, produced by reversing its u v parametric <br>
//! direction, for any point of v parameter V on this surface of linear extrusion. <br>
//! In the case of an extruded surface VReverse returns -V. <br>
 /*instead*/  Standard_Real VReversedParameter(Standard_Real V) ;

//! Returns the parametric bounds U1, U2, V1 and V2 of <br>
//! this surface of linear extrusion. <br>
//! A surface of linear extrusion is infinite in the v <br>
//! parametric direction, so: <br>
//!     - V1 = Standard_Real::RealFirst() <br>
//! - V2 = Standard_Real::RealLast(). <br>
 /*instead*/  void Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2) ;

//!  IsUClosed returns true if the "basis curve" of this <br>
//! surface of linear extrusion is closed. <br>
 /*instead*/  System::Boolean IsUClosed() ;

//! IsVClosed always returns false. <br>
 /*instead*/  System::Boolean IsVClosed() ;

//! IsCNu returns true if the degree of continuity for the <br>
//! "basis curve" of this surface of linear extrusion is at least N. <br>
//!  Raises RangeError if N < 0. <br>
 /*instead*/  System::Boolean IsCNu(Standard_Integer N) ;

//! IsCNv always returns true. <br>
 /*instead*/  System::Boolean IsCNv(Standard_Integer N) ;

//! IsUPeriodic returns true if the "basis curve" of this <br>
//! surface of linear extrusion is periodic. <br>
 /*instead*/  System::Boolean IsUPeriodic() ;

//! IsVPeriodic always returns false. <br>
 /*instead*/  System::Boolean IsVPeriodic() ;

//! Computes the U isoparametric curve of this surface <br>
//! of linear extrusion. This is the line parallel to the <br>
//! direction of extrusion, passing through the point of <br>
//! parameter U of the basis curve. <br>
 /*instead*/  OCGeom_Curve^ UIso(Standard_Real U) ;

//! Computes the V isoparametric curve of this surface <br>
//! of linear extrusion. This curve is obtained by <br>
//! translating the extruded curve in the direction of <br>
//! extrusion, with the magnitude V. <br>
 /*instead*/  OCGeom_Curve^ VIso(Standard_Real V) ;


//!  Computes the  point P (U, V) on the surface. <br>
//!  The parameter U is the parameter on the extruded curve. <br>
//!  The parametrization V is a linear parametrization, and <br>
//!  the direction of parametrization is the direction of <br>
//!  extrusion. If the point is on the extruded curve, V = 0.0 <br>
 /*instead*/  void D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Computes the current point and the first derivatives in the <br>
//!  directions U and V. <br>
//!  Raises UndefinedDerivative if the continuity of the surface is not C1. <br>
 /*instead*/  void D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V) ;

//!--- Purpose ; <br>
//!  Computes the current point, the first and the second derivatives <br>
//!  in the directions U and V. <br>
//!  Raises UndefinedDerivative if the continuity of the surface is not C2. <br>
 /*instead*/  void D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV) ;


//!  Computes the current point, the first,the second and the third <br>
//!  derivatives in the directions U and V. <br>
//!  Raises UndefinedDerivative if the continuity of the surface is not C3. <br>
 /*instead*/  void D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV) ;


//!  Computes the derivative of order Nu in the direction u <br>
//!  and Nv in the direction v. <br>
//!  Raises UndefinedDerivative if the continuity of the surface is not CNu in the u <br>
//!  direction and CNv in the v direction. <br>
//! Raises RangeError if Nu + Nv < 1 or Nu < 0 or Nv < 0. <br>
 /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv) ;

//! The following  functions  evaluates the  local <br>
//! derivatives on surface. Useful to manage discontinuities <br>
//! on the surface. <br>
//!           if    Side  =  1  ->  P  =  S( U+,V ) <br>
//!           if    Side  = -1  ->  P  =  S( U-,V ) <br>
//!           else  P  is betveen discontinuities <br>
//!           can be evaluated using methods  of <br>
//!           global evaluations    P  =  S( U ,V ) <br>
 /*instead*/  void LocalD0(Standard_Real U, Standard_Real V, Standard_Integer USide, OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void LocalD1(Standard_Real U, Standard_Real V, Standard_Integer USide, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V) ;


 /*instead*/  void LocalD2(Standard_Real U, Standard_Real V, Standard_Integer USide, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV) ;


 /*instead*/  void LocalD3(Standard_Real U, Standard_Real V, Standard_Integer USide, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV) ;


 /*instead*/  OCgp_Vec^ LocalDN(Standard_Real U, Standard_Real V, Standard_Integer USide, Standard_Integer Nu, Standard_Integer Nv) ;

//! Applies the transformation T to this surface of linear extrusion. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Computes the  parameters on the  transformed  surface for <br>
//!          the transform of the point of parameters U,V on <me>. <br>
//! <br>
//!          me->Transformed(T)->Value(U',V') <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U,V).Transformed(T) <br>
//! <br>
//!          Where U',V' are the new values of U,V after calling <br>
//! <br>
//!          me->TranformParameters(U,V,T) <br>
//! <br>
//!          This methods multiplies : <br>
//!          U by BasisCurve()->ParametricTransformation(T) <br>
//!          V by T.ScaleFactor() <br>
virtual /*instead*/  void TransformParameters(Standard_Real& U, Standard_Real& V, OCNaroWrappers::OCgp_Trsf^ T) override;

//! Returns a 2d transformation  used to find the  new <br>
//!          parameters of a point on the transformed surface. <br>
//! <br>
//!          me->Transformed(T)->Value(U',V') <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U,V).Transformed(T) <br>
//! <br>
//!          Where U',V' are  obtained by transforming U,V with <br>
//!          th 2d transformation returned by <br>
//! <br>
//!          me->ParametricTransformation(T) <br>
//! <br>
//!          This  methods  returns  a scale <br>
//!          U by BasisCurve()->ParametricTransformation(T) <br>
//!          V by T.ScaleFactor() <br>
virtual /*instead*/  OCgp_GTrsf2d^ ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T) override;

//! Creates a new object which is a copy of this surface of linear extrusion. <br>
 /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_SurfaceOfLinearExtrusion()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
