// File generated by CPPExt (CPP file)
//

#include "Geom_Circle.h"
#include "../Converter.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Ax2.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Trsf.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_Circle::OCGeom_Circle(Handle(Geom_Circle)* nativeHandle) : OCGeom_Conic((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_Circle(*nativeHandle);
}

OCGeom_Circle::OCGeom_Circle(OCNaroWrappers::OCgp_Circ^ C) : OCGeom_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Circle(new Geom_Circle(*((gp_Circ*)C->Handle)));
}

OCGeom_Circle::OCGeom_Circle(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Radius) : OCGeom_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Circle(new Geom_Circle(*((gp_Ax2*)A2->Handle), Radius));
}

 void OCGeom_Circle::SetCirc(OCNaroWrappers::OCgp_Circ^ C)
{
  (*((Handle_Geom_Circle*)nativeHandle))->SetCirc(*((gp_Circ*)C->Handle));
}

 void OCGeom_Circle::SetRadius(Standard_Real R)
{
  (*((Handle_Geom_Circle*)nativeHandle))->SetRadius(R);
}

OCgp_Circ^ OCGeom_Circle::Circ()
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = (*((Handle_Geom_Circle*)nativeHandle))->Circ();
  return gcnew OCgp_Circ(tmp);
}

 Standard_Real OCGeom_Circle::Radius()
{
  return (*((Handle_Geom_Circle*)nativeHandle))->Radius();
}

 Standard_Real OCGeom_Circle::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_Circle*)nativeHandle))->ReversedParameter(U);
}

 Standard_Real OCGeom_Circle::Eccentricity()
{
  return (*((Handle_Geom_Circle*)nativeHandle))->Eccentricity();
}

 Standard_Real OCGeom_Circle::FirstParameter()
{
  return (*((Handle_Geom_Circle*)nativeHandle))->FirstParameter();
}

 Standard_Real OCGeom_Circle::LastParameter()
{
  return (*((Handle_Geom_Circle*)nativeHandle))->LastParameter();
}

 System::Boolean OCGeom_Circle::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Circle*)nativeHandle))->IsClosed());
}

 System::Boolean OCGeom_Circle::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Circle*)nativeHandle))->IsPeriodic());
}

 void OCGeom_Circle::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_Circle*)nativeHandle))->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCGeom_Circle::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1)
{
  (*((Handle_Geom_Circle*)nativeHandle))->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle));
}

 void OCGeom_Circle::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  (*((Handle_Geom_Circle*)nativeHandle))->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCGeom_Circle::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  (*((Handle_Geom_Circle*)nativeHandle))->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCGeom_Circle::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_Circle*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeom_Circle::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_Circle*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

OCGeom_Geometry^ OCGeom_Circle::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_Circle*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}


