// File generated by CPPExt (Transient)
//
#ifndef _Geom_Transformation_OCWrappers_HeaderFile
#define _Geom_Transformation_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_Transformation.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../gp/gp_Trsf.h"
#include "../gp/gp_TrsfForm.h"


namespace OCNaroWrappers
{

ref class OCgp_Trsf;
ref class OCgp_Pnt;
ref class OCgp_Ax1;
ref class OCgp_Ax2;
ref class OCgp_Ax3;
ref class OCgp_Vec;


//! Describes how to construct the following elementary transformations <br>
//! - translations, <br>
//! - rotations, <br>
//! - symmetries, <br>
//! - scales. <br>
//!   The Transformation class can also be used to <br>
//! construct complex transformations by combining these <br>
//! elementary transformations. <br>
//! However, these transformations can never change <br>
//! the type of an object. For example, the projection <br>
//! transformation can change a circle into an ellipse, and <br>
//! therefore change the real type of the object. Such a <br>
//! transformation is forbidden in this environment and <br>
//! cannot be a Geom_Transformation. <br>
//!  The transformation can be represented as follow : <br>
//! <br>
//!       V1   V2   V3    T <br>
//!    | a11  a12  a13   a14 |   | x |      | x'| <br>
//!    | a21  a22  a23   a24 |   | y |      | y'| <br>
//!    | a31  a32  a33   a34 |   | z |   =  | z'| <br>
//!    |  0    0    0     1  |   | 1 |      | 1 | <br>
public ref class OCGeom_Transformation : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCGeom_Transformation(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_Transformation(Handle(Geom_Transformation)* nativeHandle);

// Methods PUBLIC

//! Creates an identity transformation. <br>
OCGeom_Transformation();

//!  Creates a transient copy of T. <br>
OCGeom_Transformation(OCNaroWrappers::OCgp_Trsf^ T);


//!  Makes the transformation into a symmetrical transformation <br>
//!  with respect to a point P. <br>
//!  P is the center of the symmetry. <br>
 /*instead*/  void SetMirror(OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Makes the transformation into a symmetrical transformation <br>
//!  with respect to an axis A1. <br>
//!  A1 is the center of the axial symmetry. <br>
 /*instead*/  void SetMirror(OCNaroWrappers::OCgp_Ax1^ A1) ;


//!  Makes the transformation into a symmetrical transformation <br>
//!  with respect to a plane.  The plane of the symmetry is <br>
//!  defined with the axis placement A2. It is the plane <br>
//!  (Location, XDirection, YDirection). <br>
 /*instead*/  void SetMirror(OCNaroWrappers::OCgp_Ax2^ A2) ;


//!  Makes the transformation into a rotation. <br>
//!  A1 is the axis rotation and Ang is the angular value <br>
//!  of the rotation in radians. <br>
 /*instead*/  void SetRotation(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Ang) ;


//!  Makes the transformation into a scale. P is the center of <br>
//!  the scale and S is the scaling value. <br>
 /*instead*/  void SetScale(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real S) ;


//!  Makes a transformation allowing passage from the coordinate <br>
//!  system "FromSystem1" to the coordinate system "ToSystem2". <br>
//! Example : <br>
//!  In a C++ implementation : <br>
//!  Real x1, y1, z1;  // are the coordinates of a point in the <br>
//!                    // local system FromSystem1 <br>
//!  Real x2, y2, z2;  // are the coordinates of a point in the <br>
//!                    // local system ToSystem2 <br>
//!  gp_Pnt P1 (x1, y1, z1) <br>
//!  Geom_Transformation T; <br>
//!  T.SetTransformation (FromSystem1, ToSystem2); <br>
//!  gp_Pnt P2 = P1.Transformed (T); <br>
//!  P2.Coord (x2, y2, z2); <br>
 /*instead*/  void SetTransformation(OCNaroWrappers::OCgp_Ax3^ FromSystem1, OCNaroWrappers::OCgp_Ax3^ ToSystem2) ;


//!  Makes the transformation allowing passage from the basic <br>
//!  coordinate system <br>
//!  {P(0.,0.,0.), VX (1.,0.,0.), VY (0.,1.,0.), VZ (0., 0. ,1.) } <br>
//!  to the local coordinate system defined with the Ax2 ToSystem. <br>
//!  Same utilisation as the previous method. FromSystem1 is <br>
//!  defaulted to the absolute coordinate system. <br>
 /*instead*/  void SetTransformation(OCNaroWrappers::OCgp_Ax3^ ToSystem) ;


//!  Makes the transformation into a translation. <br>
//!  V is the vector of the translation. <br>
 /*instead*/  void SetTranslation(OCNaroWrappers::OCgp_Vec^ V) ;


//!  Makes the transformation into a translation from the point <br>
//!  P1 to the point P2. <br>
 /*instead*/  void SetTranslation(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

//! Converts the gp_Trsf transformation T into this transformation. <br>
 /*instead*/  void SetTrsf(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Checks whether this transformation is an indirect <br>
//! transformation: returns true if the determinant of the <br>
//! matrix of the vectorial part of the transformation is less than 0. <br>
 /*instead*/  System::Boolean IsNegative() ;

//! Returns the nature of this transformation as a value <br>
//! of the gp_TrsfForm enumeration. <br>
 /*instead*/  OCgp_TrsfForm Form() ;

//!  Returns the scale value of the transformation. <br>
 /*instead*/  Standard_Real ScaleFactor() ;


//!  Returns a non transient copy of <me>. <br>
 /*instead*/  OCgp_Trsf^ Trsf() ;


//!  Returns the coefficients of the global matrix of tranformation. <br>
//!  It is a 3 rows X 4 columns matrix. <br>
//!  Raised if  Row < 1 or Row > 3  or  Col < 1 or Col > 4 <br>
//!  Computes the reverse transformation. <br>
 /*instead*/  Standard_Real Value(Standard_Integer Row, Standard_Integer Col) ;


//!  Raised if the the transformation is singular. This means that <br>
//!  the ScaleFactor is lower or equal to Resolution from <br>
//!  package gp. <br>
 /*instead*/  void Invert() ;


//!  Raised if the the transformation is singular. This means that <br>
//!  the ScaleFactor is lower or equal to Resolution from <br>
//!  package gp. <br>
 /*instead*/  OCGeom_Transformation^ Inverted() ;


//!  Computes the transformation composed with Other and <me>. <br>
//!  <me> * Other. <br>
//!  Returns a new transformation <br>
 /*instead*/  OCGeom_Transformation^ Multiplied(OCNaroWrappers::OCGeom_Transformation^ Other) ;


//!  Computes the transformation composed with Other and <me> . <br>
//!  <me> = <me> * Other. <br>
 /*instead*/  void Multiply(OCNaroWrappers::OCGeom_Transformation^ Other) ;


//!  Computes the following composition of transformations <br>
//!  if N > 0  <me> * <me> * .......* <me>. <br>
//!  if N = 0  Identity <br>
//!  if N < 0  <me>.Invert() * .........* <me>.Invert() <br>
//!  Raised if N < 0 and if the transformation is not inversible <br>
 /*instead*/  void Power(Standard_Integer N) ;


//!  Raised if N < 0 and if the transformation is not inversible <br>
 /*instead*/  OCGeom_Transformation^ Powered(Standard_Integer N) ;


//!  Computes the matrix of the transformation composed with <br>
//!  <me> and Other.     <me> = Other * <me> <br>
 /*instead*/  void PreMultiply(OCNaroWrappers::OCGeom_Transformation^ Other) ;


//!  Applies the transformation <me> to the triplet {X, Y, Z}. <br>
 /*instead*/  void Transforms(Standard_Real& X, Standard_Real& Y, Standard_Real& Z) ;

//! Creates a new object which is a copy of this transformation. <br>
 /*instead*/  OCGeom_Transformation^ Copy() ;

~OCGeom_Transformation()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
