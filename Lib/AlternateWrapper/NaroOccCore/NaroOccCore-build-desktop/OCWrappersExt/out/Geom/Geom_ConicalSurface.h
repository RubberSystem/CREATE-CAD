// File generated by CPPExt (Transient)
//
#ifndef _Geom_ConicalSurface_OCWrappers_HeaderFile
#define _Geom_ConicalSurface_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_ConicalSurface.hxx>
#include "../Converter.h"

#include "Geom_ElementarySurface.h"



namespace OCNaroWrappers
{

ref class OCgp_Ax3;
ref class OCgp_Cone;
ref class OCgp_Trsf;
ref class OCgp_GTrsf2d;
ref class OCgp_Pnt;
ref class OCGeom_Curve;
ref class OCgp_Vec;
ref class OCGeom_Geometry;


//!  Describes a cone. <br>
//!    A cone is defined by the half-angle at its apex, and <br>
//!    is positioned in space by a coordinate system (a <br>
//!    gp_Ax3 object) and a reference radius as follows: <br>
//! - The "main Axis" of the coordinate system is the <br>
//!   axis of revolution of the cone. <br>
//! - The plane defined by the origin, the "X Direction" <br>
//!   and the "Y Direction" of the coordinate system is <br>
//!   the reference plane of the cone. The intersection <br>
//!   of the cone with this reference plane is a circle of <br>
//!   radius equal to the reference radius. <br>
//! - The apex of the cone is on the negative side of <br>
//!   the "main Axis" of the coordinate system if the <br>
//!   half-angle is positive, and on the positive side if <br>
//!   the half-angle is negative. <br>
//!   This coordinate system is the "local coordinate <br>
//!   system" of the cone. The following apply: <br>
//! - Rotation around its "main Axis", in the <br>
//!   trigonometric sense given by the "X Direction" <br>
//!   and the "Y Direction", defines the u parametric direction. <br>
//! - Its "X Axis" gives the origin for the u parameter. <br>
//! - Its "main Direction" is the v parametric direction of the cone. <br>
//! - Its origin is the origin of the v parameter. <br>
//!   The parametric range of the two parameters is: <br>
//! - [ 0, 2.*Pi ] for u, and - ] -infinity, +infinity [ for v <br>
//!   The parametric equation of the cone is:  P(u, v) = <br>
//!   O + (R + v*sin(Ang)) * (cos(u)*XDir + sin(u)*YDir) + v*cos(Ang)*ZDir where: <br>
//! - O, XDir, YDir and ZDir are respectively <br>
//!   the origin, the "X Direction", the "Y Direction" and <br>
//!   the "Z Direction" of the cone's local coordinate system, <br>
//! - Ang is the half-angle at the apex of the cone,   and <br>
//! - R is the reference radius. <br>
public ref class OCGeom_ConicalSurface : OCGeom_ElementarySurface {

protected:
  // dummy constructor;
  OCGeom_ConicalSurface(OCDummy^) : OCGeom_ElementarySurface((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_ConicalSurface(Handle(Geom_ConicalSurface)* nativeHandle);

// Methods PUBLIC


//!  A3 defines the local coordinate system of the conical surface. <br>
//!  Ang is the conical surface semi-angle ]0, PI/2[. <br>
//!  Radius is the radius of the circle Viso in the placement plane <br>
//!  of the conical surface defined with "XAxis" and "YAxis". <br>
//!  The "ZDirection" of A3 defines the direction of the surface's <br>
//!  axis of symmetry. <br>
//!  If the location point of A3 is the apex of the surface <br>
//!  Radius = 0 . <br>
//!  At the creation the parametrization of the surface is defined <br>
//!  such that the normal Vector (N = D1U ^ D1V) is oriented towards <br>
//!  the "outside region" of the surface. <br>
//!  Raised if Radius < 0.0 or Ang < Resolution from gp or <br>
//!  Ang >= PI/2 - Resolution <br>
OCGeom_ConicalSurface(OCNaroWrappers::OCgp_Ax3^ A3, Standard_Real Ang, Standard_Real Radius);


//!  Creates a ConicalSurface from a non transient Cone from <br>
//!  package gp. <br>
OCGeom_ConicalSurface(OCNaroWrappers::OCgp_Cone^ C);


//!  Set <me> so that <me> has the same geometric properties as C. <br>
 /*instead*/  void SetCone(OCNaroWrappers::OCgp_Cone^ C) ;


//!  Changes the radius of the conical surface in the placement <br>
//!  plane (Z = 0, V = 0).  The local coordinate system is not <br>
//!  modified. <br>//! Raised if R < 0.0 <br>
 /*instead*/  void SetRadius(Standard_Real R) ;


//!  Changes the semi angle of the conical surface. <br>
//!  Raised if Ang < Resolution or Ang >= PI/2 - Resolution <br>
 /*instead*/  void SetSemiAngle(Standard_Real Ang) ;


//!  returns a non transient cone with the same geometric properties <br>
//!  as <me>. <br>
 /*instead*/  OCgp_Cone^ Cone() ;

//! return 2.PI - U. <br>
 /*instead*/  Standard_Real UReversedParameter(Standard_Real U) ;

//! Computes the u (or v) parameter on the modified <br>
//! surface, when reversing its u (or v) parametric <br>
//! direction, for any point of u parameter U (or of v <br>
//! parameter V) on this cone. <br>
//! In the case of a cone, these functions return respectively: <br>
//! - 2.*Pi - U, -V. <br>
 /*instead*/  Standard_Real VReversedParameter(Standard_Real V) ;

//! Changes the orientation of this cone in the v <br>
//! parametric direction. The bounds of the surface are <br>
//! not changed but the v parametric direction is reversed. <br>
//! As a consequence, for a cone: <br>
//! - the "main Direction" of the local coordinate system <br>
//!   is reversed, and <br>
//! - the half-angle at the apex is inverted. <br>
virtual /*instead*/  void VReverse() override;

//! Computes the  parameters on the  transformed  surface for <br>
//!          the transform of the point of parameters U,V on <me>. <br>
//! <br>
//!          me->Transformed(T)->Value(U',V') <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U,V).Transformed(T) <br>
//! <br>
//!          Where U',V' are the new values of U,V after calling <br>
//! <br>
//!          me->TranformParameters(U,V,T) <br>
//! <br>
//!          This methods multiplies V by T.ScaleFactor() <br>
virtual /*instead*/  void TransformParameters(Standard_Real& U, Standard_Real& V, OCNaroWrappers::OCgp_Trsf^ T) override;

//! Returns a 2d transformation  used to find the  new <br>
//!          parameters of a point on the transformed surface. <br>
//! <br>
//!          me->Transformed(T)->Value(U',V') <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U,V).Transformed(T) <br>
//! <br>
//!          Where U',V' are  obtained by transforming U,V with <br>
//!          th 2d transformation returned by <br>
//! <br>
//!          me->ParametricTransformation(T) <br>
//! <br>
//!          This  methods  returns  a scale  centered  on  the <br>
//!          U axis with T.ScaleFactor <br>
virtual /*instead*/  OCgp_GTrsf2d^ ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T) override;

//! Computes the apex of this cone. It is on the negative <br>
//! side of the axis of revolution of this cone if the <br>
//! half-angle at the apex is positive, and on the positive <br>
//! side of the "main Axis" if the half-angle is negative. <br>
 /*instead*/  OCgp_Pnt^ Apex() ;


//!  The conical surface is infinite in the V direction so <br>
//!  V1 = Realfirst from Standard and V2 = RealLast. <br>
//!  U1 = 0 and U2 = 2*PI. <br>
 /*instead*/  void Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2) ;


//!  Returns the coefficients of the implicit equation of the <br>
//!  quadric in the absolute cartesian coordinate system : <br>
//!  These coefficients are normalized. <br>
//!  A1.X**2 + A2.Y**2 + A3.Z**2 + 2.(B1.X.Y + B2.X.Z + B3.Y.Z) + <br>
//!  2.(C1.X + C2.Y + C3.Z) + D = 0.0 <br>
 /*instead*/  void Coefficients(Standard_Real& A1, Standard_Real& A2, Standard_Real& A3, Standard_Real& B1, Standard_Real& B2, Standard_Real& B3, Standard_Real& C1, Standard_Real& C2, Standard_Real& C3, Standard_Real& D) ;

//! Returns the reference radius of this cone. <br>
//! The reference radius is the radius of the circle formed <br>
//! by the intersection of this cone and its reference <br>
//! plane (i.e. the plane defined by the origin, "X <br>
//! Direction" and "Y Direction" of the local coordinate <br>
//! system of this cone). <br>
//! If the apex of this cone is on the origin of the local <br>
//! coordinate system of this cone, the returned value is 0. <br>
 /*instead*/  Standard_Real RefRadius() ;


//!  returns the semi-angle of the conical surface ]0.0, PI/2[. <br>
 /*instead*/  Standard_Real SemiAngle() ;

//! returns True. <br>
 /*instead*/  System::Boolean IsUClosed() ;

//! returns False. <br>
 /*instead*/  System::Boolean IsVClosed() ;

//! Returns True. <br>
 /*instead*/  System::Boolean IsUPeriodic() ;

//! Returns False. <br>
 /*instead*/  System::Boolean IsVPeriodic() ;

//! Builds the U isoparametric line of this cone. The <br>
//!  origin of this line is on the reference plane of this <br>
//!  cone (i.e. the plane defined by the origin, "X Direction" <br>
//!  and "Y Direction" of the local coordinate system of this cone). <br>
 /*instead*/  OCGeom_Curve^ UIso(Standard_Real U) ;

//! Builds the V isoparametric circle of this cone. It is the <br>
//! circle on this cone, located in the plane of Z <br>
//! coordinate V*cos(Semi-Angle) in the local coordinate system of this <br>
//! cone. The "Axis" of this circle is the axis of revolution <br>
//! of this cone. Its starting point is defined by the "X <br>
//! Direction" of this cone. <br>
//! Warning <br>
//! If the V isoparametric circle is close to the apex of <br>
//! this cone, the radius of the circle becomes very small. <br>
//! It is possible to have a circle with radius equal to 0.0. <br>
 /*instead*/  OCGeom_Curve^ VIso(Standard_Real V) ;


//!  Computes the  point P (U, V) on the surface. <br>
//!  P (U, V) = Loc + <br>
//!  (RefRadius + V * sin (Semi-Angle)) * (cos (U) * XDir + sin (U) * YDir) + <br>
//!  V * cos (Semi-Angle) * ZDir <br>
//!  where Loc is the origin of the placement plane (XAxis, YAxis) <br>
//!  XDir is the direction of the XAxis and YDir the direction of <br>
//!  the YAxis. <br>
 /*instead*/  void D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Computes the current point and the first derivatives in the <br>
//!  directions U and V. <br>
 /*instead*/  void D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V) ;


//!  Computes the current point, the first and the second derivatives <br>
//!  in the directions U and V. <br>
 /*instead*/  void D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV) ;


//!  Computes the current point, the first,the second and the third <br>
//!  derivatives in the directions U and V. <br>
 /*instead*/  void D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV) ;

//! Computes the derivative of order Nu in the u <br>
//! parametric direction, and Nv in the v parametric <br>
//! direction at the point of parameters (U, V) of this cone. <br>
//! Exceptions <br>
//! Standard_RangeError if: <br>
//! - Nu + Nv is less than 1, <br>
//! - Nu or Nv is negative. <br>
 /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv) ;

//! Applies the transformation T to this cone. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Creates a new object which is a copy of this cone. <br>
 /*instead*/  OCGeom_Geometry^ Copy() ;

~OCGeom_ConicalSurface()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
