// File generated by CPPExt (Transient)
//
#ifndef _Geom_Curve_OCWrappers_HeaderFile
#define _Geom_Curve_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom_Curve.hxx>
#include "../Converter.h"

#include "Geom_Geometry.h"

#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCgp_Trsf;
ref class OCgp_Pnt;
ref class OCgp_Vec;


//! The abstract class Curve describes the common <br>
//! behavior of curves in 3D space. The Geom package <br>
//! provides numerous concrete classes of derived <br>
//! curves, including lines, circles, conics, Bezier or <br>
//! BSpline curves, etc. <br>
//! The main characteristic of these curves is that they <br>
//! are parameterized. The Geom_Curve class shows: <br>
//! - how to work with the parametric equation of a curve <br>
//!   in order to calculate the point of parameter u, <br>
//!   together with the vector tangent and the derivative <br>
//!   vectors of order 2, 3,..., N at this point; <br>
//! - how to obtain general information about the curve <br>
//!   (for example, level of continuity, closed <br>
//!   characteristics, periodicity, bounds of the parameter field); <br>
//! - how the parameter changes when a geometric <br>
//!   transformation is applied to the curve or when the <br>
//!   orientation of the curve is inverted. <br>
//!   All curves must have a geometric continuity: a curve is <br>
//!   at least "C0". Generally, this property is checked at <br>
//! the time of construction or when the curve is edited. <br>
//! Where this is not the case, the documentation states so explicitly. <br>
//! Warning <br>
//! The Geom package does not prevent the <br>
//! construction of curves with null length or curves which <br>
//! self-intersect. <br>
public ref class OCGeom_Curve : OCGeom_Geometry {

protected:
  // dummy constructor;
  OCGeom_Curve(OCDummy^) : OCGeom_Geometry((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom_Curve(Handle(Geom_Curve)* nativeHandle);

// Methods PUBLIC

//! Returns the  parameter on the  transformed  curve for <br>
//!          the transform of the point of parameter U on <me>. <br>
//! <br>
//!          me->Transformed(T)->Value(me->TransformedParameter(U,T)) <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U).Transformed(T) <br>
//! <br>
//!          This methods returns <U> <br>
//! <br>
//!          It can be redefined. For example on the Line. <br>
virtual /*instead*/  Standard_Real TransformedParameter(Standard_Real U, OCNaroWrappers::OCgp_Trsf^ T) ;

//! Returns a  coefficient to compute the parameter on <br>
//!          the transformed  curve  for  the transform  of the <br>
//!          point on <me>. <br>
//! <br>
//!          Transformed(T)->Value(U * ParametricTransformation(T)) <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          Value(U).Transformed(T) <br>
//! <br>
//!          This methods returns 1. <br>
//! <br>
//!          It can be redefined. For example on the Line. <br>
virtual /*instead*/  Standard_Real ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Returns a copy of <me> reversed. <br>
 /*instead*/  OCGeom_Curve^ Reversed() ;

//! Returns the period of this curve. <br>
//! Exceptions Standard_NoSuchObject if this curve is not periodic. <br>
virtual /*instead*/  Standard_Real Period() ;

//! Computes the point of parameter U on <me>. <br>
//!  If the curve is periodic  then the returned point is P(U) with <br>
//!  U = Ustart + (U - Uend)  where Ustart and Uend are the <br>
//!  parametric bounds of the curve. <br>
//!  it is implemented with D0. <br>
//!  Raised only for the "OffsetCurve" if it is not possible to <br>
//!  compute the current point. For example when the first <br>
//!  derivative on the basis curve and the offset direction are parallel. <br>
 /*instead*/  OCgp_Pnt^ Value(Standard_Real U) ;

~OCGeom_Curve()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
