// File generated by CPPExt (CPP file)
//

#include "Geom_Plane.h"
#include "../Converter.h"
#include "../gp/gp_Ax3.h"
#include "../gp/gp_Pln.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Dir.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_GTrsf2d.h"
#include "Geom_Curve.h"
#include "../gp/gp_Vec.h"
#include "Geom_Geometry.h"


using namespace OCNaroWrappers;

OCGeom_Plane::OCGeom_Plane(Handle(Geom_Plane)* nativeHandle) : OCGeom_ElementarySurface((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom_Plane(*nativeHandle);
}

OCGeom_Plane::OCGeom_Plane(OCNaroWrappers::OCgp_Ax3^ A3) : OCGeom_ElementarySurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Plane(new Geom_Plane(*((gp_Ax3*)A3->Handle)));
}

OCGeom_Plane::OCGeom_Plane(OCNaroWrappers::OCgp_Pln^ Pl) : OCGeom_ElementarySurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Plane(new Geom_Plane(*((gp_Pln*)Pl->Handle)));
}

OCGeom_Plane::OCGeom_Plane(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V) : OCGeom_ElementarySurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Plane(new Geom_Plane(*((gp_Pnt*)P->Handle), *((gp_Dir*)V->Handle)));
}

OCGeom_Plane::OCGeom_Plane(Standard_Real A, Standard_Real B, Standard_Real C, Standard_Real D) : OCGeom_ElementarySurface((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom_Plane(new Geom_Plane(A, B, C, D));
}

 void OCGeom_Plane::SetPln(OCNaroWrappers::OCgp_Pln^ Pl)
{
  (*((Handle_Geom_Plane*)nativeHandle))->SetPln(*((gp_Pln*)Pl->Handle));
}

OCgp_Pln^ OCGeom_Plane::Pln()
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = (*((Handle_Geom_Plane*)nativeHandle))->Pln();
  return gcnew OCgp_Pln(tmp);
}

 void OCGeom_Plane::UReverse()
{
  (*((Handle_Geom_Plane*)nativeHandle))->UReverse();
}

 Standard_Real OCGeom_Plane::UReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom_Plane*)nativeHandle))->UReversedParameter(U);
}

 void OCGeom_Plane::VReverse()
{
  (*((Handle_Geom_Plane*)nativeHandle))->VReverse();
}

 Standard_Real OCGeom_Plane::VReversedParameter(Standard_Real V)
{
  return (*((Handle_Geom_Plane*)nativeHandle))->VReversedParameter(V);
}

 void OCGeom_Plane::TransformParameters(Standard_Real& U, Standard_Real& V, OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_Plane*)nativeHandle))->TransformParameters(U, V, *((gp_Trsf*)T->Handle));
}

OCgp_GTrsf2d^ OCGeom_Plane::ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T)
{
  gp_GTrsf2d* tmp = new gp_GTrsf2d();
  *tmp = (*((Handle_Geom_Plane*)nativeHandle))->ParametricTransformation(*((gp_Trsf*)T->Handle));
  return gcnew OCgp_GTrsf2d(tmp);
}

 void OCGeom_Plane::Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2)
{
  (*((Handle_Geom_Plane*)nativeHandle))->Bounds(U1, U2, V1, V2);
}

 void OCGeom_Plane::Coefficients(Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& D)
{
  (*((Handle_Geom_Plane*)nativeHandle))->Coefficients(A, B, C, D);
}

 System::Boolean OCGeom_Plane::IsUClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Plane*)nativeHandle))->IsUClosed());
}

 System::Boolean OCGeom_Plane::IsVClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Plane*)nativeHandle))->IsVClosed());
}

 System::Boolean OCGeom_Plane::IsUPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Plane*)nativeHandle))->IsUPeriodic());
}

 System::Boolean OCGeom_Plane::IsVPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom_Plane*)nativeHandle))->IsVPeriodic());
}

OCGeom_Curve^ OCGeom_Plane::UIso(Standard_Real U)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_Plane*)nativeHandle))->UIso(U);
  return gcnew OCGeom_Curve(&tmp);
}

OCGeom_Curve^ OCGeom_Plane::VIso(Standard_Real V)
{
  Handle(Geom_Curve) tmp = (*((Handle_Geom_Plane*)nativeHandle))->VIso(V);
  return gcnew OCGeom_Curve(&tmp);
}

 void OCGeom_Plane::D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_Geom_Plane*)nativeHandle))->D0(U, V, *((gp_Pnt*)P->Handle));
}

 void OCGeom_Plane::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  (*((Handle_Geom_Plane*)nativeHandle))->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

 void OCGeom_Plane::D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV)
{
  (*((Handle_Geom_Plane*)nativeHandle))->D2(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle));
}

 void OCGeom_Plane::D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV)
{
  (*((Handle_Geom_Plane*)nativeHandle))->D3(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle), *((gp_Vec*)D2U->Handle), *((gp_Vec*)D2V->Handle), *((gp_Vec*)D2UV->Handle), *((gp_Vec*)D3U->Handle), *((gp_Vec*)D3V->Handle), *((gp_Vec*)D3UUV->Handle), *((gp_Vec*)D3UVV->Handle));
}

OCgp_Vec^ OCGeom_Plane::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_Geom_Plane*)nativeHandle))->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeom_Plane::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_Geom_Plane*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

OCGeom_Geometry^ OCGeom_Plane::Copy()
{
  Handle(Geom_Geometry) tmp = (*((Handle_Geom_Plane*)nativeHandle))->Copy();
  return gcnew OCGeom_Geometry(&tmp);
}


