// File generated by CPPExt (CPP file)
//

#include "V3d_Light.h"
#include "../Converter.h"
#include "../Visual3d/Visual3d_Light.h"
#include "../Graphic3d/Graphic3d_Structure.h"
#include "V3d_Viewer.h"
#include "../Quantity/Quantity_Color.h"
#include "V3d_View.h"
#include "../Graphic3d/Graphic3d_Vertex.h"


using namespace OCNaroWrappers;

OCV3d_Light::OCV3d_Light(Handle(V3d_Light)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_V3d_Light(*nativeHandle);
}

OCV3d_Light::OCV3d_Light(OCNaroWrappers::OCV3d_Viewer^ VM) : OCMMgt_TShared((OCDummy^)nullptr)

{}

 void OCV3d_Light::SetColor(OCQuantity_TypeOfColor Type, Quantity_Parameter V1, Quantity_Parameter V2, Quantity_Parameter V3)
{
  (*((Handle_V3d_Light*)nativeHandle))->SetColor((Quantity_TypeOfColor)Type, V1, V2, V3);
}

 void OCV3d_Light::SetColor(OCQuantity_NameOfColor Name)
{
  (*((Handle_V3d_Light*)nativeHandle))->SetColor((Quantity_NameOfColor)Name);
}

 void OCV3d_Light::SetColor(OCNaroWrappers::OCQuantity_Color^ Name)
{
  (*((Handle_V3d_Light*)nativeHandle))->SetColor(*((Quantity_Color*)Name->Handle));
}

 void OCV3d_Light::Color(OCQuantity_TypeOfColor Type, Quantity_Parameter& V1, Quantity_Parameter& V2, Quantity_Parameter& V3)
{
  (*((Handle_V3d_Light*)nativeHandle))->Color((Quantity_TypeOfColor)Type, V1, V2, V3);
}

 void OCV3d_Light::Color(OCQuantity_NameOfColor& Name)
{
  (*((Handle_V3d_Light*)nativeHandle))->Color((Quantity_NameOfColor&)Name);
}

OCQuantity_Color^ OCV3d_Light::Color()
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = (*((Handle_V3d_Light*)nativeHandle))->Color();
  return gcnew OCQuantity_Color(tmp);
}

 OCV3d_TypeOfLight OCV3d_Light::Type()
{
  return (OCV3d_TypeOfLight)((*((Handle_V3d_Light*)nativeHandle))->Type());
}

 System::Boolean OCV3d_Light::Headlight()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Light*)nativeHandle))->Headlight());
}

 System::Boolean OCV3d_Light::IsDisplayed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Light*)nativeHandle))->IsDisplayed());
}


