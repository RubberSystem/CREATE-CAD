// File generated by CPPExt (CPP file)
//

#include "V3d_DirectionalLight.h"
#include "../Converter.h"
#include "V3d_Viewer.h"
#include "V3d_View.h"
#include "../Graphic3d/Graphic3d_Group.h"


using namespace OCNaroWrappers;

OCV3d_DirectionalLight::OCV3d_DirectionalLight(Handle(V3d_DirectionalLight)* nativeHandle) : OCV3d_PositionLight((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_V3d_DirectionalLight(*nativeHandle);
}

OCV3d_DirectionalLight::OCV3d_DirectionalLight(OCNaroWrappers::OCV3d_Viewer^ VM, OCV3d_TypeOfOrientation Direction, OCQuantity_NameOfColor Color, System::Boolean Headlight) : OCV3d_PositionLight((OCDummy^)nullptr)

{
  nativeHandle = new Handle_V3d_DirectionalLight(new V3d_DirectionalLight(*((Handle_V3d_Viewer*)VM->Handle), (V3d_TypeOfOrientation)Direction, (Quantity_NameOfColor)Color, OCConverter::BooleanToStandardBoolean(Headlight)));
}

OCV3d_DirectionalLight::OCV3d_DirectionalLight(OCNaroWrappers::OCV3d_Viewer^ VM, V3d_Coordinate Xt, V3d_Coordinate Yt, V3d_Coordinate Zt, V3d_Coordinate Xp, V3d_Coordinate Yp, V3d_Coordinate Zp, OCQuantity_NameOfColor Color, System::Boolean Headlight) : OCV3d_PositionLight((OCDummy^)nullptr)

{
  nativeHandle = new Handle_V3d_DirectionalLight(new V3d_DirectionalLight(*((Handle_V3d_Viewer*)VM->Handle), Xt, Yt, Zt, Xp, Yp, Zp, (Quantity_NameOfColor)Color, OCConverter::BooleanToStandardBoolean(Headlight)));
}

 void OCV3d_DirectionalLight::SetDirection(OCV3d_TypeOfOrientation Direction)
{
  (*((Handle_V3d_DirectionalLight*)nativeHandle))->SetDirection((V3d_TypeOfOrientation)Direction);
}

 void OCV3d_DirectionalLight::SetDirection(Quantity_Parameter Xm, Quantity_Parameter Ym, Quantity_Parameter Zm)
{
  (*((Handle_V3d_DirectionalLight*)nativeHandle))->SetDirection(Xm, Ym, Zm);
}

 void OCV3d_DirectionalLight::SetDisplayPosition(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z)
{
  (*((Handle_V3d_DirectionalLight*)nativeHandle))->SetDisplayPosition(X, Y, Z);
}

 void OCV3d_DirectionalLight::SetPosition(V3d_Coordinate Xp, V3d_Coordinate Yp, V3d_Coordinate Zp)
{
  (*((Handle_V3d_DirectionalLight*)nativeHandle))->SetPosition(Xp, Yp, Zp);
}

 void OCV3d_DirectionalLight::Display(OCNaroWrappers::OCV3d_View^ aView, OCV3d_TypeOfRepresentation Representation)
{
  (*((Handle_V3d_DirectionalLight*)nativeHandle))->Display(*((Handle_V3d_View*)aView->Handle), (V3d_TypeOfRepresentation)Representation);
}

 void OCV3d_DirectionalLight::Position(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z)
{
  (*((Handle_V3d_DirectionalLight*)nativeHandle))->Position(X, Y, Z);
}

 void OCV3d_DirectionalLight::DisplayPosition(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z)
{
  (*((Handle_V3d_DirectionalLight*)nativeHandle))->DisplayPosition(X, Y, Z);
}

 void OCV3d_DirectionalLight::Direction(Quantity_Parameter& Vx, Quantity_Parameter& Vy, Quantity_Parameter& Vz)
{
  (*((Handle_V3d_DirectionalLight*)nativeHandle))->Direction(Vx, Vy, Vz);
}


