// File generated by CPPExt (CPP file)
//

#include "V3d_Camera.h"
#include "../Converter.h"
#include "../Graphic3d/Graphic3d_Structure.h"
#include "V3d_View.h"
#include "../Graphic3d/Graphic3d_Group.h"
#include "../Graphic3d/Graphic3d_Vertex.h"


using namespace OCNaroWrappers;

OCV3d_Camera::OCV3d_Camera(Handle(V3d_Camera)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_V3d_Camera(*nativeHandle);
}

OCV3d_Camera::OCV3d_Camera(OCNaroWrappers::OCV3d_View^ aView) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_V3d_Camera(new V3d_Camera(*((Handle_V3d_View*)aView->Handle)));
}

 void OCV3d_Camera::SetPosition(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z)
{
  (*((Handle_V3d_Camera*)nativeHandle))->SetPosition(X, Y, Z);
}

 void OCV3d_Camera::SetAngle(Quantity_PlaneAngle Angle)
{
  (*((Handle_V3d_Camera*)nativeHandle))->SetAngle(Angle);
}

 void OCV3d_Camera::SetAperture(Quantity_PlaneAngle Angle)
{
  (*((Handle_V3d_Camera*)nativeHandle))->SetAperture(Angle);
}

 void OCV3d_Camera::SetTarget(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z)
{
  (*((Handle_V3d_Camera*)nativeHandle))->SetTarget(X, Y, Z);
}

 void OCV3d_Camera::SetRadius(Quantity_Parameter Radius)
{
  (*((Handle_V3d_Camera*)nativeHandle))->SetRadius(Radius);
}

 void OCV3d_Camera::OnHideFace(OCNaroWrappers::OCV3d_View^ aView)
{
  (*((Handle_V3d_Camera*)nativeHandle))->OnHideFace(*((Handle_V3d_View*)aView->Handle));
}

 void OCV3d_Camera::OnSeeFace(OCNaroWrappers::OCV3d_View^ aView)
{
  (*((Handle_V3d_Camera*)nativeHandle))->OnSeeFace(*((Handle_V3d_View*)aView->Handle));
}

 void OCV3d_Camera::Tracking(OCNaroWrappers::OCV3d_View^ aView, OCV3d_TypeOfPickCamera WathPick, Standard_Integer Xpix, Standard_Integer Ypix)
{
  (*((Handle_V3d_Camera*)nativeHandle))->Tracking(*((Handle_V3d_View*)aView->Handle), (V3d_TypeOfPickCamera)WathPick, Xpix, Ypix);
}

 void OCV3d_Camera::AerialPilot(OCNaroWrappers::OCV3d_View^ aView, Standard_Integer Xpix, Standard_Integer Ypix)
{
  (*((Handle_V3d_Camera*)nativeHandle))->AerialPilot(*((Handle_V3d_View*)aView->Handle), Xpix, Ypix);
}

 void OCV3d_Camera::EarthPilot(OCNaroWrappers::OCV3d_View^ aView, Standard_Integer Xpix, Standard_Integer Ypix)
{
  (*((Handle_V3d_Camera*)nativeHandle))->EarthPilot(*((Handle_V3d_View*)aView->Handle), Xpix, Ypix);
}

 void OCV3d_Camera::Move(Quantity_Parameter Dist)
{
  (*((Handle_V3d_Camera*)nativeHandle))->Move(Dist);
}

 void OCV3d_Camera::GoUp(Quantity_Parameter Haut)
{
  (*((Handle_V3d_Camera*)nativeHandle))->GoUp(Haut);
}

 void OCV3d_Camera::Display(OCNaroWrappers::OCV3d_View^ aView, OCV3d_TypeOfRepresentation Representation)
{
  (*((Handle_V3d_Camera*)nativeHandle))->Display(*((Handle_V3d_View*)aView->Handle), (V3d_TypeOfRepresentation)Representation);
}

 void OCV3d_Camera::Erase()
{
  (*((Handle_V3d_Camera*)nativeHandle))->Erase();
}

 void OCV3d_Camera::Position(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z)
{
  (*((Handle_V3d_Camera*)nativeHandle))->Position(X, Y, Z);
}

 void OCV3d_Camera::Target(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z)
{
  (*((Handle_V3d_Camera*)nativeHandle))->Target(X, Y, Z);
}

 Quantity_PlaneAngle OCV3d_Camera::Angle()
{
  return (*((Handle_V3d_Camera*)nativeHandle))->Angle();
}

 Quantity_PlaneAngle OCV3d_Camera::Aperture()
{
  return (*((Handle_V3d_Camera*)nativeHandle))->Aperture();
}

 Quantity_Parameter OCV3d_Camera::Radius()
{
  return (*((Handle_V3d_Camera*)nativeHandle))->Radius();
}

 System::Boolean OCV3d_Camera::SeeOrHide(OCNaroWrappers::OCV3d_View^ aView)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Camera*)nativeHandle))->SeeOrHide(*((Handle_V3d_View*)aView->Handle)));
}

 OCV3d_TypeOfPickCamera OCV3d_Camera::Pick(OCNaroWrappers::OCV3d_View^ aView, Standard_Integer Xpix, Standard_Integer Ypix)
{
  return (OCV3d_TypeOfPickCamera)((*((Handle_V3d_Camera*)nativeHandle))->Pick(*((Handle_V3d_View*)aView->Handle), Xpix, Ypix));
}


