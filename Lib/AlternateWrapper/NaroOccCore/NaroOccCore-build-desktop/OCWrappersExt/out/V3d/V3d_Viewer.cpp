// File generated by CPPExt (CPP file)
//

#include "V3d_Viewer.h"
#include "../Converter.h"
#include "../Visual3d/Visual3d_ViewManager.h"
#include "V3d_OrthographicView.h"
#include "V3d_PerspectiveView.h"
#include "V3d_Light.h"
#include "../Graphic3d/Graphic3d_Structure.h"
#include "V3d_RectangularGrid.h"
#include "V3d_CircularGrid.h"
#include "../Graphic3d/Graphic3d_Group.h"
#include "../Graphic3d/Graphic3d_AspectMarker3d.h"
#include "V3d_View.h"
#include "V3d_Plane.h"
#include "../Aspect/Aspect_GraphicDevice.h"
#include "../Quantity/Quantity_Color.h"
#include "../gp/gp_Ax3.h"
#include "../Aspect/Aspect_Grid.h"
#include "../Aspect/Aspect_Background.h"
#include "../Aspect/Aspect_GradientBackground.h"
#include "../Graphic3d/Graphic3d_Vertex.h"
#include "../TColStd/TColStd_SequenceOfInteger.h"


using namespace OCNaroWrappers;

OCV3d_Viewer::OCV3d_Viewer(Handle(V3d_Viewer)* nativeHandle) : OCViewer_Viewer((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_V3d_Viewer(*nativeHandle);
}

OCV3d_Viewer::OCV3d_Viewer(OCNaroWrappers::OCAspect_GraphicDevice^ Device, System::String^ aName, System::String^ aDomain, Quantity_Length ViewSize, OCV3d_TypeOfOrientation ViewProj, OCQuantity_NameOfColor ViewBackground, OCV3d_TypeOfVisualization Visualization, OCV3d_TypeOfShadingModel ShadingModel, OCV3d_TypeOfUpdate UpdateMode, System::Boolean ComputedMode, System::Boolean DefaultComputedMode, OCV3d_TypeOfSurfaceDetail SurfaceDetail) : OCViewer_Viewer((OCDummy^)nullptr)

{
  nativeHandle = new Handle_V3d_Viewer(new V3d_Viewer(*((Handle_Aspect_GraphicDevice*)Device->Handle), OCConverter::StringToStandardExtString(aName), OCConverter::StringToStandardCString(aDomain), ViewSize, (V3d_TypeOfOrientation)ViewProj, (Quantity_NameOfColor)ViewBackground, (V3d_TypeOfVisualization)Visualization, (V3d_TypeOfShadingModel)ShadingModel, (V3d_TypeOfUpdate)UpdateMode, OCConverter::BooleanToStandardBoolean(ComputedMode), OCConverter::BooleanToStandardBoolean(DefaultComputedMode), (V3d_TypeOfSurfaceDetail)SurfaceDetail));
}

OCV3d_View^ OCV3d_Viewer::CreateView()
{
  Handle(V3d_View) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->CreateView();
  return gcnew OCV3d_View(&tmp);
}

OCV3d_OrthographicView^ OCV3d_Viewer::DefaultOrthographicView()
{
  Handle(V3d_OrthographicView) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->DefaultOrthographicView();
  return gcnew OCV3d_OrthographicView(&tmp);
}

OCV3d_PerspectiveView^ OCV3d_Viewer::DefaultPerspectiveView()
{
  Handle(V3d_PerspectiveView) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->DefaultPerspectiveView();
  return gcnew OCV3d_PerspectiveView(&tmp);
}

 void OCV3d_Viewer::SetViewOn()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetViewOn();
}

 void OCV3d_Viewer::SetViewOn(OCNaroWrappers::OCV3d_View^ View)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetViewOn(*((Handle_V3d_View*)View->Handle));
}

 void OCV3d_Viewer::SetViewOff()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetViewOff();
}

 void OCV3d_Viewer::SetViewOff(OCNaroWrappers::OCV3d_View^ View)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetViewOff(*((Handle_V3d_View*)View->Handle));
}

 void OCV3d_Viewer::Update()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->Update();
}

 void OCV3d_Viewer::UpdateLights()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->UpdateLights();
}

 void OCV3d_Viewer::Redraw()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->Redraw();
}

 void OCV3d_Viewer::Remove()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->Remove();
}

 void OCV3d_Viewer::Erase()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->Erase();
}

 void OCV3d_Viewer::UnHighlight()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->UnHighlight();
}

 void OCV3d_Viewer::SetDefaultBackgroundColor(OCQuantity_TypeOfColor Type, Quantity_Parameter V1, Quantity_Parameter V2, Quantity_Parameter V3)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultBackgroundColor((Quantity_TypeOfColor)Type, V1, V2, V3);
}

 void OCV3d_Viewer::SetDefaultBackgroundColor(OCQuantity_NameOfColor Name)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultBackgroundColor((Quantity_NameOfColor)Name);
}

 void OCV3d_Viewer::SetDefaultBackgroundColor(OCNaroWrappers::OCQuantity_Color^ Color)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultBackgroundColor(*((Quantity_Color*)Color->Handle));
}

 void OCV3d_Viewer::SetDefaultBgGradientColors(OCQuantity_NameOfColor Name1, OCQuantity_NameOfColor Name2, OCAspect_GradientFillMethod FillStyle)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultBgGradientColors((Quantity_NameOfColor)Name1, (Quantity_NameOfColor)Name2, (Aspect_GradientFillMethod)FillStyle);
}

 void OCV3d_Viewer::SetDefaultBgGradientColors(OCNaroWrappers::OCQuantity_Color^ Color1, OCNaroWrappers::OCQuantity_Color^ Color2, OCAspect_GradientFillMethod FillStyle)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultBgGradientColors(*((Quantity_Color*)Color1->Handle), *((Quantity_Color*)Color2->Handle), (Aspect_GradientFillMethod)FillStyle);
}

 void OCV3d_Viewer::SetDefaultViewSize(Quantity_Length Size)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultViewSize(Size);
}

 void OCV3d_Viewer::SetDefaultViewProj(OCV3d_TypeOfOrientation Orientation)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultViewProj((V3d_TypeOfOrientation)Orientation);
}

 void OCV3d_Viewer::SetDefaultVisualization(OCV3d_TypeOfVisualization Type)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultVisualization((V3d_TypeOfVisualization)Type);
}

 void OCV3d_Viewer::SetZBufferManagment(System::Boolean Automatic)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetZBufferManagment(OCConverter::BooleanToStandardBoolean(Automatic));
}

 System::Boolean OCV3d_Viewer::ZBufferManagment()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->ZBufferManagment());
}

 void OCV3d_Viewer::SetDefaultShadingModel(OCV3d_TypeOfShadingModel Type)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultShadingModel((V3d_TypeOfShadingModel)Type);
}

 void OCV3d_Viewer::SetDefaultSurfaceDetail(OCV3d_TypeOfSurfaceDetail Type)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultSurfaceDetail((V3d_TypeOfSurfaceDetail)Type);
}

 void OCV3d_Viewer::SetDefaultAngle(Quantity_PlaneAngle Angle)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultAngle(Angle);
}

 void OCV3d_Viewer::SetUpdateMode(OCV3d_TypeOfUpdate Mode)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetUpdateMode((V3d_TypeOfUpdate)Mode);
}

 void OCV3d_Viewer::SetDefaultTypeOfView(OCV3d_TypeOfView Type)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultTypeOfView((V3d_TypeOfView)Type);
}

 void OCV3d_Viewer::SetPrivilegedPlane(OCNaroWrappers::OCgp_Ax3^ aPlane)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetPrivilegedPlane(*((gp_Ax3*)aPlane->Handle));
}

OCgp_Ax3^ OCV3d_Viewer::PrivilegedPlane()
{
  gp_Ax3* tmp = new gp_Ax3();
  *tmp = (*((Handle_V3d_Viewer*)nativeHandle))->PrivilegedPlane();
  return gcnew OCgp_Ax3(tmp);
}

 void OCV3d_Viewer::DisplayPrivilegedPlane(System::Boolean OnOff, Quantity_Length aSize)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->DisplayPrivilegedPlane(OCConverter::BooleanToStandardBoolean(OnOff), aSize);
}

 void OCV3d_Viewer::SetLightOn(OCNaroWrappers::OCV3d_Light^ MyLight)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetLightOn(*((Handle_V3d_Light*)MyLight->Handle));
}

 void OCV3d_Viewer::SetLightOn()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetLightOn();
}

 void OCV3d_Viewer::SetLightOff(OCNaroWrappers::OCV3d_Light^ MyLight)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetLightOff(*((Handle_V3d_Light*)MyLight->Handle));
}

 void OCV3d_Viewer::SetLightOff()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetLightOff();
}

 void OCV3d_Viewer::DelLight(OCNaroWrappers::OCV3d_Light^ MyLight)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->DelLight(*((Handle_V3d_Light*)MyLight->Handle));
}

 void OCV3d_Viewer::SetCurrentSelectedLight(OCNaroWrappers::OCV3d_Light^ TheLight)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetCurrentSelectedLight(*((Handle_V3d_Light*)TheLight->Handle));
}

 void OCV3d_Viewer::ClearCurrentSelectedLight()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->ClearCurrentSelectedLight();
}

 void OCV3d_Viewer::DefaultBackgroundColor(OCQuantity_TypeOfColor Type, Quantity_Parameter& V1, Quantity_Parameter& V2, Quantity_Parameter& V3)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->DefaultBackgroundColor((Quantity_TypeOfColor)Type, V1, V2, V3);
}

OCQuantity_Color^ OCV3d_Viewer::DefaultBackgroundColor()
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = (*((Handle_V3d_Viewer*)nativeHandle))->DefaultBackgroundColor();
  return gcnew OCQuantity_Color(tmp);
}

 void OCV3d_Viewer::DefaultBgGradientColors(OCNaroWrappers::OCQuantity_Color^ Color1, OCNaroWrappers::OCQuantity_Color^ Color2)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->DefaultBgGradientColors(*((Quantity_Color*)Color1->Handle), *((Quantity_Color*)Color2->Handle));
}

 Quantity_Length OCV3d_Viewer::DefaultViewSize()
{
  return (*((Handle_V3d_Viewer*)nativeHandle))->DefaultViewSize();
}

 OCV3d_TypeOfOrientation OCV3d_Viewer::DefaultViewProj()
{
  return (OCV3d_TypeOfOrientation)((*((Handle_V3d_Viewer*)nativeHandle))->DefaultViewProj());
}

 OCV3d_TypeOfVisualization OCV3d_Viewer::DefaultVisualization()
{
  return (OCV3d_TypeOfVisualization)((*((Handle_V3d_Viewer*)nativeHandle))->DefaultVisualization());
}

 OCV3d_TypeOfShadingModel OCV3d_Viewer::DefaultShadingModel()
{
  return (OCV3d_TypeOfShadingModel)((*((Handle_V3d_Viewer*)nativeHandle))->DefaultShadingModel());
}

 OCV3d_TypeOfSurfaceDetail OCV3d_Viewer::DefaultSurfaceDetail()
{
  return (OCV3d_TypeOfSurfaceDetail)((*((Handle_V3d_Viewer*)nativeHandle))->DefaultSurfaceDetail());
}

 Quantity_PlaneAngle OCV3d_Viewer::DefaultAngle()
{
  return (*((Handle_V3d_Viewer*)nativeHandle))->DefaultAngle();
}

 OCV3d_TypeOfUpdate OCV3d_Viewer::UpdateMode()
{
  return (OCV3d_TypeOfUpdate)((*((Handle_V3d_Viewer*)nativeHandle))->UpdateMode());
}

 System::Boolean OCV3d_Viewer::IfMoreViews()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->IfMoreViews());
}

 void OCV3d_Viewer::InitActiveViews()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->InitActiveViews();
}

 System::Boolean OCV3d_Viewer::MoreActiveViews()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->MoreActiveViews());
}

 void OCV3d_Viewer::NextActiveViews()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->NextActiveViews();
}

OCV3d_View^ OCV3d_Viewer::ActiveView()
{
  Handle(V3d_View) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->ActiveView();
  return gcnew OCV3d_View(&tmp);
}

 System::Boolean OCV3d_Viewer::LastActiveView()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->LastActiveView());
}

 void OCV3d_Viewer::InitDefinedViews()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->InitDefinedViews();
}

 System::Boolean OCV3d_Viewer::MoreDefinedViews()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->MoreDefinedViews());
}

 void OCV3d_Viewer::NextDefinedViews()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->NextDefinedViews();
}

OCV3d_View^ OCV3d_Viewer::DefinedView()
{
  Handle(V3d_View) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->DefinedView();
  return gcnew OCV3d_View(&tmp);
}

 void OCV3d_Viewer::InitActiveLights()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->InitActiveLights();
}

 System::Boolean OCV3d_Viewer::MoreActiveLights()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->MoreActiveLights());
}

 void OCV3d_Viewer::NextActiveLights()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->NextActiveLights();
}

OCV3d_Light^ OCV3d_Viewer::ActiveLight()
{
  Handle(V3d_Light) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->ActiveLight();
  return gcnew OCV3d_Light(&tmp);
}

 void OCV3d_Viewer::InitDefinedLights()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->InitDefinedLights();
}

 System::Boolean OCV3d_Viewer::MoreDefinedLights()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->MoreDefinedLights());
}

 void OCV3d_Viewer::NextDefinedLights()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->NextDefinedLights();
}

OCV3d_Light^ OCV3d_Viewer::DefinedLight()
{
  Handle(V3d_Light) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->DefinedLight();
  return gcnew OCV3d_Light(&tmp);
}

 void OCV3d_Viewer::AddPlane(OCNaroWrappers::OCV3d_Plane^ MyPlane)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->AddPlane(*((Handle_V3d_Plane*)MyPlane->Handle));
}

 void OCV3d_Viewer::DelPlane(OCNaroWrappers::OCV3d_Plane^ MyPlane)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->DelPlane(*((Handle_V3d_Plane*)MyPlane->Handle));
}

 void OCV3d_Viewer::InitDefinedPlanes()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->InitDefinedPlanes();
}

 System::Boolean OCV3d_Viewer::MoreDefinedPlanes()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->MoreDefinedPlanes());
}

 void OCV3d_Viewer::NextDefinedPlanes()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->NextDefinedPlanes();
}

OCV3d_Plane^ OCV3d_Viewer::DefinedPlane()
{
  Handle(V3d_Plane) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->DefinedPlane();
  return gcnew OCV3d_Plane(&tmp);
}

OCVisual3d_ViewManager^ OCV3d_Viewer::Viewer()
{
  Handle(Visual3d_ViewManager) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->Viewer();
  return gcnew OCVisual3d_ViewManager(&tmp);
}

OCV3d_Light^ OCV3d_Viewer::CurrentSelectedLight()
{
  Handle(V3d_Light) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->CurrentSelectedLight();
  return gcnew OCV3d_Light(&tmp);
}

 System::Boolean OCV3d_Viewer::IsGlobalLight(OCNaroWrappers::OCV3d_Light^ TheLight)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->IsGlobalLight(*((Handle_V3d_Light*)TheLight->Handle)));
}

 System::Boolean OCV3d_Viewer::ComputedMode()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->ComputedMode());
}

 System::Boolean OCV3d_Viewer::DefaultComputedMode()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->DefaultComputedMode());
}

 void OCV3d_Viewer::ActivateGrid(OCAspect_GridType aGridType, OCAspect_GridDrawMode aGridDrawMode)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->ActivateGrid((Aspect_GridType)aGridType, (Aspect_GridDrawMode)aGridDrawMode);
}

 void OCV3d_Viewer::DeactivateGrid()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->DeactivateGrid();
}

 void OCV3d_Viewer::SetGridEcho(System::Boolean showGrid)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetGridEcho(OCConverter::BooleanToStandardBoolean(showGrid));
}

 void OCV3d_Viewer::SetGridEcho(OCNaroWrappers::OCGraphic3d_AspectMarker3d^ aMarker)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetGridEcho(*((Handle_Graphic3d_AspectMarker3d*)aMarker->Handle));
}

 System::Boolean OCV3d_Viewer::GridEcho()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->GridEcho());
}

 System::Boolean OCV3d_Viewer::IsActive()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->IsActive());
}

OCAspect_Grid^ OCV3d_Viewer::Grid()
{
  Handle(Aspect_Grid) tmp = (*((Handle_V3d_Viewer*)nativeHandle))->Grid();
  return gcnew OCAspect_Grid(&tmp);
}

 OCAspect_GridType OCV3d_Viewer::GridType()
{
  return (OCAspect_GridType)((*((Handle_V3d_Viewer*)nativeHandle))->GridType());
}

 OCAspect_GridDrawMode OCV3d_Viewer::GridDrawMode()
{
  return (OCAspect_GridDrawMode)((*((Handle_V3d_Viewer*)nativeHandle))->GridDrawMode());
}

 void OCV3d_Viewer::RectangularGridValues(Quantity_Length& XOrigin, Quantity_Length& YOrigin, Quantity_Length& XStep, Quantity_Length& YStep, Quantity_PlaneAngle& RotationAngle)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->RectangularGridValues(XOrigin, YOrigin, XStep, YStep, RotationAngle);
}

 void OCV3d_Viewer::SetRectangularGridValues(Quantity_Length XOrigin, Quantity_Length YOrigin, Quantity_Length XStep, Quantity_Length YStep, Quantity_PlaneAngle RotationAngle)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetRectangularGridValues(XOrigin, YOrigin, XStep, YStep, RotationAngle);
}

 void OCV3d_Viewer::CircularGridValues(Quantity_Length& XOrigin, Quantity_Length& YOrigin, Quantity_Length& RadiusStep, Standard_Integer& DivisionNumber, Quantity_PlaneAngle& RotationAngle)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->CircularGridValues(XOrigin, YOrigin, RadiusStep, DivisionNumber, RotationAngle);
}

 void OCV3d_Viewer::SetCircularGridValues(Quantity_Length XOrigin, Quantity_Length YOrigin, Quantity_Length RadiusStep, Standard_Integer DivisionNumber, Quantity_PlaneAngle RotationAngle)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetCircularGridValues(XOrigin, YOrigin, RadiusStep, DivisionNumber, RotationAngle);
}

 void OCV3d_Viewer::CircularGridGraphicValues(Quantity_Length& Radius, Quantity_Length& OffSet)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->CircularGridGraphicValues(Radius, OffSet);
}

 void OCV3d_Viewer::SetCircularGridGraphicValues(Quantity_Length Radius, Quantity_Length OffSet)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetCircularGridGraphicValues(Radius, OffSet);
}

 void OCV3d_Viewer::RectangularGridGraphicValues(Quantity_Length& XSize, Quantity_Length& YSize, Quantity_Length& OffSet)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->RectangularGridGraphicValues(XSize, YSize, OffSet);
}

 void OCV3d_Viewer::SetRectangularGridGraphicValues(Quantity_Length XSize, Quantity_Length YSize, Quantity_Length OffSet)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetRectangularGridGraphicValues(XSize, YSize, OffSet);
}

OCAspect_GradientBackground^ OCV3d_Viewer::GetGradientBackground()
{
  Aspect_GradientBackground* tmp = new Aspect_GradientBackground();
  *tmp = (*((Handle_V3d_Viewer*)nativeHandle))->GetGradientBackground();
  return gcnew OCAspect_GradientBackground(tmp);
}

 void OCV3d_Viewer::SetDefaultLights()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->SetDefaultLights();
}

 void OCV3d_Viewer::Init()
{
  (*((Handle_V3d_Viewer*)nativeHandle))->Init();
}

 System::Boolean OCV3d_Viewer::AddZLayer(Standard_Integer& theLayerId)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->AddZLayer(theLayerId));
}

 System::Boolean OCV3d_Viewer::RemoveZLayer(Standard_Integer theLayerId)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_Viewer*)nativeHandle))->RemoveZLayer(theLayerId));
}

 void OCV3d_Viewer::GetAllZLayers(OCNaroWrappers::OCTColStd_SequenceOfInteger^ theLayerSeq)
{
  (*((Handle_V3d_Viewer*)nativeHandle))->GetAllZLayers(*((TColStd_SequenceOfInteger*)theLayerSeq->Handle));
}


