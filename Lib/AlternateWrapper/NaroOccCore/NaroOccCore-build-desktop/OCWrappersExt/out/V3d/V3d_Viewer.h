// File generated by CPPExt (Transient)
//
#ifndef _V3d_Viewer_OCWrappers_HeaderFile
#define _V3d_Viewer_OCWrappers_HeaderFile

// include the wrapped class
#include <V3d_Viewer.hxx>
#include "../Converter.h"

#include "../Viewer/Viewer_Viewer.h"

#include "V3d_ListOfTransient.h"
#include "../Aspect/Aspect_Background.h"
#include "../Aspect/Aspect_GradientBackground.h"
#include "V3d_TypeOfOrientation.h"
#include "V3d_TypeOfVisualization.h"
#include "V3d_TypeOfShadingModel.h"
#include "V3d_TypeOfSurfaceDetail.h"
#include "V3d_TypeOfView.h"
#include "../TColStd/TColStd_ListIteratorOfListOfTransient.h"
#include "../gp/gp_Ax3.h"
#include "../Aspect/Aspect_GridType.h"
#include "../Quantity/Quantity_NameOfColor.h"
#include "V3d_TypeOfUpdate.h"
#include "../Quantity/Quantity_TypeOfColor.h"
#include "../Aspect/Aspect_GradientFillMethod.h"
#include "../Aspect/Aspect_GridDrawMode.h"


namespace OCNaroWrappers
{

ref class OCVisual3d_ViewManager;
ref class OCV3d_OrthographicView;
ref class OCV3d_PerspectiveView;
ref class OCV3d_Light;
ref class OCGraphic3d_Structure;
ref class OCV3d_RectangularGrid;
ref class OCV3d_CircularGrid;
ref class OCGraphic3d_Group;
ref class OCGraphic3d_AspectMarker3d;
ref class OCV3d_View;
ref class OCV3d_Plane;
ref class OCAspect_GraphicDevice;
ref class OCQuantity_Color;
ref class OCgp_Ax3;
ref class OCAspect_Grid;
ref class OCAspect_Background;
ref class OCAspect_GradientBackground;
ref class OCGraphic3d_Vertex;
ref class OCTColStd_SequenceOfInteger;


//! Defines services on Viewer type objects. <br>
//!            The methods of this class allow editing and <br>
//!            interrogation of the parameters linked to the viewer <br>
//!            its friend classes (View,light,plane). <br>
public ref class OCV3d_Viewer : OCViewer_Viewer {

protected:
  // dummy constructor;
  OCV3d_Viewer(OCDummy^) : OCViewer_Viewer((OCDummy^)nullptr) {};

public:

// constructor from native
OCV3d_Viewer(Handle(V3d_Viewer)* nativeHandle);

// Methods PUBLIC

//! Create a Viewer on the given device with the given parameters  or <br>
//!          with their default values. <br>//!        If the size of the view is <= 0 <br>
//!      if ComputedMode is false, only the degenerate mode will be used. <br>
OCV3d_Viewer(OCNaroWrappers::OCAspect_GraphicDevice^ Device, System::String^ aName, System::String^ aDomain, Quantity_Length ViewSize, OCV3d_TypeOfOrientation ViewProj, OCQuantity_NameOfColor ViewBackground, OCV3d_TypeOfVisualization Visualization, OCV3d_TypeOfShadingModel ShadingModel, OCV3d_TypeOfUpdate UpdateMode, System::Boolean ComputedMode, System::Boolean DefaultComputedMode, OCV3d_TypeOfSurfaceDetail SurfaceDetail);

//! creates a view in the viewer according to its <br>
//!          default parameters. <br>
 /*instead*/  OCV3d_View^ CreateView() ;


 /*instead*/  OCV3d_OrthographicView^ DefaultOrthographicView() ;


 /*instead*/  OCV3d_PerspectiveView^ DefaultPerspectiveView() ;

//! Activates all of the views of a viewer attached <br>
//!            to a window. <br>
 /*instead*/  void SetViewOn() ;

//! Activates a particular view in the Viewer . <br>
//!            Must be call if the Window attached to the view <br>
//!            has been Deiconified . <br>
 /*instead*/  void SetViewOn(OCNaroWrappers::OCV3d_View^ View) ;

//! Deactivates all the views of a Viewer <br>
//!            attached to a window. <br>
 /*instead*/  void SetViewOff() ;

//! Deactivates a particular view in the Viewer. <br>
//!            Must be call if the Window attached to the view <br>
//!            has been Iconified . <br>
 /*instead*/  void SetViewOff(OCNaroWrappers::OCV3d_View^ View) ;

//! Deprecated, Redraw() should be used instead. <br>
virtual /*instead*/  void Update() ;

//! Updates the lights of all the views of a viewer. <br>
 /*instead*/  void UpdateLights() ;

//! Redraws all the views of the Viewer even if no <br>
//!            modification has taken place. Must be called if <br>
//!            all the views of the Viewer are exposed, as for <br>
//!           example in a global DeIconification. <br>
 /*instead*/  void Redraw() ;

//! Suppresses the Viewer. <br>
 /*instead*/  void Remove() ;

//! Erase all Objects in All the views. <br>
 /*instead*/  void Erase() ;

//! UnHighlight all Objects in All the views. <br>
 /*instead*/  void UnHighlight() ;

//! Defines the default base colour of views attached <br>
//!            to the Viewer by supplying the type of colour <br>
//!            definition and the three component values.. <br>
 /*instead*/  void SetDefaultBackgroundColor(OCQuantity_TypeOfColor Type, Quantity_Parameter V1, Quantity_Parameter V2, Quantity_Parameter V3) ;

//! Defines the default background colour of views <br>
//!            attached to the viewer by supplying the name of the <br>
//!            colour under the form Quantity_NOC_xxxx . <br>
 /*instead*/  void SetDefaultBackgroundColor(OCQuantity_NameOfColor Name) ;

//! Defines the default background colour of views <br>
//!            attached to the viewer by supplying the color object <br>
 /*instead*/  void SetDefaultBackgroundColor(OCNaroWrappers::OCQuantity_Color^ Color) ;

//! Defines the default gradient background colours of view <br>
//!            attached to the viewer by supplying the name of the <br>
//!            colours under the form Quantity_NOC_xxxx . <br>
 /*instead*/  void SetDefaultBgGradientColors(OCQuantity_NameOfColor Name1, OCQuantity_NameOfColor Name2, OCAspect_GradientFillMethod FillStyle) ;

//! Defines the default gradient background colours of views <br>
//!            attached to the viewer by supplying the colour objects <br>
 /*instead*/  void SetDefaultBgGradientColors(OCNaroWrappers::OCQuantity_Color^ Color1, OCNaroWrappers::OCQuantity_Color^ Color2, OCAspect_GradientFillMethod FillStyle) ;

//! Gives a default size for the creation of views of <br>
//!            the viewer. <br>
 /*instead*/  void SetDefaultViewSize(Quantity_Length Size) ;

//! Gives the default projection for creating views <br>
//!            in the viewer. <br>
 /*instead*/  void SetDefaultViewProj(OCV3d_TypeOfOrientation Orientation) ;

//! Gives the default visualisation mode.. <br>
 /*instead*/  void SetDefaultVisualization(OCV3d_TypeOfVisualization Type) ;

//! defines the strategy concerning the ZBuffer activity. <br>
//!          If Automatic is true, ZBuffer will be activated or <br>
//!          deactivated depending on the fact that faces exist or <br>
//!          not in the Viewer. This will optimize the response time <br>
//!          in the case where only wireframe objects are displayed. <br>
//!          If Automatic is False, ZBuffer will be activated or <br>
//!          deactivated depending on the choice of SetVisualization <br>
//!          in each View. <br>
//!          Note that by default, the ZBufferManagment is not automatic. <br>
 /*instead*/  void SetZBufferManagment(System::Boolean Automatic) ;

//! returns the ZBuffer stategy choice. <br>
 /*instead*/  System::Boolean ZBufferManagment() ;

//! Gives the default type of SHADING. <br>
 /*instead*/  void SetDefaultShadingModel(OCV3d_TypeOfShadingModel Type) ;

//! Gives the default type of texture mapping. <br>
 /*instead*/  void SetDefaultSurfaceDetail(OCV3d_TypeOfSurfaceDetail Type) ;


 /*instead*/  void SetDefaultAngle(Quantity_PlaneAngle Angle) ;

//! Defines the mode of regenerating the views making <br>
//!            up the viewer. This can be immediate <ASAP> or <br>
//!            deferred <WAIT>. In this latter case, the views are <br>
//!            updated when the method Update(me) is called. <br>
 /*instead*/  void SetUpdateMode(OCV3d_TypeOfUpdate Mode) ;


 /*instead*/  void SetDefaultTypeOfView(OCV3d_TypeOfView Type) ;


 /*instead*/  void SetPrivilegedPlane(OCNaroWrappers::OCgp_Ax3^ aPlane) ;


 /*instead*/  OCgp_Ax3^ PrivilegedPlane() ;


 /*instead*/  void DisplayPrivilegedPlane(System::Boolean OnOff, Quantity_Length aSize) ;

//! Activates MyLight in the viewer. <br>
 /*instead*/  void SetLightOn(OCNaroWrappers::OCV3d_Light^ MyLight) ;

//! Activates all the lights defined in this viewer. <br>
 /*instead*/  void SetLightOn() ;

//! Desactivate MyLight in this viewer. <br>
 /*instead*/  void SetLightOff(OCNaroWrappers::OCV3d_Light^ MyLight) ;

//! Deactivate all the Lights defined in this viewer. <br>
 /*instead*/  void SetLightOff() ;

//! Delete Light in Sequence Of Lights. <br>
 /*instead*/  void DelLight(OCNaroWrappers::OCV3d_Light^ MyLight) ;

//! Defines the selected light. <br>
 /*instead*/  void SetCurrentSelectedLight(OCNaroWrappers::OCV3d_Light^ TheLight) ;

//! Defines the selected light at NULL. <br>
 /*instead*/  void ClearCurrentSelectedLight() ;

//! Returns the default background colour depending of the type. <br>
 /*instead*/  void DefaultBackgroundColor(OCQuantity_TypeOfColor Type, Quantity_Parameter& V1, Quantity_Parameter& V2, Quantity_Parameter& V3) ;

//! Returns the default background colour object. <br>
 /*instead*/  OCQuantity_Color^ DefaultBackgroundColor() ;

//! Returns the gradient background colour objects of the view. <br>
 /*instead*/  void DefaultBgGradientColors(OCNaroWrappers::OCQuantity_Color^ Color1, OCNaroWrappers::OCQuantity_Color^ Color2) ;

//! Returns the default size of the view. <br>
 /*instead*/  Quantity_Length DefaultViewSize() ;

//! Returns the default Projection. <br>
 /*instead*/  OCV3d_TypeOfOrientation DefaultViewProj() ;

//! Returns the default type of Visualization. <br>
 /*instead*/  OCV3d_TypeOfVisualization DefaultVisualization() ;

//! Returns the default type of Shading <br>
 /*instead*/  OCV3d_TypeOfShadingModel DefaultShadingModel() ;

//! Returns the default type of texture mapping <br>
 /*instead*/  OCV3d_TypeOfSurfaceDetail DefaultSurfaceDetail() ;


 /*instead*/  Quantity_PlaneAngle DefaultAngle() ;

//! Returns the regeneration mode of views in the viewer. <br>
 /*instead*/  OCV3d_TypeOfUpdate UpdateMode() ;

//! Returns True if One View more can be <br>
//!          activated in this Viewer. <br>
 /*instead*/  System::Boolean IfMoreViews() ;

//! initializes an iteration on the active views. <br>
 /*instead*/  void InitActiveViews() ;

//! returns true if there are more active view(s) to return. <br>
 /*instead*/  System::Boolean MoreActiveViews() ;

//! Go to the next active view <br>
//!           (if there is not, ActiveView will raise an exception) <br>
 /*instead*/  void NextActiveViews() ;


 /*instead*/  OCV3d_View^ ActiveView() ;

//! returns true if there is only <br>
//!          one active view. <br>
 /*instead*/  System::Boolean LastActiveView() ;

//! initializes an iteration on the Defined views. <br>
 /*instead*/  void InitDefinedViews() ;

//! returns true if there are more Defined view(s) to return. <br>
 /*instead*/  System::Boolean MoreDefinedViews() ;

//! Go to the next Defined view <br>
//!           (if there is not, DefinedView will raise an exception) <br>
 /*instead*/  void NextDefinedViews() ;


 /*instead*/  OCV3d_View^ DefinedView() ;

//! initializes an iteration on the active Lights. <br>
 /*instead*/  void InitActiveLights() ;

//! returns true if there are more active Light(s) to return. <br>
 /*instead*/  System::Boolean MoreActiveLights() ;

//! Go to the next active Light <br>
//!           (if there is not, ActiveLight will raise an exception) <br>
 /*instead*/  void NextActiveLights() ;


 /*instead*/  OCV3d_Light^ ActiveLight() ;

//! initializes an iteration on the Defined Lights. <br>
 /*instead*/  void InitDefinedLights() ;

//! returns true if there are more Defined Light(s) to return. <br>
 /*instead*/  System::Boolean MoreDefinedLights() ;

//! Go to the next Defined Light <br>
//!           (if there is not, DefinedLight will raise an exception) <br>
 /*instead*/  void NextDefinedLights() ;


 /*instead*/  OCV3d_Light^ DefinedLight() ;

//! Adds Plane in Sequence Of Planes. <br>
 /*instead*/  void AddPlane(OCNaroWrappers::OCV3d_Plane^ MyPlane) ;

//! Delete Plane in Sequence Of Planes. <br>
 /*instead*/  void DelPlane(OCNaroWrappers::OCV3d_Plane^ MyPlane) ;

//! initializes an iteration on the Defined Planes. <br>
 /*instead*/  void InitDefinedPlanes() ;

//! returns true if there are more Defined Plane(s) to return. <br>
 /*instead*/  System::Boolean MoreDefinedPlanes() ;

//! Go to the next Defined Plane <br>
//!           (if there is not, DefinedPlane will raise an exception) <br>
 /*instead*/  void NextDefinedPlanes() ;


 /*instead*/  OCV3d_Plane^ DefinedPlane() ;

//! Returns the viewer associated to Visual3d . <br>
 /*instead*/  OCVisual3d_ViewManager^ Viewer() ;

//! Returns the Selected Light. <br>
 /*instead*/  OCV3d_Light^ CurrentSelectedLight() ;


 /*instead*/  System::Boolean IsGlobalLight(OCNaroWrappers::OCV3d_Light^ TheLight) ;

//! returns true if the computed mode can be used. <br>
 /*instead*/  System::Boolean ComputedMode() ;

//! returns true if by default the computed mode must be used. <br>
 /*instead*/  System::Boolean DefaultComputedMode() ;

//! Activates the grid in all views of <me>. <br>
 /*instead*/  void ActivateGrid(OCAspect_GridType aGridType, OCAspect_GridDrawMode aGridDrawMode) ;

//! Deactivates the grid in all views of <me>. <br>
 /*instead*/  void DeactivateGrid() ;

//! Show/Don't show grid echo to the hit point. <br>
//! If TRUE,the grid echo will be shown at ConvertToGrid() time. <br>
 /*instead*/  void SetGridEcho(System::Boolean showGrid) ;

//! Show grid echo <aMarker> to the hit point. <br>
//!  Warning: When the grid echo marker is not set, <br>
//!           a default marker is build with the attributes: <br>
//!           marker type : Aspect_TOM_STAR <br>
//!           marker color : Quantity_NOC_GRAY90 <br>
//!           marker size : 3.0 <br>
 /*instead*/  void SetGridEcho(OCNaroWrappers::OCGraphic3d_AspectMarker3d^ aMarker) ;

//! Returns TRUE when grid echo must be displayed <br>
//!           at hit point. <br>
 /*instead*/  System::Boolean GridEcho() ;

//! Returns Standard_True if a grid is activated in <me>. <br>
 /*instead*/  System::Boolean IsActive() ;

//! Returns the defined grid in <me>. <br>
 /*instead*/  OCAspect_Grid^ Grid() ;

//! Returns the current grid type defined in <me>. <br>
 /*instead*/  OCAspect_GridType GridType() ;

//! Returns the current grid draw mode defined in <me>. <br>
 /*instead*/  OCAspect_GridDrawMode GridDrawMode() ;

//! Returns the definition of the rectangular grid. <br>
 /*instead*/  void RectangularGridValues(Quantity_Length& XOrigin, Quantity_Length& YOrigin, Quantity_Length& XStep, Quantity_Length& YStep, Quantity_PlaneAngle& RotationAngle) ;

//! Sets the definition of the rectangular grid. <br>
//!            <XOrigin>, <YOrigin> defines the origin of the grid. <br>
//!            <XStep> defines the interval between 2 vertical lines. <br>
//!            <YStep> defines the interval between 2 horizontal lines. <br>
//!            <RotationAngle> defines the rotation angle of the grid. <br>
 /*instead*/  void SetRectangularGridValues(Quantity_Length XOrigin, Quantity_Length YOrigin, Quantity_Length XStep, Quantity_Length YStep, Quantity_PlaneAngle RotationAngle) ;

//! Returns the definition of the circular grid. <br>
 /*instead*/  void CircularGridValues(Quantity_Length& XOrigin, Quantity_Length& YOrigin, Quantity_Length& RadiusStep, Standard_Integer& DivisionNumber, Quantity_PlaneAngle& RotationAngle) ;

//! Sets the definition of the circular grid. <br>
//!            <XOrigin>, <YOrigin> defines the origin of the grid. <br>
//!            <RadiusStep> defines the interval between 2 circles. <br>
//!            <DivisionNumber> defines the section number of one half circle. <br>
//!            <RotationAngle> defines the rotation angle of the grid. <br>
 /*instead*/  void SetCircularGridValues(Quantity_Length XOrigin, Quantity_Length YOrigin, Quantity_Length RadiusStep, Standard_Integer DivisionNumber, Quantity_PlaneAngle RotationAngle) ;

//! Returns the location and the size of the grid. <br>
 /*instead*/  void CircularGridGraphicValues(Quantity_Length& Radius, Quantity_Length& OffSet) ;

//! Sets the location and the size of the grid. <br>
//!            <XSize> defines the width of the grid. <br>
//!            <YSize> defines the height of the grid. <br>
//!            <OffSet> defines the displacement along the plane normal. <br>
 /*instead*/  void SetCircularGridGraphicValues(Quantity_Length Radius, Quantity_Length OffSet) ;

//! Returns the location and the size of the grid. <br>
 /*instead*/  void RectangularGridGraphicValues(Quantity_Length& XSize, Quantity_Length& YSize, Quantity_Length& OffSet) ;

//! Sets the location and the size of the grid. <br>
//!            <XSize> defines the width of the grid. <br>
//!            <YSize> defines the height of the grid. <br>
//!            <OffSet> defines the displacement along the plane normal. <br>
 /*instead*/  void SetRectangularGridGraphicValues(Quantity_Length XSize, Quantity_Length YSize, Quantity_Length OffSet) ;

//! Returns the gradient background of the view. <br>
 /*instead*/  OCAspect_GradientBackground^ GetGradientBackground() ;

//! defines default lights  - <br>
//!          positional-light 0.3 0. 0. <br>
//!          directional-light V3d_XnegYposZpos <br>
//!          directional-light V3d_XnegYneg <br>
//!          ambient-light <br>
 /*instead*/  void SetDefaultLights() ;


 /*instead*/  void Init() ;

//! Add a new top-level Z layer to all managed views and get <br>
//! its ID as <theLayerId> value. The Z layers are controlled entirely <br>
//! by viewer, it is not possible to add a layer to a <br>
//! particular view. The method returns Standard_False if the layer can <br>
//! not be created. The layer mechanism allows to display structures <br>
//! in higher layers in overlay of structures in lower layers. <br>
 /*instead*/  System::Boolean AddZLayer(Standard_Integer& theLayerId) ;

//! Remove Z layer with ID <theLayerId>. Method returns <br>
//! Standard_False if the layer can not be removed or doesn't exists. <br>
//! By default, there are always default bottom-level layer that can't <br>
//! be removed. <br>
 /*instead*/  System::Boolean RemoveZLayer(Standard_Integer theLayerId) ;

//! Return all Z layer ids in sequence ordered by overlay level <br>
//! from lowest layer to highest ( foreground ). The first layer ID <br>
//! in sequence is the default layer that can't be removed. <br>
 /*instead*/  void GetAllZLayers(OCNaroWrappers::OCTColStd_SequenceOfInteger^ theLayerSeq) ;

~OCV3d_Viewer()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
