// File generated by CPPExt (Transient)
//
#ifndef _V3d_Camera_OCWrappers_HeaderFile
#define _V3d_Camera_OCWrappers_HeaderFile

// include the wrapped class
#include <V3d_Camera.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../Graphic3d/Graphic3d_Vertex.h"
#include "V3d_TypeOfRepresentation.h"
#include "V3d_TypeOfPickCamera.h"


namespace OCNaroWrappers
{

ref class OCGraphic3d_Structure;
ref class OCV3d_View;
ref class OCGraphic3d_Group;
ref class OCGraphic3d_Vertex;


//! Creation and modification of a spot. <br>
public ref class OCV3d_Camera : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCV3d_Camera(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCV3d_Camera(Handle(V3d_Camera)* nativeHandle);

// Methods PUBLIC

//! Creates the camera which relatives of View <br>
OCV3d_Camera(OCNaroWrappers::OCV3d_View^ aView);

//! Defines the position of the camera.     . <br>
 /*instead*/  void SetPosition(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z) ;

//! Defines the angular position of camera. <br>//!  Warning! raises BadValue from Viewer if Abs(Angle) > 2*PI; <br>
//!	If the angle is <= 0 ou > PI . <br>
 /*instead*/  void SetAngle(Quantity_PlaneAngle Angle) ;

//! Defines the Aperture. <br>//!  Warning! raises BadValue from Viewer if angle <= 0 or > PI <br>
 /*instead*/  void SetAperture(Quantity_PlaneAngle Angle) ;

//! Defines the target of the camera. <br>
 /*instead*/  void SetTarget(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z) ;

//! Define the radius. <br>//!  Warning! raises BadValue from Viewer if radius <= 0 . <br>
 /*instead*/  void SetRadius(Quantity_Parameter Radius) ;

//! Calculate the position of the camera, on the hide face <br>
//!          of the picking sphere. <br>
 /*instead*/  void OnHideFace(OCNaroWrappers::OCV3d_View^ aView) ;

//! Calculate the position of the camera, on the seen face <br>
//!          of the picking sphere. <br>
 /*instead*/  void OnSeeFace(OCNaroWrappers::OCV3d_View^ aView) ;

//! Tracking the camera position, or the picking sphere, <br>
//!          or the radius of the picking sphere, that depends of <br>
//!          initial picking "WhatPick" (see the pick method). <br>
//!          If WhatPick is SPACECAMERA, then the parameters <br>
//!          Xpix, Ypix are the coordinates of a translation vector. <br>
 /*instead*/  void Tracking(OCNaroWrappers::OCV3d_View^ aView, OCV3d_TypeOfPickCamera WathPick, Standard_Integer Xpix, Standard_Integer Ypix) ;

//! Permits the driving of the camera in aerial mode. <br>
//!          The user believes fly in plane ... <br>
 /*instead*/  void AerialPilot(OCNaroWrappers::OCV3d_View^ aView, Standard_Integer Xpix, Standard_Integer Ypix) ;

//! Permits the driving of the camera in earth mode. <br>
//!          The user believes drive a car ... <br>
 /*instead*/  void EarthPilot(OCNaroWrappers::OCV3d_View^ aView, Standard_Integer Xpix, Standard_Integer Ypix) ;

//! The camera move or move back in the direction camera, <br>
//!          target of camera. <br>
 /*instead*/  void Move(Quantity_Parameter Dist) ;

//! The camera go up or go down on the z axis, <br>
//!          the direction of camera is the same. <br>
 /*instead*/  void GoUp(Quantity_Parameter Haut) ;

//! Display the graphic structure of camera <br>
//!          in the choosen view. We have two types of representation. <br>
//!          - SIMPLE : Only the camera position is displayed. <br>
//!          - COMPLETE : The position camera, the picking sphere and <br>
//!                       the radius of sphere are displayed. <br>
 /*instead*/  void Display(OCNaroWrappers::OCV3d_View^ aView, OCV3d_TypeOfRepresentation Representation) ;

//! Erase the graphic structure of camera. <br>
 /*instead*/  void Erase() ;

//! Returns the position of the camera. <br>
 /*instead*/  void Position(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z) ;

//! Returns the position of the target of camera. <br>
 /*instead*/  void Target(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z) ;

//! Returns the angle. <br>
 /*instead*/  Quantity_PlaneAngle Angle() ;

//! Returns the Aperture. <br>
 /*instead*/  Quantity_PlaneAngle Aperture() ;

//! Returns the radius of the picking sphere. <br>
 /*instead*/  Quantity_Parameter Radius() ;

//! Returns a Boolean on the status seen or hidden of the <br>
//!          camera. <br>
//!          If True the camera has seen. <br>
//!          If False the camera has hidden. <br>
 /*instead*/  System::Boolean SeeOrHide(OCNaroWrappers::OCV3d_View^ aView) ;

//! Returns the type of pick element. <br>
//!          "POSITIONCAMERA"  : Representation of camera position. <br>
//!          "SPACECAMERA"     : Representation of picking sphere. <br>
//!          "ExtRADIUSCAMERA" : Representation of extern arrow. <br>
//!          "IntRADIUSCAMERA" : Representation of intern arrow. <br>
//!          "RADIUSTEXTCAMERA": Representation of radius value. <br>
//!          "NOTHINGCAMERA"   : Any component of camera. <br>
//!          Determinate which type of tracking apply. <br>
 /*instead*/  OCV3d_TypeOfPickCamera Pick(OCNaroWrappers::OCV3d_View^ aView, Standard_Integer Xpix, Standard_Integer Ypix) ;

~OCV3d_Camera()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
