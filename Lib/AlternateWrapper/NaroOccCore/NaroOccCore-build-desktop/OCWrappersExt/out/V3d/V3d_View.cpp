// File generated by CPPExt (CPP file)
//

#include "V3d_View.h"
#include "../Converter.h"
#include "../Visual3d/Visual3d_View.h"
#include "../Aspect/Aspect_Window.h"
#include "../Graphic3d/Graphic3d_Plotter.h"
#include "../Aspect/Aspect_Grid.h"
#include "V3d_LayerMgr.h"
#include "../Graphic3d/Graphic3d_Structure.h"
#include "../Graphic3d/Graphic3d_Group.h"
#include "V3d_Viewer.h"
#include "../Quantity/Quantity_Color.h"
#include "../Graphic3d/Graphic3d_TextureEnv.h"
#include "V3d_Light.h"
#include "V3d_Plane.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../Aspect/Aspect_ColorScale.h"
#include "../Visual3d/Visual3d_ViewOrientation.h"
#include "../Visual3d/Visual3d_ViewMapping.h"
#include "../Aspect/Aspect_GradientBackground.h"
#include "../Graphic3d/Graphic3d_Vector.h"
#include "../TColStd/TColStd_Array2OfReal.h"
#include "../Graphic3d/Graphic3d_Vertex.h"
#include "../gp/gp_Ax3.h"
#include "../PlotMgt/PlotMgt_PlotterDriver.h"


using namespace OCNaroWrappers;

OCV3d_View::OCV3d_View(Handle(V3d_View)* nativeHandle) : OCViewer_View((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_V3d_View(*nativeHandle);
}

OCV3d_View::OCV3d_View(OCNaroWrappers::OCV3d_Viewer^ VM, OCV3d_TypeOfView Type) : OCViewer_View((OCDummy^)nullptr)

{}

OCV3d_View::OCV3d_View(OCNaroWrappers::OCV3d_Viewer^ VM, OCNaroWrappers::OCV3d_View^ V, OCV3d_TypeOfView Type) : OCViewer_View((OCDummy^)nullptr)

{}

 void OCV3d_View::SetWindow(OCNaroWrappers::OCAspect_Window^ IdWin)
{
  (*((Handle_V3d_View*)nativeHandle))->SetWindow(*((Handle_Aspect_Window*)IdWin->Handle));
}

 void OCV3d_View::SetWindow(OCNaroWrappers::OCAspect_Window^ aWindow, Aspect_RenderingContext aContext, Aspect_GraphicCallbackProc aDisplayCB, Standard_Address aClientData)
{
  (*((Handle_V3d_View*)nativeHandle))->SetWindow(*((Handle_Aspect_Window*)aWindow->Handle), aContext, aDisplayCB, aClientData);
}

 void OCV3d_View::SetMagnify(OCNaroWrappers::OCAspect_Window^ IdWin, OCNaroWrappers::OCV3d_View^ aPreviousView, Standard_Integer x1, Standard_Integer y1, Standard_Integer x2, Standard_Integer y2)
{
  (*((Handle_V3d_View*)nativeHandle))->SetMagnify(*((Handle_Aspect_Window*)IdWin->Handle), *((Handle_V3d_View*)aPreviousView->Handle), x1, y1, x2, y2);
}

 void OCV3d_View::Remove()
{
  (*((Handle_V3d_View*)nativeHandle))->Remove();
}

 void OCV3d_View::Update()
{
  (*((Handle_V3d_View*)nativeHandle))->Update();
}

 void OCV3d_View::Redraw()
{
  (*((Handle_V3d_View*)nativeHandle))->Redraw();
}

 void OCV3d_View::Redraw(Standard_Integer x, Standard_Integer y, Standard_Integer width, Standard_Integer height)
{
  (*((Handle_V3d_View*)nativeHandle))->Redraw(x, y, width, height);
}

 void OCV3d_View::MustBeResized()
{
  (*((Handle_V3d_View*)nativeHandle))->MustBeResized();
}

 void OCV3d_View::DoMapping()
{
  (*((Handle_V3d_View*)nativeHandle))->DoMapping();
}

 System::Boolean OCV3d_View::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->IsEmpty());
}

 void OCV3d_View::UpdateLights()
{
  (*((Handle_V3d_View*)nativeHandle))->UpdateLights();
}

 void OCV3d_View::SetBackgroundColor(OCQuantity_TypeOfColor Type, Quantity_Parameter V1, Quantity_Parameter V2, Quantity_Parameter V3)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBackgroundColor((Quantity_TypeOfColor)Type, V1, V2, V3);
}

 void OCV3d_View::SetBackgroundColor(OCNaroWrappers::OCQuantity_Color^ Color)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBackgroundColor(*((Quantity_Color*)Color->Handle));
}

 void OCV3d_View::SetBackgroundColor(OCQuantity_NameOfColor Name)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBackgroundColor((Quantity_NameOfColor)Name);
}

 void OCV3d_View::SetBgGradientColors(OCNaroWrappers::OCQuantity_Color^ Color1, OCNaroWrappers::OCQuantity_Color^ Color2, OCAspect_GradientFillMethod FillStyle, System::Boolean update)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBgGradientColors(*((Quantity_Color*)Color1->Handle), *((Quantity_Color*)Color2->Handle), (Aspect_GradientFillMethod)FillStyle, OCConverter::BooleanToStandardBoolean(update));
}

 void OCV3d_View::SetBgGradientColors(OCQuantity_NameOfColor Color1, OCQuantity_NameOfColor Color2, OCAspect_GradientFillMethod FillStyle, System::Boolean update)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBgGradientColors((Quantity_NameOfColor)Color1, (Quantity_NameOfColor)Color2, (Aspect_GradientFillMethod)FillStyle, OCConverter::BooleanToStandardBoolean(update));
}

 void OCV3d_View::SetBgGradientStyle(OCAspect_GradientFillMethod AMethod, System::Boolean update)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBgGradientStyle((Aspect_GradientFillMethod)AMethod, OCConverter::BooleanToStandardBoolean(update));
}

 void OCV3d_View::SetBackgroundImage(System::String^ FileName, OCAspect_FillMethod FillStyle, System::Boolean update)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBackgroundImage(OCConverter::StringToStandardCString(FileName), (Aspect_FillMethod)FillStyle, OCConverter::BooleanToStandardBoolean(update));
}

 void OCV3d_View::SetBgImageStyle(OCAspect_FillMethod FillStyle, System::Boolean update)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBgImageStyle((Aspect_FillMethod)FillStyle, OCConverter::BooleanToStandardBoolean(update));
}

 void OCV3d_View::SetAxis(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z, Quantity_Parameter Vx, Quantity_Parameter Vy, Quantity_Parameter Vz)
{
  (*((Handle_V3d_View*)nativeHandle))->SetAxis(X, Y, Z, Vx, Vy, Vz);
}

 void OCV3d_View::SetShadingModel(OCV3d_TypeOfShadingModel Model)
{
  (*((Handle_V3d_View*)nativeHandle))->SetShadingModel((V3d_TypeOfShadingModel)Model);
}

 void OCV3d_View::SetSurfaceDetail(OCV3d_TypeOfSurfaceDetail SurfaceDetail)
{
  (*((Handle_V3d_View*)nativeHandle))->SetSurfaceDetail((V3d_TypeOfSurfaceDetail)SurfaceDetail);
}

 void OCV3d_View::SetTextureEnv(OCNaroWrappers::OCGraphic3d_TextureEnv^ ATexture)
{
  (*((Handle_V3d_View*)nativeHandle))->SetTextureEnv(*((Handle_Graphic3d_TextureEnv*)ATexture->Handle));
}

 void OCV3d_View::SetVisualization(OCV3d_TypeOfVisualization Mode)
{
  (*((Handle_V3d_View*)nativeHandle))->SetVisualization((V3d_TypeOfVisualization)Mode);
}

 void OCV3d_View::SetAntialiasingOn()
{
  (*((Handle_V3d_View*)nativeHandle))->SetAntialiasingOn();
}

 void OCV3d_View::SetAntialiasingOff()
{
  (*((Handle_V3d_View*)nativeHandle))->SetAntialiasingOff();
}

 void OCV3d_View::SetZClippingDepth(Quantity_Length Depth)
{
  (*((Handle_V3d_View*)nativeHandle))->SetZClippingDepth(Depth);
}

 void OCV3d_View::SetZClippingWidth(Quantity_Length Width)
{
  (*((Handle_V3d_View*)nativeHandle))->SetZClippingWidth(Width);
}

 void OCV3d_View::SetZClippingType(OCV3d_TypeOfZclipping Type)
{
  (*((Handle_V3d_View*)nativeHandle))->SetZClippingType((V3d_TypeOfZclipping)Type);
}

 void OCV3d_View::SetZCueingDepth(Quantity_Length Depth)
{
  (*((Handle_V3d_View*)nativeHandle))->SetZCueingDepth(Depth);
}

 void OCV3d_View::SetZCueingWidth(Quantity_Length Width)
{
  (*((Handle_V3d_View*)nativeHandle))->SetZCueingWidth(Width);
}

 void OCV3d_View::SetZCueingOn()
{
  (*((Handle_V3d_View*)nativeHandle))->SetZCueingOn();
}

 void OCV3d_View::SetZCueingOff()
{
  (*((Handle_V3d_View*)nativeHandle))->SetZCueingOff();
}

 void OCV3d_View::SetLightOn(OCNaroWrappers::OCV3d_Light^ MyLight)
{
  (*((Handle_V3d_View*)nativeHandle))->SetLightOn(*((Handle_V3d_Light*)MyLight->Handle));
}

 void OCV3d_View::SetLightOn()
{
  (*((Handle_V3d_View*)nativeHandle))->SetLightOn();
}

 void OCV3d_View::SetLightOff(OCNaroWrappers::OCV3d_Light^ MyLight)
{
  (*((Handle_V3d_View*)nativeHandle))->SetLightOff(*((Handle_V3d_Light*)MyLight->Handle));
}

 void OCV3d_View::SetLightOff()
{
  (*((Handle_V3d_View*)nativeHandle))->SetLightOff();
}

 System::Boolean OCV3d_View::IsActiveLight(OCNaroWrappers::OCV3d_Light^ aLight)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->IsActiveLight(*((Handle_V3d_Light*)aLight->Handle)));
}

 void OCV3d_View::SetTransparency(System::Boolean AnActivity)
{
  (*((Handle_V3d_View*)nativeHandle))->SetTransparency(OCConverter::BooleanToStandardBoolean(AnActivity));
}

 void OCV3d_View::SetPlaneOn(OCNaroWrappers::OCV3d_Plane^ MyPlane)
{
  (*((Handle_V3d_View*)nativeHandle))->SetPlaneOn(*((Handle_V3d_Plane*)MyPlane->Handle));
}

 void OCV3d_View::SetPlaneOn()
{
  (*((Handle_V3d_View*)nativeHandle))->SetPlaneOn();
}

 void OCV3d_View::SetPlaneOff(OCNaroWrappers::OCV3d_Plane^ MyPlane)
{
  (*((Handle_V3d_View*)nativeHandle))->SetPlaneOff(*((Handle_V3d_Plane*)MyPlane->Handle));
}

 void OCV3d_View::SetPlaneOff()
{
  (*((Handle_V3d_View*)nativeHandle))->SetPlaneOff();
}

 System::Boolean OCV3d_View::IsActivePlane(OCNaroWrappers::OCV3d_Plane^ aPlane)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->IsActivePlane(*((Handle_V3d_Plane*)aPlane->Handle)));
}

 void OCV3d_View::ZBufferTriedronSetup(OCQuantity_NameOfColor XColor, OCQuantity_NameOfColor YColor, OCQuantity_NameOfColor ZColor, Standard_Real SizeRatio, Standard_Real AxisDiametr, Standard_Integer NbFacettes)
{
  (*((Handle_V3d_View*)nativeHandle))->ZBufferTriedronSetup((Quantity_NameOfColor)XColor, (Quantity_NameOfColor)YColor, (Quantity_NameOfColor)ZColor, SizeRatio, AxisDiametr, NbFacettes);
}

 void OCV3d_View::TriedronDisplay(OCAspect_TypeOfTriedronPosition APosition, OCQuantity_NameOfColor AColor, Standard_Real AScale, OCV3d_TypeOfVisualization AMode)
{
  (*((Handle_V3d_View*)nativeHandle))->TriedronDisplay((Aspect_TypeOfTriedronPosition)APosition, (Quantity_NameOfColor)AColor, AScale, (V3d_TypeOfVisualization)AMode);
}

 void OCV3d_View::TriedronErase()
{
  (*((Handle_V3d_View*)nativeHandle))->TriedronErase();
}

 void OCV3d_View::TriedronEcho(OCAspect_TypeOfTriedronEcho AType)
{
  (*((Handle_V3d_View*)nativeHandle))->TriedronEcho((Aspect_TypeOfTriedronEcho)AType);
}

 void OCV3d_View::GetGraduatedTrihedron(OCNaroWrappers::OCTCollection_ExtendedString^ xname, OCNaroWrappers::OCTCollection_ExtendedString^ yname, OCNaroWrappers::OCTCollection_ExtendedString^ zname, System::Boolean& xdrawname, System::Boolean& ydrawname, System::Boolean& zdrawname, System::Boolean& xdrawvalues, System::Boolean& ydrawvalues, System::Boolean& zdrawvalues, System::Boolean& drawgrid, System::Boolean& drawaxes, Standard_Integer& nbx, Standard_Integer& nby, Standard_Integer& nbz, Standard_Integer& xoffset, Standard_Integer& yoffset, Standard_Integer& zoffset, Standard_Integer& xaxisoffset, Standard_Integer& yaxisoffset, Standard_Integer& zaxisoffset, System::Boolean& xdrawtickmarks, System::Boolean& ydrawtickmarks, System::Boolean& zdrawtickmarks, Standard_Integer& xtickmarklength, Standard_Integer& ytickmarklength, Standard_Integer& ztickmarklength, OCNaroWrappers::OCQuantity_Color^ gridcolor, OCNaroWrappers::OCQuantity_Color^ xnamecolor, OCNaroWrappers::OCQuantity_Color^ ynamecolor, OCNaroWrappers::OCQuantity_Color^ znamecolor, OCNaroWrappers::OCQuantity_Color^ xcolor, OCNaroWrappers::OCQuantity_Color^ ycolor, OCNaroWrappers::OCQuantity_Color^ zcolor, OCNaroWrappers::OCTCollection_AsciiString^ fontOfNames, OCFont_FontAspect& styleOfNames, Standard_Integer& sizeOfNames, OCNaroWrappers::OCTCollection_AsciiString^ fontOfValues, OCFont_FontAspect& styleOfValues, Standard_Integer& sizeOfValues)
{
  (*((Handle_V3d_View*)nativeHandle))->GetGraduatedTrihedron(*((TCollection_ExtendedString*)xname->Handle), *((TCollection_ExtendedString*)yname->Handle), *((TCollection_ExtendedString*)zname->Handle), (Standard_Boolean&)(xdrawname), (Standard_Boolean&)(ydrawname), (Standard_Boolean&)(zdrawname), (Standard_Boolean&)(xdrawvalues), (Standard_Boolean&)(ydrawvalues), (Standard_Boolean&)(zdrawvalues), (Standard_Boolean&)(drawgrid), (Standard_Boolean&)(drawaxes), nbx, nby, nbz, xoffset, yoffset, zoffset, xaxisoffset, yaxisoffset, zaxisoffset, (Standard_Boolean&)(xdrawtickmarks), (Standard_Boolean&)(ydrawtickmarks), (Standard_Boolean&)(zdrawtickmarks), xtickmarklength, ytickmarklength, ztickmarklength, *((Quantity_Color*)gridcolor->Handle), *((Quantity_Color*)xnamecolor->Handle), *((Quantity_Color*)ynamecolor->Handle), *((Quantity_Color*)znamecolor->Handle), *((Quantity_Color*)xcolor->Handle), *((Quantity_Color*)ycolor->Handle), *((Quantity_Color*)zcolor->Handle), *((TCollection_AsciiString*)fontOfNames->Handle), (Font_FontAspect&)styleOfNames, sizeOfNames, *((TCollection_AsciiString*)fontOfValues->Handle), (Font_FontAspect&)styleOfValues, sizeOfValues);
}

 void OCV3d_View::GraduatedTrihedronDisplay(OCNaroWrappers::OCTCollection_ExtendedString^ xname, OCNaroWrappers::OCTCollection_ExtendedString^ yname, OCNaroWrappers::OCTCollection_ExtendedString^ zname, System::Boolean xdrawname, System::Boolean ydrawname, System::Boolean zdrawname, System::Boolean xdrawvalues, System::Boolean ydrawvalues, System::Boolean zdrawvalues, System::Boolean drawgrid, System::Boolean drawaxes, Standard_Integer nbx, Standard_Integer nby, Standard_Integer nbz, Standard_Integer xoffset, Standard_Integer yoffset, Standard_Integer zoffset, Standard_Integer xaxisoffset, Standard_Integer yaxisoffset, Standard_Integer zaxisoffset, System::Boolean xdrawtickmarks, System::Boolean ydrawtickmarks, System::Boolean zdrawtickmarks, Standard_Integer xtickmarklength, Standard_Integer ytickmarklength, Standard_Integer ztickmarklength, OCNaroWrappers::OCQuantity_Color^ gridcolor, OCNaroWrappers::OCQuantity_Color^ xnamecolor, OCNaroWrappers::OCQuantity_Color^ ynamecolor, OCNaroWrappers::OCQuantity_Color^ znamecolor, OCNaroWrappers::OCQuantity_Color^ xcolor, OCNaroWrappers::OCQuantity_Color^ ycolor, OCNaroWrappers::OCQuantity_Color^ zcolor, OCNaroWrappers::OCTCollection_AsciiString^ fontOfNames, OCFont_FontAspect styleOfNames, Standard_Integer sizeOfNames, OCNaroWrappers::OCTCollection_AsciiString^ fontOfValues, OCFont_FontAspect styleOfValues, Standard_Integer sizeOfValues)
{
  (*((Handle_V3d_View*)nativeHandle))->GraduatedTrihedronDisplay(*((TCollection_ExtendedString*)xname->Handle), *((TCollection_ExtendedString*)yname->Handle), *((TCollection_ExtendedString*)zname->Handle), OCConverter::BooleanToStandardBoolean(xdrawname), OCConverter::BooleanToStandardBoolean(ydrawname), OCConverter::BooleanToStandardBoolean(zdrawname), OCConverter::BooleanToStandardBoolean(xdrawvalues), OCConverter::BooleanToStandardBoolean(ydrawvalues), OCConverter::BooleanToStandardBoolean(zdrawvalues), OCConverter::BooleanToStandardBoolean(drawgrid), OCConverter::BooleanToStandardBoolean(drawaxes), nbx, nby, nbz, xoffset, yoffset, zoffset, xaxisoffset, yaxisoffset, zaxisoffset, OCConverter::BooleanToStandardBoolean(xdrawtickmarks), OCConverter::BooleanToStandardBoolean(ydrawtickmarks), OCConverter::BooleanToStandardBoolean(zdrawtickmarks), xtickmarklength, ytickmarklength, ztickmarklength, *((Quantity_Color*)gridcolor->Handle), *((Quantity_Color*)xnamecolor->Handle), *((Quantity_Color*)ynamecolor->Handle), *((Quantity_Color*)znamecolor->Handle), *((Quantity_Color*)xcolor->Handle), *((Quantity_Color*)ycolor->Handle), *((Quantity_Color*)zcolor->Handle), *((TCollection_AsciiString*)fontOfNames->Handle), (Font_FontAspect)styleOfNames, sizeOfNames, *((TCollection_AsciiString*)fontOfValues->Handle), (Font_FontAspect)styleOfValues, sizeOfValues);
}

 void OCV3d_View::GraduatedTrihedronErase()
{
  (*((Handle_V3d_View*)nativeHandle))->GraduatedTrihedronErase();
}

 void OCV3d_View::SetLayerMgr(OCNaroWrappers::OCV3d_LayerMgr^ aMgr)
{
  (*((Handle_V3d_View*)nativeHandle))->SetLayerMgr(*((Handle_V3d_LayerMgr*)aMgr->Handle));
}

 void OCV3d_View::ColorScaleDisplay()
{
  (*((Handle_V3d_View*)nativeHandle))->ColorScaleDisplay();
}

 void OCV3d_View::ColorScaleErase()
{
  (*((Handle_V3d_View*)nativeHandle))->ColorScaleErase();
}

 System::Boolean OCV3d_View::ColorScaleIsDisplayed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->ColorScaleIsDisplayed());
}

OCAspect_ColorScale^ OCV3d_View::ColorScale()
{
  Handle(Aspect_ColorScale) tmp = (*((Handle_V3d_View*)nativeHandle))->ColorScale();
  return gcnew OCAspect_ColorScale(&tmp);
}

 void OCV3d_View::SetFront()
{
  (*((Handle_V3d_View*)nativeHandle))->SetFront();
}

 void OCV3d_View::Rotate(Quantity_PlaneAngle Ax, Quantity_PlaneAngle Ay, Quantity_PlaneAngle Az, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Rotate(Ax, Ay, Az, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Rotate(Quantity_PlaneAngle Ax, Quantity_PlaneAngle Ay, Quantity_PlaneAngle Az, V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Rotate(Ax, Ay, Az, X, Y, Z, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Rotate(OCV3d_TypeOfAxe Axe, Quantity_PlaneAngle Angle, V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Rotate((V3d_TypeOfAxe)Axe, Angle, X, Y, Z, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Rotate(OCV3d_TypeOfAxe Axe, Quantity_PlaneAngle Angle, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Rotate((V3d_TypeOfAxe)Axe, Angle, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Rotate(Quantity_PlaneAngle Angle, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Rotate(Angle, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Move(Quantity_Length Dx, Quantity_Length Dy, Quantity_Length Dz, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Move(Dx, Dy, Dz, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Move(OCV3d_TypeOfAxe Axe, Quantity_Length Length, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Move((V3d_TypeOfAxe)Axe, Length, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Move(Quantity_Length Length, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Move(Length, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Translate(Quantity_Length Dx, Quantity_Length Dy, Quantity_Length Dz, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Translate(Dx, Dy, Dz, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Translate(OCV3d_TypeOfAxe Axe, Quantity_Length Length, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Translate((V3d_TypeOfAxe)Axe, Length, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Translate(Quantity_Length Length, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Translate(Length, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Place(Standard_Integer x, Standard_Integer y, Quantity_Factor aZoomFactor)
{
  (*((Handle_V3d_View*)nativeHandle))->Place(x, y, aZoomFactor);
}

 void OCV3d_View::Turn(Quantity_PlaneAngle Ax, Quantity_PlaneAngle Ay, Quantity_PlaneAngle Az, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Turn(Ax, Ay, Az, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Turn(OCV3d_TypeOfAxe Axe, Quantity_PlaneAngle Angle, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Turn((V3d_TypeOfAxe)Axe, Angle, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::Turn(Quantity_PlaneAngle Angle, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Turn(Angle, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::SetTwist(Quantity_PlaneAngle Angle)
{
  (*((Handle_V3d_View*)nativeHandle))->SetTwist(Angle);
}

 void OCV3d_View::SetEye(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z)
{
  (*((Handle_V3d_View*)nativeHandle))->SetEye(X, Y, Z);
}

 void OCV3d_View::SetDepth(Quantity_Length Depth)
{
  (*((Handle_V3d_View*)nativeHandle))->SetDepth(Depth);
}

 void OCV3d_View::SetProj(Quantity_Parameter Vx, Quantity_Parameter Vy, Quantity_Parameter Vz)
{
  (*((Handle_V3d_View*)nativeHandle))->SetProj(Vx, Vy, Vz);
}

 void OCV3d_View::SetProj(OCV3d_TypeOfOrientation Orientation)
{
  (*((Handle_V3d_View*)nativeHandle))->SetProj((V3d_TypeOfOrientation)Orientation);
}

 void OCV3d_View::SetAt(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z)
{
  (*((Handle_V3d_View*)nativeHandle))->SetAt(X, Y, Z);
}

 void OCV3d_View::SetUp(Quantity_Parameter Vx, Quantity_Parameter Vy, Quantity_Parameter Vz)
{
  (*((Handle_V3d_View*)nativeHandle))->SetUp(Vx, Vy, Vz);
}

 void OCV3d_View::SetUp(OCV3d_TypeOfOrientation Orientation)
{
  (*((Handle_V3d_View*)nativeHandle))->SetUp((V3d_TypeOfOrientation)Orientation);
}

 void OCV3d_View::SetViewOrientation(OCNaroWrappers::OCVisual3d_ViewOrientation^ VO)
{
  (*((Handle_V3d_View*)nativeHandle))->SetViewOrientation(*((Visual3d_ViewOrientation*)VO->Handle));
}

 void OCV3d_View::SetViewOrientationDefault()
{
  (*((Handle_V3d_View*)nativeHandle))->SetViewOrientationDefault();
}

 void OCV3d_View::ResetViewOrientation()
{
  (*((Handle_V3d_View*)nativeHandle))->ResetViewOrientation();
}

 void OCV3d_View::Panning(Quantity_Length Dx, Quantity_Length Dy, Quantity_Factor aZoomFactor, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->Panning(Dx, Dy, aZoomFactor, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::SetCenter(V3d_Coordinate Xc, V3d_Coordinate Yc)
{
  (*((Handle_V3d_View*)nativeHandle))->SetCenter(Xc, Yc);
}

 void OCV3d_View::SetCenter(Standard_Integer X, Standard_Integer Y)
{
  (*((Handle_V3d_View*)nativeHandle))->SetCenter(X, Y);
}

 void OCV3d_View::SetSize(Quantity_Length Size)
{
  (*((Handle_V3d_View*)nativeHandle))->SetSize(Size);
}

 void OCV3d_View::SetZSize(Quantity_Length Size)
{
  (*((Handle_V3d_View*)nativeHandle))->SetZSize(Size);
}

 void OCV3d_View::SetZoom(Quantity_Factor Coef, System::Boolean Start)
{
  (*((Handle_V3d_View*)nativeHandle))->SetZoom(Coef, OCConverter::BooleanToStandardBoolean(Start));
}

 void OCV3d_View::SetScale(Quantity_Factor Coef)
{
  (*((Handle_V3d_View*)nativeHandle))->SetScale(Coef);
}

 void OCV3d_View::SetAxialScale(Standard_Real Sx, Standard_Real Sy, Standard_Real Sz)
{
  (*((Handle_V3d_View*)nativeHandle))->SetAxialScale(Sx, Sy, Sz);
}

 void OCV3d_View::FitAll(Quantity_Coefficient Coef, System::Boolean FitZ, System::Boolean update)
{
  (*((Handle_V3d_View*)nativeHandle))->FitAll(Coef, OCConverter::BooleanToStandardBoolean(FitZ), OCConverter::BooleanToStandardBoolean(update));
}

 void OCV3d_View::ZFitAll(Quantity_Coefficient Coef)
{
  (*((Handle_V3d_View*)nativeHandle))->ZFitAll(Coef);
}

 void OCV3d_View::DepthFitAll(Quantity_Coefficient Aspect, Quantity_Coefficient Margin)
{
  (*((Handle_V3d_View*)nativeHandle))->DepthFitAll(Aspect, Margin);
}

 void OCV3d_View::FitAll(V3d_Coordinate Umin, V3d_Coordinate Vmin, V3d_Coordinate Umax, V3d_Coordinate Vmax)
{
  (*((Handle_V3d_View*)nativeHandle))->FitAll(Umin, Vmin, Umax, Vmax);
}

 void OCV3d_View::WindowFit(Standard_Integer Xmin, Standard_Integer Ymin, Standard_Integer Xmax, Standard_Integer Ymax)
{
  (*((Handle_V3d_View*)nativeHandle))->WindowFit(Xmin, Ymin, Xmax, Ymax);
}

 void OCV3d_View::SetViewingVolume(Standard_Real Left, Standard_Real Right, Standard_Real Bottom, Standard_Real Top, Standard_Real ZNear, Standard_Real ZFar)
{
  (*((Handle_V3d_View*)nativeHandle))->SetViewingVolume(Left, Right, Bottom, Top, ZNear, ZFar);
}

 void OCV3d_View::SetViewMapping(OCNaroWrappers::OCVisual3d_ViewMapping^ VM)
{
  (*((Handle_V3d_View*)nativeHandle))->SetViewMapping(*((Visual3d_ViewMapping*)VM->Handle));
}

 void OCV3d_View::SetViewMappingDefault()
{
  (*((Handle_V3d_View*)nativeHandle))->SetViewMappingDefault();
}

 void OCV3d_View::ResetViewMapping()
{
  (*((Handle_V3d_View*)nativeHandle))->ResetViewMapping();
}

 void OCV3d_View::Reset(System::Boolean update)
{
  (*((Handle_V3d_View*)nativeHandle))->Reset(OCConverter::BooleanToStandardBoolean(update));
}

 Quantity_Length OCV3d_View::Convert(Standard_Integer Vp)
{
  return (*((Handle_V3d_View*)nativeHandle))->Convert(Vp);
}

 void OCV3d_View::Convert(Standard_Integer Xp, Standard_Integer Yp, V3d_Coordinate& Xv, V3d_Coordinate& Yv)
{
  (*((Handle_V3d_View*)nativeHandle))->Convert(Xp, Yp, Xv, Yv);
}

 Standard_Integer OCV3d_View::Convert(Quantity_Length Vv)
{
  return (*((Handle_V3d_View*)nativeHandle))->Convert(Vv);
}

 void OCV3d_View::Convert(V3d_Coordinate Xv, V3d_Coordinate Yv, Standard_Integer& Xp, Standard_Integer& Yp)
{
  (*((Handle_V3d_View*)nativeHandle))->Convert(Xv, Yv, Xp, Yp);
}

 void OCV3d_View::Convert(Standard_Integer Xp, Standard_Integer Yp, V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z)
{
  (*((Handle_V3d_View*)nativeHandle))->Convert(Xp, Yp, X, Y, Z);
}

 void OCV3d_View::ConvertWithProj(Standard_Integer Xp, Standard_Integer Yp, V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z, Quantity_Parameter& Vx, Quantity_Parameter& Vy, Quantity_Parameter& Vz)
{
  (*((Handle_V3d_View*)nativeHandle))->ConvertWithProj(Xp, Yp, X, Y, Z, Vx, Vy, Vz);
}

 void OCV3d_View::ConvertToGrid(Standard_Integer Xp, Standard_Integer Yp, V3d_Coordinate& Xg, V3d_Coordinate& Yg, V3d_Coordinate& Zg)
{
  (*((Handle_V3d_View*)nativeHandle))->ConvertToGrid(Xp, Yp, Xg, Yg, Zg);
}

 void OCV3d_View::ConvertToGrid(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z, V3d_Coordinate& Xg, V3d_Coordinate& Yg, V3d_Coordinate& Zg)
{
  (*((Handle_V3d_View*)nativeHandle))->ConvertToGrid(X, Y, Z, Xg, Yg, Zg);
}

 void OCV3d_View::Convert(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z, Standard_Integer& Xp, Standard_Integer& Yp)
{
  (*((Handle_V3d_View*)nativeHandle))->Convert(X, Y, Z, Xp, Yp);
}

 void OCV3d_View::Project(V3d_Coordinate X, V3d_Coordinate Y, V3d_Coordinate Z, V3d_Coordinate& Xp, V3d_Coordinate& Yp)
{
  (*((Handle_V3d_View*)nativeHandle))->Project(X, Y, Z, Xp, Yp);
}

 void OCV3d_View::BackgroundColor(OCQuantity_TypeOfColor Type, Quantity_Parameter& V1, Quantity_Parameter& V2, Quantity_Parameter& V3)
{
  (*((Handle_V3d_View*)nativeHandle))->BackgroundColor((Quantity_TypeOfColor)Type, V1, V2, V3);
}

OCQuantity_Color^ OCV3d_View::BackgroundColor()
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = (*((Handle_V3d_View*)nativeHandle))->BackgroundColor();
  return gcnew OCQuantity_Color(tmp);
}

 void OCV3d_View::GradientBackgroundColors(OCNaroWrappers::OCQuantity_Color^ Color1, OCNaroWrappers::OCQuantity_Color^ Color2)
{
  (*((Handle_V3d_View*)nativeHandle))->GradientBackgroundColors(*((Quantity_Color*)Color1->Handle), *((Quantity_Color*)Color2->Handle));
}

OCAspect_GradientBackground^ OCV3d_View::GradientBackground()
{
  Aspect_GradientBackground* tmp = new Aspect_GradientBackground();
  *tmp = (*((Handle_V3d_View*)nativeHandle))->GradientBackground();
  return gcnew OCAspect_GradientBackground(tmp);
}

 Quantity_Factor OCV3d_View::Scale()
{
  return (*((Handle_V3d_View*)nativeHandle))->Scale();
}

 void OCV3d_View::AxialScale(Standard_Real& Sx, Standard_Real& Sy, Standard_Real& Sz)
{
  (*((Handle_V3d_View*)nativeHandle))->AxialScale(Sx, Sy, Sz);
}

 void OCV3d_View::Center(V3d_Coordinate& Xc, V3d_Coordinate& Yc)
{
  (*((Handle_V3d_View*)nativeHandle))->Center(Xc, Yc);
}

 void OCV3d_View::Size(Quantity_Length& Width, Quantity_Length& Height)
{
  (*((Handle_V3d_View*)nativeHandle))->Size(Width, Height);
}

 Standard_Real OCV3d_View::ZSize()
{
  return (*((Handle_V3d_View*)nativeHandle))->ZSize();
}

 void OCV3d_View::Eye(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z)
{
  (*((Handle_V3d_View*)nativeHandle))->Eye(X, Y, Z);
}

 void OCV3d_View::FocalReferencePoint(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z)
{
  (*((Handle_V3d_View*)nativeHandle))->FocalReferencePoint(X, Y, Z);
}

 void OCV3d_View::ProjReferenceAxe(Standard_Integer Xpix, Standard_Integer Ypix, V3d_Coordinate& XP, V3d_Coordinate& YP, V3d_Coordinate& ZP, V3d_Coordinate& VX, V3d_Coordinate& VY, V3d_Coordinate& VZ)
{
  (*((Handle_V3d_View*)nativeHandle))->ProjReferenceAxe(Xpix, Ypix, XP, YP, ZP, VX, VY, VZ);
}

 Quantity_Length OCV3d_View::Depth()
{
  return (*((Handle_V3d_View*)nativeHandle))->Depth();
}

 void OCV3d_View::Proj(Quantity_Parameter& Vx, Quantity_Parameter& Vy, Quantity_Parameter& Vz)
{
  (*((Handle_V3d_View*)nativeHandle))->Proj(Vx, Vy, Vz);
}

 void OCV3d_View::At(V3d_Coordinate& X, V3d_Coordinate& Y, V3d_Coordinate& Z)
{
  (*((Handle_V3d_View*)nativeHandle))->At(X, Y, Z);
}

 void OCV3d_View::Up(Quantity_Parameter& Vx, Quantity_Parameter& Vy, Quantity_Parameter& Vz)
{
  (*((Handle_V3d_View*)nativeHandle))->Up(Vx, Vy, Vz);
}

 Quantity_PlaneAngle OCV3d_View::Twist()
{
  return (*((Handle_V3d_View*)nativeHandle))->Twist();
}

 OCV3d_TypeOfShadingModel OCV3d_View::ShadingModel()
{
  return (OCV3d_TypeOfShadingModel)((*((Handle_V3d_View*)nativeHandle))->ShadingModel());
}

 OCV3d_TypeOfSurfaceDetail OCV3d_View::SurfaceDetail()
{
  return (OCV3d_TypeOfSurfaceDetail)((*((Handle_V3d_View*)nativeHandle))->SurfaceDetail());
}

OCGraphic3d_TextureEnv^ OCV3d_View::TextureEnv()
{
  Handle(Graphic3d_TextureEnv) tmp = (*((Handle_V3d_View*)nativeHandle))->TextureEnv();
  return gcnew OCGraphic3d_TextureEnv(&tmp);
}

 System::Boolean OCV3d_View::Transparency()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->Transparency());
}

 OCV3d_TypeOfVisualization OCV3d_View::Visualization()
{
  return (OCV3d_TypeOfVisualization)((*((Handle_V3d_View*)nativeHandle))->Visualization());
}

 System::Boolean OCV3d_View::Antialiasing()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->Antialiasing());
}

 System::Boolean OCV3d_View::ZCueing(Quantity_Length& Depth, Quantity_Length& Width)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->ZCueing(Depth, Width));
}

 OCV3d_TypeOfZclipping OCV3d_View::ZClipping(Quantity_Length& Depth, Quantity_Length& Width)
{
  return (OCV3d_TypeOfZclipping)((*((Handle_V3d_View*)nativeHandle))->ZClipping(Depth, Width));
}

 System::Boolean OCV3d_View::IfMoreLights()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->IfMoreLights());
}

 void OCV3d_View::InitActiveLights()
{
  (*((Handle_V3d_View*)nativeHandle))->InitActiveLights();
}

 System::Boolean OCV3d_View::MoreActiveLights()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->MoreActiveLights());
}

 void OCV3d_View::NextActiveLights()
{
  (*((Handle_V3d_View*)nativeHandle))->NextActiveLights();
}

OCV3d_Light^ OCV3d_View::ActiveLight()
{
  Handle(V3d_Light) tmp = (*((Handle_V3d_View*)nativeHandle))->ActiveLight();
  return gcnew OCV3d_Light(&tmp);
}

 System::Boolean OCV3d_View::IfMorePlanes()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->IfMorePlanes());
}

 void OCV3d_View::InitActivePlanes()
{
  (*((Handle_V3d_View*)nativeHandle))->InitActivePlanes();
}

 System::Boolean OCV3d_View::MoreActivePlanes()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->MoreActivePlanes());
}

 void OCV3d_View::NextActivePlanes()
{
  (*((Handle_V3d_View*)nativeHandle))->NextActivePlanes();
}

OCV3d_Plane^ OCV3d_View::ActivePlane()
{
  Handle(V3d_Plane) tmp = (*((Handle_V3d_View*)nativeHandle))->ActivePlane();
  return gcnew OCV3d_Plane(&tmp);
}

OCV3d_Viewer^ OCV3d_View::Viewer()
{
  Handle(V3d_Viewer) tmp = (*((Handle_V3d_View*)nativeHandle))->Viewer();
  return gcnew OCV3d_Viewer(&tmp);
}

 System::Boolean OCV3d_View::IfWindow()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->IfWindow());
}

OCAspect_Window^ OCV3d_View::Window()
{
  Handle(Aspect_Window) tmp = (*((Handle_V3d_View*)nativeHandle))->Window();
  return gcnew OCAspect_Window(&tmp);
}

 OCV3d_TypeOfView OCV3d_View::Type()
{
  return (OCV3d_TypeOfView)((*((Handle_V3d_View*)nativeHandle))->Type());
}

 void OCV3d_View::Pan(Standard_Integer Dx, Standard_Integer Dy, Quantity_Factor aZoomFactor)
{
  (*((Handle_V3d_View*)nativeHandle))->Pan(Dx, Dy, aZoomFactor);
}

 void OCV3d_View::Zoom(Standard_Integer X1, Standard_Integer Y1, Standard_Integer X2, Standard_Integer Y2)
{
  (*((Handle_V3d_View*)nativeHandle))->Zoom(X1, Y1, X2, Y2);
}

 void OCV3d_View::Zoom(Standard_Integer X, Standard_Integer Y)
{
  (*((Handle_V3d_View*)nativeHandle))->Zoom(X, Y);
}

 void OCV3d_View::StartZoomAtPoint(Standard_Integer xpix, Standard_Integer ypix)
{
  (*((Handle_V3d_View*)nativeHandle))->StartZoomAtPoint(xpix, ypix);
}

 void OCV3d_View::ZoomAtPoint(Standard_Integer mouseStartX, Standard_Integer mouseStartY, Standard_Integer mouseEndX, Standard_Integer mouseEndY)
{
  (*((Handle_V3d_View*)nativeHandle))->ZoomAtPoint(mouseStartX, mouseStartY, mouseEndX, mouseEndY);
}

 void OCV3d_View::AxialScale(Standard_Integer Dx, Standard_Integer Dy, OCV3d_TypeOfAxe Axis)
{
  (*((Handle_V3d_View*)nativeHandle))->AxialScale(Dx, Dy, (V3d_TypeOfAxe)Axis);
}

 void OCV3d_View::StartRotation(Standard_Integer X, Standard_Integer Y, Quantity_Ratio zRotationThreshold)
{
  (*((Handle_V3d_View*)nativeHandle))->StartRotation(X, Y, zRotationThreshold);
}

 void OCV3d_View::Rotation(Standard_Integer X, Standard_Integer Y)
{
  (*((Handle_V3d_View*)nativeHandle))->Rotation(X, Y);
}

 void OCV3d_View::SetFocale(Quantity_Length Focale)
{
  (*((Handle_V3d_View*)nativeHandle))->SetFocale(Focale);
}

 Quantity_Length OCV3d_View::Focale()
{
  return (*((Handle_V3d_View*)nativeHandle))->Focale();
}

OCVisual3d_View^ OCV3d_View::View()
{
  Handle(Visual3d_View) tmp = (*((Handle_V3d_View*)nativeHandle))->View();
  return gcnew OCVisual3d_View(&tmp);
}

OCVisual3d_ViewMapping^ OCV3d_View::ViewMapping()
{
  Visual3d_ViewMapping* tmp = new Visual3d_ViewMapping();
  *tmp = (*((Handle_V3d_View*)nativeHandle))->ViewMapping();
  return gcnew OCVisual3d_ViewMapping(tmp);
}

OCVisual3d_ViewOrientation^ OCV3d_View::ViewOrientation()
{
  Visual3d_ViewOrientation* tmp = new Visual3d_ViewOrientation();
  *tmp = (*((Handle_V3d_View*)nativeHandle))->ViewOrientation();
  return gcnew OCVisual3d_ViewOrientation(tmp);
}

 System::Boolean OCV3d_View::TransientManagerBeginDraw(System::Boolean DoubleBuffer, System::Boolean RetainMode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->TransientManagerBeginDraw(OCConverter::BooleanToStandardBoolean(DoubleBuffer), OCConverter::BooleanToStandardBoolean(RetainMode)));
}

 void OCV3d_View::TransientManagerClearDraw()
{
  (*((Handle_V3d_View*)nativeHandle))->TransientManagerClearDraw();
}

 System::Boolean OCV3d_View::TransientManagerBeginAddDraw()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->TransientManagerBeginAddDraw());
}

 void OCV3d_View::SetAnimationModeOn()
{
  (*((Handle_V3d_View*)nativeHandle))->SetAnimationModeOn();
}

 void OCV3d_View::SetAnimationModeOff()
{
  (*((Handle_V3d_View*)nativeHandle))->SetAnimationModeOff();
}

 System::Boolean OCV3d_View::AnimationModeIsOn()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->AnimationModeIsOn());
}

 void OCV3d_View::SetAnimationMode(System::Boolean anAnimationFlag, System::Boolean aDegenerationFlag)
{
  (*((Handle_V3d_View*)nativeHandle))->SetAnimationMode(OCConverter::BooleanToStandardBoolean(anAnimationFlag), OCConverter::BooleanToStandardBoolean(aDegenerationFlag));
}

 System::Boolean OCV3d_View::AnimationMode(System::Boolean& isDegenerate)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->AnimationMode((Standard_Boolean&)(isDegenerate)));
}

 void OCV3d_View::SetDegenerateModeOn()
{
  (*((Handle_V3d_View*)nativeHandle))->SetDegenerateModeOn();
}

 void OCV3d_View::SetDegenerateModeOff()
{
  (*((Handle_V3d_View*)nativeHandle))->SetDegenerateModeOff();
}

 System::Boolean OCV3d_View::DegenerateModeIsOn()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->DegenerateModeIsOn());
}

 void OCV3d_View::SetComputedMode(System::Boolean aMode)
{
  (*((Handle_V3d_View*)nativeHandle))->SetComputedMode(OCConverter::BooleanToStandardBoolean(aMode));
}

 System::Boolean OCV3d_View::ComputedMode()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->ComputedMode());
}

 void OCV3d_View::WindowFitAll(Standard_Integer Xmin, Standard_Integer Ymin, Standard_Integer Xmax, Standard_Integer Ymax)
{
  (*((Handle_V3d_View*)nativeHandle))->WindowFitAll(Xmin, Ymin, Xmax, Ymax);
}

 void OCV3d_View::SetPlotter(OCNaroWrappers::OCGraphic3d_Plotter^ aPlotter)
{
  (*((Handle_V3d_View*)nativeHandle))->SetPlotter(*((Handle_Graphic3d_Plotter*)aPlotter->Handle));
}

 void OCV3d_View::Plot()
{
  (*((Handle_V3d_View*)nativeHandle))->Plot();
}

 void OCV3d_View::SetGrid(OCNaroWrappers::OCgp_Ax3^ aPlane, OCNaroWrappers::OCAspect_Grid^ aGrid)
{
  (*((Handle_V3d_View*)nativeHandle))->SetGrid(*((gp_Ax3*)aPlane->Handle), *((Handle_Aspect_Grid*)aGrid->Handle));
}

 void OCV3d_View::SetGridGraphicValues(OCNaroWrappers::OCAspect_Grid^ aGrid)
{
  (*((Handle_V3d_View*)nativeHandle))->SetGridGraphicValues(*((Handle_Aspect_Grid*)aGrid->Handle));
}

 void OCV3d_View::SetGridActivity(System::Boolean aFlag)
{
  (*((Handle_V3d_View*)nativeHandle))->SetGridActivity(OCConverter::BooleanToStandardBoolean(aFlag));
}

 Standard_Real OCV3d_View::Tumble(Standard_Integer NbImages, System::Boolean AnimationMode)
{
  return (*((Handle_V3d_View*)nativeHandle))->Tumble(NbImages, OCConverter::BooleanToStandardBoolean(AnimationMode));
}

 void OCV3d_View::ScreenCopy(OCNaroWrappers::OCPlotMgt_PlotterDriver^ aPlotterDriver, System::Boolean fWhiteBackground, Quantity_Factor aScale)
{
  (*((Handle_V3d_View*)nativeHandle))->ScreenCopy(*((Handle_PlotMgt_PlotterDriver*)aPlotterDriver->Handle), OCConverter::BooleanToStandardBoolean(fWhiteBackground), aScale);
}

 System::Boolean OCV3d_View::Dump(System::String^ theFile, Graphic3d_BufferType theBufferType)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->Dump(OCConverter::StringToStandardCString(theFile), theBufferType));
}

 System::Boolean OCV3d_View::Dump(System::String^ theFile, OCAspect_FormatOfSheetPaper theFormat, Graphic3d_BufferType theBufferType)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->Dump(OCConverter::StringToStandardCString(theFile), (Aspect_FormatOfSheetPaper)theFormat, theBufferType));
}

 System::Boolean OCV3d_View::Print(System::IntPtr hPrnDC, System::Boolean showDialog, System::Boolean showBackground, System::String^ filename, OCAspect_PrintAlgo printAlgorithm)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->Print(hPrnDC.ToPointer(), OCConverter::BooleanToStandardBoolean(showDialog), OCConverter::BooleanToStandardBoolean(showBackground), OCConverter::StringToStandardCString(filename), (Aspect_PrintAlgo)printAlgorithm));
}

 System::Boolean OCV3d_View::ToPixMap(Image_PixMap& theImage, Standard_Integer theWidth, Standard_Integer theHeight, Graphic3d_BufferType theBufferType, System::Boolean theForceCentered)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->ToPixMap(theImage, theWidth, theHeight, theBufferType, OCConverter::BooleanToStandardBoolean(theForceCentered)));
}

 void OCV3d_View::SetProjModel(OCV3d_TypeOfProjectionModel amOdel)
{
  (*((Handle_V3d_View*)nativeHandle))->SetProjModel((V3d_TypeOfProjectionModel)amOdel);
}

 OCV3d_TypeOfProjectionModel OCV3d_View::ProjModel()
{
  return (OCV3d_TypeOfProjectionModel)((*((Handle_V3d_View*)nativeHandle))->ProjModel());
}

 void OCV3d_View::SetBackFacingModel(OCV3d_TypeOfBackfacingModel aModel)
{
  (*((Handle_V3d_View*)nativeHandle))->SetBackFacingModel((V3d_TypeOfBackfacingModel)aModel);
}

 OCV3d_TypeOfBackfacingModel OCV3d_View::BackFacingModel()
{
  return (OCV3d_TypeOfBackfacingModel)((*((Handle_V3d_View*)nativeHandle))->BackFacingModel());
}

 void OCV3d_View::EnableDepthTest(System::Boolean enable)
{
  (*((Handle_V3d_View*)nativeHandle))->EnableDepthTest(OCConverter::BooleanToStandardBoolean(enable));
}

 System::Boolean OCV3d_View::IsDepthTestEnabled()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->IsDepthTestEnabled());
}

 void OCV3d_View::EnableGLLight(System::Boolean enable)
{
  (*((Handle_V3d_View*)nativeHandle))->EnableGLLight(OCConverter::BooleanToStandardBoolean(enable));
}

 System::Boolean OCV3d_View::IsGLLightEnabled()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_V3d_View*)nativeHandle))->IsGLLightEnabled());
}


