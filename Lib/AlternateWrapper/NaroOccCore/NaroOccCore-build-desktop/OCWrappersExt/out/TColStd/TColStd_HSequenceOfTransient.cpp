// File generated by CPPExt (CPP file)
//

#include "TColStd_HSequenceOfTransient.h"
#include "../Converter.h"
#include "../Standard/Standard_Transient.h"
#include "TColStd_SequenceOfTransient.h"


using namespace OCNaroWrappers;

OCTColStd_HSequenceOfTransient::OCTColStd_HSequenceOfTransient(Handle(TColStd_HSequenceOfTransient)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TColStd_HSequenceOfTransient(*nativeHandle);
}

OCTColStd_HSequenceOfTransient::OCTColStd_HSequenceOfTransient() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TColStd_HSequenceOfTransient(new TColStd_HSequenceOfTransient());
}

 System::Boolean OCTColStd_HSequenceOfTransient::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCTColStd_HSequenceOfTransient::Length()
{
  return (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Length();
}

 void OCTColStd_HSequenceOfTransient::Clear()
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Clear();
}

 void OCTColStd_HSequenceOfTransient::Append(OCNaroWrappers::OCStandard_Transient^ anItem)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Append(*((Handle_Standard_Transient*)anItem->Handle));
}

 void OCTColStd_HSequenceOfTransient::Append(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Append(*((Handle_TColStd_HSequenceOfTransient*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfTransient::Prepend(OCNaroWrappers::OCStandard_Transient^ anItem)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Prepend(*((Handle_Standard_Transient*)anItem->Handle));
}

 void OCTColStd_HSequenceOfTransient::Prepend(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Prepend(*((Handle_TColStd_HSequenceOfTransient*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfTransient::Reverse()
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Reverse();
}

 void OCTColStd_HSequenceOfTransient::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCStandard_Transient^ anItem)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->InsertBefore(anIndex, *((Handle_Standard_Transient*)anItem->Handle));
}

 void OCTColStd_HSequenceOfTransient::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->InsertBefore(anIndex, *((Handle_TColStd_HSequenceOfTransient*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfTransient::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCStandard_Transient^ anItem)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->InsertAfter(anIndex, *((Handle_Standard_Transient*)anItem->Handle));
}

 void OCTColStd_HSequenceOfTransient::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->InsertAfter(anIndex, *((Handle_TColStd_HSequenceOfTransient*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfTransient::Exchange(Standard_Integer anIndex, Standard_Integer anOtherIndex)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Exchange(anIndex, anOtherIndex);
}

OCTColStd_HSequenceOfTransient^ OCTColStd_HSequenceOfTransient::Split(Standard_Integer anIndex)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Split(anIndex);
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

 void OCTColStd_HSequenceOfTransient::SetValue(Standard_Integer anIndex, OCNaroWrappers::OCStandard_Transient^ anItem)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->SetValue(anIndex, *((Handle_Standard_Transient*)anItem->Handle));
}

OCStandard_Transient^ OCTColStd_HSequenceOfTransient::Value(Standard_Integer anIndex)
{
  Handle(Standard_Transient) tmp = (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Value(anIndex);
  return gcnew OCStandard_Transient(&tmp);
}

OCStandard_Transient^ OCTColStd_HSequenceOfTransient::ChangeValue(Standard_Integer anIndex)
{
  Handle(Standard_Transient) tmp = (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->ChangeValue(anIndex);
  return gcnew OCStandard_Transient(&tmp);
}

 void OCTColStd_HSequenceOfTransient::Remove(Standard_Integer anIndex)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Remove(anIndex);
}

 void OCTColStd_HSequenceOfTransient::Remove(Standard_Integer fromIndex, Standard_Integer toIndex)
{
  (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Remove(fromIndex, toIndex);
}

OCTColStd_SequenceOfTransient^ OCTColStd_HSequenceOfTransient::Sequence()
{
  TColStd_SequenceOfTransient* tmp = new TColStd_SequenceOfTransient();
  *tmp = (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->Sequence();
  return gcnew OCTColStd_SequenceOfTransient(tmp);
}

OCTColStd_SequenceOfTransient^ OCTColStd_HSequenceOfTransient::ChangeSequence()
{
  TColStd_SequenceOfTransient* tmp = new TColStd_SequenceOfTransient();
  *tmp = (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->ChangeSequence();
  return gcnew OCTColStd_SequenceOfTransient(tmp);
}

OCTColStd_HSequenceOfTransient^ OCTColStd_HSequenceOfTransient::ShallowCopy()
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_TColStd_HSequenceOfTransient*)nativeHandle))->ShallowCopy();
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}


