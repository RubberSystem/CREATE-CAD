// File generated by CPPExt (CPP file)
//

#include "TColStd_HSequenceOfReal.h"
#include "../Converter.h"
#include "TColStd_SequenceOfReal.h"


using namespace OCNaroWrappers;

OCTColStd_HSequenceOfReal::OCTColStd_HSequenceOfReal(Handle(TColStd_HSequenceOfReal)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TColStd_HSequenceOfReal(*nativeHandle);
}

OCTColStd_HSequenceOfReal::OCTColStd_HSequenceOfReal() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TColStd_HSequenceOfReal(new TColStd_HSequenceOfReal());
}

 System::Boolean OCTColStd_HSequenceOfReal::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCTColStd_HSequenceOfReal::Length()
{
  return (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Length();
}

 void OCTColStd_HSequenceOfReal::Clear()
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Clear();
}

 void OCTColStd_HSequenceOfReal::Append(Standard_Real anItem)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Append(anItem);
}

 void OCTColStd_HSequenceOfReal::Append(OCNaroWrappers::OCTColStd_HSequenceOfReal^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Append(*((Handle_TColStd_HSequenceOfReal*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfReal::Prepend(Standard_Real anItem)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Prepend(anItem);
}

 void OCTColStd_HSequenceOfReal::Prepend(OCNaroWrappers::OCTColStd_HSequenceOfReal^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Prepend(*((Handle_TColStd_HSequenceOfReal*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfReal::Reverse()
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Reverse();
}

 void OCTColStd_HSequenceOfReal::InsertBefore(Standard_Integer anIndex, Standard_Real anItem)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->InsertBefore(anIndex, anItem);
}

 void OCTColStd_HSequenceOfReal::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCTColStd_HSequenceOfReal^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->InsertBefore(anIndex, *((Handle_TColStd_HSequenceOfReal*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfReal::InsertAfter(Standard_Integer anIndex, Standard_Real anItem)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->InsertAfter(anIndex, anItem);
}

 void OCTColStd_HSequenceOfReal::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCTColStd_HSequenceOfReal^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->InsertAfter(anIndex, *((Handle_TColStd_HSequenceOfReal*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfReal::Exchange(Standard_Integer anIndex, Standard_Integer anOtherIndex)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Exchange(anIndex, anOtherIndex);
}

OCTColStd_HSequenceOfReal^ OCTColStd_HSequenceOfReal::Split(Standard_Integer anIndex)
{
  Handle(TColStd_HSequenceOfReal) tmp = (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Split(anIndex);
  return gcnew OCTColStd_HSequenceOfReal(&tmp);
}

 void OCTColStd_HSequenceOfReal::SetValue(Standard_Integer anIndex, Standard_Real anItem)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->SetValue(anIndex, anItem);
}

 Standard_Real OCTColStd_HSequenceOfReal::Value(Standard_Integer anIndex)
{
  return (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Value(anIndex);
}

 Standard_Real OCTColStd_HSequenceOfReal::ChangeValue(Standard_Integer anIndex)
{
  return (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->ChangeValue(anIndex);
}

 void OCTColStd_HSequenceOfReal::Remove(Standard_Integer anIndex)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Remove(anIndex);
}

 void OCTColStd_HSequenceOfReal::Remove(Standard_Integer fromIndex, Standard_Integer toIndex)
{
  (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Remove(fromIndex, toIndex);
}

OCTColStd_SequenceOfReal^ OCTColStd_HSequenceOfReal::Sequence()
{
  TColStd_SequenceOfReal* tmp = new TColStd_SequenceOfReal();
  *tmp = (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->Sequence();
  return gcnew OCTColStd_SequenceOfReal(tmp);
}

OCTColStd_SequenceOfReal^ OCTColStd_HSequenceOfReal::ChangeSequence()
{
  TColStd_SequenceOfReal* tmp = new TColStd_SequenceOfReal();
  *tmp = (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->ChangeSequence();
  return gcnew OCTColStd_SequenceOfReal(tmp);
}

OCTColStd_HSequenceOfReal^ OCTColStd_HSequenceOfReal::ShallowCopy()
{
  Handle(TColStd_HSequenceOfReal) tmp = (*((Handle_TColStd_HSequenceOfReal*)nativeHandle))->ShallowCopy();
  return gcnew OCTColStd_HSequenceOfReal(&tmp);
}


