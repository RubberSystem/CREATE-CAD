// File generated by CPPExt (CPP file)
//

#include "TColStd_HSequenceOfInteger.h"
#include "../Converter.h"
#include "TColStd_SequenceOfInteger.h"


using namespace OCNaroWrappers;

OCTColStd_HSequenceOfInteger::OCTColStd_HSequenceOfInteger(Handle(TColStd_HSequenceOfInteger)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TColStd_HSequenceOfInteger(*nativeHandle);
}

OCTColStd_HSequenceOfInteger::OCTColStd_HSequenceOfInteger() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TColStd_HSequenceOfInteger(new TColStd_HSequenceOfInteger());
}

 System::Boolean OCTColStd_HSequenceOfInteger::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCTColStd_HSequenceOfInteger::Length()
{
  return (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Length();
}

 void OCTColStd_HSequenceOfInteger::Clear()
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Clear();
}

 void OCTColStd_HSequenceOfInteger::Append(Standard_Integer anItem)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Append(anItem);
}

 void OCTColStd_HSequenceOfInteger::Append(OCNaroWrappers::OCTColStd_HSequenceOfInteger^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Append(*((Handle_TColStd_HSequenceOfInteger*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfInteger::Prepend(Standard_Integer anItem)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Prepend(anItem);
}

 void OCTColStd_HSequenceOfInteger::Prepend(OCNaroWrappers::OCTColStd_HSequenceOfInteger^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Prepend(*((Handle_TColStd_HSequenceOfInteger*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfInteger::Reverse()
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Reverse();
}

 void OCTColStd_HSequenceOfInteger::InsertBefore(Standard_Integer anIndex, Standard_Integer anItem)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->InsertBefore(anIndex, anItem);
}

 void OCTColStd_HSequenceOfInteger::InsertBefore(Standard_Integer anIndex, OCNaroWrappers::OCTColStd_HSequenceOfInteger^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->InsertBefore(anIndex, *((Handle_TColStd_HSequenceOfInteger*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfInteger::InsertAfter(Standard_Integer anIndex, Standard_Integer anItem)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->InsertAfter(anIndex, anItem);
}

 void OCTColStd_HSequenceOfInteger::InsertAfter(Standard_Integer anIndex, OCNaroWrappers::OCTColStd_HSequenceOfInteger^ aSequence)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->InsertAfter(anIndex, *((Handle_TColStd_HSequenceOfInteger*)aSequence->Handle));
}

 void OCTColStd_HSequenceOfInteger::Exchange(Standard_Integer anIndex, Standard_Integer anOtherIndex)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Exchange(anIndex, anOtherIndex);
}

OCTColStd_HSequenceOfInteger^ OCTColStd_HSequenceOfInteger::Split(Standard_Integer anIndex)
{
  Handle(TColStd_HSequenceOfInteger) tmp = (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Split(anIndex);
  return gcnew OCTColStd_HSequenceOfInteger(&tmp);
}

 void OCTColStd_HSequenceOfInteger::SetValue(Standard_Integer anIndex, Standard_Integer anItem)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->SetValue(anIndex, anItem);
}

 Standard_Integer OCTColStd_HSequenceOfInteger::Value(Standard_Integer anIndex)
{
  return (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Value(anIndex);
}

 Standard_Integer OCTColStd_HSequenceOfInteger::ChangeValue(Standard_Integer anIndex)
{
  return (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->ChangeValue(anIndex);
}

 void OCTColStd_HSequenceOfInteger::Remove(Standard_Integer anIndex)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Remove(anIndex);
}

 void OCTColStd_HSequenceOfInteger::Remove(Standard_Integer fromIndex, Standard_Integer toIndex)
{
  (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Remove(fromIndex, toIndex);
}

OCTColStd_SequenceOfInteger^ OCTColStd_HSequenceOfInteger::Sequence()
{
  TColStd_SequenceOfInteger* tmp = new TColStd_SequenceOfInteger();
  *tmp = (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->Sequence();
  return gcnew OCTColStd_SequenceOfInteger(tmp);
}

OCTColStd_SequenceOfInteger^ OCTColStd_HSequenceOfInteger::ChangeSequence()
{
  TColStd_SequenceOfInteger* tmp = new TColStd_SequenceOfInteger();
  *tmp = (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->ChangeSequence();
  return gcnew OCTColStd_SequenceOfInteger(tmp);
}

OCTColStd_HSequenceOfInteger^ OCTColStd_HSequenceOfInteger::ShallowCopy()
{
  Handle(TColStd_HSequenceOfInteger) tmp = (*((Handle_TColStd_HSequenceOfInteger*)nativeHandle))->ShallowCopy();
  return gcnew OCTColStd_HSequenceOfInteger(&tmp);
}


