// File generated by CPPExt (CPP file)
//

#include "TColStd_SetOfInteger.h"
#include "../Converter.h"
#include "TColStd_SetIteratorOfSetOfInteger.h"
#include "TColStd_SetListOfSetOfInteger.h"
#include "TColStd_ListNodeOfSetListOfSetOfInteger.h"
#include "TColStd_ListIteratorOfSetListOfSetOfInteger.h"


using namespace OCNaroWrappers;

OCTColStd_SetOfInteger::OCTColStd_SetOfInteger(TColStd_SetOfInteger* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTColStd_SetOfInteger::OCTColStd_SetOfInteger() 
{
  nativeHandle = new TColStd_SetOfInteger();
}

 Standard_Integer OCTColStd_SetOfInteger::Extent()
{
  return ((TColStd_SetOfInteger*)nativeHandle)->Extent();
}

 System::Boolean OCTColStd_SetOfInteger::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((TColStd_SetOfInteger*)nativeHandle)->IsEmpty());
}

 void OCTColStd_SetOfInteger::Clear()
{
  ((TColStd_SetOfInteger*)nativeHandle)->Clear();
}

 System::Boolean OCTColStd_SetOfInteger::Add(Standard_Integer T)
{
  return OCConverter::StandardBooleanToBoolean(((TColStd_SetOfInteger*)nativeHandle)->Add(T));
}

 System::Boolean OCTColStd_SetOfInteger::Remove(Standard_Integer T)
{
  return OCConverter::StandardBooleanToBoolean(((TColStd_SetOfInteger*)nativeHandle)->Remove(T));
}

 void OCTColStd_SetOfInteger::Union(OCNaroWrappers::OCTColStd_SetOfInteger^ B)
{
  ((TColStd_SetOfInteger*)nativeHandle)->Union(*((TColStd_SetOfInteger*)B->Handle));
}

 void OCTColStd_SetOfInteger::Intersection(OCNaroWrappers::OCTColStd_SetOfInteger^ B)
{
  ((TColStd_SetOfInteger*)nativeHandle)->Intersection(*((TColStd_SetOfInteger*)B->Handle));
}

 void OCTColStd_SetOfInteger::Difference(OCNaroWrappers::OCTColStd_SetOfInteger^ B)
{
  ((TColStd_SetOfInteger*)nativeHandle)->Difference(*((TColStd_SetOfInteger*)B->Handle));
}

 System::Boolean OCTColStd_SetOfInteger::Contains(Standard_Integer T)
{
  return OCConverter::StandardBooleanToBoolean(((TColStd_SetOfInteger*)nativeHandle)->Contains(T));
}

 System::Boolean OCTColStd_SetOfInteger::IsASubset(OCNaroWrappers::OCTColStd_SetOfInteger^ S)
{
  return OCConverter::StandardBooleanToBoolean(((TColStd_SetOfInteger*)nativeHandle)->IsASubset(*((TColStd_SetOfInteger*)S->Handle)));
}

 System::Boolean OCTColStd_SetOfInteger::IsAProperSubset(OCNaroWrappers::OCTColStd_SetOfInteger^ S)
{
  return OCConverter::StandardBooleanToBoolean(((TColStd_SetOfInteger*)nativeHandle)->IsAProperSubset(*((TColStd_SetOfInteger*)S->Handle)));
}


