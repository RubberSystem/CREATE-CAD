// File generated by CPPExt (CPP file)
//

#include "TColStd_HSetOfInteger.h"
#include "../Converter.h"
#include "TColStd_SetOfInteger.h"


using namespace OCNaroWrappers;

OCTColStd_HSetOfInteger::OCTColStd_HSetOfInteger(Handle(TColStd_HSetOfInteger)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TColStd_HSetOfInteger(*nativeHandle);
}

OCTColStd_HSetOfInteger::OCTColStd_HSetOfInteger() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TColStd_HSetOfInteger(new TColStd_HSetOfInteger());
}

 Standard_Integer OCTColStd_HSetOfInteger::Extent()
{
  return (*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Extent();
}

 System::Boolean OCTColStd_HSetOfInteger::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSetOfInteger*)nativeHandle))->IsEmpty());
}

 void OCTColStd_HSetOfInteger::Clear()
{
  (*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Clear();
}

 System::Boolean OCTColStd_HSetOfInteger::Add(Standard_Integer T)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Add(T));
}

 System::Boolean OCTColStd_HSetOfInteger::Remove(Standard_Integer T)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Remove(T));
}

OCTColStd_HSetOfInteger^ OCTColStd_HSetOfInteger::Union(OCNaroWrappers::OCTColStd_HSetOfInteger^ B)
{
  Handle(TColStd_HSetOfInteger) tmp = (*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Union(*((Handle_TColStd_HSetOfInteger*)B->Handle));
  return gcnew OCTColStd_HSetOfInteger(&tmp);
}

OCTColStd_HSetOfInteger^ OCTColStd_HSetOfInteger::Intersection(OCNaroWrappers::OCTColStd_HSetOfInteger^ B)
{
  Handle(TColStd_HSetOfInteger) tmp = (*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Intersection(*((Handle_TColStd_HSetOfInteger*)B->Handle));
  return gcnew OCTColStd_HSetOfInteger(&tmp);
}

OCTColStd_HSetOfInteger^ OCTColStd_HSetOfInteger::Difference(OCNaroWrappers::OCTColStd_HSetOfInteger^ B)
{
  Handle(TColStd_HSetOfInteger) tmp = (*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Difference(*((Handle_TColStd_HSetOfInteger*)B->Handle));
  return gcnew OCTColStd_HSetOfInteger(&tmp);
}

 System::Boolean OCTColStd_HSetOfInteger::Contains(Standard_Integer T)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Contains(T));
}

 System::Boolean OCTColStd_HSetOfInteger::IsASubset(OCNaroWrappers::OCTColStd_HSetOfInteger^ S)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSetOfInteger*)nativeHandle))->IsASubset(*((Handle_TColStd_HSetOfInteger*)S->Handle)));
}

 System::Boolean OCTColStd_HSetOfInteger::IsAProperSubset(OCNaroWrappers::OCTColStd_HSetOfInteger^ S)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TColStd_HSetOfInteger*)nativeHandle))->IsAProperSubset(*((Handle_TColStd_HSetOfInteger*)S->Handle)));
}

OCTColStd_HSetOfInteger^ OCTColStd_HSetOfInteger::ShallowCopy()
{
  Handle(TColStd_HSetOfInteger) tmp = (*((Handle_TColStd_HSetOfInteger*)nativeHandle))->ShallowCopy();
  return gcnew OCTColStd_HSetOfInteger(&tmp);
}

OCTColStd_SetOfInteger^ OCTColStd_HSetOfInteger::Set()
{
  TColStd_SetOfInteger* tmp = new TColStd_SetOfInteger();
  *tmp = (*((Handle_TColStd_HSetOfInteger*)nativeHandle))->Set();
  return gcnew OCTColStd_SetOfInteger(tmp);
}

OCTColStd_SetOfInteger^ OCTColStd_HSetOfInteger::ChangeSet()
{
  TColStd_SetOfInteger* tmp = new TColStd_SetOfInteger();
  *tmp = (*((Handle_TColStd_HSetOfInteger*)nativeHandle))->ChangeSet();
  return gcnew OCTColStd_SetOfInteger(tmp);
}


