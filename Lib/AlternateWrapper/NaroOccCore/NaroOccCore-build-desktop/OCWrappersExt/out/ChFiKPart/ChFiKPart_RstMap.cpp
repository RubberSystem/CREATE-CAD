// File generated by CPPExt (CPP file)
//

#include "ChFiKPart_RstMap.h"
#include "../Converter.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../TColStd/TColStd_MapIntegerHasher.h"
#include "ChFiKPart_DataMapNodeOfRstMap.h"
#include "ChFiKPart_DataMapIteratorOfRstMap.h"


using namespace OCNaroWrappers;

OCChFiKPart_RstMap::OCChFiKPart_RstMap(ChFiKPart_RstMap* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCChFiKPart_RstMap::OCChFiKPart_RstMap(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new ChFiKPart_RstMap(NbBuckets);
}

OCChFiKPart_RstMap^ OCChFiKPart_RstMap::Assign(OCNaroWrappers::OCChFiKPart_RstMap^ Other)
{
  ChFiKPart_RstMap* tmp = new ChFiKPart_RstMap(0);
  *tmp = ((ChFiKPart_RstMap*)nativeHandle)->Assign(*((ChFiKPart_RstMap*)Other->Handle));
  return gcnew OCChFiKPart_RstMap(tmp);
}

 void OCChFiKPart_RstMap::ReSize(Standard_Integer NbBuckets)
{
  ((ChFiKPart_RstMap*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCChFiKPart_RstMap::Bind(Standard_Integer K, OCNaroWrappers::OCAdaptor2d_HCurve2d^ I)
{
  return OCConverter::StandardBooleanToBoolean(((ChFiKPart_RstMap*)nativeHandle)->Bind(K, *((Handle_Adaptor2d_HCurve2d*)I->Handle)));
}

 System::Boolean OCChFiKPart_RstMap::IsBound(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((ChFiKPart_RstMap*)nativeHandle)->IsBound(K));
}

 System::Boolean OCChFiKPart_RstMap::UnBind(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((ChFiKPart_RstMap*)nativeHandle)->UnBind(K));
}

OCAdaptor2d_HCurve2d^ OCChFiKPart_RstMap::Find(Standard_Integer K)
{
  Handle(Adaptor2d_HCurve2d) tmp = ((ChFiKPart_RstMap*)nativeHandle)->Find(K);
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

OCAdaptor2d_HCurve2d^ OCChFiKPart_RstMap::ChangeFind(Standard_Integer K)
{
  Handle(Adaptor2d_HCurve2d) tmp = ((ChFiKPart_RstMap*)nativeHandle)->ChangeFind(K);
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

 Standard_Address OCChFiKPart_RstMap::Find1(Standard_Integer K)
{
  return ((ChFiKPart_RstMap*)nativeHandle)->Find1(K);
}

 Standard_Address OCChFiKPart_RstMap::ChangeFind1(Standard_Integer K)
{
  return ((ChFiKPart_RstMap*)nativeHandle)->ChangeFind1(K);
}


