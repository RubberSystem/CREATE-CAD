// File generated by CPPExt (CPP file)
//

#include "IntAna_IntLinTorus.h"
#include "../Converter.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Torus.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCIntAna_IntLinTorus::OCIntAna_IntLinTorus(IntAna_IntLinTorus* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntAna_IntLinTorus::OCIntAna_IntLinTorus() 
{
  nativeHandle = new IntAna_IntLinTorus();
}

OCIntAna_IntLinTorus::OCIntAna_IntLinTorus(OCNaroWrappers::OCgp_Lin^ L, OCNaroWrappers::OCgp_Torus^ T) 
{
  nativeHandle = new IntAna_IntLinTorus(*((gp_Lin*)L->Handle), *((gp_Torus*)T->Handle));
}

 void OCIntAna_IntLinTorus::Perform(OCNaroWrappers::OCgp_Lin^ L, OCNaroWrappers::OCgp_Torus^ T)
{
  ((IntAna_IntLinTorus*)nativeHandle)->Perform(*((gp_Lin*)L->Handle), *((gp_Torus*)T->Handle));
}

 System::Boolean OCIntAna_IntLinTorus::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_IntLinTorus*)nativeHandle)->IsDone());
}

 Standard_Integer OCIntAna_IntLinTorus::NbPoints()
{
  return ((IntAna_IntLinTorus*)nativeHandle)->NbPoints();
}

OCgp_Pnt^ OCIntAna_IntLinTorus::Value(Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntAna_IntLinTorus*)nativeHandle)->Value(Index);
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCIntAna_IntLinTorus::ParamOnLine(Standard_Integer Index)
{
  return ((IntAna_IntLinTorus*)nativeHandle)->ParamOnLine(Index);
}

 void OCIntAna_IntLinTorus::ParamOnTorus(Standard_Integer Index, Standard_Real& FI, Standard_Real& THETA)
{
  ((IntAna_IntLinTorus*)nativeHandle)->ParamOnTorus(Index, FI, THETA);
}


