// File generated by CPPExt (MPV)
//
#ifndef _IntAna_Int3Pln_OCWrappers_HeaderFile
#define _IntAna_Int3Pln_OCWrappers_HeaderFile

// include native header
#include <IntAna_Int3Pln.hxx>
#include "../Converter.h"


#include "../gp/gp_Pnt.h"


namespace OCNaroWrappers
{

ref class OCgp_Pln;
ref class OCgp_Pnt;


//! Intersection between 3 planes. The algorithm searches <br>
//!          for an intersection point. If two of the planes are <br>
//!          parallel or identical, IsEmpty returns TRUE. <br>
public ref class OCIntAna_Int3Pln  {

protected:
  IntAna_Int3Pln* nativeHandle;
  OCIntAna_Int3Pln(OCDummy^) {};

public:
  property IntAna_Int3Pln* Handle
  {
    IntAna_Int3Pln* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntAna_Int3Pln(IntAna_Int3Pln* nativeHandle);

// Methods PUBLIC


OCIntAna_Int3Pln();

//! Determination of the intersection point between <br>
//!          3 planes. <br>
OCIntAna_Int3Pln(OCNaroWrappers::OCgp_Pln^ P1, OCNaroWrappers::OCgp_Pln^ P2, OCNaroWrappers::OCgp_Pln^ P3);

//! Determination of the intersection point between <br>
//!          3 planes. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Pln^ P1, OCNaroWrappers::OCgp_Pln^ P2, OCNaroWrappers::OCgp_Pln^ P3) ;

//! Returns True if the computation was successful. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns TRUE if there is no intersection POINT. <br>
//!          If 2 planes are identical or parallel, IsEmpty <br>
//!          will return TRUE. <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! Returns the intersection point. <br>
 /*instead*/  OCgp_Pnt^ Value() ;

~OCIntAna_Int3Pln()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
