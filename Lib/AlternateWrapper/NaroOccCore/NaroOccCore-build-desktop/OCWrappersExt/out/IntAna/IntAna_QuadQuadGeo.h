// File generated by CPPExt (MPV)
//
#ifndef _IntAna_QuadQuadGeo_OCWrappers_HeaderFile
#define _IntAna_QuadQuadGeo_OCWrappers_HeaderFile

// include native header
#include <IntAna_QuadQuadGeo.hxx>
#include "../Converter.h"


#include "IntAna_ResultType.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Dir.h"


namespace OCNaroWrappers
{

ref class OCgp_Pln;
ref class OCgp_Cylinder;
ref class OCgp_Sphere;
ref class OCgp_Cone;
ref class OCgp_Pnt;
ref class OCgp_Lin;
ref class OCgp_Circ;
ref class OCgp_Elips;
ref class OCgp_Parab;
ref class OCgp_Hypr;


//! Geometric intersections between two natural quadrics <br>
//!          (Sphere , Cylinder , Cone , Pln from gp). <br>
//!          The possible intersections are : <br>
//!           - 1 point <br>
//!           - 1 or 2 line(s) <br>
//!           - 1 Point and 1 Line <br>
//!           - 1 circle <br>
//!           - 1 ellipse <br>
//!           - 1 parabola <br>
//!           - 1 or 2 hyperbola(s). <br>
//!           - Empty : there is no intersection between the two quadrics. <br>
//!           - Same  : the quadrics are identical <br>
//!           - NoGeometricSolution : there may be an intersection, but it <br>
//!                is necessary to use an analytic algorithm to determine <br>
//!                it. See class IntQuadQuad from IntAna. <br>
public ref class OCIntAna_QuadQuadGeo  {

protected:
  IntAna_QuadQuadGeo* nativeHandle;
  OCIntAna_QuadQuadGeo(OCDummy^) {};

public:
  property IntAna_QuadQuadGeo* Handle
  {
    IntAna_QuadQuadGeo* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntAna_QuadQuadGeo(IntAna_QuadQuadGeo* nativeHandle);

// Methods PUBLIC

//! Empty constructor. <br>
OCIntAna_QuadQuadGeo();

//! Creates the intersection between two planes. <br>
//!          TolAng is the angular tolerance used to determine <br>
//!          if the planes are parallel. <br>
//!          Tol is the tolerance used to determine if the planes <br>
//!          are identical (only when they are parallel). <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Pln^ P1, OCNaroWrappers::OCgp_Pln^ P2, Standard_Real TolAng, Standard_Real Tol);

//! Intersects two planes. <br>
//!          TolAng is the angular tolerance used to determine <br>
//!          if the planes are parallel. <br>
//!          Tol is the tolerance used to determine if the planes <br>
//!          are identical (only when they are parallel). <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Pln^ P1, OCNaroWrappers::OCgp_Pln^ P2, Standard_Real TolAng, Standard_Real Tol) ;

//! Creates the intersection between a plane and a cylinder. <br>
//!          TolAng is the angular tolerance used to determine <br>
//!          if the axis of the cylinder is parallel to the plane. <br>
//!          Tol is the tolerance used to determine if the result <br>
//!          is a circle or an ellipse. If the maximum distance between <br>
//!          the ellipse solution and the circle centered at the ellipse <br>
//!          center is less than Tol, the result will be the circle. <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Cylinder^ C, Standard_Real Tolang, Standard_Real Tol);

//! Intersects a plane and a cylinder. <br>
//!          TolAng is the angular tolerance used to determine <br>
//!          if the axis of the cylinder is parallel to the plane. <br>
//!          Tol is the tolerance used to determine if the result <br>
//!          is a circle or an ellipse. If the maximum distance between <br>
//!          the ellipse solution and the circle centered at the ellipse <br>
//!          center is less than Tol, the result will be the circle. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Cylinder^ C, Standard_Real Tolang, Standard_Real Tol) ;

//! Creates the intersection between a plane and a sphere. <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Sphere^ S);

//! Intersects a plane and a sphere. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Sphere^ S) ;

//! Creates the intersection between a plane and a cone. <br>
//!          TolAng is the angular tolerance used to determine <br>
//!          if the axis of the cone is parallel or perpendicular <br>
//!          to the plane, and if the generating line of the cone <br>
//!          is parallel to the plane. <br>
//!          Tol is the tolerance used to determine if the apex <br>
//!          of the cone is in the plane. <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Cone^ C, Standard_Real Tolang, Standard_Real Tol);

//! Intersects a plane and a cone. <br>
//!          TolAng is the angular tolerance used to determine <br>
//!          if the axis of the cone is parallel or perpendicular <br>
//!          to the plane, and if the generating line of the cone <br>
//!          is parallel to the plane. <br>
//!          Tol is the tolerance used to determine if the apex <br>
//!          of the cone is in the plane. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Cone^ C, Standard_Real Tolang, Standard_Real Tol) ;

//! Creates the intersection between two cylinders. <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Cylinder^ Cyl1, OCNaroWrappers::OCgp_Cylinder^ Cyl2, Standard_Real Tol);

//! Intersects two cylinders <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Cylinder^ Cyl1, OCNaroWrappers::OCgp_Cylinder^ Cyl2, Standard_Real Tol) ;

//! Creates the intersection between a Cylinder and a Sphere. <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Sphere^ Sph, Standard_Real Tol);

//! Intersects a cylinder and a sphere. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Sphere^ Sph, Standard_Real Tol) ;

//! Creates the intersection between a Cylinder and a Cone <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Cone^ Con, Standard_Real Tol);

//! Intersects a cylinder and a cone. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Cone^ Con, Standard_Real Tol) ;

//! Creates the intersection between two Spheres. <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Sphere^ Sph1, OCNaroWrappers::OCgp_Sphere^ Sph2, Standard_Real Tol);

//! Intersects a two spheres. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Sphere^ Sph1, OCNaroWrappers::OCgp_Sphere^ Sph2, Standard_Real Tol) ;

//! Creates the intersection beween a Sphere and a Cone. <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Sphere^ Sph, OCNaroWrappers::OCgp_Cone^ Con, Standard_Real Tol);

//! Intersects a sphere and a cone. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Sphere^ Sph, OCNaroWrappers::OCgp_Cone^ Con, Standard_Real Tol) ;

//! Creates the intersection beween two cones. <br>
OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Cone^ Con1, OCNaroWrappers::OCgp_Cone^ Con2, Standard_Real Tol);

//! Intersects two cones. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Cone^ Con1, OCNaroWrappers::OCgp_Cone^ Con2, Standard_Real Tol) ;

//! Returns Standard_True if the computation was successful. <br>
//! <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the type of intersection. <br>
//! <br>
 /*instead*/  OCIntAna_ResultType TypeInter() ;

//! Returns the number of interesections. <br>
//!          The possible intersections are : <br>
//!           - 1 point <br>
//!           - 1 or 2 line(s) <br>
//!           - 1 Point and 1 Line <br>
//!           - 1 circle <br>
//!           - 1 ellipse <br>
//!           - 1 parabola <br>
//!           - 1 or 2 hyperbola(s). <br>
//! <br>
 /*instead*/  Standard_Integer NbSolutions() ;

//! Returns the point solution of range Num. <br>
 /*instead*/  OCgp_Pnt^ Point(Standard_Integer Num) ;

//! Returns the line solution of range Num. <br>
 /*instead*/  OCgp_Lin^ Line(Standard_Integer Num) ;

//! Returns the circle solution of range Num. <br>
 /*instead*/  OCgp_Circ^ Circle(Standard_Integer Num) ;

//! Returns the ellipse solution of range Num. <br>
 /*instead*/  OCgp_Elips^ Ellipse(Standard_Integer Num) ;

//! Returns the parabola solution of range Num. <br>
 /*instead*/  OCgp_Parab^ Parabola(Standard_Integer Num) ;

//! Returns the hyperbola solution of range Num. <br>
 /*instead*/  OCgp_Hypr^ Hyperbola(Standard_Integer Num) ;


 /*instead*/  System::Boolean HasCommonGen() ;


 /*instead*/  OCgp_Pnt^ PChar() ;

~OCIntAna_QuadQuadGeo()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
