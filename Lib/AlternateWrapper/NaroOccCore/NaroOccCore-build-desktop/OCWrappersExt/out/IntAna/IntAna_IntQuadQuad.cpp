// File generated by CPPExt (CPP file)
//

#include "IntAna_IntQuadQuad.h"
#include "../Converter.h"
#include "../gp/gp_Cylinder.h"
#include "IntAna_Quadric.h"
#include "../gp/gp_Cone.h"
#include "IntAna_Curve.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCIntAna_IntQuadQuad::OCIntAna_IntQuadQuad(IntAna_IntQuadQuad* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntAna_IntQuadQuad::OCIntAna_IntQuadQuad() 
{
  nativeHandle = new IntAna_IntQuadQuad();
}

OCIntAna_IntQuadQuad::OCIntAna_IntQuadQuad(OCNaroWrappers::OCgp_Cylinder^ C, OCNaroWrappers::OCIntAna_Quadric^ Q, Standard_Real Tol) 
{
  nativeHandle = new IntAna_IntQuadQuad(*((gp_Cylinder*)C->Handle), *((IntAna_Quadric*)Q->Handle), Tol);
}

OCIntAna_IntQuadQuad::OCIntAna_IntQuadQuad(OCNaroWrappers::OCgp_Cone^ C, OCNaroWrappers::OCIntAna_Quadric^ Q, Standard_Real Tol) 
{
  nativeHandle = new IntAna_IntQuadQuad(*((gp_Cone*)C->Handle), *((IntAna_Quadric*)Q->Handle), Tol);
}

 void OCIntAna_IntQuadQuad::Perform(OCNaroWrappers::OCgp_Cylinder^ C, OCNaroWrappers::OCIntAna_Quadric^ Q, Standard_Real Tol)
{
  ((IntAna_IntQuadQuad*)nativeHandle)->Perform(*((gp_Cylinder*)C->Handle), *((IntAna_Quadric*)Q->Handle), Tol);
}

 void OCIntAna_IntQuadQuad::Perform(OCNaroWrappers::OCgp_Cone^ C, OCNaroWrappers::OCIntAna_Quadric^ Q, Standard_Real Tol)
{
  ((IntAna_IntQuadQuad*)nativeHandle)->Perform(*((gp_Cone*)C->Handle), *((IntAna_Quadric*)Q->Handle), Tol);
}

 System::Boolean OCIntAna_IntQuadQuad::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_IntQuadQuad*)nativeHandle)->IsDone());
}

 System::Boolean OCIntAna_IntQuadQuad::IdenticalElements()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_IntQuadQuad*)nativeHandle)->IdenticalElements());
}

 Standard_Integer OCIntAna_IntQuadQuad::NbCurve()
{
  return ((IntAna_IntQuadQuad*)nativeHandle)->NbCurve();
}

OCIntAna_Curve^ OCIntAna_IntQuadQuad::Curve(Standard_Integer N)
{
  IntAna_Curve* tmp = new IntAna_Curve();
  *tmp = ((IntAna_IntQuadQuad*)nativeHandle)->Curve(N);
  return gcnew OCIntAna_Curve(tmp);
}

 Standard_Integer OCIntAna_IntQuadQuad::NbPnt()
{
  return ((IntAna_IntQuadQuad*)nativeHandle)->NbPnt();
}

OCgp_Pnt^ OCIntAna_IntQuadQuad::Point(Standard_Integer N)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntAna_IntQuadQuad*)nativeHandle)->Point(N);
  return gcnew OCgp_Pnt(tmp);
}

 void OCIntAna_IntQuadQuad::Parameters(Standard_Integer N, Standard_Real& U1, Standard_Real& U2)
{
  ((IntAna_IntQuadQuad*)nativeHandle)->Parameters(N, U1, U2);
}

 System::Boolean OCIntAna_IntQuadQuad::HasNextCurve(Standard_Integer I)
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_IntQuadQuad*)nativeHandle)->HasNextCurve(I));
}

 Standard_Integer OCIntAna_IntQuadQuad::NextCurve(Standard_Integer I, System::Boolean& Opposite)
{
  return ((IntAna_IntQuadQuad*)nativeHandle)->NextCurve(I, (Standard_Boolean&)(Opposite));
}

 System::Boolean OCIntAna_IntQuadQuad::HasPreviousCurve(Standard_Integer I)
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_IntQuadQuad*)nativeHandle)->HasPreviousCurve(I));
}

 Standard_Integer OCIntAna_IntQuadQuad::PreviousCurve(Standard_Integer I, System::Boolean& Opposite)
{
  return ((IntAna_IntQuadQuad*)nativeHandle)->PreviousCurve(I, (Standard_Boolean&)(Opposite));
}


