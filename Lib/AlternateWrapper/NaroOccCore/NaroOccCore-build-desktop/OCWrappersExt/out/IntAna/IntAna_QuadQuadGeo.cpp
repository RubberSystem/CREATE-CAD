// File generated by CPPExt (CPP file)
//

#include "IntAna_QuadQuadGeo.h"
#include "../Converter.h"
#include "../gp/gp_Pln.h"
#include "../gp/gp_Cylinder.h"
#include "../gp/gp_Sphere.h"
#include "../gp/gp_Cone.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Parab.h"
#include "../gp/gp_Hypr.h"


using namespace OCNaroWrappers;

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(IntAna_QuadQuadGeo* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo() 
{
  nativeHandle = new IntAna_QuadQuadGeo();
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Pln^ P1, OCNaroWrappers::OCgp_Pln^ P2, Standard_Real TolAng, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Pln*)P1->Handle), *((gp_Pln*)P2->Handle), TolAng, Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Pln^ P1, OCNaroWrappers::OCgp_Pln^ P2, Standard_Real TolAng, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Pln*)P1->Handle), *((gp_Pln*)P2->Handle), TolAng, Tol);
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Cylinder^ C, Standard_Real Tolang, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Pln*)P->Handle), *((gp_Cylinder*)C->Handle), Tolang, Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Cylinder^ C, Standard_Real Tolang, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Pln*)P->Handle), *((gp_Cylinder*)C->Handle), Tolang, Tol);
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Sphere^ S) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Pln*)P->Handle), *((gp_Sphere*)S->Handle));
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Sphere^ S)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Pln*)P->Handle), *((gp_Sphere*)S->Handle));
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Cone^ C, Standard_Real Tolang, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Pln*)P->Handle), *((gp_Cone*)C->Handle), Tolang, Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Pln^ P, OCNaroWrappers::OCgp_Cone^ C, Standard_Real Tolang, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Pln*)P->Handle), *((gp_Cone*)C->Handle), Tolang, Tol);
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Cylinder^ Cyl1, OCNaroWrappers::OCgp_Cylinder^ Cyl2, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Cylinder*)Cyl1->Handle), *((gp_Cylinder*)Cyl2->Handle), Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Cylinder^ Cyl1, OCNaroWrappers::OCgp_Cylinder^ Cyl2, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Cylinder*)Cyl1->Handle), *((gp_Cylinder*)Cyl2->Handle), Tol);
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Sphere^ Sph, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Cylinder*)Cyl->Handle), *((gp_Sphere*)Sph->Handle), Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Sphere^ Sph, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Cylinder*)Cyl->Handle), *((gp_Sphere*)Sph->Handle), Tol);
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Cone^ Con, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Cylinder*)Cyl->Handle), *((gp_Cone*)Con->Handle), Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Cone^ Con, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Cylinder*)Cyl->Handle), *((gp_Cone*)Con->Handle), Tol);
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Sphere^ Sph1, OCNaroWrappers::OCgp_Sphere^ Sph2, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Sphere*)Sph1->Handle), *((gp_Sphere*)Sph2->Handle), Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Sphere^ Sph1, OCNaroWrappers::OCgp_Sphere^ Sph2, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Sphere*)Sph1->Handle), *((gp_Sphere*)Sph2->Handle), Tol);
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Sphere^ Sph, OCNaroWrappers::OCgp_Cone^ Con, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Sphere*)Sph->Handle), *((gp_Cone*)Con->Handle), Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Sphere^ Sph, OCNaroWrappers::OCgp_Cone^ Con, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Sphere*)Sph->Handle), *((gp_Cone*)Con->Handle), Tol);
}

OCIntAna_QuadQuadGeo::OCIntAna_QuadQuadGeo(OCNaroWrappers::OCgp_Cone^ Con1, OCNaroWrappers::OCgp_Cone^ Con2, Standard_Real Tol) 
{
  nativeHandle = new IntAna_QuadQuadGeo(*((gp_Cone*)Con1->Handle), *((gp_Cone*)Con2->Handle), Tol);
}

 void OCIntAna_QuadQuadGeo::Perform(OCNaroWrappers::OCgp_Cone^ Con1, OCNaroWrappers::OCgp_Cone^ Con2, Standard_Real Tol)
{
  ((IntAna_QuadQuadGeo*)nativeHandle)->Perform(*((gp_Cone*)Con1->Handle), *((gp_Cone*)Con2->Handle), Tol);
}

 System::Boolean OCIntAna_QuadQuadGeo::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_QuadQuadGeo*)nativeHandle)->IsDone());
}

 OCIntAna_ResultType OCIntAna_QuadQuadGeo::TypeInter()
{
  return (OCIntAna_ResultType)(((IntAna_QuadQuadGeo*)nativeHandle)->TypeInter());
}

 Standard_Integer OCIntAna_QuadQuadGeo::NbSolutions()
{
  return ((IntAna_QuadQuadGeo*)nativeHandle)->NbSolutions();
}

OCgp_Pnt^ OCIntAna_QuadQuadGeo::Point(Standard_Integer Num)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntAna_QuadQuadGeo*)nativeHandle)->Point(Num);
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Lin^ OCIntAna_QuadQuadGeo::Line(Standard_Integer Num)
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = ((IntAna_QuadQuadGeo*)nativeHandle)->Line(Num);
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCIntAna_QuadQuadGeo::Circle(Standard_Integer Num)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = ((IntAna_QuadQuadGeo*)nativeHandle)->Circle(Num);
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCIntAna_QuadQuadGeo::Ellipse(Standard_Integer Num)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = ((IntAna_QuadQuadGeo*)nativeHandle)->Ellipse(Num);
  return gcnew OCgp_Elips(tmp);
}

OCgp_Parab^ OCIntAna_QuadQuadGeo::Parabola(Standard_Integer Num)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = ((IntAna_QuadQuadGeo*)nativeHandle)->Parabola(Num);
  return gcnew OCgp_Parab(tmp);
}

OCgp_Hypr^ OCIntAna_QuadQuadGeo::Hyperbola(Standard_Integer Num)
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = ((IntAna_QuadQuadGeo*)nativeHandle)->Hyperbola(Num);
  return gcnew OCgp_Hypr(tmp);
}

 System::Boolean OCIntAna_QuadQuadGeo::HasCommonGen()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_QuadQuadGeo*)nativeHandle)->HasCommonGen());
}

OCgp_Pnt^ OCIntAna_QuadQuadGeo::PChar()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntAna_QuadQuadGeo*)nativeHandle)->PChar();
  return gcnew OCgp_Pnt(tmp);
}


