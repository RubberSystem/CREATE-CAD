// File generated by CPPExt (CPP file)
//

#include "IntAna_Curve.h"
#include "../Converter.h"
#include "../gp/gp_Cylinder.h"
#include "../gp/gp_Cone.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"


using namespace OCNaroWrappers;

OCIntAna_Curve::OCIntAna_Curve(IntAna_Curve* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntAna_Curve::OCIntAna_Curve() 
{
  nativeHandle = new IntAna_Curve();
}

 void OCIntAna_Curve::SetCylinderQuadValues(OCNaroWrappers::OCgp_Cylinder^ Cylinder, Standard_Real Qxx, Standard_Real Qyy, Standard_Real Qzz, Standard_Real Qxy, Standard_Real Qxz, Standard_Real Qyz, Standard_Real Qx, Standard_Real Qy, Standard_Real Qz, Standard_Real Q1, Standard_Real Tol, Standard_Real DomInf, Standard_Real DomSup, System::Boolean TwoZForATheta, System::Boolean ZIsPositive)
{
  ((IntAna_Curve*)nativeHandle)->SetCylinderQuadValues(*((gp_Cylinder*)Cylinder->Handle), Qxx, Qyy, Qzz, Qxy, Qxz, Qyz, Qx, Qy, Qz, Q1, Tol, DomInf, DomSup, OCConverter::BooleanToStandardBoolean(TwoZForATheta), OCConverter::BooleanToStandardBoolean(ZIsPositive));
}

 void OCIntAna_Curve::SetConeQuadValues(OCNaroWrappers::OCgp_Cone^ Cone, Standard_Real Qxx, Standard_Real Qyy, Standard_Real Qzz, Standard_Real Qxy, Standard_Real Qxz, Standard_Real Qyz, Standard_Real Qx, Standard_Real Qy, Standard_Real Qz, Standard_Real Q1, Standard_Real Tol, Standard_Real DomInf, Standard_Real DomSup, System::Boolean TwoZForATheta, System::Boolean ZIsPositive)
{
  ((IntAna_Curve*)nativeHandle)->SetConeQuadValues(*((gp_Cone*)Cone->Handle), Qxx, Qyy, Qzz, Qxy, Qxz, Qyz, Qx, Qy, Qz, Q1, Tol, DomInf, DomSup, OCConverter::BooleanToStandardBoolean(TwoZForATheta), OCConverter::BooleanToStandardBoolean(ZIsPositive));
}

 System::Boolean OCIntAna_Curve::IsOpen()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_Curve*)nativeHandle)->IsOpen());
}

 void OCIntAna_Curve::Domain(Standard_Real& Theta1, Standard_Real& Theta2)
{
  ((IntAna_Curve*)nativeHandle)->Domain(Theta1, Theta2);
}

 System::Boolean OCIntAna_Curve::IsConstant()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_Curve*)nativeHandle)->IsConstant());
}

 System::Boolean OCIntAna_Curve::IsFirstOpen()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_Curve*)nativeHandle)->IsFirstOpen());
}

 System::Boolean OCIntAna_Curve::IsLastOpen()
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_Curve*)nativeHandle)->IsLastOpen());
}

OCgp_Pnt^ OCIntAna_Curve::Value(Standard_Real Theta)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntAna_Curve*)nativeHandle)->Value(Theta);
  return gcnew OCgp_Pnt(tmp);
}

 System::Boolean OCIntAna_Curve::D1u(Standard_Real Theta, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V)
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_Curve*)nativeHandle)->D1u(Theta, *((gp_Pnt*)P->Handle), *((gp_Vec*)V->Handle)));
}

 System::Boolean OCIntAna_Curve::FindParameter(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real& Para)
{
  return OCConverter::StandardBooleanToBoolean(((IntAna_Curve*)nativeHandle)->FindParameter(*((gp_Pnt*)P->Handle), Para));
}

 void OCIntAna_Curve::SetIsFirstOpen(System::Boolean Flag)
{
  ((IntAna_Curve*)nativeHandle)->SetIsFirstOpen(OCConverter::BooleanToStandardBoolean(Flag));
}

 void OCIntAna_Curve::SetIsLastOpen(System::Boolean Flag)
{
  ((IntAna_Curve*)nativeHandle)->SetIsLastOpen(OCConverter::BooleanToStandardBoolean(Flag));
}

 void OCIntAna_Curve::InternalUVValue(Standard_Real Param, Standard_Real& U, Standard_Real& V, Standard_Real& A, Standard_Real& B, Standard_Real& C, Standard_Real& Co, Standard_Real& Si, Standard_Real& Di)
{
  ((IntAna_Curve*)nativeHandle)->InternalUVValue(Param, U, V, A, B, C, Co, Si, Di);
}

 void OCIntAna_Curve::SetDomain(Standard_Real Theta1, Standard_Real Theta2)
{
  ((IntAna_Curve*)nativeHandle)->SetDomain(Theta1, Theta2);
}


