// File generated by CPPExt (MPV)
//
#ifndef _IntAna_IntConicQuad_OCWrappers_HeaderFile
#define _IntAna_IntConicQuad_OCWrappers_HeaderFile

// include native header
#include <IntAna_IntConicQuad.hxx>
#include "../Converter.h"


#include "../gp/gp_Pnt.h"


namespace OCNaroWrappers
{

ref class OCgp_Lin;
ref class OCIntAna_Quadric;
ref class OCgp_Circ;
ref class OCgp_Elips;
ref class OCgp_Parab;
ref class OCgp_Hypr;
ref class OCgp_Pln;
ref class OCgp_Pnt;


//! This class provides the analytic intersection between <br>
//!          a conic defined as an element of gp (Lin,Circ,Elips, <br>
//!          Parab,Hypr) and a quadric as defined in the class <br>
//!          Quadric from IntAna. <br>
//!          The intersection between a conic and a plane is treated <br>
//!          as a special case. <br>
//! <br>
//!          The result of the intersection are points (Pnt from <br>
//!          gp), associated with the parameter on the conic. <br>
//! <br>
//!          A call to an Intersection  L:Lin from gp and <br>
//!          SPH: Sphere from gp can be written either : <br>
//!               IntAna_IntConicQuad Inter(L,IntAna_Quadric(SPH)) <br>
//!           or : <br>
//!               IntAna_IntConicQuad Inter(L,SPH) (it is necessary <br>
//!                  to include IntAna_Quadric.hxx in this case) <br>
public ref class OCIntAna_IntConicQuad  {

protected:
  IntAna_IntConicQuad* nativeHandle;
  OCIntAna_IntConicQuad(OCDummy^) {};

public:
  property IntAna_IntConicQuad* Handle
  {
    IntAna_IntConicQuad* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntAna_IntConicQuad(IntAna_IntConicQuad* nativeHandle);

// Methods PUBLIC

//! Empty constructor. <br>
//! <br>
OCIntAna_IntConicQuad();

//! Creates the intersection between a line and a quadric. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Lin^ L, OCNaroWrappers::OCIntAna_Quadric^ Q);

//! Intersects a line and a quadric. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin^ L, OCNaroWrappers::OCIntAna_Quadric^ Q) ;

//! Creates the intersection between a circle and a quadric. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCIntAna_Quadric^ Q);

//! Intersects a circle and a quadric. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCIntAna_Quadric^ Q) ;

//! Creates the intersection between an ellipse and a quadric. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Elips^ E, OCNaroWrappers::OCIntAna_Quadric^ Q);

//! Intersects an ellipse and a quadric. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Elips^ E, OCNaroWrappers::OCIntAna_Quadric^ Q) ;

//! Creates the intersection between a parabola and a quadric. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Parab^ P, OCNaroWrappers::OCIntAna_Quadric^ Q);

//! Intersects a parabola and a quadric. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Parab^ P, OCNaroWrappers::OCIntAna_Quadric^ Q) ;

//! Creates the intersection between an hyperbola and <br>
//!          a quadric. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Hypr^ H, OCNaroWrappers::OCIntAna_Quadric^ Q);

//! Intersects an hyperbola and a quadric. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Hypr^ H, OCNaroWrappers::OCIntAna_Quadric^ Q) ;

//! Intersection between a line and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Lin^ L, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang);

//! Intersects a line and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin^ L, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang) ;

//! Intersection between a circle and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
//!          Tol is used to determine if a distance is null. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang, Standard_Real Tol);

//! Intersects a circle and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
//!          Tol is used to determine if a distance is null. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Circ^ C, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang, Standard_Real Tol) ;

//! Intersection between an ellipse and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
//!          Tol is used to determine if a distance is null. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Elips^ E, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang, Standard_Real Tol);

//! Intersects an ellipse and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
//!          Tol is used to determine if a distance is null. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Elips^ E, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang, Standard_Real Tol) ;

//! Intersection between a parabola and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Parab^ Pb, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang);

//! Intersects a parabola and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Parab^ Pb, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang) ;

//! Intersection between an hyperbola and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
OCIntAna_IntConicQuad(OCNaroWrappers::OCgp_Hypr^ H, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang);

//! Intersects an hyperbola and a plane. <br>
//!          Tolang is used to determine if the angle between two <br>
//!          vectors is null. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Hypr^ H, OCNaroWrappers::OCgp_Pln^ P, Standard_Real Tolang) ;

//! Returns TRUE if the creation completed. <br>
//! <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns TRUE if the conic is in the quadric. <br>
//! <br>
 /*instead*/  System::Boolean IsInQuadric() ;

//! Returns TRUE if the line is in a quadric which <br>
//!          is parallel to the quadric. <br>
 /*instead*/  System::Boolean IsParallel() ;

//! Returns the number of intersection point. <br>
//! <br>
 /*instead*/  Standard_Integer NbPoints() ;

//! Returns the point of range N. <br>
//! <br>
 /*instead*/  OCgp_Pnt^ Point(Standard_Integer N) ;

//! Returns the parameter on the line of the intersection <br>
//!          point of range N. <br>
//! <br>
 /*instead*/  Standard_Real ParamOnConic(Standard_Integer N) ;

~OCIntAna_IntConicQuad()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
