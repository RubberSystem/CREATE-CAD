// File generated by CPPExt (MPV)
//
#ifndef _Quantity_Convert_OCWrappers_HeaderFile
#define _Quantity_Convert_OCWrappers_HeaderFile

// include native header
#include <Quantity_Convert.hxx>
#include "../Converter.h"


#include "Quantity_PhysicalQuantity.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;


//! Services to manage units conversion between Front-ends and Engines. <br>
//! This conversion is managed by a table of correspondance between the quantities <br>
//! and their "conversion coefficient". <br>
//! This table is implemented like an external array (TCollection_Array1) regarding <br>
//! to the quantities enumeration. <br>
public ref class OCQuantity_Convert  {

protected:
  Quantity_Convert* nativeHandle;
  OCQuantity_Convert(OCDummy^) {};

public:
  property Quantity_Convert* Handle
  {
    Quantity_Convert* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCQuantity_Convert(Quantity_Convert* nativeHandle);

// Methods PUBLIC

//! Creates an object; <br>
OCQuantity_Convert();

//! Updates the conversion table (correspondances between <br>
//! Quantities and conversion coefficients). <br>
static /*instead*/  void SetQuantity(OCQuantity_PhysicalQuantity aQuantity, Quantity_Coefficient aCoef) ;

//! Converts, from the conversion table, the value <aVal> <br>
//! from the user system to the SI system. <br>
static /*instead*/  Standard_Real ConvertUserToSI(OCQuantity_PhysicalQuantity aQuantity, Standard_Real aVal) ;

//! Converts, from the conversion table, the value <aVal> <br>
//! from the SI system to the user system. <br>
static /*instead*/  Standard_Real ConvertSIToUser(OCQuantity_PhysicalQuantity aQuantity, Standard_Real aVal) ;


//! if (aType is a physical quantity) <br>
//!    returns True and the name of the associated PhysicalQuantity . <br>
//! else <br>
//!    returns False. <br>
static /*instead*/  System::Boolean IsPhysicalQuantity(OCNaroWrappers::OCTCollection_AsciiString^ aTypeName, OCNaroWrappers::OCTCollection_AsciiString^ anEnum) ;

~OCQuantity_Convert()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
