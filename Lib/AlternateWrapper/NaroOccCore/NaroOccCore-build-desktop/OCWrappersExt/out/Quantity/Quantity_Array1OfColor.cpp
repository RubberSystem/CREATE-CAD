// File generated by CPPExt (CPP file)
//

#include "Quantity_Array1OfColor.h"
#include "../Converter.h"
#include "Quantity_Color.h"


using namespace OCNaroWrappers;

OCQuantity_Array1OfColor::OCQuantity_Array1OfColor(Quantity_Array1OfColor* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCQuantity_Array1OfColor::OCQuantity_Array1OfColor(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Quantity_Array1OfColor(Low, Up);
}

OCQuantity_Array1OfColor::OCQuantity_Array1OfColor(OCNaroWrappers::OCQuantity_Color^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Quantity_Array1OfColor(*((Quantity_Color*)Item->Handle), Low, Up);
}

 void OCQuantity_Array1OfColor::Init(OCNaroWrappers::OCQuantity_Color^ V)
{
  ((Quantity_Array1OfColor*)nativeHandle)->Init(*((Quantity_Color*)V->Handle));
}

 System::Boolean OCQuantity_Array1OfColor::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((Quantity_Array1OfColor*)nativeHandle)->IsAllocated());
}

OCQuantity_Array1OfColor^ OCQuantity_Array1OfColor::Assign(OCNaroWrappers::OCQuantity_Array1OfColor^ Other)
{
  Quantity_Array1OfColor* tmp = new Quantity_Array1OfColor(0, 0);
  *tmp = ((Quantity_Array1OfColor*)nativeHandle)->Assign(*((Quantity_Array1OfColor*)Other->Handle));
  return gcnew OCQuantity_Array1OfColor(tmp);
}

 Standard_Integer OCQuantity_Array1OfColor::Length()
{
  return ((Quantity_Array1OfColor*)nativeHandle)->Length();
}

 Standard_Integer OCQuantity_Array1OfColor::Lower()
{
  return ((Quantity_Array1OfColor*)nativeHandle)->Lower();
}

 Standard_Integer OCQuantity_Array1OfColor::Upper()
{
  return ((Quantity_Array1OfColor*)nativeHandle)->Upper();
}

 void OCQuantity_Array1OfColor::SetValue(Standard_Integer Index, OCNaroWrappers::OCQuantity_Color^ Value)
{
  ((Quantity_Array1OfColor*)nativeHandle)->SetValue(Index, *((Quantity_Color*)Value->Handle));
}

OCQuantity_Color^ OCQuantity_Array1OfColor::Value(Standard_Integer Index)
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = ((Quantity_Array1OfColor*)nativeHandle)->Value(Index);
  return gcnew OCQuantity_Color(tmp);
}

OCQuantity_Color^ OCQuantity_Array1OfColor::ChangeValue(Standard_Integer Index)
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = ((Quantity_Array1OfColor*)nativeHandle)->ChangeValue(Index);
  return gcnew OCQuantity_Color(tmp);
}


