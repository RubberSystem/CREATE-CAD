// File generated by CPPExt (MPV)
//
#ifndef _Quantity_Period_OCWrappers_HeaderFile
#define _Quantity_Period_OCWrappers_HeaderFile

// include native header
#include <Quantity_Period.hxx>
#include "../Converter.h"


#include "../Standard/Standard_Storable.h"


namespace OCNaroWrappers
{



//! Manages date intervals. For example, a Period object <br>
//! gives the interval between two dates. <br>
//! A period is expressed in seconds and microseconds. <br>
public ref class OCQuantity_Period  {

protected:
  Quantity_Period* nativeHandle;
  OCQuantity_Period(OCDummy^) {};

public:
  property Quantity_Period* Handle
  {
    Quantity_Period* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCQuantity_Period(Quantity_Period* nativeHandle);

// Methods PUBLIC

//! Creates a Period <br>
//!          With:      0 <= dd <br>
//!                     0 <= hh <br>
//!                     0 <= mn <br>
//!                     0 <= ss <br>
//!                     0 <= mis <br>
//!                     0 <= mics <br>
OCQuantity_Period(Standard_Integer dd, Standard_Integer hh, Standard_Integer mn, Standard_Integer ss, Standard_Integer mis, Standard_Integer mics);

//! Creates a Period with a number of seconds and microseconds. <br>
//!  Exceptions <br>
//! Quantity_PeriodDefinitionError: <br>
//! -   if the number of seconds expressed either by: <br>
//!   -   dd days, hh hours, mn minutes and ss seconds, or <br>
//!   -   Ss <br>
//! is less than 0. <br>
//! -   if the number of microseconds expressed either by: <br>
//!   -   mis milliseconds and mics microseconds, or <br>
//!   -   Mics <br>
//! is less than 0. <br>
OCQuantity_Period(Standard_Integer ss, Standard_Integer mics);

//! Decomposes this period into a number of days,hours, <br>
//!          minutes,seconds,milliseconds and microseconds <br>
//!          Example of return values: <br>
//!          2 days, 15 hours, 0 minute , 0 second <br>
//!          0 millisecond and 0 microsecond <br>
 /*instead*/  void Values(Standard_Integer& dd, Standard_Integer& hh, Standard_Integer& mn, Standard_Integer& ss, Standard_Integer& mis, Standard_Integer& mics) ;

//! Returns the number of seconds in Ss and the <br>
//! number of remainding microseconds in Mics of this period. <br>
//! Example of return values: 3600 seconds and 0 microseconds <br>
 /*instead*/  void Values(Standard_Integer& ss, Standard_Integer& mics) ;

//! Assigns to this period the time interval defined <br>
//!    -   with dd days, hh hours, mn minutes, ss <br>
//!   seconds, mis (defaulted to 0) milliseconds and <br>
//!   mics (defaulted to 0) microseconds; or <br>
 /*instead*/  void SetValues(Standard_Integer dd, Standard_Integer hh, Standard_Integer mn, Standard_Integer ss, Standard_Integer mis, Standard_Integer mics) ;

//! Assigns to this period the time interval defined <br>
//! -   with Ss seconds and Mics (defaulted to 0) microseconds. <br>
//!  Exceptions <br>
//! Quantity_PeriodDefinitionError: <br>
//! -   if the number of seconds expressed either by: <br>
//!   -   dd days, hh hours, mn minutes and ss seconds, or <br>
//!   -   Ss <br>
//! is less than 0. <br>
//! -   if the number of microseconds expressed either by: <br>
//!   -   mis milliseconds and mics microseconds, or <br>
//!   -   Mics <br>
//! is less than 0. <br>
 /*instead*/  void SetValues(Standard_Integer ss, Standard_Integer mics) ;

//! Subtracts one Period from another and returns the difference. <br>
 /*instead*/  OCQuantity_Period^ Subtract(OCNaroWrappers::OCQuantity_Period^ anOther) ;

//! Adds one Period to another one. <br>
 /*instead*/  OCQuantity_Period^ Add(OCNaroWrappers::OCQuantity_Period^ anOther) ;

//! Returns TRUE if both <me> and <other> are equal. <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCQuantity_Period^ anOther) ;

//! Returns TRUE if <me> is shorter than <other>. <br>
 /*instead*/  System::Boolean IsShorter(OCNaroWrappers::OCQuantity_Period^ anOther) ;

//! Returns TRUE if <me> is longer then <other>. <br>
 /*instead*/  System::Boolean IsLonger(OCNaroWrappers::OCQuantity_Period^ anOther) ;

//! Checks the validity of a Period in form (dd,hh,mn,ss,mil,mic) <br>
//!          With:      0 <= dd <br>
//!                     0 <= hh <br>
//!                     0 <= mn <br>
//!                     0 <= ss <br>
//!                     0 <= mis <br>
//!                     0 <= mics <br>
static /*instead*/  System::Boolean IsValid(Standard_Integer dd, Standard_Integer hh, Standard_Integer mn, Standard_Integer ss, Standard_Integer mis, Standard_Integer mics) ;

//! Checks the validity of a Period in form (ss,mic) <br>
//!          With:      0 <= ss <br>
//!                     0 <= mics <br>
static /*instead*/  System::Boolean IsValid(Standard_Integer ss, Standard_Integer mics) ;

~OCQuantity_Period()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
