// File generated by CPPExt (MPV)
//
#ifndef _Interface_EntityIterator_OCWrappers_HeaderFile
#define _Interface_EntityIterator_OCWrappers_HeaderFile

// include native header
#include <Interface_EntityIterator.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCInterface_IntVal;
ref class OCTColStd_HSequenceOfTransient;
ref class OCStandard_Transient;
ref class OCStandard_Type;


//! Defines an Iterator on Entities, complying with GraphTools <br>
//!           needs. Allows considering of various criteria <br>
public ref class OCInterface_EntityIterator  {

protected:
  Interface_EntityIterator* nativeHandle;
  OCInterface_EntityIterator(OCDummy^) {};

public:
  property Interface_EntityIterator* Handle
  {
    Interface_EntityIterator* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCInterface_EntityIterator(Interface_EntityIterator* nativeHandle);

// Methods PUBLIC

//! Defines an empty iterator (see AddList & AddItem) <br>
OCInterface_EntityIterator();

//! Defines an iterator on a list, directly i.e. without copying it <br>
OCInterface_EntityIterator(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list);

//! Gets a list of entities and adds its to the iteration list <br>
 /*instead*/  void AddList(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list) ;

//! Adds to the iteration list a defined entity <br>
 /*instead*/  void AddItem(OCNaroWrappers::OCStandard_Transient^ anentity) ;

//! same as AddItem (kept for compatibility) <br>
 /*instead*/  void GetOneItem(OCNaroWrappers::OCStandard_Transient^ anentity) ;

//! Selects entities with are Kind of a given type,  keep only <br>
//!           them (is keep is True) or reject only them (if keep is False) <br>
 /*instead*/  void SelectType(OCNaroWrappers::OCStandard_Type^ atype, System::Boolean keep) ;

//! Returns count of entities which will be iterated on <br>
//!           Calls Start if not yet done <br>
 /*instead*/  Standard_Integer NbEntities() ;

//! Returns count of entities of a given type (kind of) <br>
 /*instead*/  Standard_Integer NbTyped(OCNaroWrappers::OCStandard_Type^ type) ;

//! Returns the list of entities of a given type (kind of) <br>
 /*instead*/  OCInterface_EntityIterator^ Typed(OCNaroWrappers::OCStandard_Type^ type) ;

//! Allows re-iteration (useless for the first iteration) <br>
virtual /*instead*/  void Start() ;

//! Says if there are other entities (vertices) to iterate <br>
//!           the first time, calls Start <br>
 /*instead*/  System::Boolean More() ;

//! Sets iteration to the next entity (vertex) to give <br>
 /*instead*/  void Next() ;

//! Returns the current Entity iterated, to be used by Interface <br>
//!           tools or by GraphTools (where Entity is a Vertex) <br>
 /*instead*/  OCStandard_Transient^ Value() ;

//! Returns the content of the Iterator, accessed through a Handle <br>
//!           to be used by a frontal-engine logic <br>
//!           Returns an empty Sequence if the Iterator is empty <br>
//!           Calls Start if not yet done <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ Content() ;

//! Clears data of iteration <br>
virtual /*instead*/  void Destroy() ;

~OCInterface_EntityIterator()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
