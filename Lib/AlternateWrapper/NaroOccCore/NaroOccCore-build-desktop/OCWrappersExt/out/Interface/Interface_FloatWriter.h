// File generated by CPPExt (MPV)
//
#ifndef _Interface_FloatWriter_OCWrappers_HeaderFile
#define _Interface_FloatWriter_OCWrappers_HeaderFile

// include native header
#include <Interface_FloatWriter.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{



//! This class converts a floting number (Real) to a string <br>
//!           It can be used if the standard C-C++ output functions <br>
//!           (sprintf or cout<<) are not convenient. That is to say : <br>
//!           - to suppress trailing '0' and 'E+00' (if desired) <br>
//!           - to control exponant output and floating point output <br>
//! <br>
//!           Formats are given in the form used by printf-sprintf <br>
public ref class OCInterface_FloatWriter  {

protected:
  Interface_FloatWriter* nativeHandle;
  OCInterface_FloatWriter(OCDummy^) {};

public:
  property Interface_FloatWriter* Handle
  {
    Interface_FloatWriter* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCInterface_FloatWriter(Interface_FloatWriter* nativeHandle);

// Methods PUBLIC

//! Creates a FloatWriter ready to work, with default options  - <br>
//!           - zero suppress option is set <br>
//!           - main format is set to "%E" <br>
//!           - secondary format is set to "%f" for values between 0.1 and <br>
//!             1000. in absolute values <br>
//!           If <chars> is given (and positive), it will produce options <br>
//!           to produce this count of characters : "%<chars>f","%<chars>%E" <br>
OCInterface_FloatWriter(Standard_Integer chars);

//! Sets a specific Format for Sending Reals (main format) <br>
//!           (Default from Creation is "%E") <br>
//!           If <reset> is given True (default), this call clears effects <br>
//!           of former calls to SetFormatForRange and SetZeroSuppress <br>
 /*instead*/  void SetFormat(System::String^ form, System::Boolean reset) ;

//! Sets a secondary Format for Real, to be applied between R1 and <br>
//!           R2 (in absolute values). A Call to SetRealForm cancels this <br>
//!           secondary form if <reset> is True. <br>
//!           (Default from Creation is "%f" between 0.1 and 1000.) <br>
//!  Warning : if the condition (0. <= R1 < R2) is not fulfilled, this <br>
//!           secondary form is canceled. <br>
 /*instead*/  void SetFormatForRange(System::String^ form, Standard_Real R1, Standard_Real R2) ;

//! Sets Sending Real Parameters to suppress trailing Zeros and <br>
//!           Null Exponant ("E+00"), if <mode> is given True, Resets this <br>
//!           mode if <mode> is False (in addition to Real Forms) <br>
//!           A call to SetRealFrom resets this mode to False ig <reset> is <br>
//!           given True (Default from Creation is True) <br>
 /*instead*/  void SetZeroSuppress(System::Boolean mode) ;

//! Sets again options to the defaults given by Create <br>
 /*instead*/  void SetDefaults(Standard_Integer chars) ;

//! Returns active options : <zerosup> is the option ZeroSuppress, <br>
//!           <range> is True if a range is set, False else <br>
//!           R1,R2 give the range (if it is set) <br>
 /*instead*/  void Options(System::Boolean& zerosup, System::Boolean& range, Standard_Real& R1, Standard_Real& R2) ;

//! Returns the main format <br>
//! was C++ : return const <br>
 /*instead*/  System::String^ MainFormat() ;

//! Returns the format for range, if set <br>
//!           Meaningful only if <range> from Options is True <br>
//! was C++ : return const <br>
 /*instead*/  System::String^ FormatForRange() ;

//! Writes a Real value <val> to a string <text> by using the <br>
//!           options. Returns the useful Length of produced string. <br>
//!           It calls the class method Convert. <br>
//!  Warning : <text> is assumed to be wide enough (20-30 is correct) <br>
//!           And, even if declared in, its content will be modified <br>
 /*instead*/  Standard_Integer Write(Standard_Real val, System::String^ text) ;

//! This class method converts a Real Value to a string, given <br>
//!           options given as arguments. It can be called independantly. <br>
//!  Warning : even if declared in, content of <text> will be modified <br>
static /*instead*/  Standard_Integer Convert(Standard_Real val, System::String^ text, System::Boolean zerosup, Standard_Real Range1, Standard_Real Range2, System::String^ mainform, System::String^ rangeform) ;

~OCInterface_FloatWriter()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
