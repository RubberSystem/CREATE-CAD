// File generated by CPPExt (CPP file)
//

#include "Interface_InterfaceModel.h"
#include "../Converter.h"
#include "Interface_Check.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "Interface_GTool.h"
#include "Interface_Protocol.h"
#include "../Standard/Standard_Transient.h"
#include "../Standard/Standard_Type.h"
#include "Interface_ReportEntity.h"
#include "Interface_CheckIterator.h"
#include "Interface_GeneralLib.h"
#include "Interface_EntityIterator.h"
#include "../Message/Message_Messenger.h"
#include "../TColStd/TColStd_HSequenceOfHAsciiString.h"


using namespace OCNaroWrappers;

OCInterface_InterfaceModel::OCInterface_InterfaceModel(Handle(Interface_InterfaceModel)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Interface_InterfaceModel(*nativeHandle);
}

OCInterface_InterfaceModel::OCInterface_InterfaceModel() : OCMMgt_TShared((OCDummy^)nullptr)

{}

 void OCInterface_InterfaceModel::SetProtocol(OCNaroWrappers::OCInterface_Protocol^ proto)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->SetProtocol(*((Handle_Interface_Protocol*)proto->Handle));
}

OCInterface_Protocol^ OCInterface_InterfaceModel::Protocol()
{
  Handle(Interface_Protocol) tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->Protocol();
  return gcnew OCInterface_Protocol(&tmp);
}

 void OCInterface_InterfaceModel::SetGTool(OCNaroWrappers::OCInterface_GTool^ gtool)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->SetGTool(*((Handle_Interface_GTool*)gtool->Handle));
}

OCInterface_GTool^ OCInterface_InterfaceModel::GTool()
{
  Handle(Interface_GTool) tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->GTool();
  return gcnew OCInterface_GTool(&tmp);
}

 System::Boolean OCInterface_InterfaceModel::DispatchStatus()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->DispatchStatus());
}

 void OCInterface_InterfaceModel::Clear()
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->Clear();
}

 void OCInterface_InterfaceModel::ClearEntities()
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->ClearEntities();
}

 Standard_Integer OCInterface_InterfaceModel::NbEntities()
{
  return (*((Handle_Interface_InterfaceModel*)nativeHandle))->NbEntities();
}

 System::Boolean OCInterface_InterfaceModel::Contains(OCNaroWrappers::OCStandard_Transient^ anentity)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->Contains(*((Handle_Standard_Transient*)anentity->Handle)));
}

 Standard_Integer OCInterface_InterfaceModel::Number(OCNaroWrappers::OCStandard_Transient^ anentity)
{
  return (*((Handle_Interface_InterfaceModel*)nativeHandle))->Number(*((Handle_Standard_Transient*)anentity->Handle));
}

OCStandard_Transient^ OCInterface_InterfaceModel::Value(Standard_Integer num)
{
  Handle(Standard_Transient) tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->Value(num);
  return gcnew OCStandard_Transient(&tmp);
}

 Standard_Integer OCInterface_InterfaceModel::NbTypes(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return (*((Handle_Interface_InterfaceModel*)nativeHandle))->NbTypes(*((Handle_Standard_Transient*)ent->Handle));
}

OCStandard_Type^ OCInterface_InterfaceModel::Type(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer num)
{
  Handle(Standard_Type) tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->Type(*((Handle_Standard_Transient*)ent->Handle), num);
  return gcnew OCStandard_Type(&tmp);
}

 System::String^ OCInterface_InterfaceModel::TypeName(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean complete)
{
  return OCConverter::StandardCStringToString((*((Handle_Interface_InterfaceModel*)nativeHandle))->TypeName(*((Handle_Standard_Transient*)ent->Handle), OCConverter::BooleanToStandardBoolean(complete)));
}

 System::String^ OCInterface_InterfaceModel::ClassName(System::String^ typnam)
{
  return OCConverter::StandardCStringToString(Interface_InterfaceModel::ClassName(OCConverter::StringToStandardCString(typnam)));
}

 OCInterface_DataState OCInterface_InterfaceModel::EntityState(Standard_Integer num)
{
  return (OCInterface_DataState)((*((Handle_Interface_InterfaceModel*)nativeHandle))->EntityState(num));
}

 System::Boolean OCInterface_InterfaceModel::IsReportEntity(Standard_Integer num, System::Boolean semantic)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->IsReportEntity(num, OCConverter::BooleanToStandardBoolean(semantic)));
}

OCInterface_ReportEntity^ OCInterface_InterfaceModel::ReportEntity(Standard_Integer num, System::Boolean semantic)
{
  Handle(Interface_ReportEntity) tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->ReportEntity(num, OCConverter::BooleanToStandardBoolean(semantic));
  return gcnew OCInterface_ReportEntity(&tmp);
}

 System::Boolean OCInterface_InterfaceModel::IsErrorEntity(Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->IsErrorEntity(num));
}

 System::Boolean OCInterface_InterfaceModel::IsRedefinedContent(Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->IsRedefinedContent(num));
}

 System::Boolean OCInterface_InterfaceModel::ClearReportEntity(Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->ClearReportEntity(num));
}

 System::Boolean OCInterface_InterfaceModel::SetReportEntity(Standard_Integer num, OCNaroWrappers::OCInterface_ReportEntity^ rep)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->SetReportEntity(num, *((Handle_Interface_ReportEntity*)rep->Handle)));
}

 System::Boolean OCInterface_InterfaceModel::AddReportEntity(OCNaroWrappers::OCInterface_ReportEntity^ rep, System::Boolean semantic)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->AddReportEntity(*((Handle_Interface_ReportEntity*)rep->Handle), OCConverter::BooleanToStandardBoolean(semantic)));
}

 System::Boolean OCInterface_InterfaceModel::IsUnknownEntity(Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->IsUnknownEntity(num));
}

 void OCInterface_InterfaceModel::FillSemanticChecks(OCNaroWrappers::OCInterface_CheckIterator^ checks, System::Boolean clear)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->FillSemanticChecks(*((Interface_CheckIterator*)checks->Handle), OCConverter::BooleanToStandardBoolean(clear));
}

 System::Boolean OCInterface_InterfaceModel::HasSemanticChecks()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->HasSemanticChecks());
}

OCInterface_Check^ OCInterface_InterfaceModel::Check(Standard_Integer num, System::Boolean syntactic)
{
  Handle(Interface_Check) tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->Check(num, OCConverter::BooleanToStandardBoolean(syntactic));
  return gcnew OCInterface_Check(&tmp);
}

 void OCInterface_InterfaceModel::Reservate(Standard_Integer nbent)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->Reservate(nbent);
}

 void OCInterface_InterfaceModel::AddEntity(OCNaroWrappers::OCStandard_Transient^ anentity)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->AddEntity(*((Handle_Standard_Transient*)anentity->Handle));
}

 void OCInterface_InterfaceModel::AddWithRefs(OCNaroWrappers::OCStandard_Transient^ anent, OCNaroWrappers::OCInterface_Protocol^ proto, Standard_Integer level, System::Boolean listall)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->AddWithRefs(*((Handle_Standard_Transient*)anent->Handle), *((Handle_Interface_Protocol*)proto->Handle), level, OCConverter::BooleanToStandardBoolean(listall));
}

 void OCInterface_InterfaceModel::AddWithRefs(OCNaroWrappers::OCStandard_Transient^ anent, Standard_Integer level, System::Boolean listall)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->AddWithRefs(*((Handle_Standard_Transient*)anent->Handle), level, OCConverter::BooleanToStandardBoolean(listall));
}

 void OCInterface_InterfaceModel::AddWithRefs(OCNaroWrappers::OCStandard_Transient^ anent, OCNaroWrappers::OCInterface_GeneralLib^ lib, Standard_Integer level, System::Boolean listall)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->AddWithRefs(*((Handle_Standard_Transient*)anent->Handle), *((Interface_GeneralLib*)lib->Handle), level, OCConverter::BooleanToStandardBoolean(listall));
}

 void OCInterface_InterfaceModel::ReplaceEntity(Standard_Integer nument, OCNaroWrappers::OCStandard_Transient^ anent)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->ReplaceEntity(nument, *((Handle_Standard_Transient*)anent->Handle));
}

 void OCInterface_InterfaceModel::ReverseOrders(Standard_Integer after)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->ReverseOrders(after);
}

 void OCInterface_InterfaceModel::ChangeOrder(Standard_Integer oldnum, Standard_Integer newnum, Standard_Integer count)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->ChangeOrder(oldnum, newnum, count);
}

 void OCInterface_InterfaceModel::GetFromTransfer(OCNaroWrappers::OCInterface_EntityIterator^ aniter)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->GetFromTransfer(*((Interface_EntityIterator*)aniter->Handle));
}

 System::Boolean OCInterface_InterfaceModel::SetCategoryNumber(Standard_Integer num, Standard_Integer val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_InterfaceModel*)nativeHandle))->SetCategoryNumber(num, val));
}

 Standard_Integer OCInterface_InterfaceModel::CategoryNumber(Standard_Integer num)
{
  return (*((Handle_Interface_InterfaceModel*)nativeHandle))->CategoryNumber(num);
}

 void OCInterface_InterfaceModel::FillIterator(OCNaroWrappers::OCInterface_EntityIterator^ iter)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->FillIterator(*((Interface_EntityIterator*)iter->Handle));
}

OCInterface_EntityIterator^ OCInterface_InterfaceModel::Entities()
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->Entities();
  return gcnew OCInterface_EntityIterator(tmp);
}

OCInterface_EntityIterator^ OCInterface_InterfaceModel::Reports(System::Boolean semantic)
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->Reports(OCConverter::BooleanToStandardBoolean(semantic));
  return gcnew OCInterface_EntityIterator(tmp);
}

OCInterface_EntityIterator^ OCInterface_InterfaceModel::Redefineds()
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->Redefineds();
  return gcnew OCInterface_EntityIterator(tmp);
}

OCInterface_Check^ OCInterface_InterfaceModel::GlobalCheck(System::Boolean syntactic)
{
  Handle(Interface_Check) tmp = (*((Handle_Interface_InterfaceModel*)nativeHandle))->GlobalCheck(OCConverter::BooleanToStandardBoolean(syntactic));
  return gcnew OCInterface_Check(&tmp);
}

 void OCInterface_InterfaceModel::SetGlobalCheck(OCNaroWrappers::OCInterface_Check^ ach)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->SetGlobalCheck(*((Handle_Interface_Check*)ach->Handle));
}

 void OCInterface_InterfaceModel::VerifyCheck(OCNaroWrappers::OCInterface_Check^ ach)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->VerifyCheck(*((Handle_Interface_Check*)ach->Handle));
}

 void OCInterface_InterfaceModel::Print(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCMessage_Messenger^ s, Standard_Integer mode)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->Print(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Message_Messenger*)s->Handle), mode);
}

 void OCInterface_InterfaceModel::PrintToLog(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_Interface_InterfaceModel*)nativeHandle))->PrintToLog(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Message_Messenger*)S->Handle));
}

 Standard_Integer OCInterface_InterfaceModel::NextNumberForLabel(System::String^ label, Standard_Integer lastnum, System::Boolean exact)
{
  return (*((Handle_Interface_InterfaceModel*)nativeHandle))->NextNumberForLabel(OCConverter::StringToStandardCString(label), lastnum, OCConverter::BooleanToStandardBoolean(exact));
}

 System::Boolean OCInterface_InterfaceModel::HasTemplate(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean(Interface_InterfaceModel::HasTemplate(OCConverter::StringToStandardCString(name)));
}

OCInterface_InterfaceModel^ OCInterface_InterfaceModel::Template(System::String^ name)
{
  Handle(Interface_InterfaceModel) tmp = Interface_InterfaceModel::Template(OCConverter::StringToStandardCString(name));
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 System::Boolean OCInterface_InterfaceModel::SetTemplate(System::String^ name, OCNaroWrappers::OCInterface_InterfaceModel^ model)
{
  return OCConverter::StandardBooleanToBoolean(Interface_InterfaceModel::SetTemplate(OCConverter::StringToStandardCString(name), *((Handle_Interface_InterfaceModel*)model->Handle)));
}

OCTColStd_HSequenceOfHAsciiString^ OCInterface_InterfaceModel::ListTemplates()
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = Interface_InterfaceModel::ListTemplates();
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}


