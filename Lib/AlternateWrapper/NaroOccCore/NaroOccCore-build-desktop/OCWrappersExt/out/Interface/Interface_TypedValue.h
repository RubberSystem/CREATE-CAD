// File generated by CPPExt (Transient)
//
#ifndef _Interface_TypedValue_OCWrappers_HeaderFile
#define _Interface_TypedValue_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_TypedValue.hxx>
#include "../Converter.h"

#include "../MoniTool/MoniTool_TypedValue.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "Interface_ParamType.h"
#include "../MoniTool/MoniTool_ValueType.h"


namespace OCNaroWrappers
{

ref class OCStandard_Type;
ref class OCTColStd_HArray1OfAsciiString;
ref class OCDico_DictionaryOfInteger;
ref class OCTCollection_HAsciiString;
ref class OCStandard_Transient;


//! Now strictly equivalent to TypedValue from MoniTool, <br>
//!           except for ParamType which remains for compatibility reasons <br>
//! <br>
//!           This class allows to dynamically manage .. typed values, i.e. <br>
//!           values which have an alphanumeric expression, but with <br>
//!           controls. Such as "must be an Integer" or "Enumerative Text" <br>
//!           etc <br>
//! <br>
//!           Hence, a TypedValue brings a specification (type + constraints <br>
//!           if any) and a value. Its basic form is a string, it can be <br>
//!           specified as integer or real or enumerative string, then <br>
//!           queried as such. <br>
//!           Its string content, which is a Handle(HAsciiString) can be <br>
//!           shared by other data structures, hence gives a direct on line <br>
//!           access to its value. <br>
public ref class OCInterface_TypedValue : OCMoniTool_TypedValue {

protected:
  // dummy constructor;
  OCInterface_TypedValue(OCDummy^) : OCMoniTool_TypedValue((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_TypedValue(Handle(Interface_TypedValue)* nativeHandle);

// Methods PUBLIC

//! Creates a TypedValue, with a name <br>
//! <br>
//!           type gives the type of the parameter, default is free text <br>
//!           Also available : Integer, Real, Enum, Entity (i.e. Object) <br>
//!           More precise specifications, titles, can be given to the <br>
//!           TypedValue once created <br>
//! <br>
//!           init gives an initial value. If it is not given, the <br>
//!           TypedValue begins as "not set", its value is empty <br>
OCInterface_TypedValue(System::String^ name, OCInterface_ParamType type, System::String^ init);

//! Returns the type <br>
//!           I.E. calls ValueType then makes correspondance between <br>
//!             ParamType from Interface (which remains for compatibility <br>
//!              reasons) and ValueType from MoniTool <br>
 /*instead*/  OCInterface_ParamType Type() ;

//! Correspondance ParamType from Interface  to <br>
//!               ValueType from MoniTool <br>
static /*instead*/  OCMoniTool_ValueType ParamTypeToValueType(OCInterface_ParamType typ) ;

//! Correspondance ParamType from Interface  to <br>
//!               ValueType from MoniTool <br>
static /*instead*/  OCInterface_ParamType ValueTypeToParamType(OCMoniTool_ValueType typ) ;

~OCInterface_TypedValue()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
