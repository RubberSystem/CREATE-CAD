// File generated by CPPExt (Transient)
//
#ifndef _Interface_ReportEntity_OCWrappers_HeaderFile
#define _Interface_ReportEntity_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_ReportEntity.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCInterface_Check;
ref class OCStandard_Transient;


//! A ReportEntity is produced to aknowledge and memorize the <br>
//!           binding between a Check and an Entity. The Check can bring <br>
//!           Fails (+ Warnings if any), or only Warnings. If it is empty, <br>
//!           the Report Entity is for an Unknown Entity. <br>
//! <br>
//!           The ReportEntity brings : the Concerned Entity, the <br>
//!           Check, and if the Entity is empty (Fails due to Read <br>
//!           Errors, hence the Entity could not be loaded), a Content. <br>
//!           The Content is itself an Transient Object, but remains in a <br>
//!           literal form : it is an "Unknown Entity". If the Concerned <br>
//!           Entity is itself Unknown, Concerned and Content are equal. <br>
//! <br>
//!           According to the Check, if it brings Fail messages, <br>
//!           the ReportEntity is an "Error Entity", the Concerned Entity is <br>
//!           an "Erroneous Entity". Else it is a "Correction Entity", the <br>
//!           Concerned Entity is a "Corrected Entity". With no Check <br>
//!           message and if Concerened and Content are equal, it reports <br>
//!           for an "Unknown Entity". <br>
//! <br>
//!           Each norm must produce its own type of Unknown Entity, but can <br>
//!           use the class UndefinedContent to brings parameters : it is <br>
//!           enough for most of information and avoids to redefine them, <br>
//!           only the specific part remains to be defined for each norm. <br>
public ref class OCInterface_ReportEntity : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCInterface_ReportEntity(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_ReportEntity(Handle(Interface_ReportEntity)* nativeHandle);

// Methods PUBLIC

//! Creates a ReportEntity for an Unknown Entity : Check is empty, <br>
//!           and Concerned equates Content (i.e. the Unknown Entity) <br>
OCInterface_ReportEntity(OCNaroWrappers::OCStandard_Transient^ unknown);

//! Creates a ReportEntity with its features : <br>
//!           - <acheck> is the Check to be memorised <br>
//!           - <concerned> is the Entity to which the Check is bound <br>
//!           Later, a Content can be set : it is required for an Error <br>
OCInterface_ReportEntity(OCNaroWrappers::OCInterface_Check^ acheck, OCNaroWrappers::OCStandard_Transient^ concerned);

//! Sets a Content : it brings non interpreted data which belong <br>
//!           to the Concerned Entity. It can be empty then loaded later. <br>
//!           Remark that for an Unknown Entity, Content is set by Create. <br>
 /*instead*/  void SetContent(OCNaroWrappers::OCStandard_Transient^ content) ;

//! Returns the stored Check <br>
 /*instead*/  OCInterface_Check^ Check() ;

//! Returns the stored Check in order to change it <br>
 /*instead*/  OCInterface_Check^ CCheck() ;

//! Returns the stored Concerned Entity. It equates the Content <br>
//!           in the case of an Unknown Entity <br>
 /*instead*/  OCStandard_Transient^ Concerned() ;

//! Returns True if a Content is stored (it can equate Concerned) <br>
 /*instead*/  System::Boolean HasContent() ;

//! Returns True if a Content is stored AND differs from Concerned <br>
//!           (i.e. redefines content) : used when Concerned could not be <br>
//!           loaded <br>
 /*instead*/  System::Boolean HasNewContent() ;

//! Returns the stored Content, or a Null Handle <br>
//!           Remark that it must be an "Unknown Entity" suitable for <br>
//!           the norm of the containing Model <br>
 /*instead*/  OCStandard_Transient^ Content() ;

//! Returns True for an Error Entity, i.e. if the Check <br>
//!           brings at least one Fail message <br>
 /*instead*/  System::Boolean IsError() ;

//! Returns True for an Unknown Entity, i,e. if the Check <br>
//!           is empty and Concerned equates Content <br>
 /*instead*/  System::Boolean IsUnknown() ;

~OCInterface_ReportEntity()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
