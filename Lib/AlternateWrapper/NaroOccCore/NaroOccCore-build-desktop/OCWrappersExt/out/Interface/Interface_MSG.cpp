// File generated by CPPExt (CPP file)
//

#include "Interface_MSG.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCInterface_MSG::OCInterface_MSG(Interface_MSG* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCInterface_MSG::OCInterface_MSG(System::String^ key) 
{
  nativeHandle = new Interface_MSG(OCConverter::StringToStandardCString(key));
}

OCInterface_MSG::OCInterface_MSG(System::String^ key, Standard_Integer i1) 
{
  nativeHandle = new Interface_MSG(OCConverter::StringToStandardCString(key), i1);
}

OCInterface_MSG::OCInterface_MSG(System::String^ key, Standard_Integer i1, Standard_Integer i2) 
{
  nativeHandle = new Interface_MSG(OCConverter::StringToStandardCString(key), i1, i2);
}

OCInterface_MSG::OCInterface_MSG(System::String^ key, Standard_Real r1, Standard_Integer intervals) 
{
  nativeHandle = new Interface_MSG(OCConverter::StringToStandardCString(key), r1, intervals);
}

OCInterface_MSG::OCInterface_MSG(System::String^ key, System::String^ str) 
{
  nativeHandle = new Interface_MSG(OCConverter::StringToStandardCString(key), OCConverter::StringToStandardCString(str));
}

OCInterface_MSG::OCInterface_MSG(System::String^ key, Standard_Integer ival, System::String^ str) 
{
  nativeHandle = new Interface_MSG(OCConverter::StringToStandardCString(key), ival, OCConverter::StringToStandardCString(str));
}

 System::String^ OCInterface_MSG::Value()
{
  return OCConverter::StandardCStringToString(((Interface_MSG*)nativeHandle)->Value());
}

 Standard_Integer OCInterface_MSG::Read(Standard_IStream& S)
{
  return Interface_MSG::Read(S);
}

 Standard_Integer OCInterface_MSG::Read(System::String^ file)
{
  return Interface_MSG::Read(OCConverter::StringToStandardCString(file));
}

 Standard_Integer OCInterface_MSG::Write(Standard_OStream& S, System::String^ rootkey)
{
  return Interface_MSG::Write(S, OCConverter::StringToStandardCString(rootkey));
}

 System::Boolean OCInterface_MSG::IsKey(System::String^ mess)
{
  return OCConverter::StandardBooleanToBoolean(Interface_MSG::IsKey(OCConverter::StringToStandardCString(mess)));
}

 System::String^ OCInterface_MSG::Translated(System::String^ key)
{
  return OCConverter::StandardCStringToString(Interface_MSG::Translated(OCConverter::StringToStandardCString(key)));
}

 void OCInterface_MSG::Record(System::String^ key, System::String^ item)
{
  Interface_MSG::Record(OCConverter::StringToStandardCString(key), OCConverter::StringToStandardCString(item));
}

 void OCInterface_MSG::SetTrace(System::Boolean toprint, System::Boolean torecord)
{
  Interface_MSG::SetTrace(OCConverter::BooleanToStandardBoolean(toprint), OCConverter::BooleanToStandardBoolean(torecord));
}

 void OCInterface_MSG::SetMode(System::Boolean running, System::Boolean raising)
{
  Interface_MSG::SetMode(OCConverter::BooleanToStandardBoolean(running), OCConverter::BooleanToStandardBoolean(raising));
}

 void OCInterface_MSG::PrintTrace(Standard_OStream& S)
{
  Interface_MSG::PrintTrace(S);
}

 Standard_Real OCInterface_MSG::Intervalled(Standard_Real val, Standard_Integer order, System::Boolean upper)
{
  return Interface_MSG::Intervalled(val, order, OCConverter::BooleanToStandardBoolean(upper));
}

 void OCInterface_MSG::TDate(System::String^ text, Standard_Integer yy, Standard_Integer mm, Standard_Integer dd, Standard_Integer hh, Standard_Integer mn, Standard_Integer ss, System::String^ format)
{
  Interface_MSG::TDate(OCConverter::StringToStandardCString(text), yy, mm, dd, hh, mn, ss, OCConverter::StringToStandardCString(format));
}

 System::Boolean OCInterface_MSG::NDate(System::String^ text, Standard_Integer& yy, Standard_Integer& mm, Standard_Integer& dd, Standard_Integer& hh, Standard_Integer& mn, Standard_Integer& ss)
{
  return OCConverter::StandardBooleanToBoolean(Interface_MSG::NDate(OCConverter::StringToStandardCString(text), yy, mm, dd, hh, mn, ss));
}

 Standard_Integer OCInterface_MSG::CDate(System::String^ text1, System::String^ text2)
{
  return Interface_MSG::CDate(OCConverter::StringToStandardCString(text1), OCConverter::StringToStandardCString(text2));
}

 System::String^ OCInterface_MSG::Blanks(Standard_Integer val, Standard_Integer max)
{
  return OCConverter::StandardCStringToString(Interface_MSG::Blanks(val, max));
}

 System::String^ OCInterface_MSG::Blanks(System::String^ val, Standard_Integer max)
{
  return OCConverter::StandardCStringToString(Interface_MSG::Blanks(OCConverter::StringToStandardCString(val), max));
}

 System::String^ OCInterface_MSG::Blanks(Standard_Integer count)
{
  return OCConverter::StandardCStringToString(Interface_MSG::Blanks(count));
}

 void OCInterface_MSG::Print(Standard_OStream& S, System::String^ val, Standard_Integer max, Standard_Integer just)
{
  Interface_MSG::Print(S, OCConverter::StringToStandardCString(val), max, just);
}


