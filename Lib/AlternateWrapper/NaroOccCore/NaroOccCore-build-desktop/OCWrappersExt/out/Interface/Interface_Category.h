// File generated by CPPExt (MPV)
//
#ifndef _Interface_Category_OCWrappers_HeaderFile
#define _Interface_Category_OCWrappers_HeaderFile

// include native header
#include <Interface_Category.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCInterface_GTool;
ref class OCTColStd_HArray1OfInteger;
ref class OCInterface_Protocol;
ref class OCStandard_Transient;
ref class OCInterface_ShareTool;
ref class OCInterface_InterfaceModel;


//! This class manages categories <br>
//!           A category is defined by a name and a number, and can be <br>
//!           seen as a way of rough classification, i.e. less precise than <br>
//!           a cdl type. <br>
//!           Hence, it is possible to dispatch every entity in about <br>
//!           a dozen of categories, twenty is a reasonable maximum. <br>
//! <br>
//!           Basically, the system provides the following categories : <br>
//!           Shape (Geometry, BRep, CSG, Features, etc...) <br>
//!           Drawing (Drawing, Views, Annotations, Pictures, Scketches ...) <br>
//!           Structure (Component & Part, Groups & Patterns ...) <br>
//!           Description (Meta-Data : Relations, Properties, Product ...) <br>
//!           Auxiliary   (those which do not enter in the above list) <br>
//!             and some dedicated categories <br>
//!           FEA , Kinematics , Piping , etc... <br>
//!           plus Professional  for other dedicated non-classed categories <br>
//! <br>
//!           In addition, this class provides a way to compute then quickly <br>
//!           query category numbers for an entire model. <br>
//!           Values are just recorded as a list of numbers, control must <br>
//!           then be done in a wider context (which must provide a Graph) <br>
public ref class OCInterface_Category  {

protected:
  Interface_Category* nativeHandle;
  OCInterface_Category(OCDummy^) {};

public:
  property Interface_Category* Handle
  {
    Interface_Category* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCInterface_Category(Interface_Category* nativeHandle);

// Methods PUBLIC

//! Creates a Category, with no protocol yet <br>
OCInterface_Category();

//! Creates a Category with a given protocol <br>
OCInterface_Category(OCNaroWrappers::OCInterface_Protocol^ proto);

//! Creates a Category with a given GTool <br>
OCInterface_Category(OCNaroWrappers::OCInterface_GTool^ gtool);

//! Sets/Changes Protocol <br>
 /*instead*/  void SetProtocol(OCNaroWrappers::OCInterface_Protocol^ proto) ;

//! Determines the Category Number for an entity in its context, <br>
//!           by using general service CategoryNumber <br>
 /*instead*/  Standard_Integer CatNum(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_ShareTool^ shares) ;

//! Clears the recorded list of category numbers for a Model <br>
 /*instead*/  void ClearNums() ;

//! Computes the Category Number for each entity and records it, <br>
//!           in an array (ent.number -> category number) <br>
//!           Hence, it can be queried by the method Num. <br>
//!           The Model itself is not recorded, this method is intended to <br>
//!           be used in a wider context (which detains also a Graph, etc) <br>
 /*instead*/  void Compute(OCNaroWrappers::OCInterface_InterfaceModel^ model, OCNaroWrappers::OCInterface_ShareTool^ shares) ;

//! Returns the category number recorded for an entity number <br>
//!           Returns 0 if out of range <br>
 /*instead*/  Standard_Integer Num(Standard_Integer nument) ;

//! Records a new Category defined by its names, produces a number <br>
//!           New if not yet recorded <br>
static /*instead*/  Standard_Integer AddCategory(System::String^ name) ;

//! Returns the count of recorded categories <br>
static /*instead*/  Standard_Integer NbCategories() ;

//! Returns the name of a category, according to its number <br>
static /*instead*/  System::String^ Name(Standard_Integer num) ;

//! Returns the number of a category, according to its name <br>
static /*instead*/  Standard_Integer Number(System::String^ name) ;

//! Default initialisation <br>
//!           (protected against several calls : passes only once) <br>
static /*instead*/  void Init() ;

~OCInterface_Category()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
