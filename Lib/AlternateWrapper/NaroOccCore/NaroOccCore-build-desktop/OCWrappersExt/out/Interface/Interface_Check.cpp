// File generated by CPPExt (CPP file)
//

#include "Interface_Check.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HSequenceOfHAsciiString.h"
#include "../Standard/Standard_Transient.h"
#include "../Message/Message_Msg.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "../Message/Message_Messenger.h"


using namespace OCNaroWrappers;

OCInterface_Check::OCInterface_Check(Handle(Interface_Check)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Interface_Check(*nativeHandle);
}

OCInterface_Check::OCInterface_Check() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Interface_Check(new Interface_Check());
}

OCInterface_Check::OCInterface_Check(OCNaroWrappers::OCStandard_Transient^ anentity) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Interface_Check(new Interface_Check(*((Handle_Standard_Transient*)anentity->Handle)));
}

 void OCInterface_Check::SendFail(OCNaroWrappers::OCMessage_Msg^ amsg)
{
  (*((Handle_Interface_Check*)nativeHandle))->SendFail(*((Message_Msg*)amsg->Handle));
}

 void OCInterface_Check::AddFail(OCNaroWrappers::OCTCollection_HAsciiString^ amess)
{
  (*((Handle_Interface_Check*)nativeHandle))->AddFail(*((Handle_TCollection_HAsciiString*)amess->Handle));
}

 void OCInterface_Check::AddFail(OCNaroWrappers::OCTCollection_HAsciiString^ amess, OCNaroWrappers::OCTCollection_HAsciiString^ orig)
{
  (*((Handle_Interface_Check*)nativeHandle))->AddFail(*((Handle_TCollection_HAsciiString*)amess->Handle), *((Handle_TCollection_HAsciiString*)orig->Handle));
}

 void OCInterface_Check::AddFail(System::String^ amess, System::String^ orig)
{
  (*((Handle_Interface_Check*)nativeHandle))->AddFail(OCConverter::StringToStandardCString(amess), OCConverter::StringToStandardCString(orig));
}

 void OCInterface_Check::AddFail(OCNaroWrappers::OCMessage_Msg^ amsg)
{
  (*((Handle_Interface_Check*)nativeHandle))->AddFail(*((Message_Msg*)amsg->Handle));
}

 System::Boolean OCInterface_Check::HasFailed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_Check*)nativeHandle))->HasFailed());
}

 Standard_Integer OCInterface_Check::NbFails()
{
  return (*((Handle_Interface_Check*)nativeHandle))->NbFails();
}

OCTCollection_HAsciiString^ OCInterface_Check::Fail(Standard_Integer num, System::Boolean final)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_Interface_Check*)nativeHandle))->Fail(num, OCConverter::BooleanToStandardBoolean(final));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 System::String^ OCInterface_Check::CFail(Standard_Integer num, System::Boolean final)
{
  return OCConverter::StandardCStringToString((*((Handle_Interface_Check*)nativeHandle))->CFail(num, OCConverter::BooleanToStandardBoolean(final)));
}

OCTColStd_HSequenceOfHAsciiString^ OCInterface_Check::Fails(System::Boolean final)
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = (*((Handle_Interface_Check*)nativeHandle))->Fails(OCConverter::BooleanToStandardBoolean(final));
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}

 void OCInterface_Check::SendWarning(OCNaroWrappers::OCMessage_Msg^ amsg)
{
  (*((Handle_Interface_Check*)nativeHandle))->SendWarning(*((Message_Msg*)amsg->Handle));
}

 void OCInterface_Check::AddWarning(OCNaroWrappers::OCTCollection_HAsciiString^ amess)
{
  (*((Handle_Interface_Check*)nativeHandle))->AddWarning(*((Handle_TCollection_HAsciiString*)amess->Handle));
}

 void OCInterface_Check::AddWarning(OCNaroWrappers::OCTCollection_HAsciiString^ amess, OCNaroWrappers::OCTCollection_HAsciiString^ orig)
{
  (*((Handle_Interface_Check*)nativeHandle))->AddWarning(*((Handle_TCollection_HAsciiString*)amess->Handle), *((Handle_TCollection_HAsciiString*)orig->Handle));
}

 void OCInterface_Check::AddWarning(System::String^ amess, System::String^ orig)
{
  (*((Handle_Interface_Check*)nativeHandle))->AddWarning(OCConverter::StringToStandardCString(amess), OCConverter::StringToStandardCString(orig));
}

 void OCInterface_Check::AddWarning(OCNaroWrappers::OCMessage_Msg^ amsg)
{
  (*((Handle_Interface_Check*)nativeHandle))->AddWarning(*((Message_Msg*)amsg->Handle));
}

 System::Boolean OCInterface_Check::HasWarnings()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_Check*)nativeHandle))->HasWarnings());
}

 Standard_Integer OCInterface_Check::NbWarnings()
{
  return (*((Handle_Interface_Check*)nativeHandle))->NbWarnings();
}

OCTCollection_HAsciiString^ OCInterface_Check::Warning(Standard_Integer num, System::Boolean final)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_Interface_Check*)nativeHandle))->Warning(num, OCConverter::BooleanToStandardBoolean(final));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 System::String^ OCInterface_Check::CWarning(Standard_Integer num, System::Boolean final)
{
  return OCConverter::StandardCStringToString((*((Handle_Interface_Check*)nativeHandle))->CWarning(num, OCConverter::BooleanToStandardBoolean(final)));
}

OCTColStd_HSequenceOfHAsciiString^ OCInterface_Check::Warnings(System::Boolean final)
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = (*((Handle_Interface_Check*)nativeHandle))->Warnings(OCConverter::BooleanToStandardBoolean(final));
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}

 void OCInterface_Check::SendMsg(OCNaroWrappers::OCMessage_Msg^ amsg)
{
  (*((Handle_Interface_Check*)nativeHandle))->SendMsg(*((Message_Msg*)amsg->Handle));
}

 Standard_Integer OCInterface_Check::NbInfoMsgs()
{
  return (*((Handle_Interface_Check*)nativeHandle))->NbInfoMsgs();
}

OCTCollection_HAsciiString^ OCInterface_Check::InfoMsg(Standard_Integer num, System::Boolean final)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_Interface_Check*)nativeHandle))->InfoMsg(num, OCConverter::BooleanToStandardBoolean(final));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 System::String^ OCInterface_Check::CInfoMsg(Standard_Integer num, System::Boolean final)
{
  return OCConverter::StandardCStringToString((*((Handle_Interface_Check*)nativeHandle))->CInfoMsg(num, OCConverter::BooleanToStandardBoolean(final)));
}

OCTColStd_HSequenceOfHAsciiString^ OCInterface_Check::InfoMsgs(System::Boolean final)
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = (*((Handle_Interface_Check*)nativeHandle))->InfoMsgs(OCConverter::BooleanToStandardBoolean(final));
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}

 OCInterface_CheckStatus OCInterface_Check::Status()
{
  return (OCInterface_CheckStatus)((*((Handle_Interface_Check*)nativeHandle))->Status());
}

 System::Boolean OCInterface_Check::Complies(OCInterface_CheckStatus status)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_Check*)nativeHandle))->Complies((Interface_CheckStatus)status));
}

 System::Boolean OCInterface_Check::Complies(OCNaroWrappers::OCTCollection_HAsciiString^ mess, Standard_Integer incl, OCInterface_CheckStatus status)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_Check*)nativeHandle))->Complies(*((Handle_TCollection_HAsciiString*)mess->Handle), incl, (Interface_CheckStatus)status));
}

 System::Boolean OCInterface_Check::HasEntity()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_Check*)nativeHandle))->HasEntity());
}

OCStandard_Transient^ OCInterface_Check::Entity()
{
  Handle(Standard_Transient) tmp = (*((Handle_Interface_Check*)nativeHandle))->Entity();
  return gcnew OCStandard_Transient(&tmp);
}

 void OCInterface_Check::Clear()
{
  (*((Handle_Interface_Check*)nativeHandle))->Clear();
}

 void OCInterface_Check::ClearFails()
{
  (*((Handle_Interface_Check*)nativeHandle))->ClearFails();
}

 void OCInterface_Check::ClearWarnings()
{
  (*((Handle_Interface_Check*)nativeHandle))->ClearWarnings();
}

 void OCInterface_Check::ClearInfoMsgs()
{
  (*((Handle_Interface_Check*)nativeHandle))->ClearInfoMsgs();
}

 System::Boolean OCInterface_Check::Remove(OCNaroWrappers::OCTCollection_HAsciiString^ mess, Standard_Integer incl, OCInterface_CheckStatus status)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_Check*)nativeHandle))->Remove(*((Handle_TCollection_HAsciiString*)mess->Handle), incl, (Interface_CheckStatus)status));
}

 System::Boolean OCInterface_Check::Mend(System::String^ pref, Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_Check*)nativeHandle))->Mend(OCConverter::StringToStandardCString(pref), num));
}

 void OCInterface_Check::SetEntity(OCNaroWrappers::OCStandard_Transient^ anentity)
{
  (*((Handle_Interface_Check*)nativeHandle))->SetEntity(*((Handle_Standard_Transient*)anentity->Handle));
}

 void OCInterface_Check::GetEntity(OCNaroWrappers::OCStandard_Transient^ anentity)
{
  (*((Handle_Interface_Check*)nativeHandle))->GetEntity(*((Handle_Standard_Transient*)anentity->Handle));
}

 void OCInterface_Check::GetMessages(OCNaroWrappers::OCInterface_Check^ other)
{
  (*((Handle_Interface_Check*)nativeHandle))->GetMessages(*((Handle_Interface_Check*)other->Handle));
}

 void OCInterface_Check::GetAsWarning(OCNaroWrappers::OCInterface_Check^ other, System::Boolean failsonly)
{
  (*((Handle_Interface_Check*)nativeHandle))->GetAsWarning(*((Handle_Interface_Check*)other->Handle), OCConverter::BooleanToStandardBoolean(failsonly));
}

 void OCInterface_Check::Print(OCNaroWrappers::OCMessage_Messenger^ S, Standard_Integer level, Standard_Integer final)
{
  (*((Handle_Interface_Check*)nativeHandle))->Print(*((Handle_Message_Messenger*)S->Handle), level, final);
}

 void OCInterface_Check::Trace(Standard_Integer level, Standard_Integer final)
{
  (*((Handle_Interface_Check*)nativeHandle))->Trace(level, final);
}


