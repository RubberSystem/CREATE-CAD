// File generated by CPPExt (MPV)
//
#ifndef _Interface_CheckIterator_OCWrappers_HeaderFile
#define _Interface_CheckIterator_OCWrappers_HeaderFile

// include native header
#include <Interface_CheckIterator.hxx>
#include "../Converter.h"


#include "../TCollection/TCollection_AsciiString.h"
#include "Interface_CheckStatus.h"


namespace OCNaroWrappers
{

ref class OCInterface_HSequenceOfCheck;
ref class OCTColStd_HSequenceOfInteger;
ref class OCInterface_InterfaceModel;
ref class OCInterface_IntVal;
ref class OCInterface_Check;
ref class OCStandard_Transient;
ref class OCTColStd_HSequenceOfTransient;
ref class OCMessage_Messenger;


//! Result of a Check operation (especially from InterfaceModel) <br>
public ref class OCInterface_CheckIterator  {

protected:
  Interface_CheckIterator* nativeHandle;
  OCInterface_CheckIterator(OCDummy^) {};

public:
  property Interface_CheckIterator* Handle
  {
    Interface_CheckIterator* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCInterface_CheckIterator(Interface_CheckIterator* nativeHandle);

// Methods PUBLIC

//! Creates an empty CheckIterator <br>
OCInterface_CheckIterator();

//! Creates a CheckIterator with a name (displayed by Print as a <br>
//!           title) <br>
OCInterface_CheckIterator(System::String^ name);

//! Sets / Changes the name <br>
 /*instead*/  void SetName(System::String^ name) ;

//! Returns the recorded name (can be empty) <br>
 /*instead*/  System::String^ Name() ;

//! Defines a Model, used to locate entities (not required, if it <br>
//!           is absent, entities are simply less documented) <br>
 /*instead*/  void SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! Returns the stored model (can be a null handle) <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Clears the list of checks <br>
 /*instead*/  void Clear() ;

//! Merges another CheckIterator into <me>, i.e. adds each of its <br>
//!           Checks. Content of <other> remains unchanged. <br>
//!           Takes also the Model but not the Name <br>
 /*instead*/  void Merge(OCNaroWrappers::OCInterface_CheckIterator^ other) ;

//! Adds a Check to the list to be iterated <br>
//!           This Check is Accompanied by Entity Number in the Model <br>
//!           (0 for Global Check or Entity unknown in the Model), if 0 and <br>
//!           Model is recorded in <me>, it is computed <br>
 /*instead*/  void Add(OCNaroWrappers::OCInterface_Check^ ach, Standard_Integer num) ;

//! Returns the Check which was attached to an Entity given its <br>
//!           Number in the Model. <num>=0 is for the Global Check. <br>
//!           If no Check was recorded for this Number, returns an empty <br>
//!           Check. <br>
//!  Remark : Works apart from the iteration methods (no interference) <br>
 /*instead*/  OCInterface_Check^ Check(Standard_Integer num) ;

//! Returns the Check attached to an Entity <br>
//!           If no Check was recorded for this Entity, returns an empty <br>
//!           Check. <br>
//!  Remark : Works apart from the iteration methods (no interference) <br>
 /*instead*/  OCInterface_Check^ Check(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the Check bound to an Entity Number (0 : Global) <br>
//!           in order to be consulted or completed on the spot <br>
//!           I.e. returns the Check if is already exists, or adds it then <br>
//!           returns the new empty Check <br>
 /*instead*/  OCInterface_Check^ CCheck(Standard_Integer num) ;

//! Returns the Check bound to an Entity, in order to be consulted <br>
//!           or completed on the spot <br>
//!           I.e. returns the Check if is already exists, or adds it then <br>
//!           returns the new empty Check <br>
 /*instead*/  OCInterface_Check^ CCheck(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns True if : no Fail has been recorded if <failsonly> is <br>
//!           True, no Check at all if <failsonly> is False <br>
 /*instead*/  System::Boolean IsEmpty(System::Boolean failsonly) ;

//! Returns worst status among : OK, Warning, Fail <br>
 /*instead*/  OCInterface_CheckStatus Status() ;

//! Tells if this check list complies with a given status : <br>
//!           OK (i.e. empty),  Warning (at least one Warning, but no Fail), <br>
//!           Fail (at least one), Message (not OK), NoFail, Any <br>
 /*instead*/  System::Boolean Complies(OCInterface_CheckStatus status) ;

//! Returns a CheckIterator which contains the checks which comply <br>
//!           with a given status <br>
//!           Each check is added completely (no split Warning/Fail) <br>
 /*instead*/  OCInterface_CheckIterator^ Extract(OCInterface_CheckStatus status) ;

//! Returns a CheckIterator which contains the check which comply <br>
//!           with a message, plus some conditions as follows : <br>
//!           <incl> = 0 : <mess> exactly matches one of the messages <br>
//!           <incl> < 0 : <mess> is contained by one of the messages <br>
//!           <incl> > 0 : <mess> contains one of the messages <br>
//!           For <status> : for CheckWarning and CheckFail, considers only <br>
//!             resp. Warning or Check messages. for CheckAny, considers all <br>
//!             other values are ignored (answer will be false) <br>
//!           Each Check which complies is entirely taken <br>
 /*instead*/  OCInterface_CheckIterator^ Extract(System::String^ mess, Standard_Integer incl, OCInterface_CheckStatus status) ;

//! Removes the messages of all Checks, under these conditions : <br>
//!           <incl> = 0 : <mess> exactly matches one of the messages <br>
//!           <incl> < 0 : <mess> is contained by one of the messages <br>
//!           <incl> > 0 : <mess> contains one of the messages <br>
//!           For <status> : for CheckWarning and CheckFail, considers only <br>
//!             resp. Warning or Check messages. for CheckAny, considers all <br>
//!             other values are ignored (nothing is done) <br>
//!           Returns True if at least one message has been removed, False else <br>
 /*instead*/  System::Boolean Remove(System::String^ mess, Standard_Integer incl, OCInterface_CheckStatus status) ;

//! Returns the list of entities concerned by a Check <br>
//!           Only fails if <failsonly> is True, else all non-empty checks <br>
//!           If <global> is true, adds the model for a global check <br>
//!           Else, global check is ignored <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ Checkeds(System::Boolean failsonly, System::Boolean global) ;

//! Starts Iteration. Thus, it is possible to restart it <br>
//!           Remark : an iteration may be done with a const Iterator <br>
//!           While its content is modified (through a pointer), this allows <br>
//!           to give it as a const argument to a function <br>
 /*instead*/  void Start() ;

//! Returns True if there are more Checks to get <br>
 /*instead*/  System::Boolean More() ;

//! Sets Iteration to next Item <br>
 /*instead*/  void Next() ;

//! Returns Check currently Iterated <br>
//!           It brings all other informations (status, messages, ...) <br>
//!           The Number of the Entity in the Model is given by Number below <br>
 /*instead*/  OCInterface_Check^ Value() ;

//! Returns Number of Entity for the Check currently iterated <br>
//!           or 0 for GlobalCheck <br>
 /*instead*/  Standard_Integer Number() ;

//! Prints the list of Checks with their attached Numbers <br>
//!           If <failsonly> is True, prints only Fail messages <br>
//!           If <failsonly> is False, prints all messages <br>
//!           If <final> = 0 (D), prints also original messages if different <br>
//!           If <final> < 0, prints only original messages <br>
//!           If <final> > 0, prints only final messages <br>
//!           It uses the recorded Model if it is defined <br>
//!  Remark : Works apart from the iteration methods (no interference) <br>
 /*instead*/  void Print(OCNaroWrappers::OCMessage_Messenger^ S, System::Boolean failsonly, Standard_Integer final) ;

//! Works as Print without a model, but for entities which have <br>
//!           no attached number (Number not positive), tries to compute <br>
//!           this Number from <model> and displays "original" or "computed" <br>
 /*instead*/  void Print(OCNaroWrappers::OCMessage_Messenger^ S, OCNaroWrappers::OCInterface_InterfaceModel^ model, System::Boolean failsonly, Standard_Integer final) ;

~OCInterface_CheckIterator()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
