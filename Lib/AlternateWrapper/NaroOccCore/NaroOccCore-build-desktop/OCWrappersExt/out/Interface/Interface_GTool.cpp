// File generated by CPPExt (CPP file)
//

#include "Interface_GTool.h"
#include "../Converter.h"
#include "Interface_Protocol.h"
#include "Interface_SignType.h"
#include "../Standard/Standard_Transient.h"
#include "Interface_InterfaceModel.h"
#include "Interface_GeneralLib.h"
#include "Interface_GeneralModule.h"


using namespace OCNaroWrappers;

OCInterface_GTool::OCInterface_GTool(Handle(Interface_GTool)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Interface_GTool(*nativeHandle);
}

OCInterface_GTool::OCInterface_GTool() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Interface_GTool(new Interface_GTool());
}

OCInterface_GTool::OCInterface_GTool(OCNaroWrappers::OCInterface_Protocol^ proto, Standard_Integer nbent) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Interface_GTool(new Interface_GTool(*((Handle_Interface_Protocol*)proto->Handle), nbent));
}

 void OCInterface_GTool::SetSignType(OCNaroWrappers::OCInterface_SignType^ sign)
{
  (*((Handle_Interface_GTool*)nativeHandle))->SetSignType(*((Handle_Interface_SignType*)sign->Handle));
}

OCInterface_SignType^ OCInterface_GTool::SignType()
{
  Handle(Interface_SignType) tmp = (*((Handle_Interface_GTool*)nativeHandle))->SignType();
  return gcnew OCInterface_SignType(&tmp);
}

 System::String^ OCInterface_GTool::SignValue(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_InterfaceModel^ model)
{
  return OCConverter::StandardCStringToString((*((Handle_Interface_GTool*)nativeHandle))->SignValue(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Interface_InterfaceModel*)model->Handle)));
}

 System::String^ OCInterface_GTool::SignName()
{
  return OCConverter::StandardCStringToString((*((Handle_Interface_GTool*)nativeHandle))->SignName());
}

 void OCInterface_GTool::SetProtocol(OCNaroWrappers::OCInterface_Protocol^ proto, System::Boolean enforce)
{
  (*((Handle_Interface_GTool*)nativeHandle))->SetProtocol(*((Handle_Interface_Protocol*)proto->Handle), OCConverter::BooleanToStandardBoolean(enforce));
}

OCInterface_Protocol^ OCInterface_GTool::Protocol()
{
  Handle(Interface_Protocol) tmp = (*((Handle_Interface_GTool*)nativeHandle))->Protocol();
  return gcnew OCInterface_Protocol(&tmp);
}

OCInterface_GeneralLib^ OCInterface_GTool::Lib()
{
  Interface_GeneralLib* tmp = new Interface_GeneralLib(123abc);
  *tmp = (*((Handle_Interface_GTool*)nativeHandle))->Lib();
  return gcnew OCInterface_GeneralLib(tmp);
}

 void OCInterface_GTool::Reservate(Standard_Integer nb, System::Boolean enforce)
{
  (*((Handle_Interface_GTool*)nativeHandle))->Reservate(nb, OCConverter::BooleanToStandardBoolean(enforce));
}

 void OCInterface_GTool::ClearEntities()
{
  (*((Handle_Interface_GTool*)nativeHandle))->ClearEntities();
}

 System::Boolean OCInterface_GTool::Select(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_GeneralModule^ gmod, Standard_Integer& CN, System::Boolean enforce)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_GTool*)nativeHandle))->Select(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Interface_GeneralModule*)gmod->Handle), CN, OCConverter::BooleanToStandardBoolean(enforce)));
}


