// File generated by CPPExt (MPV)
//
#ifndef _Interface_FileReaderTool_OCWrappers_HeaderFile
#define _Interface_FileReaderTool_OCWrappers_HeaderFile

// include native header
#include <Interface_FileReaderTool.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCInterface_Protocol;
ref class OCInterface_FileReaderData;
ref class OCInterface_InterfaceModel;
ref class OCMessage_Messenger;
ref class OCTColStd_HArray1OfTransient;
ref class OCInterface_Check;
ref class OCStandard_Transient;
ref class OCInterface_GeneralLib;
ref class OCInterface_ReaderLib;


//! Defines services which are required to load an InterfaceModel <br>
//!           from a File. Typically, it may firstly transform a system <br>
//!           file into a FileReaderData object, then work on it, not longer <br>
//!           considering file contents, to load an Interface Model. <br>
//!           It may also work on a FileReaderData already loaded. <br>
//! <br>
//!           FileReaderTool provides, on one hand, some general services <br>
//!           which are common to all read operations but can be redefined, <br>
//!           plus general actions to be performed specifically for each <br>
//!           Norm, as deferred methods to define. <br>
//! <br>
//!           In particular, FileReaderTool defines the Interface's Unknown <br>
//!           and Error entities <br>
public ref class OCInterface_FileReaderTool  {

protected:
  Interface_FileReaderTool* nativeHandle;
  OCInterface_FileReaderTool(OCDummy^) {};

public:
  property Interface_FileReaderTool* Handle
  {
    Interface_FileReaderTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCInterface_FileReaderTool(Interface_FileReaderTool* nativeHandle);

// Methods PUBLIC

//! Constructor; sets default fields <br>
OCInterface_FileReaderTool();

//! Sets Data to a FileReaderData. Works with a Protocol <br>
 /*instead*/  void SetData(OCNaroWrappers::OCInterface_FileReaderData^ reader, OCNaroWrappers::OCInterface_Protocol^ protocol) ;

//! Returns the Protocol given at creation time <br>
 /*instead*/  OCInterface_Protocol^ Protocol() ;

//! Returns the FileReaderData which is used to work <br>
 /*instead*/  OCInterface_FileReaderData^ Data() ;

//! Stores a Model. Used when the Model has been loaded <br>
 /*instead*/  void SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ amodel) ;

//! Returns the stored Model <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Sets Messenger used for outputting messages <br>
 /*instead*/  void SetMessenger(OCNaroWrappers::OCMessage_Messenger^ messenger) ;

//! Returns Messenger used for outputting messages. <br>
//!           The returned object is guaranteed to be non-null; <br>
//!           default is Message::Messenger(). <br>
 /*instead*/  OCMessage_Messenger^ Messenger() ;

//! Sets trace level used for outputting messages <br>
//!           - 0: no trace at all <br>
//!           - 1: errors <br>
//!           - 2: errors and warnings <br>
//!           - 3: all messages <br>
//!           Default is 1 : Errors traced <br>
 /*instead*/  void SetTraceLevel(Standard_Integer tracelev) ;

//! Returns trace level used for outputting messages. <br>
 /*instead*/  Standard_Integer TraceLevel() ;

//! Allows controlling whether exception raisings are handled <br>
//!           If err is False, they are not (hence, dbx can take control) <br>
//!           If err is True, they are, and they are traced <br>
//!           (by putting on messenger Entity's Number and file record num) <br>
//!           Default given at Model's creation time is True <br>
 /*instead*/  void SetErrorHandle(System::Boolean err) ;

//! Returns ErrorHandle flag <br>
 /*instead*/  System::Boolean ErrorHandle() ;

//! Fills records with empty entities; once done, each entity can <br>
//!           ask the FileReaderTool for any entity referenced through an <br>
//!           identifier. Calls Recognize which is specific to each specific <br>
//!           type of FileReaderTool <br>
 /*instead*/  void SetEntities() ;

//! Recognizes a record with the help of Libraries. Can be used <br>
//!           to implement the method Recognize. <br>
//!           <rlib> is used to find Protocol and CaseNumber to apply <br>
//!           <glib> performs the creation (by service NewVoid, or NewRead <br>
//!             if NewVoid gave no result) <br>
//!           <ach> is a check, which is transmitted to NewRead if it is <br>
//!             called, gives a result but which is false <br>
//!           <ent> is the result <br>
//!           Returns False if recognition has failed, True else <br>
 /*instead*/  System::Boolean RecognizeByLib(Standard_Integer num, OCNaroWrappers::OCInterface_GeneralLib^ glib, OCNaroWrappers::OCInterface_ReaderLib^ rlib, OCNaroWrappers::OCInterface_Check^ ach, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Provides an unknown entity, specific to the Interface <br>
//!           called by SetEntities when Recognize has failed (Unknown alone) <br>
//!           or by LoadModel when an Entity has caused a Fail on reading <br>
//!           (to keep at least its literal description) <br>
//!           Uses Protocol to do it <br>
 /*instead*/  OCStandard_Transient^ UnknownEntity() ;

//! Creates an empty Model of the norm. Uses Protocol to do it <br>
 /*instead*/  OCInterface_InterfaceModel^ NewModel() ;

//! Reads and fills Entities from the FileReaderData set by <br>
//!           SetData to an InterfaceModel. <br>
//!           It enchains required operations, the specific ones correspond <br>
//!           to deferred methods (below) to be defined for each Norm. <br>
//!           It manages also error recovery and trace. <br>
//!           Remark : it calls SetModel. <br>
//!           It Can raise any error which can occur during a load <br>
//!           operation, unless Error Handling is set. <br>
//!           This method can also be redefined if judged necessary. <br>
 /*instead*/  void LoadModel(OCNaroWrappers::OCInterface_InterfaceModel^ amodel) ;

//! Reads, Fills and Returns one Entity read from a Record of the <br>
//!           FileReaderData. This Method manages also case of Fail or <br>
//!           Warning, by producing a ReportEntyty plus , for a Fail, a <br>
//!           literal Content (as an UnknownEntity). Performs also Trace <br>
 /*instead*/  OCStandard_Transient^ LoadedEntity(Standard_Integer num) ;


virtual /*instead*/  void Destroy() ;

//! Ends file reading after reading all the entities <br>
//!           default is doing nothing; redefinable as necessary <br>
virtual /*instead*/  void EndRead(OCNaroWrappers::OCInterface_InterfaceModel^ amodel) ;

//! Clear filelds <br>
 /*instead*/  void Clear() ;

~OCInterface_FileReaderTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
