// File generated by CPPExt (MPV)
//
#ifndef _Interface_BitMap_OCWrappers_HeaderFile
#define _Interface_BitMap_OCWrappers_HeaderFile

// include native header
#include <Interface_BitMap.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfInteger;
ref class OCTColStd_HSequenceOfAsciiString;


//! A bit map simply allows to associate a boolean flag to each <br>
//!           item of a list, such as a list of entities, etc... numbered <br>
//!           between 1 and a positive count nbitems <br>
//! <br>
//!           The BitMap class allows to associate several binary flags, <br>
//!           each of one is identified by a number from 0 to a count <br>
//!           which can remain at zero or be positive : nbflags <br>
//! <br>
//!           Flags lists over than numflag=0 are added after creation <br>
//!           Each of one can be named, hence the user can identify it <br>
//!           either by its flag number or by a name which gives a flag n0 <br>
//!           (flag n0 0 has no name) <br>
public ref class OCInterface_BitMap  {

protected:
  Interface_BitMap* nativeHandle;
  OCInterface_BitMap(OCDummy^) {};

public:
  property Interface_BitMap* Handle
  {
    Interface_BitMap* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCInterface_BitMap(Interface_BitMap* nativeHandle);

// Methods PUBLIC

//! Creates a empty BitMap <br>
OCInterface_BitMap();

//! Creates a BitMap for <nbitems> items <br>
//!           One flag is defined, n0 0 <br>
//!           <resflags> prepares allocation for <resflags> more flags <br>
//!           Flags values start at false <br>
OCInterface_BitMap(Standard_Integer nbitems, Standard_Integer resflags);

//! Initialize empty bit by <nbitems> items <br>
//!           One flag is defined, n0 0 <br>
//!           <resflags> prepares allocation for <resflags> more flags <br>
//!           Flags values start at false <br>
 /*instead*/  void Initialize(Standard_Integer nbitems, Standard_Integer resflags) ;

//! Creates a BitMap from another one <br>
//!           if <copied> is True, copies data <br>
//!           else, data are not copied, only the header object is <br>
OCInterface_BitMap(OCNaroWrappers::OCInterface_BitMap^ other, System::Boolean copied);

//! Initialize a BitMap from another one <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCInterface_BitMap^ other, System::Boolean copied) ;

//! Returns internal values, used for copying <br>
//!           Flags values start at false <br>
 /*instead*/  void Internals(Standard_Integer& nbitems, Standard_Integer& nbwords, Standard_Integer& nbflags, OCNaroWrappers::OCTColStd_HArray1OfInteger^ flags, OCNaroWrappers::OCTColStd_HSequenceOfAsciiString^ names) ;

//! Reservates for a count of more flags <br>
 /*instead*/  void Reservate(Standard_Integer moreflags) ;

//! Sets for a new count of items, which can be either less or <br>
//!           greater than the former one <br>
//!           For new items, their flags start at false <br>
 /*instead*/  void SetLength(Standard_Integer nbitems) ;

//! Adds a flag, a name can be attached to it <br>
//!           Returns its flag number <br>
//!           Makes required reservation <br>
 /*instead*/  Standard_Integer AddFlag(System::String^ name) ;

//! Adds several flags (<more>) with no name <br>
//!           Returns the number of last added flag <br>
 /*instead*/  Standard_Integer AddSomeFlags(Standard_Integer more) ;

//! Removes a flag given its number. <br>
//!           Returns True if done, false if num is out of range <br>
 /*instead*/  System::Boolean RemoveFlag(Standard_Integer num) ;

//! Sets a name for a flag, given its number <br>
//!           name can be empty (to erase the name of a flag) <br>
//!           Returns True if done, false if : num is out of range, or <br>
//!           name non-empty already set to another flag <br>
 /*instead*/  System::Boolean SetFlagName(Standard_Integer num, System::String^ name) ;

//! Returns the count of flags (flag 0 not included) <br>
 /*instead*/  Standard_Integer NbFlags() ;

//! Returns the count of items (i.e. the length of the bitmap) <br>
 /*instead*/  Standard_Integer Length() ;

//! Returns the name recorded for a flag, or an empty string <br>
 /*instead*/  System::String^ FlagName(Standard_Integer num) ;

//! Returns the number or a flag given its name, or zero <br>
 /*instead*/  Standard_Integer FlagNumber(System::String^ name) ;

//! Returns the value (true/false) of a flag, from : <br>
//!           - the number of the item <br>
//!           - the flag number, by default 0 <br>
 /*instead*/  System::Boolean Value(Standard_Integer item, Standard_Integer flag) ;

//! Sets a new value for a flag <br>
 /*instead*/  void SetValue(Standard_Integer item, System::Boolean val, Standard_Integer flag) ;

//! Sets a flag to True <br>
 /*instead*/  void SetTrue(Standard_Integer item, Standard_Integer flag) ;

//! Sets a flag to False <br>
 /*instead*/  void SetFalse(Standard_Integer item, Standard_Integer flag) ;

//! Returns the former value for a flag and sets it to True <br>
//!           (before : value returned; after : True) <br>
 /*instead*/  System::Boolean CTrue(Standard_Integer item, Standard_Integer flag) ;

//! Returns the former value for a flag and sets it to False <br>
//!           (before : value returned; after : False) <br>
 /*instead*/  System::Boolean CFalse(Standard_Integer item, Standard_Integer flag) ;

//! Initialises all the values of Flag Number <flag> to a given <br>
//!           value <val> <br>
 /*instead*/  void Init(System::Boolean val, Standard_Integer flag) ;

//! Clear all field of bit map <br>
 /*instead*/  void Clear() ;

~OCInterface_BitMap()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
