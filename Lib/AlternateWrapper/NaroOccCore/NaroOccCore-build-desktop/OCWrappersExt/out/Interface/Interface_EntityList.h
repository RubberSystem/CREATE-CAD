// File generated by CPPExt (MPV)
//
#ifndef _Interface_EntityList_OCWrappers_HeaderFile
#define _Interface_EntityList_OCWrappers_HeaderFile

// include native header
#include <Interface_EntityList.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCStandard_Transient;
ref class OCInterface_EntityIterator;
ref class OCStandard_Type;


//! This class defines a list of Entities (Transient Objects), <br>
//!           it can be used as a field of other Transient classes, with <br>
//!           these features : <br>
//!           - oriented to define a little list, that is, slower than an <br>
//!             Array or a Map of Entities for a big count (about 100 and <br>
//!             over), but faster than a Sequence <br>
//!           - allows to work as a Sequence, limited to Clear, Append, <br>
//!             Remove, Access to an Item identified by its rank in the list <br>
//!           - space saving, compared to a Sequence, especially for little <br>
//!             amounts; better than an Array for a very little amount (less <br>
//!             than 10) but less good for a greater amount <br>
//! <br>
//!           Works in conjunction with EntityCluster <br>
//!           An EntityList gives access to a list of Entity Clusters, which <br>
//!           are chained (in one sense : Single List) <br>
//!           Remark : a new Item may not be Null, because this is the <br>
//!           criterium used for "End of List" <br>
public ref class OCInterface_EntityList  {

protected:
  Interface_EntityList* nativeHandle;
  OCInterface_EntityList(OCDummy^) {};

public:
  property Interface_EntityList* Handle
  {
    Interface_EntityList* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCInterface_EntityList(Interface_EntityList* nativeHandle);

// Methods PUBLIC

//! Creates a List as beeing empty <br>
OCInterface_EntityList();

//! Clears the List <br>
 /*instead*/  void Clear() ;

//! Appends an Entity, that is to the END of the list <br>
//!           (keeps order, but works slowerly than Add, see below) <br>
 /*instead*/  void Append(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Adds an Entity to the list, that is, with NO REGARD about the <br>
//!           order (faster than Append if count becomes greater than 10) <br>
 /*instead*/  void Add(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Removes an Entity from the list, if it is there <br>
 /*instead*/  void Remove(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Removes an Entity from the list, given its rank <br>
 /*instead*/  void Remove(Standard_Integer num) ;

//! Returns True if the list is empty <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! Returns count of recorded Entities <br>
 /*instead*/  Standard_Integer NbEntities() ;

//! Returns an Item given its number. Beware about the way the <br>
//!           list was filled (see above, Add and Append) <br>
 /*instead*/  OCStandard_Transient^ Value(Standard_Integer num) ;

//! Returns an Item given its number. Beware about the way the <br>
//!           list was filled (see above, Add and Append) <br>
 /*instead*/  void SetValue(Standard_Integer num, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! fills an Iterator with the content of the list <br>
//!           (normal way to consult a list which has been filled with Add) <br>
 /*instead*/  void FillIterator(OCNaroWrappers::OCInterface_EntityIterator^ iter) ;

//! Returns count of Entities of a given Type (0 : none) <br>
 /*instead*/  Standard_Integer NbTypedEntities(OCNaroWrappers::OCStandard_Type^ atype) ;

//! Returns the Entity which is of a given type. <br>
//!           If num = 0 (D), there must be ONE AND ONLY ONE <br>
//!           If num > 0, returns the num-th entity of this type <br>
 /*instead*/  OCStandard_Transient^ TypedEntity(OCNaroWrappers::OCStandard_Type^ atype, Standard_Integer num) ;

~OCInterface_EntityList()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
