// File generated by CPPExt (Transient)
//
#ifndef _Interface_GeneralModule_OCWrappers_HeaderFile
#define _Interface_GeneralModule_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_GeneralModule.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCInterface_InterfaceModel;
ref class OCStandard_Transient;
ref class OCInterface_EntityIterator;
ref class OCInterface_ShareTool;
ref class OCInterface_Check;
ref class OCInterface_CopyTool;
ref class OCTCollection_HAsciiString;


//! This class defines general services, which must be provided <br>
//!           for each type of Entity (i.e. of Transient Object processed <br>
//!           by an Interface) : Shared List, Check, Copy, Delete, Category <br>
//! <br>
//!           To optimise processing (e.g. firstly bind an Entity to a Module <br>
//!           then calls  Module), each recognized Entity Type corresponds <br>
//!           to a Case Number, determined by the Protocol each class of <br>
//!           GeneralModule belongs to. <br>
public ref class OCInterface_GeneralModule : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCInterface_GeneralModule(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_GeneralModule(Handle(Interface_GeneralModule)* nativeHandle);

// Methods PUBLIC

//! Specific filling of the list of Entities shared by an Entity <br>
//!           <ent>, according a Case Number <CN> (formerly computed by <br>
//!           CaseNum), considered in the context of a Model <model> <br>
//!           Default calls FillSharedCase (i.e., ignores the model) <br>
//!           Can be redefined to use the model for working <br>
virtual /*instead*/  void FillShared(OCNaroWrappers::OCInterface_InterfaceModel^ model, Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_EntityIterator^ iter) ;

//! Adds an Entity to a Shared List (uses GetOneItem on <iter>) <br>
 /*instead*/  void Share(OCNaroWrappers::OCInterface_EntityIterator^ iter, OCNaroWrappers::OCStandard_Transient^ shared) ;

//! List the Implied References of <ent> considered in the context <br>
//!           of a Model <model> : i.e. the Entities which are Referenced <br>
//!           while not considered as Shared (not copied if <ent> is, <br>
//!           references not renewed by CopyCase but by ImpliedCase, only <br>
//!           if referenced Entities have been Copied too) <br>
//!           FillShared + ListImplied give the complete list of References <br>
//!           Default calls ListImpliedCase (i.e. ignores the model) <br>
//!           Can be redefined to use the model for working <br>
virtual /*instead*/  void ListImplied(OCNaroWrappers::OCInterface_InterfaceModel^ model, Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_EntityIterator^ iter) ;

//! List the Implied References of <ent> (see above) <br>
//!           are Referenced while not considered as Shared (not copied if <br>
//!           <ent> is, references not renewed by CopyCase but by <br>
//!           ImpliedCase, only if referenced Entities have been Copied too) <br>
//!           FillSharedCase + ListImpliedCase give the complete list of <br>
//!           Referenced Entities <br>
//!           The provided default method does nothing (Implied References <br>
//!           are specific of a little amount of Entity Classes). <br>
virtual /*instead*/  void ListImpliedCase(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_EntityIterator^ iter) ;

//! Specific answer to the question "is Copy properly implemented" <br>
//!           Remark that it should be in phase with the implementation of <br>
//!           NewVoid+CopyCase/NewCopyCase <br>
//!           Default returns always False, can be redefined <br>
virtual /*instead*/  System::Boolean CanCopy(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Dispatches an entity <br>
//!           Returns True if it works by copy, False if it just duplicates <br>
//!           the starting Handle <br>
//! <br>
//!           Dispatching means producing a new entity, image of the <br>
//!           starting one, in order to be put into a new Model, this Model <br>
//!           being itself the result of a dispatch from an original Model <br>
//! <br>
//!           According to the cases, dispatch can either <br>
//!           * just return <entto> as equating <entfrom> <br>
//!             -> the new model designates the starting entity : it is <br>
//!             lighter, but the dispatched entity being shared might not be <br>
//!             modified for dispatch <br>
//!           * copy <entfrom> to <entto> <br>
//!             by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1) <br>
//!             -> the dispatched entity is a COPY, hence it can be modified <br>
//! <br>
//!           The provided default just duplicates the handle without <br>
//!           copying, then returns False. Can be redefined <br>
virtual /*instead*/  System::Boolean Dispatch(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ entfrom, OCNaroWrappers::OCStandard_Transient^ entto, OCNaroWrappers::OCInterface_CopyTool^ TC) ;

//! Specific operator (create+copy) defaulted to do nothing. <br>
//!           It can be redefined : When it is not possible to work in two <br>
//!           steps (NewVoid then CopyCase). This can occur when there is <br>
//!           no default constructor : hence the result <entto> must be <br>
//!           created with an effective definition. <br>
//!           Remark : if NewCopiedCase is defined, CopyCase has nothing to do <br>
//!           Returns True if it has produced something, false else <br>
virtual /*instead*/  System::Boolean NewCopiedCase(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ entfrom, OCNaroWrappers::OCStandard_Transient^ entto, OCNaroWrappers::OCInterface_CopyTool^ TC) ;

//! Specific Copying of Implied References <br>
//!           A Default is provided which does nothing (must current case !) <br>
//!           Already copied references (by CopyFrom) must remain unchanged <br>
//!           Use method Search from CopyTool to work <br>
virtual /*instead*/  void RenewImpliedCase(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ entfrom, OCNaroWrappers::OCStandard_Transient^ entto, OCNaroWrappers::OCInterface_CopyTool^ TC) ;

//! Prepares an entity to be deleted. What does it mean : <br>
//!           Basically, any class of entity may define its own destructor <br>
//!           By default, it does nothing but calling destructors on fields <br>
//!           With the Memory Manager, it is useless to call destructor, <br>
//!           it is done automatically when the Handle is nullified(cleared) <br>
//!           BUT this is ineffective in looping structures (whatever these <br>
//!           are "Implied" references or not). <br>
//! <br>
//!           THUS : if no loop may appear in definitions, a class which <br>
//!           inherits from TShared is correctly managed by automatic way <br>
//!           BUT if there can be loops (or simply back pointers), they must <br>
//!           be broken, for instance by clearing fields of one of the nodes <br>
//!           The default does nothing, to be redefined if a loop can occur <br>
//!           (Implied generally requires WhenDelete, but other cases can <br>
//!           occur) <br>
//! <br>
//!  Warning : <dispatched> tells if the entity to be deleted has been <br>
//!           produced by Dispatch or not. Hence WhenDelete must be in <br>
//!           coherence with Dispatch <br>
//!           Dispatch can either copy or not. <br>
//!           If it copies the entity, this one should be deleted <br>
//!           If it doesnt (i.e. duplicates the handle) nothing to do <br>
//! <br>
//!           If <dispatch> is False, normal deletion is to be performed <br>
virtual /*instead*/  void WhenDeleteCase(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean dispatched) ;

//! Returns a category number which characterizes an entity <br>
//!           Category Numbers are managed by the class Category <br>
//!           <shares> can be used to evaluate this number in the context <br>
//!           Default returns 0 which means "unspecified" <br>
virtual /*instead*/  Standard_Integer CategoryNumber(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_ShareTool^ shares) ;

//! Determines if an entity brings a Name (or widerly, if a Name <br>
//!           can be attached to it, through the ShareTool <br>
//!           By default, returns a Null Handle (no name can be produced) <br>
//!           Can be redefined <br>
//! <br>
//!  Warning : While this string may be edited on the spot, if it is a read <br>
//!           field, the returned value must be copied before. <br>
virtual /*instead*/  OCTCollection_HAsciiString^ Name(Standard_Integer CN, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_ShareTool^ shares) ;

~OCInterface_GeneralModule()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
