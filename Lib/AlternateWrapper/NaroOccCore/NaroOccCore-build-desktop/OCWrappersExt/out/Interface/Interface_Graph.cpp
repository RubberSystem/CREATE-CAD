// File generated by CPPExt (CPP file)
//

#include "Interface_Graph.h"
#include "../Converter.h"
#include "Interface_InterfaceModel.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../TColStd/TColStd_HArray1OfListOfInteger.h"
#include "Interface_GeneralLib.h"
#include "Interface_Protocol.h"
#include "Interface_GTool.h"
#include "../Standard/Standard_Transient.h"
#include "Interface_BitMap.h"
#include "Interface_EntityIterator.h"
#include "../TColStd/TColStd_HSequenceOfTransient.h"
#include "../Standard/Standard_Type.h"
#include "../TCollection/TCollection_HAsciiString.h"


using namespace OCNaroWrappers;

OCInterface_Graph::OCInterface_Graph(Interface_Graph* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCInterface_Graph::OCInterface_Graph(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GeneralLib^ lib, System::Boolean theModeStats) 
{
  nativeHandle = new Interface_Graph(*((Handle_Interface_InterfaceModel*)amodel->Handle), *((Interface_GeneralLib*)lib->Handle), OCConverter::BooleanToStandardBoolean(theModeStats));
}

OCInterface_Graph::OCInterface_Graph(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_Protocol^ protocol, System::Boolean theModeStats) 
{
  nativeHandle = new Interface_Graph(*((Handle_Interface_InterfaceModel*)amodel->Handle), *((Handle_Interface_Protocol*)protocol->Handle), OCConverter::BooleanToStandardBoolean(theModeStats));
}

OCInterface_Graph::OCInterface_Graph(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GTool^ gtool, System::Boolean theModeStats) 
{
  nativeHandle = new Interface_Graph(*((Handle_Interface_InterfaceModel*)amodel->Handle), *((Handle_Interface_GTool*)gtool->Handle), OCConverter::BooleanToStandardBoolean(theModeStats));
}

OCInterface_Graph::OCInterface_Graph(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, System::Boolean theModeStats) 
{
  nativeHandle = new Interface_Graph(*((Handle_Interface_InterfaceModel*)amodel->Handle), OCConverter::BooleanToStandardBoolean(theModeStats));
}

OCInterface_Graph::OCInterface_Graph(OCNaroWrappers::OCInterface_Graph^ agraph, System::Boolean copied) 
{
  nativeHandle = new Interface_Graph(*((Interface_Graph*)agraph->Handle), OCConverter::BooleanToStandardBoolean(copied));
}

 void OCInterface_Graph::Reset()
{
  ((Interface_Graph*)nativeHandle)->Reset();
}

 void OCInterface_Graph::ResetStatus()
{
  ((Interface_Graph*)nativeHandle)->ResetStatus();
}

 Standard_Integer OCInterface_Graph::Size()
{
  return ((Interface_Graph*)nativeHandle)->Size();
}

 Standard_Integer OCInterface_Graph::NbStatuses()
{
  return ((Interface_Graph*)nativeHandle)->NbStatuses();
}

 Standard_Integer OCInterface_Graph::EntityNumber(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return ((Interface_Graph*)nativeHandle)->EntityNumber(*((Handle_Standard_Transient*)ent->Handle));
}

 System::Boolean OCInterface_Graph::IsPresent(Standard_Integer num)
{
  return OCConverter::StandardBooleanToBoolean(((Interface_Graph*)nativeHandle)->IsPresent(num));
}

 System::Boolean OCInterface_Graph::IsPresent(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean(((Interface_Graph*)nativeHandle)->IsPresent(*((Handle_Standard_Transient*)ent->Handle)));
}

OCStandard_Transient^ OCInterface_Graph::Entity(Standard_Integer num)
{
  Handle(Standard_Transient) tmp = ((Interface_Graph*)nativeHandle)->Entity(num);
  return gcnew OCStandard_Transient(&tmp);
}

 Standard_Integer OCInterface_Graph::Status(Standard_Integer num)
{
  return ((Interface_Graph*)nativeHandle)->Status(num);
}

 void OCInterface_Graph::SetStatus(Standard_Integer num, Standard_Integer stat)
{
  ((Interface_Graph*)nativeHandle)->SetStatus(num, stat);
}

 void OCInterface_Graph::RemoveItem(Standard_Integer num)
{
  ((Interface_Graph*)nativeHandle)->RemoveItem(num);
}

 void OCInterface_Graph::ChangeStatus(Standard_Integer oldstat, Standard_Integer newstat)
{
  ((Interface_Graph*)nativeHandle)->ChangeStatus(oldstat, newstat);
}

 void OCInterface_Graph::RemoveStatus(Standard_Integer stat)
{
  ((Interface_Graph*)nativeHandle)->RemoveStatus(stat);
}

OCInterface_BitMap^ OCInterface_Graph::BitMap()
{
  Interface_BitMap* tmp = new Interface_BitMap();
  *tmp = ((Interface_Graph*)nativeHandle)->BitMap();
  return gcnew OCInterface_BitMap(tmp);
}

OCInterface_BitMap^ OCInterface_Graph::CBitMap()
{
  Interface_BitMap* tmp = new Interface_BitMap();
  *tmp = ((Interface_Graph*)nativeHandle)->CBitMap();
  return gcnew OCInterface_BitMap(tmp);
}

OCInterface_InterfaceModel^ OCInterface_Graph::Model()
{
  Handle(Interface_InterfaceModel) tmp = ((Interface_Graph*)nativeHandle)->Model();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 void OCInterface_Graph::GetFromModel()
{
  ((Interface_Graph*)nativeHandle)->GetFromModel();
}

 void OCInterface_Graph::GetFromEntity(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean shared, Standard_Integer newstat)
{
  ((Interface_Graph*)nativeHandle)->GetFromEntity(*((Handle_Standard_Transient*)ent->Handle), OCConverter::BooleanToStandardBoolean(shared), newstat);
}

 void OCInterface_Graph::GetFromEntity(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean shared, Standard_Integer newstat, Standard_Integer overlapstat, System::Boolean cumul)
{
  ((Interface_Graph*)nativeHandle)->GetFromEntity(*((Handle_Standard_Transient*)ent->Handle), OCConverter::BooleanToStandardBoolean(shared), newstat, overlapstat, OCConverter::BooleanToStandardBoolean(cumul));
}

 void OCInterface_Graph::GetFromIter(OCNaroWrappers::OCInterface_EntityIterator^ iter, Standard_Integer newstat)
{
  ((Interface_Graph*)nativeHandle)->GetFromIter(*((Interface_EntityIterator*)iter->Handle), newstat);
}

 void OCInterface_Graph::GetFromIter(OCNaroWrappers::OCInterface_EntityIterator^ iter, Standard_Integer newstat, Standard_Integer overlapstat, System::Boolean cumul)
{
  ((Interface_Graph*)nativeHandle)->GetFromIter(*((Interface_EntityIterator*)iter->Handle), newstat, overlapstat, OCConverter::BooleanToStandardBoolean(cumul));
}

 void OCInterface_Graph::GetFromGraph(OCNaroWrappers::OCInterface_Graph^ agraph)
{
  ((Interface_Graph*)nativeHandle)->GetFromGraph(*((Interface_Graph*)agraph->Handle));
}

 void OCInterface_Graph::GetFromGraph(OCNaroWrappers::OCInterface_Graph^ agraph, Standard_Integer stat)
{
  ((Interface_Graph*)nativeHandle)->GetFromGraph(*((Interface_Graph*)agraph->Handle), stat);
}

 System::Boolean OCInterface_Graph::HasShareErrors(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean(((Interface_Graph*)nativeHandle)->HasShareErrors(*((Handle_Standard_Transient*)ent->Handle)));
}

OCTColStd_HSequenceOfTransient^ OCInterface_Graph::GetShareds(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TColStd_HSequenceOfTransient) tmp = ((Interface_Graph*)nativeHandle)->GetShareds(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCInterface_EntityIterator^ OCInterface_Graph::Shareds(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = ((Interface_Graph*)nativeHandle)->Shareds(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCInterface_EntityIterator(tmp);
}

OCInterface_EntityIterator^ OCInterface_Graph::Sharings(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = ((Interface_Graph*)nativeHandle)->Sharings(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCInterface_EntityIterator(tmp);
}

OCTColStd_HSequenceOfTransient^ OCInterface_Graph::GetSharings(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TColStd_HSequenceOfTransient) tmp = ((Interface_Graph*)nativeHandle)->GetSharings(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCInterface_EntityIterator^ OCInterface_Graph::TypedSharings(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Type^ type)
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = ((Interface_Graph*)nativeHandle)->TypedSharings(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Standard_Type*)type->Handle));
  return gcnew OCInterface_EntityIterator(tmp);
}

OCInterface_EntityIterator^ OCInterface_Graph::RootEntities()
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = ((Interface_Graph*)nativeHandle)->RootEntities();
  return gcnew OCInterface_EntityIterator(tmp);
}

OCTCollection_HAsciiString^ OCInterface_Graph::Name(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TCollection_HAsciiString) tmp = ((Interface_Graph*)nativeHandle)->Name(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTColStd_HArray1OfListOfInteger^ OCInterface_Graph::SharingTable()
{
  Handle(TColStd_HArray1OfListOfInteger) tmp = ((Interface_Graph*)nativeHandle)->SharingTable();
  return gcnew OCTColStd_HArray1OfListOfInteger(&tmp);
}

 System::Boolean OCInterface_Graph::ModeStat()
{
  return OCConverter::StandardBooleanToBoolean(((Interface_Graph*)nativeHandle)->ModeStat());
}


