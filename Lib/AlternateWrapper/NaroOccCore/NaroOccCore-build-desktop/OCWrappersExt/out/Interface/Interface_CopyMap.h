// File generated by CPPExt (Transient)
//
#ifndef _Interface_CopyMap_OCWrappers_HeaderFile
#define _Interface_CopyMap_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_CopyMap.hxx>
#include "../Converter.h"

#include "Interface_CopyControl.h"

#include "../TColStd/TColStd_Array1OfTransient.h"


namespace OCNaroWrappers
{

ref class OCInterface_InterfaceModel;
ref class OCStandard_Transient;


//! Manages a Map for the need of single Transfers, such as Copies <br>
//!           In such transfer, Starting Entities are read from a unique <br>
//!           Starting Model, and each transferred Entity is bound to one <br>
//!           and only one Result, which cannot be changed later. <br>
public ref class OCInterface_CopyMap : OCInterface_CopyControl {

protected:
  // dummy constructor;
  OCInterface_CopyMap(OCDummy^) : OCInterface_CopyControl((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_CopyMap(Handle(Interface_CopyMap)* nativeHandle);

// Methods PUBLIC

//! Creates a CopyMap adapted to work from a Model <br>
OCInterface_CopyMap(OCNaroWrappers::OCInterface_InterfaceModel^ amodel);

//! Clears Transfer List. Gets Ready to begin another Transfer <br>
 /*instead*/  void Clear() ;

//! Returns the InterfaceModel used at Creation time <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Binds a Starting Entity identified by its Number <num> in the <br>
//!           Starting Model, to a Result of Transfer <res> <br>
 /*instead*/  void Bind(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Transient^ res) ;

//! Search for the result of a Starting Object (i.e. an Entity, <br>
//!           identified by its Number <num> in the Starting Model) <br>
//!           Returns True  if a  Result is Bound (and fills <res>) <br>
//!           Returns False if no result is Bound (and nullifies <res>) <br>
 /*instead*/  System::Boolean Search(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Transient^ res) ;

~OCInterface_CopyMap()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
