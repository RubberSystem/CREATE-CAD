// File generated by CPPExt (MPV)
//
#ifndef _Interface_ShareFlags_OCWrappers_HeaderFile
#define _Interface_ShareFlags_OCWrappers_HeaderFile

// include native header
#include <Interface_ShareFlags.hxx>
#include "../Converter.h"


#include "Interface_BitMap.h"


namespace OCNaroWrappers
{

ref class OCInterface_InterfaceModel;
ref class OCTColStd_HSequenceOfTransient;
ref class OCInterface_GeneralLib;
ref class OCInterface_GTool;
ref class OCInterface_Protocol;
ref class OCInterface_Graph;
ref class OCStandard_Transient;
ref class OCInterface_EntityIterator;


//! This class only says for each Entity of a Model, if it is <br>
//!           Shared or not by one or more other(s) of this Model <br>
//!           It uses the General Service "Shared". <br>
public ref class OCInterface_ShareFlags  {

protected:
  Interface_ShareFlags* nativeHandle;
  OCInterface_ShareFlags(OCDummy^) {};

public:
  property Interface_ShareFlags* Handle
  {
    Interface_ShareFlags* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCInterface_ShareFlags(Interface_ShareFlags* nativeHandle);

// Methods PUBLIC

//! Creates a ShareFlags from a Model and builds required data <br>
//!           (flags) by calling the General Service Library given as <br>
//!           argument <lib> <br>
OCInterface_ShareFlags(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GeneralLib^ lib);

//! Same as above, but GeneralLib is detained by a GTool <br>
OCInterface_ShareFlags(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GTool^ gtool);

//! Same as above, but GeneralLib is defined through a Protocol <br>
OCInterface_ShareFlags(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_Protocol^ protocol);

//! Same as above, but works with the GTool of the Model <br>
OCInterface_ShareFlags(OCNaroWrappers::OCInterface_InterfaceModel^ amodel);

//! Creates a ShareFlags by querying informations from a Graph <br>
//!           (remark that Graph also has a method IsShared) <br>
OCInterface_ShareFlags(OCNaroWrappers::OCInterface_Graph^ agraph);

//! Returns the Model used for the evaluation <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Returns True if <ent> is Shared by one or more other <br>
//!           Entity(ies) of the Model <br>
 /*instead*/  System::Boolean IsShared(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the Entities which are not Shared (see their flags) <br>
 /*instead*/  OCInterface_EntityIterator^ RootEntities() ;

//! Returns the count of root entities <br>
 /*instead*/  Standard_Integer NbRoots() ;

//! Returns a root entity according its rank in the list of roots <br>
//!           By default, it returns the first one <br>
 /*instead*/  OCStandard_Transient^ Root(Standard_Integer num) ;

~OCInterface_ShareFlags()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
