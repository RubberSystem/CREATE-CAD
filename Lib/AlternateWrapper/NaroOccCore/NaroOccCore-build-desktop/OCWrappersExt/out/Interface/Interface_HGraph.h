// File generated by CPPExt (Transient)
//
#ifndef _Interface_HGraph_OCWrappers_HeaderFile
#define _Interface_HGraph_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_HGraph.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "Interface_Graph.h"


namespace OCNaroWrappers
{

ref class OCInterface_Graph;
ref class OCInterface_InterfaceModel;
ref class OCInterface_GeneralLib;
ref class OCInterface_Protocol;
ref class OCInterface_GTool;


//! This class allows to store a redefinable Graph, via a Handle <br>
//!           (usefull for an Object which can work on several successive <br>
//!           Models, with the same general conditions) <br>
public ref class OCInterface_HGraph : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCInterface_HGraph(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_HGraph(Handle(Interface_HGraph)* nativeHandle);

// Methods PUBLIC

//! Creates an HGraph directly from a Graph. <br>
//!           Remark that the starting Graph is duplicated <br>
OCInterface_HGraph(OCNaroWrappers::OCInterface_Graph^ agraph);

//! Creates an HGraph with a Graph created from <amodel> and <lib> <br>
OCInterface_HGraph(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GeneralLib^ lib, System::Boolean theModeStats);

//! Creates an HGraph with a graph itself created from <amodel> <br>
//!           and <protocol> <br>
OCInterface_HGraph(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_Protocol^ protocol, System::Boolean theModeStats);

//! Creates an HGraph with a graph itself created from <amodel> <br>
//!           and <protocol> <br>
OCInterface_HGraph(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GTool^ gtool, System::Boolean theModeStats);

//! Same a above, but works with the GTool in the model <br>
OCInterface_HGraph(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, System::Boolean theModeStats);

//! Returns the Graph contained in <me>, for Read Only Operations <br>
//!           Remark that it is returns as "const &" <br>
//!           Getting it in a new variable instead of a reference would be <br>
//!           a pitty, because all the graph's content would be duplicated <br>
 /*instead*/  OCInterface_Graph^ Graph() ;

//! Same as above, but for Read-Write Operations <br>
//!           Then, The Graph will be modified in the HGraph itself <br>
 /*instead*/  OCInterface_Graph^ CGraph() ;

~OCInterface_HGraph()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
