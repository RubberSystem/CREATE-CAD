// File generated by CPPExt (Transient)
//
#ifndef _Interface_FileReaderData_OCWrappers_HeaderFile
#define _Interface_FileReaderData_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_FileReaderData.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../TColStd/TColStd_Array1OfTransient.h"
#include "Interface_ParamType.h"


namespace OCNaroWrappers
{

ref class OCInterface_ParamSet;
ref class OCTCollection_AsciiString;
ref class OCInterface_FileParameter;
ref class OCInterface_ParamList;
ref class OCStandard_Transient;


//! This class defines services which permit to access Data issued <br>
//!           from a File, in a form which does not depend of physical <br>
//!           format : thus, each Record has an attached ParamList (to be <br>
//!           managed) and resulting Entity. <br>
//! <br>
//!           Each Interface defines its own FileReaderData : on one hand by <br>
//!           defining deferred methods given here, on the other hand by <br>
//!           describing literal data and their accesses, with the help of <br>
//!           basic classes such as String, Array1OfString, etc... <br>
//! <br>
//!           FileReaderData is used by a FileReaderTool, which is also <br>
//!           specific of each Norm, to read an InterfaceModel of the Norm <br>
//!           FileReaderData inherits TShared to be accessed by Handle : <br>
//!           this allows FileReaderTool to define more easily the specific <br>
//!           methods, and improves memory management. <br>
public ref class OCInterface_FileReaderData : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCInterface_FileReaderData(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_FileReaderData(Handle(Interface_FileReaderData)* nativeHandle);

// Methods PUBLIC

//! Initializes arrays of Entities and of ParamLists attached <br>
//!           to registered records <br>
//!           <nbr> must be the maximum number of records to get (no way to <br>
//!           extend it at run-time) : count entities and sub-entities ... <br>
//!           <npar> is the total count of parameters (if it is not exact, <br>
//!           it will be extented as necessary) <br>
//! <br>
//!           Hence, to each record can be bound an Entity and a list of <br>
//!           Parameters. Each kind of FileReaderData can add other data, by <br>
//!           having them in parallel (other arrays with same sizes) <br>
//!           Else, it must manage binding between items and their data <br>
OCInterface_FileReaderData(Standard_Integer nbr, Standard_Integer npar);

//! Returns the count of registered records <br>
//!           That is, value given for Initialization (can be redefined) <br>
virtual /*instead*/  Standard_Integer NbRecords() ;

//! Returns the count of entities. Depending of each norm, records <br>
//!           can be Entities or SubParts (SubList in STEP, SubGroup in SET <br>
//!           ...). NbEntities counts only Entities, not Subs <br>
//!           Used for memory reservation in InterfaceModel <br>
//!           Default implementation uses FindNextRecord <br>
//!           Can be redefined into a more performant way <br>
virtual /*instead*/  Standard_Integer NbEntities() ;

//! attaches an empty ParamList to a Record <br>
 /*instead*/  void InitParams(Standard_Integer num) ;

//! Adds a parameter to record no "num" and fills its fields <br>
//!           (EntityNumber is optional) <br>
//!  Warning : <aval> is assumed to be memory-managed elsewhere : it is NOT <br>
//!           copied. This gives a best speed : strings remain stored in <br>
//!           pages of characters <br>
 /*instead*/  void AddParam(Standard_Integer num, System::String^ aval, OCInterface_ParamType atype, Standard_Integer nument) ;

//! Same as above, but gets a AsciiString from TCollection <br>
//!           Remark that the content of the AsciiString is locally copied <br>
//!           (because its content is most often lost after using) <br>
 /*instead*/  void AddParam(Standard_Integer num, OCNaroWrappers::OCTCollection_AsciiString^ aval, OCInterface_ParamType atype, Standard_Integer nument) ;

//! Same as above, but gets a complete FileParameter <br>
//!  Warning : Content of <FP> is NOT copied : its original address and space <br>
//!           in memory are assumed to be managed elsewhere (see ParamSet) <br>
 /*instead*/  void AddParam(Standard_Integer num, OCNaroWrappers::OCInterface_FileParameter^ FP) ;

//! Sets a new value for a parameter of a record, given by : <br>
//!           num : record number; nump : parameter number in the record <br>
 /*instead*/  void SetParam(Standard_Integer num, Standard_Integer nump, OCNaroWrappers::OCInterface_FileParameter^ FP) ;

//! Returns count of parameters attached to record "num" <br>
//!           If <num> = 0, returns the total recorded count of parameters <br>
 /*instead*/  Standard_Integer NbParams(Standard_Integer num) ;

//! Returns the complete ParamList of a record (read only) <br>
//!           num = 0 to return the whole param list for the file <br>
 /*instead*/  OCInterface_ParamList^ Params(Standard_Integer num) ;

//! Returns parameter "nump" of record "num", as a complete <br>
//!           FileParameter <br>
 /*instead*/  OCInterface_FileParameter^ Param(Standard_Integer num, Standard_Integer nump) ;

//! Same as above, but in order to be modified on place <br>
 /*instead*/  OCInterface_FileParameter^ ChangeParam(Standard_Integer num, Standard_Integer nump) ;

//! Returns type of parameter "nump" of record "num" <br>//! Returns literal value of parameter "nump" of record "num" <br>
//!  was C++ : return const & <br>
 /*instead*/  OCInterface_ParamType ParamType(Standard_Integer num, Standard_Integer nump) ;

//! Same as above, but as a CString <br>
//!  was C++ : return const <br>
 /*instead*/  System::String^ ParamCValue(Standard_Integer num, Standard_Integer nump) ;

//! Returns True if parameter "nump" of record "num" is defined <br>
//!           (it is not if its type is ParamVoid) <br>
 /*instead*/  System::Boolean IsParamDefined(Standard_Integer num, Standard_Integer nump) ;

//! Returns record number of an entity referenced by a parameter <br>
//!           of type Ident; 0 if no EntityNumber has been determined <br>
//!           Note that it is used to reference Entities but also Sublists <br>
//!           (sublists are not objects, but internal descriptions) <br>
 /*instead*/  Standard_Integer ParamNumber(Standard_Integer num, Standard_Integer nump) ;

//! Returns the StepEntity referenced by a parameter <br>
//!           Error if none <br>
 /*instead*/  OCStandard_Transient^ ParamEntity(Standard_Integer num, Standard_Integer nump) ;

//! Returns the absolute rank of the beginning of a record <br>
//!           (its lsit is from ParamFirstRank+1 to ParamFirstRank+NbParams) <br>
 /*instead*/  Standard_Integer ParamFirstRank(Standard_Integer num) ;

//! Returns the entity bound to a record, set by SetEntities <br>
 /*instead*/  OCStandard_Transient^ BoundEntity(Standard_Integer num) ;

//! Binds an entity to a record <br>
 /*instead*/  void BindEntity(Standard_Integer num, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Sets the status "Error Load" on, to overside check fails <br>
//!           <val> True  : declares unloaded <br>
//!           <val> False : declares loaded <br>
//!           If not called before loading (see FileReaderTool), check fails <br>
//!             give the status <br>
//!           IsErrorLoad says if SetErrorLoad has been called by user <br>
//!           ResetErrorLoad resets it (called by FileReaderTool) <br>
//!           This allows to specify that the currently loaded entity <br>
//!           remains unloaded (because of syntactic fail) <br>
 /*instead*/  void SetErrorLoad(System::Boolean val) ;

//! Returns True if the status "Error Load" has been set (to True <br>
//!           or False) <br>
 /*instead*/  System::Boolean IsErrorLoad() ;

//! Returns the former value of status "Error Load" then resets it <br>
//!           Used to read the status then ensure it is reset <br>
 /*instead*/  System::Boolean ResetErrorLoad() ;

//! Same spec.s as standard <atof> but 5 times faster <br>
static /*instead*/  Standard_Real Fastof(System::String^ str) ;

~OCInterface_FileReaderData()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
