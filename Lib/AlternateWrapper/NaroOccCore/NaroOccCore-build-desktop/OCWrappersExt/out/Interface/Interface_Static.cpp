// File generated by CPPExt (CPP file)
//

#include "Interface_Static.h"
#include "../Converter.h"
#include "../Standard/Standard_Type.h"
#include "../TColStd/TColStd_HArray1OfAsciiString.h"
#include "../Dico/Dico_DictionaryOfInteger.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "../Standard/Standard_Transient.h"
#include "../Message/Message_Messenger.h"
#include "../TColStd/TColStd_HSequenceOfHAsciiString.h"


using namespace OCNaroWrappers;

OCInterface_Static::OCInterface_Static(Handle(Interface_Static)* nativeHandle) : OCInterface_TypedValue((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Interface_Static(*nativeHandle);
}

OCInterface_Static::OCInterface_Static(System::String^ family, System::String^ name, OCInterface_ParamType type, System::String^ init) : OCInterface_TypedValue((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Interface_Static(new Interface_Static(OCConverter::StringToStandardCString(family), OCConverter::StringToStandardCString(name), (Interface_ParamType)type, OCConverter::StringToStandardCString(init)));
}

OCInterface_Static::OCInterface_Static(System::String^ family, System::String^ name, OCNaroWrappers::OCInterface_Static^ other) : OCInterface_TypedValue((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Interface_Static(new Interface_Static(OCConverter::StringToStandardCString(family), OCConverter::StringToStandardCString(name), *((Handle_Interface_Static*)other->Handle)));
}

 void OCInterface_Static::PrintStatic(OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_Interface_Static*)nativeHandle))->PrintStatic(*((Handle_Message_Messenger*)S->Handle));
}

 System::String^ OCInterface_Static::Family()
{
  return OCConverter::StandardCStringToString((*((Handle_Interface_Static*)nativeHandle))->Family());
}

 void OCInterface_Static::SetWild(OCNaroWrappers::OCInterface_Static^ wildcard)
{
  (*((Handle_Interface_Static*)nativeHandle))->SetWild(*((Handle_Interface_Static*)wildcard->Handle));
}

OCInterface_Static^ OCInterface_Static::Wild()
{
  Handle(Interface_Static) tmp = (*((Handle_Interface_Static*)nativeHandle))->Wild();
  return gcnew OCInterface_Static(&tmp);
}

 void OCInterface_Static::SetUptodate()
{
  (*((Handle_Interface_Static*)nativeHandle))->SetUptodate();
}

 System::Boolean OCInterface_Static::UpdatedStatus()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Interface_Static*)nativeHandle))->UpdatedStatus());
}

 System::Boolean OCInterface_Static::Init(System::String^ family, System::String^ name, OCInterface_ParamType type, System::String^ init)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::Init(OCConverter::StringToStandardCString(family), OCConverter::StringToStandardCString(name), (Interface_ParamType)type, OCConverter::StringToStandardCString(init)));
}

 System::Boolean OCInterface_Static::Init(System::String^ family, System::String^ name, Standard_Character type, System::String^ init)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::Init(OCConverter::StringToStandardCString(family), OCConverter::StringToStandardCString(name), type, OCConverter::StringToStandardCString(init)));
}

OCInterface_Static^ OCInterface_Static::Static(System::String^ name)
{
  Handle(Interface_Static) tmp = Interface_Static::Static(OCConverter::StringToStandardCString(name));
  return gcnew OCInterface_Static(&tmp);
}

 System::Boolean OCInterface_Static::IsPresent(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::IsPresent(OCConverter::StringToStandardCString(name)));
}

 System::String^ OCInterface_Static::CDef(System::String^ name, System::String^ part)
{
  return OCConverter::StandardCStringToString(Interface_Static::CDef(OCConverter::StringToStandardCString(name), OCConverter::StringToStandardCString(part)));
}

 Standard_Integer OCInterface_Static::IDef(System::String^ name, System::String^ part)
{
  return Interface_Static::IDef(OCConverter::StringToStandardCString(name), OCConverter::StringToStandardCString(part));
}

 System::Boolean OCInterface_Static::IsSet(System::String^ name, System::Boolean proper)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::IsSet(OCConverter::StringToStandardCString(name), OCConverter::BooleanToStandardBoolean(proper)));
}

 System::String^ OCInterface_Static::CVal(System::String^ name)
{
  return OCConverter::StandardCStringToString(Interface_Static::CVal(OCConverter::StringToStandardCString(name)));
}

 Standard_Integer OCInterface_Static::IVal(System::String^ name)
{
  return Interface_Static::IVal(OCConverter::StringToStandardCString(name));
}

 Standard_Real OCInterface_Static::RVal(System::String^ name)
{
  return Interface_Static::RVal(OCConverter::StringToStandardCString(name));
}

 System::Boolean OCInterface_Static::SetCVal(System::String^ name, System::String^ val)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::SetCVal(OCConverter::StringToStandardCString(name), OCConverter::StringToStandardCString(val)));
}

 System::Boolean OCInterface_Static::SetIVal(System::String^ name, Standard_Integer val)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::SetIVal(OCConverter::StringToStandardCString(name), val));
}

 System::Boolean OCInterface_Static::SetRVal(System::String^ name, Standard_Real val)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::SetRVal(OCConverter::StringToStandardCString(name), val));
}

 System::Boolean OCInterface_Static::Update(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::Update(OCConverter::StringToStandardCString(name)));
}

 System::Boolean OCInterface_Static::IsUpdated(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean(Interface_Static::IsUpdated(OCConverter::StringToStandardCString(name)));
}

OCTColStd_HSequenceOfHAsciiString^ OCInterface_Static::Items(Standard_Integer mode, System::String^ criter)
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = Interface_Static::Items(mode, OCConverter::StringToStandardCString(criter));
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}

 void OCInterface_Static::Standards()
{
  Interface_Static::Standards();
}


