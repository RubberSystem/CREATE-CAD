// File generated by CPPExt (Transient)
//
#ifndef _Interface_UndefinedContent_OCWrappers_HeaderFile
#define _Interface_UndefinedContent_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_UndefinedContent.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "Interface_EntityList.h"
#include "Interface_ParamType.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfInteger;
ref class OCInterface_HArray1OfHAsciiString;
ref class OCStandard_Transient;
ref class OCTCollection_HAsciiString;
ref class OCInterface_EntityList;
ref class OCInterface_CopyTool;


//! Defines resources for an "Undefined Entity" : such an Entity <br>
//!           is used to describe an Entity which complies with the Norm, <br>
//!           but of an Unknown Type : hence it is kept under a literal <br>
//!           form (avoiding to loose data). UndefinedContent offers a way <br>
//!           to store a list of Parameters, as literals or references to <br>
//!           other Entities <br>
//! <br>
//!           Each Interface must provide one "UndefinedEntity", which must <br>
//!           have same basic description as all its types of entities : <br>
//!           the best way would be double inheritance : on the Entity Root <br>
//!           of the Norm and on an general "UndefinedEntity" <br>
//! <br>
//!           While it is not possible to do so, the UndefinedEntity of each <br>
//!           Interface can define its own UndefinedEntity by INCLUDING <br>
//!           (in a field) this UndefinedContent <br>
//! <br>
//!           Hence, for that UndefinedEntity, define a Constructor which <br>
//!           creates this UndefinedContent, plus access methods to it <br>
//!           (or to its data, calling methods defined here). <br>
//! <br>
//!           Finally, the Protocols of each norm have to Create and <br>
//!           Recognize Unknown Entities of this norm <br>
public ref class OCInterface_UndefinedContent : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCInterface_UndefinedContent(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_UndefinedContent(Handle(Interface_UndefinedContent)* nativeHandle);

// Methods PUBLIC

//! Defines an empty UndefinedContent <br>
OCInterface_UndefinedContent();

//! Gives count of recorded parameters <br>
 /*instead*/  Standard_Integer NbParams() ;

//! Gives count of Literal Parameters <br>
 /*instead*/  Standard_Integer NbLiterals() ;

//! Returns data of a Parameter : its type, and the entity if it <br>
//!           designates en entity ("ent") or its literal value else ("str") <br>
//!           Returned value (Boolean) : True if it is an Entity, False else <br>
 /*instead*/  System::Boolean ParamData(Standard_Integer num, OCInterface_ParamType& ptype, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCTCollection_HAsciiString^ val) ;

//! Returns the ParamType of a Param, given its rank <br>
//!           Error if num is not between 1 and NbParams <br>
 /*instead*/  OCInterface_ParamType ParamType(Standard_Integer num) ;

//! Returns True if a Parameter is recorded as an entity <br>
//!           Error if num is not between 1 and NbParams <br>
 /*instead*/  System::Boolean IsParamEntity(Standard_Integer num) ;

//! Returns Entity corresponding to a Param, given its rank <br>
 /*instead*/  OCStandard_Transient^ ParamEntity(Standard_Integer num) ;

//! Returns litteral value of a Parameter, given its rank <br>
 /*instead*/  OCTCollection_HAsciiString^ ParamValue(Standard_Integer num) ;

//! Manages reservation for parameters (internal use) <br>
//!           (nb : total count of parameters, nblit : count of literals) <br>
 /*instead*/  void Reservate(Standard_Integer nb, Standard_Integer nblit) ;

//! Adds a literal Parameter to the list <br>
 /*instead*/  void AddLiteral(OCInterface_ParamType ptype, OCNaroWrappers::OCTCollection_HAsciiString^ val) ;

//! Adds a Parameter which references an Entity <br>
 /*instead*/  void AddEntity(OCInterface_ParamType ptype, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Removes a Parameter given its rank <br>
 /*instead*/  void RemoveParam(Standard_Integer num) ;

//! Sets a new value for the Parameter <num>, to a literal value <br>
//!           (if it referenced formerly an Entity, this Entity is removed) <br>
 /*instead*/  void SetLiteral(Standard_Integer num, OCInterface_ParamType ptype, OCNaroWrappers::OCTCollection_HAsciiString^ val) ;

//! Sets a new value for the Parameter <num>, to reference an <br>
//!           Entity. To simply change the Entity, see the variant below <br>
 /*instead*/  void SetEntity(Standard_Integer num, OCInterface_ParamType ptype, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Changes the Entity referenced by the Parameter <num> <br>
//!           (with same ParamType) <br>
 /*instead*/  void SetEntity(Standard_Integer num, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns globally the list of param entities. Note that it can <br>
//!           be used as shared entity list for the UndefinedEntity <br>
 /*instead*/  OCInterface_EntityList^ EntityList() ;

//! Copies contents of undefined entities; deigned to be called by <br>
//!           GetFromAnother method from Undefined entity of each Interface <br>
//!           (the basic operation is the same regardless the norm) <br>
 /*instead*/  void GetFromAnother(OCNaroWrappers::OCInterface_UndefinedContent^ other, OCNaroWrappers::OCInterface_CopyTool^ TC) ;

~OCInterface_UndefinedContent()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
