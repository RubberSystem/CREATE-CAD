// File generated by CPPExt (CPP file)
//

#include "Interface_ShareFlags.h"
#include "../Converter.h"
#include "Interface_InterfaceModel.h"
#include "../TColStd/TColStd_HSequenceOfTransient.h"
#include "Interface_GeneralLib.h"
#include "Interface_GTool.h"
#include "Interface_Protocol.h"
#include "Interface_Graph.h"
#include "../Standard/Standard_Transient.h"
#include "Interface_EntityIterator.h"


using namespace OCNaroWrappers;

OCInterface_ShareFlags::OCInterface_ShareFlags(Interface_ShareFlags* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCInterface_ShareFlags::OCInterface_ShareFlags(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GeneralLib^ lib) 
{
  nativeHandle = new Interface_ShareFlags(*((Handle_Interface_InterfaceModel*)amodel->Handle), *((Interface_GeneralLib*)lib->Handle));
}

OCInterface_ShareFlags::OCInterface_ShareFlags(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GTool^ gtool) 
{
  nativeHandle = new Interface_ShareFlags(*((Handle_Interface_InterfaceModel*)amodel->Handle), *((Handle_Interface_GTool*)gtool->Handle));
}

OCInterface_ShareFlags::OCInterface_ShareFlags(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_Protocol^ protocol) 
{
  nativeHandle = new Interface_ShareFlags(*((Handle_Interface_InterfaceModel*)amodel->Handle), *((Handle_Interface_Protocol*)protocol->Handle));
}

OCInterface_ShareFlags::OCInterface_ShareFlags(OCNaroWrappers::OCInterface_InterfaceModel^ amodel) 
{
  nativeHandle = new Interface_ShareFlags(*((Handle_Interface_InterfaceModel*)amodel->Handle));
}

OCInterface_ShareFlags::OCInterface_ShareFlags(OCNaroWrappers::OCInterface_Graph^ agraph) 
{
  nativeHandle = new Interface_ShareFlags(*((Interface_Graph*)agraph->Handle));
}

OCInterface_InterfaceModel^ OCInterface_ShareFlags::Model()
{
  Handle(Interface_InterfaceModel) tmp = ((Interface_ShareFlags*)nativeHandle)->Model();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 System::Boolean OCInterface_ShareFlags::IsShared(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean(((Interface_ShareFlags*)nativeHandle)->IsShared(*((Handle_Standard_Transient*)ent->Handle)));
}

OCInterface_EntityIterator^ OCInterface_ShareFlags::RootEntities()
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = ((Interface_ShareFlags*)nativeHandle)->RootEntities();
  return gcnew OCInterface_EntityIterator(tmp);
}

 Standard_Integer OCInterface_ShareFlags::NbRoots()
{
  return ((Interface_ShareFlags*)nativeHandle)->NbRoots();
}

OCStandard_Transient^ OCInterface_ShareFlags::Root(Standard_Integer num)
{
  Handle(Standard_Transient) tmp = ((Interface_ShareFlags*)nativeHandle)->Root(num);
  return gcnew OCStandard_Transient(&tmp);
}


