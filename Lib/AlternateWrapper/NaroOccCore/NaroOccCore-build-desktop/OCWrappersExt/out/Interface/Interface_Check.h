// File generated by CPPExt (Transient)
//
#ifndef _Interface_Check_OCWrappers_HeaderFile
#define _Interface_Check_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_Check.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "Interface_CheckStatus.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HSequenceOfHAsciiString;
ref class OCStandard_Transient;
ref class OCMessage_Msg;
ref class OCTCollection_HAsciiString;
ref class OCMessage_Messenger;


//! Defines a Check, as a list of Fail or Warning Messages under <br>
//!           a literal form, which can be empty. A Check can also bring an <br>
//!           Entity, which is the Entity to which the messages apply <br>
//!           (this Entity may be any Transient Object). <br>
//! <br>
//!           Messages can be stored in two forms : the definitive form <br>
//!           (the only one by default), and another form, the original <br>
//!           form, which can be different if it contains values to be <br>
//!           inserted (integers, reals, strings) <br>
//!           The original form can be more suitable for some operations <br>
//!           such as counting messages <br>
public ref class OCInterface_Check : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCInterface_Check(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_Check(Handle(Interface_Check)* nativeHandle);

// Methods PUBLIC

//! Allows definition of a Sequence. Used also for Global Check <br>
//!           of an InterfaceModel (which stores global messages for file) <br>
OCInterface_Check();

//! Defines a Check on an Entity <br>
OCInterface_Check(OCNaroWrappers::OCStandard_Transient^ anentity);

//! New name for AddFail (Msg) <br>
 /*instead*/  void SendFail(OCNaroWrappers::OCMessage_Msg^ amsg) ;

//! Records a new Fail message <br>
 /*instead*/  void AddFail(OCNaroWrappers::OCTCollection_HAsciiString^ amess) ;

//! Records a new Fail message under two forms : final,original <br>
 /*instead*/  void AddFail(OCNaroWrappers::OCTCollection_HAsciiString^ amess, OCNaroWrappers::OCTCollection_HAsciiString^ orig) ;

//! Records a new Fail message given as "error text" directly <br>
//!           If <orig> is given, a distinct original form is recorded <br>
//!           else (D), the original form equates <amess> <br>
 /*instead*/  void AddFail(System::String^ amess, System::String^ orig) ;

//! Records a new Fail from the definition of a Msg (Original+Value) <br>
 /*instead*/  void AddFail(OCNaroWrappers::OCMessage_Msg^ amsg) ;

//! Returns True if Check brings at least one Fail Message <br>
 /*instead*/  System::Boolean HasFailed() ;

//! Returns count of recorded Fails <br>
 /*instead*/  Standard_Integer NbFails() ;

//! Returns Fail Message as a String <br>
//!           Final form by default, Original form if <final> is False <br>
 /*instead*/  OCTCollection_HAsciiString^ Fail(Standard_Integer num, System::Boolean final) ;

//! Same as above, but returns a CString (to be printed ...) <br>
//!           Final form by default, Original form if <final> is False <br>
 /*instead*/  System::String^ CFail(Standard_Integer num, System::Boolean final) ;

//! Returns the list of Fails, for a frontal-engine logic <br>
//!           Final forms by default, Original forms if <final> is False <br>
//!           Can be empty <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ Fails(System::Boolean final) ;

//! New name for AddWarning <br>
 /*instead*/  void SendWarning(OCNaroWrappers::OCMessage_Msg^ amsg) ;

//! Records a new Warning message <br>
 /*instead*/  void AddWarning(OCNaroWrappers::OCTCollection_HAsciiString^ amess) ;

//! Records a new Warning message under two forms : final,original <br>
 /*instead*/  void AddWarning(OCNaroWrappers::OCTCollection_HAsciiString^ amess, OCNaroWrappers::OCTCollection_HAsciiString^ orig) ;

//! Records a Warning message given as "warning message" directly <br>
//!           If <orig> is given, a distinct original form is recorded <br>
//!           else (D), the original form equates <amess> <br>
 /*instead*/  void AddWarning(System::String^ amess, System::String^ orig) ;

//! Records a new Warning from the definition of a Msg (Original+Value) <br>
 /*instead*/  void AddWarning(OCNaroWrappers::OCMessage_Msg^ amsg) ;

//! Returns True if Check brings at least one Warning Message <br>
 /*instead*/  System::Boolean HasWarnings() ;

//! Returns count of recorded Warning messages <br>
 /*instead*/  Standard_Integer NbWarnings() ;

//! Returns Warning message as a String <br>
//!           Final form by default, Original form if <final> is False <br>
 /*instead*/  OCTCollection_HAsciiString^ Warning(Standard_Integer num, System::Boolean final) ;

//! Same as above, but returns a CString (to be printed ...) <br>
//!           Final form by default, Original form if <final> is False <br>
 /*instead*/  System::String^ CWarning(Standard_Integer num, System::Boolean final) ;

//! Returns the list of Warnings, for a frontal-engine logic <br>
//!           Final forms by default, Original forms if <final> is False <br>
//!           Can be empty <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ Warnings(System::Boolean final) ;

//! Records an information message <br>
//!           This does not change the status of the Check <br>
 /*instead*/  void SendMsg(OCNaroWrappers::OCMessage_Msg^ amsg) ;

//! Returns the count of recorded information messages <br>
 /*instead*/  Standard_Integer NbInfoMsgs() ;

//! Returns information message as a String <br>
 /*instead*/  OCTCollection_HAsciiString^ InfoMsg(Standard_Integer num, System::Boolean final) ;

//! Same as above, but returns a CString (to be printed ...) <br>
//!           Final form by default, Original form if <final> is False <br>
 /*instead*/  System::String^ CInfoMsg(Standard_Integer num, System::Boolean final) ;

//! Returns the list of Info Msg, for a frontal-engine logic <br>
//!           Final forms by default, Original forms if <final> is False <br>
//!           Can be empty <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ InfoMsgs(System::Boolean final) ;

//! Returns the Check Status : OK, Warning or Fail <br>
 /*instead*/  OCInterface_CheckStatus Status() ;

//! Tells if Check Status complies with a given one <br>
//!           (i.e. also status for query) <br>
 /*instead*/  System::Boolean Complies(OCInterface_CheckStatus status) ;

//! Tells if a message is brought by a Check, as follows : <br>
//!           <incl> = 0 : <mess> exactly matches one of the messages <br>
//!           <incl> < 0 : <mess> is contained by one of the messages <br>
//!           <incl> > 0 : <mess> contains one of the messages <br>
//!           For <status> : for CheckWarning and CheckFail, considers only <br>
//!             resp. Warning or Check messages. for CheckAny, considers all <br>
//!             other values are ignored (answer will be false) <br>
 /*instead*/  System::Boolean Complies(OCNaroWrappers::OCTCollection_HAsciiString^ mess, Standard_Integer incl, OCInterface_CheckStatus status) ;

//! Returns True if a Check is devoted to an entity; else, it is <br>
//!           global (for InterfaceModel's storing of global error messages) <br>
 /*instead*/  System::Boolean HasEntity() ;

//! Returns the entity on which the Check has been defined <br>
 /*instead*/  OCStandard_Transient^ Entity() ;

//! Clears a check, in order to receive informations from transfer <br>
//!           (Messages and Entity) <br>
 /*instead*/  void Clear() ;

//! Clears the Fail Messages (for instance to keep only Warnings) <br>
 /*instead*/  void ClearFails() ;

//! Clears the Warning Messages (for instance to keep only Fails) <br>
 /*instead*/  void ClearWarnings() ;

//! Clears the Info Messages <br>
 /*instead*/  void ClearInfoMsgs() ;

//! Removes the messages which comply with <mess>, as follows : <br>
//!           <incl> = 0 : <mess> exactly matches one of the messages <br>
//!           <incl> < 0 : <mess> is contained by one of the messages <br>
//!           <incl> > 0 : <mess> contains one of the messages <br>
//!           For <status> : for CheckWarning and CheckFail, considers only <br>
//!             resp. Warning or Check messages. for CheckAny, considers all <br>
//!             other values are ignored (nothing is done) <br>
//!           Returns True if at least one message has been removed, False else <br>
 /*instead*/  System::Boolean Remove(OCNaroWrappers::OCTCollection_HAsciiString^ mess, Standard_Integer incl, OCInterface_CheckStatus status) ;

//! Mends messages, according <pref> and <num> <br>
//!           According to <num>, works on the whole list of Fails if = 0(D) <br>
//!             or only one Fail message, given its rank <br>
//!           If <pref> is empty, converts Fail(s) to Warning(s) <br>
//!           Else, does the conversion but prefixes the new Warning(s) but <br>
//!           <pref> followed by a semi-column <br>
//!           Some reserved values of <pref> are : <br>
//!           "FM" : standard prefix "Mended" (can be translated) <br>
//!           "CF" : clears Fail(s) <br>
//!           "CW" : clears Warning(s) : here, <num> refers to Warning list <br>
//!           "CA" : clears all messages : here, <num> is ignored <br>
 /*instead*/  System::Boolean Mend(System::String^ pref, Standard_Integer num) ;

//! Receives an entity result of a Transfer <br>
 /*instead*/  void SetEntity(OCNaroWrappers::OCStandard_Transient^ anentity) ;

//! same as SetEntity (old form kept for compatibility) <br>
//! Warning : Does nothing if Entity field is not yet clear <br>
 /*instead*/  void GetEntity(OCNaroWrappers::OCStandard_Transient^ anentity) ;

//! Copies messages stored in another Check, cumulating <br>
//!           Does not regard other's Entity. Used to cumulate messages <br>
 /*instead*/  void GetMessages(OCNaroWrappers::OCInterface_Check^ other) ;

//! Copies messages converted into Warning messages <br>
//!           If failsonly is true, only Fails are taken, and converted <br>
//!           else, Warnings are taken too. Does not regard Entity <br>
//!           Used to keep Fail messages as Warning, after a recovery <br>
 /*instead*/  void GetAsWarning(OCNaroWrappers::OCInterface_Check^ other, System::Boolean failsonly) ;

//! Prints the messages of the check to an Messenger <br>
//!           <level> = 1 : only fails <br>
//!           <level> = 2 : fails and warnings <br>
//!           <level> = 3 : all (fails, warnings, info msg) <br>
//!           <final> : if positive (D) prints final values of messages <br>
//!           if negative, prints originals <br>
//!           if null, prints both forms <br>
 /*instead*/  void Print(OCNaroWrappers::OCMessage_Messenger^ S, Standard_Integer level, Standard_Integer final) ;

//! Prints the messages of the check to the default trace file <br>
//!           By default, according to the default standard level <br>
//!           Else, according level (see method Print) <br>
 /*instead*/  void Trace(Standard_Integer level, Standard_Integer final) ;

~OCInterface_Check()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
