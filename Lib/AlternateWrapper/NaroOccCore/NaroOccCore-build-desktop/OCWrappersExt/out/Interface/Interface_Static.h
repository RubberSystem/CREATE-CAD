// File generated by CPPExt (Transient)
//
#ifndef _Interface_Static_OCWrappers_HeaderFile
#define _Interface_Static_OCWrappers_HeaderFile

// include the wrapped class
#include <Interface_Static.hxx>
#include "../Converter.h"

#include "Interface_TypedValue.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "Interface_ParamType.h"


namespace OCNaroWrappers
{

ref class OCStandard_Type;
ref class OCTColStd_HArray1OfAsciiString;
ref class OCDico_DictionaryOfInteger;
ref class OCTCollection_HAsciiString;
ref class OCStandard_Transient;
ref class OCMessage_Messenger;
ref class OCTColStd_HSequenceOfHAsciiString;


//! This class gives a way to manage meaningfull static variables, <br>
//!           used as "global" parameters in various procedures. <br>
//! <br>
//!           A Static brings a specification (its type, constraints if any) <br>
//!           and a value. Its basic form is a string, it can be specified <br>
//!           as integer or real or enumerative string, and queried as such. <br>
//!           Its string content, which is a Handle(HAsciiString) can be <br>
//!           shared by other data structures, hence gives a direct on line <br>
//!           access to its value. <br>
//! <br>
//!           All this description is inherited from TypedValue <br>
//! <br>
//!           A Static can be given an initial value, it can be filled from, <br>
//!           either a set of Resources (an applicative feature which <br>
//!           accesses and manages parameter files), or environment or <br>
//!           internal definition : these define families of Static. <br>
//!           In addition, it supports a status for reinitialisation : an <br>
//!           initialisation procedure can ask if the value of the Static <br>
//!           has changed from its last call, in this case does something <br>
//!           then marks the Status "uptodate", else it does nothing. <br>
//! <br>
//!           Statics are named and recorded then accessed in an alphabetic <br>
//!           dictionary <br>
public ref class OCInterface_Static : OCInterface_TypedValue {

protected:
  // dummy constructor;
  OCInterface_Static(OCDummy^) : OCInterface_TypedValue((OCDummy^)nullptr) {};

public:

// constructor from native
OCInterface_Static(Handle(Interface_Static)* nativeHandle);

// Methods PUBLIC

//! Creates and records a Static, with a family and a name <br>
//!           family can report to a name of ressource or to a system or <br>
//!           internal definition. The name must be unique. <br>
//! <br>
//!           type gives the type of the parameter, default is free text <br>
//!           Also available : Integer, Real, Enum, Entity (i.e. Object) <br>
//!           More precise specifications, titles, can be given to the <br>
//!           Static once created <br>
//! <br>
//!           init gives an initial value. If it is not given, the Static <br>
//!           begin as "not set", its value is empty <br>
OCInterface_Static(System::String^ family, System::String^ name, OCInterface_ParamType type, System::String^ init);

//! Creates a new Static with same definition as another one <br>
//!           (value is copied, except for Entity : it remains null) <br>
OCInterface_Static(System::String^ family, System::String^ name, OCNaroWrappers::OCInterface_Static^ other);

//! Writes the properties of a <br>
//! parameter in the diagnostic file. These include: <br>
//! - Name <br>
//! - Family, <br>
//! - Wildcard (if it has one) <br>
//! - Current status (empty  string if it was updated or <br>
//!   if it is the original one) <br>
//! - Value <br>
 /*instead*/  void PrintStatic(OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Returns the family. It can be : a resource name for applis, <br>
//!           an internal name between : $e (environment variables), <br>
//!           $l (other, purely local) <br>
 /*instead*/  System::String^ Family() ;

//! Sets a "wild-card" static : its value will be considered <br>
//!           if <me> is not properly set. (reset by set a null one) <br>
 /*instead*/  void SetWild(OCNaroWrappers::OCInterface_Static^ wildcard) ;

//! Returns the wildcard static, which can be (is most often) null <br>
 /*instead*/  OCInterface_Static^ Wild() ;

//! Records a Static has "uptodate", i.e. its value has been taken <br>
//!           into account by a reinitialisation procedure <br>
//!           This flag is reset at each successful SetValue <br>
 /*instead*/  void SetUptodate() ;

//! Returns the status "uptodate" <br>
 /*instead*/  System::Boolean UpdatedStatus() ;

//! Declares a new Static (by calling its constructor) <br>
//!           If this name is already taken, does nothing and returns False <br>
//!           Else, creates it and returns True <br>
//!           For additional definitions, get the Static then edit it <br>
static /*instead*/  System::Boolean Init(System::String^ family, System::String^ name, OCInterface_ParamType type, System::String^ init) ;

//! As Init with ParamType, but type is given as a character <br>
//!           This allows a simpler call <br>
//!           Types : 'i' Integer, 'r' Real, 't' Text, 'e' Enum, 'o' Object <br>
//!           '=' for same definition as, <init> gives the initial Static <br>
//!           Returns False if <type> does not match this list <br>
static /*instead*/  System::Boolean Init(System::String^ family, System::String^ name, Standard_Character type, System::String^ init) ;

//! Returns a Static from its name. Null Handle if not present <br>
static /*instead*/  OCInterface_Static^ Static(System::String^ name) ;

//! Returns True if a Static named <name> is present, False else <br>
static /*instead*/  System::Boolean IsPresent(System::String^ name) ;

//! Returns a part of the definition of a Static, as a CString <br>
//!           The part is designated by its name, as a CString <br>
//!           If the required value is not a string, it is converted to a <br>
//!           CString then returned <br>
//!           If <name> is not present, or <part> not defined for <name>, <br>
//!           this function returns an empty string <br>
//! <br>
//!           Allowed parts for CDef : <br>
//!             family : the family <br>
//!             type  : the type ("integer","real","text","enum") <br>
//!             label : the label <br>
//!             satis : satisfy function name if any <br>
//!             rmin : minimum real value <br>
//!             rmax : maximum real value <br>
//!             imin : minimum integer value <br>
//!             imax : maximum integer value <br>
//!             enum nn (nn : value of an integer) : enum value for nn <br>
//!             unit : unit definition for a real <br>
static /*instead*/  System::String^ CDef(System::String^ name, System::String^ part) ;

//! Returns a part of the definition of a Static, as an Integer <br>
//!           The part is designated by its name, as a CString <br>
//!           If the required value is not a string, returns zero <br>
//!           For a Boolean, 0 for false, 1 for true <br>
//!           If <name> is not present, or <part> not defined for <name>, <br>
//!           this function returns zero <br>
//! <br>
//!           Allowed parts for IDef : <br>
//!             imin, imax : minimum or maximum integer value <br>
//!             estart : starting number for enum <br>
//!             ecount : count of enum values (starting from estart) <br>
//!             ematch : exact match status <br>
//!             eval val : case determined from a string <br>
static /*instead*/  Standard_Integer IDef(System::String^ name, System::String^ part) ;

//! Returns True if <name> is present AND set <br>
//!           <proper> True (D) : considers this item only <br>
//!           <proper> False    : if not set and attached to a wild-card, <br>
//!             considers this wild-card <br>
static /*instead*/  System::Boolean IsSet(System::String^ name, System::Boolean proper) ;

//! Returns the value of the <br>
//! parameter identified by the string name. <br>
//! If the specified parameter does not exist, an empty <br>
//! string is returned. <br>
//! Example <br>
//! Interface_Static::CVal("write.step.schema"); <br>
//! which could return: <br>
//! "AP214" <br>
static /*instead*/  System::String^ CVal(System::String^ name) ;

//!  Returns the integer value of <br>
//! the translation parameter identified by the string name. <br>
//! Returns the value 0 if the parameter does not exist. <br>
//! Example <br>
//! Interface_Static::IVal("write.step.schema"); <br>
//! which could return: 3 <br>
static /*instead*/  Standard_Integer IVal(System::String^ name) ;

//!  Returns the value of a static <br>
//! translation parameter identified by the string name. <br>
//! Returns the value 0.0 if the parameter does not exist. <br>
static /*instead*/  Standard_Real RVal(System::String^ name) ;

//! Modifies the value of the <br>
//! parameter identified by name. The modification is specified <br>
//! by the string val. false is returned if the parameter does not exist. <br>
//! Example <br>
//! Interface_Static::SetCVal <br>
//! ("write.step.schema","AP203") <br>
//! This syntax specifies a switch from the default STEP 214 mode to STEP 203 mode. <br>
static /*instead*/  System::Boolean SetCVal(System::String^ name, System::String^ val) ;

//! Modifies the value of the <br>
//! parameter identified by name. The modification is specified <br>
//! by the integer value val. false is returned if the <br>
//! parameter does not exist. <br>
//! Example <br>
//! Interface_Static::SetIVal <br>
//! ("write.step.schema", 3) <br>
//! This syntax specifies a switch from the default STEP 214 mode to STEP 203 mode.S <br>
static /*instead*/  System::Boolean SetIVal(System::String^ name, Standard_Integer val) ;

//!  Modifies the value of a <br>
//! translation parameter. false is returned if the <br>
//! parameter does not exist. The modification is specified <br>
//! by the real number value val. <br>
static /*instead*/  System::Boolean SetRVal(System::String^ name, Standard_Real val) ;

//! Sets a Static to be "uptodate" <br>
//!           Returns False if <name> is not present <br>
//!           This status can be used by a reinitialisation procedure to <br>
//!           rerun if a value has been changed <br>
static /*instead*/  System::Boolean Update(System::String^ name) ;

//! Returns the status "uptodate" from a Static <br>
//!           Returns False if <name> is not present <br>
static /*instead*/  System::Boolean IsUpdated(System::String^ name) ;

//! Returns a list of names of statics : <br>
//!           <mode> = 0 (D) : criter is for family <br>
//!           <mode> = 1 : criter is regexp on names, takes final items <br>
//!             (ignore wild cards) <br>
//!           <mode> = 2 : idem but take only wilded, not final items <br>
//!           <mode> = 3 : idem, take all items matching criter <br>
//!           idem + 100 : takes only non-updated items <br>
//!           idem + 200 : takes only updated items <br>
//!           criter empty (D) : returns all names <br>
//!           else returns names which match the given criter <br>
//!           Remark : families beginning by '$' are not listed by criter "" <br>
//!           they are listed only by criter "$" <br>
//! <br>
//!           This allows for instance to set new values after having loaded <br>
//!           or reloaded a resource, then to update them as required <br>
static /*instead*/  OCTColStd_HSequenceOfHAsciiString^ Items(Standard_Integer mode, System::String^ criter) ;

//! Initializes all standard static parameters, which can be used <br>
//!           by every function. statics specific of a norm or a function <br>
//!           must be defined around it <br>
static /*instead*/  void Standards() ;

~OCInterface_Static()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
