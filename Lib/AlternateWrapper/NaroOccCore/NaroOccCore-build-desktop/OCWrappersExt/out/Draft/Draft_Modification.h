// File generated by CPPExt (Transient)
//
#ifndef _Draft_Modification_OCWrappers_HeaderFile
#define _Draft_Modification_OCWrappers_HeaderFile

// include the wrapped class
#include <Draft_Modification.hxx>
#include "../Converter.h"

#include "../BRepTools/BRepTools_Modification.h"

#include "Draft_DataMapOfFaceFaceInfo.h"
#include "Draft_DataMapOfEdgeEdgeInfo.h"
#include "Draft_DataMapOfVertexVertexInfo.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "Draft_ErrorStatus.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../TopTools/TopTools_ListOfShape.h"
#include "../TopTools/TopTools_IndexedDataMapOfShapeListOfShape.h"
#include "../GeomAbs/GeomAbs_Shape.h"
#include "../TopAbs/TopAbs_Orientation.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopoDS_Face;
ref class OCgp_Dir;
ref class OCgp_Pln;
ref class OCTopTools_ListOfShape;
ref class OCGeom_Surface;
ref class OCTopLoc_Location;
ref class OCTopoDS_Edge;
ref class OCGeom_Curve;
ref class OCTopoDS_Vertex;
ref class OCgp_Pnt;
ref class OCGeom2d_Curve;



public ref class OCDraft_Modification : OCBRepTools_Modification {

protected:
  // dummy constructor;
  OCDraft_Modification(OCDummy^) : OCBRepTools_Modification((OCDummy^)nullptr) {};

public:

// constructor from native
OCDraft_Modification(Handle(Draft_Modification)* nativeHandle);

// Methods PUBLIC


OCDraft_Modification(OCNaroWrappers::OCTopoDS_Shape^ S);

//! Resets on the same shape. <br>
 /*instead*/  void Clear() ;

//! Changes the basis shape and resets. <br>
 /*instead*/  void Init(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Adds  the  face  F    and propagates    the  draft <br>
//!          modification to  its  neighbour faces if they  are <br>
//!          tangent. If an error occurs, will return False and <br>
//!          ProblematicShape  will  return the "bad" face. <br>
 /*instead*/  System::Boolean Add(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCgp_Dir^ Direction, Standard_Real Angle, OCNaroWrappers::OCgp_Pln^ NeutralPlane, System::Boolean Flag) ;

//! Removes the face F and the neighbour faces if they <br>
//!          are tangent.   It will be  necessary to  call this <br>
//!          method if  the  method Add returns Standard_False, <br>
//!          to unset ProblematicFace. <br>
 /*instead*/  void Remove(OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Performs the draft angle modification and sets the <br>
//!          value returned by the method  IsDone.  If an error <br>
//!          occurs, IsDone  will return Standard_False, and an <br>
//!          error status will  be  given by the  method Error, <br>
//!          and the  shape on which  the problem appeared will <br>
//!          be given by ProblematicShape <br>
 /*instead*/  void Perform() ;

//! Returns  True  if   Perform has  been  succesfully <br>
//!          called. Otherwise more information can be obtained <br>
//!          using the methods Error() and ProblematicShape(). <br>
 /*instead*/  System::Boolean IsDone() ;


 /*instead*/  OCDraft_ErrorStatus Error() ;

//! Returns the shape (Face,  Edge or Vertex) on which <br>
//!          an error occured. <br>
 /*instead*/  OCTopoDS_Shape^ ProblematicShape() ;

//! Returns all  the  faces   which  have been   added <br>
//!          together with the face <F>. <br>
//! <br>
 /*instead*/  OCTopTools_ListOfShape^ ConnectedFaces(OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Returns all the faces  on which a modification has <br>
//!          been given. <br>
//! <br>
 /*instead*/  OCTopTools_ListOfShape^ ModifiedFaces() ;

//! Returns Standard_True if   the face <F>  has  been <br>
//!          modified.  In this case,  <S> is the new geometric <br>
//!          support of the  face,  <L> the new  location,<Tol> <br>
//!          the   new tolerance.<RevWires>  has  to  be set to <br>
//!          Standard_True when   the modification reverses the <br>
//!          normal   of  the  surface.(the  wires   have to be <br>
//!          reversed).  <RevFace>    has    to  be   set    to <br>
//!          Standard_True  if  the orientation of the modified <br>
//!          face changes in  the shells which contain it. Here <br>
//!          it will be set to Standard_False. <br>
//! <br>
//!          Otherwise, returns Standard_False, and <S>,   <L>, <br>
//!          <Tol> , <RevWires> ,<RevFace> are not  significant. <br>
 /*instead*/  System::Boolean NewSurface(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCGeom_Surface^ S, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real& Tol, System::Boolean& RevWires, System::Boolean& RevFace) ;

//! Returns Standard_True  if  the edge  <E> has  been <br>
//!          modified.  In this case,  <C> is the new geometric <br>
//!          support of the  edge, <L> the  new location, <Tol> <br>
//!          the         new    tolerance.   Otherwise, returns <br>
//!          Standard_False,    and  <C>,  <L>,   <Tol> are not <br>
//!          significant. <br>
 /*instead*/  System::Boolean NewCurve(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCGeom_Curve^ C, OCNaroWrappers::OCTopLoc_Location^ L, Standard_Real& Tol) ;

//! Returns  Standard_True if the  vertex <V> has been <br>
//!          modified.  In this  case, <P> is the new geometric <br>
//!          support of the vertex,   <Tol> the new  tolerance. <br>
//!          Otherwise, returns Standard_False, and <P>,  <Tol> <br>
//!          are not significant. <br>
 /*instead*/  System::Boolean NewPoint(OCNaroWrappers::OCTopoDS_Vertex^ V, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real& Tol) ;

//! Returns Standard_True if  the edge  <E> has a  new <br>
//!          curve on surface on the face <F>.In this case, <C> <br>
//!          is the new geometric support of  the edge, <L> the <br>
//!          new location, <Tol> the new tolerance. <br>
//! <br>
//!          Otherwise, returns  Standard_False, and <C>,  <L>, <br>
//!          <Tol> are not significant. <br>
//! <br>
//!          <NewE> is the new  edge created from  <E>.  <NewF> <br>
//!          is the new face created from <F>. They may be usefull. <br>
 /*instead*/  System::Boolean NewCurve2d(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Edge^ NewE, OCNaroWrappers::OCTopoDS_Face^ NewF, OCNaroWrappers::OCGeom2d_Curve^ C, Standard_Real& Tol) ;

//! Returns Standard_True if the Vertex  <V> has a new <br>
//!          parameter on the  edge <E>. In  this case,  <P> is <br>
//!          the parameter,    <Tol>  the     new    tolerance. <br>
//!          Otherwise, returns Standard_False, and <P>,  <Tol> <br>
//!          are not significant. <br>
 /*instead*/  System::Boolean NewParameter(OCNaroWrappers::OCTopoDS_Vertex^ V, OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real& P, Standard_Real& Tol) ;

//! Returns the  continuity of  <NewE> between <NewF1> <br>
//!          and <NewF2>. <br>
//! <br>
//!          <NewE> is the new  edge created from <E>.  <NewF1> <br>
//!          (resp. <NewF2>) is the new  face created from <F1> <br>
//!          (resp. <F2>). <br>
 /*instead*/  OCGeomAbs_Shape Continuity(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCNaroWrappers::OCTopoDS_Edge^ NewE, OCNaroWrappers::OCTopoDS_Face^ NewF1, OCNaroWrappers::OCTopoDS_Face^ NewF2) ;

~OCDraft_Modification()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
