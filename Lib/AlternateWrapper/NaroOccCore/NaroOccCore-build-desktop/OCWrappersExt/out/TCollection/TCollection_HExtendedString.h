// File generated by CPPExt (Transient)
//
#ifndef _TCollection_HExtendedString_OCWrappers_HeaderFile
#define _TCollection_HExtendedString_OCWrappers_HeaderFile

// include the wrapped class
#include <TCollection_HExtendedString.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "TCollection_ExtendedString.h"


namespace OCNaroWrappers
{

ref class OCTCollection_ExtendedString;
ref class OCTCollection_HAsciiString;


//! A variable-length sequence of "extended" <br>
//! (UNICODE) characters (16-bit character <br>
//! type). It provides editing operations with <br>
//! built-in memory management to make <br>
//! ExtendedString objects easier to use than <br>
//! ordinary extended character arrays. <br>
//! HExtendedString objects are handles to strings. <br>
//! - HExtendedString strings may be shared by several objects. <br>
//! - You may use an ExtendedString object to get the actual string. <br>
//!   Note: HExtendedString objects use an <br>
//! ExtendedString string as a field. <br>
public ref class OCTCollection_HExtendedString : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCTCollection_HExtendedString(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCTCollection_HExtendedString(Handle(TCollection_HExtendedString)* nativeHandle);

// Methods PUBLIC

//! Initializes a HExtendedString to an empty ExtendedString. <br>
OCTCollection_HExtendedString();

//! Initializes a HExtendedString with a CString. <br>
OCTCollection_HExtendedString(System::String^ message);

//! Initializes a HExtendedString with an ExtString. <br>
OCTCollection_HExtendedString(System::String^ message);

//! Initializes a HExtendedString with a single character. <br>
OCTCollection_HExtendedString(Standard_ExtCharacter aChar);

//! Initializes a HExtendedString with <length> space allocated. <br>
//! and filled with <filler>.This is usefull for buffers. <br>
OCTCollection_HExtendedString(Standard_Integer length, Standard_ExtCharacter filler);

//! Initializes a HExtendedString with a HExtendedString. <br>
OCTCollection_HExtendedString(OCNaroWrappers::OCTCollection_ExtendedString^ aString);

//! Initializes a HExtendedString with an HAsciiString. <br>
OCTCollection_HExtendedString(OCNaroWrappers::OCTCollection_HAsciiString^ aString);

//! Initializes a HExtendedString with a HExtendedString. <br>
OCTCollection_HExtendedString(OCNaroWrappers::OCTCollection_HExtendedString^ aString);

//! Appends <other>  to me. <br>
 /*instead*/  void AssignCat(OCNaroWrappers::OCTCollection_HExtendedString^ other) ;

//! Returns a string appending <other>  to me. <br>
 /*instead*/  OCTCollection_HExtendedString^ Cat(OCNaroWrappers::OCTCollection_HExtendedString^ other) ;

//! Substitutes all the characters equal to aChar by NewChar <br>
//! in the string <me>. <br>
 /*instead*/  void ChangeAll(Standard_ExtCharacter aChar, Standard_ExtCharacter NewChar) ;

//! Removes all characters contained in <me>. <br>
//! This produces an empty ExtendedString. <br>
 /*instead*/  void Clear() ;

//!  Returns True if the string <me> contains zero character <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! Insert a ExtCharacter at position <where>. <br>
//! Example: <br>
//!    aString contains "hy not ?" <br>
//!    aString.Insert(1,'W'); gives "Why not ?" <br>
//!    aString contains "Wh" <br>
//!    aString.Insert(3,'y'); gives "Why" <br>
//!    aString contains "Way" <br>
//!    aString.Insert(2,'h'); gives "Why" <br>
 /*instead*/  void Insert(Standard_Integer where, Standard_ExtCharacter what) ;

//! Insert a HExtendedString at position <where>. <br>
 /*instead*/  void Insert(Standard_Integer where, OCNaroWrappers::OCTCollection_HExtendedString^ what) ;

//! Returns TRUE if <me> is less than <other>. <br>
 /*instead*/  System::Boolean IsLess(OCNaroWrappers::OCTCollection_HExtendedString^ other) ;

//! Returns TRUE if <me> is greater than <other>. <br>
 /*instead*/  System::Boolean IsGreater(OCNaroWrappers::OCTCollection_HExtendedString^ other) ;

//! Returns True if the string contains only "Ascii Range"  characters <br>
 /*instead*/  System::Boolean IsAscii() ;

//! Returns number of characters in <me>. <br>
//! This is the same functionality as 'strlen' in C. <br>
 /*instead*/  Standard_Integer Length() ;

//! Erases <ahowmany> characters from position <where>, <br>
//! <where> included. <br>
//! Example: <br>
//!   aString contains "Hello" <br>
//!   aString.Erase(2,2) erases 2 characters from position 1 <br>
//!   This gives "Hlo". <br>
 /*instead*/  void Remove(Standard_Integer where, Standard_Integer ahowmany) ;

//! Removes every <what> characters from <me>. <br>
 /*instead*/  void RemoveAll(Standard_ExtCharacter what) ;

//! Replaces one character in the string at position <where>. <br>
//! If <where> is less than zero or greater than the length of <me> <br>
//! an exception is raised. <br>
//! Example: <br>
//!   aString contains "Garbake" <br>
//!   astring.Replace(6,'g')  gives <me> = "Garbage" <br>
 /*instead*/  void SetValue(Standard_Integer where, Standard_ExtCharacter what) ;

//! Replaces a part of <me> by another string. <br>
 /*instead*/  void SetValue(Standard_Integer where, OCNaroWrappers::OCTCollection_HExtendedString^ what) ;

//! Splits a ExtendedString into two sub-strings. <br>
//! Example: <br>
//!   aString contains "abcdefg" <br>
//!   aString.Split(3) gives <me> = "abc" and returns "defg" <br>
 /*instead*/  OCTCollection_HExtendedString^ Split(Standard_Integer where) ;

//! Searches a String in <me> from the beginning <br>
//! and returns position of first item <what> matching. <br>
//! It returns -1 if not found. <br>
 /*instead*/  Standard_Integer Search(OCNaroWrappers::OCTCollection_HExtendedString^ what) ;

//! Searches a ExtendedString in another ExtendedString from the end <br>
//! and returns position of first item <what> matching. <br>
//! It returns -1 if not found. <br>
 /*instead*/  Standard_Integer SearchFromEnd(OCNaroWrappers::OCTCollection_HExtendedString^ what) ;

//! Returns pointer to ExtString <br>
 /*instead*/  System::String^ ToExtString() ;

//! Extracts <whichone> token from <me>. <br>
//! By default, the <separators> is set to space and tabulation. <br>
//! By default, the token extracted is the first one (whichone = 1). <br>
//! <separators> contains all separators you need. <br>
//! If no token indexed by <whichone> is found, it returns an empty String. <br>
//! Example: <br>
//!    aString contains "This is a     message" <br>
//!    aString.Token()  returns "This" <br>
//!    aString.Token(" ",4) returns "message" <br>
//!    aString.Token(" ",2) returns "is" <br>
//!    aString.Token(" ",9) returns "" <br>
//! Other separators than space character and tabulation are allowed <br>
//!    aString contains "1234; test:message   , value" <br>
//!    aString.Token("; :,",4) returns "value" <br>
//!    aString.Token("; :,",2) returns "test" <br>
 /*instead*/  OCTCollection_HExtendedString^ Token(System::String^ separators, Standard_Integer whichone) ;

//! Truncates <me> to <ahowmany> characters. <br>
//! Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel" <br>
 /*instead*/  void Trunc(Standard_Integer ahowmany) ;

//! Returns ExtCharacter at position <where> in <me>. <br>
//! If <where> is less than zero or greater than the length of <br>
//! <me>, an exception is raised. <br>
//! Example: <br>
//!   aString contains "Hello" <br>
//!   aString.Value(2) returns 'e' <br>
 /*instead*/  Standard_ExtCharacter Value(Standard_Integer where) ;

//! Returns the field myString <br>
 /*instead*/  OCTCollection_ExtendedString^ String() ;

//! Displays <me> . <br>
 /*instead*/  void Print(Standard_OStream& astream) ;


 /*instead*/  OCTCollection_HExtendedString^ ShallowCopy() ;


 /*instead*/  void ShallowDump(Standard_OStream& s) ;


 /*instead*/  System::Boolean IsSameState(OCNaroWrappers::OCTCollection_HExtendedString^ other) ;

~OCTCollection_HExtendedString()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
