// File generated by CPPExt (MPV)
//
#ifndef _TCollection_ExtendedString_OCWrappers_HeaderFile
#define _TCollection_ExtendedString_OCWrappers_HeaderFile

// include native header
#include <TCollection_ExtendedString.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;


//! A variable-length sequence of "extended" <br>
//! (UNICODE) characters (16-bit character type). It <br>
//! provides editing operations with built-in memory <br>
//! management to make ExtendedString objects <br>
//! easier to use than ordinary extended character arrays. <br>
//! ExtendedString objects follow "value <br>
//! semantics", that is, they are the actual strings, <br>
//! not handles to strings, and are copied through <br>
//! assignment. You may use HExtendedString <br>
//! objects to get handles to strings. <br>
public ref class OCTCollection_ExtendedString  {

protected:
  TCollection_ExtendedString* nativeHandle;
  OCTCollection_ExtendedString(OCDummy^) {};

public:
  property TCollection_ExtendedString* Handle
  {
    TCollection_ExtendedString* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTCollection_ExtendedString(TCollection_ExtendedString* nativeHandle);

// Methods PUBLIC

//! Initializes a ExtendedString to an empty ExtendedString. <br>
OCTCollection_ExtendedString();

//! Creation by converting a CString to an extended string. <br>
OCTCollection_ExtendedString(System::String^ astring, System::Boolean isMultiByte);

//! Creation by converting an ExtString to an extended string. <br>
OCTCollection_ExtendedString(System::String^ astring);

//! Initializes a AsciiString with a single character. <br>
OCTCollection_ExtendedString(Standard_Character aChar);

//! Initializes a ExtendedString with a single character. <br>
OCTCollection_ExtendedString(Standard_ExtCharacter aChar);

//! Initializes a ExtendedString with <length> space allocated. <br>
//! and filled with <filler>.This is useful for buffers. <br>
OCTCollection_ExtendedString(Standard_Integer length, Standard_ExtCharacter filler);

//! Initializes an ExtendedString with an integer value <br>
OCTCollection_ExtendedString(Standard_Integer value);

//! Initializes an ExtendedString with a real value <br>
OCTCollection_ExtendedString(Standard_Real value);

//! Initializes a ExtendedString with another ExtendedString. <br>
OCTCollection_ExtendedString(OCNaroWrappers::OCTCollection_ExtendedString^ astring);

//! Creation by converting a normal Ascii string to an extended string. <br>
OCTCollection_ExtendedString(OCNaroWrappers::OCTCollection_AsciiString^ astring);

//!  Appends the other extended string to this extended string. <br>
//! Note that this method is an alias of operator +=. <br>
//! Example: aString += anotherString <br>
 /*instead*/  void AssignCat(OCNaroWrappers::OCTCollection_ExtendedString^ other) ;

//! Appends <other> to me. <br>
 /*instead*/  OCTCollection_ExtendedString^ Cat(OCNaroWrappers::OCTCollection_ExtendedString^ other) ;

//! Substitutes all the characters equal to aChar by NewChar <br>
//! in the ExtendedString <me>. <br>
//! The substitution can be case sensitive. <br>
//! If you don't use default case sensitive, no matter wether aChar <br>
//! is uppercase or not. <br>
 /*instead*/  void ChangeAll(Standard_ExtCharacter aChar, Standard_ExtCharacter NewChar) ;

//! Removes all characters contained in <me>. <br>
//! This produces an empty ExtendedString. <br>
 /*instead*/  void Clear() ;

//! Copy <fromwhere> to <me>. <br>
//! Used as operator = <br>
 /*instead*/  void Copy(OCNaroWrappers::OCTCollection_ExtendedString^ fromwhere) ;

//! Insert a Character at position <where>. <br>
 /*instead*/  void Insert(Standard_Integer where, Standard_ExtCharacter what) ;

//! Insert a ExtendedString at position <where>. <br>
 /*instead*/  void Insert(Standard_Integer where, OCNaroWrappers::OCTCollection_ExtendedString^ what) ;

//! Returns true if the characters in this extended <br>
//! string are identical to the characters in the other extended string. <br>
//! Note that this method is an alias of operator == <br>
 /*instead*/  System::Boolean IsEqual(System::String^ other) ;

//! Returns true if the characters in this extended <br>
//! string are identical to the characters in the other extended string. <br>
//! Note that this method is an alias of operator == <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCTCollection_ExtendedString^ other) ;

//! Returns true if there are differences between the <br>
//! characters in this extended string and the other extended string. <br>
//! Note that this method is an alias of operator !=. <br>
 /*instead*/  System::Boolean IsDifferent(System::String^ other) ;

//! Returns true if there are differences between the <br>
//! characters in this extended string and the other extended string. <br>
//! Note that this method is an alias of operator !=. <br>
 /*instead*/  System::Boolean IsDifferent(OCNaroWrappers::OCTCollection_ExtendedString^ other) ;

//! Returns TRUE if <me> is less than <other>. <br>
 /*instead*/  System::Boolean IsLess(System::String^ other) ;

//! Returns TRUE if <me> is less than <other>. <br>
 /*instead*/  System::Boolean IsLess(OCNaroWrappers::OCTCollection_ExtendedString^ other) ;

//! Returns TRUE if <me> is greater than <other>. <br>
 /*instead*/  System::Boolean IsGreater(System::String^ other) ;

//! Returns TRUE if <me> is greater than <other>. <br>
 /*instead*/  System::Boolean IsGreater(OCNaroWrappers::OCTCollection_ExtendedString^ other) ;

//! Returns True if the ExtendedString contains only <br>
//! "Ascii Range" characters . <br>
 /*instead*/  System::Boolean IsAscii() ;

//! Returns number of characters in <me>. <br>
//! This is the same functionality as 'strlen' in C. <br>
 /*instead*/  Standard_Integer Length() ;

//! Displays <me> . <br>
 /*instead*/  void Print(Standard_OStream& astream) ;

//! Removes every <what> characters from <me>. <br>
 /*instead*/  void RemoveAll(Standard_ExtCharacter what) ;

//! Erases <ahowmany> characters from position <where>,<where> included. <br>
 /*instead*/  void Remove(Standard_Integer where, Standard_Integer ahowmany) ;

//! Searches a ExtendedString in <me> from the beginning <br>
//! and returns position of first item <what> matching. <br>
//! it returns -1 if not found. <br>
 /*instead*/  Standard_Integer Search(OCNaroWrappers::OCTCollection_ExtendedString^ what) ;

//! Searches a ExtendedString in another ExtendedString from the <br>
//! end and returns position of first item <what> matching. <br>
//! it returns -1 if not found. <br>
 /*instead*/  Standard_Integer SearchFromEnd(OCNaroWrappers::OCTCollection_ExtendedString^ what) ;

//! Replaces one character in the ExtendedString at position <where>. <br>
//! If <where> is less than zero or greater than the length of <me> <br>
//! an exception is raised. <br>
 /*instead*/  void SetValue(Standard_Integer where, Standard_ExtCharacter what) ;

//! Replaces a part of <me> by another ExtendedString see above. <br>
 /*instead*/  void SetValue(Standard_Integer where, OCNaroWrappers::OCTCollection_ExtendedString^ what) ;

//! Splits this extended string into two sub-strings at position where. <br>
//! -   The second sub-string (from position <br>
//!   where + 1 of this string to the end) is <br>
//!   returned in a new extended string. <br>
//! -   this extended string is modified: its last <br>
//!   characters are removed, it becomes equal to <br>
//!   the first sub-string (from the first character to position where). <br>
//! Example: <br>
//!   aString contains "abcdefg" <br>
//!   aString.Split(3) gives <me> = "abc" and returns "defg" <br>
 /*instead*/  OCTCollection_ExtendedString^ Split(Standard_Integer where) ;

//! Extracts <whichone> token from <me>. <br>
//! By default, the <separators> is set to space and tabulation. <br>
//! By default, the token extracted is the first one (whichone = 1). <br>
//! <separators> contains all separators you need. <br>
//! If no token indexed by <whichone> is found, it returns an empty AsciiString. <br>
//! Example: <br>
//!    aString contains "This is a     message" <br>
//!    aString.Token()  returns "This" <br>
//!    aString.Token(" ",4) returns "message" <br>
//!    aString.Token(" ",2) returns "is" <br>
//!    aString.Token(" ",9) returns "" <br>
//! Other separators than space character and tabulation are allowed : <br>
//!    aString contains "1234; test:message   , value" <br>
//!    aString.Token("; :,",4) returns "value" <br>
//!    aString.Token("; :,",2) returns "test" <br>
 /*instead*/  OCTCollection_ExtendedString^ Token(System::String^ separators, Standard_Integer whichone) ;

//! Returns pointer to ExtString <br>
 /*instead*/  System::String^ ToExtString() ;

//! Truncates <me> to <ahowmany> characters. <br>
//! Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel" <br>
//!   Exceptions <br>
//! Standard_OutOfRange if ahowmany is greater <br>
//! than the length of this string. <br>
 /*instead*/  void Trunc(Standard_Integer ahowmany) ;

//! Returns character at position <where> in <me>. <br>
//! If <where> is less than zero or greater than the lenght of <br>
//! <me>, an exception is raised. <br>
//! Example: <br>
//!   aString contains "Hello" <br>
//!   aString.Value(2) returns 'e' <br>
//! Exceptions <br>
//! Standard_OutOfRange if where lies outside <br>
//! the bounds of this extended string. <br>
 /*instead*/  Standard_ExtCharacter Value(Standard_Integer where) ;

//! Returns a hashed value for the extended string <br>
//! astring within the range 1..Upper. <br>
//! Note: if astring is ASCII, the computed value is <br>
//! the same as the value computed with the HashCode function on a <br>
//! TCollection_AsciiString string composed with equivalent ASCII characters <br>
static /*instead*/  Standard_Integer HashCode(OCNaroWrappers::OCTCollection_ExtendedString^ astring, Standard_Integer Upper) ;

//! Returns true if the characters in this extended <br>
//! string are identical to the characters in the other extended string. <br>
//! Note that this method is an alias of operator ==. <br>
static /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCTCollection_ExtendedString^ string1, OCNaroWrappers::OCTCollection_ExtendedString^ string2) ;

//! Converts the internal <mystring> to UTF8 coding and <br>
//!          returns length of the out CString. A memory for the <br>
//!          <theCString> should be allocated before call! <br>
 /*instead*/  Standard_Integer ToUTF8CString(Standard_PCharacter& theCString) ;

//! Returns expected CString length in UTF8 coding. <br>
//!          It can be used for  memory  calculation  before converting <br>
//!          to CString containing symbols in UTF8 coding. <br>
 /*instead*/  Standard_Integer LengthOfCString() ;

~OCTCollection_ExtendedString()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
