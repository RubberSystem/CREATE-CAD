// File generated by CPPExt (Transient)
//
#ifndef _TCollection_HAsciiString_OCWrappers_HeaderFile
#define _TCollection_HAsciiString_OCWrappers_HeaderFile

// include the wrapped class
#include <TCollection_HAsciiString.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;
ref class OCTCollection_HExtendedString;


//! A variable-length sequence of ASCII characters <br>
//! (normal 8-bit character type). It provides editing <br>
//! operations with built-in memory management to <br>
//! make HAsciiString objects easier to use than ordinary character arrays. <br>
//! HAsciiString objects are handles to strings. <br>
//! -   HAsciiString strings may be shared by several objects. <br>
//! -   You may use an AsciiString object to get the actual string. <br>
//! Note: HAsciiString objects use an AsciiString string as a field. <br>
public ref class OCTCollection_HAsciiString : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCTCollection_HAsciiString(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCTCollection_HAsciiString(Handle(TCollection_HAsciiString)* nativeHandle);

// Methods PUBLIC

//! Initializes a HAsciiString to an empty AsciiString. <br>
OCTCollection_HAsciiString();

//! Initializes a HAsciiString with a CString. <br>
OCTCollection_HAsciiString(System::String^ message);

//! Initializes a HAsciiString with a single character. <br>
OCTCollection_HAsciiString(Standard_Character aChar);

//! Initializes a HAsciiString with <length> space allocated. <br>
//! and filled with <filler>.This is useful for buffers. <br>
OCTCollection_HAsciiString(Standard_Integer length, Standard_Character filler);

//! Initializes a HAsciiString with an integer value <br>
OCTCollection_HAsciiString(Standard_Integer value);

//! Initializes a HAsciiString with a real value <br>
OCTCollection_HAsciiString(Standard_Real value);

//! Initializes a HAsciiString with a HAsciiString. <br>
OCTCollection_HAsciiString(OCNaroWrappers::OCTCollection_AsciiString^ aString);

//! Initializes a HAsciiString with a HAsciiString. <br>
OCTCollection_HAsciiString(OCNaroWrappers::OCTCollection_HAsciiString^ aString);

//! Initializes a HAsciiString with a HAsciiString. <br>
//!          If replaceNonAscii is non-null charecter, it will be used <br>
//!          in place of any non-ascii character found in the source string. <br>
//!          Otherwise, raises OutOfRange exception if at least one character <br>
//!          in the source string is not in the "Ascii range". <br>
OCTCollection_HAsciiString(OCNaroWrappers::OCTCollection_HExtendedString^ aString, Standard_Character replaceNonAscii);

//! Appends <other>  to me. <br>
 /*instead*/  void AssignCat(System::String^ other) ;

//! Appends <other>  to me. <br>
//!  Example:  aString = aString + anotherString <br>
 /*instead*/  void AssignCat(OCNaroWrappers::OCTCollection_HAsciiString^ other) ;

//! Converts the first character into its corresponding <br>
//! upper-case character and the other characters into lowercase. <br>
//!  Example: <br>
//! before <br>
//!   me = "hellO " <br>
//! after <br>
//!   me = "Hello " <br>
 /*instead*/  void Capitalize() ;

//!  Creates a new string by concatenation of this <br>
//! ASCII string and the other ASCII string. <br>
//!  Example: <br>
//!    aString = aString + anotherString <br>
//!    aString = aString + "Dummy" <br>
//!    aString contains "I say " <br>
//!    aString = aString + "Hello " + "Dolly" <br>
//! gives "I say Hello Dolly" <br>
//!  Warning: To catenate more than one CString, you must put a String before. <br>
//! So the following example is WRONG ! <br>
//!      aString = "Hello " + "Dolly"  THIS IS NOT ALLOWED <br>
//! This rule is applicable to AssignCat (operator +=) too. <br>
 /*instead*/  OCTCollection_HAsciiString^ Cat(System::String^ other) ;

//! Creates a new string by concatenation of this <br>
//! ASCII string and the other ASCII string. <br>
//!  Example:  aString = aString + anotherString <br>
 /*instead*/  OCTCollection_HAsciiString^ Cat(OCNaroWrappers::OCTCollection_HAsciiString^ other) ;

//! Modifies this ASCII string so that its length <br>
//! becomes equal to Width and the new characters <br>
//! are equal to Filler. New characters are added <br>
//! both at the beginning and at the end of this string. <br>
//! If Width is less than the length of this ASCII string, nothing happens. <br>
//! Example <br>
//! Handle(TCollection_HAsciiString) <br>
//! myAlphabet <br>
//!    = new <br>
//! TCollection_HAsciiString <br>
//! ("abcdef"); <br>
//! myAlphabet->Center(9,' '); <br>
//! assert ( !strcmp( <br>
//! myAlphabet->ToCString(), <br>
//!        " abcdef ") ); <br>
 /*instead*/  void Center(Standard_Integer Width, Standard_Character Filler) ;

//! Replaces all characters equal to aChar by <br>
//! NewChar in this ASCII string. The substitution is <br>
//! case sensitive if CaseSensitive is true (default value). <br>
//! If you do not use the default case sensitive <br>
//! option, it does not matter whether aChar is upper-case or not. <br>
//! Example <br>
//! Handle(TCollection_HAsciiString) <br>
//! myMistake = new <br>
//! TCollection_HAsciiString <br>
//! ("Hather"); <br>
//! myMistake->ChangeAll('H','F'); <br>
//! assert ( !strcmp( <br>
//! myMistake->ToCString(), <br>
//! "Father") ); <br>
 /*instead*/  void ChangeAll(Standard_Character aChar, Standard_Character NewChar, System::Boolean CaseSensitive) ;

//! Removes all characters contained in <me>. <br>
//! This produces an empty HAsciiString. <br>
 /*instead*/  void Clear() ;

//! Returns the index of the first character of <me> that is <br>
//! present in <Set>. <br>
//! The search begins to the index FromIndex and ends to the <br>
//! the index ToIndex. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range <br>
//!  Example: <br>
//! before <br>
//!   me = "aabAcAa", S = "Aa", FromIndex = 1, Toindex = 7 <br>
//! after <br>
//!   me = "aabAcAa" <br>
//! returns <br>
//!   1 <br>
 /*instead*/  Standard_Integer FirstLocationInSet(OCNaroWrappers::OCTCollection_HAsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Returns the index of the first character of <me> <br>
//! that is not present in the set <Set>. <br>
//! The search begins to the index FromIndex and ends to the <br>
//! the index ToIndex in <me>. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
//!  Example: <br>
//! before <br>
//!   me = "aabAcAa", S = "Aa", FromIndex = 1, Toindex = 7 <br>
//! after <br>
//!   me = "aabAcAa" <br>
//! returns <br>
//!   3 <br>
 /*instead*/  Standard_Integer FirstLocationNotInSet(OCNaroWrappers::OCTCollection_HAsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Insert a Character at position <where>. <br>
//!  Example: <br>
//!    aString contains "hy not ?" <br>
//!    aString.Insert(1,'W'); gives "Why not ?" <br>
//!    aString contains "Wh" <br>
//!    aString.Insert(3,'y'); gives "Why" <br>
//!    aString contains "Way" <br>
//!    aString.Insert(2,'h'); gives "Why" <br>
 /*instead*/  void Insert(Standard_Integer where, Standard_Character what) ;

//! Insert a HAsciiString at position <where>. <br>
 /*instead*/  void Insert(Standard_Integer where, System::String^ what) ;

//! Insert a HAsciiString at position <where>. <br>
 /*instead*/  void Insert(Standard_Integer where, OCNaroWrappers::OCTCollection_HAsciiString^ what) ;

//! Inserts the other ASCII string a after a specific index in the string <me> <br>
//!  Example: <br>
//! before <br>
//!   me = "cde" , Index = 0 , other = "ab" <br>
//! after <br>
//!   me = "abcde" , other = "ab" <br>
 /*instead*/  void InsertAfter(Standard_Integer Index, OCNaroWrappers::OCTCollection_HAsciiString^ other) ;

//! Inserts the other ASCII string a before a specific index in the string <me> <br>
//! Raises an exception if Index is out of bounds <br>
//!  Example: <br>
//! before <br>
//!   me = "cde" , Index = 1 , other = "ab" <br>
//! after <br>
//!   me = "abcde" , other = "ab" <br>
 /*instead*/  void InsertBefore(Standard_Integer Index, OCNaroWrappers::OCTCollection_HAsciiString^ other) ;

//!  Returns True if the string <me> contains zero character <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! Returns TRUE if <me> is 'ASCII' less than <other>. <br>
 /*instead*/  System::Boolean IsLess(OCNaroWrappers::OCTCollection_HAsciiString^ other) ;

//! Returns TRUE if <me> is 'ASCII' greater than <other>. <br>
 /*instead*/  System::Boolean IsGreater(OCNaroWrappers::OCTCollection_HAsciiString^ other) ;

//! Converts a HAsciiString containing a numeric expression to <br>
//! an Integer. <br>
//!  Example: "215" returns 215. <br>
 /*instead*/  Standard_Integer IntegerValue() ;

//! Returns True if the string contains an integer value. <br>
 /*instead*/  System::Boolean IsIntegerValue() ;

//! Returns True if the string contains a real value. <br>
 /*instead*/  System::Boolean IsRealValue() ;

//! Returns True if the string contains only ASCII characters <br>
//! between ' ' and '~'. <br>
//! This means no control character and no extended ASCII code. <br>
 /*instead*/  System::Boolean IsAscii() ;

//! Returns True if the string S not contains same characters than <br>
//! the string <me>. <br>
 /*instead*/  System::Boolean IsDifferent(OCNaroWrappers::OCTCollection_HAsciiString^ S) ;

//! Returns True if the string S contains same characters than the <br>
//! string <me>. <br>
 /*instead*/  System::Boolean IsSameString(OCNaroWrappers::OCTCollection_HAsciiString^ S) ;

//! Returns True if the string S contains same characters than the <br>
//! string <me>. <br>
 /*instead*/  System::Boolean IsSameString(OCNaroWrappers::OCTCollection_HAsciiString^ S, System::Boolean CaseSensitive) ;

//! Removes all space characters in the begining of the string <br>
 /*instead*/  void LeftAdjust() ;

//! Left justify. <br>
//! Length becomes equal to Width and the new characters are <br>
//! equal to Filler <br>
//! if Width < Length nothing happens <br>
//! Raises an exception if Width is less than zero <br>
//!  Example: <br>
//! before <br>
//!   me = "abcdef" , Width = 9 , Filler = ' ' <br>
//! after <br>
//!   me = "abcdef   " <br>
 /*instead*/  void LeftJustify(Standard_Integer Width, Standard_Character Filler) ;

//! Returns number of characters in <me>. <br>
//! This is the same functionality as 'strlen' in C. <br>
 /*instead*/  Standard_Integer Length() ;

//! returns an index in the string <me> of the first occurence <br>
//! of the string S in the string <me> from the starting index <br>
//! FromIndex to the ending index ToIndex <br>
//! returns zero if failure <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
//!  Example: <br>
//! before <br>
//!   me = "aabAaAa", S = "Aa", FromIndex = 1, ToIndex = 7 <br>
//! after <br>
//!   me = "aabAaAa" <br>
//! returns <br>
//!   4 <br>
 /*instead*/  Standard_Integer Location(OCNaroWrappers::OCTCollection_HAsciiString^ other, Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Returns the index of the nth occurence of the character C <br>
//! in the string <me> from the starting index FromIndex to the <br>
//! ending index ToIndex. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range <br>
//!  Example: <br>
//! before <br>
//!   me = "aabAa", N = 3, C = 'a', FromIndex = 1, ToIndex = 5 <br>
//! after <br>
//!   me = "aabAa" <br>
//! returns 5 <br>
 /*instead*/  Standard_Integer Location(Standard_Integer N, Standard_Character C, Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Converts <me> to its lower-case equivalent. <br>
 /*instead*/  void LowerCase() ;

//! Inserts the other string at the begining of the string <me> <br>
//!  Example: <br>
//! before <br>
//!   me = "cde" , S = "ab" <br>
//! after <br>
//!   me = "abcde" , S = "ab" <br>
 /*instead*/  void Prepend(OCNaroWrappers::OCTCollection_HAsciiString^ other) ;

//! Prints this string on the stream <astream>. <br>
 /*instead*/  void Print(Standard_OStream& astream) ;

//! Converts a string containing a numeric expression to a Real. <br>
//!  Example: <br>
//!  "215" returns 215.0. <br>
//!  "3.14159267" returns 3.14159267. <br>
 /*instead*/  Standard_Real RealValue() ;

//! Remove all the occurences of the character C in the string <br>
//!  Example: <br>
//! before <br>
//!   me = "HellLLo", C = 'L' , CaseSensitive = True <br>
//! after <br>
//!   me = "Hello" <br>
 /*instead*/  void RemoveAll(Standard_Character C, System::Boolean CaseSensitive) ;

//! Removes every <what> characters from <me> <br>
 /*instead*/  void RemoveAll(Standard_Character what) ;

//! Erases <ahowmany> characters from position <where>, <br>
//! <where> included. <br>
//!  Example: <br>
//!    aString contains "Hello" <br>
//!    aString.Erase(2,2) erases 2 characters from position 1 <br>
//! This gives "Hlo". <br>
 /*instead*/  void Remove(Standard_Integer where, Standard_Integer ahowmany) ;

//! Removes all space characters at the end of the string. <br>
 /*instead*/  void RightAdjust() ;

//! Right justify. <br>
//! Length becomes equal to Width and the new characters are <br>
//! equal to Filler <br>
//! if Width < Length nothing happens <br>
//! Raises an exception if Width is less than zero <br>
//!  Example: <br>
//! before <br>
//!   me = "abcdef" , Width = 9 , Filler = ' ' <br>
//! after <br>
//!   me = "   abcdef" <br>
 /*instead*/  void RightJustify(Standard_Integer Width, Standard_Character Filler) ;

//! Searches a CString in <me> from the beginning <br>
//! and returns position of first item <what> matching. <br>
//! It returns -1 if not found. <br>
//!  Example: <br>
//!   aString contains "Sample single test" <br>
//!   aString.Search("le") returns 5 <br>
 /*instead*/  Standard_Integer Search(System::String^ what) ;

//! Searches a String in <me> from the beginning <br>
//! and returns position of first item <what> matching. <br>
//! it returns -1 if not found. <br>
 /*instead*/  Standard_Integer Search(OCNaroWrappers::OCTCollection_HAsciiString^ what) ;

//! Searches a CString in a String from the end <br>
//! and returns position of first item <what> matching. <br>
//! It returns -1 if not found. <br>
//!  Example: <br>
//! aString contains "Sample single test" <br>
//! aString.SearchFromEnd("le") returns 12 <br>
 /*instead*/  Standard_Integer SearchFromEnd(System::String^ what) ;

//! Searches a HAsciiString in another HAsciiString from the end <br>
//! and returns position of first item <what> matching. <br>
//! It returns -1 if not found. <br>
 /*instead*/  Standard_Integer SearchFromEnd(OCNaroWrappers::OCTCollection_HAsciiString^ what) ;

//! Replaces one character in the string at position <where>. <br>
//! If <where> is less than zero or greater than the length of <me> <br>
//! an exception is raised. <br>
//!  Example: <br>
//!  aString contains "Garbake" <br>
//!  astring.Replace(6,'g')  gives <me> = "Garbage" <br>
 /*instead*/  void SetValue(Standard_Integer where, Standard_Character what) ;

//! Replaces a part of <me> in the string at position <where>. <br>
//! If <where> is less than zero or greater than the length of <me> <br>
//! an exception is raised. <br>
//!  Example: <br>
//!  aString contains "Garbake" <br>
//!  astring.Replace(6,'g')  gives <me> = "Garbage" <br>
 /*instead*/  void SetValue(Standard_Integer where, System::String^ what) ;

//! Replaces a part of <me> by another string. <br>
 /*instead*/  void SetValue(Standard_Integer where, OCNaroWrappers::OCTCollection_HAsciiString^ what) ;

//! Splits a HAsciiString into two sub-strings. <br>
//!  Example: <br>
//!  aString contains "abcdefg" <br>
//!  aString.Split(3) gives <me> = "abc" and returns "defg" <br>
 /*instead*/  OCTCollection_HAsciiString^ Split(Standard_Integer where) ;

//! Creation of a sub-string of the string <me>. <br>
//! The sub-string starts to the index Fromindex and ends <br>
//! to the index ToIndex. <br>
//! Raises an exception if ToIndex or FromIndex is out of <br>
//! bounds <br>
//!  Example: <br>
//! before <br>
//!   me = "abcdefg", ToIndex=3, FromIndex=6 <br>
//! after <br>
//!   me = "abcdefg" <br>
//! returns <br>
//!   "cdef" <br>
 /*instead*/  OCTCollection_HAsciiString^ SubString(Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Returns pointer to string (char *) <br>
//! This is useful for some casual manipulations <br>
//! Because this "char *" is 'const', you can't modify its contents. <br>
 /*instead*/  System::String^ ToCString() ;

//! Extracts <whichone> token from <me>. <br>
//! By default, the <separators> is set to space and tabulation. <br>
//! By default, the token extracted is the first one (whichone = 1). <br>
//! <separators> contains all separators you need. <br>
//! If no token indexed by <whichone> is found, it returns an empty String. <br>
//!  Example: <br>
//!    aString contains "This is a     message" <br>
//!    aString.Token()  returns "This" <br>
//!    aString.Token(" ",4) returns "message" <br>
//!    aString.Token(" ",2) returns "is" <br>
//!    aString.Token(" ",9) returns "" <br>
//! Other separators than space character and tabulation are allowed <br>
//!    aString contains "1234; test:message   , value" <br>
//!    aString.Token("; :,",4) returns "value" <br>
//!    aString.Token("; :,",2) returns "test" <br>
 /*instead*/  OCTCollection_HAsciiString^ Token(System::String^ separators, Standard_Integer whichone) ;

//! Truncates <me> to <ahowmany> characters. <br>
//!  Example:  me = "Hello Dolly" -> Trunc(3) -> me = "Hel" <br>
 /*instead*/  void Trunc(Standard_Integer ahowmany) ;

//! Converts <me> to its upper-case equivalent. <br>
 /*instead*/  void UpperCase() ;

//! Length of the string ignoring all spaces (' ') and the <br>
//! control character at the end. <br>
 /*instead*/  Standard_Integer UsefullLength() ;

//! Returns character at position <where> in <me>. <br>
//! If <where> is less than zero or greater than the lenght of <br>
//! <me>, an exception is raised. <br>
//!  Example: <br>
//!   aString contains "Hello" <br>
//!   aString.Value(2) returns 'e' <br>
 /*instead*/  Standard_Character Value(Standard_Integer where) ;

//! Returns the field myString. <br>
 /*instead*/  OCTCollection_AsciiString^ String() ;


 /*instead*/  OCTCollection_HAsciiString^ ShallowCopy() ;


 /*instead*/  void ShallowDump(Standard_OStream& s) ;


 /*instead*/  System::Boolean IsSameState(OCNaroWrappers::OCTCollection_HAsciiString^ other) ;

~OCTCollection_HAsciiString()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
