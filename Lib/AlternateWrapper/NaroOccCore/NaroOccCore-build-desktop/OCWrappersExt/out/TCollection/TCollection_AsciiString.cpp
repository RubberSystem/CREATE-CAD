// File generated by CPPExt (CPP file)
//

#include "TCollection_AsciiString.h"
#include "../Converter.h"
#include "TCollection_HAsciiString.h"
#include "TCollection_ExtendedString.h"


using namespace OCNaroWrappers;

OCTCollection_AsciiString::OCTCollection_AsciiString(TCollection_AsciiString* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTCollection_AsciiString::OCTCollection_AsciiString() 
{
  nativeHandle = new TCollection_AsciiString();
}

OCTCollection_AsciiString::OCTCollection_AsciiString(System::String^ message) 
{
  nativeHandle = new TCollection_AsciiString(OCConverter::StringToStandardCString(message));
}

OCTCollection_AsciiString::OCTCollection_AsciiString(System::String^ message, Standard_Integer aLen) 
{
  nativeHandle = new TCollection_AsciiString(OCConverter::StringToStandardCString(message), aLen);
}

OCTCollection_AsciiString::OCTCollection_AsciiString(Standard_Character aChar) 
{
  nativeHandle = new TCollection_AsciiString(aChar);
}

OCTCollection_AsciiString::OCTCollection_AsciiString(Standard_Integer length, Standard_Character filler) 
{
  nativeHandle = new TCollection_AsciiString(length, filler);
}

OCTCollection_AsciiString::OCTCollection_AsciiString(Standard_Integer value) 
{
  nativeHandle = new TCollection_AsciiString(value);
}

OCTCollection_AsciiString::OCTCollection_AsciiString(Standard_Real value) 
{
  nativeHandle = new TCollection_AsciiString(value);
}

OCTCollection_AsciiString::OCTCollection_AsciiString(OCNaroWrappers::OCTCollection_AsciiString^ astring) 
{
  nativeHandle = new TCollection_AsciiString(*((TCollection_AsciiString*)astring->Handle));
}

OCTCollection_AsciiString::OCTCollection_AsciiString(OCNaroWrappers::OCTCollection_AsciiString^ astring, Standard_Character message) 
{
  nativeHandle = new TCollection_AsciiString(*((TCollection_AsciiString*)astring->Handle), message);
}

OCTCollection_AsciiString::OCTCollection_AsciiString(OCNaroWrappers::OCTCollection_AsciiString^ astring, System::String^ message) 
{
  nativeHandle = new TCollection_AsciiString(*((TCollection_AsciiString*)astring->Handle), OCConverter::StringToStandardCString(message));
}

OCTCollection_AsciiString::OCTCollection_AsciiString(OCNaroWrappers::OCTCollection_AsciiString^ astring, OCNaroWrappers::OCTCollection_AsciiString^ message) 
{
  nativeHandle = new TCollection_AsciiString(*((TCollection_AsciiString*)astring->Handle), *((TCollection_AsciiString*)message->Handle));
}

OCTCollection_AsciiString::OCTCollection_AsciiString(OCNaroWrappers::OCTCollection_ExtendedString^ astring, Standard_Character replaceNonAscii) 
{
  nativeHandle = new TCollection_AsciiString(*((TCollection_ExtendedString*)astring->Handle), replaceNonAscii);
}

 void OCTCollection_AsciiString::AssignCat(Standard_Character other)
{
  ((TCollection_AsciiString*)nativeHandle)->AssignCat(other);
}

 void OCTCollection_AsciiString::AssignCat(Standard_Integer other)
{
  ((TCollection_AsciiString*)nativeHandle)->AssignCat(other);
}

 void OCTCollection_AsciiString::AssignCat(Standard_Real other)
{
  ((TCollection_AsciiString*)nativeHandle)->AssignCat(other);
}

 void OCTCollection_AsciiString::AssignCat(System::String^ other)
{
  ((TCollection_AsciiString*)nativeHandle)->AssignCat(OCConverter::StringToStandardCString(other));
}

 void OCTCollection_AsciiString::AssignCat(OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  ((TCollection_AsciiString*)nativeHandle)->AssignCat(*((TCollection_AsciiString*)other->Handle));
}

 void OCTCollection_AsciiString::Capitalize()
{
  ((TCollection_AsciiString*)nativeHandle)->Capitalize();
}

OCTCollection_AsciiString^ OCTCollection_AsciiString::Cat(Standard_Character other)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((TCollection_AsciiString*)nativeHandle)->Cat(other);
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCTCollection_AsciiString::Cat(Standard_Integer other)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((TCollection_AsciiString*)nativeHandle)->Cat(other);
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCTCollection_AsciiString::Cat(Standard_Real other)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((TCollection_AsciiString*)nativeHandle)->Cat(other);
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCTCollection_AsciiString::Cat(System::String^ other)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((TCollection_AsciiString*)nativeHandle)->Cat(OCConverter::StringToStandardCString(other));
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCTCollection_AsciiString::Cat(OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((TCollection_AsciiString*)nativeHandle)->Cat(*((TCollection_AsciiString*)other->Handle));
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCTCollection_AsciiString::Center(Standard_Integer Width, Standard_Character Filler)
{
  ((TCollection_AsciiString*)nativeHandle)->Center(Width, Filler);
}

 void OCTCollection_AsciiString::ChangeAll(Standard_Character aChar, Standard_Character NewChar, System::Boolean CaseSensitive)
{
  ((TCollection_AsciiString*)nativeHandle)->ChangeAll(aChar, NewChar, OCConverter::BooleanToStandardBoolean(CaseSensitive));
}

 void OCTCollection_AsciiString::Clear()
{
  ((TCollection_AsciiString*)nativeHandle)->Clear();
}

 void OCTCollection_AsciiString::Copy(System::String^ fromwhere)
{
  ((TCollection_AsciiString*)nativeHandle)->Copy(OCConverter::StringToStandardCString(fromwhere));
}

 void OCTCollection_AsciiString::Copy(OCNaroWrappers::OCTCollection_AsciiString^ fromwhere)
{
  ((TCollection_AsciiString*)nativeHandle)->Copy(*((TCollection_AsciiString*)fromwhere->Handle));
}

 Standard_Integer OCTCollection_AsciiString::FirstLocationInSet(OCNaroWrappers::OCTCollection_AsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return ((TCollection_AsciiString*)nativeHandle)->FirstLocationInSet(*((TCollection_AsciiString*)Set->Handle), FromIndex, ToIndex);
}

 Standard_Integer OCTCollection_AsciiString::FirstLocationNotInSet(OCNaroWrappers::OCTCollection_AsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return ((TCollection_AsciiString*)nativeHandle)->FirstLocationNotInSet(*((TCollection_AsciiString*)Set->Handle), FromIndex, ToIndex);
}

 void OCTCollection_AsciiString::Insert(Standard_Integer where, Standard_Character what)
{
  ((TCollection_AsciiString*)nativeHandle)->Insert(where, what);
}

 void OCTCollection_AsciiString::Insert(Standard_Integer where, System::String^ what)
{
  ((TCollection_AsciiString*)nativeHandle)->Insert(where, OCConverter::StringToStandardCString(what));
}

 void OCTCollection_AsciiString::Insert(Standard_Integer where, OCNaroWrappers::OCTCollection_AsciiString^ what)
{
  ((TCollection_AsciiString*)nativeHandle)->Insert(where, *((TCollection_AsciiString*)what->Handle));
}

 void OCTCollection_AsciiString::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  ((TCollection_AsciiString*)nativeHandle)->InsertAfter(Index, *((TCollection_AsciiString*)other->Handle));
}

 void OCTCollection_AsciiString::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  ((TCollection_AsciiString*)nativeHandle)->InsertBefore(Index, *((TCollection_AsciiString*)other->Handle));
}

 System::Boolean OCTCollection_AsciiString::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsEmpty());
}

 System::Boolean OCTCollection_AsciiString::IsEqual(System::String^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsEqual(OCConverter::StringToStandardCString(other)));
}

 System::Boolean OCTCollection_AsciiString::IsEqual(OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsEqual(*((TCollection_AsciiString*)other->Handle)));
}

 System::Boolean OCTCollection_AsciiString::IsDifferent(System::String^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsDifferent(OCConverter::StringToStandardCString(other)));
}

 System::Boolean OCTCollection_AsciiString::IsDifferent(OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsDifferent(*((TCollection_AsciiString*)other->Handle)));
}

 System::Boolean OCTCollection_AsciiString::IsLess(System::String^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsLess(OCConverter::StringToStandardCString(other)));
}

 System::Boolean OCTCollection_AsciiString::IsLess(OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsLess(*((TCollection_AsciiString*)other->Handle)));
}

 System::Boolean OCTCollection_AsciiString::IsGreater(System::String^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsGreater(OCConverter::StringToStandardCString(other)));
}

 System::Boolean OCTCollection_AsciiString::IsGreater(OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsGreater(*((TCollection_AsciiString*)other->Handle)));
}

 Standard_Integer OCTCollection_AsciiString::IntegerValue()
{
  return ((TCollection_AsciiString*)nativeHandle)->IntegerValue();
}

 System::Boolean OCTCollection_AsciiString::IsIntegerValue()
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsIntegerValue());
}

 System::Boolean OCTCollection_AsciiString::IsRealValue()
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsRealValue());
}

 System::Boolean OCTCollection_AsciiString::IsAscii()
{
  return OCConverter::StandardBooleanToBoolean(((TCollection_AsciiString*)nativeHandle)->IsAscii());
}

 void OCTCollection_AsciiString::LeftAdjust()
{
  ((TCollection_AsciiString*)nativeHandle)->LeftAdjust();
}

 void OCTCollection_AsciiString::LeftJustify(Standard_Integer Width, Standard_Character Filler)
{
  ((TCollection_AsciiString*)nativeHandle)->LeftJustify(Width, Filler);
}

 Standard_Integer OCTCollection_AsciiString::Length()
{
  return ((TCollection_AsciiString*)nativeHandle)->Length();
}

 Standard_Integer OCTCollection_AsciiString::Location(OCNaroWrappers::OCTCollection_AsciiString^ other, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return ((TCollection_AsciiString*)nativeHandle)->Location(*((TCollection_AsciiString*)other->Handle), FromIndex, ToIndex);
}

 Standard_Integer OCTCollection_AsciiString::Location(Standard_Integer N, Standard_Character C, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return ((TCollection_AsciiString*)nativeHandle)->Location(N, C, FromIndex, ToIndex);
}

 void OCTCollection_AsciiString::LowerCase()
{
  ((TCollection_AsciiString*)nativeHandle)->LowerCase();
}

 void OCTCollection_AsciiString::Prepend(OCNaroWrappers::OCTCollection_AsciiString^ other)
{
  ((TCollection_AsciiString*)nativeHandle)->Prepend(*((TCollection_AsciiString*)other->Handle));
}

 void OCTCollection_AsciiString::Print(Standard_OStream& astream)
{
  ((TCollection_AsciiString*)nativeHandle)->Print(astream);
}

 void OCTCollection_AsciiString::Read(Standard_IStream& astream)
{
  ((TCollection_AsciiString*)nativeHandle)->Read(astream);
}

 Standard_Real OCTCollection_AsciiString::RealValue()
{
  return ((TCollection_AsciiString*)nativeHandle)->RealValue();
}

 void OCTCollection_AsciiString::RemoveAll(Standard_Character C, System::Boolean CaseSensitive)
{
  ((TCollection_AsciiString*)nativeHandle)->RemoveAll(C, OCConverter::BooleanToStandardBoolean(CaseSensitive));
}

 void OCTCollection_AsciiString::RemoveAll(Standard_Character what)
{
  ((TCollection_AsciiString*)nativeHandle)->RemoveAll(what);
}

 void OCTCollection_AsciiString::Remove(Standard_Integer where, Standard_Integer ahowmany)
{
  ((TCollection_AsciiString*)nativeHandle)->Remove(where, ahowmany);
}

 void OCTCollection_AsciiString::RightAdjust()
{
  ((TCollection_AsciiString*)nativeHandle)->RightAdjust();
}

 void OCTCollection_AsciiString::RightJustify(Standard_Integer Width, Standard_Character Filler)
{
  ((TCollection_AsciiString*)nativeHandle)->RightJustify(Width, Filler);
}

 Standard_Integer OCTCollection_AsciiString::Search(System::String^ what)
{
  return ((TCollection_AsciiString*)nativeHandle)->Search(OCConverter::StringToStandardCString(what));
}

 Standard_Integer OCTCollection_AsciiString::Search(OCNaroWrappers::OCTCollection_AsciiString^ what)
{
  return ((TCollection_AsciiString*)nativeHandle)->Search(*((TCollection_AsciiString*)what->Handle));
}

 Standard_Integer OCTCollection_AsciiString::SearchFromEnd(System::String^ what)
{
  return ((TCollection_AsciiString*)nativeHandle)->SearchFromEnd(OCConverter::StringToStandardCString(what));
}

 Standard_Integer OCTCollection_AsciiString::SearchFromEnd(OCNaroWrappers::OCTCollection_AsciiString^ what)
{
  return ((TCollection_AsciiString*)nativeHandle)->SearchFromEnd(*((TCollection_AsciiString*)what->Handle));
}

 void OCTCollection_AsciiString::SetValue(Standard_Integer where, Standard_Character what)
{
  ((TCollection_AsciiString*)nativeHandle)->SetValue(where, what);
}

 void OCTCollection_AsciiString::SetValue(Standard_Integer where, System::String^ what)
{
  ((TCollection_AsciiString*)nativeHandle)->SetValue(where, OCConverter::StringToStandardCString(what));
}

 void OCTCollection_AsciiString::SetValue(Standard_Integer where, OCNaroWrappers::OCTCollection_AsciiString^ what)
{
  ((TCollection_AsciiString*)nativeHandle)->SetValue(where, *((TCollection_AsciiString*)what->Handle));
}

OCTCollection_AsciiString^ OCTCollection_AsciiString::Split(Standard_Integer where)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((TCollection_AsciiString*)nativeHandle)->Split(where);
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_AsciiString^ OCTCollection_AsciiString::SubString(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((TCollection_AsciiString*)nativeHandle)->SubString(FromIndex, ToIndex);
  return gcnew OCTCollection_AsciiString(tmp);
}

 System::String^ OCTCollection_AsciiString::ToCString()
{
  return OCConverter::StandardCStringToString(((TCollection_AsciiString*)nativeHandle)->ToCString());
}

OCTCollection_AsciiString^ OCTCollection_AsciiString::Token(System::String^ separators, Standard_Integer whichone)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = ((TCollection_AsciiString*)nativeHandle)->Token(OCConverter::StringToStandardCString(separators), whichone);
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCTCollection_AsciiString::Trunc(Standard_Integer ahowmany)
{
  ((TCollection_AsciiString*)nativeHandle)->Trunc(ahowmany);
}

 void OCTCollection_AsciiString::UpperCase()
{
  ((TCollection_AsciiString*)nativeHandle)->UpperCase();
}

 Standard_Integer OCTCollection_AsciiString::UsefullLength()
{
  return ((TCollection_AsciiString*)nativeHandle)->UsefullLength();
}

 Standard_Character OCTCollection_AsciiString::Value(Standard_Integer where)
{
  return ((TCollection_AsciiString*)nativeHandle)->Value(where);
}

 Standard_Integer OCTCollection_AsciiString::HashCode(OCNaroWrappers::OCTCollection_AsciiString^ astring, Standard_Integer Upper)
{
  return TCollection_AsciiString::HashCode(*((TCollection_AsciiString*)astring->Handle), Upper);
}

 System::Boolean OCTCollection_AsciiString::IsEqual(OCNaroWrappers::OCTCollection_AsciiString^ string1, OCNaroWrappers::OCTCollection_AsciiString^ string2)
{
  return OCConverter::StandardBooleanToBoolean(TCollection_AsciiString::IsEqual(*((TCollection_AsciiString*)string1->Handle), *((TCollection_AsciiString*)string2->Handle)));
}

 System::Boolean OCTCollection_AsciiString::IsEqual(OCNaroWrappers::OCTCollection_AsciiString^ string1, System::String^ string2)
{
  return OCConverter::StandardBooleanToBoolean(TCollection_AsciiString::IsEqual(*((TCollection_AsciiString*)string1->Handle), OCConverter::StringToStandardCString(string2)));
}

 Standard_Integer OCTCollection_AsciiString::HASHCODE(OCNaroWrappers::OCTCollection_AsciiString^ astring, Standard_Integer Upper)
{
  return TCollection_AsciiString::HASHCODE(*((TCollection_AsciiString*)astring->Handle), Upper);
}

 System::Boolean OCTCollection_AsciiString::ISSIMILAR(OCNaroWrappers::OCTCollection_AsciiString^ string1, OCNaroWrappers::OCTCollection_AsciiString^ string2)
{
  return OCConverter::StandardBooleanToBoolean(TCollection_AsciiString::ISSIMILAR(*((TCollection_AsciiString*)string1->Handle), *((TCollection_AsciiString*)string2->Handle)));
}


