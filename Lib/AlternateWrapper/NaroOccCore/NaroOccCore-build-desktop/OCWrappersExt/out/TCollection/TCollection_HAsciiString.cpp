// File generated by CPPExt (CPP file)
//

#include "TCollection_HAsciiString.h"
#include "../Converter.h"
#include "TCollection_AsciiString.h"
#include "TCollection_HExtendedString.h"


using namespace OCNaroWrappers;

OCTCollection_HAsciiString::OCTCollection_HAsciiString(Handle(TCollection_HAsciiString)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TCollection_HAsciiString(*nativeHandle);
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString());
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString(System::String^ message) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString(OCConverter::StringToStandardCString(message)));
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString(Standard_Character aChar) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString(aChar));
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString(Standard_Integer length, Standard_Character filler) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString(length, filler));
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString(Standard_Integer value) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString(value));
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString(Standard_Real value) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString(value));
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString(OCNaroWrappers::OCTCollection_AsciiString^ aString) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString(*((TCollection_AsciiString*)aString->Handle)));
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString(OCNaroWrappers::OCTCollection_HAsciiString^ aString) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString(*((Handle_TCollection_HAsciiString*)aString->Handle)));
}

OCTCollection_HAsciiString::OCTCollection_HAsciiString(OCNaroWrappers::OCTCollection_HExtendedString^ aString, Standard_Character replaceNonAscii) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HAsciiString(new TCollection_HAsciiString(*((Handle_TCollection_HExtendedString*)aString->Handle), replaceNonAscii));
}

 void OCTCollection_HAsciiString::AssignCat(System::String^ other)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->AssignCat(OCConverter::StringToStandardCString(other));
}

 void OCTCollection_HAsciiString::AssignCat(OCNaroWrappers::OCTCollection_HAsciiString^ other)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->AssignCat(*((Handle_TCollection_HAsciiString*)other->Handle));
}

 void OCTCollection_HAsciiString::Capitalize()
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Capitalize();
}

OCTCollection_HAsciiString^ OCTCollection_HAsciiString::Cat(System::String^ other)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_TCollection_HAsciiString*)nativeHandle))->Cat(OCConverter::StringToStandardCString(other));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTCollection_HAsciiString^ OCTCollection_HAsciiString::Cat(OCNaroWrappers::OCTCollection_HAsciiString^ other)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_TCollection_HAsciiString*)nativeHandle))->Cat(*((Handle_TCollection_HAsciiString*)other->Handle));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCTCollection_HAsciiString::Center(Standard_Integer Width, Standard_Character Filler)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Center(Width, Filler);
}

 void OCTCollection_HAsciiString::ChangeAll(Standard_Character aChar, Standard_Character NewChar, System::Boolean CaseSensitive)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->ChangeAll(aChar, NewChar, OCConverter::BooleanToStandardBoolean(CaseSensitive));
}

 void OCTCollection_HAsciiString::Clear()
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Clear();
}

 Standard_Integer OCTCollection_HAsciiString::FirstLocationInSet(OCNaroWrappers::OCTCollection_HAsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->FirstLocationInSet(*((Handle_TCollection_HAsciiString*)Set->Handle), FromIndex, ToIndex);
}

 Standard_Integer OCTCollection_HAsciiString::FirstLocationNotInSet(OCNaroWrappers::OCTCollection_HAsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->FirstLocationNotInSet(*((Handle_TCollection_HAsciiString*)Set->Handle), FromIndex, ToIndex);
}

 void OCTCollection_HAsciiString::Insert(Standard_Integer where, Standard_Character what)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Insert(where, what);
}

 void OCTCollection_HAsciiString::Insert(Standard_Integer where, System::String^ what)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Insert(where, OCConverter::StringToStandardCString(what));
}

 void OCTCollection_HAsciiString::Insert(Standard_Integer where, OCNaroWrappers::OCTCollection_HAsciiString^ what)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Insert(where, *((Handle_TCollection_HAsciiString*)what->Handle));
}

 void OCTCollection_HAsciiString::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCTCollection_HAsciiString^ other)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->InsertAfter(Index, *((Handle_TCollection_HAsciiString*)other->Handle));
}

 void OCTCollection_HAsciiString::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCTCollection_HAsciiString^ other)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->InsertBefore(Index, *((Handle_TCollection_HAsciiString*)other->Handle));
}

 System::Boolean OCTCollection_HAsciiString::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsEmpty());
}

 System::Boolean OCTCollection_HAsciiString::IsLess(OCNaroWrappers::OCTCollection_HAsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsLess(*((Handle_TCollection_HAsciiString*)other->Handle)));
}

 System::Boolean OCTCollection_HAsciiString::IsGreater(OCNaroWrappers::OCTCollection_HAsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsGreater(*((Handle_TCollection_HAsciiString*)other->Handle)));
}

 Standard_Integer OCTCollection_HAsciiString::IntegerValue()
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->IntegerValue();
}

 System::Boolean OCTCollection_HAsciiString::IsIntegerValue()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsIntegerValue());
}

 System::Boolean OCTCollection_HAsciiString::IsRealValue()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsRealValue());
}

 System::Boolean OCTCollection_HAsciiString::IsAscii()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsAscii());
}

 System::Boolean OCTCollection_HAsciiString::IsDifferent(OCNaroWrappers::OCTCollection_HAsciiString^ S)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsDifferent(*((Handle_TCollection_HAsciiString*)S->Handle)));
}

 System::Boolean OCTCollection_HAsciiString::IsSameString(OCNaroWrappers::OCTCollection_HAsciiString^ S)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsSameString(*((Handle_TCollection_HAsciiString*)S->Handle)));
}

 System::Boolean OCTCollection_HAsciiString::IsSameString(OCNaroWrappers::OCTCollection_HAsciiString^ S, System::Boolean CaseSensitive)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsSameString(*((Handle_TCollection_HAsciiString*)S->Handle), OCConverter::BooleanToStandardBoolean(CaseSensitive)));
}

 void OCTCollection_HAsciiString::LeftAdjust()
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->LeftAdjust();
}

 void OCTCollection_HAsciiString::LeftJustify(Standard_Integer Width, Standard_Character Filler)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->LeftJustify(Width, Filler);
}

 Standard_Integer OCTCollection_HAsciiString::Length()
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->Length();
}

 Standard_Integer OCTCollection_HAsciiString::Location(OCNaroWrappers::OCTCollection_HAsciiString^ other, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->Location(*((Handle_TCollection_HAsciiString*)other->Handle), FromIndex, ToIndex);
}

 Standard_Integer OCTCollection_HAsciiString::Location(Standard_Integer N, Standard_Character C, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->Location(N, C, FromIndex, ToIndex);
}

 void OCTCollection_HAsciiString::LowerCase()
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->LowerCase();
}

 void OCTCollection_HAsciiString::Prepend(OCNaroWrappers::OCTCollection_HAsciiString^ other)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Prepend(*((Handle_TCollection_HAsciiString*)other->Handle));
}

 void OCTCollection_HAsciiString::Print(Standard_OStream& astream)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Print(astream);
}

 Standard_Real OCTCollection_HAsciiString::RealValue()
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->RealValue();
}

 void OCTCollection_HAsciiString::RemoveAll(Standard_Character C, System::Boolean CaseSensitive)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->RemoveAll(C, OCConverter::BooleanToStandardBoolean(CaseSensitive));
}

 void OCTCollection_HAsciiString::RemoveAll(Standard_Character what)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->RemoveAll(what);
}

 void OCTCollection_HAsciiString::Remove(Standard_Integer where, Standard_Integer ahowmany)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Remove(where, ahowmany);
}

 void OCTCollection_HAsciiString::RightAdjust()
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->RightAdjust();
}

 void OCTCollection_HAsciiString::RightJustify(Standard_Integer Width, Standard_Character Filler)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->RightJustify(Width, Filler);
}

 Standard_Integer OCTCollection_HAsciiString::Search(System::String^ what)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->Search(OCConverter::StringToStandardCString(what));
}

 Standard_Integer OCTCollection_HAsciiString::Search(OCNaroWrappers::OCTCollection_HAsciiString^ what)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->Search(*((Handle_TCollection_HAsciiString*)what->Handle));
}

 Standard_Integer OCTCollection_HAsciiString::SearchFromEnd(System::String^ what)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->SearchFromEnd(OCConverter::StringToStandardCString(what));
}

 Standard_Integer OCTCollection_HAsciiString::SearchFromEnd(OCNaroWrappers::OCTCollection_HAsciiString^ what)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->SearchFromEnd(*((Handle_TCollection_HAsciiString*)what->Handle));
}

 void OCTCollection_HAsciiString::SetValue(Standard_Integer where, Standard_Character what)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->SetValue(where, what);
}

 void OCTCollection_HAsciiString::SetValue(Standard_Integer where, System::String^ what)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->SetValue(where, OCConverter::StringToStandardCString(what));
}

 void OCTCollection_HAsciiString::SetValue(Standard_Integer where, OCNaroWrappers::OCTCollection_HAsciiString^ what)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->SetValue(where, *((Handle_TCollection_HAsciiString*)what->Handle));
}

OCTCollection_HAsciiString^ OCTCollection_HAsciiString::Split(Standard_Integer where)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_TCollection_HAsciiString*)nativeHandle))->Split(where);
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTCollection_HAsciiString^ OCTCollection_HAsciiString::SubString(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_TCollection_HAsciiString*)nativeHandle))->SubString(FromIndex, ToIndex);
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 System::String^ OCTCollection_HAsciiString::ToCString()
{
  return OCConverter::StandardCStringToString((*((Handle_TCollection_HAsciiString*)nativeHandle))->ToCString());
}

OCTCollection_HAsciiString^ OCTCollection_HAsciiString::Token(System::String^ separators, Standard_Integer whichone)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_TCollection_HAsciiString*)nativeHandle))->Token(OCConverter::StringToStandardCString(separators), whichone);
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCTCollection_HAsciiString::Trunc(Standard_Integer ahowmany)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->Trunc(ahowmany);
}

 void OCTCollection_HAsciiString::UpperCase()
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->UpperCase();
}

 Standard_Integer OCTCollection_HAsciiString::UsefullLength()
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->UsefullLength();
}

 Standard_Character OCTCollection_HAsciiString::Value(Standard_Integer where)
{
  return (*((Handle_TCollection_HAsciiString*)nativeHandle))->Value(where);
}

OCTCollection_AsciiString^ OCTCollection_HAsciiString::String()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_TCollection_HAsciiString*)nativeHandle))->String();
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_HAsciiString^ OCTCollection_HAsciiString::ShallowCopy()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_TCollection_HAsciiString*)nativeHandle))->ShallowCopy();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCTCollection_HAsciiString::ShallowDump(Standard_OStream& s)
{
  (*((Handle_TCollection_HAsciiString*)nativeHandle))->ShallowDump(s);
}

 System::Boolean OCTCollection_HAsciiString::IsSameState(OCNaroWrappers::OCTCollection_HAsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HAsciiString*)nativeHandle))->IsSameState(*((Handle_TCollection_HAsciiString*)other->Handle)));
}


