// File generated by CPPExt (CPP file)
//

#include "TCollection_HExtendedString.h"
#include "../Converter.h"
#include "TCollection_ExtendedString.h"
#include "TCollection_HAsciiString.h"


using namespace OCNaroWrappers;

OCTCollection_HExtendedString::OCTCollection_HExtendedString(Handle(TCollection_HExtendedString)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TCollection_HExtendedString(*nativeHandle);
}

OCTCollection_HExtendedString::OCTCollection_HExtendedString() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HExtendedString(new TCollection_HExtendedString());
}

OCTCollection_HExtendedString::OCTCollection_HExtendedString(System::String^ message) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HExtendedString(new TCollection_HExtendedString(OCConverter::StringToStandardCString(message)));
}

OCTCollection_HExtendedString::OCTCollection_HExtendedString(System::String^ message) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HExtendedString(new TCollection_HExtendedString(OCConverter::StringToStandardExtString(message)));
}

OCTCollection_HExtendedString::OCTCollection_HExtendedString(Standard_ExtCharacter aChar) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HExtendedString(new TCollection_HExtendedString(aChar));
}

OCTCollection_HExtendedString::OCTCollection_HExtendedString(Standard_Integer length, Standard_ExtCharacter filler) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HExtendedString(new TCollection_HExtendedString(length, filler));
}

OCTCollection_HExtendedString::OCTCollection_HExtendedString(OCNaroWrappers::OCTCollection_ExtendedString^ aString) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HExtendedString(new TCollection_HExtendedString(*((TCollection_ExtendedString*)aString->Handle)));
}

OCTCollection_HExtendedString::OCTCollection_HExtendedString(OCNaroWrappers::OCTCollection_HAsciiString^ aString) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HExtendedString(new TCollection_HExtendedString(*((Handle_TCollection_HAsciiString*)aString->Handle)));
}

OCTCollection_HExtendedString::OCTCollection_HExtendedString(OCNaroWrappers::OCTCollection_HExtendedString^ aString) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TCollection_HExtendedString(new TCollection_HExtendedString(*((Handle_TCollection_HExtendedString*)aString->Handle)));
}

 void OCTCollection_HExtendedString::AssignCat(OCNaroWrappers::OCTCollection_HExtendedString^ other)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->AssignCat(*((Handle_TCollection_HExtendedString*)other->Handle));
}

OCTCollection_HExtendedString^ OCTCollection_HExtendedString::Cat(OCNaroWrappers::OCTCollection_HExtendedString^ other)
{
  Handle(TCollection_HExtendedString) tmp = (*((Handle_TCollection_HExtendedString*)nativeHandle))->Cat(*((Handle_TCollection_HExtendedString*)other->Handle));
  return gcnew OCTCollection_HExtendedString(&tmp);
}

 void OCTCollection_HExtendedString::ChangeAll(Standard_ExtCharacter aChar, Standard_ExtCharacter NewChar)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->ChangeAll(aChar, NewChar);
}

 void OCTCollection_HExtendedString::Clear()
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->Clear();
}

 System::Boolean OCTCollection_HExtendedString::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HExtendedString*)nativeHandle))->IsEmpty());
}

 void OCTCollection_HExtendedString::Insert(Standard_Integer where, Standard_ExtCharacter what)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->Insert(where, what);
}

 void OCTCollection_HExtendedString::Insert(Standard_Integer where, OCNaroWrappers::OCTCollection_HExtendedString^ what)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->Insert(where, *((Handle_TCollection_HExtendedString*)what->Handle));
}

 System::Boolean OCTCollection_HExtendedString::IsLess(OCNaroWrappers::OCTCollection_HExtendedString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HExtendedString*)nativeHandle))->IsLess(*((Handle_TCollection_HExtendedString*)other->Handle)));
}

 System::Boolean OCTCollection_HExtendedString::IsGreater(OCNaroWrappers::OCTCollection_HExtendedString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HExtendedString*)nativeHandle))->IsGreater(*((Handle_TCollection_HExtendedString*)other->Handle)));
}

 System::Boolean OCTCollection_HExtendedString::IsAscii()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HExtendedString*)nativeHandle))->IsAscii());
}

 Standard_Integer OCTCollection_HExtendedString::Length()
{
  return (*((Handle_TCollection_HExtendedString*)nativeHandle))->Length();
}

 void OCTCollection_HExtendedString::Remove(Standard_Integer where, Standard_Integer ahowmany)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->Remove(where, ahowmany);
}

 void OCTCollection_HExtendedString::RemoveAll(Standard_ExtCharacter what)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->RemoveAll(what);
}

 void OCTCollection_HExtendedString::SetValue(Standard_Integer where, Standard_ExtCharacter what)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->SetValue(where, what);
}

 void OCTCollection_HExtendedString::SetValue(Standard_Integer where, OCNaroWrappers::OCTCollection_HExtendedString^ what)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->SetValue(where, *((Handle_TCollection_HExtendedString*)what->Handle));
}

OCTCollection_HExtendedString^ OCTCollection_HExtendedString::Split(Standard_Integer where)
{
  Handle(TCollection_HExtendedString) tmp = (*((Handle_TCollection_HExtendedString*)nativeHandle))->Split(where);
  return gcnew OCTCollection_HExtendedString(&tmp);
}

 Standard_Integer OCTCollection_HExtendedString::Search(OCNaroWrappers::OCTCollection_HExtendedString^ what)
{
  return (*((Handle_TCollection_HExtendedString*)nativeHandle))->Search(*((Handle_TCollection_HExtendedString*)what->Handle));
}

 Standard_Integer OCTCollection_HExtendedString::SearchFromEnd(OCNaroWrappers::OCTCollection_HExtendedString^ what)
{
  return (*((Handle_TCollection_HExtendedString*)nativeHandle))->SearchFromEnd(*((Handle_TCollection_HExtendedString*)what->Handle));
}

 System::String^ OCTCollection_HExtendedString::ToExtString()
{
  return OCConverter::StandardExtStringToString((*((Handle_TCollection_HExtendedString*)nativeHandle))->ToExtString());
}

OCTCollection_HExtendedString^ OCTCollection_HExtendedString::Token(System::String^ separators, Standard_Integer whichone)
{
  Handle(TCollection_HExtendedString) tmp = (*((Handle_TCollection_HExtendedString*)nativeHandle))->Token(OCConverter::StringToStandardExtString(separators), whichone);
  return gcnew OCTCollection_HExtendedString(&tmp);
}

 void OCTCollection_HExtendedString::Trunc(Standard_Integer ahowmany)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->Trunc(ahowmany);
}

 Standard_ExtCharacter OCTCollection_HExtendedString::Value(Standard_Integer where)
{
  return (*((Handle_TCollection_HExtendedString*)nativeHandle))->Value(where);
}

OCTCollection_ExtendedString^ OCTCollection_HExtendedString::String()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_TCollection_HExtendedString*)nativeHandle))->String();
  return gcnew OCTCollection_ExtendedString(tmp);
}

 void OCTCollection_HExtendedString::Print(Standard_OStream& astream)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->Print(astream);
}

OCTCollection_HExtendedString^ OCTCollection_HExtendedString::ShallowCopy()
{
  Handle(TCollection_HExtendedString) tmp = (*((Handle_TCollection_HExtendedString*)nativeHandle))->ShallowCopy();
  return gcnew OCTCollection_HExtendedString(&tmp);
}

 void OCTCollection_HExtendedString::ShallowDump(Standard_OStream& s)
{
  (*((Handle_TCollection_HExtendedString*)nativeHandle))->ShallowDump(s);
}

 System::Boolean OCTCollection_HExtendedString::IsSameState(OCNaroWrappers::OCTCollection_HExtendedString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TCollection_HExtendedString*)nativeHandle))->IsSameState(*((Handle_TCollection_HExtendedString*)other->Handle)));
}


