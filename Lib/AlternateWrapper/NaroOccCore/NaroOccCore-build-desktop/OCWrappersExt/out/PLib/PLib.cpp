// File generated by CPPExt (CPP file)
//

#include "PLib.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



OCTColStd_Array1OfReal^ OCPLib::NoWeights()
{
  TColStd_Array1OfReal* tmp = new TColStd_Array1OfReal(0, 0);
  *tmp = PLib::NoWeights();
  return gcnew OCTColStd_Array1OfReal(tmp);
}

OCTColStd_Array2OfReal^ OCPLib::NoWeights2()
{
  TColStd_Array2OfReal* tmp = new TColStd_Array2OfReal(0, 0, 0, 0);
  *tmp = PLib::NoWeights2();
  return gcnew OCTColStd_Array2OfReal(tmp);
}

 void OCPLib::SetPoles(OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ FP)
{
  PLib::SetPoles(*((TColgp_Array1OfPnt*)Poles->Handle), *((TColStd_Array1OfReal*)FP->Handle));
}

 void OCPLib::SetPoles(OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weights, OCNaroWrappers::OCTColStd_Array1OfReal^ FP)
{
  PLib::SetPoles(*((TColgp_Array1OfPnt*)Poles->Handle), *((TColStd_Array1OfReal*)Weights->Handle), *((TColStd_Array1OfReal*)FP->Handle));
}

 void OCPLib::GetPoles(OCNaroWrappers::OCTColStd_Array1OfReal^ FP, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles)
{
  PLib::GetPoles(*((TColStd_Array1OfReal*)FP->Handle), *((TColgp_Array1OfPnt*)Poles->Handle));
}

 void OCPLib::GetPoles(OCNaroWrappers::OCTColStd_Array1OfReal^ FP, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weights)
{
  PLib::GetPoles(*((TColStd_Array1OfReal*)FP->Handle), *((TColgp_Array1OfPnt*)Poles->Handle), *((TColStd_Array1OfReal*)Weights->Handle));
}

 void OCPLib::SetPoles(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ FP)
{
  PLib::SetPoles(*((TColgp_Array1OfPnt2d*)Poles->Handle), *((TColStd_Array1OfReal*)FP->Handle));
}

 void OCPLib::SetPoles(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weights, OCNaroWrappers::OCTColStd_Array1OfReal^ FP)
{
  PLib::SetPoles(*((TColgp_Array1OfPnt2d*)Poles->Handle), *((TColStd_Array1OfReal*)Weights->Handle), *((TColStd_Array1OfReal*)FP->Handle));
}

 void OCPLib::GetPoles(OCNaroWrappers::OCTColStd_Array1OfReal^ FP, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles)
{
  PLib::GetPoles(*((TColStd_Array1OfReal*)FP->Handle), *((TColgp_Array1OfPnt2d*)Poles->Handle));
}

 void OCPLib::GetPoles(OCNaroWrappers::OCTColStd_Array1OfReal^ FP, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weights)
{
  PLib::GetPoles(*((TColStd_Array1OfReal*)FP->Handle), *((TColgp_Array1OfPnt2d*)Poles->Handle), *((TColStd_Array1OfReal*)Weights->Handle));
}

 Standard_Real OCPLib::Bin(Standard_Integer N, Standard_Integer P)
{
  return PLib::Bin(N, P);
}

 void OCPLib::RationalDerivative(Standard_Integer Degree, Standard_Integer N, Standard_Integer Dimension, Standard_Real& Ders, Standard_Real& RDers, System::Boolean All)
{
  PLib::RationalDerivative(Degree, N, Dimension, Ders, RDers, OCConverter::BooleanToStandardBoolean(All));
}

 void OCPLib::RationalDerivatives(Standard_Integer DerivativesRequest, Standard_Integer Dimension, Standard_Real& PolesDerivatives, Standard_Real& WeightsDerivatives, Standard_Real& RationalDerivates)
{
  PLib::RationalDerivatives(DerivativesRequest, Dimension, PolesDerivatives, WeightsDerivatives, RationalDerivates);
}

 void OCPLib::EvalPolynomial(Standard_Real U, Standard_Integer DerivativeOrder, Standard_Integer Degree, Standard_Integer Dimension, Standard_Real& PolynomialCoeff, Standard_Real& Results)
{
  PLib::EvalPolynomial(U, DerivativeOrder, Degree, Dimension, PolynomialCoeff, Results);
}

 void OCPLib::NoDerivativeEvalPolynomial(Standard_Real U, Standard_Integer Degree, Standard_Integer Dimension, Standard_Integer DegreeDimension, Standard_Real& PolynomialCoeff, Standard_Real& Results)
{
  PLib::NoDerivativeEvalPolynomial(U, Degree, Dimension, DegreeDimension, PolynomialCoeff, Results);
}

 void OCPLib::EvalPoly2Var(Standard_Real U, Standard_Real V, Standard_Integer UDerivativeOrder, Standard_Integer VDerivativeOrder, Standard_Integer UDegree, Standard_Integer VDegree, Standard_Integer Dimension, Standard_Real& PolynomialCoeff, Standard_Real& Results)
{
  PLib::EvalPoly2Var(U, V, UDerivativeOrder, VDerivativeOrder, UDegree, VDegree, Dimension, PolynomialCoeff, Results);
}

 Standard_Integer OCPLib::EvalLagrange(Standard_Real U, Standard_Integer DerivativeOrder, Standard_Integer Degree, Standard_Integer Dimension, Standard_Real& ValueArray, Standard_Real& ParameterArray, Standard_Real& Results)
{
  return PLib::EvalLagrange(U, DerivativeOrder, Degree, Dimension, ValueArray, ParameterArray, Results);
}

 Standard_Integer OCPLib::EvalCubicHermite(Standard_Real U, Standard_Integer DerivativeOrder, Standard_Integer Dimension, Standard_Real& ValueArray, Standard_Real& DerivativeArray, Standard_Real& ParameterArray, Standard_Real& Results)
{
  return PLib::EvalCubicHermite(U, DerivativeOrder, Dimension, ValueArray, DerivativeArray, ParameterArray, Results);
}

 System::Boolean OCPLib::HermiteCoefficients(Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Integer FirstOrder, Standard_Integer LastOrder, OCNaroWrappers::OCmath_Matrix^ MatrixCoefs)
{
  return OCConverter::StandardBooleanToBoolean(PLib::HermiteCoefficients(FirstParameter, LastParameter, FirstOrder, LastOrder, *((math_Matrix*)MatrixCoefs->Handle)));
}

 void OCPLib::CoefficientsPoles(OCNaroWrappers::OCTColgp_Array1OfPnt^ Coefs, OCNaroWrappers::OCTColStd_Array1OfReal^ WCoefs, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ WPoles)
{
  PLib::CoefficientsPoles(*((TColgp_Array1OfPnt*)Coefs->Handle), *((TColStd_Array1OfReal*)WCoefs->Handle), *((TColgp_Array1OfPnt*)Poles->Handle), *((TColStd_Array1OfReal*)WPoles->Handle));
}

 void OCPLib::CoefficientsPoles(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Coefs, OCNaroWrappers::OCTColStd_Array1OfReal^ WCoefs, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ WPoles)
{
  PLib::CoefficientsPoles(*((TColgp_Array1OfPnt2d*)Coefs->Handle), *((TColStd_Array1OfReal*)WCoefs->Handle), *((TColgp_Array1OfPnt2d*)Poles->Handle), *((TColStd_Array1OfReal*)WPoles->Handle));
}

 void OCPLib::CoefficientsPoles(OCNaroWrappers::OCTColStd_Array1OfReal^ Coefs, OCNaroWrappers::OCTColStd_Array1OfReal^ WCoefs, OCNaroWrappers::OCTColStd_Array1OfReal^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ WPoles)
{
  PLib::CoefficientsPoles(*((TColStd_Array1OfReal*)Coefs->Handle), *((TColStd_Array1OfReal*)WCoefs->Handle), *((TColStd_Array1OfReal*)Poles->Handle), *((TColStd_Array1OfReal*)WPoles->Handle));
}

 void OCPLib::CoefficientsPoles(Standard_Integer dim, OCNaroWrappers::OCTColStd_Array1OfReal^ Coefs, OCNaroWrappers::OCTColStd_Array1OfReal^ WCoefs, OCNaroWrappers::OCTColStd_Array1OfReal^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ WPoles)
{
  PLib::CoefficientsPoles(dim, *((TColStd_Array1OfReal*)Coefs->Handle), *((TColStd_Array1OfReal*)WCoefs->Handle), *((TColStd_Array1OfReal*)Poles->Handle), *((TColStd_Array1OfReal*)WPoles->Handle));
}

 void OCPLib::Trimming(Standard_Real U1, Standard_Real U2, OCNaroWrappers::OCTColgp_Array1OfPnt^ Coeffs, OCNaroWrappers::OCTColStd_Array1OfReal^ WCoeffs)
{
  PLib::Trimming(U1, U2, *((TColgp_Array1OfPnt*)Coeffs->Handle), *((TColStd_Array1OfReal*)WCoeffs->Handle));
}

 void OCPLib::Trimming(Standard_Real U1, Standard_Real U2, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Coeffs, OCNaroWrappers::OCTColStd_Array1OfReal^ WCoeffs)
{
  PLib::Trimming(U1, U2, *((TColgp_Array1OfPnt2d*)Coeffs->Handle), *((TColStd_Array1OfReal*)WCoeffs->Handle));
}

 void OCPLib::Trimming(Standard_Real U1, Standard_Real U2, OCNaroWrappers::OCTColStd_Array1OfReal^ Coeffs, OCNaroWrappers::OCTColStd_Array1OfReal^ WCoeffs)
{
  PLib::Trimming(U1, U2, *((TColStd_Array1OfReal*)Coeffs->Handle), *((TColStd_Array1OfReal*)WCoeffs->Handle));
}

 void OCPLib::Trimming(Standard_Real U1, Standard_Real U2, Standard_Integer dim, OCNaroWrappers::OCTColStd_Array1OfReal^ Coeffs, OCNaroWrappers::OCTColStd_Array1OfReal^ WCoeffs)
{
  PLib::Trimming(U1, U2, dim, *((TColStd_Array1OfReal*)Coeffs->Handle), *((TColStd_Array1OfReal*)WCoeffs->Handle));
}

 void OCPLib::CoefficientsPoles(OCNaroWrappers::OCTColgp_Array2OfPnt^ Coefs, OCNaroWrappers::OCTColStd_Array2OfReal^ WCoefs, OCNaroWrappers::OCTColgp_Array2OfPnt^ Poles, OCNaroWrappers::OCTColStd_Array2OfReal^ WPoles)
{
  PLib::CoefficientsPoles(*((TColgp_Array2OfPnt*)Coefs->Handle), *((TColStd_Array2OfReal*)WCoefs->Handle), *((TColgp_Array2OfPnt*)Poles->Handle), *((TColStd_Array2OfReal*)WPoles->Handle));
}

 void OCPLib::UTrimming(Standard_Real U1, Standard_Real U2, OCNaroWrappers::OCTColgp_Array2OfPnt^ Coeffs, OCNaroWrappers::OCTColStd_Array2OfReal^ WCoeffs)
{
  PLib::UTrimming(U1, U2, *((TColgp_Array2OfPnt*)Coeffs->Handle), *((TColStd_Array2OfReal*)WCoeffs->Handle));
}

 void OCPLib::VTrimming(Standard_Real V1, Standard_Real V2, OCNaroWrappers::OCTColgp_Array2OfPnt^ Coeffs, OCNaroWrappers::OCTColStd_Array2OfReal^ WCoeffs)
{
  PLib::VTrimming(V1, V2, *((TColgp_Array2OfPnt*)Coeffs->Handle), *((TColStd_Array2OfReal*)WCoeffs->Handle));
}

 System::Boolean OCPLib::HermiteInterpolate(Standard_Integer Dimension, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Integer FirstOrder, Standard_Integer LastOrder, OCNaroWrappers::OCTColStd_Array2OfReal^ FirstConstr, OCNaroWrappers::OCTColStd_Array2OfReal^ LastConstr, OCNaroWrappers::OCTColStd_Array1OfReal^ Coefficients)
{
  return OCConverter::StandardBooleanToBoolean(PLib::HermiteInterpolate(Dimension, FirstParameter, LastParameter, FirstOrder, LastOrder, *((TColStd_Array2OfReal*)FirstConstr->Handle), *((TColStd_Array2OfReal*)LastConstr->Handle), *((TColStd_Array1OfReal*)Coefficients->Handle)));
}

 void OCPLib::JacobiParameters(OCGeomAbs_Shape ConstraintOrder, Standard_Integer MaxDegree, Standard_Integer Code, Standard_Integer& NbGaussPoints, Standard_Integer& WorkDegree)
{
  PLib::JacobiParameters((GeomAbs_Shape)ConstraintOrder, MaxDegree, Code, NbGaussPoints, WorkDegree);
}

 Standard_Integer OCPLib::NivConstr(OCGeomAbs_Shape ConstraintOrder)
{
  return PLib::NivConstr((GeomAbs_Shape)ConstraintOrder);
}

 OCGeomAbs_Shape OCPLib::ConstraintOrder(Standard_Integer NivConstr)
{
  return (OCGeomAbs_Shape)(PLib::ConstraintOrder(NivConstr));
}

 void OCPLib::EvalLength(Standard_Integer Degree, Standard_Integer Dimension, Standard_Real& PolynomialCoeff, Standard_Real U1, Standard_Real U2, Standard_Real& Length)
{
  PLib::EvalLength(Degree, Dimension, PolynomialCoeff, U1, U2, Length);
}

 void OCPLib::EvalLength(Standard_Integer Degree, Standard_Integer Dimension, Standard_Real& PolynomialCoeff, Standard_Real U1, Standard_Real U2, Standard_Real Tol, Standard_Real& Length, Standard_Real& Error)
{
  PLib::EvalLength(Degree, Dimension, PolynomialCoeff, U1, U2, Tol, Length, Error);
}


