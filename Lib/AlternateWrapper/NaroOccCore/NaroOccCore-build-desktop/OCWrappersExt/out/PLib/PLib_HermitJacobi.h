// File generated by CPPExt (Transient)
//
#ifndef _PLib_HermitJacobi_OCWrappers_HeaderFile
#define _PLib_HermitJacobi_OCWrappers_HeaderFile

// include the wrapped class
#include <PLib_HermitJacobi.hxx>
#include "../Converter.h"

#include "PLib_Base.h"

#include "../math/math_Matrix.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCPLib_JacobiPolynomial;
ref class OCTColStd_Array1OfReal;


//! This class provides method  to work with Jacobi Polynomials <br>
//!  relativly to an order of constraint <br>
//!  q = myWorkDegree-2*(myNivConstr+1) <br>
//!  Jk(t) for k=0,q compose the Jacobi Polynomial base relativly to the weigth W(t) <br>
//!  iorder is the integer  value for the constraints: <br>
//!   iorder = 0 <=> ConstraintOrder = GeomAbs_C0 <br>
//!   iorder = 1 <=> ConstraintOrder = GeomAbs_C1 <br>
//!   iorder = 2 <=> ConstraintOrder = GeomAbs_C2 <br>
//!   P(t) = H(t) + W(t) * Q(t) Where W(t) = (1-t**2)**(2*iordre+2) <br>
//!   the coefficients JacCoeff represents P(t) JacCoeff are stored as follow: <br>
//! <br>
//!            c0(1)      c0(2) ....       c0(Dimension) <br>
//!            c1(1)      c1(2) ....       c1(Dimension) <br>
//! <br>
//! <br>
//! <br>
//!            cDegree(1) cDegree(2) ....  cDegree(Dimension) <br>
//! <br>
//!   The coefficients <br>
//!           c0(1)                  c0(2) ....            c0(Dimension) <br>
//!           c2*ordre+1(1)                ...          c2*ordre+1(dimension) <br>
//! <br>
//!   represents the  part  of the polynomial in  the <br>
//!   Hermit's base: H(t) <br>
//!   H(t) = c0H00(t) + c1H01(t) + ...c(iordre)H(0 ;iorder)+ c(iordre+1)H10(t)+... <br>
//!   The following coefficients represents the part of the <br>
//!   polynomial in the Jacobi base ie Q(t) <br>
//!   Q(t) = c2*iordre+2  J0(t) + ...+ cDegree JDegree-2*iordre-2 <br>
public ref class OCPLib_HermitJacobi : OCPLib_Base {

protected:
  // dummy constructor;
  OCPLib_HermitJacobi(OCDummy^) : OCPLib_Base((OCDummy^)nullptr) {};

public:

// constructor from native
OCPLib_HermitJacobi(Handle(PLib_HermitJacobi)* nativeHandle);

// Methods PUBLIC


//!   Initialize the polynomial class <br>
//!   Degree has to be <= 30 <br>
//!   ConstraintOrder has to be GeomAbs_C0 <br>
//!                             GeomAbs_C1 <br>
//!                             GeomAbs_C2 <br>
OCPLib_HermitJacobi(Standard_Integer WorkDegree, OCGeomAbs_Shape ConstraintOrder);


//!   This  method computes the  maximum  error on the polynomial <br>
//!   W(t) Q(t) obtained by missing the coefficients of JacCoeff from <br>
//!   NewDegree +1 to Degree <br>
 /*instead*/  Standard_Real MaxError(Standard_Integer Dimension, Standard_Real& HermJacCoeff, Standard_Integer NewDegree) ;


//!   Compute NewDegree <= MaxDegree so that MaxError is lower <br>
//!   than Tol. <br>
//!   MaxError can be greater than Tol if it is not possible <br>
//!   to find a NewDegree <= MaxDegree. <br>
//!   In this case NewDegree = MaxDegree <br>
//! <br>
 /*instead*/  void ReduceDegree(Standard_Integer Dimension, Standard_Integer MaxDegree, Standard_Real Tol, Standard_Real& HermJacCoeff, Standard_Integer& NewDegree, Standard_Real& MaxError) ;


 /*instead*/  Standard_Real AverageError(Standard_Integer Dimension, Standard_Real& HermJacCoeff, Standard_Integer NewDegree) ;


//!   Convert the polynomial P(t) = H(t) + W(t) Q(t) in the canonical base. <br>
//! <br>
 /*instead*/  void ToCoefficients(Standard_Integer Dimension, Standard_Integer Degree, OCNaroWrappers::OCTColStd_Array1OfReal^ HermJacCoeff, OCNaroWrappers::OCTColStd_Array1OfReal^ Coefficients) ;

//! Compute the values of the basis functions in u <br>
//! <br>
 /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisValue) ;

//! Compute the values and the derivatives values of <br>
//!          the basis functions in u <br>
 /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisValue, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD1) ;

//! Compute the values and the derivatives values of <br>
//!          the basis functions in u <br>
 /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisValue, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD1, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD2) ;

//! Compute the values and the derivatives values of <br>
//!          the basis functions in u <br>
 /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisValue, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD1, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD2, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD3) ;

//! returns WorkDegree <br>
 /*instead*/  Standard_Integer WorkDegree() ;

//! returns NivConstr <br>
 /*instead*/  Standard_Integer NivConstr() ;

~OCPLib_HermitJacobi()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
