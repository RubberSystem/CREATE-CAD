// File generated by CPPExt (CPP file)
//

#include "PLib_JacobiPolynomial.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array2OfReal.h"


using namespace OCNaroWrappers;

OCPLib_JacobiPolynomial::OCPLib_JacobiPolynomial(Handle(PLib_JacobiPolynomial)* nativeHandle) : OCPLib_Base((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PLib_JacobiPolynomial(*nativeHandle);
}

OCPLib_JacobiPolynomial::OCPLib_JacobiPolynomial(Standard_Integer WorkDegree, OCGeomAbs_Shape ConstraintOrder) : OCPLib_Base((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PLib_JacobiPolynomial(new PLib_JacobiPolynomial(WorkDegree, (GeomAbs_Shape)ConstraintOrder));
}

 void OCPLib_JacobiPolynomial::Points(Standard_Integer NbGaussPoints, OCNaroWrappers::OCTColStd_Array1OfReal^ TabPoints)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->Points(NbGaussPoints, *((TColStd_Array1OfReal*)TabPoints->Handle));
}

 void OCPLib_JacobiPolynomial::Weights(Standard_Integer NbGaussPoints, OCNaroWrappers::OCTColStd_Array2OfReal^ TabWeights)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->Weights(NbGaussPoints, *((TColStd_Array2OfReal*)TabWeights->Handle));
}

 void OCPLib_JacobiPolynomial::MaxValue(OCNaroWrappers::OCTColStd_Array1OfReal^ TabMax)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->MaxValue(*((TColStd_Array1OfReal*)TabMax->Handle));
}

 Standard_Real OCPLib_JacobiPolynomial::MaxError(Standard_Integer Dimension, Standard_Real& JacCoeff, Standard_Integer NewDegree)
{
  return (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->MaxError(Dimension, JacCoeff, NewDegree);
}

 void OCPLib_JacobiPolynomial::ReduceDegree(Standard_Integer Dimension, Standard_Integer MaxDegree, Standard_Real Tol, Standard_Real& JacCoeff, Standard_Integer& NewDegree, Standard_Real& MaxError)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->ReduceDegree(Dimension, MaxDegree, Tol, JacCoeff, NewDegree, MaxError);
}

 Standard_Real OCPLib_JacobiPolynomial::AverageError(Standard_Integer Dimension, Standard_Real& JacCoeff, Standard_Integer NewDegree)
{
  return (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->AverageError(Dimension, JacCoeff, NewDegree);
}

 void OCPLib_JacobiPolynomial::ToCoefficients(Standard_Integer Dimension, Standard_Integer Degree, OCNaroWrappers::OCTColStd_Array1OfReal^ JacCoeff, OCNaroWrappers::OCTColStd_Array1OfReal^ Coefficients)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->ToCoefficients(Dimension, Degree, *((TColStd_Array1OfReal*)JacCoeff->Handle), *((TColStd_Array1OfReal*)Coefficients->Handle));
}

 void OCPLib_JacobiPolynomial::D0(Standard_Real U, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisValue)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->D0(U, *((TColStd_Array1OfReal*)BasisValue->Handle));
}

 void OCPLib_JacobiPolynomial::D1(Standard_Real U, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisValue, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD1)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->D1(U, *((TColStd_Array1OfReal*)BasisValue->Handle), *((TColStd_Array1OfReal*)BasisD1->Handle));
}

 void OCPLib_JacobiPolynomial::D2(Standard_Real U, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisValue, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD1, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD2)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->D2(U, *((TColStd_Array1OfReal*)BasisValue->Handle), *((TColStd_Array1OfReal*)BasisD1->Handle), *((TColStd_Array1OfReal*)BasisD2->Handle));
}

 void OCPLib_JacobiPolynomial::D3(Standard_Real U, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisValue, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD1, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD2, OCNaroWrappers::OCTColStd_Array1OfReal^ BasisD3)
{
  (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->D3(U, *((TColStd_Array1OfReal*)BasisValue->Handle), *((TColStd_Array1OfReal*)BasisD1->Handle), *((TColStd_Array1OfReal*)BasisD2->Handle), *((TColStd_Array1OfReal*)BasisD3->Handle));
}

 Standard_Integer OCPLib_JacobiPolynomial::WorkDegree()
{
  return (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->WorkDegree();
}

 Standard_Integer OCPLib_JacobiPolynomial::NivConstr()
{
  return (*((Handle_PLib_JacobiPolynomial*)nativeHandle))->NivConstr();
}


