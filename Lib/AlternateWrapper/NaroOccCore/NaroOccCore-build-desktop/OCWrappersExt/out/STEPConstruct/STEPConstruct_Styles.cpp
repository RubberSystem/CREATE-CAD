// File generated by CPPExt (CPP file)
//

#include "STEPConstruct_Styles.h"
#include "../Converter.h"
#include "../XSControl/XSControl_WorkSession.h"
#include "../StepVisual/StepVisual_StyledItem.h"
#include "../StepRepr/StepRepr_RepresentationItem.h"
#include "../StepVisual/StepVisual_PresentationStyleAssignment.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../StepRepr/StepRepr_RepresentationContext.h"
#include "../StepVisual/StepVisual_MechanicalDesignGeometricPresentationRepresentation.h"
#include "../StepShape/StepShape_ContextDependentShapeRepresentation.h"
#include "../StepRepr/StepRepr_ProductDefinitionShape.h"
#include "../TColStd/TColStd_HSequenceOfTransient.h"
#include "../StepVisual/StepVisual_Colour.h"
#include "../Quantity/Quantity_Color.h"
#include "STEPConstruct_DataMapOfAsciiStringTransient.h"
#include "STEPConstruct_DataMapOfPointTransient.h"


using namespace OCNaroWrappers;

OCSTEPConstruct_Styles::OCSTEPConstruct_Styles(STEPConstruct_Styles* nativeHandle) : OCSTEPConstruct_Tool((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCSTEPConstruct_Styles::OCSTEPConstruct_Styles() : OCSTEPConstruct_Tool((OCDummy^)nullptr)

{
  nativeHandle = new STEPConstruct_Styles();
}

OCSTEPConstruct_Styles::OCSTEPConstruct_Styles(OCNaroWrappers::OCXSControl_WorkSession^ WS) : OCSTEPConstruct_Tool((OCDummy^)nullptr)

{
  nativeHandle = new STEPConstruct_Styles(*((Handle_XSControl_WorkSession*)WS->Handle));
}

 System::Boolean OCSTEPConstruct_Styles::Init(OCNaroWrappers::OCXSControl_WorkSession^ WS)
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_Styles*)nativeHandle)->Init(*((Handle_XSControl_WorkSession*)WS->Handle)));
}

 Standard_Integer OCSTEPConstruct_Styles::NbStyles()
{
  return ((STEPConstruct_Styles*)nativeHandle)->NbStyles();
}

OCStepVisual_StyledItem^ OCSTEPConstruct_Styles::Style(Standard_Integer i)
{
  Handle(StepVisual_StyledItem) tmp = ((STEPConstruct_Styles*)nativeHandle)->Style(i);
  return gcnew OCStepVisual_StyledItem(&tmp);
}

 void OCSTEPConstruct_Styles::ClearStyles()
{
  ((STEPConstruct_Styles*)nativeHandle)->ClearStyles();
}

 void OCSTEPConstruct_Styles::AddStyle(OCNaroWrappers::OCStepVisual_StyledItem^ style)
{
  ((STEPConstruct_Styles*)nativeHandle)->AddStyle(*((Handle_StepVisual_StyledItem*)style->Handle));
}

OCStepVisual_StyledItem^ OCSTEPConstruct_Styles::AddStyle(OCNaroWrappers::OCStepRepr_RepresentationItem^ item, OCNaroWrappers::OCStepVisual_PresentationStyleAssignment^ PSA, OCNaroWrappers::OCStepVisual_StyledItem^ Override)
{
  Handle(StepVisual_StyledItem) tmp = ((STEPConstruct_Styles*)nativeHandle)->AddStyle(*((Handle_StepRepr_RepresentationItem*)item->Handle), *((Handle_StepVisual_PresentationStyleAssignment*)PSA->Handle), *((Handle_StepVisual_StyledItem*)Override->Handle));
  return gcnew OCStepVisual_StyledItem(&tmp);
}

OCStepVisual_StyledItem^ OCSTEPConstruct_Styles::AddStyle(OCNaroWrappers::OCTopoDS_Shape^ Shape, OCNaroWrappers::OCStepVisual_PresentationStyleAssignment^ PSA, OCNaroWrappers::OCStepVisual_StyledItem^ Override)
{
  Handle(StepVisual_StyledItem) tmp = ((STEPConstruct_Styles*)nativeHandle)->AddStyle(*((TopoDS_Shape*)Shape->Handle), *((Handle_StepVisual_PresentationStyleAssignment*)PSA->Handle), *((Handle_StepVisual_StyledItem*)Override->Handle));
  return gcnew OCStepVisual_StyledItem(&tmp);
}

 System::Boolean OCSTEPConstruct_Styles::CreateMDGPR(OCNaroWrappers::OCStepRepr_RepresentationContext^ Context, OCNaroWrappers::OCStepVisual_MechanicalDesignGeometricPresentationRepresentation^ MDGPR)
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_Styles*)nativeHandle)->CreateMDGPR(*((Handle_StepRepr_RepresentationContext*)Context->Handle), *((Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation*)MDGPR->Handle)));
}

 System::Boolean OCSTEPConstruct_Styles::CreateNAUOSRD(OCNaroWrappers::OCStepRepr_RepresentationContext^ Context, OCNaroWrappers::OCStepShape_ContextDependentShapeRepresentation^ CDSR, OCNaroWrappers::OCStepRepr_ProductDefinitionShape^ initPDS)
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_Styles*)nativeHandle)->CreateNAUOSRD(*((Handle_StepRepr_RepresentationContext*)Context->Handle), *((Handle_StepShape_ContextDependentShapeRepresentation*)CDSR->Handle), *((Handle_StepRepr_ProductDefinitionShape*)initPDS->Handle)));
}

OCStepRepr_RepresentationContext^ OCSTEPConstruct_Styles::FindContext(OCNaroWrappers::OCTopoDS_Shape^ Shape)
{
  Handle(StepRepr_RepresentationContext) tmp = ((STEPConstruct_Styles*)nativeHandle)->FindContext(*((TopoDS_Shape*)Shape->Handle));
  return gcnew OCStepRepr_RepresentationContext(&tmp);
}

 System::Boolean OCSTEPConstruct_Styles::LoadStyles()
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_Styles*)nativeHandle)->LoadStyles());
}

 System::Boolean OCSTEPConstruct_Styles::LoadInvisStyles(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ InvSyles)
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_Styles*)nativeHandle)->LoadInvisStyles(*((Handle_TColStd_HSequenceOfTransient*)InvSyles->Handle)));
}

OCStepVisual_PresentationStyleAssignment^ OCSTEPConstruct_Styles::MakeColorPSA(OCNaroWrappers::OCStepRepr_RepresentationItem^ item, OCNaroWrappers::OCStepVisual_Colour^ SurfCol, OCNaroWrappers::OCStepVisual_Colour^ CurveCol, System::Boolean isForNAUO)
{
  Handle(StepVisual_PresentationStyleAssignment) tmp = ((STEPConstruct_Styles*)nativeHandle)->MakeColorPSA(*((Handle_StepRepr_RepresentationItem*)item->Handle), *((Handle_StepVisual_Colour*)SurfCol->Handle), *((Handle_StepVisual_Colour*)CurveCol->Handle), OCConverter::BooleanToStandardBoolean(isForNAUO));
  return gcnew OCStepVisual_PresentationStyleAssignment(&tmp);
}

OCStepVisual_PresentationStyleAssignment^ OCSTEPConstruct_Styles::GetColorPSA(OCNaroWrappers::OCStepRepr_RepresentationItem^ item, OCNaroWrappers::OCStepVisual_Colour^ Col)
{
  Handle(StepVisual_PresentationStyleAssignment) tmp = ((STEPConstruct_Styles*)nativeHandle)->GetColorPSA(*((Handle_StepRepr_RepresentationItem*)item->Handle), *((Handle_StepVisual_Colour*)Col->Handle));
  return gcnew OCStepVisual_PresentationStyleAssignment(&tmp);
}

 System::Boolean OCSTEPConstruct_Styles::GetColors(OCNaroWrappers::OCStepVisual_StyledItem^ style, OCNaroWrappers::OCStepVisual_Colour^ SurfCol, OCNaroWrappers::OCStepVisual_Colour^ BoundCol, OCNaroWrappers::OCStepVisual_Colour^ CurveCol, System::Boolean& IsComponent)
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_Styles*)nativeHandle)->GetColors(*((Handle_StepVisual_StyledItem*)style->Handle), *((Handle_StepVisual_Colour*)SurfCol->Handle), *((Handle_StepVisual_Colour*)BoundCol->Handle), *((Handle_StepVisual_Colour*)CurveCol->Handle), (Standard_Boolean&)(IsComponent)));
}

OCStepVisual_Colour^ OCSTEPConstruct_Styles::EncodeColor(OCNaroWrappers::OCQuantity_Color^ Col)
{
  Handle(StepVisual_Colour) tmp = STEPConstruct_Styles::EncodeColor(*((Quantity_Color*)Col->Handle));
  return gcnew OCStepVisual_Colour(&tmp);
}

OCStepVisual_Colour^ OCSTEPConstruct_Styles::EncodeColor(OCNaroWrappers::OCQuantity_Color^ Col, OCNaroWrappers::OCSTEPConstruct_DataMapOfAsciiStringTransient^ DPDCs, OCNaroWrappers::OCSTEPConstruct_DataMapOfPointTransient^ ColRGBs)
{
  Handle(StepVisual_Colour) tmp = STEPConstruct_Styles::EncodeColor(*((Quantity_Color*)Col->Handle), *((STEPConstruct_DataMapOfAsciiStringTransient*)DPDCs->Handle), *((STEPConstruct_DataMapOfPointTransient*)ColRGBs->Handle));
  return gcnew OCStepVisual_Colour(&tmp);
}

 System::Boolean OCSTEPConstruct_Styles::DecodeColor(OCNaroWrappers::OCStepVisual_Colour^ Colour, OCNaroWrappers::OCQuantity_Color^ Col)
{
  return OCConverter::StandardBooleanToBoolean(STEPConstruct_Styles::DecodeColor(*((Handle_StepVisual_Colour*)Colour->Handle), *((Quantity_Color*)Col->Handle)));
}


