// File generated by CPPExt (MPV)
//
#ifndef _STEPConstruct_Styles_OCWrappers_HeaderFile
#define _STEPConstruct_Styles_OCWrappers_HeaderFile

// include native header
#include <STEPConstruct_Styles.hxx>
#include "../Converter.h"

#include "STEPConstruct_Tool.h"

#include "../TColStd/TColStd_IndexedDataMapOfTransientTransient.h"
#include "../TColStd/TColStd_SequenceOfTransient.h"
#include "STEPConstruct_Tool.h"


namespace OCNaroWrappers
{

ref class OCXSControl_WorkSession;
ref class OCStepVisual_StyledItem;
ref class OCStepRepr_RepresentationItem;
ref class OCStepVisual_PresentationStyleAssignment;
ref class OCTopoDS_Shape;
ref class OCStepRepr_RepresentationContext;
ref class OCStepVisual_MechanicalDesignGeometricPresentationRepresentation;
ref class OCStepShape_ContextDependentShapeRepresentation;
ref class OCStepRepr_ProductDefinitionShape;
ref class OCTColStd_HSequenceOfTransient;
ref class OCStepVisual_Colour;
ref class OCQuantity_Color;
ref class OCSTEPConstruct_DataMapOfAsciiStringTransient;
ref class OCSTEPConstruct_DataMapOfPointTransient;


//! Provides a mechanism for reading and writing shape styles <br>
//!          (such as color) to and from the STEP file <br>
//!          This tool maintains a list of styles, either taking them <br>
//!          from STEP model (reading), or filling it by calls to <br>
//!          AddStyle or directly (writing). <br>
//!          Some methods deal with general structures of styles and <br>
//!          presentations in STEP, but there are methods which deal <br>
//!          with particular implementation of colors (as described in RP) <br>
public ref class OCSTEPConstruct_Styles  : public OCSTEPConstruct_Tool {

protected:
  // dummy constructor;
  OCSTEPConstruct_Styles(OCDummy^) : OCSTEPConstruct_Tool((OCDummy^)nullptr) {};

public:

// constructor from native
OCSTEPConstruct_Styles(STEPConstruct_Styles* nativeHandle);

// Methods PUBLIC

//! Creates an empty tool <br>
OCSTEPConstruct_Styles();

//! Creates a tool and initializes it <br>
OCSTEPConstruct_Styles(OCNaroWrappers::OCXSControl_WorkSession^ WS);

//! Initializes tool; returns True if succeeded <br>
 /*instead*/  System::Boolean Init(OCNaroWrappers::OCXSControl_WorkSession^ WS) ;

//! Returns number of defined styles <br>
 /*instead*/  Standard_Integer NbStyles() ;

//! Returns style with given index <br>
 /*instead*/  OCStepVisual_StyledItem^ Style(Standard_Integer i) ;

//! Clears all defined styles and PSA sequence <br>
 /*instead*/  void ClearStyles() ;

//! Adds a style to a sequence <br>
 /*instead*/  void AddStyle(OCNaroWrappers::OCStepVisual_StyledItem^ style) ;

//! Create a style linking giving PSA to the item, and add it to the <br>
//!          sequence of stored styles. If Override is not Null, then <br>
//!          the resulting style will be of the subtype OverridingStyledItem. <br>
 /*instead*/  OCStepVisual_StyledItem^ AddStyle(OCNaroWrappers::OCStepRepr_RepresentationItem^ item, OCNaroWrappers::OCStepVisual_PresentationStyleAssignment^ PSA, OCNaroWrappers::OCStepVisual_StyledItem^ Override) ;

//! Create a style linking giving PSA to the Shape, and add it to the <br>
//!          sequence of stored styles. If Override is not Null, then <br>
//!          the resulting style will be of the subtype OverridingStyledItem. <br>
//!          The Sape is used to find corresponding STEP entity by call to <br>
//!          STEPConstruct::FindEntity(), then previous method is called. <br>
 /*instead*/  OCStepVisual_StyledItem^ AddStyle(OCNaroWrappers::OCTopoDS_Shape^ Shape, OCNaroWrappers::OCStepVisual_PresentationStyleAssignment^ PSA, OCNaroWrappers::OCStepVisual_StyledItem^ Override) ;

//! Create MDGPR, fill it with all the styles previously defined, <br>
//!          and add it to the model <br>
 /*instead*/  System::Boolean CreateMDGPR(OCNaroWrappers::OCStepRepr_RepresentationContext^ Context, OCNaroWrappers::OCStepVisual_MechanicalDesignGeometricPresentationRepresentation^ MDGPR) ;

//! Create MDGPR, fill it with all the styles previously defined, <br>
//!          and add it to the model <br>
//!          IMPORTANT: <initPDS> must be null when use for NAUO colors <br>
//!          <initPDS> initialised only for SHUO case. <br>
 /*instead*/  System::Boolean CreateNAUOSRD(OCNaroWrappers::OCStepRepr_RepresentationContext^ Context, OCNaroWrappers::OCStepShape_ContextDependentShapeRepresentation^ CDSR, OCNaroWrappers::OCStepRepr_ProductDefinitionShape^ initPDS) ;

//! Searches the STEP model for the RepresentationContext in which <br>
//!          given shape is defined. This context (if found) can be used <br>
//!          then in call to CreateMDGPR() <br>
 /*instead*/  OCStepRepr_RepresentationContext^ FindContext(OCNaroWrappers::OCTopoDS_Shape^ Shape) ;

//! Searches the STEP model for the MDGPR or DM entities <br>
//!          (which bring styles) and fills sequence of styles <br>
 /*instead*/  System::Boolean LoadStyles() ;

//! Searches the STEP model for the INISIBILITY enteties <br>
//!          (which bring styles) and fills out sequence of styles <br>
 /*instead*/  System::Boolean LoadInvisStyles(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ InvSyles) ;

//! Create a PresentationStyleAssignment entity which defines <br>
//!          two colors (for filling surfaces and curves) <br>
//!          if isForNAUO true then returns PresentationStyleByContext <br>
 /*instead*/  OCStepVisual_PresentationStyleAssignment^ MakeColorPSA(OCNaroWrappers::OCStepRepr_RepresentationItem^ item, OCNaroWrappers::OCStepVisual_Colour^ SurfCol, OCNaroWrappers::OCStepVisual_Colour^ CurveCol, System::Boolean isForNAUO) ;

//! Returns a PresentationStyleAssignment entity which defines <br>
//!          surface and curve colors as Col. This PSA is either created <br>
//!          or taken from internal map where all PSAs created by this <br>
//!          method are remembered. <br>
 /*instead*/  OCStepVisual_PresentationStyleAssignment^ GetColorPSA(OCNaroWrappers::OCStepRepr_RepresentationItem^ item, OCNaroWrappers::OCStepVisual_Colour^ Col) ;

//! Extract color definitions from the style entity <br>
//!          For each type of color supported, result can be either <br>
//!          NULL if it is not defined by that style, or last <br>
//!          definition (if they are 1 or more) <br>
 /*instead*/  System::Boolean GetColors(OCNaroWrappers::OCStepVisual_StyledItem^ style, OCNaroWrappers::OCStepVisual_Colour^ SurfCol, OCNaroWrappers::OCStepVisual_Colour^ BoundCol, OCNaroWrappers::OCStepVisual_Colour^ CurveCol, System::Boolean& IsComponent) ;

//! Create STEP color entity by given Quantity_Color <br>
//!          The analysis is performed for whether the color corresponds to <br>
//!          one of standard colors predefined in STEP. In that case, <br>
//!          PredefinedColour entity is created instead of RGBColour <br>
static /*instead*/  OCStepVisual_Colour^ EncodeColor(OCNaroWrappers::OCQuantity_Color^ Col) ;

//! Create STEP color entity by given Quantity_Color <br>
//!          The analysis is performed for whether the color corresponds to <br>
//!          one of standard colors predefined in STEP. In that case, <br>
//!          PredefinedColour entity is created instead of RGBColour <br>
static /*instead*/  OCStepVisual_Colour^ EncodeColor(OCNaroWrappers::OCQuantity_Color^ Col, OCNaroWrappers::OCSTEPConstruct_DataMapOfAsciiStringTransient^ DPDCs, OCNaroWrappers::OCSTEPConstruct_DataMapOfPointTransient^ ColRGBs) ;

//! Decodes STEP color and fills the Quantity_Color. <br>
//!          Returns True if OK or False if color is not recognized <br>
static /*instead*/  System::Boolean DecodeColor(OCNaroWrappers::OCStepVisual_Colour^ Colour, OCNaroWrappers::OCQuantity_Color^ Col) ;

~OCSTEPConstruct_Styles()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
