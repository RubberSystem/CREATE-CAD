// File generated by CPPExt (MPV)
//
#ifndef _STEPConstruct_UnitContext_OCWrappers_HeaderFile
#define _STEPConstruct_UnitContext_OCWrappers_HeaderFile

// include native header
#include <STEPConstruct_UnitContext.hxx>
#include "../Converter.h"


#include "../StepGeom/StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.h"
#include "../StepBasic/StepBasic_SiPrefix.h"


namespace OCNaroWrappers
{

ref class OCStepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx;
ref class OCStepRepr_GlobalUnitAssignedContext;
ref class OCStepBasic_NamedUnit;
ref class OCStepRepr_GlobalUncertaintyAssignedContext;
ref class OCStepBasic_SiUnit;


//! Tool for creation (encoding) and decoding (for writing and reading <br>
//!          accordingly) context defining units and tolerances (uncerntanties) <br>
public ref class OCSTEPConstruct_UnitContext  {

protected:
  STEPConstruct_UnitContext* nativeHandle;
  OCSTEPConstruct_UnitContext(OCDummy^) {};

public:
  property STEPConstruct_UnitContext* Handle
  {
    STEPConstruct_UnitContext* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCSTEPConstruct_UnitContext(STEPConstruct_UnitContext* nativeHandle);

// Methods PUBLIC

//! Creates empty tool <br>
OCSTEPConstruct_UnitContext();

//! Creates new context (units are MM and radians, <br>
//!          uncertainty equal to Tol3d) <br>
 /*instead*/  void Init(Standard_Real Tol3d) ;

//! Returns True if Init was called successfully <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns context (or Null if not done) <br>
 /*instead*/  OCStepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx^ Value() ;

//! Computes the length, plane angle and solid angle conversion <br>
//!          factor  .  Returns a status, 0 if OK <br>
 /*instead*/  Standard_Integer ComputeFactors(OCNaroWrappers::OCStepRepr_GlobalUnitAssignedContext^ aContext) ;


 /*instead*/  Standard_Integer ComputeFactors(OCNaroWrappers::OCStepBasic_NamedUnit^ aUnit) ;

//! Computes the uncertainty value (for length) <br>
 /*instead*/  Standard_Integer ComputeTolerance(OCNaroWrappers::OCStepRepr_GlobalUncertaintyAssignedContext^ aContext) ;

//! Returns the lengthFactor <br>
 /*instead*/  Standard_Real LengthFactor() ;

//! Returns the planeAngleFactor <br>
 /*instead*/  Standard_Real PlaneAngleFactor() ;

//! Returns the solidAngleFactor <br>
 /*instead*/  Standard_Real SolidAngleFactor() ;

//! Returns the Uncertainty value (for length) <br>
//!          It has been converted  with LengthFactor <br>
 /*instead*/  Standard_Real Uncertainty() ;

//! Returns the areaFactor <br>
 /*instead*/  Standard_Real AreaFactor() ;

//! Returns the volumeFactor <br>
 /*instead*/  Standard_Real VolumeFactor() ;

//! Tells if a Uncertainty (for length) is recorded <br>
 /*instead*/  System::Boolean HasUncertainty() ;

//! Returns true if ComputeFactors has calculated <br>
//!          a LengthFactor <br>
 /*instead*/  System::Boolean LengthDone() ;

//! Returns true if ComputeFactors has calculated <br>
//!          a PlaneAngleFactor <br>
 /*instead*/  System::Boolean PlaneAngleDone() ;

//! Returns true if ComputeFactors has calculated <br>
//!          a SolidAngleFactor <br>
 /*instead*/  System::Boolean SolidAngleDone() ;

//! Returns true if areaFactor is computed <br>
 /*instead*/  System::Boolean AreaDone() ;

//! Returns true if volumeFactor is computed <br>
 /*instead*/  System::Boolean VolumeDone() ;

//! Returns a message for a given status (0 - empty) <br>
//!          This message can then be added as warning for transfer <br>
 /*instead*/  System::String^ StatusMessage(Standard_Integer status) ;

//! Convert SI prefix defined by enumertaion to corresponding <br>
//!          real factor (e.g. 1e6 for mega) <br>
static /*instead*/  Standard_Real ConvertSiPrefix(OCStepBasic_SiPrefix aPrefix) ;

~OCSTEPConstruct_UnitContext()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
