// File generated by CPPExt (CPP file)
//

#include "STEPConstruct_UnitContext.h"
#include "../Converter.h"
#include "../StepGeom/StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx.h"
#include "../StepRepr/StepRepr_GlobalUnitAssignedContext.h"
#include "../StepBasic/StepBasic_NamedUnit.h"
#include "../StepRepr/StepRepr_GlobalUncertaintyAssignedContext.h"
#include "../StepBasic/StepBasic_SiUnit.h"


using namespace OCNaroWrappers;

OCSTEPConstruct_UnitContext::OCSTEPConstruct_UnitContext(STEPConstruct_UnitContext* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCSTEPConstruct_UnitContext::OCSTEPConstruct_UnitContext() 
{
  nativeHandle = new STEPConstruct_UnitContext();
}

 void OCSTEPConstruct_UnitContext::Init(Standard_Real Tol3d)
{
  ((STEPConstruct_UnitContext*)nativeHandle)->Init(Tol3d);
}

 System::Boolean OCSTEPConstruct_UnitContext::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_UnitContext*)nativeHandle)->IsDone());
}

OCStepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx^ OCSTEPConstruct_UnitContext::Value()
{
  StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx* tmp = new StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx();
  *tmp = ((STEPConstruct_UnitContext*)nativeHandle)->Value();
  return gcnew OCStepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(tmp);
}

 Standard_Integer OCSTEPConstruct_UnitContext::ComputeFactors(OCNaroWrappers::OCStepRepr_GlobalUnitAssignedContext^ aContext)
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->ComputeFactors(*((Handle_StepRepr_GlobalUnitAssignedContext*)aContext->Handle));
}

 Standard_Integer OCSTEPConstruct_UnitContext::ComputeFactors(OCNaroWrappers::OCStepBasic_NamedUnit^ aUnit)
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->ComputeFactors(*((Handle_StepBasic_NamedUnit*)aUnit->Handle));
}

 Standard_Integer OCSTEPConstruct_UnitContext::ComputeTolerance(OCNaroWrappers::OCStepRepr_GlobalUncertaintyAssignedContext^ aContext)
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->ComputeTolerance(*((Handle_StepRepr_GlobalUncertaintyAssignedContext*)aContext->Handle));
}

 Standard_Real OCSTEPConstruct_UnitContext::LengthFactor()
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->LengthFactor();
}

 Standard_Real OCSTEPConstruct_UnitContext::PlaneAngleFactor()
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->PlaneAngleFactor();
}

 Standard_Real OCSTEPConstruct_UnitContext::SolidAngleFactor()
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->SolidAngleFactor();
}

 Standard_Real OCSTEPConstruct_UnitContext::Uncertainty()
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->Uncertainty();
}

 Standard_Real OCSTEPConstruct_UnitContext::AreaFactor()
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->AreaFactor();
}

 Standard_Real OCSTEPConstruct_UnitContext::VolumeFactor()
{
  return ((STEPConstruct_UnitContext*)nativeHandle)->VolumeFactor();
}

 System::Boolean OCSTEPConstruct_UnitContext::HasUncertainty()
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_UnitContext*)nativeHandle)->HasUncertainty());
}

 System::Boolean OCSTEPConstruct_UnitContext::LengthDone()
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_UnitContext*)nativeHandle)->LengthDone());
}

 System::Boolean OCSTEPConstruct_UnitContext::PlaneAngleDone()
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_UnitContext*)nativeHandle)->PlaneAngleDone());
}

 System::Boolean OCSTEPConstruct_UnitContext::SolidAngleDone()
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_UnitContext*)nativeHandle)->SolidAngleDone());
}

 System::Boolean OCSTEPConstruct_UnitContext::AreaDone()
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_UnitContext*)nativeHandle)->AreaDone());
}

 System::Boolean OCSTEPConstruct_UnitContext::VolumeDone()
{
  return OCConverter::StandardBooleanToBoolean(((STEPConstruct_UnitContext*)nativeHandle)->VolumeDone());
}

 System::String^ OCSTEPConstruct_UnitContext::StatusMessage(Standard_Integer status)
{
  return OCConverter::StandardCStringToString(((STEPConstruct_UnitContext*)nativeHandle)->StatusMessage(status));
}

 Standard_Real OCSTEPConstruct_UnitContext::ConvertSiPrefix(OCStepBasic_SiPrefix aPrefix)
{
  return STEPConstruct_UnitContext::ConvertSiPrefix((StepBasic_SiPrefix)aPrefix);
}


