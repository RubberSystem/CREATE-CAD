// File generated by CPPExt (CPP file)
//

#include "TopOpeBRepBuild_BlockBuilder.h"
#include "../Converter.h"
#include "TopOpeBRepBuild_ShapeSet.h"
#include "TopOpeBRepBuild_BlockIterator.h"
#include "../TopoDS/TopoDS_Shape.h"


using namespace OCNaroWrappers;

OCTopOpeBRepBuild_BlockBuilder::OCTopOpeBRepBuild_BlockBuilder(TopOpeBRepBuild_BlockBuilder* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRepBuild_BlockBuilder::OCTopOpeBRepBuild_BlockBuilder() 
{
  nativeHandle = new TopOpeBRepBuild_BlockBuilder();
}

OCTopOpeBRepBuild_BlockBuilder::OCTopOpeBRepBuild_BlockBuilder(OCNaroWrappers::OCTopOpeBRepBuild_ShapeSet^ SS) 
{
  nativeHandle = new TopOpeBRepBuild_BlockBuilder(*((TopOpeBRepBuild_ShapeSet*)SS->Handle));
}

 void OCTopOpeBRepBuild_BlockBuilder::MakeBlock(OCNaroWrappers::OCTopOpeBRepBuild_ShapeSet^ SS)
{
  ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->MakeBlock(*((TopOpeBRepBuild_ShapeSet*)SS->Handle));
}

 void OCTopOpeBRepBuild_BlockBuilder::InitBlock()
{
  ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->InitBlock();
}

 System::Boolean OCTopOpeBRepBuild_BlockBuilder::MoreBlock()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->MoreBlock());
}

 void OCTopOpeBRepBuild_BlockBuilder::NextBlock()
{
  ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->NextBlock();
}

OCTopOpeBRepBuild_BlockIterator^ OCTopOpeBRepBuild_BlockBuilder::BlockIterator()
{
  TopOpeBRepBuild_BlockIterator* tmp = new TopOpeBRepBuild_BlockIterator();
  *tmp = ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->BlockIterator();
  return gcnew OCTopOpeBRepBuild_BlockIterator(tmp);
}

OCTopoDS_Shape^ OCTopOpeBRepBuild_BlockBuilder::Element(OCNaroWrappers::OCTopOpeBRepBuild_BlockIterator^ BI)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->Element(*((TopOpeBRepBuild_BlockIterator*)BI->Handle));
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTopOpeBRepBuild_BlockBuilder::Element(Standard_Integer I)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->Element(I);
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Integer OCTopOpeBRepBuild_BlockBuilder::Element(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  return ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->Element(*((TopoDS_Shape*)S->Handle));
}

 System::Boolean OCTopOpeBRepBuild_BlockBuilder::ElementIsValid(OCNaroWrappers::OCTopOpeBRepBuild_BlockIterator^ BI)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->ElementIsValid(*((TopOpeBRepBuild_BlockIterator*)BI->Handle)));
}

 System::Boolean OCTopOpeBRepBuild_BlockBuilder::ElementIsValid(Standard_Integer I)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->ElementIsValid(I));
}

 Standard_Integer OCTopOpeBRepBuild_BlockBuilder::AddElement(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  return ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->AddElement(*((TopoDS_Shape*)S->Handle));
}

 void OCTopOpeBRepBuild_BlockBuilder::SetValid(OCNaroWrappers::OCTopOpeBRepBuild_BlockIterator^ BI, System::Boolean isvalid)
{
  ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->SetValid(*((TopOpeBRepBuild_BlockIterator*)BI->Handle), OCConverter::BooleanToStandardBoolean(isvalid));
}

 void OCTopOpeBRepBuild_BlockBuilder::SetValid(Standard_Integer I, System::Boolean isvalid)
{
  ((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->SetValid(I, OCConverter::BooleanToStandardBoolean(isvalid));
}

 System::Boolean OCTopOpeBRepBuild_BlockBuilder::CurrentBlockIsRegular()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRepBuild_BlockBuilder*)nativeHandle)->CurrentBlockIsRegular());
}


