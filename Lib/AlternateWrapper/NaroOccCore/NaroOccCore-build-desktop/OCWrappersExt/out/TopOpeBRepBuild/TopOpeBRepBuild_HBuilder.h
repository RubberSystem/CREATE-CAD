// File generated by CPPExt (Transient)
//
#ifndef _TopOpeBRepBuild_HBuilder_OCWrappers_HeaderFile
#define _TopOpeBRepBuild_HBuilder_OCWrappers_HeaderFile

// include the wrapped class
#include <TopOpeBRepBuild_HBuilder.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "TopOpeBRepBuild_Builder1.h"
#include "../TopTools/TopTools_DataMapOfShapeInteger.h"
#include "../TColStd/TColStd_DataMapOfIntegerListOfInteger.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TColStd/TColStd_ListOfInteger.h"
#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{

ref class OCTopOpeBRepDS_BuildTool;
ref class OCTopOpeBRepDS_HDataStructure;
ref class OCTopoDS_Shape;
ref class OCTopTools_ListOfShape;
ref class OCTColStd_ListOfInteger;
ref class OCTopOpeBRepBuild_Builder;


//! The HBuilder  algorithm    constructs   topological <br>
//!          objects  from   an    existing  topology  and  new <br>
//!          geometries attached to the topology. It is used to <br>
//!          construct the result of a topological operation; <br>
//!          the existing  topologies are the parts involved in <br>
//!          the  topological  operation and the new geometries <br>
//!          are the intersection lines and points. <br>
public ref class OCTopOpeBRepBuild_HBuilder : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCTopOpeBRepBuild_HBuilder(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCTopOpeBRepBuild_HBuilder(Handle(TopOpeBRepBuild_HBuilder)* nativeHandle);

// Methods PUBLIC


OCTopOpeBRepBuild_HBuilder(OCNaroWrappers::OCTopOpeBRepDS_BuildTool^ BT);


 /*instead*/  OCTopOpeBRepDS_BuildTool^ BuildTool() ;


//! Stores the data structure <HDS>, <br>
//! Create shapes from the new geometries described in <HDS>. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;


//! Same as previous + evaluates if an operation performed on shapes S1,S2 <br>
//! is a particular case. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS, OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2) ;

//! Removes all split and merge already performed. <br>
//! 	        Does NOT clear the handled DS. <br>
 /*instead*/  void Clear() ;

//! returns the DS handled by this builder <br>
 /*instead*/  OCTopOpeBRepDS_HDataStructure^ DataStructure() ;


 /*instead*/  OCTopOpeBRepDS_BuildTool^ ChangeBuildTool() ;

//! Merges the two shapes <S1> and <S2> keeping the <br>
//!          parts of states <TB1>,<TB2> in <S1>,<S2>. <br>
 /*instead*/  void MergeShapes(OCNaroWrappers::OCTopoDS_Shape^ S1, OCTopAbs_State TB1, OCNaroWrappers::OCTopoDS_Shape^ S2, OCTopAbs_State TB2) ;

//! Merges  the two solids <S1>   and <S2> keeping the <br>
//!          parts in each solid of states <TB1> and <TB2>. <br>
 /*instead*/  void MergeSolids(OCNaroWrappers::OCTopoDS_Shape^ S1, OCTopAbs_State TB1, OCNaroWrappers::OCTopoDS_Shape^ S2, OCTopAbs_State TB2) ;

//! Merges the solid <S>  keeping the <br>
//!          parts of state <TB>. <br>
 /*instead*/  void MergeSolid(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_State TB) ;


//! Returns True if the shape <S> has been split. <br>
 /*instead*/  System::Boolean IsSplit(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_State ToBuild) ;


//! Returns the split parts <ToBuild> of shape <S>. <br>
 /*instead*/  OCTopTools_ListOfShape^ Splits(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_State ToBuild) ;


//! Returns True if the shape <S> has been merged. <br>
 /*instead*/  System::Boolean IsMerged(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_State ToBuild) ;


//! Returns the merged parts <ToBuild> of shape <S>. <br>
 /*instead*/  OCTopTools_ListOfShape^ Merged(OCNaroWrappers::OCTopoDS_Shape^ S, OCTopAbs_State ToBuild) ;


//! Returns the vertex created on point <I>. <br>
 /*instead*/  OCTopoDS_Shape^ NewVertex(Standard_Integer I) ;


//! Returns the edges created on curve <I>. <br>
 /*instead*/  OCTopTools_ListOfShape^ NewEdges(Standard_Integer I) ;


//! Returns the edges created on curve <I>. <br>
 /*instead*/  OCTopTools_ListOfShape^ ChangeNewEdges(Standard_Integer I) ;


//! Returns the faces created on surface <I>. <br>
 /*instead*/  OCTopTools_ListOfShape^ NewFaces(Standard_Integer I) ;


 /*instead*/  OCTopTools_ListOfShape^ Section() ;


 /*instead*/  void InitExtendedSectionDS(Standard_Integer k) ;


 /*instead*/  void InitSection(Standard_Integer k) ;


 /*instead*/  System::Boolean MoreSection() ;


 /*instead*/  void NextSection() ;


 /*instead*/  OCTopoDS_Shape^ CurrentSection() ;


 /*instead*/  Standard_Integer GetDSEdgeFromSectEdge(OCNaroWrappers::OCTopoDS_Shape^ E, Standard_Integer rank) ;


 /*instead*/  OCTColStd_ListOfInteger^ GetDSFaceFromDSEdge(Standard_Integer indexEdg, Standard_Integer rank) ;


 /*instead*/  Standard_Integer GetDSCurveFromSectEdge(OCNaroWrappers::OCTopoDS_Shape^ SectEdge) ;


 /*instead*/  Standard_Integer GetDSFaceFromDSCurve(Standard_Integer indexCur, Standard_Integer rank) ;


 /*instead*/  Standard_Integer GetDSPointFromNewVertex(OCNaroWrappers::OCTopoDS_Shape^ NewVert) ;

//! search for the couple of face F1,F2 <br>
//! (from arguments of supra Perform(S1,S2,HDS)) method which <br>
//! intersection gives section edge E built on an intersection curve. <br>
//! returns True if F1,F2 have been valued. <br>
//! returns False if E is not a section edge built <br>
//! on intersection curve IC. <br>
 /*instead*/  System::Boolean EdgeCurveAncestors(OCNaroWrappers::OCTopoDS_Shape^ E, OCNaroWrappers::OCTopoDS_Shape^ F1, OCNaroWrappers::OCTopoDS_Shape^ F2, Standard_Integer& IC) ;

//! search for the couple of face F1,F2 <br>
//! (from arguments of supra Perform(S1,S2,HDS)) method which <br>
//! intersection gives section edge E built on at least one edge . <br>
//! returns True if F1,F2 have been valued. <br>
//! returns False if E is not a section edge built <br>
//! on at least one edge of S1 and/or S2. <br>
//! LE1,LE2 are edges of S1,S2 which common part is edge E. <br>
//! LE1 or LE2 may be empty() but not both. <br>
 /*instead*/  System::Boolean EdgeSectionAncestors(OCNaroWrappers::OCTopoDS_Shape^ E, OCNaroWrappers::OCTopTools_ListOfShape^ LF1, OCNaroWrappers::OCTopTools_ListOfShape^ LF2, OCNaroWrappers::OCTopTools_ListOfShape^ LE1, OCNaroWrappers::OCTopTools_ListOfShape^ LE2) ;

//! Returns 0 is standard operation, != 0 if particular case <br>
 /*instead*/  Standard_Integer IsKPart() ;


 /*instead*/  void MergeKPart(OCTopAbs_State TB1, OCTopAbs_State TB2) ;


 /*instead*/  OCTopOpeBRepBuild_Builder^ ChangeBuilder() ;

~OCTopOpeBRepBuild_HBuilder()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
