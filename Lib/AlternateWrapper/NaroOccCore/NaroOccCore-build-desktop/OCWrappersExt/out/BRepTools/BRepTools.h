// File generated by CPPExt (Package)
//

#ifndef _BRepTools_OCWrappers_HeaderFile
#define _BRepTools_OCWrappers_HeaderFile

// Include the wrapped header
#include <BRepTools.hxx>

#include "BRepTools_WireExplorer.h"
#include "BRepTools_Modification.h"
#include "BRepTools_Modifier.h"
#include "BRepTools_TrsfModification.h"
#include "BRepTools_NurbsConvertModification.h"
#include "BRepTools_GTrsfModification.h"
#include "BRepTools_Substitution.h"
#include "BRepTools_Quilt.h"
#include "BRepTools_ShapeSet.h"
#include "BRepTools_ReShape.h"
#include "BRepTools_MapOfVertexPnt2d.h"
#include "BRepTools_DataMapNodeOfMapOfVertexPnt2d.h"
#include "BRepTools_DataMapIteratorOfMapOfVertexPnt2d.h"


namespace OCNaroWrappers
{
//! The BRepTools package provides  utilities for BRep <br>
//!          data structures. <br>
//! <br>
//!          * WireExplorer : A tool to explore the topology of <br>
//!          a wire in the order of the edges. <br>
//! <br>
//!          * ShapeSet :  Tools used for  dumping, writing and <br>
//!          reading. <br>
//! <br>
//!          * UVBounds : Methods to compute the  limits of the <br>
//!          boundary  of a  face,  a wire or   an edge in  the <br>
//!          parametric space of a face. <br>
//! <br>
//!          *  Update : Methods  to call when   a topology has <br>
//!          been created to compute all missing data. <br>
//! <br>
//!          * UpdateFaceUVPoints  :  Method to  update  the UV <br>
//!          points stored   with  the edges   on a face.  This <br>
//!          method ensure that connected  edges  have the same <br>
//!          UV point on their common extremity. <br>
//! <br>
//!          * Compare : Method to compare two vertices. <br>
//! <br>
//!          * Compare : Method to compare two edges. <br>
//! <br>
//!          * OuterWire : A method to find the outer wire of a <br>
//!          face. <br>
//! <br>
//!          * OuterShell : A method to find the outer shell of <br>
//!          a solid. <br>
//! <br>
//!          * Map3DEdges : A method to map all the 3D Edges of <br>
//!          a Shape. <br>
//! <br>
//!          * Dump : A method to dump a BRep object. <br>
//! <br>
public ref class OCBRepTools abstract sealed
{

public:
// Methods

//! Returns in UMin,  UMax, VMin,  VMax  the  bounding <br>
//!          values in the parametric space of F. <br>
static /*instead*/  void UVBounds(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real& UMin, Standard_Real& UMax, Standard_Real& VMin, Standard_Real& VMax) ;

//! Returns in UMin,  UMax, VMin,  VMax  the  bounding <br>
//!          values of the wire in the parametric space of F. <br>
static /*instead*/  void UVBounds(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Wire^ W, Standard_Real& UMin, Standard_Real& UMax, Standard_Real& VMin, Standard_Real& VMax) ;

//! Returns in UMin,  UMax, VMin,  VMax  the  bounding <br>
//!          values of the edge in the parametric space of F. <br>
static /*instead*/  void UVBounds(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real& UMin, Standard_Real& UMax, Standard_Real& VMin, Standard_Real& VMax) ;

//! Adds  to  the box <B>  the bounding values in  the <br>
//!          parametric space of F. <br>
static /*instead*/  void AddUVBounds(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCBnd_Box2d^ B) ;

//! Adds  to the box  <B>  the bounding  values of the <br>
//!          wire in the parametric space of F. <br>
static /*instead*/  void AddUVBounds(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Wire^ W, OCNaroWrappers::OCBnd_Box2d^ B) ;

//! Adds to  the box <B>  the  bounding values  of the <br>
//!          edge in the parametric space of F. <br>
static /*instead*/  void AddUVBounds(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCBnd_Box2d^ B) ;

//! Update a vertex (nothing is done) <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_Vertex^ V) ;

//! Update an edge, compute 2d bounding boxes. <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Update a wire (nothing is done) <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_Wire^ W) ;

//! Update a Face, update UV points. <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Update a shell (nothing is done) <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_Shell^ S) ;

//! Update a solid (nothing is done) <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_Solid^ S) ;

//! Update a composite solid (nothing is done) <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_CompSolid^ C) ;

//! Update a compound (nothing is done) <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_Compound^ C) ;

//! Update a shape, call the corect update. <br>
static /*instead*/  void Update(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! For  all the edges  of the face  <F> reset  the UV <br>
//!          points to  ensure that  connected  faces  have the <br>
//!          same point at there common extremity. <br>
static /*instead*/  void UpdateFaceUVPoints(OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Removes all the triangulations of the faces of <S> <br>
//!          and removes all polygons on triangulations of the <br>
//!          edges. <br>
static /*instead*/  void Clean(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Removes all the pcurves of the edges of <S> that <br>
//!          refer to surfaces not belonging to any face of <S> <br>
static /*instead*/  void RemoveUnusedPCurves(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! verifies that each face from the shape <S> has got <br>
//!          a triangulation  with a  deflection <= deflec  and <br>
//!          the edges a discretisation on  this triangulation. <br>
static /*instead*/  System::Boolean Triangulation(OCNaroWrappers::OCTopoDS_Shape^ S, Standard_Real deflec) ;

//! Returns  True if  the    distance between the  two <br>
//!          vertices is lower than their tolerance. <br>
static /*instead*/  System::Boolean Compare(OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2) ;

//! Returns  True if  the    distance between the  two <br>
//!          edges is lower than their tolerance. <br>
static /*instead*/  System::Boolean Compare(OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2) ;

//! Returns the outer most wire of <F>. Returns a Null <br>
//!          wire if <F> has no wires. <br>
static /*instead*/  OCTopoDS_Wire^ OuterWire(OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Returns the outer most shell of <S>. Returns a Null <br>
//!          wire if <S> has no shells. <br>
static /*instead*/  OCTopoDS_Shell^ OuterShell(OCNaroWrappers::OCTopoDS_Solid^ S) ;

//! Stores in the map  <M> all the 3D topology edges <br>
//!          of <S>. <br>
static /*instead*/  void Map3DEdges(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_IndexedMapOfShape^ M) ;


static /*instead*/  System::Boolean IsReallyClosed(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F) ;

//! Dumps the topological structure and the geometry <br>
//!          of <Sh> on the stream <S>. <br>
static /*instead*/  void Dump(OCNaroWrappers::OCTopoDS_Shape^ Sh, Standard_OStream& S) ;

//! Writes <Sh> on <S> in an ASCII format. <br>
static /*instead*/  void Write(OCNaroWrappers::OCTopoDS_Shape^ Sh, Standard_OStream& S, OCNaroWrappers::OCMessage_ProgressIndicator^ PR) ;

//! Reads a Shape  from <S> in  returns it in  <Sh>. <br>
//!          <B> is used to build the shape. <br>
static /*instead*/  void Read(OCNaroWrappers::OCTopoDS_Shape^ Sh, Standard_IStream& S, OCNaroWrappers::OCBRep_Builder^ B, OCNaroWrappers::OCMessage_ProgressIndicator^ PR) ;

//! Writes <Sh> in <File>. <br>
static /*instead*/  System::Boolean Write(OCNaroWrappers::OCTopoDS_Shape^ Sh, System::String^ File, OCNaroWrappers::OCMessage_ProgressIndicator^ PR) ;

//! Reads a Shape  from <File>,  returns it in  <Sh>. <br>
//!          <B> is used to build the shape. <br>
static /*instead*/  System::Boolean Read(OCNaroWrappers::OCTopoDS_Shape^ Sh, System::String^ File, OCNaroWrappers::OCBRep_Builder^ B, OCNaroWrappers::OCMessage_ProgressIndicator^ PR) ;


};

}; // OCNaroWrappers

#endif
