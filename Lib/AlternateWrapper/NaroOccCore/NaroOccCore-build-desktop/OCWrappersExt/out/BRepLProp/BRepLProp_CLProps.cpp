// File generated by CPPExt (CPP file)
//

#include "BRepLProp_CLProps.h"
#include "../Converter.h"
#include "../BRepAdaptor/BRepAdaptor_Curve.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Dir.h"
#include "BRepLProp_CurveTool.h"


using namespace OCNaroWrappers;

OCBRepLProp_CLProps::OCBRepLProp_CLProps(BRepLProp_CLProps* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepLProp_CLProps::OCBRepLProp_CLProps(OCNaroWrappers::OCBRepAdaptor_Curve^ C, Standard_Integer N, Standard_Real Resolution) 
{
  nativeHandle = new BRepLProp_CLProps(*((BRepAdaptor_Curve*)C->Handle), N, Resolution);
}

OCBRepLProp_CLProps::OCBRepLProp_CLProps(OCNaroWrappers::OCBRepAdaptor_Curve^ C, Standard_Real U, Standard_Integer N, Standard_Real Resolution) 
{
  nativeHandle = new BRepLProp_CLProps(*((BRepAdaptor_Curve*)C->Handle), U, N, Resolution);
}

OCBRepLProp_CLProps::OCBRepLProp_CLProps(Standard_Integer N, Standard_Real Resolution) 
{
  nativeHandle = new BRepLProp_CLProps(N, Resolution);
}

 void OCBRepLProp_CLProps::SetParameter(Standard_Real U)
{
  ((BRepLProp_CLProps*)nativeHandle)->SetParameter(U);
}

 void OCBRepLProp_CLProps::SetCurve(OCNaroWrappers::OCBRepAdaptor_Curve^ C)
{
  ((BRepLProp_CLProps*)nativeHandle)->SetCurve(*((BRepAdaptor_Curve*)C->Handle));
}

OCgp_Pnt^ OCBRepLProp_CLProps::Value()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((BRepLProp_CLProps*)nativeHandle)->Value();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Vec^ OCBRepLProp_CLProps::D1()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepLProp_CLProps*)nativeHandle)->D1();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCBRepLProp_CLProps::D2()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepLProp_CLProps*)nativeHandle)->D2();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCBRepLProp_CLProps::D3()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((BRepLProp_CLProps*)nativeHandle)->D3();
  return gcnew OCgp_Vec(tmp);
}

 System::Boolean OCBRepLProp_CLProps::IsTangentDefined()
{
  return OCConverter::StandardBooleanToBoolean(((BRepLProp_CLProps*)nativeHandle)->IsTangentDefined());
}

 void OCBRepLProp_CLProps::Tangent(OCNaroWrappers::OCgp_Dir^ D)
{
  ((BRepLProp_CLProps*)nativeHandle)->Tangent(*((gp_Dir*)D->Handle));
}

 Standard_Real OCBRepLProp_CLProps::Curvature()
{
  return ((BRepLProp_CLProps*)nativeHandle)->Curvature();
}

 void OCBRepLProp_CLProps::Normal(OCNaroWrappers::OCgp_Dir^ N)
{
  ((BRepLProp_CLProps*)nativeHandle)->Normal(*((gp_Dir*)N->Handle));
}

 void OCBRepLProp_CLProps::CentreOfCurvature(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((BRepLProp_CLProps*)nativeHandle)->CentreOfCurvature(*((gp_Pnt*)P->Handle));
}


