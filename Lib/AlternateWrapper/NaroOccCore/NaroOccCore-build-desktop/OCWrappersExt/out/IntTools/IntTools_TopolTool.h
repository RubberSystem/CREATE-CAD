// File generated by CPPExt (Transient)
//
#ifndef _IntTools_TopolTool_OCWrappers_HeaderFile
#define _IntTools_TopolTool_OCWrappers_HeaderFile

// include the wrapped class
#include <IntTools_TopolTool.hxx>
#include "../Converter.h"

#include "../Adaptor3d/Adaptor3d_TopolTool.h"



namespace OCNaroWrappers
{

ref class OCAdaptor3d_HSurface;
ref class OCgp_Pnt2d;
ref class OCgp_Pnt;


//! Class redefine methods of TopolTool from Adaptor3d <br>
//!         concerning sample points <br>
public ref class OCIntTools_TopolTool : OCAdaptor3d_TopolTool {

protected:
  // dummy constructor;
  OCIntTools_TopolTool(OCDummy^) : OCAdaptor3d_TopolTool((OCDummy^)nullptr) {};

public:

// constructor from native
OCIntTools_TopolTool(Handle(IntTools_TopolTool)* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCIntTools_TopolTool();


//! Initializes me by surface <br>
OCIntTools_TopolTool(OCNaroWrappers::OCAdaptor3d_HSurface^ theSurface);


//! Redefined empty initializer <br>
virtual /*instead*/  void Initialize() override;


//! Initializes me by surface <br>
virtual /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_HSurface^ theSurface) override;


//! <br>
virtual /*instead*/  void ComputeSamplePoints() override;


//! Computes the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamplesU() override;


//! Computes the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamplesV() override;


//! Computes the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamples() override;


//! Returns a 2d point from surface myS <br>
//! and a corresponded 3d point <br>
//! for given index. <br>
//! The index should be from 1 to NbSamples() <br>
virtual /*instead*/  void SamplePoint(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt2d^ P2d, OCNaroWrappers::OCgp_Pnt^ P3d) override;

//! compute the sample-points for the intersections algorithms <br>
//! by adaptive algorithm for BSpline surfaces. For other surfaces algorithm <br>
//! is the same as in method ComputeSamplePoints(), but only fill arrays of U <br>
//! and V sample parameters; <br>
//! theDefl is a requred deflection <br>
//! theNUmin, theNVmin are minimal nb points for U and V. <br>
virtual /*instead*/  void SamplePnts(Standard_Real theDefl, Standard_Integer theNUmin, Standard_Integer theNVmin) override;

~OCIntTools_TopolTool()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
