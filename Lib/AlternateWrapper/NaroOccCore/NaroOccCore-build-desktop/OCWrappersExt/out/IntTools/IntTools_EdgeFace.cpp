// File generated by CPPExt (CPP file)
//

#include "IntTools_EdgeFace.h"
#include "../Converter.h"
#include "IntTools_Context.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopoDS/TopoDS_Face.h"
#include "IntTools_Range.h"
#include "IntTools_SequenceOfCommonPrts.h"
#include "../gp/gp_Pnt.h"
#include "../BRepAdaptor/BRepAdaptor_Surface.h"
#include "IntTools_CArray1OfReal.h"
#include "IntTools_CommonPrt.h"


using namespace OCNaroWrappers;

OCIntTools_EdgeFace::OCIntTools_EdgeFace(IntTools_EdgeFace* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntTools_EdgeFace::OCIntTools_EdgeFace() 
{
  nativeHandle = new IntTools_EdgeFace();
}

 void OCIntTools_EdgeFace::SetEdge(OCNaroWrappers::OCTopoDS_Edge^ anEdge)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetEdge(*((TopoDS_Edge*)anEdge->Handle));
}

 void OCIntTools_EdgeFace::SetTolE(Standard_Real aTolEdge1)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetTolE(aTolEdge1);
}

 void OCIntTools_EdgeFace::SetFace(OCNaroWrappers::OCTopoDS_Face^ aFace)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetFace(*((TopoDS_Face*)aFace->Handle));
}

 void OCIntTools_EdgeFace::SetTolF(Standard_Real aTolFace)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetTolF(aTolFace);
}

 void OCIntTools_EdgeFace::SetDiscretize(Standard_Integer aDiscret)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetDiscretize(aDiscret);
}

 void OCIntTools_EdgeFace::SetDeflection(Standard_Real aDeflection)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetDeflection(aDeflection);
}

 void OCIntTools_EdgeFace::SetEpsilonT(Standard_Real anEpsT)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetEpsilonT(anEpsT);
}

 void OCIntTools_EdgeFace::SetEpsilonNull(Standard_Real anEpsNull)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetEpsilonNull(anEpsNull);
}

 void OCIntTools_EdgeFace::SetRange(OCNaroWrappers::OCIntTools_Range^ aRange)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetRange(*((IntTools_Range*)aRange->Handle));
}

 void OCIntTools_EdgeFace::SetRange(Standard_Real aFirst, Standard_Real aLast)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetRange(aFirst, aLast);
}

 void OCIntTools_EdgeFace::SetContext(OCNaroWrappers::OCIntTools_Context^ theContext)
{
  ((IntTools_EdgeFace*)nativeHandle)->SetContext(*((Handle_IntTools_Context*)theContext->Handle));
}

OCIntTools_Context^ OCIntTools_EdgeFace::Context()
{
  Handle(IntTools_Context) tmp = ((IntTools_EdgeFace*)nativeHandle)->Context();
  return gcnew OCIntTools_Context(&tmp);
}

 void OCIntTools_EdgeFace::Perform()
{
  ((IntTools_EdgeFace*)nativeHandle)->Perform();
}

 System::Boolean OCIntTools_EdgeFace::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((IntTools_EdgeFace*)nativeHandle)->IsDone());
}

 Standard_Integer OCIntTools_EdgeFace::ErrorStatus()
{
  return ((IntTools_EdgeFace*)nativeHandle)->ErrorStatus();
}

OCIntTools_SequenceOfCommonPrts^ OCIntTools_EdgeFace::CommonParts()
{
  IntTools_SequenceOfCommonPrts* tmp = new IntTools_SequenceOfCommonPrts();
  *tmp = ((IntTools_EdgeFace*)nativeHandle)->CommonParts();
  return gcnew OCIntTools_SequenceOfCommonPrts(tmp);
}

OCIntTools_Range^ OCIntTools_EdgeFace::Range()
{
  IntTools_Range* tmp = new IntTools_Range();
  *tmp = ((IntTools_EdgeFace*)nativeHandle)->Range();
  return gcnew OCIntTools_Range(tmp);
}

 System::Boolean OCIntTools_EdgeFace::IsEqDistance(OCNaroWrappers::OCgp_Pnt^ aP, OCNaroWrappers::OCBRepAdaptor_Surface^ aS, Standard_Real aT, Standard_Real& aD)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_EdgeFace::IsEqDistance(*((gp_Pnt*)aP->Handle), *((BRepAdaptor_Surface*)aS->Handle), aT, aD));
}


