// File generated by CPPExt (Package)
//

#ifndef _IntTools_OCWrappers_HeaderFile
#define _IntTools_OCWrappers_HeaderFile

// Include the wrapped header
#include <IntTools.hxx>

#include "IntTools_Range.h"
#include "IntTools_CommonPrt.h"
#include "IntTools_Root.h"
#include "IntTools_Compare.h"
#include "IntTools_CompareRange.h"
#include "IntTools_EdgeEdge.h"
#include "IntTools_EdgeFace.h"
#include "IntTools_FClass2d.h"
#include "IntTools_LineConstructor.h"
#include "IntTools_MarkedRangeSet.h"
#include "IntTools_BaseRangeSample.h"
#include "IntTools_CurveRangeSample.h"
#include "IntTools_SurfaceRangeSample.h"
#include "IntTools_CurveRangeLocalizeData.h"
#include "IntTools_SurfaceRangeLocalizeData.h"
#include "IntTools_BeanFaceIntersector.h"
#include "IntTools_BeanBeanIntersector.h"
#include "IntTools_Curve.h"
#include "IntTools_PntOnFace.h"
#include "IntTools_PntOn2Faces.h"
#include "IntTools_TopolTool.h"
#include "IntTools_FaceFace.h"
#include "IntTools_ShrunkRange.h"
#include "IntTools_Context.h"
#include "IntTools_Tools.h"
#include "IntTools_CArray1.h"
#include "IntTools_SequenceOfPntOn2Faces.h"
#include "IntTools_SequenceOfCurves.h"
#include "IntTools_SequenceOfRanges.h"
#include "IntTools_CArray1OfInteger.h"
#include "IntTools_CArray1OfReal.h"
#include "IntTools_SequenceOfRoots.h"
#include "IntTools_Array1OfRoots.h"
#include "IntTools_Array1OfRange.h"
#include "IntTools_QuickSort.h"
#include "IntTools_QuickSortRange.h"
#include "IntTools_SequenceOfCommonPrts.h"
#include "IntTools_IndexedDataMapOfTransientAddress.h"
#include "IntTools_ListOfCurveRangeSample.h"
#include "IntTools_ListOfSurfaceRangeSample.h"
#include "IntTools_ListOfBox.h"
#include "IntTools_CurveRangeSampleMapHasher.h"
#include "IntTools_SurfaceRangeSampleMapHasher.h"
#include "IntTools_MapOfCurveSample.h"
#include "IntTools_MapOfSurfaceSample.h"
#include "IntTools_DataMapOfCurveSampleBox.h"
#include "IntTools_DataMapOfSurfaceSampleBox.h"
#include "IntTools_SequenceNodeOfSequenceOfPntOn2Faces.h"
#include "IntTools_SequenceNodeOfSequenceOfCurves.h"
#include "IntTools_SequenceNodeOfSequenceOfRanges.h"
#include "IntTools_SequenceNodeOfSequenceOfRoots.h"
#include "IntTools_SequenceNodeOfSequenceOfCommonPrts.h"
#include "IntTools_IndexedDataMapNodeOfIndexedDataMapOfTransientAddress.h"
#include "IntTools_ListNodeOfListOfCurveRangeSample.h"
#include "IntTools_ListIteratorOfListOfCurveRangeSample.h"
#include "IntTools_ListNodeOfListOfSurfaceRangeSample.h"
#include "IntTools_ListIteratorOfListOfSurfaceRangeSample.h"
#include "IntTools_ListNodeOfListOfBox.h"
#include "IntTools_ListIteratorOfListOfBox.h"
#include "IntTools_StdMapNodeOfMapOfCurveSample.h"
#include "IntTools_MapIteratorOfMapOfCurveSample.h"
#include "IntTools_StdMapNodeOfMapOfSurfaceSample.h"
#include "IntTools_MapIteratorOfMapOfSurfaceSample.h"
#include "IntTools_DataMapNodeOfDataMapOfCurveSampleBox.h"
#include "IntTools_DataMapIteratorOfDataMapOfCurveSampleBox.h"
#include "IntTools_DataMapNodeOfDataMapOfSurfaceSampleBox.h"
#include "IntTools_DataMapIteratorOfDataMapOfSurfaceSampleBox.h"


namespace OCNaroWrappers
{
//! Contains classes for intersection and classification <br>
//!         purposes and accompanying classes <br>
public ref class OCIntTools abstract sealed
{

public:
// Methods

//!  returns the length of the edge; <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Remove from  the  sequence aSeq the Roots  that  have <br>
//!          values ti and tj such as  |ti-tj]  <  anEpsT. <br>
static /*instead*/  void RemoveIdenticalRoots(OCNaroWrappers::OCIntTools_SequenceOfRoots^ aSeq, Standard_Real anEpsT) ;

//! Sort the sequence aSeq of the Roots to arrange the <br>
//!          Roons  in  increasing  order <br>
static /*instead*/  void SortRoots(OCNaroWrappers::OCIntTools_SequenceOfRoots^ aSeq, Standard_Real anEpsT) ;

//! Find the states (before  and  after) for  each  Root <br>
//!          from  the sequence aSeq <br>
static /*instead*/  void FindRootStates(OCNaroWrappers::OCIntTools_SequenceOfRoots^ aSeq, Standard_Real anEpsNull) ;


static /*instead*/  Standard_Integer Parameter(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve, Standard_Real& aParm) ;


static /*instead*/  Standard_Integer GetRadius(OCNaroWrappers::OCBRepAdaptor_Curve^ C, Standard_Real t1, Standard_Real t3, Standard_Real& R) ;


static /*instead*/  Standard_Integer PrepareArgs(OCNaroWrappers::OCBRepAdaptor_Curve^ C, Standard_Real tMax, Standard_Real tMin, Standard_Integer Discret, Standard_Real Deflect, OCNaroWrappers::OCIntTools_CArray1OfReal^ anArgs) ;


};

}; // OCNaroWrappers

#endif
