// File generated by CPPExt (MPV)
//
#ifndef _IntTools_LineConstructor_OCWrappers_HeaderFile
#define _IntTools_LineConstructor_OCWrappers_HeaderFile

// include native header
#include <IntTools_LineConstructor.hxx>
#include "../Converter.h"


#include "../TColStd/TColStd_SequenceOfReal.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_TopolTool;
ref class OCGeomAdaptor_HSurface;
ref class OCIntPatch_Line;


//! Splits given Line. <br>
public ref class OCIntTools_LineConstructor  {

protected:
  IntTools_LineConstructor* nativeHandle;
  OCIntTools_LineConstructor(OCDummy^) {};

public:
  property IntTools_LineConstructor* Handle
  {
    IntTools_LineConstructor* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntTools_LineConstructor(IntTools_LineConstructor* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCIntTools_LineConstructor();


//! Initializes me by two surfaces and corresponding <br>
//! tools which represent boundaries of surfaces <br>
 /*instead*/  void Load(OCNaroWrappers::OCAdaptor3d_TopolTool^ D1, OCNaroWrappers::OCAdaptor3d_TopolTool^ D2, OCNaroWrappers::OCGeomAdaptor_HSurface^ S1, OCNaroWrappers::OCGeomAdaptor_HSurface^ S2) ;


//! Splits line <br>
 /*instead*/  void Perform(OCNaroWrappers::OCIntPatch_Line^ L) ;


//! Returns True if splitting was successful <br>
 /*instead*/  System::Boolean IsDone() ;


//! Returns number of splits <br>
 /*instead*/  Standard_Integer NbParts() ;


//! Return first and last parameters <br>
//! for given index of split <br>
 /*instead*/  void Part(Standard_Integer I, Standard_Real& WFirst, Standard_Real& WLast) ;

~OCIntTools_LineConstructor()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
