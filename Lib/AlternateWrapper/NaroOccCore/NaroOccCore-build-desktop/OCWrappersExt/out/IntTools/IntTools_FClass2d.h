// File generated by CPPExt (MPV)
//
#ifndef _IntTools_FClass2d_OCWrappers_HeaderFile
#define _IntTools_FClass2d_OCWrappers_HeaderFile

// include native header
#include <IntTools_FClass2d.hxx>
#include "../Converter.h"


#include "../TColStd/TColStd_SequenceOfInteger.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Face;
ref class OCgp_Pnt2d;


//! Class provides an algorithm to classify a 2d Point <br>
//!         in 2d space of face using boundaries of the face. <br>
public ref class OCIntTools_FClass2d  {

protected:
  IntTools_FClass2d* nativeHandle;
  OCIntTools_FClass2d(OCDummy^) {};

public:
  property IntTools_FClass2d* Handle
  {
    IntTools_FClass2d* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntTools_FClass2d(IntTools_FClass2d* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCIntTools_FClass2d();


//! Initializes algorithm by the face F <br>
//! and tolerance Tol <br>
OCIntTools_FClass2d(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real Tol);


//! Initializes algorithm by the face F <br>
//! and tolerance Tol <br>
 /*instead*/  void Init(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real Tol) ;


//! Returns state of infinite 2d point relatively to (0, 0) <br>
 /*instead*/  OCTopAbs_State PerformInfinitePoint() ;


//! Returns state of the 2d point Puv. <br>
//! If RecadreOnPeriodic is true (defalut value), <br>
//! for the periodic surface 2d point, adjusted to period, is <br>
//! classified. <br>
 /*instead*/  OCTopAbs_State Perform(OCNaroWrappers::OCgp_Pnt2d^ Puv, System::Boolean RecadreOnPeriodic) ;


//! Test a point with +- an offset (Tol) and returns <br>
//! On if some points are OUT an some are IN <br>
//!  (Caution: Internal use . see the code for more details) <br>
 /*instead*/  OCTopAbs_State TestOnRestriction(OCNaroWrappers::OCgp_Pnt2d^ Puv, Standard_Real Tol, System::Boolean RecadreOnPeriodic) ;


 /*instead*/  System::Boolean IsHole() ;

~OCIntTools_FClass2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
