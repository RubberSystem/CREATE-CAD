// File generated by CPPExt (MPV)
//
#ifndef _IntTools_ShrunkRange_OCWrappers_HeaderFile
#define _IntTools_ShrunkRange_OCWrappers_HeaderFile

// include native header
#include <IntTools_ShrunkRange.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Edge.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "IntTools_Range.h"
#include "../Bnd/Bnd_Box.h"


namespace OCNaroWrappers
{

ref class OCIntTools_Context;
ref class OCTopoDS_Edge;
ref class OCTopoDS_Vertex;
ref class OCIntTools_Range;
ref class OCBnd_Box;



//!  The class provides the computation of <br>
//!  a working (shrunk) range [t1, t2] for <br>
//!  the 3D-curve of the edge. <br>
public ref class OCIntTools_ShrunkRange  {

protected:
  IntTools_ShrunkRange* nativeHandle;
  OCIntTools_ShrunkRange(OCDummy^) {};

public:
  property IntTools_ShrunkRange* Handle
  {
    IntTools_ShrunkRange* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntTools_ShrunkRange(IntTools_ShrunkRange* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCIntTools_ShrunkRange();


OCIntTools_ShrunkRange(OCNaroWrappers::OCTopoDS_Edge^ aE, OCNaroWrappers::OCTopoDS_Vertex^ aV1, OCNaroWrappers::OCTopoDS_Vertex^ aV2, OCNaroWrappers::OCIntTools_Range^ aR, OCNaroWrappers::OCIntTools_Context^ ICtx);


//! Sets the intersecton context <br>
//! <br>
 /*instead*/  void SetContext(OCNaroWrappers::OCIntTools_Context^ aContext) ;


//! Gets the intersecton context <br>
 /*instead*/  OCIntTools_Context^ Context() ;


//! Sets an shrunk range <br>
 /*instead*/  void SetShrunkRange(OCNaroWrappers::OCIntTools_Range^ aR) ;


//! Returns shrunk range <br>
 /*instead*/  OCIntTools_Range^ ShrunkRange() ;


//! Returns bounding box for edge restricted <br>
//! by shrunk range <br>
 /*instead*/  OCBnd_Box^ BndBox() ;


//! Returns edge for which <br>
//! the shrunk range is computed <br>
 /*instead*/  OCTopoDS_Edge^ Edge() ;


//! Computes shrunk range for <br>
//! an edge given in constructor <br>
//! <br>
 /*instead*/  void Perform() ;


//! Returns true if no error occured <br>
//! during shrunk range computation <br>
 /*instead*/  System::Boolean IsDone() ;


//! Returns code of computing shrunk range <br>
//! completion <br>
//! 0 - means successful completion <br>
//! 1 - nothing has been done <br>
//! 2 - initial range is out of edge's range <br>
//! 3 - first boundary of initial range is more than <br>
//!     last boundary <br>
//! 4 - projection of first vertex failed <br>
//! 5 - projection of second vertex failed <br>
//! 6 - shrunk range can not be computed <br>
//!     shrunk range is setted to initial range <br>
 /*instead*/  Standard_Integer ErrorStatus() ;

~OCIntTools_ShrunkRange()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
