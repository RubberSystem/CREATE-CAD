// File generated by CPPExt (MPV)
//
#ifndef _IntTools_Curve_OCWrappers_HeaderFile
#define _IntTools_Curve_OCWrappers_HeaderFile

// include native header
#include <IntTools_Curve.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_CurveType.h"


namespace OCNaroWrappers
{

ref class OCGeom_Curve;
ref class OCGeom2d_Curve;
ref class OCgp_Pnt;



public ref class OCIntTools_Curve  {

protected:
  IntTools_Curve* nativeHandle;
  OCIntTools_Curve(OCDummy^) {};

public:
  property IntTools_Curve* Handle
  {
    IntTools_Curve* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntTools_Curve(IntTools_Curve* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCIntTools_Curve();


//! Initializes me by a 3d curve <br>
//! and two 2d curves <br>
OCIntTools_Curve(OCNaroWrappers::OCGeom_Curve^ Curve3d, OCNaroWrappers::OCGeom2d_Curve^ FirstCurve2d, OCNaroWrappers::OCGeom2d_Curve^ SecondCurve2d);


//! Modifier <br>
 /*instead*/  void SetCurves(OCNaroWrappers::OCGeom_Curve^ Curve3d, OCNaroWrappers::OCGeom2d_Curve^ FirstCurve2d, OCNaroWrappers::OCGeom2d_Curve^ SecondCurve2d) ;


//! Modifier <br>
 /*instead*/  void SetCurve(OCNaroWrappers::OCGeom_Curve^ Curve3d) ;


//! Modifier <br>
 /*instead*/  void SetFirstCurve2d(OCNaroWrappers::OCGeom2d_Curve^ FirstCurve2d) ;


//! Modifier <br>
 /*instead*/  void SetSecondCurve2d(OCNaroWrappers::OCGeom2d_Curve^ SecondCurve2d) ;


//! Selector <br>
 /*instead*/  OCGeom_Curve^ Curve() ;


//! Selector <br>
 /*instead*/  OCGeom2d_Curve^ FirstCurve2d() ;


//! Selector <br>
 /*instead*/  OCGeom2d_Curve^ SecondCurve2d() ;


//! Returns true if 3d curve is BoundedCurve from Geom <br>
 /*instead*/  System::Boolean HasBounds() ;


//! Returns boundary parameters <br>
//! and corresponded 3d point. <br>
 /*instead*/  void Bounds(Standard_Real& aT1, Standard_Real& aT2, OCNaroWrappers::OCgp_Pnt^ aP1, OCNaroWrappers::OCgp_Pnt^ aP2) ;


//! Computes 3d point corresponded to parameter aT1 <br>
//! Returns true if given parameter aT1 <br>
//! is inside the boundaries of the curve <br>
 /*instead*/  System::Boolean D0(Standard_Real& aT1, OCNaroWrappers::OCgp_Pnt^ aP1) ;


//! Returns the type of 3d curve <br>
 /*instead*/  OCGeomAbs_CurveType Type() ;

~OCIntTools_Curve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
