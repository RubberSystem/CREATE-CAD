// File generated by CPPExt (CPP file)
//

#include "IntTools_Tools.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopoDS/TopoDS_Wire.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../gp/gp_Pnt2d.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "IntTools_CommonPrt.h"
#include "../gp/gp_Pnt.h"
#include "IntTools_Curve.h"
#include "IntTools_SequenceOfCurves.h"
#include "../gp/gp_Dir.h"
#include "../Geom/Geom_Curve.h"


using namespace OCNaroWrappers;

OCIntTools_Tools::OCIntTools_Tools(IntTools_Tools* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Integer OCIntTools_Tools::ComputeVV(OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2)
{
  return IntTools_Tools::ComputeVV(*((TopoDS_Vertex*)V1->Handle), *((TopoDS_Vertex*)V2->Handle));
}

 System::Boolean OCIntTools_Tools::HasInternalEdge(OCNaroWrappers::OCTopoDS_Wire^ aW)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::HasInternalEdge(*((TopoDS_Wire*)aW->Handle)));
}

 void OCIntTools_Tools::MakeFaceFromWireAndFace(OCNaroWrappers::OCTopoDS_Wire^ aW, OCNaroWrappers::OCTopoDS_Face^ aF, OCNaroWrappers::OCTopoDS_Face^ aFNew)
{
  IntTools_Tools::MakeFaceFromWireAndFace(*((TopoDS_Wire*)aW->Handle), *((TopoDS_Face*)aF->Handle), *((TopoDS_Face*)aFNew->Handle));
}

 OCTopAbs_State OCIntTools_Tools::ClassifyPointByFace(OCNaroWrappers::OCTopoDS_Face^ aF, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  return (OCTopAbs_State)(IntTools_Tools::ClassifyPointByFace(*((TopoDS_Face*)aF->Handle), *((gp_Pnt2d*)P->Handle)));
}

 System::Boolean OCIntTools_Tools::IsVertex(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real t)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::IsVertex(*((TopoDS_Edge*)E->Handle), t));
}

 System::Boolean OCIntTools_Tools::IsVertex(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Vertex^ V, Standard_Real t)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::IsVertex(*((TopoDS_Edge*)E->Handle), *((TopoDS_Vertex*)V->Handle), t));
}

 System::Boolean OCIntTools_Tools::IsVertex(OCNaroWrappers::OCIntTools_CommonPrt^ aCmnPrt)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::IsVertex(*((IntTools_CommonPrt*)aCmnPrt->Handle)));
}

 System::Boolean OCIntTools_Tools::IsMiddlePointsEqual(OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::IsMiddlePointsEqual(*((TopoDS_Edge*)E1->Handle), *((TopoDS_Edge*)E2->Handle)));
}

 System::Boolean OCIntTools_Tools::IsVertex(OCNaroWrappers::OCgp_Pnt^ aP, Standard_Real aTolPV, OCNaroWrappers::OCTopoDS_Vertex^ aV)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::IsVertex(*((gp_Pnt*)aP->Handle), aTolPV, *((TopoDS_Vertex*)aV->Handle)));
}

 Standard_Real OCIntTools_Tools::IntermediatePoint(Standard_Real aFirst, Standard_Real aLast)
{
  return IntTools_Tools::IntermediatePoint(aFirst, aLast);
}

 Standard_Integer OCIntTools_Tools::SplitCurve(OCNaroWrappers::OCIntTools_Curve^ aC, OCNaroWrappers::OCIntTools_SequenceOfCurves^ aS)
{
  return IntTools_Tools::SplitCurve(*((IntTools_Curve*)aC->Handle), *((IntTools_SequenceOfCurves*)aS->Handle));
}

 void OCIntTools_Tools::RejectLines(OCNaroWrappers::OCIntTools_SequenceOfCurves^ aSIn, OCNaroWrappers::OCIntTools_SequenceOfCurves^ aSOut)
{
  IntTools_Tools::RejectLines(*((IntTools_SequenceOfCurves*)aSIn->Handle), *((IntTools_SequenceOfCurves*)aSOut->Handle));
}

 System::Boolean OCIntTools_Tools::IsDirsCoinside(OCNaroWrappers::OCgp_Dir^ D1, OCNaroWrappers::OCgp_Dir^ D2)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::IsDirsCoinside(*((gp_Dir*)D1->Handle), *((gp_Dir*)D2->Handle)));
}

 System::Boolean OCIntTools_Tools::IsDirsCoinside(OCNaroWrappers::OCgp_Dir^ D1, OCNaroWrappers::OCgp_Dir^ D2, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::IsDirsCoinside(*((gp_Dir*)D1->Handle), *((gp_Dir*)D2->Handle), aTol));
}

 System::Boolean OCIntTools_Tools::IsClosed(OCNaroWrappers::OCGeom_Curve^ aC)
{
  return OCConverter::StandardBooleanToBoolean(IntTools_Tools::IsClosed(*((Handle_Geom_Curve*)aC->Handle)));
}

 Standard_Real OCIntTools_Tools::CurveTolerance(OCNaroWrappers::OCGeom_Curve^ aC, Standard_Real aTolBase)
{
  return IntTools_Tools::CurveTolerance(*((Handle_Geom_Curve*)aC->Handle), aTolBase);
}


