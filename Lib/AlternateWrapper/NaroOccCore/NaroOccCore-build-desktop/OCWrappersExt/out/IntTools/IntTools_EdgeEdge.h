// File generated by CPPExt (MPV)
//
#ifndef _IntTools_EdgeEdge_OCWrappers_HeaderFile
#define _IntTools_EdgeEdge_OCWrappers_HeaderFile

// include native header
#include <IntTools_EdgeEdge.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Edge.h"
#include "../BRepAdaptor/BRepAdaptor_Curve.h"
#include "IntTools_SequenceOfCommonPrts.h"
#include "IntTools_Range.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Edge;
ref class OCIntTools_Range;
ref class OCIntTools_SequenceOfCommonPrts;
ref class OCIntTools_CommonPrt;
ref class OCIntTools_CArray1OfReal;


//! The  class  provides  Edge/Edge  algorithm  to  determine <br>
//!          common  parts  between two edges in  3-d space. <br>
//!          Common  parts can be :  Vertices  or Edges. <br>
//! <br>
public ref class OCIntTools_EdgeEdge  {

protected:
  IntTools_EdgeEdge* nativeHandle;
  OCIntTools_EdgeEdge(OCDummy^) {};

public:
  property IntTools_EdgeEdge* Handle
  {
    IntTools_EdgeEdge* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntTools_EdgeEdge(IntTools_EdgeEdge* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCIntTools_EdgeEdge();


//! Sets the first edge <br>
 /*instead*/  void SetEdge1(OCNaroWrappers::OCTopoDS_Edge^ anEdge) ;


//! Sets  the  value of tolerance pipe for the first edge <br>
 /*instead*/  void SetTolerance1(Standard_Real aTolEdge1) ;


//! Sets the second edge <br>
 /*instead*/  void SetEdge2(OCNaroWrappers::OCTopoDS_Edge^ anEdge) ;


//! Sets  the  value of tolerance pipe for the first edge <br>
 /*instead*/  void SetTolerance2(Standard_Real aTolEdge2) ;


//! Sets  the  number of division for the shortest <br>
//! edge among the two.  The  deflection is not taken <br>
//! into  account <br>
 /*instead*/  void SetDiscretize(Standard_Integer aDiscret) ;


//! Sets the value of maximum reative deflection between <br>
//! the two nearest points on a curve. <br>
 /*instead*/  void SetDeflection(Standard_Real aDeflection) ;


//! Sets the criteria of equality of two arguments, <br>
//! i.e.  |t2-t1|<anEpsT will mean that t2=t1 <br>
 /*instead*/  void SetEpsilonT(Standard_Real anEpsT) ;


//! Sets the criteria of equality of two functions' values <br>
//! i.e.  |f(t2)-f(t1)|<anEpsNull will mean that f(t2)=f(t1) <br>
 /*instead*/  void SetEpsilonNull(Standard_Real anEpsNull) ;


 /*instead*/  void SetRange1(OCNaroWrappers::OCIntTools_Range^ aRange) ;


 /*instead*/  void SetRange2(OCNaroWrappers::OCIntTools_Range^ aRange) ;


 /*instead*/  void SetRange1(Standard_Real aFirst, Standard_Real aLast) ;


 /*instead*/  void SetRange2(Standard_Real aFirst, Standard_Real aLast) ;


//! The main method of the algorithm to determine <br>
//! common  parts  between two edges in  3-d space <br>
 /*instead*/  void Perform() ;


//! True if the common  parts are found <br>
 /*instead*/  System::Boolean IsDone() ;


//! False if the common parts are coherented  with Edge1, Edge2 <br>
 /*instead*/  System::Boolean Order() ;

//! Returns the number that corresponds to the error. <br>
//! The  list of error-codes is in  ...cxx file <br>
 /*instead*/  Standard_Integer ErrorStatus() ;


//! Returns the common parts (Output) <br>
 /*instead*/  OCIntTools_SequenceOfCommonPrts^ CommonParts() ;


 /*instead*/  OCIntTools_Range^ Range1() ;


 /*instead*/  OCIntTools_Range^ Range2() ;

~OCIntTools_EdgeEdge()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
