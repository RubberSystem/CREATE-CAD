// File generated by CPPExt (MPV)
//
#ifndef _IntTools_FaceFace_OCWrappers_HeaderFile
#define _IntTools_FaceFace_OCWrappers_HeaderFile

// include native header
#include <IntTools_FaceFace.hxx>
#include "../Converter.h"


#include "../IntPatch/IntPatch_Intersection.h"
#include "IntTools_LineConstructor.h"
#include "IntTools_SequenceOfCurves.h"
#include "../TopoDS/TopoDS_Face.h"
#include "IntTools_SequenceOfPntOn2Faces.h"
#include "../IntSurf/IntSurf_ListOfPntOn2S.h"


namespace OCNaroWrappers
{

ref class OCGeomAdaptor_HSurface;
ref class OCIntTools_Context;
ref class OCTopoDS_Face;
ref class OCIntTools_SequenceOfCurves;
ref class OCIntTools_SequenceOfPntOn2Faces;
ref class OCIntSurf_ListOfPntOn2S;
ref class OCAdaptor3d_TopolTool;


//! This class provides the intersection of <br>
//!	    face's underlying surfaces. <br>
public ref class OCIntTools_FaceFace  {

protected:
  IntTools_FaceFace* nativeHandle;
  OCIntTools_FaceFace(OCDummy^) {};

public:
  property IntTools_FaceFace* Handle
  {
    IntTools_FaceFace* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntTools_FaceFace(IntTools_FaceFace* nativeHandle);

// Methods PUBLIC


//! Empty constructor. <br>
OCIntTools_FaceFace();


//! Modifier <br>
 /*instead*/  void SetParameters(System::Boolean ApproxCurves, System::Boolean ComputeCurveOnS1, System::Boolean ComputeCurveOnS2, Standard_Real ApproximationTolerance) ;


//! Intersects underliing surfaces of F1 and F2 <br>
//! Use sum of tolerance of F1 and F2 as intersection <br>
//! criteria <br>
 /*instead*/  void Perform(OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2) ;


//! Returns True if the intersection was successful <br>
 /*instead*/  System::Boolean IsDone() ;


//! Returns sequence of 3d curves as result of intersection <br>
 /*instead*/  OCIntTools_SequenceOfCurves^ Lines() ;


//! Returns sequence of 3d curves as result of intersection <br>
 /*instead*/  OCIntTools_SequenceOfPntOn2Faces^ Points() ;


//! Returns tolerance reached during approximation. <br>
//! If approximation was not done, returns zero. <br>
 /*instead*/  Standard_Real TolReached3d() ;


//! Returns tolerance reached during approximation. <br>
//! If approximation was not done, returns zero. <br>
 /*instead*/  Standard_Real TolReached2d() ;


//! Returns first of processed faces <br>
 /*instead*/  OCTopoDS_Face^ Face1() ;


//! Returns second of processed faces <br>
 /*instead*/  OCTopoDS_Face^ Face2() ;


//! Returns True if faces are tangent <br>
//! <br>
 /*instead*/  System::Boolean TangentFaces() ;


//! Provides post-processing the result lines. <br>
//! <bToSplit> - the flag. <br>
//!  In case of <bToSplit> is true the closed 3D-curves will be splitted <br>
//!  on parts. <br>
//!  In case of <bToSplit> is false the closed 3D-curves remain untouched. <br>
 /*instead*/  void PrepareLines3D(System::Boolean bToSplit) ;


 /*instead*/  void SetList(OCNaroWrappers::OCIntSurf_ListOfPntOn2S^ ListOfPnts) ;


//! Sets the intersecton context <br>
 /*instead*/  void SetContext(OCNaroWrappers::OCIntTools_Context^ aContext) ;


//! Gets the intersecton context <br>
//! <br>
 /*instead*/  OCIntTools_Context^ Context() ;

~OCIntTools_FaceFace()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
