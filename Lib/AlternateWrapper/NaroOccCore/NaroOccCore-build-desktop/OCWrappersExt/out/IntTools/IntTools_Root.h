// File generated by CPPExt (MPV)
//
#ifndef _IntTools_Root_OCWrappers_HeaderFile
#define _IntTools_Root_OCWrappers_HeaderFile

// include native header
#include <IntTools_Root.hxx>
#include "../Converter.h"


#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{



//! The class is to describe the root of <br>
//!          function of one variable  for  Edge/Edge <br>
//!          and  Edge/Surface  algorithms. <br>
public ref class OCIntTools_Root  {

protected:
  IntTools_Root* nativeHandle;
  OCIntTools_Root(OCDummy^) {};

public:
  property IntTools_Root* Handle
  {
    IntTools_Root* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntTools_Root(IntTools_Root* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCIntTools_Root();


//! Initializes my by range of parameters <br>
//! and type of root <br>
OCIntTools_Root(Standard_Real aRoot, Standard_Integer aType);


//! Sets the Root's value <br>
 /*instead*/  void SetRoot(Standard_Real aRoot) ;


//! Sets the Root's Type <br>
 /*instead*/  void SetType(Standard_Integer aType) ;


//! Set  the  value of the state before the root <br>
//! (at  t=Root-dt) <br>
 /*instead*/  void SetStateBefore(OCTopAbs_State aState) ;


//! Set  the  value of the state after the root <br>
//! (at  t=Root-dt) <br>
 /*instead*/  void SetStateAfter(OCTopAbs_State aState) ;


//! Not  used  in  Edge/Edge  algorithm <br>
 /*instead*/  void SetLayerHeight(Standard_Real aHeight) ;


//! Sets the  interval  from which the Root was <br>
//! found [t1,t2] and the  corresponding  values <br>
//! of  the  function  on  the  bounds f(t1), f(t2). <br>
 /*instead*/  void SetInterval(Standard_Real t1, Standard_Real t2, Standard_Real f1, Standard_Real f2) ;


//! Returns the Root  value <br>
 /*instead*/  Standard_Real Root() ;


//! Returns the  type  of  the  root <br>
//! =0  -  Simple (was  found  by  bisection  method); <br>
//! =2  -  Smart when f1=0, f2!=0 or  vice  versa <br>
//!        (was  found  by  Fibbonacci method); <br>
//! =1  -  Pure   (pure  zero  for all t [t1,t2] ); <br>
 /*instead*/  Standard_Integer Type() ;


//! Returns the state before the root <br>
 /*instead*/  OCTopAbs_State StateBefore() ;


//! Returns the state after the root <br>
 /*instead*/  OCTopAbs_State StateAfter() ;


//! Not  used  in  Edge/Edge  algorithm <br>
 /*instead*/  Standard_Real LayerHeight() ;


//! Returns the validity flag for the root, <br>
//! True if <br>
//! myStateBefore==TopAbs_OUT && myStateAfter==TopAbs_IN or <br>
//! myStateBefore==TopAbs_OUT && myStateAfter==TopAbs_ON or <br>
//! myStateBefore==TopAbs_ON  && myStateAfter==TopAbs_OUT or <br>
//! myStateBefore==TopAbs_IN  && myStateAfter==TopAbs_OUT  . <br>
//! For  other  cases it  returns  False. <br>
 /*instead*/  System::Boolean IsValid() ;


//! Returns the values of interval  from which the Root was <br>
//! found [t1,t2] and the  corresponding  values <br>
//! of  the  function  on  the  bounds f(t1), f(t2). <br>
 /*instead*/  void Interval(Standard_Real& t1, Standard_Real& t2, Standard_Real& f1, Standard_Real& f2) ;

~OCIntTools_Root()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
