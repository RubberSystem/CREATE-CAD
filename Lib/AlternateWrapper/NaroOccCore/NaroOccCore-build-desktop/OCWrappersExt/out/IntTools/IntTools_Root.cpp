// File generated by CPPExt (CPP file)
//

#include "IntTools_Root.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCIntTools_Root::OCIntTools_Root(IntTools_Root* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntTools_Root::OCIntTools_Root() 
{
  nativeHandle = new IntTools_Root();
}

OCIntTools_Root::OCIntTools_Root(Standard_Real aRoot, Standard_Integer aType) 
{
  nativeHandle = new IntTools_Root(aRoot, aType);
}

 void OCIntTools_Root::SetRoot(Standard_Real aRoot)
{
  ((IntTools_Root*)nativeHandle)->SetRoot(aRoot);
}

 void OCIntTools_Root::SetType(Standard_Integer aType)
{
  ((IntTools_Root*)nativeHandle)->SetType(aType);
}

 void OCIntTools_Root::SetStateBefore(OCTopAbs_State aState)
{
  ((IntTools_Root*)nativeHandle)->SetStateBefore((TopAbs_State)aState);
}

 void OCIntTools_Root::SetStateAfter(OCTopAbs_State aState)
{
  ((IntTools_Root*)nativeHandle)->SetStateAfter((TopAbs_State)aState);
}

 void OCIntTools_Root::SetLayerHeight(Standard_Real aHeight)
{
  ((IntTools_Root*)nativeHandle)->SetLayerHeight(aHeight);
}

 void OCIntTools_Root::SetInterval(Standard_Real t1, Standard_Real t2, Standard_Real f1, Standard_Real f2)
{
  ((IntTools_Root*)nativeHandle)->SetInterval(t1, t2, f1, f2);
}

 Standard_Real OCIntTools_Root::Root()
{
  return ((IntTools_Root*)nativeHandle)->Root();
}

 Standard_Integer OCIntTools_Root::Type()
{
  return ((IntTools_Root*)nativeHandle)->Type();
}

 OCTopAbs_State OCIntTools_Root::StateBefore()
{
  return (OCTopAbs_State)(((IntTools_Root*)nativeHandle)->StateBefore());
}

 OCTopAbs_State OCIntTools_Root::StateAfter()
{
  return (OCTopAbs_State)(((IntTools_Root*)nativeHandle)->StateAfter());
}

 Standard_Real OCIntTools_Root::LayerHeight()
{
  return ((IntTools_Root*)nativeHandle)->LayerHeight();
}

 System::Boolean OCIntTools_Root::IsValid()
{
  return OCConverter::StandardBooleanToBoolean(((IntTools_Root*)nativeHandle)->IsValid());
}

 void OCIntTools_Root::Interval(Standard_Real& t1, Standard_Real& t2, Standard_Real& f1, Standard_Real& f2)
{
  ((IntTools_Root*)nativeHandle)->Interval(t1, t2, f1, f2);
}


