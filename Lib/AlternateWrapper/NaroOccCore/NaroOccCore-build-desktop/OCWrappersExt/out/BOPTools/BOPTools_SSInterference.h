// File generated by CPPExt (MPV)
//
#ifndef _BOPTools_SSInterference_OCWrappers_HeaderFile
#define _BOPTools_SSInterference_OCWrappers_HeaderFile

// include native header
#include <BOPTools_SSInterference.hxx>
#include "../Converter.h"

#include "BOPTools_ShapeShapeInterference.h"

#include "BOPTools_ListOfPaveBlock.h"
#include "BOPTools_PaveSet.h"
#include "BOPTools_SequenceOfCurves.h"
#include "../IntTools/IntTools_SequenceOfPntOn2Faces.h"
#include "../TColStd/TColStd_ListOfInteger.h"
#include "BOPTools_IndexedDataMapOfIntegerState.h"
#include "BOPTools_ShapeShapeInterference.h"


namespace OCNaroWrappers
{

ref class OCIntTools_SequenceOfCurves;
ref class OCIntTools_SequenceOfPntOn2Faces;
ref class OCBOPTools_PaveBlock;
ref class OCBOPTools_ListOfPaveBlock;
ref class OCBOPTools_PaveSet;
ref class OCBOPTools_SequenceOfCurves;
ref class OCBOPTools_IndexedDataMapOfIntegerState;
ref class OCTColStd_ListOfInteger;


//! class for storing a Face/Face interference <br>
//!         Each  F/F interference  contains  information  about <br>
//!         1.  myPBs   - PaveBlocks (made from edges from the faces <br>
//!             that are IN-2D or ON-2D; <br>
//!         2.  myCurves- Sequence of curves of intersection; <br>
//!         3.  myTangentFacesFlag  - The BOOL flag indicates that <br>
//!             the  faces are SD in terms of the F/F Intersector. <br>
//!         4.  mySenseFlag  - value that is equal +1 or -1 depending <br>
//!             on scalar product between normals to each face.  This <br>
//!             valie is valid for the SDF only. <br>
//!         5.  myAlonePnts  - contains 3D-points that are place <br>
//!             of  intersection between the two faces <br>
//!         6.  myAloneVertices   - contains indices of vertices <br>
//!             that correspond to the points  myAlonePnts; <br>
public ref class OCBOPTools_SSInterference  : public OCBOPTools_ShapeShapeInterference {

protected:
  // dummy constructor;
  OCBOPTools_SSInterference(OCDummy^) : OCBOPTools_ShapeShapeInterference((OCDummy^)nullptr) {};

public:

// constructor from native
OCBOPTools_SSInterference(BOPTools_SSInterference* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCBOPTools_SSInterference();


//! Constructor <br>
//! anIndex1, <br>
//! anIndex2 see BOPTools_ShapeShapeInterference for details <br>
//! aTolR3D  - value of tolerance to reach in 3D-space <br>
//! aTolR2D  - value of tolerance to reach in 2D-space <br>
//! aCurves  see  IntTools_Curve  for details,  please <br>
OCBOPTools_SSInterference(Standard_Integer anIndex1, Standard_Integer anIndex2, Standard_Real aTolR3D, Standard_Real aTolR2D, OCNaroWrappers::OCIntTools_SequenceOfCurves^ aCurves, OCNaroWrappers::OCIntTools_SequenceOfPntOn2Faces^ aPnts);


//! Modifier <br>
 /*instead*/  void AppendBlock(OCNaroWrappers::OCBOPTools_PaveBlock^ aPB) ;


//! Selector <br>
 /*instead*/  OCBOPTools_ListOfPaveBlock^ PaveBlocks() ;


//! Selector <br>
 /*instead*/  OCBOPTools_PaveSet^ NewPaveSet() ;


//! Selector <br>
 /*instead*/  Standard_Real TolR3D() ;


//! Selector <br>
 /*instead*/  Standard_Real TolR2D() ;


//! Selector <br>
 /*instead*/  OCBOPTools_SequenceOfCurves^ Curves() ;


//! Modifier <br>
 /*instead*/  void SetTangentFacesFlag(System::Boolean aFlag) ;


//! Selector <br>
 /*instead*/  System::Boolean IsTangentFaces() ;


//! Modifier <br>
 /*instead*/  void SetSenseFlag(Standard_Integer aFlag) ;


//! Selector <br>
 /*instead*/  Standard_Integer SenseFlag() ;


//! Modifier <br>
 /*instead*/  void SetStatesMap(OCNaroWrappers::OCBOPTools_IndexedDataMapOfIntegerState^ aStatesMap) ;


//! Selector <br>
 /*instead*/  OCBOPTools_IndexedDataMapOfIntegerState^ StatesMap() ;


//! Modifier <br>
 /*instead*/  void SetAlonePnts(OCNaroWrappers::OCIntTools_SequenceOfPntOn2Faces^ aPnts) ;


//! Selector <br>
 /*instead*/  OCIntTools_SequenceOfPntOn2Faces^ AlonePnts() ;


//! Selector <br>
//! <br>
 /*instead*/  OCTColStd_ListOfInteger^ AloneVertices() ;


//! Modifier <br>
//! <br>
 /*instead*/  void SetSharedEdges(OCNaroWrappers::OCTColStd_ListOfInteger^ aLS) ;


//! Selector <br>
//! <br>
 /*instead*/  OCTColStd_ListOfInteger^ SharedEdges() ;

~OCBOPTools_SSInterference()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
