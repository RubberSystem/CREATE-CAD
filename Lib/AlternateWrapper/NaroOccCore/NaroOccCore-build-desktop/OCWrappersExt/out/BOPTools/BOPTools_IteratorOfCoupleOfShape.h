// File generated by CPPExt (MPV)
//
#ifndef _BOPTools_IteratorOfCoupleOfShape_OCWrappers_HeaderFile
#define _BOPTools_IteratorOfCoupleOfShape_OCWrappers_HeaderFile

// include native header
#include <BOPTools_IteratorOfCoupleOfShape.hxx>
#include "../Converter.h"


#include "../TopAbs/TopAbs_ShapeEnum.h"
#include "BOPTools_ListOfCoupleOfInteger.h"
#include "BOPTools_ListIteratorOfListOfCoupleOfInteger.h"
#include "BOPTools_IntersectionStatus.h"


namespace OCNaroWrappers
{

ref class OCBOPTools_HArray2OfIntersectionStatus;
ref class OCBOPTools_ListOfCoupleOfInteger;


//! The class IteratorOfCoupleOfShape provides the iteration <br>
//!         on the couples of shapes stored in ShapesDataStructure <br>
//!         according to the given types of shapes and <br>
//!         status of their intersection. <br>
//!         The statuses are stored in 2 dimension array. <br>
public ref class OCBOPTools_IteratorOfCoupleOfShape  {

protected:
  BOPTools_IteratorOfCoupleOfShape* nativeHandle;
  OCBOPTools_IteratorOfCoupleOfShape(OCDummy^) {};

public:
  property BOPTools_IteratorOfCoupleOfShape* Handle
  {
    BOPTools_IteratorOfCoupleOfShape* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBOPTools_IteratorOfCoupleOfShape(BOPTools_IteratorOfCoupleOfShape* nativeHandle);

// Methods PUBLIC


//! Empty Constructor <br>
OCBOPTools_IteratorOfCoupleOfShape();


//! Initializes iterator by ShapesDataStructure and <br>
//! shape types <br>
OCBOPTools_IteratorOfCoupleOfShape(BooleanOperations_PShapesDataStructure PDS, OCTopAbs_ShapeEnum Type1, OCTopAbs_ShapeEnum Type2);


virtual /*instead*/  void Destroy() ;


//! Initializes iterator with shape types. <br>
//! The iterator uses PDS assigned in constructor or in SetDataStructure(). <br>
//! Raises the exception if myPDS is null. <br>
virtual /*instead*/  void Initialize(OCTopAbs_ShapeEnum Type1, OCTopAbs_ShapeEnum Type2) ;


//! Initialize iterator with ShapeDataStructure. <br>
 /*instead*/  void SetDataStructure(BooleanOperations_PShapesDataStructure PDS) ;


//! Returns True if there are still not <br>
//! treated couples of shapes <br>
virtual /*instead*/  System::Boolean More() ;


//! Moves to the next couple of iteration <br>
virtual /*instead*/  void Next() ;


//! Returns current couple of indices and <br>
//! flag WithSubShape which is true <br>
//! if bounding boxes of subshapes <br>
//! are intersected <br>
virtual /*instead*/  void Current(Standard_Integer& Index1, Standard_Integer& Index2, System::Boolean& WithSubShape) ;


//! Returns a list of couples of shape indices <br>
//! according to shape types by which <br>
//! the iterator was initialized <br>
 /*instead*/  OCBOPTools_ListOfCoupleOfInteger^ ListOfCouple() ;


//! Sets status to array according to Index1 and Index2 <br>
 /*instead*/  void SetIntersectionStatus(Standard_Integer Index1, Standard_Integer Index2, OCBOPTools_IntersectionStatus theStatus) ;


//! Returns 2 dimension array of intersection statuses <br>
 /*instead*/  OCBOPTools_HArray2OfIntersectionStatus^ GetTableOfIntersectionStatus() ;


//! For internal use <br>
 /*instead*/  void DumpTableOfIntersectionStatus() ;

~OCBOPTools_IteratorOfCoupleOfShape()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
