// File generated by CPPExt (MPV)
//
#ifndef _BOPTools_PaveFiller_OCWrappers_HeaderFile
#define _BOPTools_PaveFiller_OCWrappers_HeaderFile

// include native header
#include <BOPTools_PaveFiller.hxx>
#include "../Converter.h"


#include "BOPTools_PavePool.h"
#include "BOPTools_CommonBlockPool.h"
#include "BOPTools_SplitShapesPool.h"
#include "BOPTools_SSIntersectionAttribute.h"
#include "BOPTools_IteratorOfCoupleOfShape.h"
#include "../TopAbs/TopAbs_ShapeEnum.h"


namespace OCNaroWrappers
{

ref class OCIntTools_Context;
ref class OCBOPTools_InterferencePool;
ref class OCBOPTools_SSIntersectionAttribute;
ref class OCTColStd_SetOfInteger;
ref class OCBOPTools_PavePool;
ref class OCBOPTools_CommonBlockPool;
ref class OCBOPTools_SplitShapesPool;
ref class OCBOPTools_IteratorOfCoupleOfShape;
ref class OCBOPTools_Pave;
ref class OCIntTools_ShrunkRange;
ref class OCBOPTools_PaveBlock;
ref class OCTColStd_ListOfInteger;
ref class OCBOPTools_ListOfPaveBlock;
ref class OCBOPTools_PaveSet;
ref class OCBOPTools_Curve;
ref class OCBOPTools_SSInterference;
ref class OCgp_Pnt;
ref class OCTopoDS_Vertex;
ref class OCTColStd_IndexedMapOfInteger;


//!  The algorithm that provides <br>
//!  1. creation of the data structure (DS) <br>
//!  2. creation of the interferences' pool <br>
//!  3. invocation of Perform() to fill the DS <br>
//! <br>
public ref class OCBOPTools_PaveFiller  {

protected:
  BOPTools_PaveFiller* nativeHandle;
  OCBOPTools_PaveFiller(OCDummy^) {};

public:
  property BOPTools_PaveFiller* Handle
  {
    BOPTools_PaveFiller* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBOPTools_PaveFiller(BOPTools_PaveFiller* nativeHandle);

// Methods PUBLIC


//! Empty Contructor <br>
OCBOPTools_PaveFiller();


//! Constructor <br>
OCBOPTools_PaveFiller(OCNaroWrappers::OCBOPTools_InterferencePool^ aIP);


//! Constructor <br>
OCBOPTools_PaveFiller(OCNaroWrappers::OCBOPTools_InterferencePool^ theIP, OCNaroWrappers::OCBOPTools_SSIntersectionAttribute^ theSectionAttribute);


//! Destructor <br>
virtual /*instead*/  void Destroy() ;


//! Fills the DS <br>
virtual /*instead*/  void Perform() ;


virtual /*instead*/  void PartialPerform(OCNaroWrappers::OCTColStd_SetOfInteger^ anObjSubSet, OCNaroWrappers::OCTColStd_SetOfInteger^ aToolSubSet) ;


virtual /*instead*/  void ToCompletePerform() ;


//! Sets the intersecton context <br>
//! <br>
 /*instead*/  void SetContext(OCNaroWrappers::OCIntTools_Context^ aContext) ;


//! Selector <br>
//! Selector <br>
 /*instead*/  OCIntTools_Context^ Context() ;


//! Selector <br>
 /*instead*/  void SetInterferencePool(OCNaroWrappers::OCBOPTools_InterferencePool^ aPool) ;


//! Selector <br>
 /*instead*/  System::Boolean IsDone() ;


//! Selector <br>
 /*instead*/  OCBOPTools_PavePool^ PavePool() ;


//! Selector <br>
 /*instead*/  OCBOPTools_PavePool^ ChangePavePool() ;


//! Selector <br>
 /*instead*/  OCBOPTools_CommonBlockPool^ CommonBlockPool() ;


//! Selector <br>
 /*instead*/  OCBOPTools_CommonBlockPool^ ChangeCommonBlockPool() ;


//! Selector <br>
 /*instead*/  OCBOPTools_SplitShapesPool^ SplitShapesPool() ;


//! Selector <br>
 /*instead*/  OCBOPTools_SplitShapesPool^ ChangeSplitShapesPool() ;


//! Selector <br>
 /*instead*/  BooleanOperations_PShapesDataStructure DS() ;


//! Selector <br>
 /*instead*/  BOPTools_PInterferencePool InterfPool() ;


//! Selector <br>
 /*instead*/  OCBOPTools_IteratorOfCoupleOfShape^ IteratorOfCoupleOfShape() ;


//! Selector <br>
 /*instead*/  OCBOPTools_SSIntersectionAttribute^ SectionAttribute() ;


//! Selector <br>
 /*instead*/  void SetSectionAttribute(OCNaroWrappers::OCBOPTools_SSIntersectionAttribute^ anAtt) ;


//! For the face <nF1> get all splits that are IN-2D <br>
//! to  the face <nF2>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsInFace(Standard_Integer aBid, Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs) ;


//! For the edge <nE1> get all splits that are IN-2D <br>
//! to  the face <nF1>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsInFace(Standard_Integer nE1, Standard_Integer nF2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs) ;


//! For the edge <nE1> get all splits that are ON-3D <br>
//! to  the edge <nE2>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsOnEdge(Standard_Integer nE1, Standard_Integer nE2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs) ;


//! For the edge <nE1> get all splits that are ON-3D <br>
//! to  the face <nF2>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsOnFace(Standard_Integer nE1, Standard_Integer nF2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs) ;


//! For the face <nF1> get all splits that are ON-3D <br>
//! to  the face <nF2>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsOnFace(Standard_Integer aBid, Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs) ;


//! For the face <nF1> get all PaveBlocks that are IN-2D <br>
//! to  the face <nF2>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsInFace(Standard_Integer aBid, Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs) ;


//! For the edge <nE1> get all PaveBlocks that are IN-2D <br>
//! to  the face <nF1>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsInFace(Standard_Integer nE1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs) ;


//! For the edge <nE1> get all PaveBlocks that are ON-3D <br>
//! to  the edge <nE2>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsOnEdge(Standard_Integer nE1, Standard_Integer nE2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs) ;


//! For the edge <nE1> get all PaveBlocks that are ON-3D <br>
//! to  the face <nF2>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsOnFace(Standard_Integer nE1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs) ;


//! For the face <nF1> get all PaveBlocks that are ON-3D <br>
//! to  the face <nF2>; The result is in <aLs> <br>
//! Returns 0 if OK; <br>
 /*instead*/  Standard_Integer SplitsOnFace(Standard_Integer aBid, Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs) ;


//! Find  for the vertex <nV> SD-vertex (if possible) and return <br>
//! its DS-index.  Otherwise it returns 0. <br>
 /*instead*/  Standard_Integer FindSDVertex(Standard_Integer nV) ;


//! For couple of faces <nF1>, <nF2> prepare set of all paves <br>
//! of all edges <aPaveSet> <br>
 /*instead*/  void PrepareSetForFace(Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_PaveSet^ aPaveSet) ;

~OCBOPTools_PaveFiller()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
