// File generated by CPPExt (MPV)
//
#ifndef _BOPTools_Tools_OCWrappers_HeaderFile
#define _BOPTools_Tools_OCWrappers_HeaderFile

// include native header
#include <BOPTools_Tools.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCgp_Pnt;
ref class OCTopoDS_Vertex;
ref class OCTopoDS_Edge;
ref class OCTopoDS_Face;
ref class OCIntTools_Curve;
ref class OCBOPTools_PaveBlock;
ref class OCIntTools_Context;
ref class OCTopoDS_Shape;
ref class OCTopTools_IndexedMapOfShape;
ref class OCIntTools_Range;



//!  The class contains handy static functions <br>
//!  dealing with the topology <br>
public ref class OCBOPTools_Tools  {

protected:
  BOPTools_Tools* nativeHandle;
  OCBOPTools_Tools(OCDummy^) {};

public:
  property BOPTools_Tools* Handle
  {
    BOPTools_Tools* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBOPTools_Tools(BOPTools_Tools* nativeHandle);

// Methods PUBLIC


//! Make a vertex using 3D-point <aP1> and 3D-tolerance value <aTol> <br>
static /*instead*/  void MakeNewVertex(OCNaroWrappers::OCgp_Pnt^ aP1, Standard_Real aTol, OCNaroWrappers::OCTopoDS_Vertex^ aNewVertex) ;


//! Make a vertex using couple of vertices  <aV1, aV2> <br>
static /*instead*/  void MakeNewVertex(OCNaroWrappers::OCTopoDS_Vertex^ aV1, OCNaroWrappers::OCTopoDS_Vertex^ aV2, OCNaroWrappers::OCTopoDS_Vertex^ aNewVertex) ;


//! Make a vertex in place of intersection between two edges <br>
//! <aE1, aE2> with parameters <aP1, aP2> <br>
static /*instead*/  void MakeNewVertex(OCNaroWrappers::OCTopoDS_Edge^ aE1, Standard_Real aP1, OCNaroWrappers::OCTopoDS_Edge^ aE2, Standard_Real aP2, OCNaroWrappers::OCTopoDS_Vertex^ aNewVertex) ;


//! Make a vertex in place of intersection between the edge <aE1> <br>
//! with parameter <aP1> and the face <aF2> <br>
static /*instead*/  void MakeNewVertex(OCNaroWrappers::OCTopoDS_Edge^ aE1, Standard_Real aP1, OCNaroWrappers::OCTopoDS_Face^ aF2, OCNaroWrappers::OCTopoDS_Vertex^ aNewVertex) ;


//! Compute a 3D-point on the edge <aEdge> at parameter <aPrm> <br>
static /*instead*/  void PointOnEdge(OCNaroWrappers::OCTopoDS_Edge^ aEdge, Standard_Real aPrm, OCNaroWrappers::OCgp_Pnt^ aP) ;


//! Make the edge from base edge <aE1> and two vertices <aV1,aV2> <br>
//! at parameters <aP1,aP2> <br>
static /*instead*/  void MakeSplitEdge(OCNaroWrappers::OCTopoDS_Edge^ aE1, OCNaroWrappers::OCTopoDS_Vertex^ aV1, Standard_Real aP1, OCNaroWrappers::OCTopoDS_Vertex^ aV2, Standard_Real aP2, OCNaroWrappers::OCTopoDS_Edge^ aNewEdge) ;


//! Make the edge from 3D-Curve <aIC>  and two vertices <aV1,aV2> <br>
//! at parameters <aP1,aP2> <br>
static /*instead*/  void MakeSectEdge(OCNaroWrappers::OCIntTools_Curve^ aIC, OCNaroWrappers::OCTopoDS_Vertex^ aV1, Standard_Real aP1, OCNaroWrappers::OCTopoDS_Vertex^ aV2, Standard_Real aP2, OCNaroWrappers::OCTopoDS_Edge^ aNewEdge) ;


//! Update the tolerance value for vertex  <aV> <br>
//! taking into account the fact that <aV> lays on <br>
//! the curve <aIC> <br>
static /*instead*/  void UpdateVertex(OCNaroWrappers::OCIntTools_Curve^ aIC, Standard_Real aT, OCNaroWrappers::OCTopoDS_Vertex^ aV) ;


//! Update the tolerance value for vertex  <aV> <br>
//! taking into account the fact that <aV> lays on <br>
//! the edge <aE> <br>
static /*instead*/  void UpdateVertex(OCNaroWrappers::OCTopoDS_Edge^ aE, Standard_Real aT, OCNaroWrappers::OCTopoDS_Vertex^ aV) ;


//! Update the tolerance value for vertex  <aVN> <br>
//! taking into account the fact that <aVN> should <br>
//! cover tolerance zone of <aVF> <br>
static /*instead*/  void UpdateVertex(OCNaroWrappers::OCTopoDS_Vertex^ aVF, OCNaroWrappers::OCTopoDS_Vertex^ aVN) ;


//! Returns TRUE if PaveBlocks  <aPB1>,<aPB2> coinside in 3D <br>
//! taking into account corresp. tolerances' values of vertices, <br>
//! edges <br>
static /*instead*/  System::Boolean IsBlocksCoinside(OCNaroWrappers::OCBOPTools_PaveBlock^ aPB1, OCNaroWrappers::OCBOPTools_PaveBlock^ aPB2) ;


//! Returns TRUE if PaveBlock <aPB> lays on the face <aF>, i.e <br>
//! the <PB> is IN or ON in 2D of <aF> <br>
static /*instead*/  System::Boolean IsBlockInOnFace(OCNaroWrappers::OCBOPTools_PaveBlock^ aPB, OCNaroWrappers::OCTopoDS_Face^ aF, OCNaroWrappers::OCIntTools_Context^ aContext) ;


//! Get a  Map <aM> containing the shape itself and all its subshapes <br>
static /*instead*/  void MapShapes(OCNaroWrappers::OCTopoDS_Shape^ aS, OCNaroWrappers::OCTopTools_IndexedMapOfShape^ aM) ;


//! Correct shrunk range <aSR> taking into account 3D-curve <br>
//! resolution and corresp. tolerances' values of <aE1>, <aE2> <br>
static /*instead*/  void CorrectRange(OCNaroWrappers::OCTopoDS_Edge^ aE1, OCNaroWrappers::OCTopoDS_Edge^ aE2, OCNaroWrappers::OCIntTools_Range^ aSR, OCNaroWrappers::OCIntTools_Range^ aNewSR) ;


//! Correct shrunk range <aSR> taking into account 3D-curve <br>
//! resolution and corresp. tolerances' values of <aE>, <aF> <br>
static /*instead*/  void CorrectRange(OCNaroWrappers::OCTopoDS_Edge^ aE, OCNaroWrappers::OCTopoDS_Face^ aF, OCNaroWrappers::OCIntTools_Range^ aSR, OCNaroWrappers::OCIntTools_Range^ aNewSR) ;


//! Make a copy of <aSourceShape> <br>
static /*instead*/  void CopySource(OCNaroWrappers::OCTopoDS_Shape^ aSourceShape, OCNaroWrappers::OCTopoDS_Shape^ aDestShape) ;

~OCBOPTools_Tools()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
