// File generated by CPPExt (CPP file)
//

#include "BOPTools_PaveFiller.h"
#include "../Converter.h"
#include "../IntTools/IntTools_Context.h"
#include "BOPTools_InterferencePool.h"
#include "BOPTools_SSIntersectionAttribute.h"
#include "../TColStd/TColStd_SetOfInteger.h"
#include "BOPTools_PavePool.h"
#include "BOPTools_CommonBlockPool.h"
#include "BOPTools_SplitShapesPool.h"
#include "BOPTools_IteratorOfCoupleOfShape.h"
#include "BOPTools_Pave.h"
#include "../IntTools/IntTools_ShrunkRange.h"
#include "BOPTools_PaveBlock.h"
#include "../TColStd/TColStd_ListOfInteger.h"
#include "BOPTools_ListOfPaveBlock.h"
#include "BOPTools_PaveSet.h"
#include "BOPTools_Curve.h"
#include "BOPTools_SSInterference.h"
#include "../gp/gp_Pnt.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TColStd/TColStd_IndexedMapOfInteger.h"


using namespace OCNaroWrappers;

OCBOPTools_PaveFiller::OCBOPTools_PaveFiller(BOPTools_PaveFiller* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBOPTools_PaveFiller::OCBOPTools_PaveFiller() 
{
  nativeHandle = new BOPTools_PaveFiller();
}

OCBOPTools_PaveFiller::OCBOPTools_PaveFiller(OCNaroWrappers::OCBOPTools_InterferencePool^ aIP) 
{
  nativeHandle = new BOPTools_PaveFiller(*((BOPTools_InterferencePool*)aIP->Handle));
}

OCBOPTools_PaveFiller::OCBOPTools_PaveFiller(OCNaroWrappers::OCBOPTools_InterferencePool^ theIP, OCNaroWrappers::OCBOPTools_SSIntersectionAttribute^ theSectionAttribute) 
{
  nativeHandle = new BOPTools_PaveFiller(*((BOPTools_InterferencePool*)theIP->Handle), *((BOPTools_SSIntersectionAttribute*)theSectionAttribute->Handle));
}

 void OCBOPTools_PaveFiller::Destroy()
{
  ((BOPTools_PaveFiller*)nativeHandle)->Destroy();
}

 void OCBOPTools_PaveFiller::Perform()
{
  ((BOPTools_PaveFiller*)nativeHandle)->Perform();
}

 void OCBOPTools_PaveFiller::PartialPerform(OCNaroWrappers::OCTColStd_SetOfInteger^ anObjSubSet, OCNaroWrappers::OCTColStd_SetOfInteger^ aToolSubSet)
{
  ((BOPTools_PaveFiller*)nativeHandle)->PartialPerform(*((TColStd_SetOfInteger*)anObjSubSet->Handle), *((TColStd_SetOfInteger*)aToolSubSet->Handle));
}

 void OCBOPTools_PaveFiller::ToCompletePerform()
{
  ((BOPTools_PaveFiller*)nativeHandle)->ToCompletePerform();
}

 void OCBOPTools_PaveFiller::SetContext(OCNaroWrappers::OCIntTools_Context^ aContext)
{
  ((BOPTools_PaveFiller*)nativeHandle)->SetContext(*((Handle_IntTools_Context*)aContext->Handle));
}

OCIntTools_Context^ OCBOPTools_PaveFiller::Context()
{
  Handle(IntTools_Context) tmp = ((BOPTools_PaveFiller*)nativeHandle)->Context();
  return gcnew OCIntTools_Context(&tmp);
}

 void OCBOPTools_PaveFiller::SetInterferencePool(OCNaroWrappers::OCBOPTools_InterferencePool^ aPool)
{
  ((BOPTools_PaveFiller*)nativeHandle)->SetInterferencePool(*((BOPTools_InterferencePool*)aPool->Handle));
}

 System::Boolean OCBOPTools_PaveFiller::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((BOPTools_PaveFiller*)nativeHandle)->IsDone());
}

OCBOPTools_PavePool^ OCBOPTools_PaveFiller::PavePool()
{
  BOPTools_PavePool* tmp = new BOPTools_PavePool(0, 0);
  *tmp = ((BOPTools_PaveFiller*)nativeHandle)->PavePool();
  return gcnew OCBOPTools_PavePool(tmp);
}

OCBOPTools_PavePool^ OCBOPTools_PaveFiller::ChangePavePool()
{
  BOPTools_PavePool* tmp = new BOPTools_PavePool(0, 0);
  *tmp = ((BOPTools_PaveFiller*)nativeHandle)->ChangePavePool();
  return gcnew OCBOPTools_PavePool(tmp);
}

OCBOPTools_CommonBlockPool^ OCBOPTools_PaveFiller::CommonBlockPool()
{
  BOPTools_CommonBlockPool* tmp = new BOPTools_CommonBlockPool(0, 0);
  *tmp = ((BOPTools_PaveFiller*)nativeHandle)->CommonBlockPool();
  return gcnew OCBOPTools_CommonBlockPool(tmp);
}

OCBOPTools_CommonBlockPool^ OCBOPTools_PaveFiller::ChangeCommonBlockPool()
{
  BOPTools_CommonBlockPool* tmp = new BOPTools_CommonBlockPool(0, 0);
  *tmp = ((BOPTools_PaveFiller*)nativeHandle)->ChangeCommonBlockPool();
  return gcnew OCBOPTools_CommonBlockPool(tmp);
}

OCBOPTools_SplitShapesPool^ OCBOPTools_PaveFiller::SplitShapesPool()
{
  BOPTools_SplitShapesPool* tmp = new BOPTools_SplitShapesPool(0, 0);
  *tmp = ((BOPTools_PaveFiller*)nativeHandle)->SplitShapesPool();
  return gcnew OCBOPTools_SplitShapesPool(tmp);
}

OCBOPTools_SplitShapesPool^ OCBOPTools_PaveFiller::ChangeSplitShapesPool()
{
  BOPTools_SplitShapesPool* tmp = new BOPTools_SplitShapesPool(0, 0);
  *tmp = ((BOPTools_PaveFiller*)nativeHandle)->ChangeSplitShapesPool();
  return gcnew OCBOPTools_SplitShapesPool(tmp);
}

 BooleanOperations_PShapesDataStructure OCBOPTools_PaveFiller::DS()
{
  return ((BOPTools_PaveFiller*)nativeHandle)->DS();
}

 BOPTools_PInterferencePool OCBOPTools_PaveFiller::InterfPool()
{
  return ((BOPTools_PaveFiller*)nativeHandle)->InterfPool();
}

OCBOPTools_IteratorOfCoupleOfShape^ OCBOPTools_PaveFiller::IteratorOfCoupleOfShape()
{
  BOPTools_IteratorOfCoupleOfShape* tmp = new BOPTools_IteratorOfCoupleOfShape();
  *tmp = ((BOPTools_PaveFiller*)nativeHandle)->IteratorOfCoupleOfShape();
  return gcnew OCBOPTools_IteratorOfCoupleOfShape(tmp);
}

OCBOPTools_SSIntersectionAttribute^ OCBOPTools_PaveFiller::SectionAttribute()
{
  BOPTools_SSIntersectionAttribute* tmp = new BOPTools_SSIntersectionAttribute(0, 0, 0);
  *tmp = ((BOPTools_PaveFiller*)nativeHandle)->SectionAttribute();
  return gcnew OCBOPTools_SSIntersectionAttribute(tmp);
}

 void OCBOPTools_PaveFiller::SetSectionAttribute(OCNaroWrappers::OCBOPTools_SSIntersectionAttribute^ anAtt)
{
  ((BOPTools_PaveFiller*)nativeHandle)->SetSectionAttribute(*((BOPTools_SSIntersectionAttribute*)anAtt->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsInFace(Standard_Integer aBid, Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsInFace(aBid, nF1, nF2, *((TColStd_ListOfInteger*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsInFace(Standard_Integer nE1, Standard_Integer nF2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsInFace(nE1, nF2, *((TColStd_ListOfInteger*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsOnEdge(Standard_Integer nE1, Standard_Integer nE2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsOnEdge(nE1, nE2, *((TColStd_ListOfInteger*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsOnFace(Standard_Integer nE1, Standard_Integer nF2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsOnFace(nE1, nF2, *((TColStd_ListOfInteger*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsOnFace(Standard_Integer aBid, Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCTColStd_ListOfInteger^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsOnFace(aBid, nF1, nF2, *((TColStd_ListOfInteger*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsInFace(Standard_Integer aBid, Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsInFace(aBid, nF1, nF2, *((BOPTools_ListOfPaveBlock*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsInFace(Standard_Integer nE1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsInFace(nE1, nF2, *((BOPTools_ListOfPaveBlock*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsOnEdge(Standard_Integer nE1, Standard_Integer nE2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsOnEdge(nE1, nE2, *((BOPTools_ListOfPaveBlock*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsOnFace(Standard_Integer nE1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsOnFace(nE1, nF2, *((BOPTools_ListOfPaveBlock*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::SplitsOnFace(Standard_Integer aBid, Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_ListOfPaveBlock^ aLs)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->SplitsOnFace(aBid, nF1, nF2, *((BOPTools_ListOfPaveBlock*)aLs->Handle));
}

 Standard_Integer OCBOPTools_PaveFiller::FindSDVertex(Standard_Integer nV)
{
  return ((BOPTools_PaveFiller*)nativeHandle)->FindSDVertex(nV);
}

 void OCBOPTools_PaveFiller::PrepareSetForFace(Standard_Integer nF1, Standard_Integer nF2, OCNaroWrappers::OCBOPTools_PaveSet^ aPaveSet)
{
  ((BOPTools_PaveFiller*)nativeHandle)->PrepareSetForFace(nF1, nF2, *((BOPTools_PaveSet*)aPaveSet->Handle));
}


