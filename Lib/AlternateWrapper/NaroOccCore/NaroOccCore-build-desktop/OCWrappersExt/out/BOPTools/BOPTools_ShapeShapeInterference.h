// File generated by CPPExt (MPV)
//
#ifndef _BOPTools_ShapeShapeInterference_OCWrappers_HeaderFile
#define _BOPTools_ShapeShapeInterference_OCWrappers_HeaderFile

// include native header
#include <BOPTools_ShapeShapeInterference.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{




//!  Root class for storing  an  Interference <br>
//!  between a couple BRep shapes <br>
public ref class OCBOPTools_ShapeShapeInterference  {

protected:
  BOPTools_ShapeShapeInterference* nativeHandle;
  OCBOPTools_ShapeShapeInterference(OCDummy^) {};

public:
  property BOPTools_ShapeShapeInterference* Handle
  {
    BOPTools_ShapeShapeInterference* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBOPTools_ShapeShapeInterference(BOPTools_ShapeShapeInterference* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCBOPTools_ShapeShapeInterference();


//! Constructor <br>
OCBOPTools_ShapeShapeInterference(Standard_Integer anIndex1, Standard_Integer anIndex2);


//! Modifier <br>
//! Sets DS-index for the first shape from the  couple <br>
 /*instead*/  void SetIndex1(Standard_Integer anIndex1) ;


//! Modifier <br>
//! Sets DS-index for the second shape from the  couple <br>
 /*instead*/  void SetIndex2(Standard_Integer anIndex2) ;


//! Modifier <br>
//! Sets DS-index for the new shape <br>
 /*instead*/  void SetNewShape(Standard_Integer anIndex) ;


//! Selector <br>
 /*instead*/  Standard_Integer Index1() ;


//! Selector <br>
 /*instead*/  Standard_Integer Index2() ;


//! Selector <br>
 /*instead*/  void Indices(Standard_Integer& anIndex1, Standard_Integer& anIndex2) ;


//! Selector <br>
//! Gets the value of index <br>
//! if  anIndex==myIndex1 it returns myIndex2; <br>
//! if  anIndex==myIndex2 it returns myIndex1; <br>
//! otherwise it returns 0; <br>
 /*instead*/  Standard_Integer OppositeIndex(Standard_Integer anIndex) ;


//! Selector <br>
 /*instead*/  Standard_Integer NewShape() ;

~OCBOPTools_ShapeShapeInterference()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
