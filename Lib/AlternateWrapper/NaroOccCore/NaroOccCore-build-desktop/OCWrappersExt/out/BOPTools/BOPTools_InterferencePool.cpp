// File generated by CPPExt (CPP file)
//

#include "BOPTools_InterferencePool.h"
#include "../Converter.h"
#include "../BooleanOperations/BooleanOperations_ShapesDataStructure.h"
#include "BOPTools_CArray1OfInterferenceLine.h"
#include "BOPTools_CArray1OfSSInterference.h"
#include "BOPTools_CArray1OfESInterference.h"
#include "BOPTools_CArray1OfVSInterference.h"
#include "BOPTools_CArray1OfEEInterference.h"
#include "BOPTools_CArray1OfVEInterference.h"
#include "BOPTools_CArray1OfVVInterference.h"


using namespace OCNaroWrappers;

OCBOPTools_InterferencePool::OCBOPTools_InterferencePool(BOPTools_InterferencePool* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBOPTools_InterferencePool::OCBOPTools_InterferencePool() 
{
  nativeHandle = new BOPTools_InterferencePool();
}

OCBOPTools_InterferencePool::OCBOPTools_InterferencePool(OCNaroWrappers::OCBooleanOperations_ShapesDataStructure^ aDS) 
{
  nativeHandle = new BOPTools_InterferencePool(*((BooleanOperations_ShapesDataStructure*)aDS->Handle));
}

 void OCBOPTools_InterferencePool::SetDS(OCNaroWrappers::OCBooleanOperations_ShapesDataStructure^ aDS)
{
  ((BOPTools_InterferencePool*)nativeHandle)->SetDS(*((BooleanOperations_ShapesDataStructure*)aDS->Handle));
}

 BooleanOperations_PShapesDataStructure OCBOPTools_InterferencePool::DS()
{
  return ((BOPTools_InterferencePool*)nativeHandle)->DS();
}

 System::Boolean OCBOPTools_InterferencePool::HasInterference(Standard_Integer anInd)
{
  return OCConverter::StandardBooleanToBoolean(((BOPTools_InterferencePool*)nativeHandle)->HasInterference(anInd));
}

 System::Boolean OCBOPTools_InterferencePool::IsComputed(Standard_Integer anInd1, Standard_Integer anInd2)
{
  return OCConverter::StandardBooleanToBoolean(((BOPTools_InterferencePool*)nativeHandle)->IsComputed(anInd1, anInd2));
}

 void OCBOPTools_InterferencePool::SortTypes(Standard_Integer& anInd1, Standard_Integer& anInd2)
{
  ((BOPTools_InterferencePool*)nativeHandle)->SortTypes(anInd1, anInd2);
}

 OCBooleanOperations_KindOfInterference OCBOPTools_InterferencePool::InterferenceType(Standard_Integer anInd1, Standard_Integer anInd2)
{
  return (OCBooleanOperations_KindOfInterference)(((BOPTools_InterferencePool*)nativeHandle)->InterferenceType(anInd1, anInd2));
}

 void OCBOPTools_InterferencePool::AddInterference(Standard_Integer anInd1, Standard_Integer anInd2, OCBooleanOperations_KindOfInterference aType, Standard_Integer anIndex)
{
  ((BOPTools_InterferencePool*)nativeHandle)->AddInterference(anInd1, anInd2, (BooleanOperations_KindOfInterference)aType, anIndex);
}

OCBOPTools_CArray1OfInterferenceLine^ OCBOPTools_InterferencePool::InterferenceTable()
{
  BOPTools_CArray1OfInterferenceLine* tmp = new BOPTools_CArray1OfInterferenceLine(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->InterferenceTable();
  return gcnew OCBOPTools_CArray1OfInterferenceLine(tmp);
}

OCBOPTools_CArray1OfSSInterference^ OCBOPTools_InterferencePool::SSInterferences()
{
  BOPTools_CArray1OfSSInterference* tmp = new BOPTools_CArray1OfSSInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->SSInterferences();
  return gcnew OCBOPTools_CArray1OfSSInterference(tmp);
}

OCBOPTools_CArray1OfESInterference^ OCBOPTools_InterferencePool::ESInterferences()
{
  BOPTools_CArray1OfESInterference* tmp = new BOPTools_CArray1OfESInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->ESInterferences();
  return gcnew OCBOPTools_CArray1OfESInterference(tmp);
}

OCBOPTools_CArray1OfVSInterference^ OCBOPTools_InterferencePool::VSInterferences()
{
  BOPTools_CArray1OfVSInterference* tmp = new BOPTools_CArray1OfVSInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->VSInterferences();
  return gcnew OCBOPTools_CArray1OfVSInterference(tmp);
}

OCBOPTools_CArray1OfEEInterference^ OCBOPTools_InterferencePool::EEInterferences()
{
  BOPTools_CArray1OfEEInterference* tmp = new BOPTools_CArray1OfEEInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->EEInterferences();
  return gcnew OCBOPTools_CArray1OfEEInterference(tmp);
}

OCBOPTools_CArray1OfVEInterference^ OCBOPTools_InterferencePool::VEInterferences()
{
  BOPTools_CArray1OfVEInterference* tmp = new BOPTools_CArray1OfVEInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->VEInterferences();
  return gcnew OCBOPTools_CArray1OfVEInterference(tmp);
}

OCBOPTools_CArray1OfVVInterference^ OCBOPTools_InterferencePool::VVInterferences()
{
  BOPTools_CArray1OfVVInterference* tmp = new BOPTools_CArray1OfVVInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->VVInterferences();
  return gcnew OCBOPTools_CArray1OfVVInterference(tmp);
}

OCBOPTools_CArray1OfSSInterference^ OCBOPTools_InterferencePool::SSInterfs()
{
  BOPTools_CArray1OfSSInterference* tmp = new BOPTools_CArray1OfSSInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->SSInterfs();
  return gcnew OCBOPTools_CArray1OfSSInterference(tmp);
}

OCBOPTools_CArray1OfESInterference^ OCBOPTools_InterferencePool::ESInterfs()
{
  BOPTools_CArray1OfESInterference* tmp = new BOPTools_CArray1OfESInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->ESInterfs();
  return gcnew OCBOPTools_CArray1OfESInterference(tmp);
}

OCBOPTools_CArray1OfVSInterference^ OCBOPTools_InterferencePool::VSInterfs()
{
  BOPTools_CArray1OfVSInterference* tmp = new BOPTools_CArray1OfVSInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->VSInterfs();
  return gcnew OCBOPTools_CArray1OfVSInterference(tmp);
}

OCBOPTools_CArray1OfEEInterference^ OCBOPTools_InterferencePool::EEInterfs()
{
  BOPTools_CArray1OfEEInterference* tmp = new BOPTools_CArray1OfEEInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->EEInterfs();
  return gcnew OCBOPTools_CArray1OfEEInterference(tmp);
}

OCBOPTools_CArray1OfVEInterference^ OCBOPTools_InterferencePool::VEInterfs()
{
  BOPTools_CArray1OfVEInterference* tmp = new BOPTools_CArray1OfVEInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->VEInterfs();
  return gcnew OCBOPTools_CArray1OfVEInterference(tmp);
}

OCBOPTools_CArray1OfVVInterference^ OCBOPTools_InterferencePool::VVInterfs()
{
  BOPTools_CArray1OfVVInterference* tmp = new BOPTools_CArray1OfVVInterference(0, 0);
  *tmp = ((BOPTools_InterferencePool*)nativeHandle)->VVInterfs();
  return gcnew OCBOPTools_CArray1OfVVInterference(tmp);
}

 BOPTools_PShapeShapeInterference OCBOPTools_InterferencePool::GetInterference(Standard_Integer anIndex, OCBooleanOperations_KindOfInterference aType)
{
  return ((BOPTools_InterferencePool*)nativeHandle)->GetInterference(anIndex, (BooleanOperations_KindOfInterference)aType);
}


