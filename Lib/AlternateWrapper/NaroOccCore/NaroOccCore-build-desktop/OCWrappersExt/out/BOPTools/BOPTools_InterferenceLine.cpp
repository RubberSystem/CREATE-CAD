// File generated by CPPExt (CPP file)
//

#include "BOPTools_InterferenceLine.h"
#include "../Converter.h"
#include "BOPTools_ListOfInterference.h"
#include "BOPTools_Interference.h"


using namespace OCNaroWrappers;

OCBOPTools_InterferenceLine::OCBOPTools_InterferenceLine(BOPTools_InterferenceLine* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBOPTools_InterferenceLine::OCBOPTools_InterferenceLine() 
{
  nativeHandle = new BOPTools_InterferenceLine();
}

OCBOPTools_ListOfInterference^ OCBOPTools_InterferenceLine::GetOnType(OCBooleanOperations_KindOfInterference aType)
{
  BOPTools_ListOfInterference* tmp = new BOPTools_ListOfInterference();
  *tmp = ((BOPTools_InterferenceLine*)nativeHandle)->GetOnType((BooleanOperations_KindOfInterference)aType);
  return gcnew OCBOPTools_ListOfInterference(tmp);
}

 System::Boolean OCBOPTools_InterferenceLine::IsComputed(Standard_Integer aWith, OCBooleanOperations_KindOfInterference aType)
{
  return OCConverter::StandardBooleanToBoolean(((BOPTools_InterferenceLine*)nativeHandle)->IsComputed(aWith, (BooleanOperations_KindOfInterference)aType));
}

 void OCBOPTools_InterferenceLine::AddInterference(OCNaroWrappers::OCBOPTools_Interference^ anInterference)
{
  ((BOPTools_InterferenceLine*)nativeHandle)->AddInterference(*((BOPTools_Interference*)anInterference->Handle));
}

 void OCBOPTools_InterferenceLine::AddInterference(Standard_Integer aWith, OCBooleanOperations_KindOfInterference aType, Standard_Integer anIndex)
{
  ((BOPTools_InterferenceLine*)nativeHandle)->AddInterference(aWith, (BooleanOperations_KindOfInterference)aType, anIndex);
}

OCBOPTools_ListOfInterference^ OCBOPTools_InterferenceLine::List()
{
  BOPTools_ListOfInterference* tmp = new BOPTools_ListOfInterference();
  *tmp = ((BOPTools_InterferenceLine*)nativeHandle)->List();
  return gcnew OCBOPTools_ListOfInterference(tmp);
}

OCBOPTools_ListOfInterference^ OCBOPTools_InterferenceLine::RealList()
{
  BOPTools_ListOfInterference* tmp = new BOPTools_ListOfInterference();
  *tmp = ((BOPTools_InterferenceLine*)nativeHandle)->RealList();
  return gcnew OCBOPTools_ListOfInterference(tmp);
}

 System::Boolean OCBOPTools_InterferenceLine::HasInterference()
{
  return OCConverter::StandardBooleanToBoolean(((BOPTools_InterferenceLine*)nativeHandle)->HasInterference());
}


