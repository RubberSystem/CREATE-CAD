// File generated by CPPExt (MPV)
//
#ifndef _BOPTools_InterferenceLine_OCWrappers_HeaderFile
#define _BOPTools_InterferenceLine_OCWrappers_HeaderFile

// include native header
#include <BOPTools_InterferenceLine.hxx>
#include "../Converter.h"


#include "BOPTools_ListOfInterference.h"
#include "../BooleanOperations/BooleanOperations_KindOfInterference.h"


namespace OCNaroWrappers
{

ref class OCBOPTools_ListOfInterference;
ref class OCBOPTools_Interference;


//! class for storing information about all <br>
//!         interferences for given shape. <br>
//!         So,  for each shape in the DS, we will have <br>
//!         the  following interference list <br>
//!         (i1, t1, r1), (i2, t2, r2),...(iN, tN, rN), <br>
//!         where <br>
//!         (iN, tN, rN) - object of type  BOPTools_Interference <br>
//!         The  class 	BOPTools_InterferenceLine is  dedicated <br>
//!         to provide convinient tools to  manage this info. <br>
//! <br>
public ref class OCBOPTools_InterferenceLine  {

protected:
  BOPTools_InterferenceLine* nativeHandle;
  OCBOPTools_InterferenceLine(OCDummy^) {};

public:
  property BOPTools_InterferenceLine* Handle
  {
    BOPTools_InterferenceLine* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBOPTools_InterferenceLine(BOPTools_InterferenceLine* nativeHandle);

// Methods PUBLIC


//! Empty constructor <br>
OCBOPTools_InterferenceLine();


//! Returns info. list for interferences of given type <br>
 /*instead*/  OCBOPTools_ListOfInterference^ GetOnType(OCBooleanOperations_KindOfInterference aType) ;


//! Returns  TRUE if the interference of type <aType> <br>
//! with the shape <aWith> has already been computed. <br>
 /*instead*/  System::Boolean IsComputed(Standard_Integer aWith, OCBooleanOperations_KindOfInterference aType) ;


//! Adds  info. about the Interference to the list <br>
 /*instead*/  void AddInterference(OCNaroWrappers::OCBOPTools_Interference^ anInterference) ;


//! Adds  info. about the Interference to the list <br>
 /*instead*/  void AddInterference(Standard_Integer aWith, OCBooleanOperations_KindOfInterference aType, Standard_Integer anIndex) ;


//! Selector <br>
 /*instead*/  OCBOPTools_ListOfInterference^ List() ;


//! Selector <br>
 /*instead*/  OCBOPTools_ListOfInterference^ RealList() ;


//! Returns  TRUE if the list contains at least one  interference <br>
//! with non-empty result <br>
 /*instead*/  System::Boolean HasInterference() ;

~OCBOPTools_InterferenceLine()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
