// File generated by CPPExt (CPP file)
//

#include "MAT_ListOfEdge.h"
#include "../Converter.h"
#include "MAT_TListNodeOfListOfEdge.h"
#include "MAT_Edge.h"


using namespace OCNaroWrappers;

OCMAT_ListOfEdge::OCMAT_ListOfEdge(Handle(MAT_ListOfEdge)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MAT_ListOfEdge(*nativeHandle);
}

OCMAT_ListOfEdge::OCMAT_ListOfEdge() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MAT_ListOfEdge(new MAT_ListOfEdge());
}

 void OCMAT_ListOfEdge::First()
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->First();
}

 void OCMAT_ListOfEdge::Last()
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Last();
}

 void OCMAT_ListOfEdge::Init(OCNaroWrappers::OCMAT_Edge^ aniten)
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Init(*((Handle_MAT_Edge*)aniten->Handle));
}

 void OCMAT_ListOfEdge::Next()
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Next();
}

 void OCMAT_ListOfEdge::Previous()
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Previous();
}

 System::Boolean OCMAT_ListOfEdge::More()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MAT_ListOfEdge*)nativeHandle))->More());
}

OCMAT_Edge^ OCMAT_ListOfEdge::Current()
{
  Handle(MAT_Edge) tmp = (*((Handle_MAT_ListOfEdge*)nativeHandle))->Current();
  return gcnew OCMAT_Edge(&tmp);
}

 void OCMAT_ListOfEdge::Current(OCNaroWrappers::OCMAT_Edge^ anitem)
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Current(*((Handle_MAT_Edge*)anitem->Handle));
}

OCMAT_Edge^ OCMAT_ListOfEdge::FirstItem()
{
  Handle(MAT_Edge) tmp = (*((Handle_MAT_ListOfEdge*)nativeHandle))->FirstItem();
  return gcnew OCMAT_Edge(&tmp);
}

OCMAT_Edge^ OCMAT_ListOfEdge::LastItem()
{
  Handle(MAT_Edge) tmp = (*((Handle_MAT_ListOfEdge*)nativeHandle))->LastItem();
  return gcnew OCMAT_Edge(&tmp);
}

OCMAT_Edge^ OCMAT_ListOfEdge::PreviousItem()
{
  Handle(MAT_Edge) tmp = (*((Handle_MAT_ListOfEdge*)nativeHandle))->PreviousItem();
  return gcnew OCMAT_Edge(&tmp);
}

OCMAT_Edge^ OCMAT_ListOfEdge::NextItem()
{
  Handle(MAT_Edge) tmp = (*((Handle_MAT_ListOfEdge*)nativeHandle))->NextItem();
  return gcnew OCMAT_Edge(&tmp);
}

 Standard_Integer OCMAT_ListOfEdge::Number()
{
  return (*((Handle_MAT_ListOfEdge*)nativeHandle))->Number();
}

 Standard_Integer OCMAT_ListOfEdge::Index()
{
  return (*((Handle_MAT_ListOfEdge*)nativeHandle))->Index();
}

OCMAT_Edge^ OCMAT_ListOfEdge::Brackets(Standard_Integer anindex)
{
  Handle(MAT_Edge) tmp = (*((Handle_MAT_ListOfEdge*)nativeHandle))->Brackets(anindex);
  return gcnew OCMAT_Edge(&tmp);
}

 void OCMAT_ListOfEdge::Unlink()
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Unlink();
}

 void OCMAT_ListOfEdge::LinkBefore(OCNaroWrappers::OCMAT_Edge^ anitem)
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->LinkBefore(*((Handle_MAT_Edge*)anitem->Handle));
}

 void OCMAT_ListOfEdge::LinkAfter(OCNaroWrappers::OCMAT_Edge^ anitem)
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->LinkAfter(*((Handle_MAT_Edge*)anitem->Handle));
}

 void OCMAT_ListOfEdge::FrontAdd(OCNaroWrappers::OCMAT_Edge^ anitem)
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->FrontAdd(*((Handle_MAT_Edge*)anitem->Handle));
}

 void OCMAT_ListOfEdge::BackAdd(OCNaroWrappers::OCMAT_Edge^ anitem)
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->BackAdd(*((Handle_MAT_Edge*)anitem->Handle));
}

 void OCMAT_ListOfEdge::Permute()
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Permute();
}

 void OCMAT_ListOfEdge::Loop()
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Loop();
}

 System::Boolean OCMAT_ListOfEdge::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MAT_ListOfEdge*)nativeHandle))->IsEmpty());
}

 void OCMAT_ListOfEdge::Dump(Standard_Integer ashift, Standard_Integer alevel)
{
  (*((Handle_MAT_ListOfEdge*)nativeHandle))->Dump(ashift, alevel);
}


