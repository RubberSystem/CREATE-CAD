// File generated by CPPExt (CPP file)
//

#include "MAT_DataMapOfIntegerBisector.h"
#include "../Converter.h"
#include "MAT_Bisector.h"
#include "../TColStd/TColStd_MapIntegerHasher.h"
#include "MAT_DataMapNodeOfDataMapOfIntegerBisector.h"
#include "MAT_DataMapIteratorOfDataMapOfIntegerBisector.h"


using namespace OCNaroWrappers;

OCMAT_DataMapOfIntegerBisector::OCMAT_DataMapOfIntegerBisector(MAT_DataMapOfIntegerBisector* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMAT_DataMapOfIntegerBisector::OCMAT_DataMapOfIntegerBisector(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new MAT_DataMapOfIntegerBisector(NbBuckets);
}

OCMAT_DataMapOfIntegerBisector^ OCMAT_DataMapOfIntegerBisector::Assign(OCNaroWrappers::OCMAT_DataMapOfIntegerBisector^ Other)
{
  MAT_DataMapOfIntegerBisector* tmp = new MAT_DataMapOfIntegerBisector(0);
  *tmp = ((MAT_DataMapOfIntegerBisector*)nativeHandle)->Assign(*((MAT_DataMapOfIntegerBisector*)Other->Handle));
  return gcnew OCMAT_DataMapOfIntegerBisector(tmp);
}

 void OCMAT_DataMapOfIntegerBisector::ReSize(Standard_Integer NbBuckets)
{
  ((MAT_DataMapOfIntegerBisector*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCMAT_DataMapOfIntegerBisector::Bind(Standard_Integer K, OCNaroWrappers::OCMAT_Bisector^ I)
{
  return OCConverter::StandardBooleanToBoolean(((MAT_DataMapOfIntegerBisector*)nativeHandle)->Bind(K, *((Handle_MAT_Bisector*)I->Handle)));
}

 System::Boolean OCMAT_DataMapOfIntegerBisector::IsBound(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((MAT_DataMapOfIntegerBisector*)nativeHandle)->IsBound(K));
}

 System::Boolean OCMAT_DataMapOfIntegerBisector::UnBind(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((MAT_DataMapOfIntegerBisector*)nativeHandle)->UnBind(K));
}

OCMAT_Bisector^ OCMAT_DataMapOfIntegerBisector::Find(Standard_Integer K)
{
  Handle(MAT_Bisector) tmp = ((MAT_DataMapOfIntegerBisector*)nativeHandle)->Find(K);
  return gcnew OCMAT_Bisector(&tmp);
}

OCMAT_Bisector^ OCMAT_DataMapOfIntegerBisector::ChangeFind(Standard_Integer K)
{
  Handle(MAT_Bisector) tmp = ((MAT_DataMapOfIntegerBisector*)nativeHandle)->ChangeFind(K);
  return gcnew OCMAT_Bisector(&tmp);
}

 Standard_Address OCMAT_DataMapOfIntegerBisector::Find1(Standard_Integer K)
{
  return ((MAT_DataMapOfIntegerBisector*)nativeHandle)->Find1(K);
}

 Standard_Address OCMAT_DataMapOfIntegerBisector::ChangeFind1(Standard_Integer K)
{
  return ((MAT_DataMapOfIntegerBisector*)nativeHandle)->ChangeFind1(K);
}


