// File generated by CPPExt (Transient)
//
#ifndef _MAT_TListNodeOfListOfEdge_OCWrappers_HeaderFile
#define _MAT_TListNodeOfListOfEdge_OCWrappers_HeaderFile

// include the wrapped class
#include <MAT_TListNodeOfListOfEdge.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCMAT_Edge;
ref class OCMAT_ListOfEdge;



public ref class OCMAT_TListNodeOfListOfEdge : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMAT_TListNodeOfListOfEdge(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMAT_TListNodeOfListOfEdge(Handle(MAT_TListNodeOfListOfEdge)* nativeHandle);

// Methods PUBLIC


OCMAT_TListNodeOfListOfEdge();


OCMAT_TListNodeOfListOfEdge(OCNaroWrappers::OCMAT_Edge^ anitem);


 /*instead*/  OCMAT_Edge^ GetItem() ;


 /*instead*/  OCMAT_TListNodeOfListOfEdge^ Next() ;


 /*instead*/  OCMAT_TListNodeOfListOfEdge^ Previous() ;


 /*instead*/  void SetItem(OCNaroWrappers::OCMAT_Edge^ anitem) ;


 /*instead*/  void Next(OCNaroWrappers::OCMAT_TListNodeOfListOfEdge^ atlistnode) ;


 /*instead*/  void Previous(OCNaroWrappers::OCMAT_TListNodeOfListOfEdge^ atlistnode) ;


 /*instead*/  void Dummy() ;

~OCMAT_TListNodeOfListOfEdge()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
