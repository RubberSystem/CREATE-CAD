// File generated by CPPExt (Transient)
//
#ifndef _MAT_Arc_OCWrappers_HeaderFile
#define _MAT_Arc_OCWrappers_HeaderFile

// include the wrapped class
#include <MAT_Arc.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "MAT_Side.h"


namespace OCNaroWrappers
{

ref class OCMAT_BasicElt;
ref class OCMAT_Node;


//! An Arc is associated to each Bisecting of the mat. <br>
public ref class OCMAT_Arc : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMAT_Arc(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMAT_Arc(Handle(MAT_Arc)* nativeHandle);

// Methods PUBLIC


OCMAT_Arc(Standard_Integer ArcIndex, Standard_Integer GeomIndex, OCNaroWrappers::OCMAT_BasicElt^ FirstElement, OCNaroWrappers::OCMAT_BasicElt^ SecondElement);

//! Returns the index of <me> in Graph.theArcs. <br>
 /*instead*/  Standard_Integer Index() ;

//! Returns  the index associated  of the  geometric <br>
//!            representation of <me>. <br>
 /*instead*/  Standard_Integer GeomIndex() ;

//! Returns one of the BasicElt equidistant from <me>. <br>
 /*instead*/  OCMAT_BasicElt^ FirstElement() ;

//! Returns the other BasicElt equidistant from <me>. <br>
 /*instead*/  OCMAT_BasicElt^ SecondElement() ;

//! Returns one Node extremity of <me>. <br>
 /*instead*/  OCMAT_Node^ FirstNode() ;

//! Returns the other Node extremity of <me>. <br>
 /*instead*/  OCMAT_Node^ SecondNode() ;

//! an Arc has two Node, if <aNode> egal one <br>
//!            Returns the other. <br>
//! <br>//! if <aNode> is not oh <me> <br>
 /*instead*/  OCMAT_Node^ TheOtherNode(OCNaroWrappers::OCMAT_Node^ aNode) ;

//! Returnst True is there is an arc linked to <br>
//!            the Node <aNode> located on the side <aSide> of <me>; <br>//! if <aNode> is not on <me> <br>
 /*instead*/  System::Boolean HasNeighbour(OCNaroWrappers::OCMAT_Node^ aNode, OCMAT_Side aSide) ;

//! Returns the first arc linked to the Node <aNode> <br>
//!            located on the side <aSide> of <me>; <br>//! if HasNeighbour() returns FALSE. <br>
 /*instead*/  OCMAT_Arc^ Neighbour(OCNaroWrappers::OCMAT_Node^ aNode, OCMAT_Side aSide) ;


 /*instead*/  void SetIndex(Standard_Integer anInteger) ;


 /*instead*/  void SetGeomIndex(Standard_Integer anInteger) ;


 /*instead*/  void SetFirstElement(OCNaroWrappers::OCMAT_BasicElt^ aBasicElt) ;


 /*instead*/  void SetSecondElement(OCNaroWrappers::OCMAT_BasicElt^ aBasicElt) ;


 /*instead*/  void SetFirstNode(OCNaroWrappers::OCMAT_Node^ aNode) ;


 /*instead*/  void SetSecondNode(OCNaroWrappers::OCMAT_Node^ aNode) ;


 /*instead*/  void SetFirstArc(OCMAT_Side aSide, OCNaroWrappers::OCMAT_Arc^ anArc) ;


 /*instead*/  void SetSecondArc(OCMAT_Side aSide, OCNaroWrappers::OCMAT_Arc^ anArc) ;


 /*instead*/  void SetNeighbour(OCMAT_Side aSide, OCNaroWrappers::OCMAT_Node^ aNode, OCNaroWrappers::OCMAT_Arc^ anArc) ;

~OCMAT_Arc()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
