// File generated by CPPExt (MPV)
//
#ifndef _MAT2d_Tool2d_OCWrappers_HeaderFile
#define _MAT2d_Tool2d_OCWrappers_HeaderFile

// include native header
#include <MAT2d_Tool2d.hxx>
#include "../Converter.h"


#include "MAT2d_DataMapOfIntegerBisec.h"
#include "MAT2d_DataMapOfIntegerPnt2d.h"
#include "MAT2d_DataMapOfIntegerVec2d.h"
#include "../TColStd/TColStd_SequenceOfInteger.h"
#include "../MAT/MAT_Side.h"


namespace OCNaroWrappers
{

ref class OCMAT2d_Circuit;
ref class OCMAT_Bisector;
ref class OCBisector_Bisec;
ref class OCGeom2d_Geometry;
ref class OCgp_Pnt2d;
ref class OCgp_Vec2d;


//! Set of the methods useful for the MAT's computation. <br>
//!          Tool2d contains the geometry of the bisecting locus. <br>
public ref class OCMAT2d_Tool2d  {

protected:
  MAT2d_Tool2d* nativeHandle;
  OCMAT2d_Tool2d(OCDummy^) {};

public:
  property MAT2d_Tool2d* Handle
  {
    MAT2d_Tool2d* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCMAT2d_Tool2d(MAT2d_Tool2d* nativeHandle);

// Methods PUBLIC

//! Empty Constructor. <br>
OCMAT2d_Tool2d();

//!<aSide> defines the side of the computation of the map. <br>
 /*instead*/  void Sense(OCMAT_Side aside) ;

//! InitItems cuts the line in Items. <br>
//!            this Items are the geometrics representations of <br>
//!            the BasicElts from MAT. <br>
 /*instead*/  void InitItems(OCNaroWrappers::OCMAT2d_Circuit^ aCircuit) ;

//! Returns the Number of Items . <br>
 /*instead*/  Standard_Integer NumberOfItems() ;

//! Returns tolerance to test the confusion of two points. <br>
 /*instead*/  Standard_Real ToleranceOfConfusion() ;

//! Creates the point at the origin of the bisector between <br>
//!            anitem and the previous  item. <br>
//!            dist is the distance from the FirstPoint to <anitem>. <br>
//!            Returns the index of this point in <theGeomPnts>. <br>
 /*instead*/  Standard_Integer FirstPoint(Standard_Integer anitem, Standard_Real& dist) ;

//! Creates the Tangent at the end of the Item defined <br>
//!            by <anitem>. Returns the index of this vector in <br>
//!            <theGeomVecs> <br>
 /*instead*/  Standard_Integer TangentBefore(Standard_Integer anitem) ;

//! Creates the Reversed Tangent at the origin of the Item <br>
//!            defined by <anitem>. Returns the index of this vector in <br>
//!            <theGeomVecs> <br>
 /*instead*/  Standard_Integer TangentAfter(Standard_Integer anitem) ;

//! Creates the Tangent at the end of the bisector defined <br>
//!            by <bisector>. Returns the index of this vector in <br>
//!            <theGeomVecs> <br>
 /*instead*/  Standard_Integer Tangent(Standard_Integer bisector) ;

//! Creates the geometric bisector defined by <abisector>. <br>
 /*instead*/  void CreateBisector(OCNaroWrappers::OCMAT_Bisector^ abisector) ;

//! Trims the geometric bisector by the <firstparameter> <br>
//!            of <abisector>. <br>
//!            If the parameter is out of the bisector, Return FALSE. <br>
//!            else Return True. <br>
 /*instead*/  System::Boolean TrimBisector(OCNaroWrappers::OCMAT_Bisector^ abisector) ;

//! Trims the geometric bisector by the point of index <br>
//!            <apoint> in <theGeomPnts>. <br>
//!            If the point is out of the bisector, Return FALSE. <br>
//!            else Return True. <br>
 /*instead*/  System::Boolean TrimBisector(OCNaroWrappers::OCMAT_Bisector^ abisector, Standard_Integer apoint) ;

//! Computes  the point  of  intersection between  the <br>
//!             bisectors defined  by  <bisectorone>  and <br>
//!             <bisectortwo> . <br>
//!             If this point exists,  <intpnt> is its  index <br>
//!             in <theGeomPnts> and Return the distance of the point <br>
//!             from the bisector else Return <RealLast>. <br>
 /*instead*/  Standard_Real IntersectBisector(OCNaroWrappers::OCMAT_Bisector^ bisectorone, OCNaroWrappers::OCMAT_Bisector^ bisectortwo, Standard_Integer& intpnt) ;

//! Returns the distance between the two points designed <br>
//!          by their parameters on <abisector>. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCMAT_Bisector^ abisector, Standard_Real param1, Standard_Real param2) ;

//! displays informations about the bisector defined by <br>
//!            <bisector>. <br>
 /*instead*/  void Dump(Standard_Integer bisector, Standard_Integer erease) ;

//! Returns the <Bisec> of index <Index> in <br>
//!            <theGeomBisectors>. <br>
//! <br>
 /*instead*/  OCBisector_Bisec^ GeomBis(Standard_Integer Index) ;

//! Returns the Geometry of index <Index> in <theGeomElts>. <br>
 /*instead*/  OCGeom2d_Geometry^ GeomElt(Standard_Integer Index) ;

//! Returns the point of index <Index> in the <theGeomPnts>. <br>
//! <br>
 /*instead*/  OCgp_Pnt2d^ GeomPnt(Standard_Integer Index) ;

//! Returns the  vector  of index <Index> in the <br>
//!            <theGeomVecs>. <br>
//! <br>
 /*instead*/  OCgp_Vec2d^ GeomVec(Standard_Integer Index) ;


//! <br>
 /*instead*/  OCMAT2d_Circuit^ Circuit() ;


 /*instead*/  void BisecFusion(Standard_Integer Index1, Standard_Integer Index2) ;

//! Returns the <Bisec> of index <Index> in <br>
//!            <theGeomBisectors>. <br>
//! <br>
 /*instead*/  OCBisector_Bisec^ ChangeGeomBis(Standard_Integer Index) ;

~OCMAT2d_Tool2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
