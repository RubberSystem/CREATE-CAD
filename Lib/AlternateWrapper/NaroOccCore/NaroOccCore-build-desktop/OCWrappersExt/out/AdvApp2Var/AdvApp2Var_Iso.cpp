// File generated by CPPExt (CPP file)
//

#include "AdvApp2Var_Iso.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_HArray2OfReal.h"
#include "AdvApp2Var_Context.h"
#include "AdvApp2Var_Node.h"


using namespace OCNaroWrappers;

OCAdvApp2Var_Iso::OCAdvApp2Var_Iso(AdvApp2Var_Iso* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCAdvApp2Var_Iso::OCAdvApp2Var_Iso() 
{
  nativeHandle = new AdvApp2Var_Iso();
}

OCAdvApp2Var_Iso::OCAdvApp2Var_Iso(OCGeomAbs_IsoType type, Standard_Integer iu, Standard_Integer iv) 
{
  nativeHandle = new AdvApp2Var_Iso((GeomAbs_IsoType)type, iu, iv);
}

OCAdvApp2Var_Iso::OCAdvApp2Var_Iso(OCGeomAbs_IsoType type, Standard_Real cte, Standard_Real Ufirst, Standard_Real Ulast, Standard_Real Vfirst, Standard_Real Vlast, Standard_Integer pos, Standard_Integer iu, Standard_Integer iv) 
{
  nativeHandle = new AdvApp2Var_Iso((GeomAbs_IsoType)type, cte, Ufirst, Ulast, Vfirst, Vlast, pos, iu, iv);
}

 System::Boolean OCAdvApp2Var_Iso::IsApproximated()
{
  return OCConverter::StandardBooleanToBoolean(((AdvApp2Var_Iso*)nativeHandle)->IsApproximated());
}

 System::Boolean OCAdvApp2Var_Iso::HasResult()
{
  return OCConverter::StandardBooleanToBoolean(((AdvApp2Var_Iso*)nativeHandle)->HasResult());
}

 void OCAdvApp2Var_Iso::MakeApprox(OCNaroWrappers::OCAdvApp2Var_Context^ Conditions, Standard_Real a, Standard_Real b, Standard_Real c, Standard_Real d, AdvApp2Var_EvaluatorFunc2Var func, OCNaroWrappers::OCAdvApp2Var_Node^ NodeBegin, OCNaroWrappers::OCAdvApp2Var_Node^ NodeEnd)
{
  ((AdvApp2Var_Iso*)nativeHandle)->MakeApprox(*((AdvApp2Var_Context*)Conditions->Handle), a, b, c, d, func, *((AdvApp2Var_Node*)NodeBegin->Handle), *((AdvApp2Var_Node*)NodeEnd->Handle));
}

 void OCAdvApp2Var_Iso::ChangeDomain(Standard_Real a, Standard_Real b)
{
  ((AdvApp2Var_Iso*)nativeHandle)->ChangeDomain(a, b);
}

 void OCAdvApp2Var_Iso::ChangeDomain(Standard_Real a, Standard_Real b, Standard_Real c, Standard_Real d)
{
  ((AdvApp2Var_Iso*)nativeHandle)->ChangeDomain(a, b, c, d);
}

 void OCAdvApp2Var_Iso::SetConstante(Standard_Real newcte)
{
  ((AdvApp2Var_Iso*)nativeHandle)->SetConstante(newcte);
}

 void OCAdvApp2Var_Iso::SetPosition(Standard_Integer newpos)
{
  ((AdvApp2Var_Iso*)nativeHandle)->SetPosition(newpos);
}

 void OCAdvApp2Var_Iso::ResetApprox()
{
  ((AdvApp2Var_Iso*)nativeHandle)->ResetApprox();
}

 void OCAdvApp2Var_Iso::OverwriteApprox()
{
  ((AdvApp2Var_Iso*)nativeHandle)->OverwriteApprox();
}

 OCGeomAbs_IsoType OCAdvApp2Var_Iso::Type()
{
  return (OCGeomAbs_IsoType)(((AdvApp2Var_Iso*)nativeHandle)->Type());
}

 Standard_Real OCAdvApp2Var_Iso::Constante()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->Constante();
}

 Standard_Real OCAdvApp2Var_Iso::T0()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->T0();
}

 Standard_Real OCAdvApp2Var_Iso::T1()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->T1();
}

 Standard_Real OCAdvApp2Var_Iso::U0()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->U0();
}

 Standard_Real OCAdvApp2Var_Iso::U1()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->U1();
}

 Standard_Real OCAdvApp2Var_Iso::V0()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->V0();
}

 Standard_Real OCAdvApp2Var_Iso::V1()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->V1();
}

 Standard_Integer OCAdvApp2Var_Iso::UOrder()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->UOrder();
}

 Standard_Integer OCAdvApp2Var_Iso::VOrder()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->VOrder();
}

 Standard_Integer OCAdvApp2Var_Iso::Position()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->Position();
}

 Standard_Integer OCAdvApp2Var_Iso::NbCoeff()
{
  return ((AdvApp2Var_Iso*)nativeHandle)->NbCoeff();
}

OCTColStd_HArray1OfReal^ OCAdvApp2Var_Iso::Polynom()
{
  Handle(TColStd_HArray1OfReal) tmp = ((AdvApp2Var_Iso*)nativeHandle)->Polynom();
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

OCTColStd_HArray1OfReal^ OCAdvApp2Var_Iso::SomTab()
{
  Handle(TColStd_HArray1OfReal) tmp = ((AdvApp2Var_Iso*)nativeHandle)->SomTab();
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

OCTColStd_HArray1OfReal^ OCAdvApp2Var_Iso::DifTab()
{
  Handle(TColStd_HArray1OfReal) tmp = ((AdvApp2Var_Iso*)nativeHandle)->DifTab();
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

OCTColStd_HArray2OfReal^ OCAdvApp2Var_Iso::MaxErrors()
{
  Handle(TColStd_HArray2OfReal) tmp = ((AdvApp2Var_Iso*)nativeHandle)->MaxErrors();
  return gcnew OCTColStd_HArray2OfReal(&tmp);
}

OCTColStd_HArray2OfReal^ OCAdvApp2Var_Iso::MoyErrors()
{
  Handle(TColStd_HArray2OfReal) tmp = ((AdvApp2Var_Iso*)nativeHandle)->MoyErrors();
  return gcnew OCTColStd_HArray2OfReal(&tmp);
}


