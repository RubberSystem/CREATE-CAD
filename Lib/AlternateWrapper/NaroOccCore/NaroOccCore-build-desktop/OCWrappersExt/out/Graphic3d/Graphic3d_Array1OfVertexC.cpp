// File generated by CPPExt (CPP file)
//

#include "Graphic3d_Array1OfVertexC.h"
#include "../Converter.h"
#include "Graphic3d_VertexC.h"


using namespace OCNaroWrappers;

OCGraphic3d_Array1OfVertexC::OCGraphic3d_Array1OfVertexC(Graphic3d_Array1OfVertexC* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGraphic3d_Array1OfVertexC::OCGraphic3d_Array1OfVertexC(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Graphic3d_Array1OfVertexC(Low, Up);
}

OCGraphic3d_Array1OfVertexC::OCGraphic3d_Array1OfVertexC(OCNaroWrappers::OCGraphic3d_VertexC^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Graphic3d_Array1OfVertexC(*((Graphic3d_VertexC*)Item->Handle), Low, Up);
}

 void OCGraphic3d_Array1OfVertexC::Init(OCNaroWrappers::OCGraphic3d_VertexC^ V)
{
  ((Graphic3d_Array1OfVertexC*)nativeHandle)->Init(*((Graphic3d_VertexC*)V->Handle));
}

 System::Boolean OCGraphic3d_Array1OfVertexC::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((Graphic3d_Array1OfVertexC*)nativeHandle)->IsAllocated());
}

OCGraphic3d_Array1OfVertexC^ OCGraphic3d_Array1OfVertexC::Assign(OCNaroWrappers::OCGraphic3d_Array1OfVertexC^ Other)
{
  Graphic3d_Array1OfVertexC* tmp = new Graphic3d_Array1OfVertexC(0, 0);
  *tmp = ((Graphic3d_Array1OfVertexC*)nativeHandle)->Assign(*((Graphic3d_Array1OfVertexC*)Other->Handle));
  return gcnew OCGraphic3d_Array1OfVertexC(tmp);
}

 Standard_Integer OCGraphic3d_Array1OfVertexC::Length()
{
  return ((Graphic3d_Array1OfVertexC*)nativeHandle)->Length();
}

 Standard_Integer OCGraphic3d_Array1OfVertexC::Lower()
{
  return ((Graphic3d_Array1OfVertexC*)nativeHandle)->Lower();
}

 Standard_Integer OCGraphic3d_Array1OfVertexC::Upper()
{
  return ((Graphic3d_Array1OfVertexC*)nativeHandle)->Upper();
}

 void OCGraphic3d_Array1OfVertexC::SetValue(Standard_Integer Index, OCNaroWrappers::OCGraphic3d_VertexC^ Value)
{
  ((Graphic3d_Array1OfVertexC*)nativeHandle)->SetValue(Index, *((Graphic3d_VertexC*)Value->Handle));
}

OCGraphic3d_VertexC^ OCGraphic3d_Array1OfVertexC::Value(Standard_Integer Index)
{
  Graphic3d_VertexC* tmp = new Graphic3d_VertexC();
  *tmp = ((Graphic3d_Array1OfVertexC*)nativeHandle)->Value(Index);
  return gcnew OCGraphic3d_VertexC(tmp);
}

OCGraphic3d_VertexC^ OCGraphic3d_Array1OfVertexC::ChangeValue(Standard_Integer Index)
{
  Graphic3d_VertexC* tmp = new Graphic3d_VertexC();
  *tmp = ((Graphic3d_Array1OfVertexC*)nativeHandle)->ChangeValue(Index);
  return gcnew OCGraphic3d_VertexC(tmp);
}


