// File generated by CPPExt (Transient)
//
#ifndef _Graphic3d_Texture2Dplane_OCWrappers_HeaderFile
#define _Graphic3d_Texture2Dplane_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic3d_Texture2Dplane.hxx>
#include "../Converter.h"

#include "Graphic3d_Texture2D.h"

#include "Graphic3d_NameOfTexturePlane.h"
#include "Graphic3d_NameOfTexture2D.h"


namespace OCNaroWrappers
{

ref class OCGraphic3d_StructureManager;


//! This class allows the management of a 2D texture defined from a plane equation <br>
//! Use the SetXXX() methods for positioning the texture as you want. <br>
public ref class OCGraphic3d_Texture2Dplane : OCGraphic3d_Texture2D {

protected:
  // dummy constructor;
  OCGraphic3d_Texture2Dplane(OCDummy^) : OCGraphic3d_Texture2D((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic3d_Texture2Dplane(Handle(Graphic3d_Texture2Dplane)* nativeHandle);

// Methods PUBLIC

//!  Creates a texture from a file <br>
OCGraphic3d_Texture2Dplane(OCNaroWrappers::OCGraphic3d_StructureManager^ SM, System::String^ FileName);

//!  Creates a texture from a predefined texture name set. <br>
OCGraphic3d_Texture2Dplane(OCNaroWrappers::OCGraphic3d_StructureManager^ SM, OCGraphic3d_NameOfTexture2D NOT);

//!  Defines the texture projection plane for texture coordinate S <br>
//! default is <1.0, 0.0, 0.0, 0.0> <br>
 /*instead*/  void SetPlaneS(Standard_ShortReal A, Standard_ShortReal B, Standard_ShortReal C, Standard_ShortReal D) ;

//! Defines the texture projection plane for texture coordinate T <br>
//! default is <0.0, 1.0, 0.0, 0.0> <br>
 /*instead*/  void SetPlaneT(Standard_ShortReal A, Standard_ShortReal B, Standard_ShortReal C, Standard_ShortReal D) ;

//!  Defines the texture projection plane for both S and T texture coordinate <br>
//! default is NOTP_XY meaning: <br>
//!      <1.0, 0.0, 0.0, 0.0> for S <br>
//! and  <0.0, 1.0, 0.0, 0.0> for T <br>
 /*instead*/  void SetPlane(OCGraphic3d_NameOfTexturePlane APlane) ;

//! Defines the texture scale for the S texture coordinate <br>
//! much easier than recomputing the S plane equation <br>
//! but the result is the same <br>
//! default to 1.0 <br>
 /*instead*/  void SetScaleS(Standard_ShortReal val) ;

//! Defines the texture scale for the T texture coordinate <br>
//! much easier than recompution the T plane equation <br>
//! but the result is the same <br>
//! default to 1.0 <br>
 /*instead*/  void SetScaleT(Standard_ShortReal val) ;

//! Defines the texture translation for the S texture coordinate <br>
//! you can obtain the same effect by modifying the S plane <br>
//! equation but its not easier. <br>
//! default to 0.0 <br>
 /*instead*/  void SetTranslateS(Standard_ShortReal val) ;

//!  Defines the texture translation for the T texture coordinate <br>
//! you can obtain the same effect by modifying the T plane <br>
//! equation but its not easier. <br>
//! default to 0.0 <br>
 /*instead*/  void SetTranslateT(Standard_ShortReal val) ;

//! Sets the rotation angle of the whole texture. <br>
//! the same result might be achieved by recomputing the <br>
//! S and T plane equation but it's not the easiest way... <br>
//! the angle is expressed in degres <br>
//! default is 0.0 <br>
 /*instead*/  void SetRotation(Standard_ShortReal val) ;

//! Returns the current texture plane name or NOTP_UNKNOWN <br>
//! when the plane is user defined. <br>
 /*instead*/  OCGraphic3d_NameOfTexturePlane Plane() ;

//! Returns the current texture plane S equation <br>
 /*instead*/  void PlaneS(Standard_ShortReal& A, Standard_ShortReal& B, Standard_ShortReal& C, Standard_ShortReal& D) ;

//! Returns   the current texture plane T equation <br>
 /*instead*/  void PlaneT(Standard_ShortReal& A, Standard_ShortReal& B, Standard_ShortReal& C, Standard_ShortReal& D) ;

//! Returns  the current texture S translation value <br>
 /*instead*/  void TranslateS(Standard_ShortReal& val) ;

//! Returns the current texture T translation value <br>
 /*instead*/  void TranslateT(Standard_ShortReal& val) ;

//! Returns the current texture S scale value <br>
 /*instead*/  void ScaleS(Standard_ShortReal& val) ;

//! Returns the current texture T scale value <br>
 /*instead*/  void ScaleT(Standard_ShortReal& val) ;

//! Returns the current texture rotation angle <br>
 /*instead*/  void Rotation(Standard_ShortReal& val) ;

~OCGraphic3d_Texture2Dplane()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
