// File generated by CPPExt (MPV)
//
#ifndef _Graphic3d_MaterialAspect_OCWrappers_HeaderFile
#define _Graphic3d_MaterialAspect_OCWrappers_HeaderFile

// include native header
#include <Graphic3d_MaterialAspect.hxx>
#include "../Converter.h"


#include "../Quantity/Quantity_Color.h"
#include "Graphic3d_TypeOfMaterial.h"
#include "Graphic3d_NameOfMaterial.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "Graphic3d_TypeOfReflection.h"


namespace OCNaroWrappers
{

ref class OCQuantity_Color;


//! This class allows the definition of the type of a surface. <br>
//!  Keywords: Material, FillArea, Shininess, Ambient, Color, Diffuse, <br>
//!	     Specular, Transparency, Emissive, ReflectionMode, <br>
//!	     BackFace, FrontFace, Reflection, Absorbtion <br>
public ref class OCGraphic3d_MaterialAspect  {

protected:
  Graphic3d_MaterialAspect* nativeHandle;
  OCGraphic3d_MaterialAspect(OCDummy^) {};

public:
  property Graphic3d_MaterialAspect* Handle
  {
    Graphic3d_MaterialAspect* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGraphic3d_MaterialAspect(Graphic3d_MaterialAspect* nativeHandle);

// Methods PUBLIC

//! Creates a material from default values. <br>
OCGraphic3d_MaterialAspect();

//! Creates a generic material calls <AName> <br>
OCGraphic3d_MaterialAspect(OCGraphic3d_NameOfMaterial AName);

//! Increases or decreases the luminosity of <me>. <br>
//!	    <ADelta> is a signed percentage. <br>
 /*instead*/  void IncreaseShine(Standard_Real ADelta) ;

//! Modifies the reflection properties of the surface. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises MaterialDefinitionError if <AValue> is <br>
//!	    a negative value or greater than 1.0. <br>
 /*instead*/  void SetAmbient(Standard_Real AValue) ;

//! Modifies the reflection properties of the surface. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises MaterialDefinitionError if <AValue> is a <br>
//!	    negative value or greater than 1.0. <br>
 /*instead*/  void SetDiffuse(Standard_Real AValue) ;

//! Modifies the reflection properties of the surface. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises MaterialDefinitionError if <AValue> is a <br>
//!	    negative value or greater than 1.0. <br>
 /*instead*/  void SetEmissive(Standard_Real AValue) ;

//! Modifies the luminosity of the surface. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises MaterialDefinitionError if <AValue> is a <br>
//!	    negative value or greater than 1.0. <br>
 /*instead*/  void SetShininess(Standard_Real AValue) ;

//! Modifies the reflection properties of the surface. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises MaterialDefinitionError if <AValue> is a <br>
//!	    negative value or greater than 1.0. <br>
 /*instead*/  void SetSpecular(Standard_Real AValue) ;

//!  Modifies the transparency coefficient of the surface. <br>
//!  <AValue> = 0. opaque. (default) <br>
//!  <AValue> = 1. transparent. <br>
//!  Transparency is applicable to materials that have at least <br>
//!  one of reflection modes (ambient, diffuse, specular or emissive) <br>
//!  enabled. See also SetReflectionModeOn() and SetReflectionModeOff() methods. <br>
//! <br>
//!  NOTE: In order for transparency specified through this method to <br>
//!  take effect, it is necessary to enable transparency <br>
//!  in the viewer. This can be done either directly - <br>
//!  see Visual3d_ViewManager::SetTransparency(Standard_Boolean), <br>
//!  or indirectly - by calling AIS_InteractiveObject::SetTransparency() <br>
//!  before an object is added to an interactive context, or by <br>
//!  calling AIS_InteractiveContext::SetTransparency() for a given <br>
//!  interactive object already displayed. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises MaterialDefinitionError if <AValue> is a <br>
//!	    negative value or greater than 1.0. <br>
 /*instead*/  void SetTransparency(Standard_Real AValue) ;

//! Modifies the ambient colour of the surface. <br>
//!  Category: Methods to modify the class definition <br>
 /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ AColor) ;

//! Modifies the ambient colour of the surface. <br>
 /*instead*/  void SetAmbientColor(OCNaroWrappers::OCQuantity_Color^ AColor) ;

//! Modifies the difuse colour of the surface. <br>
 /*instead*/  void SetDiffuseColor(OCNaroWrappers::OCQuantity_Color^ AColor) ;

//! Modifies the specular colour of the surface. <br>
 /*instead*/  void SetSpecularColor(OCNaroWrappers::OCQuantity_Color^ AColor) ;

//! Modifies the emissive colour of the surface. <br>
 /*instead*/  void SetEmissiveColor(OCNaroWrappers::OCQuantity_Color^ AColor) ;

//! Activates the reflective properties of the surface <AType>. <br>
 /*instead*/  void SetReflectionModeOn(OCGraphic3d_TypeOfReflection AType) ;

//! Deactivates the reflective properties of <br>
//!	    the surface <AType>. <br>
 /*instead*/  void SetReflectionModeOff(OCGraphic3d_TypeOfReflection AType) ;

//! Set MyMaterialType to the value of parameter <AType> <br>
 /*instead*/  void SetMaterialType(OCGraphic3d_TypeOfMaterial AType) ;

//! The current matarial become a "UserDefined" material. <br>
//!	    Set the name of the "UserDefined" material. <br>
 /*instead*/  void SetMaterialName(System::String^ AName) ;


 /*instead*/  void SetEnvReflexion(Standard_ShortReal AValue) ;

//! Resets the material with the original values according to <br>
//! the material name but leave the current color values untouched <br>
//! for the material of type ASPECT. <br>
 /*instead*/  void Reset() ;

//! Returns the ambient colour of the surface. <br>
 /*instead*/  OCQuantity_Color^ Color() ;

//! Returns the ambient colour of the surface. <br>
 /*instead*/  OCQuantity_Color^ AmbientColor() ;

//! Returns the diffuse colour of the surface. <br>
 /*instead*/  OCQuantity_Color^ DiffuseColor() ;

//! Returns the specular colour of the surface. <br>
 /*instead*/  OCQuantity_Color^ SpecularColor() ;

//! Returns the emissive colour of the surface. <br>
 /*instead*/  OCQuantity_Color^ EmissiveColor() ;

//! Returns the reflection properties of the surface. <br>
 /*instead*/  Standard_Real Ambient() ;

//! Returns the reflection properties of the surface. <br>
 /*instead*/  Standard_Real Diffuse() ;

//! Returns the reflection properties of the surface. <br>
 /*instead*/  Standard_Real Specular() ;

//! Returns the transparency coefficient of the surface. <br>
 /*instead*/  Standard_Real Transparency() ;

//! Returns the emissive coefficient of the surface. <br>
 /*instead*/  Standard_Real Emissive() ;

//! Returns the luminosity of the surface. <br>
 /*instead*/  Standard_Real Shininess() ;

//! Returns Standard_True if the reflection mode is active, <br>
//!	    Standard_False otherwise. <br>
 /*instead*/  System::Boolean ReflectionMode(OCGraphic3d_TypeOfReflection AType) ;

//! Returns Standard_True if MyMaterialType equal the parameter AType, <br>
//!	    Standard_False otherwise. <br>
 /*instead*/  System::Boolean MaterialType(OCGraphic3d_TypeOfMaterial AType) ;


 /*instead*/  Standard_ShortReal EnvReflexion() ;

//! Returns the material name. <br>
 /*instead*/  OCGraphic3d_NameOfMaterial Name() ;

//! Returns Standard_True if the materials <me> and <br>
//!          <Other> are different. <br>
 /*instead*/  System::Boolean IsDifferent(OCNaroWrappers::OCGraphic3d_MaterialAspect^ Other) ;

//! Returns Standard_True if the materials <me> and <br>
//!          <Other> are identical. <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCGraphic3d_MaterialAspect^ Other) ;


//! Returns the number of predefined textures. <br>
static /*instead*/  Standard_Integer NumberOfMaterials() ;


//! Returns the name of the predefined material of rank <aRank> <br>
//!  Trigger: when <aRank> is < 1 or > NumberOfMaterials. <br>
static /*instead*/  System::String^ MaterialName(Standard_Integer aRank) ;


//! Returns the name of this material <br>
 /*instead*/  System::String^ MaterialName() ;


//! Returns the type of the predefined material of rank <aRank> <br>
//!  Trigger: when <aRank> is < 1 or > NumberOfMaterials. <br>
static /*instead*/  OCGraphic3d_TypeOfMaterial MaterialType(Standard_Integer aRank) ;

~OCGraphic3d_MaterialAspect()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
