// File generated by CPPExt (Transient)
//
#ifndef _Graphic3d_Texture1Dsegment_OCWrappers_HeaderFile
#define _Graphic3d_Texture1Dsegment_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic3d_Texture1Dsegment.hxx>
#include "../Converter.h"

#include "Graphic3d_Texture1D.h"

#include "Graphic3d_NameOfTexture1D.h"


namespace OCNaroWrappers
{

ref class OCGraphic3d_StructureManager;


//!  This class provides the implementation <br>
//! of a 1D texture applyable along a segment. <br>
//! You might use the SetSegment() method <br>
//! to set the way the texture is "streched" on facets. <br>
public ref class OCGraphic3d_Texture1Dsegment : OCGraphic3d_Texture1D {

protected:
  // dummy constructor;
  OCGraphic3d_Texture1Dsegment(OCDummy^) : OCGraphic3d_Texture1D((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic3d_Texture1Dsegment(Handle(Graphic3d_Texture1Dsegment)* nativeHandle);

// Methods PUBLIC

//! Creates a texture from a file <br>
OCGraphic3d_Texture1Dsegment(OCNaroWrappers::OCGraphic3d_StructureManager^ VM, System::String^ FileName);

//! Creates a texture from a predefined texture name set. <br>
OCGraphic3d_Texture1Dsegment(OCNaroWrappers::OCGraphic3d_StructureManager^ VM, OCGraphic3d_NameOfTexture1D NOT);

//! Sets the texture application bounds. Defines the way <br>
//! the texture is stretched across facets. <br>
//! Default values are <0.0, 0.0, 0.0> , <0.0, 0.0, 1.0> <br>
 /*instead*/  void SetSegment(Standard_ShortReal X1, Standard_ShortReal Y1, Standard_ShortReal Z1, Standard_ShortReal X2, Standard_ShortReal Y2, Standard_ShortReal Z2) ;

//! Returns the values of the current segment X1, Y1, Z1 , X2, Y2, Z2. <br>
 /*instead*/  void Segment(Standard_ShortReal& X1, Standard_ShortReal& Y1, Standard_ShortReal& Z1, Standard_ShortReal& X2, Standard_ShortReal& Y2, Standard_ShortReal& Z2) ;

~OCGraphic3d_Texture1Dsegment()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
