// File generated by CPPExt (CPP file)
//

#include "Graphic3d_Vector.h"
#include "../Converter.h"
#include "Graphic3d_Vertex.h"


using namespace OCNaroWrappers;

OCGraphic3d_Vector::OCGraphic3d_Vector(Graphic3d_Vector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGraphic3d_Vector::OCGraphic3d_Vector() 
{
  nativeHandle = new Graphic3d_Vector();
}

OCGraphic3d_Vector::OCGraphic3d_Vector(Standard_Real AX, Standard_Real AY, Standard_Real AZ) 
{
  nativeHandle = new Graphic3d_Vector(AX, AY, AZ);
}

OCGraphic3d_Vector::OCGraphic3d_Vector(OCNaroWrappers::OCGraphic3d_Vertex^ APoint1, OCNaroWrappers::OCGraphic3d_Vertex^ APoint2) 
{
  nativeHandle = new Graphic3d_Vector(*((Graphic3d_Vertex*)APoint1->Handle), *((Graphic3d_Vertex*)APoint2->Handle));
}

 void OCGraphic3d_Vector::Normalize()
{
  ((Graphic3d_Vector*)nativeHandle)->Normalize();
}

 void OCGraphic3d_Vector::SetCoord(Standard_Real Xnew, Standard_Real Ynew, Standard_Real Znew)
{
  ((Graphic3d_Vector*)nativeHandle)->SetCoord(Xnew, Ynew, Znew);
}

 void OCGraphic3d_Vector::SetXCoord(Standard_Real Xnew)
{
  ((Graphic3d_Vector*)nativeHandle)->SetXCoord(Xnew);
}

 void OCGraphic3d_Vector::SetYCoord(Standard_Real Ynew)
{
  ((Graphic3d_Vector*)nativeHandle)->SetYCoord(Ynew);
}

 void OCGraphic3d_Vector::SetZCoord(Standard_Real Znew)
{
  ((Graphic3d_Vector*)nativeHandle)->SetZCoord(Znew);
}

 void OCGraphic3d_Vector::Coord(Standard_Real& AX, Standard_Real& AY, Standard_Real& AZ)
{
  ((Graphic3d_Vector*)nativeHandle)->Coord(AX, AY, AZ);
}

 System::Boolean OCGraphic3d_Vector::IsNormalized()
{
  return OCConverter::StandardBooleanToBoolean(((Graphic3d_Vector*)nativeHandle)->IsNormalized());
}

 System::Boolean OCGraphic3d_Vector::LengthZero()
{
  return OCConverter::StandardBooleanToBoolean(((Graphic3d_Vector*)nativeHandle)->LengthZero());
}

 Standard_Real OCGraphic3d_Vector::X()
{
  return ((Graphic3d_Vector*)nativeHandle)->X();
}

 Standard_Real OCGraphic3d_Vector::Y()
{
  return ((Graphic3d_Vector*)nativeHandle)->Y();
}

 Standard_Real OCGraphic3d_Vector::Z()
{
  return ((Graphic3d_Vector*)nativeHandle)->Z();
}

 System::Boolean OCGraphic3d_Vector::IsParallel(OCNaroWrappers::OCGraphic3d_Vector^ AV1, OCNaroWrappers::OCGraphic3d_Vector^ AV2)
{
  return OCConverter::StandardBooleanToBoolean(Graphic3d_Vector::IsParallel(*((Graphic3d_Vector*)AV1->Handle), *((Graphic3d_Vector*)AV2->Handle)));
}

 Standard_Real OCGraphic3d_Vector::NormeOf(Standard_Real AX, Standard_Real AY, Standard_Real AZ)
{
  return Graphic3d_Vector::NormeOf(AX, AY, AZ);
}

 Standard_Real OCGraphic3d_Vector::NormeOf(OCNaroWrappers::OCGraphic3d_Vector^ AVector)
{
  return Graphic3d_Vector::NormeOf(*((Graphic3d_Vector*)AVector->Handle));
}


