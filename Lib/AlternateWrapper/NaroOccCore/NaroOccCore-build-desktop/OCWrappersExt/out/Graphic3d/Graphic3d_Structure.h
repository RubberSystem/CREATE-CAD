// File generated by CPPExt (Transient)
//
#ifndef _Graphic3d_Structure_OCWrappers_HeaderFile
#define _Graphic3d_Structure_OCWrappers_HeaderFile

// include the wrapped class
#include <Graphic3d_Structure.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../Aspect/Aspect_GenId.h"
#include "../TColStd/TColStd_SequenceOfAddress.h"
#include "Graphic3d_SequenceOfGroup.h"
#include "../Quantity/Quantity_Color.h"
#include "../Aspect/Aspect_TypeOfHighlightMethod.h"
#include "Graphic3d_TypeOfStructure.h"
#include "Graphic3d_TypeOfConnection.h"
#include "Graphic3d_TypeOfComposition.h"


namespace OCNaroWrappers
{

ref class OCGraphic3d_GraphicDriver;
ref class OCGraphic3d_Group;
ref class OCGraphic3d_StructureManager;
ref class OCQuantity_Color;
ref class OCGraphic3d_AspectLine3d;
ref class OCGraphic3d_AspectFillArea3d;
ref class OCGraphic3d_AspectText3d;
ref class OCGraphic3d_AspectMarker3d;
ref class OCGraphic3d_DataStructureManager;
ref class OCTColStd_Array2OfReal;
ref class OCGraphic3d_SequenceOfGroup;
ref class OCGraphic3d_MapOfStructure;
ref class OCgp_Pnt;
ref class OCGraphic3d_Plotter;
ref class OCGraphic3d_Vector;
ref class OCGraphic3d_Vertex;


//! This class allows the definition a graphic object. <br>
//!	    This graphic structure can be displayed, <br>
//!	    erased, or highlighted. <br>
//!	    This graphic structure can be connected with <br>
//!	    another graphic structure. <br>
//!  Keywords: Structure, StructureManager, Display, Erase, Highlight, <br>
//!	     UnHighlight, Visible, Priority, Selectable, Visible, <br>
//!	     Visual, Connection, Ancestors, Descendants, Transformation <br>
public ref class OCGraphic3d_Structure : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCGraphic3d_Structure(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCGraphic3d_Structure(Handle(Graphic3d_Structure)* nativeHandle);

// Methods PUBLIC

//! Creates a graphic object in the manager <AManager>. <br>
//!	    It will appear in all the views of the visualiser. <br>
//!  Warning: The default values AspectLine, AspectFillArea, <br>
//!	    AspectText and AspectMarker are NOT applied to the <br>
//!	    structure. <br>
//!	    The structure is not displayed when it is created. <br>
OCGraphic3d_Structure(OCNaroWrappers::OCGraphic3d_StructureManager^ AManager);

//! if WithDestruction == Standard_True then <br>
//!		suppress all the groups of primitives in the structure. <br>
//!	        and it is mandatory to create a new group in <me>. <br>
//!	    if WithDestruction == Standard_False then <br>
//!		clears all the groups of primitives in the structure. <br>
//!	        and all the groups are conserved and empty. <br>
//!	    They will be erased at the next screen update. <br>
//!	    The structure itself is conserved. <br>
//!	    The transformation and the attributes of <me> are conserved. <br>
//!	    The childs of <me> are conserved. <br>
virtual /*instead*/  void Clear(System::Boolean WithDestruction) ;

//! Displays the structure <me> in all the views of <br>
//!	    the visualiser. <br>
virtual /*instead*/  void Display() ;

//! Displays the structure <me> in all the views of <br>
//!	    the visualiser, while modifying its current priority. <br>
//!          Note: Display Priorities <br>
//!          Structure display priorities control the order in which <br>
//!          structures are redrawn.   When you display a <br>
//!          structure, you specify its priority. The lower the value, <br>
//!          the lower the display priority. When the display is <br>
//!          regenerated, the structures with the lowest priority <br>
//!          are drawn first. For structures with the same display <br>
//!          priority, the order in which they were displayed <br>
//!          determines the drawing order. Open CASCADE <br>
//!          supports 11 structure display priorities, 0 to 10. <br>
//!          Warning: Raises PriorityDefinitionError if <Priority> is <br>
//!	    greater than 10 or a negative value. <br>
 /*instead*/  void Display(Standard_Integer Priority) ;

//! Returns the current display priority for the <br>
//!	    structure <me>. <br>
 /*instead*/  Standard_Integer DisplayPriority() ;

//! Erases the structure <me> in all the views <br>
//!	    of the visualiser. <br>
virtual /*instead*/  void Erase() ;

//! Highlights the structure <me> in all the <br>
//!	    views of the visualiser, using the following methods: <br>
 /*instead*/  void Highlight(OCAspect_TypeOfHighlightMethod Method) ;

//! Suppress the structure <me>. <br>
//!	    It will be erased at the next screen update. <br>
//!  Warning: No more graphic operations in <me> after this call. <br>
//!  Category: Methods to modify the class definition <br>
 /*instead*/  void Remove() ;

//! Modifies the highlight color for the Highlight method <br>
//!	    with the highlight method TOHM_COLOR or TOHM_BOUNDBOX. <br>
 /*instead*/  void SetHighlightColor(OCNaroWrappers::OCQuantity_Color^ AColor) ;

//! Modifies the coordinates of the boundary box <br>
//!	    of the structure <me>. <br>
//!	    if <AFlag> is Standard_True then <me> is infinite and <br>
//!	    the MinMaxValues method or the MinMaxCoord method return : <br>
//!	    XMin = YMin = ZMin = RealFirst (). <br>
//!	    XMax = YMax = ZMax = RealLast (). <br>
//!	    By default, <me> is not infinite but empty. <br>
 /*instead*/  void SetInfiniteState(System::Boolean AFlag) ;

//! Modifies the order of displaying the structure. <br>
//!	    Values are between 0 and 10. <br>
//!      Structures are drawn according to their display priorities <br>
//!      in ascending order. <br>
//!	    A structure of priority 10 is displayed the last and appears over the others. <br>
//!	    The default value is 5. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: If <me> is displayed then the SetDisplayPriority <br>
//!	    method erase <me> and display <me> with the <br>
//!	    new priority. <br>
//!	    Raises PriorityDefinitionError if <Priority> is <br>
//!	    greater than 10 or a negative value. <br>
 /*instead*/  void SetDisplayPriority(Standard_Integer Priority) ;

//! Reset the current priority of the structure to the <br>
//!	    previous priority. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: If <me> is displayed then the SetDisplayPriority <br>
//!	    method erase <me> and display <me> with the <br>
//!	    previous priority. <br>
 /*instead*/  void ResetDisplayPriority() ;

//! Set Z layer ID for the structure. The Z layer mechanism <br>
//! allows to display structures presented in higher layers in overlay <br>
//! of structures in lower layers by switching off z buffer depth <br>
//! test between layers <br>
 /*instead*/  void SetZLayer(Standard_Integer theLayerId) ;

//! Get Z layer ID of displayed structure. The method <br>
//! returns -1 if the structure has no ID (deleted from graphic driver). <br>
 /*instead*/  Standard_Integer GetZLayer() ;

//! Modifies the detectability indicator to Standard_True <br>
//!	    or Standard_False for the structure <me>. <br>
//!	    The default value at the definition of <me> is <br>
//!	    Standard_True. <br>
 /*instead*/  void SetPick(System::Boolean AValue) ;

//! Modifies the default attributes for lines <br>
//!	    in the structure <me>. <br>
 /*instead*/  void SetPrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectLine3d^ CTX) ;

//! Modifies the default attributes for faces <br>
//!	    in the structure <me>. <br>
 /*instead*/  void SetPrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectFillArea3d^ CTX) ;

//! Modifies the default attributes for text <br>
//!	    in the structure <me>. <br>
 /*instead*/  void SetPrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectText3d^ CTX) ;

//! Modifies the default attributes for markers <br>
//!	    in the structure <me>. <br>
 /*instead*/  void SetPrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectMarker3d^ CTX) ;

//! Modifies the visibility indicator to Standard_True or <br>
//!	    Standard_False for the structure <me>. <br>
//!	    The default value at the definition of <me> is <br>
//!	    Standard_True. <br>
 /*instead*/  void SetVisible(System::Boolean AValue) ;

//! Moves the graphic object <me> in the manager <AManager>. <br>
//!	    If <WithPropagation> is Standard_True then all the connected <br>
//!	    graphic objects to <me> are moved. <br>
 /*instead*/  void SetManager(OCNaroWrappers::OCGraphic3d_StructureManager^ AManager, System::Boolean WithPropagation) ;

//! Modifies the visualisation mode for the structure <me>. <br>
virtual /*instead*/  void SetVisual(OCGraphic3d_TypeOfStructure AVisual) ;

//! Modifies the minimum and maximum zoom coefficients <br>
//!	    for the structure <me>. <br>
//!	    The default value at the definition of <me> is unlimited. <br>
//!  Category: Methods to modify the class definition <br>
//!  Warning: Raises StructureDefinitionError if <LimitInf> is <br>
//!	    greater than <LimitSup> or if <LimitInf> or <br>
//!	    <LimitSup> is a negative value. <br>
 /*instead*/  void SetZoomLimit(Standard_Real LimitInf, Standard_Real LimitSup) ;

//! Suppresses the highlight for the structure <me> <br>
//!	     in all the views of the visualiser. <br>
 /*instead*/  void UnHighlight() ;

//! Returns the new Structure defined for the new visualization <br>
virtual /*instead*/  OCGraphic3d_Structure^ Compute(OCNaroWrappers::OCGraphic3d_DataStructureManager^ aProjector) ;

//! Returns the new Structure defined for the new visualization <br>
virtual /*instead*/  OCGraphic3d_Structure^ Compute(OCNaroWrappers::OCGraphic3d_DataStructureManager^ aProjector, OCNaroWrappers::OCTColStd_Array2OfReal^ AMatrix) ;

//! Returns the new Structure defined for the new visualization <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCGraphic3d_DataStructureManager^ aProjector, OCNaroWrappers::OCGraphic3d_Structure^ aStructure) ;

//! Returns the new Structure defined for the new visualization <br>
virtual /*instead*/  void Compute(OCNaroWrappers::OCGraphic3d_DataStructureManager^ aProjector, OCNaroWrappers::OCTColStd_Array2OfReal^ AMatrix, OCNaroWrappers::OCGraphic3d_Structure^ aStructure) ;

//! Forces a new construction of the structure <me> <br>
//!	    if <me> is displayed and TOS_COMPUTED. <br>
 /*instead*/  void ReCompute() ;

//! Forces a new construction of the structure <me> <br>
//!	    if <me> is displayed in <aProjetor> and TOS_COMPUTED. <br>
 /*instead*/  void ReCompute(OCNaroWrappers::OCGraphic3d_DataStructureManager^ aProjector) ;

//! Returns Standard_True if the structure <me> contains <br>
//!	    Polygons, Triangles or Quadrangles. <br>
 /*instead*/  System::Boolean ContainsFacet() ;

//! Returns the values of the current default attributes. <br>
 /*instead*/  OCGraphic3d_AspectFillArea3d^ FillArea3dAspect() ;

//! Returns the groups sequence included in the structure <me> (internal storage). <br>
 /*instead*/  OCGraphic3d_SequenceOfGroup^ Groups() ;

//! Returns the current number of groups in the <br>
//!	    structure <me>. <br>
 /*instead*/  Standard_Integer NumberOfGroups() ;

//! Returns the highlight color for the Highlight method <br>
//!	    with the highlight method TOHM_COLOR or TOHM_BOUNDBOX. <br>
 /*instead*/  OCQuantity_Color^ HighlightColor() ;

//! Returns Standard_True if the structure <me> is deleted. <br>
//!	    <me> is deleted after the call Remove (me). <br>
 /*instead*/  System::Boolean IsDeleted() ;

//! Returns the display indicator for the structure <me>. <br>
virtual /*instead*/  System::Boolean IsDisplayed() ;

//! Returns Standard_True if the structure <me> is empty. <br>
//!  Warning: A structure is empty if : <br>
//!		it do not have group or all the groups are empties <br>
//!		and it do not have descendant or all the descendants <br>
//!		are empties. <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! Returns Standard_True if the structure <me> is infinite. <br>
 /*instead*/  System::Boolean IsInfinite() ;

//! Returns the highlight indicator for the structure <me>. <br>
virtual /*instead*/  System::Boolean IsHighlighted() ;

//! Returns the detectability indicator for the structure <me>. <br>
 /*instead*/  System::Boolean IsSelectable() ;

//! Returns Standard_True if the structure <me> is rotated. <br>
//!	    <=> The transformation != Identity, != Scale, != Translation. <br>
 /*instead*/  System::Boolean IsRotated() ;

//! Returns Standard_True if the structure <me> is transformed. <br>
//!	    <=> The transformation != Identity. <br>
 /*instead*/  System::Boolean IsTransformed() ;

//! Returns the visibility indicator for the structure <me>. <br>
 /*instead*/  System::Boolean IsVisible() ;

//! Returns the values of the current default attributes. <br>
 /*instead*/  OCGraphic3d_AspectLine3d^ Line3dAspect() ;

//! Returns the current group of graphic attributes used <br>
//! for 3d marker primitives. <br>
 /*instead*/  OCGraphic3d_AspectMarker3d^ Marker3dAspect() ;

//! Returns the coordinates of the boundary box <br>
//!	    of the structure <me>. <br>
//!  Warning: If the structure <me> is empty or infinite then : <br>
//!	    XMin = YMin = ZMin = RealFirst (). <br>
//!	    XMax = YMax = ZMax = RealLast (). <br>
 /*instead*/  void MinMaxValues(Standard_Real& XMin, Standard_Real& YMin, Standard_Real& ZMin, Standard_Real& XMax, Standard_Real& YMax, Standard_Real& ZMax) ;

//! Returns the current values of the default attributes. <br>
 /*instead*/  void PrimitivesAspect(OCNaroWrappers::OCGraphic3d_AspectLine3d^ CTXL, OCNaroWrappers::OCGraphic3d_AspectText3d^ CTXT, OCNaroWrappers::OCGraphic3d_AspectMarker3d^ CTXM, OCNaroWrappers::OCGraphic3d_AspectFillArea3d^ CTXF) ;

//! Returns the values of the current default attributes. <br>
 /*instead*/  OCGraphic3d_AspectText3d^ Text3dAspect() ;

//! Returns the visualisation mode for the structure <me>. <br>
 /*instead*/  OCGraphic3d_TypeOfStructure Visual() ;

//! Returns Standard_True if the connection is possible between <br>
//!	    <AStructure1> and <AStructure2> without a creation <br>
//!	    of a cycle. <br>
static /*instead*/  System::Boolean AcceptConnection(OCNaroWrappers::OCGraphic3d_Structure^ AStructure1, OCNaroWrappers::OCGraphic3d_Structure^ AStructure2, OCGraphic3d_TypeOfConnection AType) ;

//! Returns the group of structures to which <me> is connected. <br>
 /*instead*/  void Ancestors(OCNaroWrappers::OCGraphic3d_MapOfStructure^ SG) ;

//! If Atype is TOC_DESCENDANT then add <AStructure> <br>
//!	    as a child structure of  <me>. <br>
//!	    If Atype is TOC_ANCESTOR then add <AStructure> <br>
//!	    as a parent structure of <me>. <br>
//!	    The connection propagates Display, Highlight, Erase, <br>
//!	    Remove, and stacks the transformations. <br>
//!	    No connection if the graph of the structures <br>
//!	    contains a cycle and <WithCheck> is Standard_True; <br>
 /*instead*/  void Connect(OCNaroWrappers::OCGraphic3d_Structure^ AStructure, OCGraphic3d_TypeOfConnection AType, System::Boolean WithCheck) ;

//! Returns the group of structures connected to <me>. <br>
 /*instead*/  void Descendants(OCNaroWrappers::OCGraphic3d_MapOfStructure^ SG) ;

//! Suppress the connection between <AStructure> and <me>. <br>
 /*instead*/  void Disconnect(OCNaroWrappers::OCGraphic3d_Structure^ AStructure) ;

//! If Atype is TOC_DESCENDANT then suppress all <br>
//!	    the connections with the child structures of <me>. <br>
//!	    If Atype is TOC_ANCESTOR then suppress all <br>
//!	    the connections with the parent structures of <me>. <br>
 /*instead*/  void DisconnectAll(OCGraphic3d_TypeOfConnection AType) ;

//! Returns <ASet> the group of structures : <br>
//!	    - directly or indirectly connected to <AStructure> if the <br>
//!	      TypeOfConnection == TOC_DESCENDANT <br>
//!	    - to which <AStructure> is directly or indirectly connected <br>
//!	      if the TypeOfConnection == TOC_ANCESTOR <br>
static /*instead*/  void Network(OCNaroWrappers::OCGraphic3d_Structure^ AStructure, OCGraphic3d_TypeOfConnection AType, OCNaroWrappers::OCGraphic3d_MapOfStructure^ ASet) ;


 /*instead*/  void SetOwner(Standard_Address Owner) ;


 /*instead*/  Standard_Address Owner() ;


 /*instead*/  void SetHLRValidation(System::Boolean AFlag) ;


 /*instead*/  System::Boolean HLRValidation() ;

//! Returns the type of composition applied to matrices <br>
//!	    of transformation of <me>. <br>
 /*instead*/  OCGraphic3d_TypeOfComposition Composition() ;

//! Modifies the current local modelling transformation <br>
//!	    in the structure <me>. <br>
 /*instead*/  void SetTransform(OCNaroWrappers::OCTColStd_Array2OfReal^ AMatrix, OCGraphic3d_TypeOfComposition AType) ;

//! Returns the transformation associated with <br>
//!	    the structure <me>. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCTColStd_Array2OfReal^ AMatrix) ;

//! Modifies the current modelling transform persistence (pan, zoom or rotate) <br>
 /*instead*/  void SetTransformPersistence(Graphic3d_TransModeFlags AFlag, OCNaroWrappers::OCgp_Pnt^ APoint) ;


 /*instead*/  void SetTransformPersistence(Graphic3d_TransModeFlags AFlag) ;

//! Get the current modelling transform persistence (pan, zoom or rotate) <br>
 /*instead*/  Graphic3d_TransModeFlags TransformPersistenceMode() ;

//! Get the current point of relative modelling transform persistence <br>
 /*instead*/  OCgp_Pnt^ TransformPersistencePoint() ;


 /*instead*/  OCGraphic3d_TypeOfStructure ComputeVisual() ;

//! Clears the structure <me>. <br>
 /*instead*/  void GraphicClear(System::Boolean WithDestruction) ;


 /*instead*/  void GraphicConnect(OCNaroWrappers::OCGraphic3d_Structure^ ADaughter) ;


 /*instead*/  void GraphicDisconnect(OCNaroWrappers::OCGraphic3d_Structure^ ADaughter) ;

//! Highlights the structure <me>. <br>
 /*instead*/  void GraphicHighlight(OCAspect_TypeOfHighlightMethod Method) ;


 /*instead*/  void GraphicTransform(OCNaroWrappers::OCTColStd_Array2OfReal^ AMatrix) ;

//! Suppress the highlight for the structure <me>. <br>
 /*instead*/  void GraphicUnHighlight() ;

//! Returns the identification number of the structure <me>. <br>
 /*instead*/  Standard_Integer Identification() ;


virtual /*instead*/  void Plot(OCNaroWrappers::OCGraphic3d_Plotter^ aPlotter) ;

//! Prints informations about the network associated <br>
//!	    with the structure <AStructure>. <br>
static /*instead*/  void PrintNetwork(OCNaroWrappers::OCGraphic3d_Structure^ AStructure, OCGraphic3d_TypeOfConnection AType) ;

//! Suppress the adress <APtr> in the list <br>
//!	    of descendants or in the list of ancestors. <br>
 /*instead*/  void Remove(Standard_Address APtr, OCGraphic3d_TypeOfConnection AType) ;


 /*instead*/  void SetComputeVisual(OCGraphic3d_TypeOfStructure AVisual) ;

//! Transforms <X>, <Y>, <Z> with the transformation <ATrsf>. <br>
static /*instead*/  void Transforms(OCNaroWrappers::OCTColStd_Array2OfReal^ ATrsf, Standard_Real X, Standard_Real Y, Standard_Real Z, Standard_Real& NewX, Standard_Real& NewY, Standard_Real& NewZ) ;

//! Transforms <Coord> with the transformation <ATrsf>. <br>
static /*instead*/  OCGraphic3d_Vector^ Transforms(OCNaroWrappers::OCTColStd_Array2OfReal^ ATrsf, OCNaroWrappers::OCGraphic3d_Vector^ Coord) ;

//! Transforms <Coord> with the transformation <ATrsf>. <br>
static /*instead*/  OCGraphic3d_Vertex^ Transforms(OCNaroWrappers::OCTColStd_Array2OfReal^ ATrsf, OCNaroWrappers::OCGraphic3d_Vertex^ Coord) ;

//! Returns the c structure associated to <me>. <br>
 /*instead*/  Standard_Address CStructure() ;

~OCGraphic3d_Structure()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
