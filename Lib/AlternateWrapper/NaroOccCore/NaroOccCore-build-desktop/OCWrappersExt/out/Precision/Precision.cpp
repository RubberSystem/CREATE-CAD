// File generated by CPPExt (CPP file)
//

#include "Precision.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



 Standard_Real OCPrecision::Angular()
{
  return Precision::Angular();
}

 Standard_Real OCPrecision::Confusion()
{
  return Precision::Confusion();
}

 Standard_Real OCPrecision::SquareConfusion()
{
  return Precision::SquareConfusion();
}

 Standard_Real OCPrecision::Intersection()
{
  return Precision::Intersection();
}

 Standard_Real OCPrecision::Approximation()
{
  return Precision::Approximation();
}

 Standard_Real OCPrecision::Parametric(Standard_Real P, Standard_Real T)
{
  return Precision::Parametric(P, T);
}

 Standard_Real OCPrecision::PConfusion(Standard_Real T)
{
  return Precision::PConfusion(T);
}

 Standard_Real OCPrecision::PIntersection(Standard_Real T)
{
  return Precision::PIntersection(T);
}

 Standard_Real OCPrecision::PApproximation(Standard_Real T)
{
  return Precision::PApproximation(T);
}

 Standard_Real OCPrecision::Parametric(Standard_Real P)
{
  return Precision::Parametric(P);
}

 Standard_Real OCPrecision::PConfusion()
{
  return Precision::PConfusion();
}

 Standard_Real OCPrecision::PIntersection()
{
  return Precision::PIntersection();
}

 Standard_Real OCPrecision::PApproximation()
{
  return Precision::PApproximation();
}

 System::Boolean OCPrecision::IsInfinite(Standard_Real R)
{
  return OCConverter::StandardBooleanToBoolean(Precision::IsInfinite(R));
}

 System::Boolean OCPrecision::IsPositiveInfinite(Standard_Real R)
{
  return OCConverter::StandardBooleanToBoolean(Precision::IsPositiveInfinite(R));
}

 System::Boolean OCPrecision::IsNegativeInfinite(Standard_Real R)
{
  return OCConverter::StandardBooleanToBoolean(Precision::IsNegativeInfinite(R));
}

 Standard_Real OCPrecision::Infinite()
{
  return Precision::Infinite();
}


