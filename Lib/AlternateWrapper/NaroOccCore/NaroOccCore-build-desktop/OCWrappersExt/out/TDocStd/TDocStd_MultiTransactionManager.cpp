// File generated by CPPExt (CPP file)
//

#include "TDocStd_MultiTransactionManager.h"
#include "../Converter.h"
#include "TDocStd_SequenceOfApplicationDelta.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "TDocStd_Document.h"
#include "TDocStd_SequenceOfDocument.h"


using namespace OCNaroWrappers;

OCTDocStd_MultiTransactionManager::OCTDocStd_MultiTransactionManager(Handle(TDocStd_MultiTransactionManager)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_TDocStd_MultiTransactionManager(*nativeHandle);
}

OCTDocStd_MultiTransactionManager::OCTDocStd_MultiTransactionManager() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_TDocStd_MultiTransactionManager(new TDocStd_MultiTransactionManager());
}

 void OCTDocStd_MultiTransactionManager::SetUndoLimit(Standard_Integer theLimit)
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->SetUndoLimit(theLimit);
}

 Standard_Integer OCTDocStd_MultiTransactionManager::GetUndoLimit()
{
  return (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->GetUndoLimit();
}

 void OCTDocStd_MultiTransactionManager::Undo()
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->Undo();
}

 void OCTDocStd_MultiTransactionManager::Redo()
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->Redo();
}

OCTDocStd_SequenceOfApplicationDelta^ OCTDocStd_MultiTransactionManager::GetAvailableUndos()
{
  TDocStd_SequenceOfApplicationDelta* tmp = new TDocStd_SequenceOfApplicationDelta();
  *tmp = (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->GetAvailableUndos();
  return gcnew OCTDocStd_SequenceOfApplicationDelta(tmp);
}

OCTDocStd_SequenceOfApplicationDelta^ OCTDocStd_MultiTransactionManager::GetAvailableRedos()
{
  TDocStd_SequenceOfApplicationDelta* tmp = new TDocStd_SequenceOfApplicationDelta();
  *tmp = (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->GetAvailableRedos();
  return gcnew OCTDocStd_SequenceOfApplicationDelta(tmp);
}

 void OCTDocStd_MultiTransactionManager::OpenCommand()
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->OpenCommand();
}

 void OCTDocStd_MultiTransactionManager::AbortCommand()
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->AbortCommand();
}

 System::Boolean OCTDocStd_MultiTransactionManager::CommitCommand()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->CommitCommand());
}

 System::Boolean OCTDocStd_MultiTransactionManager::CommitCommand(OCNaroWrappers::OCTCollection_ExtendedString^ theName)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->CommitCommand(*((TCollection_ExtendedString*)theName->Handle)));
}

 System::Boolean OCTDocStd_MultiTransactionManager::HasOpenCommand()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->HasOpenCommand());
}

 void OCTDocStd_MultiTransactionManager::RemoveLastUndo()
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->RemoveLastUndo();
}

 void OCTDocStd_MultiTransactionManager::DumpTransaction(Standard_OStream& theOS)
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->DumpTransaction(theOS);
}

 void OCTDocStd_MultiTransactionManager::AddDocument(OCNaroWrappers::OCTDocStd_Document^ theDoc)
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->AddDocument(*((Handle_TDocStd_Document*)theDoc->Handle));
}

 void OCTDocStd_MultiTransactionManager::RemoveDocument(OCNaroWrappers::OCTDocStd_Document^ theDoc)
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->RemoveDocument(*((Handle_TDocStd_Document*)theDoc->Handle));
}

OCTDocStd_SequenceOfDocument^ OCTDocStd_MultiTransactionManager::Documents()
{
  TDocStd_SequenceOfDocument* tmp = new TDocStd_SequenceOfDocument();
  *tmp = (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->Documents();
  return gcnew OCTDocStd_SequenceOfDocument(tmp);
}

 void OCTDocStd_MultiTransactionManager::SetNestedTransactionMode(System::Boolean isAllowed)
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->SetNestedTransactionMode(OCConverter::BooleanToStandardBoolean(isAllowed));
}

 System::Boolean OCTDocStd_MultiTransactionManager::IsNestedTransactionMode()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->IsNestedTransactionMode());
}

 void OCTDocStd_MultiTransactionManager::SetModificationMode(System::Boolean theTransactionOnly)
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->SetModificationMode(OCConverter::BooleanToStandardBoolean(theTransactionOnly));
}

 System::Boolean OCTDocStd_MultiTransactionManager::ModificationMode()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->ModificationMode());
}

 void OCTDocStd_MultiTransactionManager::ClearUndos()
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->ClearUndos();
}

 void OCTDocStd_MultiTransactionManager::ClearRedos()
{
  (*((Handle_TDocStd_MultiTransactionManager*)nativeHandle))->ClearRedos();
}


