// File generated by CPPExt (Transient)
//
#ifndef _TDocStd_MultiTransactionManager_OCWrappers_HeaderFile
#define _TDocStd_MultiTransactionManager_OCWrappers_HeaderFile

// include the wrapped class
#include <TDocStd_MultiTransactionManager.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "TDocStd_SequenceOfDocument.h"
#include "TDocStd_SequenceOfApplicationDelta.h"


namespace OCNaroWrappers
{

ref class OCTDocStd_SequenceOfApplicationDelta;
ref class OCTCollection_ExtendedString;
ref class OCTDocStd_Document;
ref class OCTDocStd_SequenceOfDocument;


//! Class for synchronization of transactions within multiple documents. <br>
//!          Each transaction of this class involvess one transaction in each modified document. <br>
public ref class OCTDocStd_MultiTransactionManager : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCTDocStd_MultiTransactionManager(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCTDocStd_MultiTransactionManager(Handle(TDocStd_MultiTransactionManager)* nativeHandle);

// Methods PUBLIC

//! Constructor <br>
OCTDocStd_MultiTransactionManager();

//! Sets undo limit for the manager and all documents. <br>
 /*instead*/  void SetUndoLimit(Standard_Integer theLimit) ;

//! Returns undo limit for the manager. <br>
 /*instead*/  Standard_Integer GetUndoLimit() ;

//! Undoes the current transaction of the manager. <br>
//!          It calls the Undo () method of the document being <br>
//!          on top of the manager list of undos (list.First()) <br>
//!          and moves the list item to the top of the list of manager <br>
//!          redos (list.Prepend(item)). <br>
 /*instead*/  void Undo() ;

//! Redoes the current transaction of the application. It calls <br>
//!          the Redo () method of the document being on top of the <br>
//!          manager list of redos (list.First()) and moves the list <br>
//!          item to the top of the list of manager undos (list.Prepend(item)). <br>
 /*instead*/  void Redo() ;

//! Returns available manager undos. <br>
 /*instead*/  OCTDocStd_SequenceOfApplicationDelta^ GetAvailableUndos() ;

//! Returns available manager redos. <br>
 /*instead*/  OCTDocStd_SequenceOfApplicationDelta^ GetAvailableRedos() ;

//! Opens transaction in each document and sets the flag that <br>
//!          transaction is opened. If there are already opened transactions in the documents, <br>
//!          these transactions will be aborted before openning new ones. <br>
 /*instead*/  void OpenCommand() ;

//! Unsets the flag of started manager transaction and aborts <br>
//!          transaction in each document. <br>
 /*instead*/  void AbortCommand() ;

//! Commits transaction in all documents and fills the transaction manager <br>
//!          with the documents that have been changed during the transaction. <br>
//!          Returns True if new data has been added to myUndos. <br>
//!          NOTE: All nested transactions in the documents will be commited. <br>
 /*instead*/  System::Boolean CommitCommand() ;

//! Makes the same steps as the previous function but defines the name for transaction. <br>
//!          Returns True if new data has been added to myUndos. <br>
 /*instead*/  System::Boolean CommitCommand(OCNaroWrappers::OCTCollection_ExtendedString^ theName) ;

//! Returns true if a transaction is opened. <br>
 /*instead*/  System::Boolean HasOpenCommand() ;

//! Removes undo information from the list of undos of the manager and <br>
//!          all documents which have been modified during the transaction. <br>
 /*instead*/  void RemoveLastUndo() ;

//! Dumps transactions in undos and redos <br>
 /*instead*/  void DumpTransaction(Standard_OStream& theOS) ;

//! Adds the document to the transaction manager and <br>
//!          checks if it has been already added <br>
 /*instead*/  void AddDocument(OCNaroWrappers::OCTDocStd_Document^ theDoc) ;

//! Removes the document from the transaction manager. <br>
 /*instead*/  void RemoveDocument(OCNaroWrappers::OCTDocStd_Document^ theDoc) ;

//! Returns the added documents to the transaction manager. <br>
 /*instead*/  OCTDocStd_SequenceOfDocument^ Documents() ;

//! Sets nested transaction mode if isAllowed == Standard_True <br>
//!          NOTE: field myIsNestedTransactionMode exists only for synchronization <br>
//!           between several documents and has no effect on transactions <br>
//!          of multitransaction manager. <br>
 /*instead*/  void SetNestedTransactionMode(System::Boolean isAllowed) ;

//! Returns Standard_True if NestedTransaction mode is set. <br>//! Methods for protection of changes outside transactions <br>
 /*instead*/  System::Boolean IsNestedTransactionMode() ;

//! If theTransactionOnly is True, denies all changes outside transactions. <br>
 /*instead*/  void SetModificationMode(System::Boolean theTransactionOnly) ;

//! Returns True if changes are allowed only inside transactions. <br>
 /*instead*/  System::Boolean ModificationMode() ;

//! Clears undos in the manager and in documents. <br>
 /*instead*/  void ClearUndos() ;

//! Clears redos in the manager and in documents. <br>
 /*instead*/  void ClearRedos() ;

~OCTDocStd_MultiTransactionManager()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
