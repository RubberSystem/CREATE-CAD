// File generated by CPPExt (CPP file)
//

#include "Poly_Array1OfTriangle.h"
#include "../Converter.h"
#include "Poly_Triangle.h"


using namespace OCNaroWrappers;

OCPoly_Array1OfTriangle::OCPoly_Array1OfTriangle(Poly_Array1OfTriangle* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCPoly_Array1OfTriangle::OCPoly_Array1OfTriangle(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Poly_Array1OfTriangle(Low, Up);
}

OCPoly_Array1OfTriangle::OCPoly_Array1OfTriangle(OCNaroWrappers::OCPoly_Triangle^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new Poly_Array1OfTriangle(*((Poly_Triangle*)Item->Handle), Low, Up);
}

 void OCPoly_Array1OfTriangle::Init(OCNaroWrappers::OCPoly_Triangle^ V)
{
  ((Poly_Array1OfTriangle*)nativeHandle)->Init(*((Poly_Triangle*)V->Handle));
}

 System::Boolean OCPoly_Array1OfTriangle::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((Poly_Array1OfTriangle*)nativeHandle)->IsAllocated());
}

OCPoly_Array1OfTriangle^ OCPoly_Array1OfTriangle::Assign(OCNaroWrappers::OCPoly_Array1OfTriangle^ Other)
{
  Poly_Array1OfTriangle* tmp = new Poly_Array1OfTriangle(0, 0);
  *tmp = ((Poly_Array1OfTriangle*)nativeHandle)->Assign(*((Poly_Array1OfTriangle*)Other->Handle));
  return gcnew OCPoly_Array1OfTriangle(tmp);
}

 Standard_Integer OCPoly_Array1OfTriangle::Length()
{
  return ((Poly_Array1OfTriangle*)nativeHandle)->Length();
}

 Standard_Integer OCPoly_Array1OfTriangle::Lower()
{
  return ((Poly_Array1OfTriangle*)nativeHandle)->Lower();
}

 Standard_Integer OCPoly_Array1OfTriangle::Upper()
{
  return ((Poly_Array1OfTriangle*)nativeHandle)->Upper();
}

 void OCPoly_Array1OfTriangle::SetValue(Standard_Integer Index, OCNaroWrappers::OCPoly_Triangle^ Value)
{
  ((Poly_Array1OfTriangle*)nativeHandle)->SetValue(Index, *((Poly_Triangle*)Value->Handle));
}

OCPoly_Triangle^ OCPoly_Array1OfTriangle::Value(Standard_Integer Index)
{
  Poly_Triangle* tmp = new Poly_Triangle();
  *tmp = ((Poly_Array1OfTriangle*)nativeHandle)->Value(Index);
  return gcnew OCPoly_Triangle(tmp);
}

OCPoly_Triangle^ OCPoly_Array1OfTriangle::ChangeValue(Standard_Integer Index)
{
  Poly_Triangle* tmp = new Poly_Triangle();
  *tmp = ((Poly_Array1OfTriangle*)nativeHandle)->ChangeValue(Index);
  return gcnew OCPoly_Triangle(tmp);
}


