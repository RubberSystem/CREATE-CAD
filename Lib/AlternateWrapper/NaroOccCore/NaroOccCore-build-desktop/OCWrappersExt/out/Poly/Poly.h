// File generated by CPPExt (Package)
//

#ifndef _Poly_OCWrappers_HeaderFile
#define _Poly_OCWrappers_HeaderFile

// Include the wrapped header
#include <Poly.hxx>

#include "Poly_Triangle.h"
#include "Poly_Array1OfTriangle.h"
#include "Poly_HArray1OfTriangle.h"
#include "Poly_Triangulation.h"
#include "Poly_Polygon3D.h"
#include "Poly_Polygon2D.h"
#include "Poly_PolygonOnTriangulation.h"
#include "Poly_Connect.h"


namespace OCNaroWrappers
{
//! This  package  provides  classes  and services  to <br>
//!          handle : <br>
public ref class OCPoly abstract sealed
{

public:
// Methods

//! Join several triangulations to one new triangulation object. <br>
//!          The new triangulation is just a mechanical sum of input <br>
//!          triangulations, without node sharing. UV coordinates are <br>
//!          dropped in the result. <br>
static /*instead*/  OCPoly_Triangulation^ Catenate(Poly_ListOfTriangulation lstTri) ;

//! Writes the content of the triangulation <T> on the <br>
//!          stream <OS>. If <Compact> is true this is a "save" <br>
//!          format  intended  to  be read back   with the Read <br>
//!          method. If compact is False  it is a "Dump" format <br>
//!          intended to be informative. <br>
static /*instead*/  void Write(OCNaroWrappers::OCPoly_Triangulation^ T, Standard_OStream& OS, System::Boolean Compact) ;

//! Writes  the  content  of the 3D polygon <P> on the <br>
//!          stream <OS>. If <Compact> is true this is a "save" <br>
//!          format  intended  to  be read back   with the Read <br>
//!          method. If compact is False  it is a "Dump" format <br>
//!          intended to be informative. <br>
static /*instead*/  void Write(OCNaroWrappers::OCPoly_Polygon3D^ P, Standard_OStream& OS, System::Boolean Compact) ;

//! Writes the  content  of the 2D polygon  <P> on the <br>
//!          stream <OS>. If <Compact> is true this is a "save" <br>
//!          format  intended  to  be read back   with the Read <br>
//!          method. If compact is False  it is a "Dump" format <br>
//!          intended to be informative. <br>
static /*instead*/  void Write(OCNaroWrappers::OCPoly_Polygon2D^ P, Standard_OStream& OS, System::Boolean Compact) ;

//! Dumps  the triangulation.  This   is a call to  the <br>
//!          previous method with Comapct set to False. <br>
static /*instead*/  void Dump(OCNaroWrappers::OCPoly_Triangulation^ T, Standard_OStream& OS) ;

//! Dumps  the  3D  polygon.  This   is a call to  the <br>
//!          previous method with Comapct set to False. <br>
static /*instead*/  void Dump(OCNaroWrappers::OCPoly_Polygon3D^ P, Standard_OStream& OS) ;

//! Dumps  the  2D  polygon.  This   is a call to  the <br>
//!          previous method with Comapct set to False. <br>
static /*instead*/  void Dump(OCNaroWrappers::OCPoly_Polygon2D^ P, Standard_OStream& OS) ;

//! Reads a triangulation from the stream <IS>. <br>
static /*instead*/  OCPoly_Triangulation^ ReadTriangulation(Standard_IStream& IS) ;

//! Reads a 3d polygon from the stream <IS>. <br>
static /*instead*/  OCPoly_Polygon3D^ ReadPolygon3D(Standard_IStream& IS) ;

//! Reads a 2D polygon from the stream <IS>. <br>
static /*instead*/  OCPoly_Polygon2D^ ReadPolygon2D(Standard_IStream& IS) ;

//! Compute node normals for face triangulation <br>
//!  as mean normal of surrounding triangles <br>
static /*instead*/  void ComputeNormals(OCNaroWrappers::OCPoly_Triangulation^ Tri) ;

//! Computes parameters of the point P on triangle <br>
//!          defined by points P1, P2, and P3, in 2d. <br>
//!          The parameters U and V are defined so that <br>
//!          P = P1 + U * (P2 - P1) + V * (P3 - P1), <br>
//!          with U >= 0, V >= 0, U + V <= 1. <br>
//!          If P is located outside of triangle, or triangle <br>
//!          is degenerated, the returned parameters correspond <br>
//!          to closest point, and returned value is square of <br>
//!          the distance from original point to triangle (0 if <br>
//!          point is inside). <br>
static /*instead*/  Standard_Real PointOnTriangle(OCNaroWrappers::OCgp_XY^ P1, OCNaroWrappers::OCgp_XY^ P2, OCNaroWrappers::OCgp_XY^ P3, OCNaroWrappers::OCgp_XY^ P, OCNaroWrappers::OCgp_XY^ UV) ;


};

}; // OCNaroWrappers

#endif
