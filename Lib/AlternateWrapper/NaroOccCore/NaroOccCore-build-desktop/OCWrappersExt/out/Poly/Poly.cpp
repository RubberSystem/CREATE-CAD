// File generated by CPPExt (CPP file)
//

#include "Poly.h"
#include "../Converter.h"


using namespace OCNaroWrappers;



OCPoly_Triangulation^ OCPoly::Catenate(Poly_ListOfTriangulation lstTri)
{
  Handle(Poly_Triangulation) tmp = Poly::Catenate(lstTri);
  return gcnew OCPoly_Triangulation(&tmp);
}

 void OCPoly::Write(OCNaroWrappers::OCPoly_Triangulation^ T, Standard_OStream& OS, System::Boolean Compact)
{
  Poly::Write(*((Handle_Poly_Triangulation*)T->Handle), OS, OCConverter::BooleanToStandardBoolean(Compact));
}

 void OCPoly::Write(OCNaroWrappers::OCPoly_Polygon3D^ P, Standard_OStream& OS, System::Boolean Compact)
{
  Poly::Write(*((Handle_Poly_Polygon3D*)P->Handle), OS, OCConverter::BooleanToStandardBoolean(Compact));
}

 void OCPoly::Write(OCNaroWrappers::OCPoly_Polygon2D^ P, Standard_OStream& OS, System::Boolean Compact)
{
  Poly::Write(*((Handle_Poly_Polygon2D*)P->Handle), OS, OCConverter::BooleanToStandardBoolean(Compact));
}

 void OCPoly::Dump(OCNaroWrappers::OCPoly_Triangulation^ T, Standard_OStream& OS)
{
  Poly::Dump(*((Handle_Poly_Triangulation*)T->Handle), OS);
}

 void OCPoly::Dump(OCNaroWrappers::OCPoly_Polygon3D^ P, Standard_OStream& OS)
{
  Poly::Dump(*((Handle_Poly_Polygon3D*)P->Handle), OS);
}

 void OCPoly::Dump(OCNaroWrappers::OCPoly_Polygon2D^ P, Standard_OStream& OS)
{
  Poly::Dump(*((Handle_Poly_Polygon2D*)P->Handle), OS);
}

OCPoly_Triangulation^ OCPoly::ReadTriangulation(Standard_IStream& IS)
{
  Handle(Poly_Triangulation) tmp = Poly::ReadTriangulation(IS);
  return gcnew OCPoly_Triangulation(&tmp);
}

OCPoly_Polygon3D^ OCPoly::ReadPolygon3D(Standard_IStream& IS)
{
  Handle(Poly_Polygon3D) tmp = Poly::ReadPolygon3D(IS);
  return gcnew OCPoly_Polygon3D(&tmp);
}

OCPoly_Polygon2D^ OCPoly::ReadPolygon2D(Standard_IStream& IS)
{
  Handle(Poly_Polygon2D) tmp = Poly::ReadPolygon2D(IS);
  return gcnew OCPoly_Polygon2D(&tmp);
}

 void OCPoly::ComputeNormals(OCNaroWrappers::OCPoly_Triangulation^ Tri)
{
  Poly::ComputeNormals(*((Handle_Poly_Triangulation*)Tri->Handle));
}

 Standard_Real OCPoly::PointOnTriangle(OCNaroWrappers::OCgp_XY^ P1, OCNaroWrappers::OCgp_XY^ P2, OCNaroWrappers::OCgp_XY^ P3, OCNaroWrappers::OCgp_XY^ P, OCNaroWrappers::OCgp_XY^ UV)
{
  return Poly::PointOnTriangle(*((gp_XY*)P1->Handle), *((gp_XY*)P2->Handle), *((gp_XY*)P3->Handle), *((gp_XY*)P->Handle), *((gp_XY*)UV->Handle));
}


