// File generated by CPPExt (CPP file)
//

#include "Poly_HArray1OfTriangle.h"
#include "../Converter.h"
#include "Poly_Triangle.h"
#include "Poly_Array1OfTriangle.h"


using namespace OCNaroWrappers;

OCPoly_HArray1OfTriangle::OCPoly_HArray1OfTriangle(Handle(Poly_HArray1OfTriangle)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Poly_HArray1OfTriangle(*nativeHandle);
}

OCPoly_HArray1OfTriangle::OCPoly_HArray1OfTriangle(Standard_Integer Low, Standard_Integer Up) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Poly_HArray1OfTriangle(new Poly_HArray1OfTriangle(Low, Up));
}

OCPoly_HArray1OfTriangle::OCPoly_HArray1OfTriangle(Standard_Integer Low, Standard_Integer Up, OCNaroWrappers::OCPoly_Triangle^ V) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Poly_HArray1OfTriangle(new Poly_HArray1OfTriangle(Low, Up, *((Poly_Triangle*)V->Handle)));
}

 void OCPoly_HArray1OfTriangle::Init(OCNaroWrappers::OCPoly_Triangle^ V)
{
  (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->Init(*((Poly_Triangle*)V->Handle));
}

 Standard_Integer OCPoly_HArray1OfTriangle::Length()
{
  return (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->Length();
}

 Standard_Integer OCPoly_HArray1OfTriangle::Lower()
{
  return (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->Lower();
}

 Standard_Integer OCPoly_HArray1OfTriangle::Upper()
{
  return (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->Upper();
}

 void OCPoly_HArray1OfTriangle::SetValue(Standard_Integer Index, OCNaroWrappers::OCPoly_Triangle^ Value)
{
  (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->SetValue(Index, *((Poly_Triangle*)Value->Handle));
}

OCPoly_Triangle^ OCPoly_HArray1OfTriangle::Value(Standard_Integer Index)
{
  Poly_Triangle* tmp = new Poly_Triangle();
  *tmp = (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->Value(Index);
  return gcnew OCPoly_Triangle(tmp);
}

OCPoly_Triangle^ OCPoly_HArray1OfTriangle::ChangeValue(Standard_Integer Index)
{
  Poly_Triangle* tmp = new Poly_Triangle();
  *tmp = (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->ChangeValue(Index);
  return gcnew OCPoly_Triangle(tmp);
}

OCPoly_Array1OfTriangle^ OCPoly_HArray1OfTriangle::Array1()
{
  Poly_Array1OfTriangle* tmp = new Poly_Array1OfTriangle(0, 0);
  *tmp = (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->Array1();
  return gcnew OCPoly_Array1OfTriangle(tmp);
}

OCPoly_Array1OfTriangle^ OCPoly_HArray1OfTriangle::ChangeArray1()
{
  Poly_Array1OfTriangle* tmp = new Poly_Array1OfTriangle(0, 0);
  *tmp = (*((Handle_Poly_HArray1OfTriangle*)nativeHandle))->ChangeArray1();
  return gcnew OCPoly_Array1OfTriangle(tmp);
}


