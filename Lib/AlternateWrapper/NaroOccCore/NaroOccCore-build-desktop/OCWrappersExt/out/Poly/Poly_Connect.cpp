// File generated by CPPExt (CPP file)
//

#include "Poly_Connect.h"
#include "../Converter.h"
#include "Poly_Triangulation.h"


using namespace OCNaroWrappers;

OCPoly_Connect::OCPoly_Connect(Poly_Connect* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCPoly_Connect::OCPoly_Connect(OCNaroWrappers::OCPoly_Triangulation^ T) 
{
  nativeHandle = new Poly_Connect(*((Handle_Poly_Triangulation*)T->Handle));
}

OCPoly_Triangulation^ OCPoly_Connect::Triangulation()
{
  Handle(Poly_Triangulation) tmp = ((Poly_Connect*)nativeHandle)->Triangulation();
  return gcnew OCPoly_Triangulation(&tmp);
}

 Standard_Integer OCPoly_Connect::Triangle(Standard_Integer N)
{
  return ((Poly_Connect*)nativeHandle)->Triangle(N);
}

 void OCPoly_Connect::Triangles(Standard_Integer T, Standard_Integer& t1, Standard_Integer& t2, Standard_Integer& t3)
{
  ((Poly_Connect*)nativeHandle)->Triangles(T, t1, t2, t3);
}

 void OCPoly_Connect::Nodes(Standard_Integer T, Standard_Integer& n1, Standard_Integer& n2, Standard_Integer& n3)
{
  ((Poly_Connect*)nativeHandle)->Nodes(T, n1, n2, n3);
}

 void OCPoly_Connect::Initialize(Standard_Integer N)
{
  ((Poly_Connect*)nativeHandle)->Initialize(N);
}

 System::Boolean OCPoly_Connect::More()
{
  return OCConverter::StandardBooleanToBoolean(((Poly_Connect*)nativeHandle)->More());
}

 void OCPoly_Connect::Next()
{
  ((Poly_Connect*)nativeHandle)->Next();
}

 Standard_Integer OCPoly_Connect::Value()
{
  return ((Poly_Connect*)nativeHandle)->Value();
}


