// File generated by CPPExt (Transient)
//
#ifndef _Poly_Polygon2D_OCWrappers_HeaderFile
#define _Poly_Polygon2D_OCWrappers_HeaderFile

// include the wrapped class
#include <Poly_Polygon2D.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TColgp/TColgp_Array1OfPnt2d.h"


namespace OCNaroWrappers
{

ref class OCTColgp_Array1OfPnt2d;


//! Provides a polygon in 2D space (for example, in the <br>
//! parametric space of a surface). It is generally an <br>
//! approximate representation of a curve. <br>
//! A Polygon2D is defined by a table of nodes. Each node is <br>
//! a 2D point. If the polygon is closed, the point of closure is <br>
//! repeated at the end of the table of nodes. <br>
public ref class OCPoly_Polygon2D : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCPoly_Polygon2D(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCPoly_Polygon2D(Handle(Poly_Polygon2D)* nativeHandle);

// Methods PUBLIC

//! Constructs a 2D polygon defined by the table of points, <Nodes>. <br>
OCPoly_Polygon2D(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Nodes);

//! Returns the deflection of this polygon. <br>
//!  Deflection is used in cases where the polygon is an <br>
//! approximate representation of a curve. Deflection <br>
//! represents the maximum distance permitted between any <br>
//! point on the curve and the corresponding point on the polygon. <br>
//! By default the deflection value is equal to 0. An algorithm <br>
//! using this 2D polygon with a deflection value equal to 0 <br>
//! considers that it is working with a true polygon and not with <br>
//! an approximate representation of a curve. The Deflection <br>
//! function is used to modify the deflection value of this polygon. <br>
//! The deflection value can be used by any algorithm working  with 2D polygons. <br>
//! For example: <br>
//! -   An algorithm may use a unique deflection value for all <br>
//!   its polygons. In this case it is not necessary to use the <br>
//!   Deflection function. <br>
//! -   Or an algorithm may want to attach a different <br>
//!   deflection to each polygon. In this case, the Deflection <br>
//!   function is used to set a value on each polygon, and <br>
//!   later to fetch the value. <br>
 /*instead*/  Standard_Real Deflection() ;

//! Sets the deflection of this polygon to D <br>
 /*instead*/  void Deflection(Standard_Real D) ;

//! Returns the number of nodes in this polygon. <br>
//! Note: If the polygon is closed, the point of closure is <br>
//! repeated at the end of its table of nodes. Thus, on a closed <br>
//! triangle, the function NbNodes returns 4. <br>
 /*instead*/  Standard_Integer NbNodes() ;

//! Returns the table of nodes for this polygon. <br>
 /*instead*/  OCTColgp_Array1OfPnt2d^ Nodes() ;

~OCPoly_Polygon2D()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
