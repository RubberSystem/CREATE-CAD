// File generated by CPPExt (CPP file)
//

#include "Transfer_ActorOfTransientProcess.h"
#include "../Converter.h"
#include "Transfer_Binder.h"
#include "../Standard/Standard_Transient.h"
#include "Transfer_ProcessForTransient.h"
#include "Transfer_TransientProcess.h"


using namespace OCNaroWrappers;

OCTransfer_ActorOfTransientProcess::OCTransfer_ActorOfTransientProcess(Handle(Transfer_ActorOfTransientProcess)* nativeHandle) : OCTransfer_ActorOfProcessForTransient((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Transfer_ActorOfTransientProcess(*nativeHandle);
}

OCTransfer_ActorOfTransientProcess::OCTransfer_ActorOfTransientProcess() : OCTransfer_ActorOfProcessForTransient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Transfer_ActorOfTransientProcess(new Transfer_ActorOfTransientProcess());
}

OCTransfer_Binder^ OCTransfer_ActorOfTransientProcess::Transferring(OCNaroWrappers::OCStandard_Transient^ start, OCNaroWrappers::OCTransfer_ProcessForTransient^ TP)
{
  Handle(Transfer_Binder) tmp = (*((Handle_Transfer_ActorOfTransientProcess*)nativeHandle))->Transferring(*((Handle_Standard_Transient*)start->Handle), *((Handle_Transfer_ProcessForTransient*)TP->Handle));
  return gcnew OCTransfer_Binder(&tmp);
}

OCTransfer_Binder^ OCTransfer_ActorOfTransientProcess::Transfer(OCNaroWrappers::OCStandard_Transient^ start, OCNaroWrappers::OCTransfer_TransientProcess^ TP)
{
  Handle(Transfer_Binder) tmp = (*((Handle_Transfer_ActorOfTransientProcess*)nativeHandle))->Transfer(*((Handle_Standard_Transient*)start->Handle), *((Handle_Transfer_TransientProcess*)TP->Handle));
  return gcnew OCTransfer_Binder(&tmp);
}

OCStandard_Transient^ OCTransfer_ActorOfTransientProcess::TransferTransient(OCNaroWrappers::OCStandard_Transient^ start, OCNaroWrappers::OCTransfer_TransientProcess^ TP)
{
  Handle(Standard_Transient) tmp = (*((Handle_Transfer_ActorOfTransientProcess*)nativeHandle))->TransferTransient(*((Handle_Standard_Transient*)start->Handle), *((Handle_Transfer_TransientProcess*)TP->Handle));
  return gcnew OCStandard_Transient(&tmp);
}


