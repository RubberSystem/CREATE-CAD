// File generated by CPPExt (Transient)
//
#ifndef _Transfer_TransientProcess_OCWrappers_HeaderFile
#define _Transfer_TransientProcess_OCWrappers_HeaderFile

// include the wrapped class
#include <Transfer_TransientProcess.hxx>
#include "../Converter.h"

#include "Transfer_ProcessForTransient.h"



namespace OCNaroWrappers
{

ref class OCInterface_InterfaceModel;
ref class OCInterface_HGraph;
ref class OCDico_DictionaryOfTransient;
ref class OCTColStd_HSequenceOfTransient;
ref class OCInterface_Graph;
ref class OCStandard_Transient;
ref class OCStandard_Type;
ref class OCMessage_Messenger;
ref class OCInterface_EntityIterator;


//! Adds specific features to the generic definition : <br>
//!           TransientProcess is intended to work from an InterfaceModel <br>
//!           to a set of application objects. <br>
//! <br>
//!           Hence, some informations about starting entities can be gotten <br>
//!           from the model : for Trace, CheckList, Integrity Status <br>
public ref class OCTransfer_TransientProcess : OCTransfer_ProcessForTransient {

protected:
  // dummy constructor;
  OCTransfer_TransientProcess(OCDummy^) : OCTransfer_ProcessForTransient((OCDummy^)nullptr) {};

public:

// constructor from native
OCTransfer_TransientProcess(Handle(Transfer_TransientProcess)* nativeHandle);

// Methods PUBLIC

//! Sets TransientProcess at initial state, with an initial size <br>
OCTransfer_TransientProcess(Standard_Integer nb);

//! Sets an InterfaceModel, used by StartTrace, CheckList, queries <br>
//!           on Integrity, to give informations significant for each norm. <br>
 /*instead*/  void SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! Returns the Model used for StartTrace <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Sets a Graph : superseedes SetModel if already done <br>
 /*instead*/  void SetGraph(OCNaroWrappers::OCInterface_HGraph^ HG) ;


 /*instead*/  System::Boolean HasGraph() ;


 /*instead*/  OCInterface_HGraph^ HGraph() ;


 /*instead*/  OCInterface_Graph^ Graph() ;

//! Sets a Context : according to receiving appli, to be <br>
//!           interpreted by the Actor <br>
 /*instead*/  void SetContext(System::String^ name, OCNaroWrappers::OCStandard_Transient^ ctx) ;

//! Returns the Context attached to a name, if set and if it is <br>
//!           Kind of the type, else a Null Handle <br>
//!           Returns True if OK, False if no Context <br>
 /*instead*/  System::Boolean GetContext(System::String^ name, OCNaroWrappers::OCStandard_Type^ type, OCNaroWrappers::OCStandard_Transient^ ctx) ;

//! Returns (modifiable) the whole definition of Context <br>
//!           Rather for internal use (ex.: preparing and setting in once) <br>
 /*instead*/  OCDico_DictionaryOfTransient^ Context() ;

//! Specific printing to trace an entity : prints label and type <br>
//!           (if model is set) <br>
virtual /*instead*/  void PrintTrace(OCNaroWrappers::OCStandard_Transient^ start, OCNaroWrappers::OCMessage_Messenger^ S) override;

//! Specific number of a starting object for check-list : Number <br>
//!           in model <br>
virtual /*instead*/  Standard_Integer CheckNum(OCNaroWrappers::OCStandard_Transient^ ent) override;

//! Returns the list of sharings entities, AT ANY LEVEL, which are <br>
//!           kind of a given type. Calls TypedSharings from Graph <br>
//!           Returns an empty list if the Graph has not been aknowledged <br>
 /*instead*/  OCInterface_EntityIterator^ TypedSharings(OCNaroWrappers::OCStandard_Transient^ start, OCNaroWrappers::OCStandard_Type^ type) ;

//! Tells if an entity is well loaded from file (even if its data <br>
//!           fail on checking, they are present). Mostly often, answers <br>
//!           True. Else, there was a syntactic error in the file. <br>
//!           A non-loaded entity MAY NOT BE transferred, unless its Report <br>
//!           (in the model) is interpreted <br>
 /*instead*/  System::Boolean IsDataLoaded(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Tells if an entity fails on data checking (load time, <br>
//!           syntactic, or semantic check). Normally, should answer False. <br>
//!           It is not prudent to try transferring an entity which fails on <br>
//!           data checking <br>
 /*instead*/  System::Boolean IsDataFail(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Prints statistics on a given output, according mode <br>
 /*instead*/  void PrintStats(Standard_Integer mode, OCNaroWrappers::OCMessage_Messenger^ S) ;


 /*instead*/  OCTColStd_HSequenceOfTransient^ RootsForTransfer() ;

~OCTransfer_TransientProcess()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
