// File generated by CPPExt (CPP file)
//

#include "Transfer_TransferIterator.h"
#include "../Converter.h"
#include "Transfer_HSequenceOfBinder.h"
#include "../TColStd/TColStd_HSequenceOfInteger.h"
#include "Transfer_Binder.h"
#include "../Standard/Standard_Type.h"
#include "../Standard/Standard_Transient.h"
#include "../Interface/Interface_Check.h"


using namespace OCNaroWrappers;

OCTransfer_TransferIterator::OCTransfer_TransferIterator(Transfer_TransferIterator* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTransfer_TransferIterator::OCTransfer_TransferIterator() 
{
  nativeHandle = new Transfer_TransferIterator();
}

 void OCTransfer_TransferIterator::AddItem(OCNaroWrappers::OCTransfer_Binder^ atr)
{
  ((Transfer_TransferIterator*)nativeHandle)->AddItem(*((Handle_Transfer_Binder*)atr->Handle));
}

 void OCTransfer_TransferIterator::SelectBinder(OCNaroWrappers::OCStandard_Type^ atype, System::Boolean keep)
{
  ((Transfer_TransferIterator*)nativeHandle)->SelectBinder(*((Handle_Standard_Type*)atype->Handle), OCConverter::BooleanToStandardBoolean(keep));
}

 void OCTransfer_TransferIterator::SelectResult(OCNaroWrappers::OCStandard_Type^ atype, System::Boolean keep)
{
  ((Transfer_TransferIterator*)nativeHandle)->SelectResult(*((Handle_Standard_Type*)atype->Handle), OCConverter::BooleanToStandardBoolean(keep));
}

 void OCTransfer_TransferIterator::SelectUnique(System::Boolean keep)
{
  ((Transfer_TransferIterator*)nativeHandle)->SelectUnique(OCConverter::BooleanToStandardBoolean(keep));
}

 void OCTransfer_TransferIterator::SelectItem(Standard_Integer num, System::Boolean keep)
{
  ((Transfer_TransferIterator*)nativeHandle)->SelectItem(num, OCConverter::BooleanToStandardBoolean(keep));
}

 Standard_Integer OCTransfer_TransferIterator::Number()
{
  return ((Transfer_TransferIterator*)nativeHandle)->Number();
}

 void OCTransfer_TransferIterator::Start()
{
  ((Transfer_TransferIterator*)nativeHandle)->Start();
}

 System::Boolean OCTransfer_TransferIterator::More()
{
  return OCConverter::StandardBooleanToBoolean(((Transfer_TransferIterator*)nativeHandle)->More());
}

 void OCTransfer_TransferIterator::Next()
{
  ((Transfer_TransferIterator*)nativeHandle)->Next();
}

OCTransfer_Binder^ OCTransfer_TransferIterator::Value()
{
  Handle(Transfer_Binder) tmp = ((Transfer_TransferIterator*)nativeHandle)->Value();
  return gcnew OCTransfer_Binder(&tmp);
}

 System::Boolean OCTransfer_TransferIterator::HasResult()
{
  return OCConverter::StandardBooleanToBoolean(((Transfer_TransferIterator*)nativeHandle)->HasResult());
}

 System::Boolean OCTransfer_TransferIterator::HasUniqueResult()
{
  return OCConverter::StandardBooleanToBoolean(((Transfer_TransferIterator*)nativeHandle)->HasUniqueResult());
}

OCStandard_Type^ OCTransfer_TransferIterator::ResultType()
{
  Handle(Standard_Type) tmp = ((Transfer_TransferIterator*)nativeHandle)->ResultType();
  return gcnew OCStandard_Type(&tmp);
}

 System::Boolean OCTransfer_TransferIterator::HasTransientResult()
{
  return OCConverter::StandardBooleanToBoolean(((Transfer_TransferIterator*)nativeHandle)->HasTransientResult());
}

OCStandard_Transient^ OCTransfer_TransferIterator::TransientResult()
{
  Handle(Standard_Transient) tmp = ((Transfer_TransferIterator*)nativeHandle)->TransientResult();
  return gcnew OCStandard_Transient(&tmp);
}

 OCTransfer_StatusExec OCTransfer_TransferIterator::Status()
{
  return (OCTransfer_StatusExec)(((Transfer_TransferIterator*)nativeHandle)->Status());
}

 System::Boolean OCTransfer_TransferIterator::HasFails()
{
  return OCConverter::StandardBooleanToBoolean(((Transfer_TransferIterator*)nativeHandle)->HasFails());
}

 System::Boolean OCTransfer_TransferIterator::HasWarnings()
{
  return OCConverter::StandardBooleanToBoolean(((Transfer_TransferIterator*)nativeHandle)->HasWarnings());
}

OCInterface_Check^ OCTransfer_TransferIterator::Check()
{
  Handle(Interface_Check) tmp = ((Transfer_TransferIterator*)nativeHandle)->Check();
  return gcnew OCInterface_Check(&tmp);
}


