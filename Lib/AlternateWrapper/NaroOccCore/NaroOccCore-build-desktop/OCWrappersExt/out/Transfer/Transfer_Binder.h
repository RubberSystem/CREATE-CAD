// File generated by CPPExt (Transient)
//
#ifndef _Transfer_Binder_OCWrappers_HeaderFile
#define _Transfer_Binder_OCWrappers_HeaderFile

// include the wrapped class
#include <Transfer_Binder.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "Transfer_StatusResult.h"
#include "Transfer_StatusExec.h"


namespace OCNaroWrappers
{

ref class OCInterface_Check;
ref class OCStandard_Type;


//! A Binder is an auxiliary object to Map the Result of the <br>
//!           Transfer of a given Object : it records the Result of the <br>
//!           Unitary Transfer (Resulting Object), status of progress and <br>
//!           error (if any) of the Process <br>
//! <br>
//!           The class Binder itself makes no definition for the Result : <br>
//!           it is defined by sub-classes : it can be either Simple (and <br>
//!           has to be typed : see generic class SimpleBinder) or Multiple <br>
//!           (see class MultipleBinder). <br>
//! <br>
//!           In principle, for a Transfer in progress, Result cannot be <br>
//!           accessed : this would cause an exception raising. <br>
//!           This is controlled by the value if StatusResult : if it is <br>
//!           "Used", the Result cannot be changed. This status is normally <br>
//!           controlled by TransferProcess but can be directly (see method <br>
//!           SetAlreadyUsed) <br>
//! <br>
//!           Checks can be completed by a record of cases, as string which <br>
//!           can be used as codes, but not to be printed <br>
//! <br>
//!           In addition to the Result, a Binder can bring a list of <br>
//!           Attributes, which are additional data, each of them has a name <br>
public ref class OCTransfer_Binder : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCTransfer_Binder(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCTransfer_Binder(Handle(Transfer_Binder)* nativeHandle);

// Methods PUBLIC

//! Sets fields at initial values <br>
OCTransfer_Binder();

//! Merges basic data (Check, ExecStatus) from another Binder but <br>
//!           keeps its result. Used when a binder is replaced by another <br>
//!           one, this allows to keep messages <br>
 /*instead*/  void Merge(OCNaroWrappers::OCTransfer_Binder^ other) ;

//! Returns True if a Binder has several results, either by itself <br>
//!           or because it has next results <br>
//!           Can be defined by sub-classes. <br>
virtual /*instead*/  System::Boolean IsMultiple() ;

//! Adds a next result (at the end of the list) <br>
//!           Remark : this information is not processed by Merge <br>
 /*instead*/  void AddResult(OCNaroWrappers::OCTransfer_Binder^ next) ;

//! Returns the next result, Null if none <br>
 /*instead*/  OCTransfer_Binder^ NextResult() ;

//! Returns True if a Result is available (StatusResult = Defined) <br>
//!           A Unique Result will be gotten by Result (which must be <br>
//!           defined in each sub-class according to result type) <br>
//!           For a Multiple Result, see class MultipleBinder <br>
//!           For other case, specific access has to be forecast <br>
 /*instead*/  System::Boolean HasResult() ;

//! Declares that result is now used by another one, it means that <br>
//!           it cannot be modified (by Rebind) <br>
 /*instead*/  void SetAlreadyUsed() ;

//! Returns status, which can be Initial (not yet done), Made (a <br>
//!           result is recorded, not yet shared), Used (it is shared and <br>
//!           cannot be modified) <br>
 /*instead*/  OCTransfer_StatusResult Status() ;

//! Returns execution status <br>
 /*instead*/  OCTransfer_StatusExec StatusExec() ;

//! Modifies execution status; called by TransferProcess only <br>
//!           (for StatusError, rather use SetError, below) <br>
 /*instead*/  void SetStatusExec(OCTransfer_StatusExec stat) ;

//! Used to declare an individual transfer as beeing erroneous <br>
//!           (Status is set to Void, StatusExec is set to Error, <errmess> <br>
//!           is added to Check's list of Fails) <br>
//!           It is possible to record several messages of error <br>
//! <br>
//!           It has same effect for TransferProcess as raising an exception <br>
//!           during the operation of Transfer, except the Transfer tries to <br>
//!           continue (as if ErrorHandle had been set) <br>
 /*instead*/  void AddFail(System::String^ mess, System::String^ orig) ;

//! Used to attach a Warning Message to an individual Transfer <br>
//!           It has no effect on the Status <br>
 /*instead*/  void AddWarning(System::String^ mess, System::String^ orig) ;

//! Returns Check which stores Fail messages <br>
//!           Note that no Entity is associated in this Check <br>
 /*instead*/  OCInterface_Check^ Check() ;

//! Returns Check which stores Fail messages, in order to modify <br>
//!           it (adding messages, or replacing it) <br>
 /*instead*/  OCInterface_Check^ CCheck() ;

~OCTransfer_Binder()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
