// File generated by CPPExt (MPV)
//
#ifndef _Transfer_TransferOutput_OCWrappers_HeaderFile
#define _Transfer_TransferOutput_OCWrappers_HeaderFile

// include native header
#include <Transfer_TransferOutput.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTransfer_TransientProcess;
ref class OCInterface_InterfaceModel;
ref class OCTransfer_ActorOfTransientProcess;
ref class OCStandard_Transient;
ref class OCInterface_Protocol;
ref class OCInterface_Graph;
ref class OCInterface_EntityIterator;


//! A TransferOutput is a Tool which manages the transfer of <br>
//!           entities created by an Interface, stored in an InterfaceModel, <br>
//!           into a set of Objects suitable for an Application <br>
//!           Objects to be transferred are given, by method Transfer <br>
//!           (which calls Transfer from TransientProcess) <br>
//!           A default action is available to get all roots of the Model <br>
//!           Result is given as a TransferIterator (see TransferProcess) <br>
//!           Also, it is possible to pilot directly the TransientProcess <br>
public ref class OCTransfer_TransferOutput  {

protected:
  Transfer_TransferOutput* nativeHandle;
  OCTransfer_TransferOutput(OCDummy^) {};

public:
  property Transfer_TransferOutput* Handle
  {
    Transfer_TransferOutput* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTransfer_TransferOutput(Transfer_TransferOutput* nativeHandle);

// Methods PUBLIC

//! Creates a TransferOutput ready to use, with a TransientProcess <br>
OCTransfer_TransferOutput(OCNaroWrappers::OCTransfer_ActorOfTransientProcess^ actor, OCNaroWrappers::OCInterface_InterfaceModel^ amodel);

//! Creates a TransferOutput from an already existing <br>
//!           TransientProcess, and a Model <br>//! Returns (by Reference, hence can be changed) the Mode for <br>
//!           Scope Management. False (D) means Scope is ignored. <br>
//!           True means that each individual Transfer (direct or through <br>
//!           TransferRoots) is regarded as one Scope <br>
OCTransfer_TransferOutput(OCNaroWrappers::OCTransfer_TransientProcess^ proc, OCNaroWrappers::OCInterface_InterfaceModel^ amodel);

//! Returns the Starting Model <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Returns the TransientProcess used to work <br>
 /*instead*/  OCTransfer_TransientProcess^ TransientProcess() ;

//! Transfer checks that all taken Entities come from the same <br>
//!           Model, then calls Transfer from TransientProcess <br>
 /*instead*/  void Transfer(OCNaroWrappers::OCStandard_Transient^ obj) ;

//! Runs transfer on the roots of the Interface Model <br>
//!           The Roots are computed with a ShareFlags created from a <br>
//!           Protocol given as Argument <br>
 /*instead*/  void TransferRoots(OCNaroWrappers::OCInterface_Protocol^ protocol) ;

//! Runs transfer on the roots defined by a Graph of dependences <br>
//!           (which detains also a Model and its Entities) <br>
//!           Roots are computed with a ShareFlags created from the Graph <br>
 /*instead*/  void TransferRoots(OCNaroWrappers::OCInterface_Graph^ G) ;

//! Runs transfer on the roots of the Interface Model <br>
//!           Remark : the Roots are computed with a ShareFlags created <br>
//!           from the Active Protocol <br>
 /*instead*/  void TransferRoots() ;

//! Returns the list of Starting Entities with these criteria : <br>
//!         - <normal> False, gives the entities bound with ABNORMAL STATUS <br>
//!           (e.g. : Fail recorded, Exception raised during Transfer) <br>
//!         - <normal> True, gives Entities with or without a Result, but <br>
//!           with no Fail, no Exception (Warnings are not counted) <br>
//!         - <roots> False, considers all entities recorded (either for <br>
//!           Result, or for at least one Fail or Warning message) <br>
//!         - <roots> True (Default), considers only roots of Transfer <br>
//!           (the Entities recorded at highest level) <br>
//!          This method is based on AbnormalResult from TransferProcess <br>
 /*instead*/  OCInterface_EntityIterator^ ListForStatus(System::Boolean normal, System::Boolean roots) ;

//! Fills a Model with the list determined by ListForStatus <br>
//!           This model starts from scratch (made by NewEmptyModel from the <br>
//!           current Model), then is filled by AddWithRefs <br>
//! <br>
//!           Useful to get separately from a transfer, the entities which <br>
//!           have caused problem, in order to furtherly analyse them (with <br>
//!           normal = False), or the "good" entities, to obtain a data set <br>
//!           "which works well" (with normal = True) <br>
 /*instead*/  OCInterface_InterfaceModel^ ModelForStatus(OCNaroWrappers::OCInterface_Protocol^ protocol, System::Boolean normal, System::Boolean roots) ;

~OCTransfer_TransferOutput()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
