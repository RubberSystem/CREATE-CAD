// File generated by CPPExt (Transient)
//
#ifndef _Transfer_ActorDispatch_OCWrappers_HeaderFile
#define _Transfer_ActorDispatch_OCWrappers_HeaderFile

// include the wrapped class
#include <Transfer_ActorDispatch.hxx>
#include "../Converter.h"

#include "Transfer_ActorOfTransientProcess.h"

#include "Transfer_TransferDispatch.h"


namespace OCNaroWrappers
{

ref class OCInterface_InterfaceModel;
ref class OCInterface_GeneralLib;
ref class OCInterface_Protocol;
ref class OCTransfer_ActorOfTransientProcess;
ref class OCTransfer_TransferDispatch;
ref class OCTransfer_Binder;
ref class OCStandard_Transient;
ref class OCTransfer_TransientProcess;


//! This class allows to work with a TransferDispatch, i.e. to <br>
//!          transfer entities from a data set to another one defined by <br>
//!          the same interface norm, with the following features : <br>
//!          - ActorDispatch itself acts as a default actor, i.e. it copies <br>
//!            entities with the general service Copy, as CopyTool does <br>
//!          - it allows to add other actors for specific ways of transfer, <br>
//!            which may include data modifications, conversions ... <br>
//!          - and other features from TransferDispatch (such as mapping <br>
//!            other than one-one) <br>
public ref class OCTransfer_ActorDispatch : OCTransfer_ActorOfTransientProcess {

protected:
  // dummy constructor;
  OCTransfer_ActorDispatch(OCDummy^) : OCTransfer_ActorOfTransientProcess((OCDummy^)nullptr) {};

public:

// constructor from native
OCTransfer_ActorDispatch(Handle(Transfer_ActorDispatch)* nativeHandle);

// Methods PUBLIC

//! Creates an ActorDispatch from a Model. Works with a General <br>
//!           Service Library, given as an Argument <br>
//!           This causes TransferDispatch and its TransientProcess to be <br>
//!           created, with default actor <me> <br>
OCTransfer_ActorDispatch(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_GeneralLib^ lib);

//! Same as above, but Library is defined through a Protocol <br>
OCTransfer_ActorDispatch(OCNaroWrappers::OCInterface_InterfaceModel^ amodel, OCNaroWrappers::OCInterface_Protocol^ protocol);

//! Same as above, but works with the Active Protocol <br>
OCTransfer_ActorDispatch(OCNaroWrappers::OCInterface_InterfaceModel^ amodel);

//! Utility which adds an actor to the default <me> (it calls <br>
//!           SetActor from the TransientProcess) <br>
 /*instead*/  void AddActor(OCNaroWrappers::OCTransfer_ActorOfTransientProcess^ actor) ;

//! Returns the TransferDispatch, which does the work, records <br>
//!           the intermediate data, etc... <br>
//!           See TransferDispatch & CopyTool, to see the available methods <br>
 /*instead*/  OCTransfer_TransferDispatch^ TransferDispatch() ;

//! Specific action : it calls the method Transfer from CopyTool <br>
//!           i.e. the general service Copy, then returns the Binder <br>
//!           produced by the TransientProcess <br>
virtual /*instead*/  OCTransfer_Binder^ Transfer(OCNaroWrappers::OCStandard_Transient^ start, OCNaroWrappers::OCTransfer_TransientProcess^ TP) override;

~OCTransfer_ActorDispatch()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
