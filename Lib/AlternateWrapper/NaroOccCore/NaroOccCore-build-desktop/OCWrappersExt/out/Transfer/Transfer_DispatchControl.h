// File generated by CPPExt (Transient)
//
#ifndef _Transfer_DispatchControl_OCWrappers_HeaderFile
#define _Transfer_DispatchControl_OCWrappers_HeaderFile

// include the wrapped class
#include <Transfer_DispatchControl.hxx>
#include "../Converter.h"

#include "../Interface/Interface_CopyControl.h"



namespace OCNaroWrappers
{

ref class OCTransfer_TransientProcess;
ref class OCInterface_InterfaceModel;
ref class OCStandard_Transient;


//! This is an auxiliary class for TransferDispatch, which allows <br>
//!           to record simple copies, as CopyControl from Interface, but <br>
//!           based on a TransientProcess. Hence, it allows in addition <br>
//!           more actions (such as recording results of adaptations) <br>
public ref class OCTransfer_DispatchControl : OCInterface_CopyControl {

protected:
  // dummy constructor;
  OCTransfer_DispatchControl(OCDummy^) : OCInterface_CopyControl((OCDummy^)nullptr) {};

public:

// constructor from native
OCTransfer_DispatchControl(Handle(Transfer_DispatchControl)* nativeHandle);

// Methods PUBLIC

//! Creates the DispatchControl, ready for use <br>
OCTransfer_DispatchControl(OCNaroWrappers::OCInterface_InterfaceModel^ model, OCNaroWrappers::OCTransfer_TransientProcess^ TP);

//! Returns the content of the DispatchControl : it can be used <br>
//!           for a direct call, if the basic methods do not suffice <br>
 /*instead*/  OCTransfer_TransientProcess^ TransientProcess() ;

//! Returns the Model from which the transfer is to be done <br>
 /*instead*/  OCInterface_InterfaceModel^ StartingModel() ;

//! Clears the List of Copied Results <br>
 /*instead*/  void Clear() ;

//! Binds a (Transient) Result to a (Transient) Starting Entity <br>
 /*instead*/  void Bind(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Transient^ res) ;

//! Searches for the Result bound to a Starting Entity <br>
//!           If Found, returns True and fills <res> <br>
//!           Else, returns False and nullifies <res> <br>
 /*instead*/  System::Boolean Search(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Transient^ res) ;

~OCTransfer_DispatchControl()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
