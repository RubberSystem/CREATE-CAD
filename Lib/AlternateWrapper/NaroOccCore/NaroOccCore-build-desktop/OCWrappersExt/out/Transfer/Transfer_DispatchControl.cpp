// File generated by CPPExt (CPP file)
//

#include "Transfer_DispatchControl.h"
#include "../Converter.h"
#include "Transfer_TransientProcess.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Standard/Standard_Transient.h"


using namespace OCNaroWrappers;

OCTransfer_DispatchControl::OCTransfer_DispatchControl(Handle(Transfer_DispatchControl)* nativeHandle) : OCInterface_CopyControl((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Transfer_DispatchControl(*nativeHandle);
}

OCTransfer_DispatchControl::OCTransfer_DispatchControl(OCNaroWrappers::OCInterface_InterfaceModel^ model, OCNaroWrappers::OCTransfer_TransientProcess^ TP) : OCInterface_CopyControl((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Transfer_DispatchControl(new Transfer_DispatchControl(*((Handle_Interface_InterfaceModel*)model->Handle), *((Handle_Transfer_TransientProcess*)TP->Handle)));
}

OCTransfer_TransientProcess^ OCTransfer_DispatchControl::TransientProcess()
{
  Handle(Transfer_TransientProcess) tmp = (*((Handle_Transfer_DispatchControl*)nativeHandle))->TransientProcess();
  return gcnew OCTransfer_TransientProcess(&tmp);
}

OCInterface_InterfaceModel^ OCTransfer_DispatchControl::StartingModel()
{
  Handle(Interface_InterfaceModel) tmp = (*((Handle_Transfer_DispatchControl*)nativeHandle))->StartingModel();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 void OCTransfer_DispatchControl::Clear()
{
  (*((Handle_Transfer_DispatchControl*)nativeHandle))->Clear();
}

 void OCTransfer_DispatchControl::Bind(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Transient^ res)
{
  (*((Handle_Transfer_DispatchControl*)nativeHandle))->Bind(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Standard_Transient*)res->Handle));
}

 System::Boolean OCTransfer_DispatchControl::Search(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Transient^ res)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Transfer_DispatchControl*)nativeHandle))->Search(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Standard_Transient*)res->Handle)));
}


