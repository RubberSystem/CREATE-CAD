// File generated by CPPExt (CPP file)
//

#include "Transfer_TransientProcess.h"
#include "../Converter.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Interface/Interface_HGraph.h"
#include "../Dico/Dico_DictionaryOfTransient.h"
#include "../TColStd/TColStd_HSequenceOfTransient.h"
#include "../Interface/Interface_Graph.h"
#include "../Standard/Standard_Transient.h"
#include "../Standard/Standard_Type.h"
#include "../Message/Message_Messenger.h"
#include "../Interface/Interface_EntityIterator.h"


using namespace OCNaroWrappers;

OCTransfer_TransientProcess::OCTransfer_TransientProcess(Handle(Transfer_TransientProcess)* nativeHandle) : OCTransfer_ProcessForTransient((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Transfer_TransientProcess(*nativeHandle);
}

OCTransfer_TransientProcess::OCTransfer_TransientProcess(Standard_Integer nb) : OCTransfer_ProcessForTransient((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Transfer_TransientProcess(new Transfer_TransientProcess(nb));
}

 void OCTransfer_TransientProcess::SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model)
{
  (*((Handle_Transfer_TransientProcess*)nativeHandle))->SetModel(*((Handle_Interface_InterfaceModel*)model->Handle));
}

OCInterface_InterfaceModel^ OCTransfer_TransientProcess::Model()
{
  Handle(Interface_InterfaceModel) tmp = (*((Handle_Transfer_TransientProcess*)nativeHandle))->Model();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 void OCTransfer_TransientProcess::SetGraph(OCNaroWrappers::OCInterface_HGraph^ HG)
{
  (*((Handle_Transfer_TransientProcess*)nativeHandle))->SetGraph(*((Handle_Interface_HGraph*)HG->Handle));
}

 System::Boolean OCTransfer_TransientProcess::HasGraph()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Transfer_TransientProcess*)nativeHandle))->HasGraph());
}

OCInterface_HGraph^ OCTransfer_TransientProcess::HGraph()
{
  Handle(Interface_HGraph) tmp = (*((Handle_Transfer_TransientProcess*)nativeHandle))->HGraph();
  return gcnew OCInterface_HGraph(&tmp);
}

OCInterface_Graph^ OCTransfer_TransientProcess::Graph()
{
  Interface_Graph* tmp = new Interface_Graph(123abc, 123abc, 0);
  *tmp = (*((Handle_Transfer_TransientProcess*)nativeHandle))->Graph();
  return gcnew OCInterface_Graph(tmp);
}

 void OCTransfer_TransientProcess::SetContext(System::String^ name, OCNaroWrappers::OCStandard_Transient^ ctx)
{
  (*((Handle_Transfer_TransientProcess*)nativeHandle))->SetContext(OCConverter::StringToStandardCString(name), *((Handle_Standard_Transient*)ctx->Handle));
}

 System::Boolean OCTransfer_TransientProcess::GetContext(System::String^ name, OCNaroWrappers::OCStandard_Type^ type, OCNaroWrappers::OCStandard_Transient^ ctx)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Transfer_TransientProcess*)nativeHandle))->GetContext(OCConverter::StringToStandardCString(name), *((Handle_Standard_Type*)type->Handle), *((Handle_Standard_Transient*)ctx->Handle)));
}

OCDico_DictionaryOfTransient^ OCTransfer_TransientProcess::Context()
{
  Handle(Dico_DictionaryOfTransient) tmp = (*((Handle_Transfer_TransientProcess*)nativeHandle))->Context();
  return gcnew OCDico_DictionaryOfTransient(&tmp);
}

 void OCTransfer_TransientProcess::PrintTrace(OCNaroWrappers::OCStandard_Transient^ start, OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_Transfer_TransientProcess*)nativeHandle))->PrintTrace(*((Handle_Standard_Transient*)start->Handle), *((Handle_Message_Messenger*)S->Handle));
}

 Standard_Integer OCTransfer_TransientProcess::CheckNum(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return (*((Handle_Transfer_TransientProcess*)nativeHandle))->CheckNum(*((Handle_Standard_Transient*)ent->Handle));
}

OCInterface_EntityIterator^ OCTransfer_TransientProcess::TypedSharings(OCNaroWrappers::OCStandard_Transient^ start, OCNaroWrappers::OCStandard_Type^ type)
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = (*((Handle_Transfer_TransientProcess*)nativeHandle))->TypedSharings(*((Handle_Standard_Transient*)start->Handle), *((Handle_Standard_Type*)type->Handle));
  return gcnew OCInterface_EntityIterator(tmp);
}

 System::Boolean OCTransfer_TransientProcess::IsDataLoaded(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Transfer_TransientProcess*)nativeHandle))->IsDataLoaded(*((Handle_Standard_Transient*)ent->Handle)));
}

 System::Boolean OCTransfer_TransientProcess::IsDataFail(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Transfer_TransientProcess*)nativeHandle))->IsDataFail(*((Handle_Standard_Transient*)ent->Handle)));
}

 void OCTransfer_TransientProcess::PrintStats(Standard_Integer mode, OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_Transfer_TransientProcess*)nativeHandle))->PrintStats(mode, *((Handle_Message_Messenger*)S->Handle));
}

OCTColStd_HSequenceOfTransient^ OCTransfer_TransientProcess::RootsForTransfer()
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_Transfer_TransientProcess*)nativeHandle))->RootsForTransfer();
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}


