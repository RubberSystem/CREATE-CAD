// File generated by CPPExt (CPP file)
//

#include "BRepClass3d_SolidPassiveClassifier.h"
#include "../Converter.h"
#include "BRepClass3d_Intersector3d.h"
#include "../gp/gp_Lin.h"
#include "../TopoDS/TopoDS_Face.h"


using namespace OCNaroWrappers;

OCBRepClass3d_SolidPassiveClassifier::OCBRepClass3d_SolidPassiveClassifier(BRepClass3d_SolidPassiveClassifier* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepClass3d_SolidPassiveClassifier::OCBRepClass3d_SolidPassiveClassifier() 
{
  nativeHandle = new BRepClass3d_SolidPassiveClassifier();
}

 void OCBRepClass3d_SolidPassiveClassifier::Reset(OCNaroWrappers::OCgp_Lin^ L, Standard_Real P, Standard_Real Tol)
{
  ((BRepClass3d_SolidPassiveClassifier*)nativeHandle)->Reset(*((gp_Lin*)L->Handle), P, Tol);
}

 void OCBRepClass3d_SolidPassiveClassifier::Compare(OCNaroWrappers::OCTopoDS_Face^ F, OCTopAbs_Orientation Or)
{
  ((BRepClass3d_SolidPassiveClassifier*)nativeHandle)->Compare(*((TopoDS_Face*)F->Handle), (TopAbs_Orientation)Or);
}

 Standard_Real OCBRepClass3d_SolidPassiveClassifier::Parameter()
{
  return ((BRepClass3d_SolidPassiveClassifier*)nativeHandle)->Parameter();
}

 System::Boolean OCBRepClass3d_SolidPassiveClassifier::HasIntersection()
{
  return OCConverter::StandardBooleanToBoolean(((BRepClass3d_SolidPassiveClassifier*)nativeHandle)->HasIntersection());
}

OCBRepClass3d_Intersector3d^ OCBRepClass3d_SolidPassiveClassifier::Intersector()
{
  BRepClass3d_Intersector3d* tmp = new BRepClass3d_Intersector3d();
  *tmp = ((BRepClass3d_SolidPassiveClassifier*)nativeHandle)->Intersector();
  return gcnew OCBRepClass3d_Intersector3d(tmp);
}

 OCTopAbs_State OCBRepClass3d_SolidPassiveClassifier::State()
{
  return (OCTopAbs_State)(((BRepClass3d_SolidPassiveClassifier*)nativeHandle)->State());
}


