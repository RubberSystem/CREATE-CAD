// File generated by CPPExt (CPP file)
//

#include "BRepClass3d_SClassifier.h"
#include "../Converter.h"
#include "BRepClass3d_SolidExplorer.h"
#include "../gp/gp_Pnt.h"
#include "../TopoDS/TopoDS_Face.h"


using namespace OCNaroWrappers;

OCBRepClass3d_SClassifier::OCBRepClass3d_SClassifier(BRepClass3d_SClassifier* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepClass3d_SClassifier::OCBRepClass3d_SClassifier() 
{
  nativeHandle = new BRepClass3d_SClassifier();
}

OCBRepClass3d_SClassifier::OCBRepClass3d_SClassifier(OCNaroWrappers::OCBRepClass3d_SolidExplorer^ S, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Tol) 
{
  nativeHandle = new BRepClass3d_SClassifier(*((BRepClass3d_SolidExplorer*)S->Handle), *((gp_Pnt*)P->Handle), Tol);
}

 void OCBRepClass3d_SClassifier::Perform(OCNaroWrappers::OCBRepClass3d_SolidExplorer^ S, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Tol)
{
  ((BRepClass3d_SClassifier*)nativeHandle)->Perform(*((BRepClass3d_SolidExplorer*)S->Handle), *((gp_Pnt*)P->Handle), Tol);
}

 void OCBRepClass3d_SClassifier::PerformInfinitePoint(OCNaroWrappers::OCBRepClass3d_SolidExplorer^ S, Standard_Real Tol)
{
  ((BRepClass3d_SClassifier*)nativeHandle)->PerformInfinitePoint(*((BRepClass3d_SolidExplorer*)S->Handle), Tol);
}

 System::Boolean OCBRepClass3d_SClassifier::Rejected()
{
  return OCConverter::StandardBooleanToBoolean(((BRepClass3d_SClassifier*)nativeHandle)->Rejected());
}

 OCTopAbs_State OCBRepClass3d_SClassifier::State()
{
  return (OCTopAbs_State)(((BRepClass3d_SClassifier*)nativeHandle)->State());
}

 System::Boolean OCBRepClass3d_SClassifier::IsOnAFace()
{
  return OCConverter::StandardBooleanToBoolean(((BRepClass3d_SClassifier*)nativeHandle)->IsOnAFace());
}

OCTopoDS_Face^ OCBRepClass3d_SClassifier::Face()
{
  TopoDS_Face* tmp = new TopoDS_Face();
  *tmp = ((BRepClass3d_SClassifier*)nativeHandle)->Face();
  return gcnew OCTopoDS_Face(tmp);
}


