// File generated by CPPExt (CPP file)
//

#include "GeomPlate_PointConstraint.h"
#include "../Converter.h"
#include "../Geom/Geom_Surface.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Pnt2d.h"
#include "../GeomLProp/GeomLProp_SLProps.h"


using namespace OCNaroWrappers;

OCGeomPlate_PointConstraint::OCGeomPlate_PointConstraint(Handle(GeomPlate_PointConstraint)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_GeomPlate_PointConstraint(*nativeHandle);
}

OCGeomPlate_PointConstraint::OCGeomPlate_PointConstraint(OCNaroWrappers::OCgp_Pnt^ Pt, Standard_Integer Order, Standard_Real TolDist) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_GeomPlate_PointConstraint(new GeomPlate_PointConstraint(*((gp_Pnt*)Pt->Handle), Order, TolDist));
}

OCGeomPlate_PointConstraint::OCGeomPlate_PointConstraint(Standard_Real U, Standard_Real V, OCNaroWrappers::OCGeom_Surface^ Surf, Standard_Integer Order, Standard_Real TolDist, Standard_Real TolAng, Standard_Real TolCurv) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_GeomPlate_PointConstraint(new GeomPlate_PointConstraint(U, V, *((Handle_Geom_Surface*)Surf->Handle), Order, TolDist, TolAng, TolCurv));
}

 void OCGeomPlate_PointConstraint::SetOrder(Standard_Integer Order)
{
  (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->SetOrder(Order);
}

 Standard_Integer OCGeomPlate_PointConstraint::Order()
{
  return (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->Order();
}

 void OCGeomPlate_PointConstraint::SetG0Criterion(Standard_Real TolDist)
{
  (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->SetG0Criterion(TolDist);
}

 void OCGeomPlate_PointConstraint::SetG1Criterion(Standard_Real TolAng)
{
  (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->SetG1Criterion(TolAng);
}

 void OCGeomPlate_PointConstraint::SetG2Criterion(Standard_Real TolCurv)
{
  (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->SetG2Criterion(TolCurv);
}

 Standard_Real OCGeomPlate_PointConstraint::G0Criterion()
{
  return (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->G0Criterion();
}

 Standard_Real OCGeomPlate_PointConstraint::G1Criterion()
{
  return (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->G1Criterion();
}

 Standard_Real OCGeomPlate_PointConstraint::G2Criterion()
{
  return (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->G2Criterion();
}

 void OCGeomPlate_PointConstraint::D0(OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->D0(*((gp_Pnt*)P->Handle));
}

 void OCGeomPlate_PointConstraint::D1(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->D1(*((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCGeomPlate_PointConstraint::D2(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3, OCNaroWrappers::OCgp_Vec^ V4, OCNaroWrappers::OCgp_Vec^ V5)
{
  (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->D2(*((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle), *((gp_Vec*)V4->Handle), *((gp_Vec*)V5->Handle));
}

 System::Boolean OCGeomPlate_PointConstraint::HasPnt2dOnSurf()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomPlate_PointConstraint*)nativeHandle))->HasPnt2dOnSurf());
}

 void OCGeomPlate_PointConstraint::SetPnt2dOnSurf(OCNaroWrappers::OCgp_Pnt2d^ Pnt)
{
  (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->SetPnt2dOnSurf(*((gp_Pnt2d*)Pnt->Handle));
}

OCgp_Pnt2d^ OCGeomPlate_PointConstraint::Pnt2dOnSurf()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->Pnt2dOnSurf();
  return gcnew OCgp_Pnt2d(tmp);
}

OCGeomLProp_SLProps^ OCGeomPlate_PointConstraint::LPropSurf()
{
  GeomLProp_SLProps* tmp = new GeomLProp_SLProps(123abc, 0, 0, 0, 0);
  *tmp = (*((Handle_GeomPlate_PointConstraint*)nativeHandle))->LPropSurf();
  return gcnew OCGeomLProp_SLProps(tmp);
}


