// File generated by CPPExt (Transient)
//
#ifndef _GeomPlate_PointConstraint_OCWrappers_HeaderFile
#define _GeomPlate_PointConstraint_OCWrappers_HeaderFile

// include the wrapped class
#include <GeomPlate_PointConstraint.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../GeomLProp/GeomLProp_SLProps.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec.h"


namespace OCNaroWrappers
{

ref class OCGeom_Surface;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Pnt2d;
ref class OCGeomLProp_SLProps;



//! Defines points as constraints to be used to deform a surface. <br>
public ref class OCGeomPlate_PointConstraint : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCGeomPlate_PointConstraint(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeomPlate_PointConstraint(Handle(GeomPlate_PointConstraint)* nativeHandle);

// Methods PUBLIC

//! Constructs a point constraint object defined by  Pt, a 3D point <br>
//!   Order gives the order of constraint, one of: <br>
//! -   -1 i.e. none, or 0 i.e.G0 when assigned to Pt <br>
//! -   -1 i.e. none, 0 i.e. G0, 1 i.e. G1, 2 i.e. G2 when <br>
//!   assigned to U, V and Surf. <br>
//! In this constructor, only TolDist is given. <br>
//! Distance tolerance represents the greatest distance <br>
//! allowed between the constraint and the target surface. <br>
//! Angular tolerance represents the largest angle allowed <br>
//! between the constraint and the target surface. Curvature <br>
//! tolerance represents the greatest difference in curvature <br>
//! allowed between the constraint and the target surface. <br>
//! Raises   ConstructionError if Order  is  not  0  or  -1 <br>
OCGeomPlate_PointConstraint(OCNaroWrappers::OCgp_Pnt^ Pt, Standard_Integer Order, Standard_Real TolDist);

//! Constructs a point constraint object defined by <br>
//! the intersection point of U and V on the surface Surf. <br>
//!   Order gives the order of constraint, one of: <br>
//! -   -1 i.e. none, or 0 i.e.G0 when assigned to Pt <br>
//! -   -1 i.e. none, 0 i.e. G0, 1 i.e. G1, 2 i.e. G2 when <br>
//!   assigned to U, V and Surf. <br>
//! In this constructor the surface to be generated must <br>
//! respect several tolerance values only: <br>
//! -   the distance tolerance TolDist <br>
//! -   the angular tolerance TolAng <br>
//! -   the curvature tolerance, TolCurv. <br>
//! Distance tolerance represents the greatest distance <br>
//! allowed between the constraint and the target surface. <br>
//! Angular tolerance represents the largest angle allowed <br>
//! between the constraint and the target surface. Curvature <br>
//! tolerance represents the greatest difference in curvature <br>
//! allowed between the constraint and the target surface.Creates a punctual constraint. <br>
OCGeomPlate_PointConstraint(Standard_Real U, Standard_Real V, OCNaroWrappers::OCGeom_Surface^ Surf, Standard_Integer Order, Standard_Real TolDist, Standard_Real TolAng, Standard_Real TolCurv);


 /*instead*/  void SetOrder(Standard_Integer Order) ;


//! Returns the order of constraint: G0, G1, and G2, <br>
//! controlled respectively by G0Criterion G1Criterion and G2Criterion. <br>
 /*instead*/  Standard_Integer Order() ;


//! Allows you to set the G0 criterion. This is the law <br>
//! defining the greatest distance allowed between the <br>
//! constraint and the target surface. If this criterion is not <br>
//! set, {TolDist, the distance tolerance from the constructor, is used <br>
 /*instead*/  void SetG0Criterion(Standard_Real TolDist) ;


//! Allows you to set the G1 criterion. This is the law <br>
//! defining the greatest angle allowed between the <br>
//! constraint and the target surface. If this criterion is not <br>
//! set, TolAng, the angular tolerance from the constructor, is used. <br>
//! Raises   ConstructionError  if  the  point  is  not  on  the  surface <br>
 /*instead*/  void SetG1Criterion(Standard_Real TolAng) ;


//! Allows you to set the G2 criterion. This is the law <br>
//! defining the greatest difference in curvature allowed <br>
//! between the constraint and the target surface. If this <br>
//! criterion is not set, TolCurv, the curvature tolerance from <br>
//! the constructor, is used. <br>
//! Raises   ConstructionError if  the  point  is  not  on  the  surface <br>
 /*instead*/  void SetG2Criterion(Standard_Real TolCurv) ;


//! Returns the G0 criterion. This is the greatest distance <br>
//! allowed between the constraint and the target surface. <br>
 /*instead*/  Standard_Real G0Criterion() ;


//! Returns the G1 criterion. This is the greatest angle <br>
//! allowed between the constraint and the target surface. <br>
//! Raises   ConstructionError if  the  point  is  not  on  the  surface. <br>
 /*instead*/  Standard_Real G1Criterion() ;


//! Returns the G2 criterion. This is the greatest difference <br>
//! in curvature allowed between the constraint and the target surface. <br>
//! Raises   ConstructionError if  the  point  is  not  on  the  surface <br>
 /*instead*/  Standard_Real G2Criterion() ;


 /*instead*/  void D0(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  void D1(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


 /*instead*/  void D2(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3, OCNaroWrappers::OCgp_Vec^ V4, OCNaroWrappers::OCgp_Vec^ V5) ;


 /*instead*/  System::Boolean HasPnt2dOnSurf() ;


 /*instead*/  void SetPnt2dOnSurf(OCNaroWrappers::OCgp_Pnt2d^ Pnt) ;


 /*instead*/  OCgp_Pnt2d^ Pnt2dOnSurf() ;


 /*instead*/  OCGeomLProp_SLProps^ LPropSurf() ;

~OCGeomPlate_PointConstraint()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
