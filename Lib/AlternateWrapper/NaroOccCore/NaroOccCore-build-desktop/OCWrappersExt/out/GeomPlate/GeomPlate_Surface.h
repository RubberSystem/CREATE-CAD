// File generated by CPPExt (Transient)
//
#ifndef _GeomPlate_Surface_OCWrappers_HeaderFile
#define _GeomPlate_Surface_OCWrappers_HeaderFile

// include the wrapped class
#include <GeomPlate_Surface.hxx>
#include "../Converter.h"

#include "../Geom/Geom_Surface.h"

#include "../Plate/Plate_Plate.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom_Surface;
ref class OCPlate_Plate;
ref class OCgp_Trsf;
ref class OCgp_GTrsf2d;
ref class OCGeom_Curve;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCGeom_Geometry;
ref class OCTColgp_SequenceOfXY;



//! Describes the characteristics of plate surface objects <br>
//! returned by BuildPlateSurface::Surface. These can be <br>
//! used to verify the quality of the resulting surface before <br>
//! approximating it to a Geom_BSpline surface generated <br>
//! by MakeApprox. This proves necessary in cases where <br>
//! you want to use the resulting surface as the support for <br>
//! a shape. The algorithmically generated surface cannot <br>
//! fill this function as is, and as a result must be converted first. <br>
public ref class OCGeomPlate_Surface : OCGeom_Surface {

protected:
  // dummy constructor;
  OCGeomPlate_Surface(OCDummy^) : OCGeom_Surface((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeomPlate_Surface(Handle(GeomPlate_Surface)* nativeHandle);

// Methods PUBLIC


OCGeomPlate_Surface(OCNaroWrappers::OCGeom_Surface^ Surfinit, OCNaroWrappers::OCPlate_Plate^ Surfinter);


//!  Reverses the U direction of parametrization of <me>. <br>
//!  The bounds of the surface are not modified. <br>
 /*instead*/  void UReverse() ;

//! Return the  parameter on the  Ureversed surface for <br>
//!          the point of parameter U on <me>. <br>
//! <br>
//!          me->UReversed()->Value(me->UReversedParameter(U),V) <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U,V) <br>
 /*instead*/  Standard_Real UReversedParameter(Standard_Real U) ;


//!  Reverses the V direction of parametrization of <me>. <br>
//!  The bounds of the surface are not modified. <br>
 /*instead*/  void VReverse() ;

//! Return the  parameter on the  Vreversed surface for <br>
//!          the point of parameter V on <me>. <br>
//! <br>
//!          me->VReversed()->Value(U,me->VReversedParameter(V)) <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U,V) <br>
 /*instead*/  Standard_Real VReversedParameter(Standard_Real V) ;

//! Computes the  parameters on the  transformed  surface for <br>
//!          the transform of the point of parameters U,V on <me>. <br>
//! <br>
//!          me->Transformed(T)->Value(U',V') <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U,V).Transformed(T) <br>
//! <br>
//!          Where U',V' are the new values of U,V after calling <br>
//! <br>
//!          me->TranformParameters(U,V,T) <br>
//! <br>
//!          This methods does not change <U> and <V> <br>
//! <br>
//!          It  can be redefined.  For  example on  the Plane, <br>
//!          Cylinder, Cone, Revolved and Extruded surfaces. <br>
virtual /*instead*/  void TransformParameters(Standard_Real& U, Standard_Real& V, OCNaroWrappers::OCgp_Trsf^ T) override;

//! Returns a 2d transformation  used to find the  new <br>
//!          parameters of a point on the transformed surface. <br>
//! <br>
//!          me->Transformed(T)->Value(U',V') <br>
//! <br>
//!          is the same point as <br>
//! <br>
//!          me->Value(U,V).Transformed(T) <br>
//! <br>
//!          Where U',V' are  obtained by transforming U,V with <br>
//!          th 2d transformation returned by <br>
//! <br>
//!          me->ParametricTransformation(T) <br>
//! <br>
//!          This methods returns an identity transformation <br>
//! <br>
//!          It  can be redefined.  For  example on  the Plane, <br>
//!          Cylinder, Cone, Revolved and Extruded surfaces. <br>
//! <br>
virtual /*instead*/  OCgp_GTrsf2d^ ParametricTransformation(OCNaroWrappers::OCgp_Trsf^ T) override;


 /*instead*/  void Bounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2) ;


//!  Is the surface closed in the parametric direction U ? <br>
//!  Returns True if for each parameter V  the distance <br>
//!  between the point P (UFirst, V) and P (ULast, V) is <br>
//!  lower or equal to Resolution from gp.  UFirst and ULast <br>
//!  are the parametric bounds in the U direction. <br>
 /*instead*/  System::Boolean IsUClosed() ;


//!  Is the surface closed in the parametric direction V ? <br>
//!  Returns True if for each parameter U  the distance <br>
//!  between the point P (U, VFirst) and  P (U, VLast) is <br>
//!  lower or equal to Resolution from gp.  VFirst and VLast <br>
//!  are the parametric bounds in the V direction. <br>
 /*instead*/  System::Boolean IsVClosed() ;


//!  Is the parametrization of a surface periodic in the <br>
//!  direction U ? <br>
//!  It is possible only if the surface is closed in this <br>
//!  parametric direction and if the following relation is <br>
//!  satisfied : <br>
//!  for each parameter V the distance between the point <br>
//!  P (U, V)  and the point  P (U + T, V) is lower or equal <br>
//!  to Resolution from package gp. T is the parametric period <br>
//!  and must be a constant. <br>
 /*instead*/  System::Boolean IsUPeriodic() ;

//! returns the Uperiod. <br>//! raises if the surface is not uperiodic. <br>
virtual /*instead*/  Standard_Real UPeriod() override;


//!  Is the parametrization of a surface periodic in the <br>
//!  direction U ? <br>
//!  It is possible only if the surface is closed in this <br>
//!  parametric direction and if the following relation is <br>
//!  satisfied : <br>
//!  for each parameter V the distance between the point <br>
//!  P (U, V)  and the point  P (U + T, V) is lower or equal <br>
//!  to Resolution from package gp. T is the parametric period <br>
//!  and must be a constant. <br>
 /*instead*/  System::Boolean IsVPeriodic() ;

//! returns the Vperiod. <br>//! raises if the surface is not vperiodic. <br>
virtual /*instead*/  Standard_Real VPeriod() override;

//! Computes the U isoparametric curve. <br>
 /*instead*/  OCGeom_Curve^ UIso(Standard_Real U) ;

//! Computes the V isoparametric curve. <br>
 /*instead*/  OCGeom_Curve^ VIso(Standard_Real V) ;


//!  Global Continuity of the surface in direction U and V : <br>
//!  C0 : only geometric continuity, <br>
//!  C1 : continuity of the first derivative all along the surface, <br>
//!  C2 : continuity of the second derivative all along the surface, <br>
//!  C3 : continuity of the third derivative all along the surface, <br>
//!  G1 : tangency continuity all along the surface, <br>
//!  G2 : curvature continuity all along the surface, <br>
//!  CN : the order of continuity is infinite. <br>
//! Example : <br>
//!  If the surface is C1 in the V parametric direction and C2 <br>
//!  in the U parametric direction Shape = C1. <br>
 /*instead*/  OCGeomAbs_Shape Continuity() ;


//! Returns the order of continuity of the surface in the <br>
//!  U parametric direction. <br>//! Raised if N < 0. <br>
 /*instead*/  System::Boolean IsCNu(Standard_Integer N) ;


//! Returns the order of continuity of the surface in the <br>
//!  V parametric direction. <br>//! Raised if N < 0. <br>
 /*instead*/  System::Boolean IsCNv(Standard_Integer N) ;


//!  Computes the point of parameter U,V on the surface. <br>
//!  Raised only for an "OffsetSurface" if it is not possible to <br>
//!  compute the current point. <br>
 /*instead*/  void D0(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P) ;


//!  Computes the point P and the first derivatives in the <br>
//!  directions U and V at this point. <br>//! Raised if the continuity of the surface is not C1. <br>
 /*instead*/  void D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V) ;


//!  Computes the point P, the first and the second derivatives in <br>
//!  the directions U and V at this point. <br>//! Raised if the continuity of the surface is not C2. <br>
 /*instead*/  void D2(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV) ;


//!  Computes the point P, the first,the second and the third <br>
//!  derivatives in the directions U and V at this point. <br>//! Raised if the continuity of the surface is not C2. <br>
 /*instead*/  void D3(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V, OCNaroWrappers::OCgp_Vec^ D2U, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCgp_Vec^ D2UV, OCNaroWrappers::OCgp_Vec^ D3U, OCNaroWrappers::OCgp_Vec^ D3V, OCNaroWrappers::OCgp_Vec^ D3UUV, OCNaroWrappers::OCgp_Vec^ D3UVV) ;

//!---Purpose ; <br>
//!  Computes the derivative of order Nu in the direction U and Nv <br>
//!  in the direction V at the point P(U, V). <br>
//!  Raised if the continuity of the surface is not CNu in the U <br>
//!  direction or not CNv in the V direction. <br>//! Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0. <br>
 /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv) ;


 /*instead*/  OCGeom_Geometry^ Copy() ;


//!  Transformation of a geometric object. This tansformation <br>
//!  can be a translation, a rotation, a symmetry, a scaling <br>
//!  or a complex transformation obtained by combination of <br>
//!  the previous elementaries transformations. <br>
//!  (see class Transformation of the package Geom). <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;


 /*instead*/  OCGeom_Surface^ CallSurfinit() ;


 /*instead*/  void SetBounds(Standard_Real Umin, Standard_Real Umax, Standard_Real Vmin, Standard_Real Vmax) ;


 /*instead*/  void RealBounds(Standard_Real& U1, Standard_Real& U2, Standard_Real& V1, Standard_Real& V2) ;


 /*instead*/  void Constraints(OCNaroWrappers::OCTColgp_SequenceOfXY^ Seq) ;

~OCGeomPlate_Surface()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
