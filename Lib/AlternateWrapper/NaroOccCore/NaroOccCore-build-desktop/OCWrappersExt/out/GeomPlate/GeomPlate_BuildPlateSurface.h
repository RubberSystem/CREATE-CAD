// File generated by CPPExt (MPV)
//
#ifndef _GeomPlate_BuildPlateSurface_OCWrappers_HeaderFile
#define _GeomPlate_BuildPlateSurface_OCWrappers_HeaderFile

// include native header
#include <GeomPlate_BuildPlateSurface.hxx>
#include "../Converter.h"


#include "../Plate/Plate_Plate.h"
#include "../Extrema/Extrema_ExtPS.h"


namespace OCNaroWrappers
{

ref class OCGeomPlate_HSequenceOfCurveConstraint;
ref class OCGeomPlate_HArray1OfSequenceOfReal;
ref class OCGeomPlate_HSequenceOfPointConstraint;
ref class OCGeom_Surface;
ref class OCGeomPlate_Surface;
ref class OCTColStd_HArray1OfInteger;
ref class OCGeomPlate_HArray1OfHCurveOnSurface;
ref class OCGeomPlate_CurveConstraint;
ref class OCGeomPlate_PointConstraint;
ref class OCTColgp_SequenceOfXY;
ref class OCTColgp_SequenceOfXYZ;
ref class OCTColGeom2d_HArray1OfCurve;
ref class OCTColStd_HArray1OfReal;
ref class OCgp_Pnt2d;
ref class OCgp_Pnt;
ref class OCGeom2d_Curve;
ref class OCAdaptor3d_HCurve;
ref class OCAdaptor2d_HCurve2d;



//! This class provides an algorithm for constructing such a plate surface that <br>
//! it conforms to given curve and/or point constraints. <br>
//! The algorithm accepts or constructs an initial surface <br>
//! and looks for a deformation of it satisfying the <br>
//! constraints and minimizing energy input. <br>
//! A BuildPlateSurface object provides a framework for: <br>
//! -   defining or setting constraints <br>
//! -   implementing the construction algorithm <br>
//! -   consulting the result. <br>
public ref class OCGeomPlate_BuildPlateSurface  {

protected:
  GeomPlate_BuildPlateSurface* nativeHandle;
  OCGeomPlate_BuildPlateSurface(OCDummy^) {};

public:
  property GeomPlate_BuildPlateSurface* Handle
  {
    GeomPlate_BuildPlateSurface* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeomPlate_BuildPlateSurface(GeomPlate_BuildPlateSurface* nativeHandle);

// Methods PUBLIC

//! Constructor  compatible  with  the  old  version <br>
//! with this constructor the constraint are given in a Array of Curve on Surface <br>
//! The array NbPoints  contains the number of points for each constraint. <br>
//! The Array Tang contains the order of constraint for each Constraint: The possible values for this <br>
//! order has to be -1 , 0 , 1 , 2 . Order i means constraint Gi. <br>
//! NbIter is the maximum number of iteration to optimise the number of points for resolution <br>
//! Degree is the degree of resolution for Plate <br>
//! Tol2d is the tolerance used to test if two points of different constraint are identical in the <br>
//! parametric space of the initial surface <br>
//! Tol3d is used to test if two identical points in the 2d space are identical in 3d space <br>
//! TolAng is used to compare the angle between normal of two identical points in the 2d space <br>
//! Raises  ConstructionError; <br>
OCGeomPlate_BuildPlateSurface(OCNaroWrappers::OCTColStd_HArray1OfInteger^ NPoints, OCNaroWrappers::OCGeomPlate_HArray1OfHCurveOnSurface^ TabCurve, OCNaroWrappers::OCTColStd_HArray1OfInteger^ Tang, Standard_Integer Degree, Standard_Integer NbIter, Standard_Real Tol2d, Standard_Real Tol3d, Standard_Real TolAng, Standard_Real TolCurv, System::Boolean Anisotropie);


OCGeomPlate_BuildPlateSurface(OCNaroWrappers::OCGeom_Surface^ Surf, Standard_Integer Degree, Standard_Integer NbPtsOnCur, Standard_Integer NbIter, Standard_Real Tol2d, Standard_Real Tol3d, Standard_Real TolAng, Standard_Real TolCurv, System::Boolean Anisotropie);

//! Initializes the BuildPlateSurface framework for <br>
//! deforming plate surfaces using curve and point <br>
//! constraints. You use the first constructor if you have <br>
//! an initial surface to work with at construction time. If <br>
//! not, you use the second. You can add one later by <br>
//! using the method LoadInitSurface. If no initial <br>
//! surface is loaded, one will automatically be computed. <br>
//! The curve and point constraints will be defined by <br>
//! using the method Add. <br>
//! Before the call to the algorithm, the curve constraints <br>
//! will be transformed into sequences of discrete points. <br>
//! Each curve defined as a constraint will be given the <br>
//! value of NbPtsOnCur as the average number of points on it. <br>
//! Several arguments serve to improve performance of <br>
//! the algorithm. NbIter, for example, expresses the <br>
//! number of iterations allowed and is used to control the <br>
//! duration of computation. To optimize resolution, <br>
//! Degree will have the default value of 3. <br>
//! The surface generated must respect several tolerance values: <br>
//! -   2d tolerance given by Tol2d, with a default value of 0.00001 <br>
//! -   3d tolerance expressed by Tol3d, with a default value of 0.0001 <br>
//! -   angular tolerance given by TolAng, with a default <br>
//!   value of 0.01, defining the greatest angle allowed <br>
//!   between the constraint and the target surface. <br>
//! Exceptions <br>
//! Standard_ConstructionError if NbIter is less than 1 or Degree is less than 3. <br>
OCGeomPlate_BuildPlateSurface(Standard_Integer Degree, Standard_Integer NbPtsOnCur, Standard_Integer NbIter, Standard_Real Tol2d, Standard_Real Tol3d, Standard_Real TolAng, Standard_Real TolCurv, System::Boolean Anisotropie);

//!  Resets all constraints <br>
 /*instead*/  void Init() ;

//! Loads the initial Surface <br>
 /*instead*/  void LoadInitSurface(OCNaroWrappers::OCGeom_Surface^ Surf) ;

//! Adds the linear constraint cont. <br>
 /*instead*/  void Add(OCNaroWrappers::OCGeomPlate_CurveConstraint^ Cont) ;


 /*instead*/  void SetNbBounds(Standard_Integer NbBounds) ;

//! Adds the point constraint cont. <br>
 /*instead*/  void Add(OCNaroWrappers::OCGeomPlate_PointConstraint^ Cont) ;


//! Calls the algorithm and computes the plate surface using <br>
//! the loaded constraints. If no initial surface is given, the <br>
//! algorithm automatically computes one. <br>
//! Exceptions <br>
//! Standard_RangeError if the value of the constraint is <br>
//! null or if plate is not done. <br>
 /*instead*/  void Perform() ;

//! returns the CurveConstraints of order order <br>
//! <br>
 /*instead*/  OCGeomPlate_CurveConstraint^ CurveConstraint(Standard_Integer order) ;

//! returns the PointConstraint of order order <br>
//! <br>
 /*instead*/  OCGeomPlate_PointConstraint^ PointConstraint(Standard_Integer order) ;


 /*instead*/  void Disc2dContour(Standard_Integer nbp, OCNaroWrappers::OCTColgp_SequenceOfXY^ Seq2d) ;


 /*instead*/  void Disc3dContour(Standard_Integer nbp, Standard_Integer iordre, OCNaroWrappers::OCTColgp_SequenceOfXYZ^ Seq3d) ;


//! Tests whether computation of the plate has been completed. <br>
 /*instead*/  System::Boolean IsDone() ;


//! Returns the result of the computation. This surface can <br>
//! then be used by GeomPlate_MakeApprox for <br>
//! converting the resulting surface into a BSpline. <br>
 /*instead*/  OCGeomPlate_Surface^ Surface() ;

//! Returns the initial surface <br>
 /*instead*/  OCGeom_Surface^ SurfInit() ;


//! Allows you to ensure that the array of curves returned by <br>
//! Curves2d has the correct orientation. Returns the <br>
//! orientation of the curves in the the array returned by <br>
//! Curves2d. Computation changes the orientation of <br>
//! these curves. Consequently, this method returns the <br>
//! orientation prior to computation. <br>
 /*instead*/  OCTColStd_HArray1OfInteger^ Sense() ;


//! Extracts the array of curves on the plate surface which <br>
//! correspond to the curve constraints set in Add. <br>
 /*instead*/  OCTColGeom2d_HArray1OfCurve^ Curves2d() ;


//! Returns the order of the curves in the array returned by <br>
//! Curves2d. Computation changes this order. <br>
//! Consequently, this method returns the order of the <br>
//! curves prior to computation. <br>
 /*instead*/  OCTColStd_HArray1OfInteger^ Order() ;

//! Returns the max distance betwen the result and the constraints <br>
 /*instead*/  Standard_Real G0Error() ;

//! Returns  the max angle betwen the result and the constraints <br>
 /*instead*/  Standard_Real G1Error() ;

//! Returns  the max difference of curvature betwen the result and the constraints <br>
//! <br>
 /*instead*/  Standard_Real G2Error() ;

//! Returns   the max distance between the result and the constraint Index <br>
 /*instead*/  Standard_Real G0Error(Standard_Integer Index) ;

//! Returns the max angle between the result and the constraint Index <br>
 /*instead*/  Standard_Real G1Error(Standard_Integer Index) ;

//! Returns the max difference of curvature between the result and the constraint Index <br>
 /*instead*/  Standard_Real G2Error(Standard_Integer Index) ;

~OCGeomPlate_BuildPlateSurface()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
