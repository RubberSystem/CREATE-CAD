// File generated by CPPExt (CPP file)
//

#include "Geom2dHatch_Hatcher.h"
#include "../Converter.h"
#include "../Geom2dAdaptor/Geom2dAdaptor_Curve.h"
#include "Geom2dHatch_Intersector.h"
#include "Geom2dHatch_ElementOfHatcher.h"
#include "Geom2dHatch_ElementsOfHatcher.h"
#include "Geom2dHatch_MapOfElementsOfElementsOfHatcher.h"
#include "Geom2dHatch_HatchingOfHatcher.h"
#include "Geom2dHatch_HatchingsOfHatcher.h"
#include "Geom2dHatch_DataMapNodeOfHatchingsOfHatcher.h"
#include "Geom2dHatch_DataMapIteratorOfHatchingsOfHatcher.h"
#include "Geom2dHatch_ClassifierOfHatcher.h"
#include "Geom2dHatch_FClass2dOfClassifierOfHatcher.h"
#include "../HatchGen/HatchGen_PointOnHatching.h"
#include "../HatchGen/HatchGen_Domain.h"


using namespace OCNaroWrappers;

OCGeom2dHatch_Hatcher::OCGeom2dHatch_Hatcher(Geom2dHatch_Hatcher* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGeom2dHatch_Hatcher::OCGeom2dHatch_Hatcher(OCNaroWrappers::OCGeom2dHatch_Intersector^ Intersector, Standard_Real Confusion2d, Standard_Real Confusion3d, System::Boolean KeepPnt, System::Boolean KeepSeg) 
{
  nativeHandle = new Geom2dHatch_Hatcher(*((Geom2dHatch_Intersector*)Intersector->Handle), Confusion2d, Confusion3d, OCConverter::BooleanToStandardBoolean(KeepPnt), OCConverter::BooleanToStandardBoolean(KeepSeg));
}

 void OCGeom2dHatch_Hatcher::Intersector(OCNaroWrappers::OCGeom2dHatch_Intersector^ Intersector)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->Intersector(*((Geom2dHatch_Intersector*)Intersector->Handle));
}

OCGeom2dHatch_Intersector^ OCGeom2dHatch_Hatcher::Intersector()
{
  Geom2dHatch_Intersector* tmp = new Geom2dHatch_Intersector(0, 0);
  *tmp = ((Geom2dHatch_Hatcher*)nativeHandle)->Intersector();
  return gcnew OCGeom2dHatch_Intersector(tmp);
}

OCGeom2dHatch_Intersector^ OCGeom2dHatch_Hatcher::ChangeIntersector()
{
  Geom2dHatch_Intersector* tmp = new Geom2dHatch_Intersector(0, 0);
  *tmp = ((Geom2dHatch_Hatcher*)nativeHandle)->ChangeIntersector();
  return gcnew OCGeom2dHatch_Intersector(tmp);
}

 void OCGeom2dHatch_Hatcher::Confusion2d(Standard_Real Confusion)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->Confusion2d(Confusion);
}

 Standard_Real OCGeom2dHatch_Hatcher::Confusion2d()
{
  return ((Geom2dHatch_Hatcher*)nativeHandle)->Confusion2d();
}

 void OCGeom2dHatch_Hatcher::Confusion3d(Standard_Real Confusion)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->Confusion3d(Confusion);
}

 Standard_Real OCGeom2dHatch_Hatcher::Confusion3d()
{
  return ((Geom2dHatch_Hatcher*)nativeHandle)->Confusion3d();
}

 void OCGeom2dHatch_Hatcher::KeepPoints(System::Boolean Keep)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->KeepPoints(OCConverter::BooleanToStandardBoolean(Keep));
}

 System::Boolean OCGeom2dHatch_Hatcher::KeepPoints()
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_Hatcher*)nativeHandle)->KeepPoints());
}

 void OCGeom2dHatch_Hatcher::KeepSegments(System::Boolean Keep)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->KeepSegments(OCConverter::BooleanToStandardBoolean(Keep));
}

 System::Boolean OCGeom2dHatch_Hatcher::KeepSegments()
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_Hatcher*)nativeHandle)->KeepSegments());
}

 void OCGeom2dHatch_Hatcher::Clear()
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->Clear();
}

OCGeom2dAdaptor_Curve^ OCGeom2dHatch_Hatcher::ElementCurve(Standard_Integer IndE)
{
  Geom2dAdaptor_Curve* tmp = new Geom2dAdaptor_Curve();
  *tmp = ((Geom2dHatch_Hatcher*)nativeHandle)->ElementCurve(IndE);
  return gcnew OCGeom2dAdaptor_Curve(tmp);
}

 Standard_Integer OCGeom2dHatch_Hatcher::AddElement(OCNaroWrappers::OCGeom2dAdaptor_Curve^ Curve, OCTopAbs_Orientation Orientation)
{
  return ((Geom2dHatch_Hatcher*)nativeHandle)->AddElement(*((Geom2dAdaptor_Curve*)Curve->Handle), (TopAbs_Orientation)Orientation);
}

 void OCGeom2dHatch_Hatcher::RemElement(Standard_Integer IndE)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->RemElement(IndE);
}

 void OCGeom2dHatch_Hatcher::ClrElements()
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->ClrElements();
}

OCGeom2dAdaptor_Curve^ OCGeom2dHatch_Hatcher::HatchingCurve(Standard_Integer IndH)
{
  Geom2dAdaptor_Curve* tmp = new Geom2dAdaptor_Curve();
  *tmp = ((Geom2dHatch_Hatcher*)nativeHandle)->HatchingCurve(IndH);
  return gcnew OCGeom2dAdaptor_Curve(tmp);
}

 Standard_Integer OCGeom2dHatch_Hatcher::AddHatching(OCNaroWrappers::OCGeom2dAdaptor_Curve^ Curve)
{
  return ((Geom2dHatch_Hatcher*)nativeHandle)->AddHatching(*((Geom2dAdaptor_Curve*)Curve->Handle));
}

 void OCGeom2dHatch_Hatcher::RemHatching(Standard_Integer IndH)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->RemHatching(IndH);
}

 void OCGeom2dHatch_Hatcher::ClrHatchings()
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->ClrHatchings();
}

 Standard_Integer OCGeom2dHatch_Hatcher::NbPoints(Standard_Integer IndH)
{
  return ((Geom2dHatch_Hatcher*)nativeHandle)->NbPoints(IndH);
}

OCHatchGen_PointOnHatching^ OCGeom2dHatch_Hatcher::Point(Standard_Integer IndH, Standard_Integer IndP)
{
  HatchGen_PointOnHatching* tmp = new HatchGen_PointOnHatching();
  *tmp = ((Geom2dHatch_Hatcher*)nativeHandle)->Point(IndH, IndP);
  return gcnew OCHatchGen_PointOnHatching(tmp);
}

 void OCGeom2dHatch_Hatcher::Trim()
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->Trim();
}

 Standard_Integer OCGeom2dHatch_Hatcher::Trim(OCNaroWrappers::OCGeom2dAdaptor_Curve^ Curve)
{
  return ((Geom2dHatch_Hatcher*)nativeHandle)->Trim(*((Geom2dAdaptor_Curve*)Curve->Handle));
}

 void OCGeom2dHatch_Hatcher::Trim(Standard_Integer IndH)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->Trim(IndH);
}

 void OCGeom2dHatch_Hatcher::ComputeDomains()
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->ComputeDomains();
}

 void OCGeom2dHatch_Hatcher::ComputeDomains(Standard_Integer IndH)
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->ComputeDomains(IndH);
}

 System::Boolean OCGeom2dHatch_Hatcher::TrimDone(Standard_Integer IndH)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_Hatcher*)nativeHandle)->TrimDone(IndH));
}

 System::Boolean OCGeom2dHatch_Hatcher::TrimFailed(Standard_Integer IndH)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_Hatcher*)nativeHandle)->TrimFailed(IndH));
}

 System::Boolean OCGeom2dHatch_Hatcher::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_Hatcher*)nativeHandle)->IsDone());
}

 System::Boolean OCGeom2dHatch_Hatcher::IsDone(Standard_Integer IndH)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_Hatcher*)nativeHandle)->IsDone(IndH));
}

 OCHatchGen_ErrorStatus OCGeom2dHatch_Hatcher::Status(Standard_Integer IndH)
{
  return (OCHatchGen_ErrorStatus)(((Geom2dHatch_Hatcher*)nativeHandle)->Status(IndH));
}

 Standard_Integer OCGeom2dHatch_Hatcher::NbDomains(Standard_Integer IndH)
{
  return ((Geom2dHatch_Hatcher*)nativeHandle)->NbDomains(IndH);
}

OCHatchGen_Domain^ OCGeom2dHatch_Hatcher::Domain(Standard_Integer IndH, Standard_Integer IDom)
{
  HatchGen_Domain* tmp = new HatchGen_Domain();
  *tmp = ((Geom2dHatch_Hatcher*)nativeHandle)->Domain(IndH, IDom);
  return gcnew OCHatchGen_Domain(tmp);
}

 void OCGeom2dHatch_Hatcher::Dump()
{
  ((Geom2dHatch_Hatcher*)nativeHandle)->Dump();
}


