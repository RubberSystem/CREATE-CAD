// File generated by CPPExt (CPP file)
//

#include "Geom2dHatch_ElementsOfHatcher.h"
#include "../Converter.h"
#include "Geom2dHatch_ElementOfHatcher.h"
#include "../TColStd/TColStd_MapIntegerHasher.h"
#include "../Geom2dAdaptor/Geom2dAdaptor_Curve.h"
#include "Geom2dHatch_MapOfElementsOfElementsOfHatcher.h"
#include "Geom2dHatch_DataMapNodeOfMapOfElementsOfElementsOfHatcher.h"
#include "Geom2dHatch_DataMapIteratorOfMapOfElementsOfElementsOfHatcher.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Lin2d.h"


using namespace OCNaroWrappers;

OCGeom2dHatch_ElementsOfHatcher::OCGeom2dHatch_ElementsOfHatcher(Geom2dHatch_ElementsOfHatcher* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGeom2dHatch_ElementsOfHatcher::OCGeom2dHatch_ElementsOfHatcher() 
{
  nativeHandle = new Geom2dHatch_ElementsOfHatcher();
}

OCGeom2dHatch_ElementsOfHatcher::OCGeom2dHatch_ElementsOfHatcher(OCNaroWrappers::OCGeom2dHatch_ElementsOfHatcher^ Other) 
{
  nativeHandle = new Geom2dHatch_ElementsOfHatcher(*((Geom2dHatch_ElementsOfHatcher*)Other->Handle));
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::Bind(Standard_Integer K, OCNaroWrappers::OCGeom2dHatch_ElementOfHatcher^ I)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->Bind(K, *((Geom2dHatch_ElementOfHatcher*)I->Handle)));
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::IsBound(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->IsBound(K));
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::UnBind(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->UnBind(K));
}

OCGeom2dHatch_ElementOfHatcher^ OCGeom2dHatch_ElementsOfHatcher::Find(Standard_Integer K)
{
  Geom2dHatch_ElementOfHatcher* tmp = new Geom2dHatch_ElementOfHatcher();
  *tmp = ((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->Find(K);
  return gcnew OCGeom2dHatch_ElementOfHatcher(tmp);
}

OCGeom2dHatch_ElementOfHatcher^ OCGeom2dHatch_ElementsOfHatcher::ChangeFind(Standard_Integer K)
{
  Geom2dHatch_ElementOfHatcher* tmp = new Geom2dHatch_ElementOfHatcher();
  *tmp = ((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->ChangeFind(K);
  return gcnew OCGeom2dHatch_ElementOfHatcher(tmp);
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::Reject(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->Reject(*((gp_Pnt2d*)P->Handle)));
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::Segment(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real& Par)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->Segment(*((gp_Pnt2d*)P->Handle), *((gp_Lin2d*)L->Handle), Par));
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::OtherSegment(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real& Par)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->OtherSegment(*((gp_Pnt2d*)P->Handle), *((gp_Lin2d*)L->Handle), Par));
}

 void OCGeom2dHatch_ElementsOfHatcher::InitWires()
{
  ((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->InitWires();
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::MoreWires()
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->MoreWires());
}

 void OCGeom2dHatch_ElementsOfHatcher::NextWire()
{
  ((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->NextWire();
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::RejectWire(OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real Par)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->RejectWire(*((gp_Lin2d*)L->Handle), Par));
}

 void OCGeom2dHatch_ElementsOfHatcher::InitEdges()
{
  ((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->InitEdges();
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::MoreEdges()
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->MoreEdges());
}

 void OCGeom2dHatch_ElementsOfHatcher::NextEdge()
{
  ((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->NextEdge();
}

 System::Boolean OCGeom2dHatch_ElementsOfHatcher::RejectEdge(OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real Par)
{
  return OCConverter::StandardBooleanToBoolean(((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->RejectEdge(*((gp_Lin2d*)L->Handle), Par));
}

 void OCGeom2dHatch_ElementsOfHatcher::CurrentEdge(OCNaroWrappers::OCGeom2dAdaptor_Curve^ E, OCTopAbs_Orientation& Or)
{
  ((Geom2dHatch_ElementsOfHatcher*)nativeHandle)->CurrentEdge(*((Geom2dAdaptor_Curve*)E->Handle), (TopAbs_Orientation&)Or);
}


