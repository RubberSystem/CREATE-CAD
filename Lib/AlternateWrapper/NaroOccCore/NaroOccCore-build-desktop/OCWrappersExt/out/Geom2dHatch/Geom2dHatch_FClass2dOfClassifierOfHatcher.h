// File generated by CPPExt (MPV)
//
#ifndef _Geom2dHatch_FClass2dOfClassifierOfHatcher_OCWrappers_HeaderFile
#define _Geom2dHatch_FClass2dOfClassifierOfHatcher_OCWrappers_HeaderFile

// include native header
#include <Geom2dHatch_FClass2dOfClassifierOfHatcher.hxx>
#include "../Converter.h"


#include "../gp/gp_Lin2d.h"
#include "../TopTrans/TopTrans_CurveTransition.h"
#include "Geom2dHatch_Intersector.h"
#include "../TopAbs/TopAbs_State.h"
#include "../TopAbs/TopAbs_Orientation.h"


namespace OCNaroWrappers
{

ref class OCGeom2dAdaptor_Curve;
ref class OCGeom2dHatch_Intersector;
ref class OCgp_Lin2d;



public ref class OCGeom2dHatch_FClass2dOfClassifierOfHatcher  {

protected:
  Geom2dHatch_FClass2dOfClassifierOfHatcher* nativeHandle;
  OCGeom2dHatch_FClass2dOfClassifierOfHatcher(OCDummy^) {};

public:
  property Geom2dHatch_FClass2dOfClassifierOfHatcher* Handle
  {
    Geom2dHatch_FClass2dOfClassifierOfHatcher* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeom2dHatch_FClass2dOfClassifierOfHatcher(Geom2dHatch_FClass2dOfClassifierOfHatcher* nativeHandle);

// Methods PUBLIC


OCGeom2dHatch_FClass2dOfClassifierOfHatcher();


 /*instead*/  void Reset(OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real P, Standard_Real Tol) ;


 /*instead*/  void Compare(OCNaroWrappers::OCGeom2dAdaptor_Curve^ E, OCTopAbs_Orientation Or) ;


 /*instead*/  Standard_Real Parameter() ;


 /*instead*/  OCGeom2dHatch_Intersector^ Intersector() ;


 /*instead*/  Standard_Integer ClosestIntersection() ;


 /*instead*/  OCTopAbs_State State() ;


 /*instead*/  System::Boolean IsHeadOrEnd() ;

~OCGeom2dHatch_FClass2dOfClassifierOfHatcher()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
