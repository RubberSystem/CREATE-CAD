// File generated by CPPExt (MPV)
//
#ifndef _Geom2dHatch_Intersector_OCWrappers_HeaderFile
#define _Geom2dHatch_Intersector_OCWrappers_HeaderFile

// include native header
#include <Geom2dHatch_Intersector.hxx>
#include "../Converter.h"

#include "../Geom2dInt/Geom2dInt_GInter.h"

#include "../Geom2dInt/Geom2dInt_GInter.h"


namespace OCNaroWrappers
{

ref class OCGeom2dAdaptor_Curve;
ref class OCgp_Lin2d;
ref class OCgp_Dir2d;



public ref class OCGeom2dHatch_Intersector  : public OCGeom2dInt_GInter {

protected:
  // dummy constructor;
  OCGeom2dHatch_Intersector(OCDummy^) : OCGeom2dInt_GInter((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom2dHatch_Intersector(Geom2dHatch_Intersector* nativeHandle);

// Methods PUBLIC

//! Creates an intersector. <br>
OCGeom2dHatch_Intersector(Standard_Real Confusion, Standard_Real Tangency);

//! Returns the confusion tolerance of the <br>
//!          intersector. <br>
 /*instead*/  Standard_Real ConfusionTolerance() ;

//! Sets the confusion tolerance of the intersector. <br>
 /*instead*/  void SetConfusionTolerance(Standard_Real Confusion) ;

//! Returns the tangency tolerance of the <br>
//!          intersector. <br>
 /*instead*/  Standard_Real TangencyTolerance() ;

//! Sets the tangency tolerance of the intersector. <br>
 /*instead*/  void SetTangencyTolerance(Standard_Real Tangency) ;

//! Intersects the curves C1 and C2. <br>
//!          The results are retreived by the usual methods <br>
//!          described in IntRes2d_Intersection. <br>//! Creates an intersector. <br>
 /*instead*/  void Intersect(OCNaroWrappers::OCGeom2dAdaptor_Curve^ C1, OCNaroWrappers::OCGeom2dAdaptor_Curve^ C2) ;


OCGeom2dHatch_Intersector();

//! Performs the intersection   between the  2d   line <br>
//!          segment (<L>, <P>) and  the  Curve <E>.  The  line <br>
//!          segment  is the  part  of  the  2d   line   <L> of <br>
//!          parameter range [0, <P>] (P is positive and can be <br>
//!          RealLast()). Tol is the  Tolerance on the segment. <br>
//!          The order  is relevant, the  first argument is the <br>
//!          segment, the second the Edge. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real P, Standard_Real Tol, OCNaroWrappers::OCGeom2dAdaptor_Curve^ E) ;

//! Returns in <T>,  <N> and <C>  the tangent,  normal <br>
//!          and  curvature of the edge  <E> at parameter value <br>
//!          <U>. <br>
 /*instead*/  void LocalGeometry(OCNaroWrappers::OCGeom2dAdaptor_Curve^ E, Standard_Real U, OCNaroWrappers::OCgp_Dir2d^ T, OCNaroWrappers::OCgp_Dir2d^ N, Standard_Real& C) ;

~OCGeom2dHatch_Intersector()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
