// File generated by CPPExt (Package)
//

#ifndef _DsgPrs_OCWrappers_HeaderFile
#define _DsgPrs_OCWrappers_HeaderFile

// Include the wrapped header
#include <DsgPrs.hxx>

#include "DsgPrs_EllipseRadiusPresentation.h"
#include "DsgPrs_LengthPresentation.h"
#include "DsgPrs_RadiusPresentation.h"
#include "DsgPrs_DiameterPresentation.h"
#include "DsgPrs_FilletRadiusPresentation.h"
#include "DsgPrs_AnglePresentation.h"
#include "DsgPrs_Chamf2dPresentation.h"
#include "DsgPrs_ParalPresentation.h"
#include "DsgPrs_PerpenPresentation.h"
#include "DsgPrs_SymmetricPresentation.h"
#include "DsgPrs_MidPointPresentation.h"
#include "DsgPrs_TangentPresentation.h"
#include "DsgPrs_ConcentricPresentation.h"
#include "DsgPrs_FixPresentation.h"
#include "DsgPrs_IdenticPresentation.h"
#include "DsgPrs_EqualRadiusPresentation.h"
#include "DsgPrs_EqualDistancePresentation.h"
#include "DsgPrs_SymbPresentation.h"
#include "DsgPrs_ShapeDirPresentation.h"
#include "DsgPrs_OffsetPresentation.h"
#include "DsgPrs_DatumTool.h"
#include "DsgPrs_DatumPrs.h"
#include "DsgPrs_XYZAxisPresentation.h"
#include "DsgPrs_XYZPlanePresentation.h"
#include "DsgPrs_ShadedPlanePresentation.h"


namespace OCNaroWrappers
{
//! Describes Standard Presentations for DsgIHM objects <br>
public ref class OCDsgPrs abstract sealed
{

public:
// Methods

//! draws symbols ((one or two) arrows,(one or two)points <br>
//!          at thebeginning and at the end of the dimension <br>
static /*instead*/  void ComputeSymbol(OCNaroWrappers::OCPrs3d_Presentation^ aPresentation, OCNaroWrappers::OCPrs3d_AngleAspect^ anAspect, OCNaroWrappers::OCgp_Pnt^ pt1, OCNaroWrappers::OCgp_Pnt^ pt2, OCNaroWrappers::OCgp_Dir^ dir1, OCNaroWrappers::OCgp_Dir^ dir2, OCDsgPrs_ArrowSide ArrowSide) ;

//! draws symbols ((one or two) arrows,(one or two)points <br>
//!          at thebeginning and at the end of the dimension <br>
static /*instead*/  void ComputeSymbol(OCNaroWrappers::OCPrs3d_Presentation^ aPresentation, OCNaroWrappers::OCPrs3d_LengthAspect^ anAspect, OCNaroWrappers::OCgp_Pnt^ pt1, OCNaroWrappers::OCgp_Pnt^ pt2, OCNaroWrappers::OCgp_Dir^ dir1, OCNaroWrappers::OCgp_Dir^ dir2, OCDsgPrs_ArrowSide ArrowSide, System::Boolean drawFromCenter) ;


static /*instead*/  void ComputePlanarFacesLengthPresentation(Standard_Real FirstArrowLength, Standard_Real SecondArrowLength, OCNaroWrappers::OCgp_Pnt^ AttachmentPoint1, OCNaroWrappers::OCgp_Pnt^ AttachmentPoint2, OCNaroWrappers::OCgp_Dir^ DirAttach, OCNaroWrappers::OCgp_Pnt^ OffsetPoint, OCNaroWrappers::OCgp_Pln^ PlaneOfFaces, OCNaroWrappers::OCgp_Pnt^ EndOfArrow1, OCNaroWrappers::OCgp_Pnt^ EndOfArrow2, OCNaroWrappers::OCgp_Dir^ DirOfArrow1) ;


static /*instead*/  void ComputeCurvilinearFacesLengthPresentation(Standard_Real FirstArrowLength, Standard_Real SecondArrowLength, OCNaroWrappers::OCGeom_Surface^ SecondSurf, OCNaroWrappers::OCgp_Pnt^ AttachmentPoint1, OCNaroWrappers::OCgp_Pnt^ AttachmentPoint2, OCNaroWrappers::OCgp_Dir^ DirAttach, OCNaroWrappers::OCgp_Pnt^ EndOfArrow2, OCNaroWrappers::OCgp_Dir^ DirOfArrow1, OCNaroWrappers::OCGeom_Curve^ VCurve, OCNaroWrappers::OCGeom_Curve^ UCurve, Standard_Real& FirstU, Standard_Real& deltaU, Standard_Real& FirstV, Standard_Real& deltaV) ;


static /*instead*/  void ComputeFacesAnglePresentation(Standard_Real ArrowLength, Standard_Real Value, OCNaroWrappers::OCgp_Pnt^ CenterPoint, OCNaroWrappers::OCgp_Pnt^ AttachmentPoint1, OCNaroWrappers::OCgp_Pnt^ AttachmentPoint2, OCNaroWrappers::OCgp_Dir^ dir1, OCNaroWrappers::OCgp_Dir^ dir2, OCNaroWrappers::OCgp_Dir^ axisdir, System::Boolean isPlane, OCNaroWrappers::OCgp_Ax1^ AxisOfSurf, OCNaroWrappers::OCgp_Pnt^ OffsetPoint, OCNaroWrappers::OCgp_Circ^ AngleCirc, Standard_Real& FirstParAngleCirc, Standard_Real& LastParAngleCirc, OCNaroWrappers::OCgp_Pnt^ EndOfArrow1, OCNaroWrappers::OCgp_Pnt^ EndOfArrow2, OCNaroWrappers::OCgp_Dir^ DirOfArrow1, OCNaroWrappers::OCgp_Dir^ DirOfArrow2, OCNaroWrappers::OCgp_Pnt^ ProjAttachPoint2, OCNaroWrappers::OCgp_Circ^ AttachCirc, Standard_Real& FirstParAttachCirc, Standard_Real& LastParAttachCirc) ;


static /*instead*/  void ComputeRadiusLine(OCNaroWrappers::OCgp_Pnt^ aCenter, OCNaroWrappers::OCgp_Pnt^ anEndOfArrow, OCNaroWrappers::OCgp_Pnt^ aPosition, System::Boolean drawFromCenter, OCNaroWrappers::OCgp_Pnt^ aRadLineOrign, OCNaroWrappers::OCgp_Pnt^ aRadLineEnd) ;

//! computes Geometry for  fillet radius  presentation; <br>
//!          special case flag  SpecCase equal Standard_True if <br>
//!          radius of  fillet circle  =  0  or if  anngle between <br>
//!          Vec1(Center, FirstPoint)  and Vec2(Center,SecondPoint) equal 0 or PI <br>
static /*instead*/  void ComputeFilletRadiusPresentation(Standard_Real ArrowLength, Standard_Real Value, OCNaroWrappers::OCgp_Pnt^ Position, OCNaroWrappers::OCgp_Dir^ NormalDir, OCNaroWrappers::OCgp_Pnt^ FirstPoint, OCNaroWrappers::OCgp_Pnt^ SecondPoint, OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Pnt^ BasePnt, System::Boolean drawRevers, System::Boolean& SpecCase, OCNaroWrappers::OCgp_Circ^ FilletCirc, Standard_Real& FirstParCirc, Standard_Real& LastParCirc, OCNaroWrappers::OCgp_Pnt^ EndOfArrow, OCNaroWrappers::OCgp_Dir^ DirOfArrow, OCNaroWrappers::OCgp_Pnt^ DrawPosition) ;

//!  computes  length  of  ellipse  arc  in  parametric  units <br>
static /*instead*/  Standard_Real DistanceFromApex(OCNaroWrappers::OCgp_Elips^ elips, OCNaroWrappers::OCgp_Pnt^ Apex, Standard_Real par) ;


};

}; // OCNaroWrappers

#endif
