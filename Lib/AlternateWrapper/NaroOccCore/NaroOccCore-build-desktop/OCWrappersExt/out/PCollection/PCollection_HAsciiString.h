// File generated by CPPExt (Transient)
//
#ifndef _PCollection_HAsciiString_OCWrappers_HeaderFile
#define _PCollection_HAsciiString_OCWrappers_HeaderFile

// include the wrapped class
#include <PCollection_HAsciiString.hxx>
#include "../Converter.h"

#include "../Standard/Standard_Persistent.h"

#include "../DBC/DBC_VArrayOfCharacter.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;
ref class OCPCollection_HExtendedString;
ref class OCDBC_VArrayOfCharacter;


//! Describes a persistent ASCII character string of variable length. <br>
public ref class OCPCollection_HAsciiString : OCStandard_Persistent {

protected:
  // dummy constructor;
  OCPCollection_HAsciiString(OCDummy^) : OCStandard_Persistent((OCDummy^)nullptr) {};

public:

// constructor from native
OCPCollection_HAsciiString(Handle(PCollection_HAsciiString)* nativeHandle);

// Methods PUBLIC

//! Creation and initialization with the string S. <br>
OCPCollection_HAsciiString(System::String^ S);

//! Creation and initialization with the string S from TCollection. <br>
OCPCollection_HAsciiString(OCNaroWrappers::OCTCollection_AsciiString^ S);

//! Creation and initialization with the character C. <br>
OCPCollection_HAsciiString(Standard_Character C);

//! Creation of a sub-string of the string S. <br>
//! The sub-string starts at the index FromIndex and ends <br>
//! at the index ToIndex <br>
OCPCollection_HAsciiString(OCNaroWrappers::OCPCollection_HAsciiString^ S, Standard_Integer FromIndex, Standard_Integer ToIndex);

//! Creation by converting an extended string to a normal <br>
//! string. Raises OutOfRange if the String is not in the "Ascii range". <br>
OCPCollection_HAsciiString(OCNaroWrappers::OCPCollection_HExtendedString^ S);

//! Creation and initialization by converting the real <br>
//! value into a string. <br>
//! F describes a format using "C" conventions. <br>
OCPCollection_HAsciiString(Standard_Real R, System::String^ F);

//! Creation and initialization by converting the Integer <br>
//! value into a string. <br>
//! F describes a format using "C" conventions. <br>
OCPCollection_HAsciiString(Standard_Integer I, System::String^ F);

//! Pushing a string at the end of the string me <br>
 /*instead*/  void Append(OCNaroWrappers::OCPCollection_HAsciiString^ S) ;

//! Converts the first character into its corresponding <br>
//! upper-case character and the other characters into lowercase <br>
 /*instead*/  void Capitalize() ;

//! center <br>
//! Length becomes equal to Width and the new characters are <br>
//! equal to Filler <br>
//! Raises an exception if Width is less than zero <br>
//! if Width < Length nothing happens <br>
 /*instead*/  void Center(Standard_Integer Width, Standard_Character Filler) ;

//! Substitutes all the characters equal to C by NewC in the <br>
//! string <me>.The substition can be case sensitive. <br>
 /*instead*/  void ChangeAll(Standard_Character C, Standard_Character NewC, System::Boolean CaseSensitive) ;

//! Remove all characters in the string <me>. <br>
//! Length is equal to zero now. <br>
 /*instead*/  void Clear() ;

//! Converts a persistent HAsciiString to a non <br>
//! persistent AsciiString. <br>
 /*instead*/  OCTCollection_AsciiString^ Convert() ;

//! Returns the index of the first character of <Set> founded in <me>. <br>
//! The search begins to the index FromIndex and ends to the <br>
//! the index ToIndex. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
 /*instead*/  Standard_Integer FirstLocationInSet(OCNaroWrappers::OCPCollection_HAsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Returns the index of the first character of <me> <br>
//! that is not present in the set <Set>. <br>
//! The search begins to the index FromIndex and ends to the <br>
//! the index ToIndex in <me>. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
 /*instead*/  Standard_Integer FirstLocationNotInSet(OCNaroWrappers::OCPCollection_HAsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Pushing a string after a specific index in the string <me>. <br>
//! Raises an exception if Index is out of bounds. <br>
 /*instead*/  void InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPCollection_HAsciiString^ S) ;

//! Pushing a string before a specific index in the string <me> <br>
//! Raises an exception if Index is out of bounds <br>
 /*instead*/  void InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPCollection_HAsciiString^ S) ;

//! Returns the integer value corresponding to the string <me> <br>
//! Raises an exception if the string does not correspond to <br>
//! an integer value. <br>
 /*instead*/  Standard_Integer IntegerValue() ;

//! Test if characters are different <br>
//! between <me> and <other>. <br>
 /*instead*/  System::Boolean IsDifferent(OCNaroWrappers::OCPCollection_HAsciiString^ other) ;

//!  Returns True if the string <me> contains zero character <br>
 /*instead*/  System::Boolean IsEmpty() ;

//! Returns TRUE if <me> is 'ASCII' greater than <other>. <br>
 /*instead*/  System::Boolean IsGreater(OCNaroWrappers::OCPCollection_HAsciiString^ other) ;

//! Returns True if the string contains an integer value. <br>
 /*instead*/  System::Boolean IsIntegerValue() ;

//! Returns TRUE if <me> is 'ASCII' less than <other>. <br>
 /*instead*/  System::Boolean IsLess(OCNaroWrappers::OCPCollection_HAsciiString^ other) ;

//! Returns True if the string contains an Real value. <br>
 /*instead*/  System::Boolean IsRealValue() ;

//! Returns True if two strings are equal. <br>
//! The comparison is case sensitive. <br>
 /*instead*/  System::Boolean IsSameString(OCNaroWrappers::OCPCollection_HAsciiString^ S) ;

//! Returns True if two strings are equal. <br>
//! The comparison is case sensitive if the flag is set. <br>
 /*instead*/  System::Boolean IsSameString(OCNaroWrappers::OCPCollection_HAsciiString^ S, System::Boolean CaseSensitive) ;

//! Removes all space characters in the begining of the <br>
//! string. <br>
 /*instead*/  void LeftAdjust() ;

//! Left justify. <br>
//! Length becomes equal to Width and the new characters are <br>
//! equal to Filler. <br>
//! If Width < Length nothing happens. <br>
//! Raises an exception if Width is less than zero. <br>
 /*instead*/  void LeftJustify(Standard_Integer Width, Standard_Character Filler) ;

//! Number of characters of the String. <br>
 /*instead*/  Standard_Integer Length() ;

//! Returns the index of the nth occurence of the character C <br>
//! in the string <me> from the starting index FromIndex to the <br>
//! ending index ToIndex. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
 /*instead*/  Standard_Integer Location(Standard_Integer N, Standard_Character C, Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Returns an index in the string <me> of the first occurence <br>
//! of the string S in the string <me> from the starting index <br>
//! FromIndex to the ending index ToIndex <br>
//! returns zero if failure <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
 /*instead*/  Standard_Integer Location(OCNaroWrappers::OCPCollection_HAsciiString^ S, Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Converts any upper-case character to its corresponding <br>
//! lower-case character in the string <me>. If there is no <br>
//! corresponding lower-case character, the character is <br>
//! unchanged <br>
//! before <br>
//! me = "aBAcd123" <br>
//! after <br>
//! me = "abacd123" <br>
 /*instead*/  void Lowercase() ;

//! Pushing a string at the begining of the string <me> <br>
//! before <br>
//!  me = "cde" , S = "ab" <br>
//! after <br>
//!  me = "abcde" , S = "ab" <br>
 /*instead*/  void Prepend(OCNaroWrappers::OCPCollection_HAsciiString^ S) ;

//! Prints the content of <me> on the stream S. <br>
 /*instead*/  void Print(Standard_OStream& S) ;

//! Returns the real value corresponding to the string <me>. <br>
//! Raises an exception if the string does not correspond to a real value. <br>
 /*instead*/  Standard_Real RealValue() ;

//! Removes the character located at the index Index in the string. <br>
//! Raises an exception if Index is out of bounds. <br>
 /*instead*/  void Remove(Standard_Integer Index) ;

//! Removes all the characters from the index FromIndex to the <br>
//! index ToIndex. <br>
//! Raises an exception if FromIndex or ToIndex is out of bounds. <br>
 /*instead*/  void Remove(Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Removes all the occurences of the character C in the string <br>
 /*instead*/  void RemoveAll(Standard_Character C, System::Boolean CaseSensitive) ;

//! Removes all space characters at the end of the string. <br>
 /*instead*/  void RightAdjust() ;

//! Right justify. <br>
//! Length becomes equal to Width and the new characters are <br>
//! equal to Filler. <br>
//! If Width < Length nothing happens. <br>
//! Raises an exception if Width is less than zero. <br>
 /*instead*/  void RightJustify(Standard_Integer Width, Standard_Character Filler) ;

//! Substitutes the character located to the position Index <br>
//! by the character C. <br>
//! Raises an exception if the Index is out of bounds. <br>
 /*instead*/  void SetValue(Standard_Integer Index, Standard_Character C) ;

//! Substitutes from the index Index to the end by the string S. <br>
//! Raises an exception if Index is out of bounds. <br>
 /*instead*/  void SetValue(Standard_Integer Index, OCNaroWrappers::OCPCollection_HAsciiString^ S) ;

//! Splits a string of characters into two sub-strings. <br>
 /*instead*/  OCPCollection_HAsciiString^ Split(Standard_Integer Index) ;

//! Creation of a sub-string of the string <me>. <br>
//! The sub-string starts to the index Fromindex and ends <br>
//! to the index ToIndex. <br>
//! Raises an exception if ToIndex or FromIndex is out of bounds. <br>
 /*instead*/  OCPCollection_HAsciiString^ SubString(Standard_Integer FromIndex, Standard_Integer ToIndex) ;

//! Extracts <aString> token from <me>. <br>
//! The token extracted is the indice number <num>. <br>
 /*instead*/  OCPCollection_HAsciiString^ Token(System::String^ separators, Standard_Integer whichone) ;

//! Transforms all the characters into upper-case. <br>
//! If there is no corresponding upper-case character, the <br>
//! character is unchanged. <br>
 /*instead*/  void Uppercase() ;

//! Length of the string ignoring all spaces (' ') and the <br>
//! control character at the end. <br>
 /*instead*/  Standard_Integer UsefullLength() ;

//! Returns the character of index Index of the string <br>
 /*instead*/  Standard_Character Value(Standard_Integer Index) ;


virtual /*instead*/  void ShallowDump(Standard_OStream& s) override;

~OCPCollection_HAsciiString()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
