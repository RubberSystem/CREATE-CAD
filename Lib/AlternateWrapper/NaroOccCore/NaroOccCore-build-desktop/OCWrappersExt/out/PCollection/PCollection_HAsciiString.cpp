// File generated by CPPExt (CPP file)
//

#include "PCollection_HAsciiString.h"
#include "../Converter.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "PCollection_HExtendedString.h"
#include "../DBC/DBC_VArrayOfCharacter.h"


using namespace OCNaroWrappers;

OCPCollection_HAsciiString::OCPCollection_HAsciiString(Handle(PCollection_HAsciiString)* nativeHandle) : OCStandard_Persistent((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PCollection_HAsciiString(*nativeHandle);
}

OCPCollection_HAsciiString::OCPCollection_HAsciiString(System::String^ S) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HAsciiString(new PCollection_HAsciiString(OCConverter::StringToStandardCString(S)));
}

OCPCollection_HAsciiString::OCPCollection_HAsciiString(OCNaroWrappers::OCTCollection_AsciiString^ S) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HAsciiString(new PCollection_HAsciiString(*((TCollection_AsciiString*)S->Handle)));
}

OCPCollection_HAsciiString::OCPCollection_HAsciiString(Standard_Character C) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HAsciiString(new PCollection_HAsciiString(C));
}

OCPCollection_HAsciiString::OCPCollection_HAsciiString(OCNaroWrappers::OCPCollection_HAsciiString^ S, Standard_Integer FromIndex, Standard_Integer ToIndex) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HAsciiString(new PCollection_HAsciiString(*((Handle_PCollection_HAsciiString*)S->Handle), FromIndex, ToIndex));
}

OCPCollection_HAsciiString::OCPCollection_HAsciiString(OCNaroWrappers::OCPCollection_HExtendedString^ S) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HAsciiString(new PCollection_HAsciiString(*((Handle_PCollection_HExtendedString*)S->Handle)));
}

OCPCollection_HAsciiString::OCPCollection_HAsciiString(Standard_Real R, System::String^ F) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HAsciiString(new PCollection_HAsciiString(R, OCConverter::StringToStandardCString(F)));
}

OCPCollection_HAsciiString::OCPCollection_HAsciiString(Standard_Integer I, System::String^ F) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HAsciiString(new PCollection_HAsciiString(I, OCConverter::StringToStandardCString(F)));
}

 void OCPCollection_HAsciiString::Append(OCNaroWrappers::OCPCollection_HAsciiString^ S)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Append(*((Handle_PCollection_HAsciiString*)S->Handle));
}

 void OCPCollection_HAsciiString::Capitalize()
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Capitalize();
}

 void OCPCollection_HAsciiString::Center(Standard_Integer Width, Standard_Character Filler)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Center(Width, Filler);
}

 void OCPCollection_HAsciiString::ChangeAll(Standard_Character C, Standard_Character NewC, System::Boolean CaseSensitive)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->ChangeAll(C, NewC, OCConverter::BooleanToStandardBoolean(CaseSensitive));
}

 void OCPCollection_HAsciiString::Clear()
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Clear();
}

OCTCollection_AsciiString^ OCPCollection_HAsciiString::Convert()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_PCollection_HAsciiString*)nativeHandle))->Convert();
  return gcnew OCTCollection_AsciiString(tmp);
}

 Standard_Integer OCPCollection_HAsciiString::FirstLocationInSet(OCNaroWrappers::OCPCollection_HAsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->FirstLocationInSet(*((Handle_PCollection_HAsciiString*)Set->Handle), FromIndex, ToIndex);
}

 Standard_Integer OCPCollection_HAsciiString::FirstLocationNotInSet(OCNaroWrappers::OCPCollection_HAsciiString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->FirstLocationNotInSet(*((Handle_PCollection_HAsciiString*)Set->Handle), FromIndex, ToIndex);
}

 void OCPCollection_HAsciiString::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPCollection_HAsciiString^ S)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->InsertAfter(Index, *((Handle_PCollection_HAsciiString*)S->Handle));
}

 void OCPCollection_HAsciiString::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPCollection_HAsciiString^ S)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->InsertBefore(Index, *((Handle_PCollection_HAsciiString*)S->Handle));
}

 Standard_Integer OCPCollection_HAsciiString::IntegerValue()
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->IntegerValue();
}

 System::Boolean OCPCollection_HAsciiString::IsDifferent(OCNaroWrappers::OCPCollection_HAsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HAsciiString*)nativeHandle))->IsDifferent(*((Handle_PCollection_HAsciiString*)other->Handle)));
}

 System::Boolean OCPCollection_HAsciiString::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HAsciiString*)nativeHandle))->IsEmpty());
}

 System::Boolean OCPCollection_HAsciiString::IsGreater(OCNaroWrappers::OCPCollection_HAsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HAsciiString*)nativeHandle))->IsGreater(*((Handle_PCollection_HAsciiString*)other->Handle)));
}

 System::Boolean OCPCollection_HAsciiString::IsIntegerValue()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HAsciiString*)nativeHandle))->IsIntegerValue());
}

 System::Boolean OCPCollection_HAsciiString::IsLess(OCNaroWrappers::OCPCollection_HAsciiString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HAsciiString*)nativeHandle))->IsLess(*((Handle_PCollection_HAsciiString*)other->Handle)));
}

 System::Boolean OCPCollection_HAsciiString::IsRealValue()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HAsciiString*)nativeHandle))->IsRealValue());
}

 System::Boolean OCPCollection_HAsciiString::IsSameString(OCNaroWrappers::OCPCollection_HAsciiString^ S)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HAsciiString*)nativeHandle))->IsSameString(*((Handle_PCollection_HAsciiString*)S->Handle)));
}

 System::Boolean OCPCollection_HAsciiString::IsSameString(OCNaroWrappers::OCPCollection_HAsciiString^ S, System::Boolean CaseSensitive)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HAsciiString*)nativeHandle))->IsSameString(*((Handle_PCollection_HAsciiString*)S->Handle), OCConverter::BooleanToStandardBoolean(CaseSensitive)));
}

 void OCPCollection_HAsciiString::LeftAdjust()
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->LeftAdjust();
}

 void OCPCollection_HAsciiString::LeftJustify(Standard_Integer Width, Standard_Character Filler)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->LeftJustify(Width, Filler);
}

 Standard_Integer OCPCollection_HAsciiString::Length()
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->Length();
}

 Standard_Integer OCPCollection_HAsciiString::Location(Standard_Integer N, Standard_Character C, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->Location(N, C, FromIndex, ToIndex);
}

 Standard_Integer OCPCollection_HAsciiString::Location(OCNaroWrappers::OCPCollection_HAsciiString^ S, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->Location(*((Handle_PCollection_HAsciiString*)S->Handle), FromIndex, ToIndex);
}

 void OCPCollection_HAsciiString::Lowercase()
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Lowercase();
}

 void OCPCollection_HAsciiString::Prepend(OCNaroWrappers::OCPCollection_HAsciiString^ S)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Prepend(*((Handle_PCollection_HAsciiString*)S->Handle));
}

 void OCPCollection_HAsciiString::Print(Standard_OStream& S)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Print(S);
}

 Standard_Real OCPCollection_HAsciiString::RealValue()
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->RealValue();
}

 void OCPCollection_HAsciiString::Remove(Standard_Integer Index)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Remove(Index);
}

 void OCPCollection_HAsciiString::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Remove(FromIndex, ToIndex);
}

 void OCPCollection_HAsciiString::RemoveAll(Standard_Character C, System::Boolean CaseSensitive)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->RemoveAll(C, OCConverter::BooleanToStandardBoolean(CaseSensitive));
}

 void OCPCollection_HAsciiString::RightAdjust()
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->RightAdjust();
}

 void OCPCollection_HAsciiString::RightJustify(Standard_Integer Width, Standard_Character Filler)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->RightJustify(Width, Filler);
}

 void OCPCollection_HAsciiString::SetValue(Standard_Integer Index, Standard_Character C)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->SetValue(Index, C);
}

 void OCPCollection_HAsciiString::SetValue(Standard_Integer Index, OCNaroWrappers::OCPCollection_HAsciiString^ S)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->SetValue(Index, *((Handle_PCollection_HAsciiString*)S->Handle));
}

OCPCollection_HAsciiString^ OCPCollection_HAsciiString::Split(Standard_Integer Index)
{
  Handle(PCollection_HAsciiString) tmp = (*((Handle_PCollection_HAsciiString*)nativeHandle))->Split(Index);
  return gcnew OCPCollection_HAsciiString(&tmp);
}

OCPCollection_HAsciiString^ OCPCollection_HAsciiString::SubString(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  Handle(PCollection_HAsciiString) tmp = (*((Handle_PCollection_HAsciiString*)nativeHandle))->SubString(FromIndex, ToIndex);
  return gcnew OCPCollection_HAsciiString(&tmp);
}

OCPCollection_HAsciiString^ OCPCollection_HAsciiString::Token(System::String^ separators, Standard_Integer whichone)
{
  Handle(PCollection_HAsciiString) tmp = (*((Handle_PCollection_HAsciiString*)nativeHandle))->Token(OCConverter::StringToStandardCString(separators), whichone);
  return gcnew OCPCollection_HAsciiString(&tmp);
}

 void OCPCollection_HAsciiString::Uppercase()
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->Uppercase();
}

 Standard_Integer OCPCollection_HAsciiString::UsefullLength()
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->UsefullLength();
}

 Standard_Character OCPCollection_HAsciiString::Value(Standard_Integer Index)
{
  return (*((Handle_PCollection_HAsciiString*)nativeHandle))->Value(Index);
}

 void OCPCollection_HAsciiString::ShallowDump(Standard_OStream& s)
{
  (*((Handle_PCollection_HAsciiString*)nativeHandle))->ShallowDump(s);
}


