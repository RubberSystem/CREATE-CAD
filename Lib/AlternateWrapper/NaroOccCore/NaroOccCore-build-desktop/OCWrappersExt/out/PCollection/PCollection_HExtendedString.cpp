// File generated by CPPExt (CPP file)
//

#include "PCollection_HExtendedString.h"
#include "../Converter.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "PCollection_HAsciiString.h"
#include "../DBC/DBC_VArrayOfExtCharacter.h"


using namespace OCNaroWrappers;

OCPCollection_HExtendedString::OCPCollection_HExtendedString(Handle(PCollection_HExtendedString)* nativeHandle) : OCStandard_Persistent((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PCollection_HExtendedString(*nativeHandle);
}

OCPCollection_HExtendedString::OCPCollection_HExtendedString(OCNaroWrappers::OCTCollection_ExtendedString^ S) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HExtendedString(new PCollection_HExtendedString(*((TCollection_ExtendedString*)S->Handle)));
}

OCPCollection_HExtendedString::OCPCollection_HExtendedString(Standard_ExtCharacter C) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HExtendedString(new PCollection_HExtendedString(C));
}

OCPCollection_HExtendedString::OCPCollection_HExtendedString(OCNaroWrappers::OCPCollection_HExtendedString^ S, Standard_Integer FromIndex, Standard_Integer ToIndex) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HExtendedString(new PCollection_HExtendedString(*((Handle_PCollection_HExtendedString*)S->Handle), FromIndex, ToIndex));
}

OCPCollection_HExtendedString::OCPCollection_HExtendedString(System::String^ astring) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HExtendedString(new PCollection_HExtendedString(OCConverter::StringToStandardCString(astring)));
}

OCPCollection_HExtendedString::OCPCollection_HExtendedString(OCNaroWrappers::OCPCollection_HAsciiString^ S) : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PCollection_HExtendedString(new PCollection_HExtendedString(*((Handle_PCollection_HAsciiString*)S->Handle)));
}

 void OCPCollection_HExtendedString::Append(OCNaroWrappers::OCPCollection_HExtendedString^ S)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->Append(*((Handle_PCollection_HExtendedString*)S->Handle));
}

 void OCPCollection_HExtendedString::Center(Standard_Integer Width, Standard_ExtCharacter Filler)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->Center(Width, Filler);
}

 void OCPCollection_HExtendedString::ChangeAll(Standard_ExtCharacter C, Standard_ExtCharacter NewC)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->ChangeAll(C, NewC);
}

 void OCPCollection_HExtendedString::Clear()
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->Clear();
}

OCTCollection_ExtendedString^ OCPCollection_HExtendedString::Convert()
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = (*((Handle_PCollection_HExtendedString*)nativeHandle))->Convert();
  return gcnew OCTCollection_ExtendedString(tmp);
}

 Standard_Integer OCPCollection_HExtendedString::FirstLocationInSet(OCNaroWrappers::OCPCollection_HExtendedString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PCollection_HExtendedString*)nativeHandle))->FirstLocationInSet(*((Handle_PCollection_HExtendedString*)Set->Handle), FromIndex, ToIndex);
}

 Standard_Integer OCPCollection_HExtendedString::FirstLocationNotInSet(OCNaroWrappers::OCPCollection_HExtendedString^ Set, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PCollection_HExtendedString*)nativeHandle))->FirstLocationNotInSet(*((Handle_PCollection_HExtendedString*)Set->Handle), FromIndex, ToIndex);
}

 void OCPCollection_HExtendedString::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPCollection_HExtendedString^ S)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->InsertAfter(Index, *((Handle_PCollection_HExtendedString*)S->Handle));
}

 void OCPCollection_HExtendedString::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPCollection_HExtendedString^ S)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->InsertBefore(Index, *((Handle_PCollection_HExtendedString*)S->Handle));
}

 System::Boolean OCPCollection_HExtendedString::IsAscii()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HExtendedString*)nativeHandle))->IsAscii());
}

 System::Boolean OCPCollection_HExtendedString::IsDifferent(OCNaroWrappers::OCPCollection_HExtendedString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HExtendedString*)nativeHandle))->IsDifferent(*((Handle_PCollection_HExtendedString*)other->Handle)));
}

 System::Boolean OCPCollection_HExtendedString::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HExtendedString*)nativeHandle))->IsEmpty());
}

 System::Boolean OCPCollection_HExtendedString::IsGreater(OCNaroWrappers::OCPCollection_HExtendedString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HExtendedString*)nativeHandle))->IsGreater(*((Handle_PCollection_HExtendedString*)other->Handle)));
}

 System::Boolean OCPCollection_HExtendedString::IsLess(OCNaroWrappers::OCPCollection_HExtendedString^ other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HExtendedString*)nativeHandle))->IsLess(*((Handle_PCollection_HExtendedString*)other->Handle)));
}

 System::Boolean OCPCollection_HExtendedString::IsSameString(OCNaroWrappers::OCPCollection_HExtendedString^ S)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PCollection_HExtendedString*)nativeHandle))->IsSameString(*((Handle_PCollection_HExtendedString*)S->Handle)));
}

 void OCPCollection_HExtendedString::LeftAdjust()
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->LeftAdjust();
}

 void OCPCollection_HExtendedString::LeftJustify(Standard_Integer Width, Standard_ExtCharacter Filler)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->LeftJustify(Width, Filler);
}

 Standard_Integer OCPCollection_HExtendedString::Length()
{
  return (*((Handle_PCollection_HExtendedString*)nativeHandle))->Length();
}

 Standard_Integer OCPCollection_HExtendedString::Location(Standard_Integer N, Standard_ExtCharacter C, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PCollection_HExtendedString*)nativeHandle))->Location(N, C, FromIndex, ToIndex);
}

 Standard_Integer OCPCollection_HExtendedString::Location(OCNaroWrappers::OCPCollection_HExtendedString^ S, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PCollection_HExtendedString*)nativeHandle))->Location(*((Handle_PCollection_HExtendedString*)S->Handle), FromIndex, ToIndex);
}

 void OCPCollection_HExtendedString::Prepend(OCNaroWrappers::OCPCollection_HExtendedString^ S)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->Prepend(*((Handle_PCollection_HExtendedString*)S->Handle));
}

 void OCPCollection_HExtendedString::Print(Standard_OStream& S)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->Print(S);
}

 void OCPCollection_HExtendedString::Remove(Standard_Integer Index)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->Remove(Index);
}

 void OCPCollection_HExtendedString::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->Remove(FromIndex, ToIndex);
}

 void OCPCollection_HExtendedString::RemoveAll(Standard_ExtCharacter C)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->RemoveAll(C);
}

 void OCPCollection_HExtendedString::RightAdjust()
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->RightAdjust();
}

 void OCPCollection_HExtendedString::RightJustify(Standard_Integer Width, Standard_ExtCharacter Filler)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->RightJustify(Width, Filler);
}

 void OCPCollection_HExtendedString::SetValue(Standard_Integer Index, Standard_ExtCharacter C)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->SetValue(Index, C);
}

 void OCPCollection_HExtendedString::SetValue(Standard_Integer Index, OCNaroWrappers::OCPCollection_HExtendedString^ S)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->SetValue(Index, *((Handle_PCollection_HExtendedString*)S->Handle));
}

OCPCollection_HExtendedString^ OCPCollection_HExtendedString::Split(Standard_Integer Index)
{
  Handle(PCollection_HExtendedString) tmp = (*((Handle_PCollection_HExtendedString*)nativeHandle))->Split(Index);
  return gcnew OCPCollection_HExtendedString(&tmp);
}

OCPCollection_HExtendedString^ OCPCollection_HExtendedString::SubString(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  Handle(PCollection_HExtendedString) tmp = (*((Handle_PCollection_HExtendedString*)nativeHandle))->SubString(FromIndex, ToIndex);
  return gcnew OCPCollection_HExtendedString(&tmp);
}

 Standard_Integer OCPCollection_HExtendedString::UsefullLength()
{
  return (*((Handle_PCollection_HExtendedString*)nativeHandle))->UsefullLength();
}

 Standard_ExtCharacter OCPCollection_HExtendedString::Value(Standard_Integer Index)
{
  return (*((Handle_PCollection_HExtendedString*)nativeHandle))->Value(Index);
}

 void OCPCollection_HExtendedString::ShallowDump(Standard_OStream& s)
{
  (*((Handle_PCollection_HExtendedString*)nativeHandle))->ShallowDump(s);
}


