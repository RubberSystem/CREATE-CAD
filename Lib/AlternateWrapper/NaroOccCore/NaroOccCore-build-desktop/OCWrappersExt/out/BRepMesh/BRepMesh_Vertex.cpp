// File generated by CPPExt (CPP file)
//

#include "BRepMesh_Vertex.h"
#include "../Converter.h"
#include "../gp/gp_XY.h"


using namespace OCNaroWrappers;

OCBRepMesh_Vertex::OCBRepMesh_Vertex(BRepMesh_Vertex* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepMesh_Vertex::OCBRepMesh_Vertex() 
{
  nativeHandle = new BRepMesh_Vertex();
}

OCBRepMesh_Vertex::OCBRepMesh_Vertex(OCNaroWrappers::OCgp_XY^ UV, Standard_Integer Locat3d, OCBRepMesh_DegreeOfFreedom Move) 
{
  nativeHandle = new BRepMesh_Vertex(*((gp_XY*)UV->Handle), Locat3d, (BRepMesh_DegreeOfFreedom)Move);
}

OCBRepMesh_Vertex::OCBRepMesh_Vertex(Standard_Real U, Standard_Real V, OCBRepMesh_DegreeOfFreedom Move) 
{
  nativeHandle = new BRepMesh_Vertex(U, V, (BRepMesh_DegreeOfFreedom)Move);
}

 void OCBRepMesh_Vertex::Initialize(OCNaroWrappers::OCgp_XY^ UV, Standard_Integer Locat3d, OCBRepMesh_DegreeOfFreedom Move)
{
  ((BRepMesh_Vertex*)nativeHandle)->Initialize(*((gp_XY*)UV->Handle), Locat3d, (BRepMesh_DegreeOfFreedom)Move);
}

OCgp_XY^ OCBRepMesh_Vertex::Coord()
{
  gp_XY* tmp = new gp_XY();
  *tmp = ((BRepMesh_Vertex*)nativeHandle)->Coord();
  return gcnew OCgp_XY(tmp);
}

 Standard_Integer OCBRepMesh_Vertex::Location3d()
{
  return ((BRepMesh_Vertex*)nativeHandle)->Location3d();
}

 OCBRepMesh_DegreeOfFreedom OCBRepMesh_Vertex::Movability()
{
  return (OCBRepMesh_DegreeOfFreedom)(((BRepMesh_Vertex*)nativeHandle)->Movability());
}

 void OCBRepMesh_Vertex::SetMovability(OCBRepMesh_DegreeOfFreedom Move)
{
  ((BRepMesh_Vertex*)nativeHandle)->SetMovability((BRepMesh_DegreeOfFreedom)Move);
}

 Standard_Integer OCBRepMesh_Vertex::HashCode(Standard_Integer Upper)
{
  return ((BRepMesh_Vertex*)nativeHandle)->HashCode(Upper);
}

 System::Boolean OCBRepMesh_Vertex::IsEqual(OCNaroWrappers::OCBRepMesh_Vertex^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((BRepMesh_Vertex*)nativeHandle)->IsEqual(*((BRepMesh_Vertex*)Other->Handle)));
}


