// File generated by CPPExt (CPP file)
//

#include "BRepMesh_Delaun.h"
#include "../Converter.h"
#include "BRepMesh_DataStructureOfDelaun.h"
#include "BRepMesh_Array1OfVertexOfDelaun.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "BRepMesh_Vertex.h"
#include "BRepMesh_Edge.h"
#include "BRepMesh_Triangle.h"
#include "../Bnd/Bnd_Box2d.h"
#include "../TColStd/TColStd_SequenceOfInteger.h"
#include "../TColStd/TColStd_MapOfInteger.h"


using namespace OCNaroWrappers;

OCBRepMesh_Delaun::OCBRepMesh_Delaun(BRepMesh_Delaun* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepMesh_Delaun::OCBRepMesh_Delaun(OCNaroWrappers::OCBRepMesh_Array1OfVertexOfDelaun^ Vertices, System::Boolean ZPositive) 
{
  nativeHandle = new BRepMesh_Delaun(*((BRepMesh_Array1OfVertexOfDelaun*)Vertices->Handle), OCConverter::BooleanToStandardBoolean(ZPositive));
}

OCBRepMesh_Delaun::OCBRepMesh_Delaun(OCNaroWrappers::OCBRepMesh_DataStructureOfDelaun^ OldMesh, OCNaroWrappers::OCBRepMesh_Array1OfVertexOfDelaun^ Vertices, System::Boolean ZPositive) 
{
  nativeHandle = new BRepMesh_Delaun(*((Handle_BRepMesh_DataStructureOfDelaun*)OldMesh->Handle), *((BRepMesh_Array1OfVertexOfDelaun*)Vertices->Handle), OCConverter::BooleanToStandardBoolean(ZPositive));
}

OCBRepMesh_Delaun::OCBRepMesh_Delaun(OCNaroWrappers::OCBRepMesh_DataStructureOfDelaun^ OldMesh, OCNaroWrappers::OCTColStd_Array1OfInteger^ VertexIndices, System::Boolean ZPositive) 
{
  nativeHandle = new BRepMesh_Delaun(*((Handle_BRepMesh_DataStructureOfDelaun*)OldMesh->Handle), *((TColStd_Array1OfInteger*)VertexIndices->Handle), OCConverter::BooleanToStandardBoolean(ZPositive));
}

 void OCBRepMesh_Delaun::RemoveVertex(OCNaroWrappers::OCBRepMesh_Vertex^ theVertex)
{
  ((BRepMesh_Delaun*)nativeHandle)->RemoveVertex(*((BRepMesh_Vertex*)theVertex->Handle));
}

 void OCBRepMesh_Delaun::AddVertices(OCNaroWrappers::OCBRepMesh_Array1OfVertexOfDelaun^ Vertices)
{
  ((BRepMesh_Delaun*)nativeHandle)->AddVertices(*((BRepMesh_Array1OfVertexOfDelaun*)Vertices->Handle));
}

 System::Boolean OCBRepMesh_Delaun::UseEdge(Standard_Integer theEdge)
{
  return OCConverter::StandardBooleanToBoolean(((BRepMesh_Delaun*)nativeHandle)->UseEdge(theEdge));
}

OCBRepMesh_DataStructureOfDelaun^ OCBRepMesh_Delaun::Result()
{
  Handle(BRepMesh_DataStructureOfDelaun) tmp = ((BRepMesh_Delaun*)nativeHandle)->Result();
  return gcnew OCBRepMesh_DataStructureOfDelaun(&tmp);
}

 BRepMesh_MapOfInteger& OCBRepMesh_Delaun::Frontier()
{
  return ((BRepMesh_Delaun*)nativeHandle)->Frontier();
}

 BRepMesh_MapOfInteger& OCBRepMesh_Delaun::InternalEdges()
{
  return ((BRepMesh_Delaun*)nativeHandle)->InternalEdges();
}

 BRepMesh_MapOfInteger& OCBRepMesh_Delaun::FreeEdges()
{
  return ((BRepMesh_Delaun*)nativeHandle)->FreeEdges();
}

OCBRepMesh_Vertex^ OCBRepMesh_Delaun::GetVertex(Standard_Integer vIndex)
{
  BRepMesh_Vertex* tmp = new BRepMesh_Vertex();
  *tmp = ((BRepMesh_Delaun*)nativeHandle)->GetVertex(vIndex);
  return gcnew OCBRepMesh_Vertex(tmp);
}

OCBRepMesh_Edge^ OCBRepMesh_Delaun::GetEdge(Standard_Integer eIndex)
{
  BRepMesh_Edge* tmp = new BRepMesh_Edge();
  *tmp = ((BRepMesh_Delaun*)nativeHandle)->GetEdge(eIndex);
  return gcnew OCBRepMesh_Edge(tmp);
}

OCBRepMesh_Triangle^ OCBRepMesh_Delaun::GetTriangle(Standard_Integer tIndex)
{
  BRepMesh_Triangle* tmp = new BRepMesh_Triangle();
  *tmp = ((BRepMesh_Delaun*)nativeHandle)->GetTriangle(tIndex);
  return gcnew OCBRepMesh_Triangle(tmp);
}

 void OCBRepMesh_Delaun::Init(OCNaroWrappers::OCBRepMesh_Array1OfVertexOfDelaun^ Vertices)
{
  ((BRepMesh_Delaun*)nativeHandle)->Init(*((BRepMesh_Array1OfVertexOfDelaun*)Vertices->Handle));
}

 void OCBRepMesh_Delaun::Compute(OCNaroWrappers::OCTColStd_Array1OfInteger^ VertexIndices)
{
  ((BRepMesh_Delaun*)nativeHandle)->Compute(*((TColStd_Array1OfInteger*)VertexIndices->Handle));
}

 void OCBRepMesh_Delaun::SuperMesh(OCNaroWrappers::OCBnd_Box2d^ theBox)
{
  ((BRepMesh_Delaun*)nativeHandle)->SuperMesh(*((Bnd_Box2d*)theBox->Handle));
}

 System::Boolean OCBRepMesh_Delaun::Contains(Standard_Integer TrianIndex, OCNaroWrappers::OCBRepMesh_Vertex^ theVertex, Standard_Integer& edgeOn)
{
  return OCConverter::StandardBooleanToBoolean(((BRepMesh_Delaun*)nativeHandle)->Contains(TrianIndex, *((BRepMesh_Vertex*)theVertex->Handle), edgeOn));
}


