// File generated by CPPExt (Transient)
//
#ifndef _BRepMesh_DataStructureOfDelaun_OCWrappers_HeaderFile
#define _BRepMesh_DataStructureOfDelaun_OCWrappers_HeaderFile

// include the wrapped class
#include <BRepMesh_DataStructureOfDelaun.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "BRepMesh_VertexTool.h"
#include "BRepMesh_IDMapOfLinkOfDataStructureOfDelaun.h"
#include "BRepMesh_IMapOfElementOfDataStructureOfDelaun.h"


namespace OCNaroWrappers
{

ref class OCBRepMesh_Vertex;
ref class OCBRepMesh_VertexTool;
ref class OCBRepMesh_Edge;
ref class OCBRepMesh_Triangle;


//! Describes  the data structure  necessary  for  the <br>
//!          mesh  algorithms  in  two  dimensions  plane or on <br>
//!          surface by meshing in UV space. <br>
public ref class OCBRepMesh_DataStructureOfDelaun : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCBRepMesh_DataStructureOfDelaun(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepMesh_DataStructureOfDelaun(Handle(BRepMesh_DataStructureOfDelaun)* nativeHandle);

// Methods PUBLIC

//! <NodeNumber>   is just  an   evaluation of the <br>
//!          presumed  number of nodes  in this mesh.   The <br>
//!          Mesh   data  structure will   be automatically <br>
//!          redimensioned if necessary. <br>
OCBRepMesh_DataStructureOfDelaun(BRepMesh_BaseAllocator theAllocator, Standard_Integer NodeNumber);

//! Adds a node to the  mesh  if  the node is  not <br>
//!          already in the Mesh.  Returns the index of the <br>
//!          node in the structure. <br>
 /*instead*/  Standard_Integer AddNode(OCNaroWrappers::OCBRepMesh_Vertex^ theNode) ;

//! Get the value of node <Index>. <br>
 /*instead*/  OCBRepMesh_Vertex^ GetNode(Standard_Integer Index) ;

//! Get the list of node <Index>. <br>
 /*instead*/  BRepMesh_ListOfInteger& GetNodeList(Standard_Integer Index) ;

//! Removes the node of index <index> from the mesh. <br>
 /*instead*/  void ForceRemoveNode(Standard_Integer Index) ;

//! Removes the link of index <index> from the mesh. <br>
 /*instead*/  void ForceRemoveLink(Standard_Integer Index) ;

//! Removes the all nodes and sets new map of <br>
//! nodes from the mesh. <br>
//! For internal use only. <br>
 /*instead*/  void ReplaceNodes(OCNaroWrappers::OCBRepMesh_VertexTool^ NewNodes) ;

//! Removes the node of index <index> from the mesh. <br>
 /*instead*/  void RemoveNode(Standard_Integer Index) ;

//! Changes the UV  value of node of index <Index>  by <br>
//!          <newNode>. Returns false if <newnode> is already in <br>
//!          the structure. <br>
 /*instead*/  System::Boolean MoveNode(Standard_Integer Index, OCNaroWrappers::OCBRepMesh_Vertex^ newNode) ;

//! Gives the number of nodes in this mesh. <br>
 /*instead*/  Standard_Integer NbNodes() ;

//! Adds a Link  to the  mesh if  the Link is  not <br>
//!          already in the structure. Returns the index of <br>
//!          the link in the structure. <br>
 /*instead*/  Standard_Integer AddLink(OCNaroWrappers::OCBRepMesh_Edge^ theLink) ;

//! Get the value of Link <Index>. <br>
 /*instead*/  OCBRepMesh_Edge^ GetLink(Standard_Integer Index) ;

//! Removes the Link of  index  <Index> from the <br>
//!          mesh. <br>
 /*instead*/  void RemoveLink(Standard_Integer Index) ;

//! Substitutes  the  Link  of  index  <Index>  by <br>
//!          <newLink> clear the connectivity. <br>
 /*instead*/  System::Boolean SubstituteLink(Standard_Integer Index, OCNaroWrappers::OCBRepMesh_Edge^ newLink) ;

//! Gives the number of elements in this mesh. <br>
 /*instead*/  Standard_Integer NbLinks() ;

//! Adds an element  to  the mesh  if it    is not <br>
//!          already in the  Mesh. Returns the index of the <br>
//!          element in the structure. <br>
 /*instead*/  Standard_Integer AddElement(OCNaroWrappers::OCBRepMesh_Triangle^ theElement) ;

//! Get the value of Element <Index>. <br>
 /*instead*/  OCBRepMesh_Triangle^ GetElement(Standard_Integer Index) ;

//! Removes the element of index <Index> in the mesh. <br>
 /*instead*/  void RemoveElement(Standard_Integer Index) ;

//! Substitutes  the  element   of  index  <Index>  by <br>
//!          <newElement>. The links connectivity is updated. <br>
 /*instead*/  System::Boolean SubstituteElement(Standard_Integer Index, OCNaroWrappers::OCBRepMesh_Triangle^ newElement) ;

//! Gives the number of elements in this mesh. <br>
 /*instead*/  Standard_Integer NbElements() ;

//!  Removes all elements <br>
 /*instead*/  void ClearDomain() ;

//! Finds the index of the node.  Returns 0 if the <br>
//!          node is not in the mesh. <br>
 /*instead*/  Standard_Integer IndexOf(OCNaroWrappers::OCBRepMesh_Vertex^ aNode) ;

//! Finds the index of the Link.  Returns 0 if the <br>
//!          Link is not in the mesh. <br>
 /*instead*/  Standard_Integer IndexOf(OCNaroWrappers::OCBRepMesh_Edge^ aLink) ;

//! Finds the index  of the Element.  Returns 0 if <br>
//!          the Element is not in the mesh. <br>
 /*instead*/  Standard_Integer IndexOf(OCNaroWrappers::OCBRepMesh_Triangle^ anElement) ;

//! Gives the list of  Link's indices handling the <br>
//!          node <theNode>. <br>
 /*instead*/  BRepMesh_ListOfInteger& LinkNeighboursOf(Standard_Integer theNode) ;

//! Gives the element's indices conected <br>
//!          to <theLink>. <br>
 /*instead*/  BRepMesh_PairOfIndex& ElemConnectedTo(Standard_Integer theLink) ;

//! Gives  the  list  of element's indices <br>
 /*instead*/  BRepMesh_MapOfInteger& ElemOfDomain() ;

//! Gives  the  list  of link's indices <br>
 /*instead*/  BRepMesh_MapOfInteger& LinkOfDomain() ;

//! This method  substitute the deleted  items  by <br>
//!          the last in  Indexed Data  Maps  to  have only <br>
//!          non-deleted  elements, links  or  nodes in the <br>
//!          structure. <br>
 /*instead*/  void ClearDeleted() ;

//! Give informations on map. <br>
 /*instead*/  void Statistics(Standard_OStream& flot) ;


 /*instead*/  BRepMesh_BaseAllocator& Allocator() ;

//! Give the data structure for cell size and <br>
//!          tolerance initialization. <br>
 /*instead*/  OCBRepMesh_VertexTool^ Data() ;

~OCBRepMesh_DataStructureOfDelaun()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
