// File generated by CPPExt (CPP file)
//

#include "BRepMesh_ShapeTool.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../Bnd/Bnd_Box.h"
#include "../gp/gp_Pnt2d.h"
#include "../BRepAdaptor/BRepAdaptor_Curve.h"
#include "../gp/gp_Pnt.h"
#include "../Poly/Poly_Triangulation.h"


using namespace OCNaroWrappers;

OCBRepMesh_ShapeTool::OCBRepMesh_ShapeTool(BRepMesh_ShapeTool* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepMesh_ShapeTool::OCBRepMesh_ShapeTool() 
{
  nativeHandle = new BRepMesh_ShapeTool();
}

 void OCBRepMesh_ShapeTool::Init(OCNaroWrappers::OCTopoDS_Shape^ S)
{
  ((BRepMesh_ShapeTool*)nativeHandle)->Init(*((TopoDS_Shape*)S->Handle));
}

 System::Boolean OCBRepMesh_ShapeTool::MoreFace()
{
  return OCConverter::StandardBooleanToBoolean(((BRepMesh_ShapeTool*)nativeHandle)->MoreFace());
}

 void OCBRepMesh_ShapeTool::NextFace()
{
  ((BRepMesh_ShapeTool*)nativeHandle)->NextFace();
}

OCTopoDS_Face^ OCBRepMesh_ShapeTool::CurrentFace()
{
  TopoDS_Face* tmp = new TopoDS_Face();
  *tmp = ((BRepMesh_ShapeTool*)nativeHandle)->CurrentFace();
  return gcnew OCTopoDS_Face(tmp);
}

 void OCBRepMesh_ShapeTool::Init(OCNaroWrappers::OCTopoDS_Face^ F)
{
  ((BRepMesh_ShapeTool*)nativeHandle)->Init(*((TopoDS_Face*)F->Handle));
}

 System::Boolean OCBRepMesh_ShapeTool::MoreEdge()
{
  return OCConverter::StandardBooleanToBoolean(((BRepMesh_ShapeTool*)nativeHandle)->MoreEdge());
}

 void OCBRepMesh_ShapeTool::NextEdge()
{
  ((BRepMesh_ShapeTool*)nativeHandle)->NextEdge();
}

OCTopoDS_Edge^ OCBRepMesh_ShapeTool::CurrentEdge()
{
  TopoDS_Edge* tmp = new TopoDS_Edge();
  *tmp = ((BRepMesh_ShapeTool*)nativeHandle)->CurrentEdge();
  return gcnew OCTopoDS_Edge(tmp);
}

 void OCBRepMesh_ShapeTool::Init(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  ((BRepMesh_ShapeTool*)nativeHandle)->Init(*((TopoDS_Edge*)E->Handle));
}

 System::Boolean OCBRepMesh_ShapeTool::MoreInternalVertex()
{
  return OCConverter::StandardBooleanToBoolean(((BRepMesh_ShapeTool*)nativeHandle)->MoreInternalVertex());
}

 void OCBRepMesh_ShapeTool::NextInternalVertex()
{
  ((BRepMesh_ShapeTool*)nativeHandle)->NextInternalVertex();
}

OCTopoDS_Vertex^ OCBRepMesh_ShapeTool::CurrentInternalVertex()
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = ((BRepMesh_ShapeTool*)nativeHandle)->CurrentInternalVertex();
  return gcnew OCTopoDS_Vertex(tmp);
}

 OCTopAbs_Orientation OCBRepMesh_ShapeTool::Orientation(OCNaroWrappers::OCTopoDS_Face^ F)
{
  return (OCTopAbs_Orientation)(BRepMesh_ShapeTool::Orientation(*((TopoDS_Face*)F->Handle)));
}

 OCTopAbs_Orientation OCBRepMesh_ShapeTool::Orientation(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  return (OCTopAbs_Orientation)(BRepMesh_ShapeTool::Orientation(*((TopoDS_Edge*)E->Handle)));
}

OCBnd_Box^ OCBRepMesh_ShapeTool::Bound(OCNaroWrappers::OCTopoDS_Face^ F)
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = BRepMesh_ShapeTool::Bound(*((TopoDS_Face*)F->Handle));
  return gcnew OCBnd_Box(tmp);
}

OCBnd_Box^ OCBRepMesh_ShapeTool::Bound(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = BRepMesh_ShapeTool::Bound(*((TopoDS_Edge*)E->Handle));
  return gcnew OCBnd_Box(tmp);
}

OCTopoDS_Vertex^ OCBRepMesh_ShapeTool::FirstVertex(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = BRepMesh_ShapeTool::FirstVertex(*((TopoDS_Edge*)E->Handle));
  return gcnew OCTopoDS_Vertex(tmp);
}

OCTopoDS_Vertex^ OCBRepMesh_ShapeTool::LastVertex(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = BRepMesh_ShapeTool::LastVertex(*((TopoDS_Edge*)E->Handle));
  return gcnew OCTopoDS_Vertex(tmp);
}

 void OCBRepMesh_ShapeTool::Vertices(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Vertex^ Vfirst, OCNaroWrappers::OCTopoDS_Vertex^ Vlast)
{
  BRepMesh_ShapeTool::Vertices(*((TopoDS_Edge*)E->Handle), *((TopoDS_Vertex*)Vfirst->Handle), *((TopoDS_Vertex*)Vlast->Handle));
}

 void OCBRepMesh_ShapeTool::Range(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real& wFirst, Standard_Real& wLast)
{
  BRepMesh_ShapeTool::Range(*((TopoDS_Edge*)E->Handle), *((TopoDS_Face*)F->Handle), wFirst, wLast);
}

 void OCBRepMesh_ShapeTool::UVPoints(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCgp_Pnt2d^ uvFirst, OCNaroWrappers::OCgp_Pnt2d^ uvLast)
{
  BRepMesh_ShapeTool::UVPoints(*((TopoDS_Edge*)E->Handle), *((TopoDS_Face*)F->Handle), *((gp_Pnt2d*)uvFirst->Handle), *((gp_Pnt2d*)uvLast->Handle));
}

 System::Boolean OCBRepMesh_ShapeTool::Degenerated(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  return OCConverter::StandardBooleanToBoolean(BRepMesh_ShapeTool::Degenerated(*((TopoDS_Edge*)E->Handle)));
}

 Standard_Real OCBRepMesh_ShapeTool::Tolerance(OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  return BRepMesh_ShapeTool::Tolerance(*((TopoDS_Vertex*)V->Handle));
}

 Standard_Real OCBRepMesh_ShapeTool::Parameter(OCNaroWrappers::OCTopoDS_Vertex^ V, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F)
{
  return BRepMesh_ShapeTool::Parameter(*((TopoDS_Vertex*)V->Handle), *((TopoDS_Edge*)E->Handle), *((TopoDS_Face*)F->Handle));
}

 void OCBRepMesh_ShapeTool::Parameters(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real W, OCNaroWrappers::OCgp_Pnt2d^ UV)
{
  BRepMesh_ShapeTool::Parameters(*((TopoDS_Edge*)E->Handle), *((TopoDS_Face*)F->Handle), W, *((gp_Pnt2d*)UV->Handle));
}

 void OCBRepMesh_ShapeTool::Locate(OCNaroWrappers::OCBRepAdaptor_Curve^ C, Standard_Real W, Standard_Real& WFound, OCNaroWrappers::OCgp_Pnt^ p3d, OCNaroWrappers::OCgp_Pnt2d^ UV)
{
  BRepMesh_ShapeTool::Locate(*((BRepAdaptor_Curve*)C->Handle), W, WFound, *((gp_Pnt*)p3d->Handle), *((gp_Pnt2d*)UV->Handle));
}

OCgp_Pnt^ OCBRepMesh_ShapeTool::Pnt(OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = BRepMesh_ShapeTool::Pnt(*((TopoDS_Vertex*)V->Handle));
  return gcnew OCgp_Pnt(tmp);
}

 void OCBRepMesh_ShapeTool::AddInFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCPoly_Triangulation^ T)
{
  BRepMesh_ShapeTool::AddInFace(*((TopoDS_Face*)F->Handle), *((Handle_Poly_Triangulation*)T->Handle));
}


