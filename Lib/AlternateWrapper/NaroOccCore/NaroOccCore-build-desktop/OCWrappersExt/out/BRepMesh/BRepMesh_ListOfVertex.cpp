// File generated by CPPExt (CPP file)
//

#include "BRepMesh_ListOfVertex.h"
#include "../Converter.h"
#include "BRepMesh_ListIteratorOfListOfVertex.h"
#include "BRepMesh_Vertex.h"
#include "BRepMesh_ListNodeOfListOfVertex.h"


using namespace OCNaroWrappers;

OCBRepMesh_ListOfVertex::OCBRepMesh_ListOfVertex(BRepMesh_ListOfVertex* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBRepMesh_ListOfVertex::OCBRepMesh_ListOfVertex() 
{
  nativeHandle = new BRepMesh_ListOfVertex();
}

 void OCBRepMesh_ListOfVertex::Assign(OCNaroWrappers::OCBRepMesh_ListOfVertex^ Other)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->Assign(*((BRepMesh_ListOfVertex*)Other->Handle));
}

 Standard_Integer OCBRepMesh_ListOfVertex::Extent()
{
  return ((BRepMesh_ListOfVertex*)nativeHandle)->Extent();
}

 System::Boolean OCBRepMesh_ListOfVertex::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((BRepMesh_ListOfVertex*)nativeHandle)->IsEmpty());
}

 void OCBRepMesh_ListOfVertex::Prepend(OCNaroWrappers::OCBRepMesh_Vertex^ I)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->Prepend(*((BRepMesh_Vertex*)I->Handle));
}

 void OCBRepMesh_ListOfVertex::Prepend(OCNaroWrappers::OCBRepMesh_Vertex^ I, OCNaroWrappers::OCBRepMesh_ListIteratorOfListOfVertex^ theIt)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->Prepend(*((BRepMesh_Vertex*)I->Handle), *((BRepMesh_ListIteratorOfListOfVertex*)theIt->Handle));
}

 void OCBRepMesh_ListOfVertex::Prepend(OCNaroWrappers::OCBRepMesh_ListOfVertex^ Other)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->Prepend(*((BRepMesh_ListOfVertex*)Other->Handle));
}

 void OCBRepMesh_ListOfVertex::Append(OCNaroWrappers::OCBRepMesh_Vertex^ I)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->Append(*((BRepMesh_Vertex*)I->Handle));
}

 void OCBRepMesh_ListOfVertex::Append(OCNaroWrappers::OCBRepMesh_Vertex^ I, OCNaroWrappers::OCBRepMesh_ListIteratorOfListOfVertex^ theIt)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->Append(*((BRepMesh_Vertex*)I->Handle), *((BRepMesh_ListIteratorOfListOfVertex*)theIt->Handle));
}

 void OCBRepMesh_ListOfVertex::Append(OCNaroWrappers::OCBRepMesh_ListOfVertex^ Other)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->Append(*((BRepMesh_ListOfVertex*)Other->Handle));
}

OCBRepMesh_Vertex^ OCBRepMesh_ListOfVertex::First()
{
  BRepMesh_Vertex* tmp = new BRepMesh_Vertex();
  *tmp = ((BRepMesh_ListOfVertex*)nativeHandle)->First();
  return gcnew OCBRepMesh_Vertex(tmp);
}

OCBRepMesh_Vertex^ OCBRepMesh_ListOfVertex::Last()
{
  BRepMesh_Vertex* tmp = new BRepMesh_Vertex();
  *tmp = ((BRepMesh_ListOfVertex*)nativeHandle)->Last();
  return gcnew OCBRepMesh_Vertex(tmp);
}

 void OCBRepMesh_ListOfVertex::RemoveFirst()
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->RemoveFirst();
}

 void OCBRepMesh_ListOfVertex::Remove(OCNaroWrappers::OCBRepMesh_ListIteratorOfListOfVertex^ It)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->Remove(*((BRepMesh_ListIteratorOfListOfVertex*)It->Handle));
}

 void OCBRepMesh_ListOfVertex::InsertBefore(OCNaroWrappers::OCBRepMesh_Vertex^ I, OCNaroWrappers::OCBRepMesh_ListIteratorOfListOfVertex^ It)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->InsertBefore(*((BRepMesh_Vertex*)I->Handle), *((BRepMesh_ListIteratorOfListOfVertex*)It->Handle));
}

 void OCBRepMesh_ListOfVertex::InsertBefore(OCNaroWrappers::OCBRepMesh_ListOfVertex^ Other, OCNaroWrappers::OCBRepMesh_ListIteratorOfListOfVertex^ It)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->InsertBefore(*((BRepMesh_ListOfVertex*)Other->Handle), *((BRepMesh_ListIteratorOfListOfVertex*)It->Handle));
}

 void OCBRepMesh_ListOfVertex::InsertAfter(OCNaroWrappers::OCBRepMesh_Vertex^ I, OCNaroWrappers::OCBRepMesh_ListIteratorOfListOfVertex^ It)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->InsertAfter(*((BRepMesh_Vertex*)I->Handle), *((BRepMesh_ListIteratorOfListOfVertex*)It->Handle));
}

 void OCBRepMesh_ListOfVertex::InsertAfter(OCNaroWrappers::OCBRepMesh_ListOfVertex^ Other, OCNaroWrappers::OCBRepMesh_ListIteratorOfListOfVertex^ It)
{
  ((BRepMesh_ListOfVertex*)nativeHandle)->InsertAfter(*((BRepMesh_ListOfVertex*)Other->Handle), *((BRepMesh_ListIteratorOfListOfVertex*)It->Handle));
}


