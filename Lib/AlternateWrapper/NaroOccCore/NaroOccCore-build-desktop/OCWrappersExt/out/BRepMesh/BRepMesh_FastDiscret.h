// File generated by CPPExt (Transient)
//
#ifndef _BRepMesh_FastDiscret_OCWrappers_HeaderFile
#define _BRepMesh_FastDiscret_OCWrappers_HeaderFile

// include the wrapped class
#include <BRepMesh_FastDiscret.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "BRepMesh_DataMapOfVertexInteger.h"
#include "BRepMesh_DataMapOfShapePairOfPolygon.h"
#include "BRepMesh_DataMapOfIntegerPnt.h"
#include "BRepMesh_DataMapOfFaceAttribute.h"
#include "../TColStd/TColStd_IndexedMapOfInteger.h"
#include "BRepMesh_DataMapOfIntegerListOfXY.h"
#include "../TopTools/TopTools_DataMapOfShapeReal.h"
#include "../TopTools/TopTools_ListOfShape.h"
#include "../TopAbs/TopAbs_ShapeEnum.h"


namespace OCNaroWrappers
{

ref class OCBRepMesh_DataStructureOfDelaun;
ref class OCBnd_Box;
ref class OCTopoDS_Shape;
ref class OCTopoDS_Face;
ref class OCTopTools_IndexedDataMapOfShapeListOfShape;
ref class OCTopoDS_Edge;
ref class OCBRepAdaptor_HSurface;
ref class OCGeom2d_Curve;
ref class OCTopoDS_Vertex;
ref class OCBRepMesh_ListOfVertex;
ref class OCTColStd_ListOfInteger;
ref class OCBRepMesh_Delaun;
ref class OCBRepMesh_Triangle;
ref class OCBRepMesh_Edge;
ref class OCBRepMesh_Vertex;
ref class OCgp_Pnt;
ref class OCBRepMesh_FaceAttribute;
ref class OCTopTools_DataMapOfShapeReal;


//! Algorithm  to mesh  a shape  with  respect of  the <br>
//!          frontier the deflection  and by option the  shared <br>
//!          components. <br>
public ref class OCBRepMesh_FastDiscret : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCBRepMesh_FastDiscret(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepMesh_FastDiscret(Handle(BRepMesh_FastDiscret)* nativeHandle);

// Methods PUBLIC


OCBRepMesh_FastDiscret(Standard_Real defle, Standard_Real angle, OCNaroWrappers::OCBnd_Box^ B, System::Boolean withShare, System::Boolean inshape, System::Boolean relative, System::Boolean shapetrigu);

//! if the  boolean    <relative>   is  True,    the <br>
//!          deflection used   for the polygonalisation   of <br>
//!          each edge will be <defle> * Size of Edge. <br>
//!          the deflection used for the faces will be the maximum <br>
//!          deflection of their edges. <br>
//! <br>
//!          if <shapetrigu> is True, the triangulation, if exists <br>
//!          with a correct deflection, can be used to re-triangulate <br>
//!          the shape. <br>
//! <br>
//!          if   <inshape>   is   True, the      calculated <br>
//!          triangulation will be stored in the shape. <br>
OCBRepMesh_FastDiscret(Standard_Real defle, OCNaroWrappers::OCTopoDS_Shape^ shape, OCNaroWrappers::OCBnd_Box^ B, Standard_Real angle, System::Boolean withShare, System::Boolean inshape, System::Boolean relative, System::Boolean shapetrigu);

//! Build triangulation on the whole shape <br>
 /*instead*/  void Perform(OCNaroWrappers::OCTopoDS_Shape^ shape) ;

//! Record a face for further processing. <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Face^ face, OCNaroWrappers::OCTopTools_IndexedDataMapOfShapeListOfShape^ ancestor) ;

//! Triangulate a face previously recorded for <br>
//!          processing by call to Add(). Can be executed in <br>
//!          parallel threads. <br>
 /*instead*/  void Process(OCNaroWrappers::OCTopoDS_Face^ face) ;


 /*instead*/  BRepMesh_Status CurrentFaceStatus() ;

//! Returns computed relative deflection for edge <br>
static /*instead*/  Standard_Real RelativeEdgeDeflection(OCNaroWrappers::OCTopoDS_Edge^ edge, Standard_Real defle, Standard_Real dtotale, Standard_Real& cdef) ;

//! Returns the maximal dimension of Bnd_Box <br>
static /*instead*/  void BoxMaxDimension(OCNaroWrappers::OCBnd_Box^ box, Standard_Real& maxdim) ;


//! Request algorithm to launch in multiple threads <br>
//! to improve performance (should be supported by plugin). <br>
 /*instead*/  void SetParallel(System::Boolean theInParallel) ;


//! Returns the multi-threading usage flag. <br>
 /*instead*/  System::Boolean IsParallel() ;


//! Creates mutexes for each sub-shape of type theType in theShape. <br>
//! Used to avoid data races. <br>
 /*instead*/  void CreateMutexesForSubShapes(OCNaroWrappers::OCTopoDS_Shape^ theShape, OCTopAbs_ShapeEnum theType) ;


//! Removes all created mutexes <br>
 /*instead*/  void RemoveAllMutexes() ;

//! Gives the number of built triangles. <br>
 /*instead*/  Standard_Integer NbTriangles() ;

//! Gives the triangle of <Index>. <br>
 /*instead*/  OCBRepMesh_Triangle^ Triangle(Standard_Integer Index) ;

//! Gives the number of built Edges <br>
 /*instead*/  Standard_Integer NbEdges() ;

//! Gives the edge of index <Index>. <br>
 /*instead*/  OCBRepMesh_Edge^ Edge(Standard_Integer Index) ;

//! Gives the number of built Vertices. <br>
 /*instead*/  Standard_Integer NbVertices() ;

//! Gives the vertex of <Index>. <br>
 /*instead*/  OCBRepMesh_Vertex^ Vertex(Standard_Integer Index) ;

//! Gives the location3d of the vertex of <Index>. <br>
 /*instead*/  OCgp_Pnt^ Pnt(Standard_Integer Index) ;

//! Gives the list of indices of the vertices <br>
 /*instead*/  void VerticesOfDomain(BRepMesh_MapOfInteger& Indices) ;

//! Gives the list of indices of the edges <br>
 /*instead*/  void EdgesOfDomain(BRepMesh_MapOfInteger& Indices) ;

//! Gives the list of indices of the triangles <br>
 /*instead*/  void TrianglesOfDomain(BRepMesh_MapOfInteger& Indices) ;

//! Gives the  number of different  location in 3d <br>
//!          space.  It  is  different    of the number  of <br>
//!          vertices if there is more than one surface. <br>
//!          Even for one surface, the number can be different <br>
//!          if an edge is shared. <br>
 /*instead*/  Standard_Integer NbPoint3d() ;

//! Gives the 3d space location of the vertex <Index>. <br>
 /*instead*/  OCgp_Pnt^ Point3d(Standard_Integer Index) ;

//! returns the deflection value. <br>
 /*instead*/  Standard_Real GetDeflection() ;

//! returns the deflection value. <br>
 /*instead*/  Standard_Real GetAngle() ;


 /*instead*/  System::Boolean WithShare() ;


 /*instead*/  System::Boolean InShape() ;


 /*instead*/  System::Boolean ShapeTrigu() ;

//! returns the face deflection value. <br>
 /*instead*/  System::Boolean GetFaceAttribute(OCNaroWrappers::OCTopoDS_Face^ face, OCNaroWrappers::OCBRepMesh_FaceAttribute^ fattrib) ;

//! remove face attribute as useless to free locate memory <br>
 /*instead*/  void RemoveFaceAttribute(OCNaroWrappers::OCTopoDS_Face^ face) ;


 /*instead*/  OCTopTools_DataMapOfShapeReal^ GetMapOfDefEdge() ;

~OCBRepMesh_FastDiscret()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
