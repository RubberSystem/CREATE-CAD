// File generated by CPPExt (Transient)
//
#ifndef _BRepMesh_DiscretRoot_OCWrappers_HeaderFile
#define _BRepMesh_DiscretRoot_OCWrappers_HeaderFile

// include the wrapped class
#include <BRepMesh_DiscretRoot.hxx>
#include "../Converter.h"

#include "../Standard/Standard_Transient.h"

#include "../TopoDS/TopoDS_Shape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;



//! This is a common interface for meshing algorithms <br>
//! instantiated by Mesh Factory and implemented by plugins. <br>
public ref class OCBRepMesh_DiscretRoot : OCStandard_Transient {

protected:
  // dummy constructor;
  OCBRepMesh_DiscretRoot(OCDummy^) : OCStandard_Transient((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepMesh_DiscretRoot(Handle(BRepMesh_DiscretRoot)* nativeHandle);

// Methods PUBLIC


OCBRepMesh_DiscretRoot();


//! Setup linear deflection. <br>
 /*instead*/  void SetDeflection(Standard_Real theDeflection) ;


//! Returns linear deflection. <br>
 /*instead*/  Standard_Real Deflection() ;


//! Setup angular deflection. <br>
 /*instead*/  void SetAngle(Standard_Real theAngle) ;


//! Returns angular deflection. <br>
 /*instead*/  Standard_Real Angle() ;


//! Set the shape to triangulate. <br>
 /*instead*/  void SetShape(OCNaroWrappers::OCTopoDS_Shape^ theShape) ;


 /*instead*/  OCTopoDS_Shape^ Shape() ;


//! Returns true if triangualtion was performed and has success. <br>
 /*instead*/  System::Boolean IsDone() ;

~OCBRepMesh_DiscretRoot()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
