// File generated by CPPExt (Transient)
//
#ifndef _Prs3d_TextAspect_OCWrappers_HeaderFile
#define _Prs3d_TextAspect_OCWrappers_HeaderFile

// include the wrapped class
#include <Prs3d_TextAspect.hxx>
#include "../Converter.h"

#include "Prs3d_BasicAspect.h"

#include "../Graphic3d/Graphic3d_HorizontalTextAlignment.h"
#include "../Graphic3d/Graphic3d_VerticalTextAlignment.h"
#include "../Graphic3d/Graphic3d_TextPath.h"
#include "../Quantity/Quantity_NameOfColor.h"


namespace OCNaroWrappers
{

ref class OCGraphic3d_AspectText3d;
ref class OCQuantity_Color;


//! Defines the attributes when displaying a text. <br>
public ref class OCPrs3d_TextAspect : OCPrs3d_BasicAspect {

protected:
  // dummy constructor;
  OCPrs3d_TextAspect(OCDummy^) : OCPrs3d_BasicAspect((OCDummy^)nullptr) {};

public:

// constructor from native
OCPrs3d_TextAspect(Handle(Prs3d_TextAspect)* nativeHandle);

// Methods PUBLIC

//! Constructs an empty framework for defining display attributes of text. <br>
OCPrs3d_TextAspect();


 /*instead*/  void SetColor(OCNaroWrappers::OCQuantity_Color^ aColor) ;

//! Sets the color of the type used in text display. <br>
 /*instead*/  void SetColor(OCQuantity_NameOfColor aColor) ;

//! Sets the font used in text display. <br>
 /*instead*/  void SetFont(System::String^ aFont) ;

//! Returns the height-width ratio, also known as the expansion factor. <br>
 /*instead*/  void SetHeightWidthRatio(Standard_Real aRatio) ;

//! Sets the length of the box which text will occupy. <br>
 /*instead*/  void SetSpace(Quantity_Length aSpace) ;

//! Sets the height of the text. <br>
 /*instead*/  void SetHeight(Standard_Real aHeight) ;

//! Sets the angle <br>
 /*instead*/  void SetAngle(Quantity_PlaneAngle anAngle) ;

//! Returns the height of the text box. <br>
 /*instead*/  Standard_Real Height() ;

//! Returns the angle <br>
 /*instead*/  Quantity_PlaneAngle Angle() ;

//! Sets horizontal alignment of text. <br>
 /*instead*/  void SetHorizontalJustification(OCGraphic3d_HorizontalTextAlignment aJustification) ;

//! Sets the vertical alignment of text. <br>
 /*instead*/  void SetVerticalJustification(OCGraphic3d_VerticalTextAlignment aJustification) ;

//! Sets the orientation of text. <br>
 /*instead*/  void SetOrientation(OCGraphic3d_TextPath anOrientation) ;

//! Returns the horizontal alignment of the text. <br>
//! The range of values includes: <br>
//! -   left <br>
//! -   center <br>
//! -   right, and <br>
//! -   normal (justified). <br>
 /*instead*/  OCGraphic3d_HorizontalTextAlignment HorizontalJustification() ;

//! Returns the vertical alignment of the text. <br>
//! The range of values includes: <br>
//! -   normal <br>
//! -   top <br>
//! -   cap <br>
//! -   half <br>
//! -   base <br>
//! -   bottom <br>
 /*instead*/  OCGraphic3d_VerticalTextAlignment VerticalJustification() ;

//! Returns the orientation of the text. <br>
//! Text can be displayed in the following directions: <br>
//! -   up <br>
//! -   down <br>
//! -   left, or <br>
//! -   right <br>
 /*instead*/  OCGraphic3d_TextPath Orientation() ;

//! Returns the purely textual attributes used in the display of text. <br>
//! These include: <br>
//! -   color <br>
//! -   font <br>
//! -   height/width ratio, that is, the expansion factor, and <br>
//! -   space between characters. <br>
 /*instead*/  OCGraphic3d_AspectText3d^ Aspect() ;

~OCPrs3d_TextAspect()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
