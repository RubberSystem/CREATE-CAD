// File generated by CPPExt (CPP file)
//

#include "Prs3d_TextAspect.h"
#include "../Converter.h"
#include "../Graphic3d/Graphic3d_AspectText3d.h"
#include "../Quantity/Quantity_Color.h"


using namespace OCNaroWrappers;

OCPrs3d_TextAspect::OCPrs3d_TextAspect(Handle(Prs3d_TextAspect)* nativeHandle) : OCPrs3d_BasicAspect((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Prs3d_TextAspect(*nativeHandle);
}

OCPrs3d_TextAspect::OCPrs3d_TextAspect() : OCPrs3d_BasicAspect((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Prs3d_TextAspect(new Prs3d_TextAspect());
}

 void OCPrs3d_TextAspect::SetColor(OCNaroWrappers::OCQuantity_Color^ aColor)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetColor(*((Quantity_Color*)aColor->Handle));
}

 void OCPrs3d_TextAspect::SetColor(OCQuantity_NameOfColor aColor)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetColor((Quantity_NameOfColor)aColor);
}

 void OCPrs3d_TextAspect::SetFont(System::String^ aFont)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetFont(OCConverter::StringToStandardCString(aFont));
}

 void OCPrs3d_TextAspect::SetHeightWidthRatio(Standard_Real aRatio)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetHeightWidthRatio(aRatio);
}

 void OCPrs3d_TextAspect::SetSpace(Quantity_Length aSpace)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetSpace(aSpace);
}

 void OCPrs3d_TextAspect::SetHeight(Standard_Real aHeight)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetHeight(aHeight);
}

 void OCPrs3d_TextAspect::SetAngle(Quantity_PlaneAngle anAngle)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetAngle(anAngle);
}

 Standard_Real OCPrs3d_TextAspect::Height()
{
  return (*((Handle_Prs3d_TextAspect*)nativeHandle))->Height();
}

 Quantity_PlaneAngle OCPrs3d_TextAspect::Angle()
{
  return (*((Handle_Prs3d_TextAspect*)nativeHandle))->Angle();
}

 void OCPrs3d_TextAspect::SetHorizontalJustification(OCGraphic3d_HorizontalTextAlignment aJustification)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetHorizontalJustification((Graphic3d_HorizontalTextAlignment)aJustification);
}

 void OCPrs3d_TextAspect::SetVerticalJustification(OCGraphic3d_VerticalTextAlignment aJustification)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetVerticalJustification((Graphic3d_VerticalTextAlignment)aJustification);
}

 void OCPrs3d_TextAspect::SetOrientation(OCGraphic3d_TextPath anOrientation)
{
  (*((Handle_Prs3d_TextAspect*)nativeHandle))->SetOrientation((Graphic3d_TextPath)anOrientation);
}

 OCGraphic3d_HorizontalTextAlignment OCPrs3d_TextAspect::HorizontalJustification()
{
  return (OCGraphic3d_HorizontalTextAlignment)((*((Handle_Prs3d_TextAspect*)nativeHandle))->HorizontalJustification());
}

 OCGraphic3d_VerticalTextAlignment OCPrs3d_TextAspect::VerticalJustification()
{
  return (OCGraphic3d_VerticalTextAlignment)((*((Handle_Prs3d_TextAspect*)nativeHandle))->VerticalJustification());
}

 OCGraphic3d_TextPath OCPrs3d_TextAspect::Orientation()
{
  return (OCGraphic3d_TextPath)((*((Handle_Prs3d_TextAspect*)nativeHandle))->Orientation());
}

OCGraphic3d_AspectText3d^ OCPrs3d_TextAspect::Aspect()
{
  Handle(Graphic3d_AspectText3d) tmp = (*((Handle_Prs3d_TextAspect*)nativeHandle))->Aspect();
  return gcnew OCGraphic3d_AspectText3d(&tmp);
}


