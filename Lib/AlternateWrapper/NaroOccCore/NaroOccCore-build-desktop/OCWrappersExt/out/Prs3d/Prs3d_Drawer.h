// File generated by CPPExt (Transient)
//
#ifndef _Prs3d_Drawer_OCWrappers_HeaderFile
#define _Prs3d_Drawer_OCWrappers_HeaderFile

// include the wrapped class
#include <Prs3d_Drawer.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../Aspect/Aspect_TypeOfDeflection.h"


namespace OCNaroWrappers
{

ref class OCPrs3d_IsoAspect;
ref class OCPrs3d_LineAspect;
ref class OCPrs3d_TextAspect;
ref class OCPrs3d_ShadingAspect;
ref class OCPrs3d_PointAspect;
ref class OCPrs3d_PlaneAspect;
ref class OCPrs3d_ArrowAspect;
ref class OCPrs3d_DatumAspect;
ref class OCPrs3d_LengthAspect;
ref class OCPrs3d_AngleAspect;
ref class OCPrs3d_RadiusAspect;


//! A graphic attribute manager which governs how <br>
//! objects such as color, width, line thickness and <br>
//! deflection are displayed. <br>
//! Prs3d_Drawer is the mother class of AIS_Drawer. <br>
//! As such, it is its set functions which are called to <br>
//! modify display parameters. In the example below we <br>
//! can see that the AIS_Drawer is modified to set the <br>
//! value of the deviation coefficient using a method <br>
//! inherited from Prs3d_Drawer. <br>
public ref class OCPrs3d_Drawer : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCPrs3d_Drawer(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCPrs3d_Drawer(Handle(Prs3d_Drawer)* nativeHandle);

// Methods PUBLIC


OCPrs3d_Drawer();

//! Sets the type of chordal deflection. <br>
//! This indicates whether the deflection value is absolute <br>
//! or relative to the size of the object. <br>
virtual /*instead*/  void SetTypeOfDeflection(OCAspect_TypeOfDeflection aTypeOfDeflection) ;

//! Returns the type of chordal deflection. <br>
//! This indicates whether the deflection value is absolute <br>
//! or relative to the size of the object. <br>
virtual /*instead*/  OCAspect_TypeOfDeflection TypeOfDeflection() ;

//! Defines the maximal chordial deviation when drawing any curve; <br>
//!          Even if the type of deviation is set to TOD_Relative, <br>
//!          this value is used by: <br>
//! <br>
//!                   Prs3d_DeflectionCurve <br>
//!                   Prs3d_WFDeflectionSurface <br>
//!                   Prs3d_WFDeflectionRestrictedFace <br>
virtual /*instead*/  void SetMaximalChordialDeviation(Quantity_Length aChordialDeviation) ;

//! returns the maximal chordial deviation. Default value is 0.1 <br>
virtual /*instead*/  Quantity_Length MaximalChordialDeviation() ;

//! Sets the deviation coefficient aCoefficient. <br>
virtual /*instead*/  void SetDeviationCoefficient(Standard_Real aCoefficient) ;

//! Returns the deviation coefficient. <br>
virtual /*instead*/  Standard_Real DeviationCoefficient() ;

//! Sets the deviation coefficient aCoefficient for removal <br>
//! of hidden lines created by different viewpoints in <br>
//! different presentations. The Default value is 0.02. <br>
virtual /*instead*/  void SetHLRDeviationCoefficient(Standard_Real aCoefficient) ;

//! Returns the real number value of the hidden line <br>
//! removal deviation coefficient. <br>
virtual /*instead*/  Standard_Real HLRDeviationCoefficient() ;

//! Sets anAngle, the angle of maximum chordal <br>
//! deviation for removal of hidden lines created by <br>
//! different viewpoints in different presentations. The <br>
//! default value is 20*PI/180. <br>
virtual /*instead*/  void SetHLRAngle(Standard_Real anAngle) ;

//! Returns the real number value of the deviation angle <br>
//! in hidden line removal views. The default value is 20*PI/180. <br>
virtual /*instead*/  Standard_Real HLRAngle() ;

//! Sets deviation angle <br>
virtual /*instead*/  void SetDeviationAngle(Standard_Real anAngle) ;

//! Returns the value for deviation angle. <br>
virtual /*instead*/  Standard_Real DeviationAngle() ;

//! Sets the discretisation parameter d. <br>
virtual /*instead*/  void SetDiscretisation(Standard_Integer d) ;

//! Returns the discretisation setting. <br>
virtual /*instead*/  Standard_Integer Discretisation() ;

//! defines the maximum value allowed  for the first and last <br>
//!          parameters of an infinite curve. Default value: 500. <br>
virtual /*instead*/  void SetMaximalParameterValue(Standard_Real Value) ;

//! Sets the maximum value allowed for the first and last <br>
//! parameters of an infinite curve. By default, this value is 500000. <br>
virtual /*instead*/  Standard_Real MaximalParameterValue() ;

//! Sets IsoOnPlane on or off   by setting the parameter <br>
//! OnOff to true or false. <br>
virtual /*instead*/  void SetIsoOnPlane(System::Boolean OnOff) ;

//! Returns True if the drawing of isos on planes is enabled. <br>
virtual /*instead*/  System::Boolean IsoOnPlane() ;

//! Defines the attributes which are used when drawing an <br>
//!          U isoparametric curve of a face. Defines the number <br>
//!          of U isoparametric curves to be drawn for a single face. <br>
//!          The LineAspect for U isoparametric lines can be edited <br>
//!          (methods SetColor, SetTypeOfLine, SetWidth, SetNumber) <br>
//!          The default values are: <br>
//!          COLOR       : Quantity_NOC_GRAY75 <br>
//!          TYPE OF LINE: Aspect_TOL_SOLID <br>
//!          WIDTH       : 0.5 <br>
//! <br>
//! <br>
//!          These attributes are used by the following algorithms: <br>
//!          Prs3d_WFDeflectionSurface <br>
//!          Prs3d_WFDeflectionRestrictedFace <br>
virtual /*instead*/  OCPrs3d_IsoAspect^ UIsoAspect() ;


virtual /*instead*/  void SetUIsoAspect(OCNaroWrappers::OCPrs3d_IsoAspect^ anAspect) ;

//! Defines the attributes which are used when drawing an <br>
//!          V isoparametric curve of a face. Defines the number <br>
//!          of V isoparametric curves to be drawn for a single face. <br>
//!          The LineAspect for V isoparametric lines can be edited <br>
//!          (methods SetColor, SetTypeOfLine, SetWidth, SetNumber) <br>
//!          The default values are: <br>
//!          COLOR       : Quantity_NOC_GRAY82 <br>
//!          TYPE OF LINE: Aspect_TOL_SOLID <br>
//!          WIDTH       : 0.5 <br>
//! <br>
//! <br>
//!          These attributes are used by the following algorithms: <br>
//!          Prs3d_WFDeflectionSurface <br>
//!          Prs3d_WFDeflectionRestrictedFace <br>
virtual /*instead*/  OCPrs3d_IsoAspect^ VIsoAspect() ;

//! Sets the appearance of V isoparameters - anAspect. <br>
virtual /*instead*/  void SetVIsoAspect(OCNaroWrappers::OCPrs3d_IsoAspect^ anAspect) ;

//!  Stores the values for presentation of free boundaries, <br>
//! in other words, boundaries which are not shared. <br>
//!          The LineAspect for the  free boundaries can be edited. <br>
//!          The default values are: <br>
//!          Color: Quantity_NOC_GREEN <br>
//!          Type of line: Aspect_TOL_SOLID <br>
//!          Width: 1. <br>
//!          These attributes are used by the algorithm Prs3d_WFShape <br>
virtual /*instead*/  OCPrs3d_LineAspect^ FreeBoundaryAspect() ;

//! Sets the parameter anAspect for the display of free boundaries. <br>
virtual /*instead*/  void SetFreeBoundaryAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! Sets free boundary drawing on or off by setting the <br>
//! parameter OnOff to true or false. <br>
virtual /*instead*/  void SetFreeBoundaryDraw(System::Boolean OnOff) ;

//! Returns True if the drawing of the shared boundaries <br>
//! is disabled. True is the default setting. <br>
virtual /*instead*/  System::Boolean FreeBoundaryDraw() ;

//! Returns wire aspect settings. <br>
//!          The LineAspect for the wire can be edited. <br>
//!          The default values are: <br>
//!          Color: Quantity_NOC_RED <br>
//!          Type of line: Aspect_TOL_SOLID <br>
//!          Width: 1. <br>
//!          These attributes are used by the algorithm Prs3d_WFShape <br>
virtual /*instead*/  OCPrs3d_LineAspect^ WireAspect() ;

//! Sets the parameter anAspect for display of wires. <br>
virtual /*instead*/  void SetWireAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! Sets WireDraw on or off   by setting the parameter <br>
//! OnOff to true or false. <br>
virtual /*instead*/  void SetWireDraw(System::Boolean OnOff) ;

//! returns True if the drawing of the wire is enabled. <br>
virtual /*instead*/  System::Boolean WireDraw() ;

//! Returns settings for shared boundary line aspects. <br>
//!          The LineAspect for the unfree boundaries can be edited. <br>
//!          The default values are: <br>
//!          Color: Quantity_NOC_YELLOW <br>
//!          Type of line: Aspect_TOL_SOLID <br>
//!          Width: 1. <br>
//!          These attributes are used by the algorithm Prs3d_WFShape <br>
virtual /*instead*/  OCPrs3d_LineAspect^ UnFreeBoundaryAspect() ;

//! Sets the parameter anAspect for the display of shared boundaries. <br>
virtual /*instead*/  void SetUnFreeBoundaryAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! Sets FreeBoundaryDraw on or off by setting the <br>
//! parameter OnOff to true or false. <br>
//!          By default the unfree boundaries  are drawn. <br>
virtual /*instead*/  void SetUnFreeBoundaryDraw(System::Boolean OnOff) ;

//! Returns True if the drawing of the shared boundaries is enabled. <br>
//! True is the default setting. <br>
virtual /*instead*/  System::Boolean UnFreeBoundaryDraw() ;

//!   Returns settings for line aspects. <br>
//! These settings can be edited. The default values are: <br>
//!          Color: Quantity_NOC_YELLOW <br>
//!          Type of line: Aspect_TOL_SOLID <br>
//!          Width: 1. <br>
//!          These attributes are used by the following algorithms: <br>
//!          Prs3d_Curve <br>
//!          Prs3d_Line <br>
//!          Prs3d_HLRShape <br>
virtual /*instead*/  OCPrs3d_LineAspect^ LineAspect() ;

//! Sets the parameter anAspect for display attributes of lines. <br>
virtual /*instead*/  void SetLineAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! Returns settings for text aspect. <br>
//! These settings can be edited. The default value is: <br>
//! -   Color: Quantity_NOC_YELLOW <br>
virtual /*instead*/  OCPrs3d_TextAspect^ TextAspect() ;

//! Sets the parameter anAspect for display attributes of text. <br>
virtual /*instead*/  void SetTextAspect(OCNaroWrappers::OCPrs3d_TextAspect^ anAspect) ;

//! enables the drawing of an arrow at the end of each line. <br>
//!          By default the arrows are not drawn. <br>
virtual /*instead*/  void SetLineArrowDraw(System::Boolean OnOff) ;

//! Sets LineArrowDraw on or off by setting the <br>
//! parameter OnOff to true or false. <br>
virtual /*instead*/  System::Boolean LineArrowDraw() ;

//! Returns the attributes for display of arrows. <br>
virtual /*instead*/  OCPrs3d_ArrowAspect^ ArrowAspect() ;

//! Sets the parameter anAspect for display attributes of arrows. <br>
virtual /*instead*/  void SetArrowAspect(OCNaroWrappers::OCPrs3d_ArrowAspect^ anAspect) ;

//! Returns the point aspect setting. The default values are <br>
//!        Color: Quantity_NOC_YELLOW <br>
//!          Type of marker: Aspect_TOM_PLUS <br>
//!          Scale: 1. <br>
//!          These attributes are used by the algorithms Prs3d_Point. <br>
virtual /*instead*/  OCPrs3d_PointAspect^ PointAspect() ;

//! Sets the parameter anAspect for display attributes of points <br>
virtual /*instead*/  void SetPointAspect(OCNaroWrappers::OCPrs3d_PointAspect^ anAspect) ;

//! Returns settings for shading aspects. <br>
//! These settings can be edited. The default values are: <br>
//! -   Color: Quantity_NOC_YELLOW <br>
//! -   Material: Graphic3d_NOM_BRASS <br>
//!   Shading aspect is obtained through decomposition of <br>
//! 3d faces into triangles, each side of each triangle <br>
//! being a chord of the corresponding curved edge in <br>
//! the face. Reflection of light in each projector <br>
//! perspective is then calculated for each of the <br>
//! resultant triangular planes. <br>
virtual /*instead*/  OCPrs3d_ShadingAspect^ ShadingAspect() ;

//! Sets the parameter anAspect for display attributes of shading. <br>
virtual /*instead*/  void SetShadingAspect(OCNaroWrappers::OCPrs3d_ShadingAspect^ anAspect) ;

//! indicates that the ShadingAspect will be apply <br>
//!          to the whole presentation. This allows to modify <br>
//!          the aspect without recomputing the content of the presentation. <br>
virtual /*instead*/  void SetShadingAspectGlobal(System::Boolean aValue) ;


virtual /*instead*/  System::Boolean ShadingAspectGlobal() ;

//! returns Standard_True if the hidden lines are to be drawn. <br>
//!          By default the hidden lines are not drawn. <br>
virtual /*instead*/  System::Boolean DrawHiddenLine() ;

//! Enables the DrawHiddenLine function. <br>
virtual /*instead*/  void EnableDrawHiddenLine() ;

//!  Disables the DrawHiddenLine function. <br>
virtual /*instead*/  void DisableDrawHiddenLine() ;

//! Returns settings for hidden line aspects. <br>
//! These settings can be edited. The default values are: <br>
//!          Color: Quantity_NOC_YELLOW <br>
//!          Type of line: Aspect_TOL_DASH <br>
//!          Width: 1. <br>
virtual /*instead*/  OCPrs3d_LineAspect^ HiddenLineAspect() ;

//! Sets the parameter anAspect for the display of <br>
//! hidden lines in hidden line removal mode. <br>
virtual /*instead*/  void SetHiddenLineAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! Returns settings for seen line aspects. <br>
//! These settings can be edited. The default values are: <br>
//!          Color: Quantity_NOC_YELLOW <br>
//!          Type of line: Aspect_TOL_SOLID <br>
//!          Width: 1. <br>
virtual /*instead*/  OCPrs3d_LineAspect^ SeenLineAspect() ;

//! Sets the parameter anAspect for the display of seen <br>
//! lines in hidden line removal mode. <br>
virtual /*instead*/  void SetSeenLineAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! Returns settings for the appearance of planes. <br>
virtual /*instead*/  OCPrs3d_PlaneAspect^ PlaneAspect() ;

//! Sets the parameter anAspect for the display of planes. <br>
virtual /*instead*/  void SetPlaneAspect(OCNaroWrappers::OCPrs3d_PlaneAspect^ anAspect) ;

//! Returns settings for the appearance of vectors. <br>
//! These settings can be edited. The default values are: <br>
//!          Color: Quantity_NOC_SKYBLUE <br>
//!          Type of line: Aspect_TOL_SOLID <br>
//!          Width: 1. <br>
virtual /*instead*/  OCPrs3d_LineAspect^ VectorAspect() ;

//! Sets the modality anAspect for the display of vectors. <br>
virtual /*instead*/  void SetVectorAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! Returns settings for the appearance of datums. <br>
//! These settings can be edited. The default values for <br>
//! the three axes are: <br>
//!          Color: Quantity_NOC_PEACHPUFF <br>
//!          Type of line: Aspect_TOL_SOLID <br>
//!          Width: 1. <br>
virtual /*instead*/  OCPrs3d_DatumAspect^ DatumAspect() ;

//! Sets the modality anAspect for the display of datums. <br>
virtual /*instead*/  void SetDatumAspect(OCNaroWrappers::OCPrs3d_DatumAspect^ anAspect) ;

//! Returns settings for the appearance of lengths. <br>
virtual /*instead*/  OCPrs3d_LengthAspect^ LengthAspect() ;

//! Sets the modality anAspect for display of lengths. <br>
virtual /*instead*/  void SetLengthAspect(OCNaroWrappers::OCPrs3d_LengthAspect^ anAspect) ;

//! Returns settings for lines used to display angles. <br>
virtual /*instead*/  OCPrs3d_AngleAspect^ AngleAspect() ;

//! Sets the modality anAspect for the display of angles. <br>
virtual /*instead*/  void SetAngleAspect(OCNaroWrappers::OCPrs3d_AngleAspect^ anAspect) ;

//! Returns settings for lines which serve to display radii. <br>
virtual /*instead*/  OCPrs3d_RadiusAspect^ RadiusAspect() ;

//! Sets the parameter anAspect for display attributes of radii. <br>
virtual /*instead*/  void SetRadiusAspect(OCNaroWrappers::OCPrs3d_RadiusAspect^ anAspect) ;

//! The LineAspect for the wire can be edited. <br>
//!          The default values are: <br>
//!          Color: Quantity_NOC_ORANGE <br>
//!          Type of line: Aspect_TOL_SOLID <br>
//!          Width: 1. <br>
//!          These attributes are used by the algorithm Prs3d_WFShape <br>
virtual /*instead*/  OCPrs3d_LineAspect^ SectionAspect() ;

//! Sets the parameter anAspect for display attributes of sections. <br>
virtual /*instead*/  void SetSectionAspect(OCNaroWrappers::OCPrs3d_LineAspect^ anAspect) ;

//! Enables or disables face boundary drawing for shading presentations. <br>
//! theIsEnabled is a boolean flag indicating whether the face boundaries should be <br>
//! drawn or not. <br>
virtual /*instead*/  void SetFaceBoundaryDraw(System::Boolean theIsEnabled) ;

//! Checks whether the face boundary drawing is enabled or not. <br>
virtual /*instead*/  System::Boolean IsFaceBoundaryDraw() ;

//! Sets line aspect for face boundaries. <br>
//! theAspect is the line aspect that determines the look of the face boundaries. <br>
virtual /*instead*/  void SetFaceBoundaryAspect(OCNaroWrappers::OCPrs3d_LineAspect^ theAspect) ;

//! Returns line aspect of face boundaries. <br>
virtual /*instead*/  OCPrs3d_LineAspect^ FaceBoundaryAspect() ;

~OCPrs3d_Drawer()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
