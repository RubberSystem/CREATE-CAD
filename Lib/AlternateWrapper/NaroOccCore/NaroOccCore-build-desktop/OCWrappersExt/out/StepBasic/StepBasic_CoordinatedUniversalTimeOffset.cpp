// File generated by CPPExt (CPP file)
//

#include "StepBasic_CoordinatedUniversalTimeOffset.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCStepBasic_CoordinatedUniversalTimeOffset::OCStepBasic_CoordinatedUniversalTimeOffset(Handle(StepBasic_CoordinatedUniversalTimeOffset)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepBasic_CoordinatedUniversalTimeOffset(*nativeHandle);
}

OCStepBasic_CoordinatedUniversalTimeOffset::OCStepBasic_CoordinatedUniversalTimeOffset() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepBasic_CoordinatedUniversalTimeOffset(new StepBasic_CoordinatedUniversalTimeOffset());
}

 void OCStepBasic_CoordinatedUniversalTimeOffset::Init(Standard_Integer aHourOffset, System::Boolean hasAminuteOffset, Standard_Integer aMinuteOffset, OCStepBasic_AheadOrBehind aSense)
{
  (*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->Init(aHourOffset, OCConverter::BooleanToStandardBoolean(hasAminuteOffset), aMinuteOffset, (StepBasic_AheadOrBehind)aSense);
}

 void OCStepBasic_CoordinatedUniversalTimeOffset::SetHourOffset(Standard_Integer aHourOffset)
{
  (*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->SetHourOffset(aHourOffset);
}

 Standard_Integer OCStepBasic_CoordinatedUniversalTimeOffset::HourOffset()
{
  return (*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->HourOffset();
}

 void OCStepBasic_CoordinatedUniversalTimeOffset::SetMinuteOffset(Standard_Integer aMinuteOffset)
{
  (*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->SetMinuteOffset(aMinuteOffset);
}

 void OCStepBasic_CoordinatedUniversalTimeOffset::UnSetMinuteOffset()
{
  (*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->UnSetMinuteOffset();
}

 Standard_Integer OCStepBasic_CoordinatedUniversalTimeOffset::MinuteOffset()
{
  return (*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->MinuteOffset();
}

 System::Boolean OCStepBasic_CoordinatedUniversalTimeOffset::HasMinuteOffset()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->HasMinuteOffset());
}

 void OCStepBasic_CoordinatedUniversalTimeOffset::SetSense(OCStepBasic_AheadOrBehind aSense)
{
  (*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->SetSense((StepBasic_AheadOrBehind)aSense);
}

 OCStepBasic_AheadOrBehind OCStepBasic_CoordinatedUniversalTimeOffset::Sense()
{
  return (OCStepBasic_AheadOrBehind)((*((Handle_StepBasic_CoordinatedUniversalTimeOffset*)nativeHandle))->Sense());
}


