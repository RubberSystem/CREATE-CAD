// File generated by CPPExt (CPP file)
//

#include "StepBasic_WeekOfYearAndDayDate.h"
#include "../Converter.h"


using namespace OCNaroWrappers;

OCStepBasic_WeekOfYearAndDayDate::OCStepBasic_WeekOfYearAndDayDate(Handle(StepBasic_WeekOfYearAndDayDate)* nativeHandle) : OCStepBasic_Date((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepBasic_WeekOfYearAndDayDate(*nativeHandle);
}

OCStepBasic_WeekOfYearAndDayDate::OCStepBasic_WeekOfYearAndDayDate() : OCStepBasic_Date((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepBasic_WeekOfYearAndDayDate(new StepBasic_WeekOfYearAndDayDate());
}

 void OCStepBasic_WeekOfYearAndDayDate::Init(Standard_Integer aYearComponent)
{
  (*((Handle_StepBasic_WeekOfYearAndDayDate*)nativeHandle))->Init(aYearComponent);
}

 void OCStepBasic_WeekOfYearAndDayDate::Init(Standard_Integer aYearComponent, Standard_Integer aWeekComponent, System::Boolean hasAdayComponent, Standard_Integer aDayComponent)
{
  (*((Handle_StepBasic_WeekOfYearAndDayDate*)nativeHandle))->Init(aYearComponent, aWeekComponent, OCConverter::BooleanToStandardBoolean(hasAdayComponent), aDayComponent);
}

 void OCStepBasic_WeekOfYearAndDayDate::SetWeekComponent(Standard_Integer aWeekComponent)
{
  (*((Handle_StepBasic_WeekOfYearAndDayDate*)nativeHandle))->SetWeekComponent(aWeekComponent);
}

 Standard_Integer OCStepBasic_WeekOfYearAndDayDate::WeekComponent()
{
  return (*((Handle_StepBasic_WeekOfYearAndDayDate*)nativeHandle))->WeekComponent();
}

 void OCStepBasic_WeekOfYearAndDayDate::SetDayComponent(Standard_Integer aDayComponent)
{
  (*((Handle_StepBasic_WeekOfYearAndDayDate*)nativeHandle))->SetDayComponent(aDayComponent);
}

 void OCStepBasic_WeekOfYearAndDayDate::UnSetDayComponent()
{
  (*((Handle_StepBasic_WeekOfYearAndDayDate*)nativeHandle))->UnSetDayComponent();
}

 Standard_Integer OCStepBasic_WeekOfYearAndDayDate::DayComponent()
{
  return (*((Handle_StepBasic_WeekOfYearAndDayDate*)nativeHandle))->DayComponent();
}

 System::Boolean OCStepBasic_WeekOfYearAndDayDate::HasDayComponent()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_StepBasic_WeekOfYearAndDayDate*)nativeHandle))->HasDayComponent());
}


