// File generated by CPPExt (CPP file)
//

#include "StepBasic_ConversionBasedUnit.h"
#include "../Converter.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "StepBasic_MeasureWithUnit.h"
#include "StepBasic_DimensionalExponents.h"


using namespace OCNaroWrappers;

OCStepBasic_ConversionBasedUnit::OCStepBasic_ConversionBasedUnit(Handle(StepBasic_ConversionBasedUnit)* nativeHandle) : OCStepBasic_NamedUnit((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_StepBasic_ConversionBasedUnit(*nativeHandle);
}

OCStepBasic_ConversionBasedUnit::OCStepBasic_ConversionBasedUnit() : OCStepBasic_NamedUnit((OCDummy^)nullptr)

{
  nativeHandle = new Handle_StepBasic_ConversionBasedUnit(new StepBasic_ConversionBasedUnit());
}

 void OCStepBasic_ConversionBasedUnit::Init(OCNaroWrappers::OCStepBasic_DimensionalExponents^ aDimensions)
{
  (*((Handle_StepBasic_ConversionBasedUnit*)nativeHandle))->Init(*((Handle_StepBasic_DimensionalExponents*)aDimensions->Handle));
}

 void OCStepBasic_ConversionBasedUnit::Init(OCNaroWrappers::OCStepBasic_DimensionalExponents^ aDimensions, OCNaroWrappers::OCTCollection_HAsciiString^ aName, OCNaroWrappers::OCStepBasic_MeasureWithUnit^ aConversionFactor)
{
  (*((Handle_StepBasic_ConversionBasedUnit*)nativeHandle))->Init(*((Handle_StepBasic_DimensionalExponents*)aDimensions->Handle), *((Handle_TCollection_HAsciiString*)aName->Handle), *((Handle_StepBasic_MeasureWithUnit*)aConversionFactor->Handle));
}

 void OCStepBasic_ConversionBasedUnit::SetName(OCNaroWrappers::OCTCollection_HAsciiString^ aName)
{
  (*((Handle_StepBasic_ConversionBasedUnit*)nativeHandle))->SetName(*((Handle_TCollection_HAsciiString*)aName->Handle));
}

OCTCollection_HAsciiString^ OCStepBasic_ConversionBasedUnit::Name()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_StepBasic_ConversionBasedUnit*)nativeHandle))->Name();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCStepBasic_ConversionBasedUnit::SetConversionFactor(OCNaroWrappers::OCStepBasic_MeasureWithUnit^ aConversionFactor)
{
  (*((Handle_StepBasic_ConversionBasedUnit*)nativeHandle))->SetConversionFactor(*((Handle_StepBasic_MeasureWithUnit*)aConversionFactor->Handle));
}

OCStepBasic_MeasureWithUnit^ OCStepBasic_ConversionBasedUnit::ConversionFactor()
{
  Handle(StepBasic_MeasureWithUnit) tmp = (*((Handle_StepBasic_ConversionBasedUnit*)nativeHandle))->ConversionFactor();
  return gcnew OCStepBasic_MeasureWithUnit(&tmp);
}


