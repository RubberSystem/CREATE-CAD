// File generated by CPPExt (CPP file)
//

#include "StepBasic_Array1OfUncertaintyMeasureWithUnit.h"
#include "../Converter.h"
#include "StepBasic_UncertaintyMeasureWithUnit.h"


using namespace OCNaroWrappers;

OCStepBasic_Array1OfUncertaintyMeasureWithUnit::OCStepBasic_Array1OfUncertaintyMeasureWithUnit(StepBasic_Array1OfUncertaintyMeasureWithUnit* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCStepBasic_Array1OfUncertaintyMeasureWithUnit::OCStepBasic_Array1OfUncertaintyMeasureWithUnit(Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new StepBasic_Array1OfUncertaintyMeasureWithUnit(Low, Up);
}

OCStepBasic_Array1OfUncertaintyMeasureWithUnit::OCStepBasic_Array1OfUncertaintyMeasureWithUnit(OCNaroWrappers::OCStepBasic_UncertaintyMeasureWithUnit^ Item, Standard_Integer Low, Standard_Integer Up) 
{
  nativeHandle = new StepBasic_Array1OfUncertaintyMeasureWithUnit(*((Handle_StepBasic_UncertaintyMeasureWithUnit*)Item->Handle), Low, Up);
}

 void OCStepBasic_Array1OfUncertaintyMeasureWithUnit::Init(OCNaroWrappers::OCStepBasic_UncertaintyMeasureWithUnit^ V)
{
  ((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->Init(*((Handle_StepBasic_UncertaintyMeasureWithUnit*)V->Handle));
}

 System::Boolean OCStepBasic_Array1OfUncertaintyMeasureWithUnit::IsAllocated()
{
  return OCConverter::StandardBooleanToBoolean(((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->IsAllocated());
}

OCStepBasic_Array1OfUncertaintyMeasureWithUnit^ OCStepBasic_Array1OfUncertaintyMeasureWithUnit::Assign(OCNaroWrappers::OCStepBasic_Array1OfUncertaintyMeasureWithUnit^ Other)
{
  StepBasic_Array1OfUncertaintyMeasureWithUnit* tmp = new StepBasic_Array1OfUncertaintyMeasureWithUnit(0, 0);
  *tmp = ((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->Assign(*((StepBasic_Array1OfUncertaintyMeasureWithUnit*)Other->Handle));
  return gcnew OCStepBasic_Array1OfUncertaintyMeasureWithUnit(tmp);
}

 Standard_Integer OCStepBasic_Array1OfUncertaintyMeasureWithUnit::Length()
{
  return ((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->Length();
}

 Standard_Integer OCStepBasic_Array1OfUncertaintyMeasureWithUnit::Lower()
{
  return ((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->Lower();
}

 Standard_Integer OCStepBasic_Array1OfUncertaintyMeasureWithUnit::Upper()
{
  return ((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->Upper();
}

 void OCStepBasic_Array1OfUncertaintyMeasureWithUnit::SetValue(Standard_Integer Index, OCNaroWrappers::OCStepBasic_UncertaintyMeasureWithUnit^ Value)
{
  ((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->SetValue(Index, *((Handle_StepBasic_UncertaintyMeasureWithUnit*)Value->Handle));
}

OCStepBasic_UncertaintyMeasureWithUnit^ OCStepBasic_Array1OfUncertaintyMeasureWithUnit::Value(Standard_Integer Index)
{
  Handle(StepBasic_UncertaintyMeasureWithUnit) tmp = ((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->Value(Index);
  return gcnew OCStepBasic_UncertaintyMeasureWithUnit(&tmp);
}

OCStepBasic_UncertaintyMeasureWithUnit^ OCStepBasic_Array1OfUncertaintyMeasureWithUnit::ChangeValue(Standard_Integer Index)
{
  Handle(StepBasic_UncertaintyMeasureWithUnit) tmp = ((StepBasic_Array1OfUncertaintyMeasureWithUnit*)nativeHandle)->ChangeValue(Index);
  return gcnew OCStepBasic_UncertaintyMeasureWithUnit(&tmp);
}


