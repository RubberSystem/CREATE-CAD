// File generated by CPPExt (Transient)
//
#ifndef _Message_ProgressIndicator_OCWrappers_HeaderFile
#define _Message_ProgressIndicator_OCWrappers_HeaderFile

// include the wrapped class
#include <Message_ProgressIndicator.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "Message_SequenceOfProgressScale.h"


namespace OCNaroWrappers
{

ref class OCTCollection_HAsciiString;
ref class OCMessage_ProgressScale;


//! Defines abstract interface from program to the "user". <br>
//!          That includes progress indication and user break mechanisms <br>
public ref class OCMessage_ProgressIndicator : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMessage_ProgressIndicator(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMessage_ProgressIndicator(Handle(Message_ProgressIndicator)* nativeHandle);

// Methods PUBLIC

//! Constructor, just calls own Reset() (not yet redefined) <br>
OCMessage_ProgressIndicator();

//! Drops all scopes and sets scale from 0 to 100, step 1 <br>
//!          This scale has name "Step" <br>
virtual /*instead*/  void Reset() ;


 /*instead*/  void SetName(System::String^ name) ;

//! Set (optional) name for scale <br>
 /*instead*/  void SetName(OCNaroWrappers::OCTCollection_HAsciiString^ name) ;

//! Set range for current scale <br>
 /*instead*/  void SetRange(Standard_Real min, Standard_Real max) ;

//! Set step for current scale <br>
 /*instead*/  void SetStep(Standard_Real step) ;

//! Set or drop infinite mode for the current scale <br>
 /*instead*/  void SetInfinite(System::Boolean isInf) ;


 /*instead*/  void SetScale(System::String^ name, Standard_Real min, Standard_Real max, Standard_Real step, System::Boolean isInf) ;

//! Set all parameters for current scale <br>
 /*instead*/  void SetScale(Standard_Real min, Standard_Real max, Standard_Real step, System::Boolean isInf) ;

//! Returns all parameters for current scale <br>
 /*instead*/  void GetScale(Standard_Real& min, Standard_Real& max, Standard_Real& step, System::Boolean& isInf) ;


 /*instead*/  void SetValue(Standard_Real val) ;

//! Set and get progress value at current scale <br>
//!          If the value to be set is more than currently set one, or out <br>
//!          of range for the current scale, it is limited by that range <br>
 /*instead*/  Standard_Real GetValue() ;


 /*instead*/  void Increment() ;

//! Increment the progress value by the default of specified step <br>
 /*instead*/  void Increment(Standard_Real step) ;


 /*instead*/  System::Boolean NewScope(System::String^ name) ;


 /*instead*/  System::Boolean NewScope(OCNaroWrappers::OCTCollection_HAsciiString^ name) ;


 /*instead*/  System::Boolean NewScope(Standard_Real span, System::String^ name) ;

//! Creates new scope on a part of a current scale from current <br>
//!          position with span either equal to default step, or specified <br>
//!          The scale for the new scope will have specified name and <br>
//!          ranged from 0 to 100 with step 1 <br>
//!          Returns False if something is wrong in arguments or in current <br>
//!          position of progress indicator; scope is opened anyway <br>
 /*instead*/  System::Boolean NewScope(Standard_Real span, OCNaroWrappers::OCTCollection_HAsciiString^ name) ;

//! Close the current scope and thus return to previous scale <br>
//!          Updates position to be at the end of the closing scope <br>
//!          Returns False if no scope is opened <br>
 /*instead*/  System::Boolean EndScope() ;


 /*instead*/  System::Boolean NextScope(System::String^ name) ;

//! Optimized version of { return EndScope() && NewScope(); } <br>
 /*instead*/  System::Boolean NextScope(Standard_Real span, System::String^ name) ;

//! Should return True if user has send a break signal. <br>
//!          Default implementation returns False. <br>
virtual /*instead*/  System::Boolean UserBreak() ;

//! Returns total progress position on the basic scale <br>
//!          ranged from 0. to 1. <br>
 /*instead*/  Standard_Real GetPosition() ;

//! Returns current number of opened scopes <br>
//!          This number is always >=1 as top-level scale is always present <br>
 /*instead*/  Standard_Integer GetNbScopes() ;

//! Returns data for scale of index-th scope <br>
//!          The first scope is current one, the last is the top-level one <br>
 /*instead*/  OCMessage_ProgressScale^ GetScope(Standard_Integer index) ;

~OCMessage_ProgressIndicator()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
