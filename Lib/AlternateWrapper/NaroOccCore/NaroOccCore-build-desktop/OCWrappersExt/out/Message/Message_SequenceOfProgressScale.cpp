// File generated by CPPExt (CPP file)
//

#include "Message_SequenceOfProgressScale.h"
#include "../Converter.h"
#include "Message_ProgressScale.h"
#include "Message_SequenceNodeOfSequenceOfProgressScale.h"


using namespace OCNaroWrappers;

OCMessage_SequenceOfProgressScale::OCMessage_SequenceOfProgressScale(Message_SequenceOfProgressScale* nativeHandle) : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMessage_SequenceOfProgressScale::OCMessage_SequenceOfProgressScale() : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  nativeHandle = new Message_SequenceOfProgressScale();
}

OCMessage_SequenceOfProgressScale^ OCMessage_SequenceOfProgressScale::Assign(OCNaroWrappers::OCMessage_SequenceOfProgressScale^ Other)
{
  Message_SequenceOfProgressScale* tmp = new Message_SequenceOfProgressScale();
  *tmp = ((Message_SequenceOfProgressScale*)nativeHandle)->Assign(*((Message_SequenceOfProgressScale*)Other->Handle));
  return gcnew OCMessage_SequenceOfProgressScale(tmp);
}

 void OCMessage_SequenceOfProgressScale::Append(OCNaroWrappers::OCMessage_ProgressScale^ T)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->Append(*((Message_ProgressScale*)T->Handle));
}

 void OCMessage_SequenceOfProgressScale::Append(OCNaroWrappers::OCMessage_SequenceOfProgressScale^ S)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->Append(*((Message_SequenceOfProgressScale*)S->Handle));
}

 void OCMessage_SequenceOfProgressScale::Prepend(OCNaroWrappers::OCMessage_ProgressScale^ T)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->Prepend(*((Message_ProgressScale*)T->Handle));
}

 void OCMessage_SequenceOfProgressScale::Prepend(OCNaroWrappers::OCMessage_SequenceOfProgressScale^ S)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->Prepend(*((Message_SequenceOfProgressScale*)S->Handle));
}

 void OCMessage_SequenceOfProgressScale::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCMessage_ProgressScale^ T)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->InsertBefore(Index, *((Message_ProgressScale*)T->Handle));
}

 void OCMessage_SequenceOfProgressScale::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCMessage_SequenceOfProgressScale^ S)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->InsertBefore(Index, *((Message_SequenceOfProgressScale*)S->Handle));
}

 void OCMessage_SequenceOfProgressScale::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCMessage_ProgressScale^ T)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->InsertAfter(Index, *((Message_ProgressScale*)T->Handle));
}

 void OCMessage_SequenceOfProgressScale::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCMessage_SequenceOfProgressScale^ S)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->InsertAfter(Index, *((Message_SequenceOfProgressScale*)S->Handle));
}

OCMessage_ProgressScale^ OCMessage_SequenceOfProgressScale::First()
{
  Message_ProgressScale* tmp = new Message_ProgressScale();
  *tmp = ((Message_SequenceOfProgressScale*)nativeHandle)->First();
  return gcnew OCMessage_ProgressScale(tmp);
}

OCMessage_ProgressScale^ OCMessage_SequenceOfProgressScale::Last()
{
  Message_ProgressScale* tmp = new Message_ProgressScale();
  *tmp = ((Message_SequenceOfProgressScale*)nativeHandle)->Last();
  return gcnew OCMessage_ProgressScale(tmp);
}

 void OCMessage_SequenceOfProgressScale::Split(Standard_Integer Index, OCNaroWrappers::OCMessage_SequenceOfProgressScale^ Sub)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->Split(Index, *((Message_SequenceOfProgressScale*)Sub->Handle));
}

OCMessage_ProgressScale^ OCMessage_SequenceOfProgressScale::Value(Standard_Integer Index)
{
  Message_ProgressScale* tmp = new Message_ProgressScale();
  *tmp = ((Message_SequenceOfProgressScale*)nativeHandle)->Value(Index);
  return gcnew OCMessage_ProgressScale(tmp);
}

 void OCMessage_SequenceOfProgressScale::SetValue(Standard_Integer Index, OCNaroWrappers::OCMessage_ProgressScale^ I)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->SetValue(Index, *((Message_ProgressScale*)I->Handle));
}

OCMessage_ProgressScale^ OCMessage_SequenceOfProgressScale::ChangeValue(Standard_Integer Index)
{
  Message_ProgressScale* tmp = new Message_ProgressScale();
  *tmp = ((Message_SequenceOfProgressScale*)nativeHandle)->ChangeValue(Index);
  return gcnew OCMessage_ProgressScale(tmp);
}

 void OCMessage_SequenceOfProgressScale::Remove(Standard_Integer Index)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->Remove(Index);
}

 void OCMessage_SequenceOfProgressScale::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  ((Message_SequenceOfProgressScale*)nativeHandle)->Remove(FromIndex, ToIndex);
}


