// File generated by CPPExt (Transient)
//
#ifndef _Message_Messenger_OCWrappers_HeaderFile
#define _Message_Messenger_OCWrappers_HeaderFile

// include the wrapped class
#include <Message_Messenger.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "Message_SequenceOfPrinters.h"
#include "Message_Gravity.h"


namespace OCNaroWrappers
{

ref class OCMessage_Printer;
ref class OCStandard_Type;
ref class OCMessage_SequenceOfPrinters;
ref class OCTCollection_AsciiString;
ref class OCTCollection_ExtendedString;


//! Messenger is API class providing general-purpose interface for <br>
//!          libraries that may issue text messages without knowledge <br>
//!          of how these messages will be further processed. <br>
//! <br>
//!          The messenger contains a sequence of "printers" which can be <br>
//!          customized by the application, and dispatches every received <br>
//!          message to all the printers. <br>
//! <br>
//!          For convenience, a number of operators << are defined with left <br>
//!          argument being Handle(Message_Messenger); thus it can be used <br>
//!          with syntax similar to C++ streams. <br>
//!          Note that all these operators use trace level Warning. <br>
public ref class OCMessage_Messenger : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMessage_Messenger(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMessage_Messenger(Handle(Message_Messenger)* nativeHandle);

// Methods PUBLIC

//! Empty constructor; initializes by single printer directed to cout. <br>
//!          Note: the default messenger is not empty but directed to cout <br>
//!          in order to protect against possibility to forget defining printers. <br>
//!          If printing to cout is not needed, clear messenger by GetPrinters().Clear() <br>
OCMessage_Messenger();

//! Create messenger with single printer <br>
OCMessage_Messenger(OCNaroWrappers::OCMessage_Printer^ thePrinter);

//! Add a printer to the messenger. <br>
//!          The printer will be added only if it is not yet in the list. <br>
//!          Returns True if printer has been added. <br>
 /*instead*/  System::Boolean AddPrinter(OCNaroWrappers::OCMessage_Printer^ thePrinter) ;

//! Removes specified printer from the messenger. <br>
//!          Returns True if this printer has been found in the list <br>
//!          and removed. <br>
 /*instead*/  System::Boolean RemovePrinter(OCNaroWrappers::OCMessage_Printer^ thePrinter) ;

//! Removes printers of specified type (including derived classes) <br>
//!          from the messenger. <br>
//!          Returns number of removed printers. <br>
 /*instead*/  Standard_Integer RemovePrinters(OCNaroWrappers::OCStandard_Type^ theType) ;

//! Returns current sequence of printers <br>
 /*instead*/  OCMessage_SequenceOfPrinters^ Printers() ;

//! Returns sequence of printers <br>
//!          The sequence can be modified. <br>
 /*instead*/  OCMessage_SequenceOfPrinters^ ChangePrinters() ;

//! Dispatch a message to all the printers in the list. <br>
//!          Three versions of string representations are accepted for <br>
//!          convenience, by default all are converted to ExtendedString. <br>
//!          The parameter putEndl specifies whether the new line should <br>
//!          be started after this message (default) or not (may have <br>
//!          sense in some conditions). <br>
 /*instead*/  void Send(System::String^ theString, OCMessage_Gravity theGravity, System::Boolean putEndl) ;

//! See above <br>
 /*instead*/  void Send(OCNaroWrappers::OCTCollection_AsciiString^ theString, OCMessage_Gravity theGravity, System::Boolean putEndl) ;

//! See above <br>
 /*instead*/  void Send(OCNaroWrappers::OCTCollection_ExtendedString^ theString, OCMessage_Gravity theGravity, System::Boolean putEndl) ;

~OCMessage_Messenger()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
