// File generated by CPPExt (CPP file)
//

#include "Message_Algorithm.h"
#include "../Converter.h"
#include "Message_Messenger.h"
#include "../TColStd/TColStd_HArray1OfTransient.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "../TCollection/TCollection_ExtendedString.h"
#include "../TCollection/TCollection_HExtendedString.h"
#include "../TColStd/TColStd_HPackedMapOfInteger.h"
#include "../TColStd/TColStd_HSequenceOfHExtendedString.h"
#include "../TColStd/TColStd_SequenceOfHExtendedString.h"


using namespace OCNaroWrappers;

OCMessage_Algorithm::OCMessage_Algorithm(Handle(Message_Algorithm)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Message_Algorithm(*nativeHandle);
}

OCMessage_Algorithm::OCMessage_Algorithm() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Message_Algorithm(new Message_Algorithm());
}

 void OCMessage_Algorithm::SetStatus(Message_Status theStat)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SetStatus(theStat);
}

 void OCMessage_Algorithm::SetStatus(Message_Status theStat, Standard_Integer theInt)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SetStatus(theStat, theInt);
}

 void OCMessage_Algorithm::SetStatus(Message_Status theStat, System::String^ theStr, System::Boolean noRepetitions)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SetStatus(theStat, OCConverter::StringToStandardCString(theStr), OCConverter::BooleanToStandardBoolean(noRepetitions));
}

 void OCMessage_Algorithm::SetStatus(Message_Status theStat, OCNaroWrappers::OCTCollection_AsciiString^ theStr, System::Boolean noRepetitions)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SetStatus(theStat, *((TCollection_AsciiString*)theStr->Handle), OCConverter::BooleanToStandardBoolean(noRepetitions));
}

 void OCMessage_Algorithm::SetStatus(Message_Status theStat, OCNaroWrappers::OCTCollection_HAsciiString^ theStr, System::Boolean noRepetitions)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SetStatus(theStat, *((Handle_TCollection_HAsciiString*)theStr->Handle), OCConverter::BooleanToStandardBoolean(noRepetitions));
}

 void OCMessage_Algorithm::SetStatus(Message_Status theStat, OCNaroWrappers::OCTCollection_ExtendedString^ theStr, System::Boolean noRepetitions)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SetStatus(theStat, *((TCollection_ExtendedString*)theStr->Handle), OCConverter::BooleanToStandardBoolean(noRepetitions));
}

 void OCMessage_Algorithm::SetStatus(Message_Status theStat, OCNaroWrappers::OCTCollection_HExtendedString^ theStr, System::Boolean noRepetitions)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SetStatus(theStat, *((Handle_TCollection_HExtendedString*)theStr->Handle), OCConverter::BooleanToStandardBoolean(noRepetitions));
}

 Message_ExecStatus& OCMessage_Algorithm::GetStatus()
{
  return (*((Handle_Message_Algorithm*)nativeHandle))->GetStatus();
}

 Message_ExecStatus& OCMessage_Algorithm::ChangeStatus()
{
  return (*((Handle_Message_Algorithm*)nativeHandle))->ChangeStatus();
}

 void OCMessage_Algorithm::ClearStatus()
{
  (*((Handle_Message_Algorithm*)nativeHandle))->ClearStatus();
}

 void OCMessage_Algorithm::SetMessenger(OCNaroWrappers::OCMessage_Messenger^ theMsgr)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SetMessenger(*((Handle_Message_Messenger*)theMsgr->Handle));
}

OCMessage_Messenger^ OCMessage_Algorithm::GetMessenger()
{
  Handle(Message_Messenger) tmp = (*((Handle_Message_Algorithm*)nativeHandle))->GetMessenger();
  return gcnew OCMessage_Messenger(&tmp);
}

 void OCMessage_Algorithm::SendStatusMessages(Message_ExecStatus theFilter, OCMessage_Gravity theTraceLevel, Standard_Integer theMaxCount)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SendStatusMessages(theFilter, (Message_Gravity)theTraceLevel, theMaxCount);
}

 void OCMessage_Algorithm::SendMessages(OCMessage_Gravity theTraceLevel, Standard_Integer theMaxCount)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->SendMessages((Message_Gravity)theTraceLevel, theMaxCount);
}

 void OCMessage_Algorithm::AddStatus(OCNaroWrappers::OCMessage_Algorithm^ theOther)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->AddStatus(*((Handle_Message_Algorithm*)theOther->Handle));
}

 void OCMessage_Algorithm::AddStatus(Message_ExecStatus theStatus, OCNaroWrappers::OCMessage_Algorithm^ theOther)
{
  (*((Handle_Message_Algorithm*)nativeHandle))->AddStatus(theStatus, *((Handle_Message_Algorithm*)theOther->Handle));
}

OCTColStd_HPackedMapOfInteger^ OCMessage_Algorithm::GetMessageNumbers(Message_Status theStatus)
{
  Handle(TColStd_HPackedMapOfInteger) tmp = (*((Handle_Message_Algorithm*)nativeHandle))->GetMessageNumbers(theStatus);
  return gcnew OCTColStd_HPackedMapOfInteger(&tmp);
}

OCTColStd_HSequenceOfHExtendedString^ OCMessage_Algorithm::GetMessageStrings(Message_Status theStatus)
{
  Handle(TColStd_HSequenceOfHExtendedString) tmp = (*((Handle_Message_Algorithm*)nativeHandle))->GetMessageStrings(theStatus);
  return gcnew OCTColStd_HSequenceOfHExtendedString(&tmp);
}

OCTCollection_ExtendedString^ OCMessage_Algorithm::PrepareReport(OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ theError, Standard_Integer theMaxCount)
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = Message_Algorithm::PrepareReport(*((Handle_TColStd_HPackedMapOfInteger*)theError->Handle), theMaxCount);
  return gcnew OCTCollection_ExtendedString(tmp);
}

OCTCollection_ExtendedString^ OCMessage_Algorithm::PrepareReport(OCNaroWrappers::OCTColStd_SequenceOfHExtendedString^ theReportSeq, Standard_Integer theMaxCount)
{
  TCollection_ExtendedString* tmp = new TCollection_ExtendedString();
  *tmp = Message_Algorithm::PrepareReport(*((TColStd_SequenceOfHExtendedString*)theReportSeq->Handle), theMaxCount);
  return gcnew OCTCollection_ExtendedString(tmp);
}


