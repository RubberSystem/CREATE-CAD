// File generated by CPPExt (MPV)
//
#ifndef _Message_ProgressScale_OCWrappers_HeaderFile
#define _Message_ProgressScale_OCWrappers_HeaderFile

// include native header
#include <Message_ProgressScale.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTCollection_HAsciiString;


//! Internal data structure for scale in ProgressIndicator <br>
public ref class OCMessage_ProgressScale  {

protected:
  Message_ProgressScale* nativeHandle;
  OCMessage_ProgressScale(OCDummy^) {};

public:
  property Message_ProgressScale* Handle
  {
    Message_ProgressScale* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCMessage_ProgressScale(Message_ProgressScale* nativeHandle);

// Methods PUBLIC

//! Creates scale ranged from 0 to 100 with step 1 <br>
OCMessage_ProgressScale();


 /*instead*/  void SetName(System::String^ theName) ;

//! Sets scale name <br>
 /*instead*/  void SetName(OCNaroWrappers::OCTCollection_HAsciiString^ theName) ;

//! Gets scale name <br>
//!          Name may be Null handle if not set <br>
 /*instead*/  OCTCollection_HAsciiString^ GetName() ;

//! Sets minimum value of scale <br>
 /*instead*/  void SetMin(Standard_Real theMin) ;

//! Gets minimum value of scale <br>
 /*instead*/  Standard_Real GetMin() ;

//! Sets minimum value of scale <br>
 /*instead*/  void SetMax(Standard_Real theMax) ;

//! Gets minimum value of scale <br>
 /*instead*/  Standard_Real GetMax() ;

//! Set both min and max <br>
 /*instead*/  void SetRange(Standard_Real min, Standard_Real max) ;

//! Sets default step <br>
 /*instead*/  void SetStep(Standard_Real theStep) ;

//! Gets default step <br>
 /*instead*/  Standard_Real GetStep() ;

//! Sets flag for infinite scale <br>
 /*instead*/  void SetInfinite(System::Boolean theInfinite) ;

//! Gets flag for infinite scale <br>
 /*instead*/  System::Boolean GetInfinite() ;

//! Set all scale parameters <br>
 /*instead*/  void SetScale(Standard_Real min, Standard_Real max, Standard_Real step, System::Boolean theInfinite) ;

//! Defines span occupied by the scale on the basis scale <br>
 /*instead*/  void SetSpan(Standard_Real first, Standard_Real last) ;


 /*instead*/  Standard_Real GetFirst() ;

//! Return information on span occupied by the scale on the base scale <br>
 /*instead*/  Standard_Real GetLast() ;


 /*instead*/  Standard_Real LocalToBase(Standard_Real val) ;

//! Convert value from this scale to base one and back <br>
 /*instead*/  Standard_Real BaseToLocal(Standard_Real val) ;

~OCMessage_ProgressScale()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
