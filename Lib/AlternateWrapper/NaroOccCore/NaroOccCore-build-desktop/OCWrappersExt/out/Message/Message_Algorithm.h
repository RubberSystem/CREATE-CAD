// File generated by CPPExt (Transient)
//
#ifndef _Message_Algorithm_OCWrappers_HeaderFile
#define _Message_Algorithm_OCWrappers_HeaderFile

// include the wrapped class
#include <Message_Algorithm.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "Message_Gravity.h"


namespace OCNaroWrappers
{

ref class OCMessage_Messenger;
ref class OCTColStd_HArray1OfTransient;
ref class OCTCollection_AsciiString;
ref class OCTCollection_HAsciiString;
ref class OCTCollection_ExtendedString;
ref class OCTCollection_HExtendedString;
ref class OCTColStd_HPackedMapOfInteger;
ref class OCTColStd_HSequenceOfHExtendedString;
ref class OCTColStd_SequenceOfHExtendedString;


//! Class Message_Algorithm is intended to be the base class for <br>
//!          classes implementing algorithms or any operations that need <br>
//!          to provide extended information on its execution to the <br>
//!          caller / user. <br>
public ref class OCMessage_Algorithm : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMessage_Algorithm(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMessage_Algorithm(Handle(Message_Algorithm)* nativeHandle);

// Methods PUBLIC

//! Empty constructor <br>
OCMessage_Algorithm();

//! Sets status with no parameter <br>
 /*instead*/  void SetStatus(Message_Status theStat) ;

//! Sets status with integer parameter <br>
 /*instead*/  void SetStatus(Message_Status theStat, Standard_Integer theInt) ;

//! Sets status with string parameter. <br>
//!          If noRepetitions is True, the parameter will be added only <br>
//!          if it has not been yet recorded for the same status flag <br>
 /*instead*/  void SetStatus(Message_Status theStat, System::String^ theStr, System::Boolean noRepetitions) ;

//! Sets status with string parameter <br>
//!          If noRepetitions is True, the parameter will be added only <br>
//!          if it has not been yet recorded for the same status flag <br>
 /*instead*/  void SetStatus(Message_Status theStat, OCNaroWrappers::OCTCollection_AsciiString^ theStr, System::Boolean noRepetitions) ;

//! Sets status with string parameter <br>
//!          If noRepetitions is True, the parameter will be added only <br>
//!          if it has not been yet recorded for the same status flag <br>
 /*instead*/  void SetStatus(Message_Status theStat, OCNaroWrappers::OCTCollection_HAsciiString^ theStr, System::Boolean noRepetitions) ;

//! Sets status with string parameter <br>
//!          If noRepetitions is True, the parameter will be added only <br>
//!          if it has not been yet recorded for the same status flag <br>
 /*instead*/  void SetStatus(Message_Status theStat, OCNaroWrappers::OCTCollection_ExtendedString^ theStr, System::Boolean noRepetitions) ;

//! Sets status with string parameter <br>
//!          If noRepetitions is True, the parameter will be added only <br>
//!          if it has not been yet recorded for the same status flag <br>
 /*instead*/  void SetStatus(Message_Status theStat, OCNaroWrappers::OCTCollection_HExtendedString^ theStr, System::Boolean noRepetitions) ;

//! Returns copy of exec status of algorithm <br>
 /*instead*/  Message_ExecStatus& GetStatus() ;

//! Returns exec status of algorithm <br>
 /*instead*/  Message_ExecStatus& ChangeStatus() ;

//! Clear exec status of algorithm <br>
 /*instead*/  void ClearStatus() ;

//! Sets messenger to algorithm <br>
 /*instead*/  void SetMessenger(OCNaroWrappers::OCMessage_Messenger^ theMsgr) ;

//! Returns messenger of algorithm. <br>
//!          The returned handle is always non-null and can <br>
//!          be used for sending messages. <br>
 /*instead*/  OCMessage_Messenger^ GetMessenger() ;

//! Print messages for all status flags that have been set during <br>
//!          algorithm execution, excluding statuses that are NOT set <br>
//!          in theFilter. <br>
virtual /*instead*/  void SendStatusMessages(Message_ExecStatus theFilter, OCMessage_Gravity theTraceLevel, Standard_Integer theMaxCount) ;

//! Convenient variant of SendStatusMessages() with theFilter <br>
//!          having defined all WARN, ALARM, and FAIL (but not DONE) <br>
//!          status flags <br>
 /*instead*/  void SendMessages(OCMessage_Gravity theTraceLevel, Standard_Integer theMaxCount) ;

//! Add statuses to this algorithm from other algorithm <br>
//!          (including messages) <br>
 /*instead*/  void AddStatus(OCNaroWrappers::OCMessage_Algorithm^ theOther) ;

//! Add statuses to this algorithm from other algorithm, but <br>
//!          only those items are moved that correspond to statuses <br>
//!          set in theStatus <br>
 /*instead*/  void AddStatus(Message_ExecStatus theStatus, OCNaroWrappers::OCMessage_Algorithm^ theOther) ;

//! Return the numbers associated with the indicated status; <br>
//!          Null handle if no such status or no numbers associated with it <br>
 /*instead*/  OCTColStd_HPackedMapOfInteger^ GetMessageNumbers(Message_Status theStatus) ;

//! Return the strings associated with the indicated status; <br>
//!          Null handle if no such status or no strings associated with it <br>
 /*instead*/  OCTColStd_HSequenceOfHExtendedString^ GetMessageStrings(Message_Status theStatus) ;

//! Prepares a string containing a list of integers contained <br>
//!          in theError map, but not more than theMaxCount <br>
static /*instead*/  OCTCollection_ExtendedString^ PrepareReport(OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ theError, Standard_Integer theMaxCount) ;

//! Prepares a string containing a list of names contained <br>
//!          in theReportSeq sequence, but not more than theMaxCount <br>
static /*instead*/  OCTCollection_ExtendedString^ PrepareReport(OCNaroWrappers::OCTColStd_SequenceOfHExtendedString^ theReportSeq, Standard_Integer theMaxCount) ;

~OCMessage_Algorithm()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
