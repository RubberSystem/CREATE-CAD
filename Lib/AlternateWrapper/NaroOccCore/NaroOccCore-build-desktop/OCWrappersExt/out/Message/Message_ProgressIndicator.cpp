// File generated by CPPExt (CPP file)
//

#include "Message_ProgressIndicator.h"
#include "../Converter.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "Message_ProgressScale.h"


using namespace OCNaroWrappers;

OCMessage_ProgressIndicator::OCMessage_ProgressIndicator(Handle(Message_ProgressIndicator)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Message_ProgressIndicator(*nativeHandle);
}

OCMessage_ProgressIndicator::OCMessage_ProgressIndicator() : OCMMgt_TShared((OCDummy^)nullptr)

{}

 void OCMessage_ProgressIndicator::Reset()
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->Reset();
}

 void OCMessage_ProgressIndicator::SetName(System::String^ name)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->SetName(OCConverter::StringToStandardCString(name));
}

 void OCMessage_ProgressIndicator::SetName(OCNaroWrappers::OCTCollection_HAsciiString^ name)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->SetName(*((Handle_TCollection_HAsciiString*)name->Handle));
}

 void OCMessage_ProgressIndicator::SetRange(Standard_Real min, Standard_Real max)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->SetRange(min, max);
}

 void OCMessage_ProgressIndicator::SetStep(Standard_Real step)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->SetStep(step);
}

 void OCMessage_ProgressIndicator::SetInfinite(System::Boolean isInf)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->SetInfinite(OCConverter::BooleanToStandardBoolean(isInf));
}

 void OCMessage_ProgressIndicator::SetScale(System::String^ name, Standard_Real min, Standard_Real max, Standard_Real step, System::Boolean isInf)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->SetScale(OCConverter::StringToStandardCString(name), min, max, step, OCConverter::BooleanToStandardBoolean(isInf));
}

 void OCMessage_ProgressIndicator::SetScale(Standard_Real min, Standard_Real max, Standard_Real step, System::Boolean isInf)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->SetScale(min, max, step, OCConverter::BooleanToStandardBoolean(isInf));
}

 void OCMessage_ProgressIndicator::GetScale(Standard_Real& min, Standard_Real& max, Standard_Real& step, System::Boolean& isInf)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->GetScale(min, max, step, (Standard_Boolean&)(isInf));
}

 void OCMessage_ProgressIndicator::SetValue(Standard_Real val)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->SetValue(val);
}

 Standard_Real OCMessage_ProgressIndicator::GetValue()
{
  return (*((Handle_Message_ProgressIndicator*)nativeHandle))->GetValue();
}

 void OCMessage_ProgressIndicator::Increment()
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->Increment();
}

 void OCMessage_ProgressIndicator::Increment(Standard_Real step)
{
  (*((Handle_Message_ProgressIndicator*)nativeHandle))->Increment(step);
}

 System::Boolean OCMessage_ProgressIndicator::NewScope(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Message_ProgressIndicator*)nativeHandle))->NewScope(OCConverter::StringToStandardCString(name)));
}

 System::Boolean OCMessage_ProgressIndicator::NewScope(OCNaroWrappers::OCTCollection_HAsciiString^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Message_ProgressIndicator*)nativeHandle))->NewScope(*((Handle_TCollection_HAsciiString*)name->Handle)));
}

 System::Boolean OCMessage_ProgressIndicator::NewScope(Standard_Real span, System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Message_ProgressIndicator*)nativeHandle))->NewScope(span, OCConverter::StringToStandardCString(name)));
}

 System::Boolean OCMessage_ProgressIndicator::NewScope(Standard_Real span, OCNaroWrappers::OCTCollection_HAsciiString^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Message_ProgressIndicator*)nativeHandle))->NewScope(span, *((Handle_TCollection_HAsciiString*)name->Handle)));
}

 System::Boolean OCMessage_ProgressIndicator::EndScope()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Message_ProgressIndicator*)nativeHandle))->EndScope());
}

 System::Boolean OCMessage_ProgressIndicator::NextScope(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Message_ProgressIndicator*)nativeHandle))->NextScope(OCConverter::StringToStandardCString(name)));
}

 System::Boolean OCMessage_ProgressIndicator::NextScope(Standard_Real span, System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Message_ProgressIndicator*)nativeHandle))->NextScope(span, OCConverter::StringToStandardCString(name)));
}

 System::Boolean OCMessage_ProgressIndicator::UserBreak()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Message_ProgressIndicator*)nativeHandle))->UserBreak());
}

 Standard_Real OCMessage_ProgressIndicator::GetPosition()
{
  return (*((Handle_Message_ProgressIndicator*)nativeHandle))->GetPosition();
}

 Standard_Integer OCMessage_ProgressIndicator::GetNbScopes()
{
  return (*((Handle_Message_ProgressIndicator*)nativeHandle))->GetNbScopes();
}

OCMessage_ProgressScale^ OCMessage_ProgressIndicator::GetScope(Standard_Integer index)
{
  Message_ProgressScale* tmp = new Message_ProgressScale();
  *tmp = (*((Handle_Message_ProgressIndicator*)nativeHandle))->GetScope(index);
  return gcnew OCMessage_ProgressScale(tmp);
}


