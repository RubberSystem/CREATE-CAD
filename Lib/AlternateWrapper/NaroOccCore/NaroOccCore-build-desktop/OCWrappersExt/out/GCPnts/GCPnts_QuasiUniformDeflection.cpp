// File generated by CPPExt (CPP file)
//

#include "GCPnts_QuasiUniformDeflection.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "../Adaptor2d/Adaptor2d_Curve2d.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCGCPnts_QuasiUniformDeflection::OCGCPnts_QuasiUniformDeflection(GCPnts_QuasiUniformDeflection* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGCPnts_QuasiUniformDeflection::OCGCPnts_QuasiUniformDeflection() 
{
  nativeHandle = new GCPnts_QuasiUniformDeflection();
}

OCGCPnts_QuasiUniformDeflection::OCGCPnts_QuasiUniformDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, OCGeomAbs_Shape Continuity) 
{
  nativeHandle = new GCPnts_QuasiUniformDeflection(*((Adaptor3d_Curve*)C->Handle), Deflection, (GeomAbs_Shape)Continuity);
}

OCGCPnts_QuasiUniformDeflection::OCGCPnts_QuasiUniformDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, OCGeomAbs_Shape Continuity) 
{
  nativeHandle = new GCPnts_QuasiUniformDeflection(*((Adaptor2d_Curve2d*)C->Handle), Deflection, (GeomAbs_Shape)Continuity);
}

OCGCPnts_QuasiUniformDeflection::OCGCPnts_QuasiUniformDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, OCGeomAbs_Shape Continuity) 
{
  nativeHandle = new GCPnts_QuasiUniformDeflection(*((Adaptor3d_Curve*)C->Handle), Deflection, U1, U2, (GeomAbs_Shape)Continuity);
}

OCGCPnts_QuasiUniformDeflection::OCGCPnts_QuasiUniformDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, OCGeomAbs_Shape Continuity) 
{
  nativeHandle = new GCPnts_QuasiUniformDeflection(*((Adaptor2d_Curve2d*)C->Handle), Deflection, U1, U2, (GeomAbs_Shape)Continuity);
}

 void OCGCPnts_QuasiUniformDeflection::Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, OCGeomAbs_Shape Continuity)
{
  ((GCPnts_QuasiUniformDeflection*)nativeHandle)->Initialize(*((Adaptor3d_Curve*)C->Handle), Deflection, (GeomAbs_Shape)Continuity);
}

 void OCGCPnts_QuasiUniformDeflection::Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, OCGeomAbs_Shape Continuity)
{
  ((GCPnts_QuasiUniformDeflection*)nativeHandle)->Initialize(*((Adaptor2d_Curve2d*)C->Handle), Deflection, (GeomAbs_Shape)Continuity);
}

 void OCGCPnts_QuasiUniformDeflection::Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, OCGeomAbs_Shape Continuity)
{
  ((GCPnts_QuasiUniformDeflection*)nativeHandle)->Initialize(*((Adaptor3d_Curve*)C->Handle), Deflection, U1, U2, (GeomAbs_Shape)Continuity);
}

 void OCGCPnts_QuasiUniformDeflection::Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, OCGeomAbs_Shape Continuity)
{
  ((GCPnts_QuasiUniformDeflection*)nativeHandle)->Initialize(*((Adaptor2d_Curve2d*)C->Handle), Deflection, U1, U2, (GeomAbs_Shape)Continuity);
}

 System::Boolean OCGCPnts_QuasiUniformDeflection::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((GCPnts_QuasiUniformDeflection*)nativeHandle)->IsDone());
}

 Standard_Integer OCGCPnts_QuasiUniformDeflection::NbPoints()
{
  return ((GCPnts_QuasiUniformDeflection*)nativeHandle)->NbPoints();
}

 Standard_Real OCGCPnts_QuasiUniformDeflection::Parameter(Standard_Integer Index)
{
  return ((GCPnts_QuasiUniformDeflection*)nativeHandle)->Parameter(Index);
}

OCgp_Pnt^ OCGCPnts_QuasiUniformDeflection::Value(Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((GCPnts_QuasiUniformDeflection*)nativeHandle)->Value(Index);
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCGCPnts_QuasiUniformDeflection::Deflection()
{
  return ((GCPnts_QuasiUniformDeflection*)nativeHandle)->Deflection();
}


