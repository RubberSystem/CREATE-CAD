// File generated by CPPExt (MPV)
//
#ifndef _GCPnts_QuasiUniformDeflection_OCWrappers_HeaderFile
#define _GCPnts_QuasiUniformDeflection_OCWrappers_HeaderFile

// include native header
#include <GCPnts_QuasiUniformDeflection.hxx>
#include "../Converter.h"


#include "../TColStd/TColStd_SequenceOfReal.h"
#include "../TColgp/TColgp_SequenceOfPnt.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Curve;
ref class OCAdaptor2d_Curve2d;
ref class OCgp_Pnt;


//! This  class computes  a  distribution of  points  on a <br>
//!          curve. The points may respect the deflection. The algorithm <br>
//!          is not based on the  classical prediction (with second <br>
//!          derivative of curve), but either  on the evaluation of <br>
//!          the distance between the   mid point and the  point of <br>
//!          mid parameter of    the two points,   or  the distance <br>
//!          between the mid point and  the point at parameter  0.5 <br>
//!          on the cubic interpolation of the two points and their <br>
//!          tangents. <br>
//! Note: this algorithm is faster than a <br>
//! GCPnts_UniformDeflection algorithm, and is <br>
//! able to work with non-"C2" continuous curves. <br>
//! However, it generates more points in the distribution. <br>
public ref class OCGCPnts_QuasiUniformDeflection  {

protected:
  GCPnts_QuasiUniformDeflection* nativeHandle;
  OCGCPnts_QuasiUniformDeflection(OCDummy^) {};

public:
  property GCPnts_QuasiUniformDeflection* Handle
  {
    GCPnts_QuasiUniformDeflection* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGCPnts_QuasiUniformDeflection(GCPnts_QuasiUniformDeflection* nativeHandle);

// Methods PUBLIC

//! Constructs an empty algorithm. To define the problem <br>
//! to be solved, use the function Initialize. <br>
OCGCPnts_QuasiUniformDeflection();

//! Computes  a QuasiUniform Deflection distribution <br>
//!  of points on the Curve <C>. <br>
OCGCPnts_QuasiUniformDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, OCGeomAbs_Shape Continuity);

//! Computes  a QuasiUniform Deflection distribution <br>
//!  of points on the Curve <C>. <br>
OCGCPnts_QuasiUniformDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, OCGeomAbs_Shape Continuity);

//! Computes a QuasiUniform Deflection distribution <br>
//!  of points on a part of the Curve <C>. <br>
OCGCPnts_QuasiUniformDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, OCGeomAbs_Shape Continuity);

//!  Computes  a QuasiUniform Deflection distribution <br>
//!  of points on a part of the Curve <C>. <br>
//! This and the above algorithms compute a distribution of points: <br>
//! -   on the curve C, or <br>
//! -   on the part of curve C limited by the two <br>
//!   parameter values U1 and U2, <br>
//! where the deflection resulting from the distributed <br>
//! points is not greater than Deflection. <br>
//! The first point of the distribution is either the origin of <br>
//! curve C or the point of parameter U1. The last point <br>
//! of the distribution is either the end point of curve C or <br>
//! the point of parameter U2. <br>
//! Intermediate points of the distribution are built such <br>
//! that the deflection is not greater than Deflection. <br>
//! Using the following evaluation of the deflection: <br>
//! if Pi and Pj are two consecutive points of the <br>
//! distribution, respectively of parameter ui and uj on <br>
//! the curve, the deflection is the distance between: <br>
//! -   the mid-point of Pi and Pj (the center of the <br>
//!   chord joining these two points) <br>
//! -   and the point of mid-parameter of these two <br>
//!   points (the point of parameter [(ui+uj) / 2 ] on curve C). <br>
//!   Continuity, defaulted to GeomAbs_C1, gives the <br>
//!   degree of continuity of the curve C. (Note that C is an <br>
//! Adaptor3d_Curve or an Adaptor2d_Curve2d <br>
//! object, and does not know the degree of continuity of <br>
//! the underlying curve). <br>
//! Use the function IsDone to verify that the <br>
//! computation was successful, the function NbPoints <br>
//! to obtain the number of points of the computed <br>
//! distribution, and the function Parameter to read the <br>
//! parameter of each point. <br>
//! Warning <br>
//! -   The roles of U1 and U2 are inverted if U1 > U2. <br>
//! -   Derivative functions on the curve are called <br>
//!   according to Continuity. An error may occur if <br>
//!   Continuity is greater than the real degree of <br>
//!   continuity of the curve. <br>
//! Warning <br>
//! C is an adapted curve, i.e. an object which is an <br>
//! interface between: <br>
//! -   the services provided by either a 2D curve from <br>
//!   the package Geom2d (in the case of an <br>
//!   Adaptor2d_Curve2d curve) or a 3D curve from <br>
//!   the package Geom (in the case of an <br>
//!   Adaptor3d_Curve curve), <br>
//! -   and those required on the curve by the <br>
//!   computation algorithm. <br>
OCGCPnts_QuasiUniformDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, OCGeomAbs_Shape Continuity);

//! Initialize the algoritms with <C>, <Deflection> <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, OCGeomAbs_Shape Continuity) ;

//! Initialize the algoritms with <C>, <Deflection> <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, OCGeomAbs_Shape Continuity) ;

//! Initialize the algoritms with <C>, <Deflection>, <br>
//!          <U1>,<U2> <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, OCGeomAbs_Shape Continuity) ;

//! Initialize  the  algoritms with <C>, <Deflection>, <br>
//!          -- <U1>,<U2> <br>
//!    This and the above algorithms initialize (or reinitialize) <br>
//!        this algorithm and compute a distribution of points: <br>
//! -   on the curve C, or <br>
//! -   on the part of curve C limited by the two <br>
//!   parameter values U1 and U2, <br>
//! where the deflection resulting from the distributed <br>
//! points is not greater than Deflection. <br>
//! The first point of the distribution is either the origin <br>
//! of curve C or the point of parameter U1. The last <br>
//! point of the distribution is either the end point of <br>
//! curve C or the point of parameter U2. <br>
//! Intermediate points of the distribution are built in <br>
//! such a way that the deflection is not greater than <br>
//! Deflection. Using the following evaluation of the deflection: <br>
//! if Pi and Pj are two consecutive points of the <br>
//! distribution, respectively of parameter ui and uj <br>
//! on the curve, the deflection is the distance between: <br>
//! -   the mid-point of Pi and Pj (the center of the <br>
//!   chord joining these two points) <br>
//! -   and the point of mid-parameter of these two <br>
//!   points (the point of parameter [(ui+uj) / 2 ] on curve C). <br>
//!   Continuity, defaulted to GeomAbs_C1, gives the <br>
//! degree of continuity of the curve C. (Note that C is <br>
//! an Adaptor3d_Curve or an <br>
//! Adaptor2d_Curve2d object, and does not know <br>
//! the degree of continuity of the underlying curve). <br>
//! Use the function IsDone to verify that the <br>
//! computation was successful, the function NbPoints <br>
//! to obtain the number of points of the computed <br>
//! distribution, and the function Parameter to read <br>
//! the parameter of each point. <br>
//! Warning <br>
//! -   The roles of U1 and U2 are inverted if U1 > U2. <br>
//! -   Derivative functions on the curve are called <br>
//!   according to Continuity. An error may occur if <br>
//!   Continuity is greater than the real degree of <br>
//!   continuity of the curve. <br>
//! Warning <br>
//! C is an adapted curve, i.e. an object which is an <br>
//! interface between: <br>
//! -   the services provided by either a 2D curve from <br>
//!   the package Geom2d (in the case of an <br>
//!   Adaptor2d_Curve2d curve) or a 3D curve from <br>
//!   the package Geom (in the case of an Adaptor3d_Curve curve), <br>
//! and those required on the curve by the computation algorithm. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Deflection, Standard_Real U1, Standard_Real U2, OCGeomAbs_Shape Continuity) ;


//! Returns true if the computation was successful. <br>
//! IsDone is a protection against: <br>
//! -   non-convergence of the algorithm <br>
//! -   querying the results before computation. <br>
 /*instead*/  System::Boolean IsDone() ;


//! Returns the number of points of the distribution <br>
//! computed by this algorithm. <br>
//! Exceptions <br>
//! StdFail_NotDone if this algorithm has not been <br>
//! initialized, or if the computation was not successful. <br>
 /*instead*/  Standard_Integer NbPoints() ;

//! Returns the parameter of the point of index Index in <br>
//! the distribution computed by this algorithm. <br>
//! Warning <br>
//! Index must be greater than or equal to 1, and less <br>
//! than or equal to the number of points of the <br>
//! distribution. However, pay particular attention as this <br>
//! condition is not checked by this function. <br>
//! Exceptions <br>
//! StdFail_NotDone if this algorithm has not been <br>
//! initialized, or if the computation was not successful. <br>
 /*instead*/  Standard_Real Parameter(Standard_Integer Index) ;

//! Returns the point of index Index in the distribution <br>
//! computed by this algorithm. <br>
//! Warning <br>
//! Index must be greater than or equal to 1, and less <br>
//! than or equal to the number of points of the <br>
//! distribution. However, pay particular attention as this <br>
//! condition is not checked by this function. <br>
//! Exceptions <br>
//! StdFail_NotDone if this algorithm has not been <br>
//! initialized, or if the computation was not successful. <br>
 /*instead*/  OCgp_Pnt^ Value(Standard_Integer Index) ;

//! Returns the deflection between the curve and the <br>
//! polygon resulting from the points of the distribution <br>
//! computed by this algorithm. <br>
//! This is the value given to the algorithm at the time <br>
//! of construction (or initialization). <br>
//! Exceptions <br>
//! StdFail_NotDone if this algorithm has not been <br>
//! initialized, or if the computation was not successful. <br>
 /*instead*/  Standard_Real Deflection() ;

~OCGCPnts_QuasiUniformDeflection()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
