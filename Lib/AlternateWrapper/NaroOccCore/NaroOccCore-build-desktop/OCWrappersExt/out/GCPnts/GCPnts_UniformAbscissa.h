// File generated by CPPExt (MPV)
//
#ifndef _GCPnts_UniformAbscissa_OCWrappers_HeaderFile
#define _GCPnts_UniformAbscissa_OCWrappers_HeaderFile

// include native header
#include <GCPnts_UniformAbscissa.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfReal;
ref class OCAdaptor3d_Curve;
ref class OCAdaptor2d_Curve2d;


//! This class allows to compute a uniform distribution of points <br>
//!          on a curve (ie the points will all be equally distant). <br>
public ref class OCGCPnts_UniformAbscissa  {

protected:
  GCPnts_UniformAbscissa* nativeHandle;
  OCGCPnts_UniformAbscissa(OCDummy^) {};

public:
  property GCPnts_UniformAbscissa* Handle
  {
    GCPnts_UniformAbscissa* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGCPnts_UniformAbscissa(GCPnts_UniformAbscissa* nativeHandle);

// Methods PUBLIC

//! creation of a indefinite UniformAbscissa <br>
OCGCPnts_UniformAbscissa();

//! Computes a uniform abscissa distribution of points on <br>
//!  the Curve <C>. Parameter Toler is equal Precision::Confusion by default. <br>
//!  It Is used for more precise calculation of curve length <br>
OCGCPnts_UniformAbscissa(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Abscissa, Standard_Real Toler);

//! Computes a Uniform abscissa distribution of points <br>
//!  on a part of the Curve <C>. Parameter Toler is equal Precision::Confusion by default. <br>
//!  It Is used for more precise calculation of curve length <br>
OCGCPnts_UniformAbscissa(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Abscissa, Standard_Real U1, Standard_Real U2, Standard_Real Toler);

//! Computes a uniform abscissa distribution of points on <br>
//!  the Curve <C>. <br>
//!  <NbPoints> defines the nomber of desired points. <br>
//!  Parameter Toler is equal Precision::Confusion by default. <br>
//!  It Is used for more precise calculation of curve length <br>
OCGCPnts_UniformAbscissa(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Integer NbPoints, Standard_Real Toler);

//! Computes a Uniform abscissa distribution of points <br>
//!  on a part of the Curve <C>. <br>
//!  Parameter Toler is equal Precision::Confusion by default. <br>
//!  It Is used for more precise calculation of curve length <br>
OCGCPnts_UniformAbscissa(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Integer NbPoints, Standard_Real U1, Standard_Real U2, Standard_Real Toler);

//! Initialize the algoritms with <C>, <Abscissa>, <Toler> <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Abscissa, Standard_Real Toler) ;

//! Initialize the algoritms with <C>, <Abscissa>, <U1>, <br>
//!          <U2>, <Toler> <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Abscissa, Standard_Real U1, Standard_Real U2, Standard_Real Toler) ;

//! Initialize the algoritms with <C>, <NbPoints>, <Toler> and <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Integer NbPoints, Standard_Real Toler) ;

//! Initialize the algoritms with <C>, <Abscissa>, <U1>, <br>
//!          <U2>, <Toler>. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Integer NbPoints, Standard_Real U1, Standard_Real U2, Standard_Real Toler) ;

//! Computes a uniform abscissa distribution of points on <br>
//!  the Curve2d <C>. <br>
//!  Parameter Toler is equal Precision::Confusion by default. <br>
//!  It Is used for more precise calculation of curve length <br>
OCGCPnts_UniformAbscissa(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Abscissa, Standard_Real Toler);

//! Computes a Uniform abscissa distribution of points <br>
//!  on a part of the Curve2d <C>. <br>
//!  Parameter Toler is equal Precision::Confusion by default. <br>
//!  It Is used for more precise calculation of curve length <br>
OCGCPnts_UniformAbscissa(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Abscissa, Standard_Real U1, Standard_Real U2, Standard_Real Toler);

//! Computes a uniform abscissa distribution of points on <br>
//!  the Curve2d <C>. <br>
//!  <NbPoints> defines the nomber of desired points. <br>
//!  Parameter Toler is equal Precision::Confusion by default. <br>
//!  It Is used for more precise calculation of curve length <br>
OCGCPnts_UniformAbscissa(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Integer NbPoints, Standard_Real Toler);

//! Computes a Uniform abscissa distribution of points <br>
//!  on a part of the Curve2d <C>. <br>
//!  Parameter Toler is equal Precision::Confusion by default. <br>
//!  It Is used for more precise calculation of curve length <br>
OCGCPnts_UniformAbscissa(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Integer NbPoints, Standard_Real U1, Standard_Real U2, Standard_Real Toler);

//! Initialize the algoritms with <C>, <Abscissa>, <Toler> <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Abscissa, Standard_Real Toler) ;

//! Initialize the algoritms with <C>, <Abscissa>, <U1>, <br>
//!          <U2>, <Toler> <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Abscissa, Standard_Real U1, Standard_Real U2, Standard_Real Toler) ;

//! Initialize the algoritms with <C>, <NbPoints>, <Toler> and <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Integer NbPoints, Standard_Real Toler) ;

//! Initialize the algoritms with <C>, <Abscissa>, <U1>, <br>
//!          <U2>, <Toler>. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Integer NbPoints, Standard_Real U1, Standard_Real U2, Standard_Real Toler) ;


 /*instead*/  System::Boolean IsDone() ;


 /*instead*/  Standard_Integer NbPoints() ;

//! returns the computed Parameter of index <Index>. <br>
 /*instead*/  Standard_Real Parameter(Standard_Integer Index) ;

//! returne the current abscissa <br>
//! ie the distance between two consecutive points <br>
 /*instead*/  Standard_Real Abscissa() ;

~OCGCPnts_UniformAbscissa()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
