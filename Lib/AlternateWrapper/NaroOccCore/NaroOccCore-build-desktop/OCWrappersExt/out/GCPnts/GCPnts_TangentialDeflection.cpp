// File generated by CPPExt (CPP file)
//

#include "GCPnts_TangentialDeflection.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_Curve.h"
#include "../Adaptor2d/Adaptor2d_Curve2d.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCGCPnts_TangentialDeflection::OCGCPnts_TangentialDeflection(GCPnts_TangentialDeflection* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGCPnts_TangentialDeflection::OCGCPnts_TangentialDeflection() 
{
  nativeHandle = new GCPnts_TangentialDeflection();
}

OCGCPnts_TangentialDeflection::OCGCPnts_TangentialDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol) 
{
  nativeHandle = new GCPnts_TangentialDeflection(*((Adaptor3d_Curve*)C->Handle), AngularDeflection, CurvatureDeflection, MinimumOfPoints, UTol);
}

OCGCPnts_TangentialDeflection::OCGCPnts_TangentialDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol) 
{
  nativeHandle = new GCPnts_TangentialDeflection(*((Adaptor3d_Curve*)C->Handle), FirstParameter, LastParameter, AngularDeflection, CurvatureDeflection, MinimumOfPoints, UTol);
}

OCGCPnts_TangentialDeflection::OCGCPnts_TangentialDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol) 
{
  nativeHandle = new GCPnts_TangentialDeflection(*((Adaptor2d_Curve2d*)C->Handle), AngularDeflection, CurvatureDeflection, MinimumOfPoints, UTol);
}

OCGCPnts_TangentialDeflection::OCGCPnts_TangentialDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol) 
{
  nativeHandle = new GCPnts_TangentialDeflection(*((Adaptor2d_Curve2d*)C->Handle), FirstParameter, LastParameter, AngularDeflection, CurvatureDeflection, MinimumOfPoints, UTol);
}

 void OCGCPnts_TangentialDeflection::Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol)
{
  ((GCPnts_TangentialDeflection*)nativeHandle)->Initialize(*((Adaptor3d_Curve*)C->Handle), AngularDeflection, CurvatureDeflection, MinimumOfPoints, UTol);
}

 void OCGCPnts_TangentialDeflection::Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol)
{
  ((GCPnts_TangentialDeflection*)nativeHandle)->Initialize(*((Adaptor3d_Curve*)C->Handle), FirstParameter, LastParameter, AngularDeflection, CurvatureDeflection, MinimumOfPoints, UTol);
}

 void OCGCPnts_TangentialDeflection::Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol)
{
  ((GCPnts_TangentialDeflection*)nativeHandle)->Initialize(*((Adaptor2d_Curve2d*)C->Handle), AngularDeflection, CurvatureDeflection, MinimumOfPoints, UTol);
}

 void OCGCPnts_TangentialDeflection::Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol)
{
  ((GCPnts_TangentialDeflection*)nativeHandle)->Initialize(*((Adaptor2d_Curve2d*)C->Handle), FirstParameter, LastParameter, AngularDeflection, CurvatureDeflection, MinimumOfPoints, UTol);
}

 Standard_Integer OCGCPnts_TangentialDeflection::AddPoint(OCNaroWrappers::OCgp_Pnt^ thePnt, Standard_Real theParam, System::Boolean theIsReplace)
{
  return ((GCPnts_TangentialDeflection*)nativeHandle)->AddPoint(*((gp_Pnt*)thePnt->Handle), theParam, OCConverter::BooleanToStandardBoolean(theIsReplace));
}

 Standard_Integer OCGCPnts_TangentialDeflection::NbPoints()
{
  return ((GCPnts_TangentialDeflection*)nativeHandle)->NbPoints();
}

 Standard_Real OCGCPnts_TangentialDeflection::Parameter(Standard_Integer I)
{
  return ((GCPnts_TangentialDeflection*)nativeHandle)->Parameter(I);
}

OCgp_Pnt^ OCGCPnts_TangentialDeflection::Value(Standard_Integer I)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((GCPnts_TangentialDeflection*)nativeHandle)->Value(I);
  return gcnew OCgp_Pnt(tmp);
}


