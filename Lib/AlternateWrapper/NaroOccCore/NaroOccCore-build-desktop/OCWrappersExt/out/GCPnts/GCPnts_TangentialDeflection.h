// File generated by CPPExt (MPV)
//
#ifndef _GCPnts_TangentialDeflection_OCWrappers_HeaderFile
#define _GCPnts_TangentialDeflection_OCWrappers_HeaderFile

// include native header
#include <GCPnts_TangentialDeflection.hxx>
#include "../Converter.h"


#include "../TColgp/TColgp_SequenceOfPnt.h"
#include "../TColStd/TColStd_SequenceOfReal.h"
#include "../gp/gp_Pnt.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Curve;
ref class OCAdaptor2d_Curve2d;
ref class OCgp_Pnt;


//!  Computes a set of  points on a curve from package <br>
//!          Adaptor3d  such  as between  two successive   points <br>
//!          P1(u1)and P2(u2) : <br>
//! <br>
//!         . ||P1P3^P3P2||/||P1P3||*||P3P2||<AngularDeflection <br>
//!         . ||P1P2^P1P3||/||P1P2||*||P1P3||<CurvatureDeflection <br>
public ref class OCGCPnts_TangentialDeflection  {

protected:
  GCPnts_TangentialDeflection* nativeHandle;
  OCGCPnts_TangentialDeflection(OCDummy^) {};

public:
  property GCPnts_TangentialDeflection* Handle
  {
    GCPnts_TangentialDeflection* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGCPnts_TangentialDeflection(GCPnts_TangentialDeflection* nativeHandle);

// Methods PUBLIC


OCGCPnts_TangentialDeflection();


OCGCPnts_TangentialDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol);


OCGCPnts_TangentialDeflection(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol);


OCGCPnts_TangentialDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol);


OCGCPnts_TangentialDeflection(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol);


 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol) ;


 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol) ;


 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol) ;


 /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real FirstParameter, Standard_Real LastParameter, Standard_Real AngularDeflection, Standard_Real CurvatureDeflection, Standard_Integer MinimumOfPoints, Standard_Real UTol) ;

//! Add point to already calculated points (or replace existing) <br>
//!          Returns index of new added point <br>
//!           or founded with parametric tolerance (replaced if theIsReplace is true) <br>
 /*instead*/  Standard_Integer AddPoint(OCNaroWrappers::OCgp_Pnt^ thePnt, Standard_Real theParam, System::Boolean theIsReplace) ;


 /*instead*/  Standard_Integer NbPoints() ;


 /*instead*/  Standard_Real Parameter(Standard_Integer I) ;


 /*instead*/  OCgp_Pnt^ Value(Standard_Integer I) ;

~OCGCPnts_TangentialDeflection()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
