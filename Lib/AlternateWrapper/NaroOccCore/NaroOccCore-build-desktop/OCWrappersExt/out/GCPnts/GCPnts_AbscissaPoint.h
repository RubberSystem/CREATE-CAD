// File generated by CPPExt (MPV)
//
#ifndef _GCPnts_AbscissaPoint_OCWrappers_HeaderFile
#define _GCPnts_AbscissaPoint_OCWrappers_HeaderFile

// include native header
#include <GCPnts_AbscissaPoint.hxx>
#include "../Converter.h"


#include "../CPnts/CPnts_AbscissaPoint.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_Curve;
ref class OCAdaptor2d_Curve2d;


//! Provides an algorithm to compute a point on a curve <br>
//! situated at a given distance from another point on the <br>
//! curve, the distance being measured along the curve <br>
//! (curvilinear abscissa on the curve). <br>
//! This algorithm is also used to compute the length of a curve. <br>
//! An AbscissaPoint object provides a framework for: <br>
//! -   defining the point to compute <br>
//! -   implementing the construction algorithm <br>
//! -   consulting the result. <br>
public ref class OCGCPnts_AbscissaPoint  {

protected:
  GCPnts_AbscissaPoint* nativeHandle;
  OCGCPnts_AbscissaPoint(OCDummy^) {};

public:
  property GCPnts_AbscissaPoint* Handle
  {
    GCPnts_AbscissaPoint* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGCPnts_AbscissaPoint(GCPnts_AbscissaPoint* nativeHandle);

// Methods PUBLIC

//! Computes the length of the Curve <C>. <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCAdaptor3d_Curve^ C) ;

//! Computes the length of the Curve <C>. <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCAdaptor2d_Curve2d^ C) ;

//! Computes the length of the Curve <C> with the given tolerance. <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Tol) ;

//! Computes the length of the Curve <C> with the given tolerance. <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Tol) ;

//! Computes the length of the Curve <C>. <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real U1, Standard_Real U2) ;

//! Computes the length of the Curve <C>. <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U1, Standard_Real U2) ;

//! Computes the length of the Curve <C> with the given tolerance. <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real U1, Standard_Real U2, Standard_Real Tol) ;

//! Computes the length of the Curve <C> with the given tolerance. <br>//! Constructs an empty algorithm. This function is used <br>
//! only for initializing a framework to compute the length <br>
//! of a curve (or a series of curves). <br>
//! Warning <br>
//! The function IsDone will return the value false after the use of this function. <br>
static /*instead*/  Standard_Real Length(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real U1, Standard_Real U2, Standard_Real Tol) ;


OCGCPnts_AbscissaPoint();

//! the algorithm computes a point on a curve <Curve> at the <br>
//!          distance <Abscissa> from the point of parameter <U0>. <br>
OCGCPnts_AbscissaPoint(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Abscissa, Standard_Real U0);

//! the  algorithm computes a point on  a curve <Curve> at <br>
//!           the distance  <Abscissa> from the  point of parameter <br>
//!          <U0> with the given  tolerance. <br>
OCGCPnts_AbscissaPoint(Standard_Real Tol, OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Abscissa, Standard_Real U0);

//! the  algorithm computes a point on  a curve <Curve> at <br>
//!           the distance  <Abscissa> from the  point of parameter <br>
//!          <U0> with the given  tolerance. <br>
OCGCPnts_AbscissaPoint(Standard_Real Tol, OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Abscissa, Standard_Real U0);

//! the algorithm computes a point on a curve <Curve> at the <br>
//!          distance <Abscissa> from the point of parameter <U0>. <br>
OCGCPnts_AbscissaPoint(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Abscissa, Standard_Real U0);

//! the algorithm computes a point on a curve <Curve> at the <br>
//!          distance <Abscissa> from the point of parameter <U0>. <br>
//!          <Ui> is the starting value used in the iterative process <br>
//!          which find the solution, it must be close to the final <br>
//!          solution <br>
OCGCPnts_AbscissaPoint(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Abscissa, Standard_Real U0, Standard_Real Ui);

//! the algorithm computes a point on a curve <Curve> at the <br>
//!          distance <Abscissa> from the point of parameter <U0>. <br>
//!          <Ui> is the starting value used in the iterative process <br>
//!          which find the solution, it must be closed to the final <br>
//!          solution <br>
OCGCPnts_AbscissaPoint(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Abscissa, Standard_Real U0, Standard_Real Ui);

//! the algorithm computes a point on a curve <Curve> at the <br>
//!          distance <Abscissa> from the point of parameter <U0>. <br>
//!          <Ui> is the starting value used in the iterative process <br>
//!          which find the solution, it must be close to the final <br>
//!          solution <br>
OCGCPnts_AbscissaPoint(OCNaroWrappers::OCAdaptor3d_Curve^ C, Standard_Real Abscissa, Standard_Real U0, Standard_Real Ui, Standard_Real Tol);

//! the algorithm computes a point on a curve <Curve> at the <br>
//!          distance <Abscissa> from the point of parameter <U0>. <br>
//!          <Ui> is the starting value used in the iterative process <br>
//!          which find the solution, it must be close to the final <br>
//!          solution <br>
OCGCPnts_AbscissaPoint(OCNaroWrappers::OCAdaptor2d_Curve2d^ C, Standard_Real Abscissa, Standard_Real U0, Standard_Real Ui, Standard_Real Tol);

//! True if the computation was successful, False otherwise. <br>
//!   IsDone is a protection against: <br>
//! -   non-convergence of the algorithm <br>
//! -   querying the results before computation. <br>
 /*instead*/  System::Boolean IsDone() ;

//! Returns the parameter on the curve of the point <br>
//! solution of this algorithm. <br>
//! Exceptions <br>
//! StdFail_NotDone if the computation was not <br>
//! successful, or was not done. <br>
 /*instead*/  Standard_Real Parameter() ;

~OCGCPnts_AbscissaPoint()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
