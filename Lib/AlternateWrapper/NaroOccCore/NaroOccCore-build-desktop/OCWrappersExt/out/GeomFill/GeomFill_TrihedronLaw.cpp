// File generated by CPPExt (CPP file)
//

#include "GeomFill_TrihedronLaw.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../gp/gp_Vec.h"
#include "../TColStd/TColStd_Array1OfReal.h"


using namespace OCNaroWrappers;

OCGeomFill_TrihedronLaw::OCGeomFill_TrihedronLaw(Handle(GeomFill_TrihedronLaw)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_GeomFill_TrihedronLaw(*nativeHandle);
}

 void OCGeomFill_TrihedronLaw::SetCurve(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  (*((Handle_GeomFill_TrihedronLaw*)nativeHandle))->SetCurve(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

 OCGeomFill_PipeError OCGeomFill_TrihedronLaw::ErrorStatus()
{
  return (OCGeomFill_PipeError)((*((Handle_GeomFill_TrihedronLaw*)nativeHandle))->ErrorStatus());
}

 System::Boolean OCGeomFill_TrihedronLaw::D1(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_TrihedronLaw*)nativeHandle))->D1(Param, *((gp_Vec*)Tangent->Handle), *((gp_Vec*)DTangent->Handle), *((gp_Vec*)Normal->Handle), *((gp_Vec*)DNormal->Handle), *((gp_Vec*)BiNormal->Handle), *((gp_Vec*)DBiNormal->Handle)));
}

 System::Boolean OCGeomFill_TrihedronLaw::D2(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ D2Tangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ D2Normal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal, OCNaroWrappers::OCgp_Vec^ D2BiNormal)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_TrihedronLaw*)nativeHandle))->D2(Param, *((gp_Vec*)Tangent->Handle), *((gp_Vec*)DTangent->Handle), *((gp_Vec*)D2Tangent->Handle), *((gp_Vec*)Normal->Handle), *((gp_Vec*)DNormal->Handle), *((gp_Vec*)D2Normal->Handle), *((gp_Vec*)BiNormal->Handle), *((gp_Vec*)DBiNormal->Handle), *((gp_Vec*)D2BiNormal->Handle)));
}

 void OCGeomFill_TrihedronLaw::SetInterval(Standard_Real First, Standard_Real Last)
{
  (*((Handle_GeomFill_TrihedronLaw*)nativeHandle))->SetInterval(First, Last);
}

 void OCGeomFill_TrihedronLaw::GetInterval(Standard_Real& First, Standard_Real& Last)
{
  (*((Handle_GeomFill_TrihedronLaw*)nativeHandle))->GetInterval(First, Last);
}

 System::Boolean OCGeomFill_TrihedronLaw::IsConstant()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_TrihedronLaw*)nativeHandle))->IsConstant());
}

 System::Boolean OCGeomFill_TrihedronLaw::IsOnlyBy3dCurve()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_TrihedronLaw*)nativeHandle))->IsOnlyBy3dCurve());
}


