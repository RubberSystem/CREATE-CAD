// File generated by CPPExt (CPP file)
//

#include "GeomFill_LocationLaw.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../gp/gp_Mat.h"
#include "../gp/gp_Vec.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../TColgp/TColgp_Array1OfVec2d.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCGeomFill_LocationLaw::OCGeomFill_LocationLaw(Handle(GeomFill_LocationLaw)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_GeomFill_LocationLaw(*nativeHandle);
}

 System::Boolean OCGeomFill_LocationLaw::D1(Standard_Real Param, OCNaroWrappers::OCgp_Mat^ M, OCNaroWrappers::OCgp_Vec^ V, OCNaroWrappers::OCgp_Mat^ DM, OCNaroWrappers::OCgp_Vec^ DV, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationLaw*)nativeHandle))->D1(Param, *((gp_Mat*)M->Handle), *((gp_Vec*)V->Handle), *((gp_Mat*)DM->Handle), *((gp_Vec*)DV->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColgp_Array1OfVec2d*)DPoles2d->Handle)));
}

 System::Boolean OCGeomFill_LocationLaw::D2(Standard_Real Param, OCNaroWrappers::OCgp_Mat^ M, OCNaroWrappers::OCgp_Vec^ V, OCNaroWrappers::OCgp_Mat^ DM, OCNaroWrappers::OCgp_Vec^ DV, OCNaroWrappers::OCgp_Mat^ D2M, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ D2Poles2d)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationLaw*)nativeHandle))->D2(Param, *((gp_Mat*)M->Handle), *((gp_Vec*)V->Handle), *((gp_Mat*)DM->Handle), *((gp_Vec*)DV->Handle), *((gp_Mat*)D2M->Handle), *((gp_Vec*)D2V->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColgp_Array1OfVec2d*)DPoles2d->Handle), *((TColgp_Array1OfVec2d*)D2Poles2d->Handle)));
}

 Standard_Integer OCGeomFill_LocationLaw::Nb2dCurves()
{
  return (*((Handle_GeomFill_LocationLaw*)nativeHandle))->Nb2dCurves();
}

 System::Boolean OCGeomFill_LocationLaw::HasFirstRestriction()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationLaw*)nativeHandle))->HasFirstRestriction());
}

 System::Boolean OCGeomFill_LocationLaw::HasLastRestriction()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationLaw*)nativeHandle))->HasLastRestriction());
}

 Standard_Integer OCGeomFill_LocationLaw::TraceNumber()
{
  return (*((Handle_GeomFill_LocationLaw*)nativeHandle))->TraceNumber();
}

 OCGeomFill_PipeError OCGeomFill_LocationLaw::ErrorStatus()
{
  return (OCGeomFill_PipeError)((*((Handle_GeomFill_LocationLaw*)nativeHandle))->ErrorStatus());
}

 void OCGeomFill_LocationLaw::Resolution(Standard_Integer Index, Standard_Real Tol, Standard_Real& TolU, Standard_Real& TolV)
{
  (*((Handle_GeomFill_LocationLaw*)nativeHandle))->Resolution(Index, Tol, TolU, TolV);
}

 void OCGeomFill_LocationLaw::SetTolerance(Standard_Real Tol3d, Standard_Real Tol2d)
{
  (*((Handle_GeomFill_LocationLaw*)nativeHandle))->SetTolerance(Tol3d, Tol2d);
}

 System::Boolean OCGeomFill_LocationLaw::IsTranslation(Standard_Real& Error)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationLaw*)nativeHandle))->IsTranslation(Error));
}

 System::Boolean OCGeomFill_LocationLaw::IsRotation(Standard_Real& Error)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationLaw*)nativeHandle))->IsRotation(Error));
}

 void OCGeomFill_LocationLaw::Rotation(OCNaroWrappers::OCgp_Pnt^ Center)
{
  (*((Handle_GeomFill_LocationLaw*)nativeHandle))->Rotation(*((gp_Pnt*)Center->Handle));
}


