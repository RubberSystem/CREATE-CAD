// File generated by CPPExt (Transient)
//
#ifndef _GeomFill_ConstantBiNormal_OCWrappers_HeaderFile
#define _GeomFill_ConstantBiNormal_OCWrappers_HeaderFile

// include the wrapped class
#include <GeomFill_ConstantBiNormal.hxx>
#include "../Converter.h"

#include "GeomFill_TrihedronLaw.h"

#include "../gp/gp_Vec.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeomFill_Frenet;
ref class OCgp_Dir;
ref class OCGeomFill_TrihedronLaw;
ref class OCAdaptor3d_HCurve;
ref class OCgp_Vec;
ref class OCTColStd_Array1OfReal;


//! Defined an Trihedron Law  where the BiNormal, is fixed <br>
public ref class OCGeomFill_ConstantBiNormal : OCGeomFill_TrihedronLaw {

protected:
  // dummy constructor;
  OCGeomFill_ConstantBiNormal(OCDummy^) : OCGeomFill_TrihedronLaw((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeomFill_ConstantBiNormal(Handle(GeomFill_ConstantBiNormal)* nativeHandle);

// Methods PUBLIC


OCGeomFill_ConstantBiNormal(OCNaroWrappers::OCgp_Dir^ BiNormal);


virtual /*instead*/  OCGeomFill_TrihedronLaw^ Copy() ;


virtual /*instead*/  void SetCurve(OCNaroWrappers::OCAdaptor3d_HCurve^ C) override;

//! Computes Triedrhon on curve at parameter <Param> <br>
virtual /*instead*/  System::Boolean D0(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ BiNormal) ;

//! Computes Triedrhon and  derivative Trihedron  on curve <br>
//!          at parameter <Param> <br>
//!  Warning : It used only for C1 or C2 aproximation <br>
virtual /*instead*/  System::Boolean D1(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal) override;

//! compute  Trihedron on curve <br>
//!          first and seconde  derivatives. <br>
//!  Warning : It used only for C2 aproximation <br>
virtual /*instead*/  System::Boolean D2(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ D2Tangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ D2Normal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal, OCNaroWrappers::OCgp_Vec^ D2BiNormal) override;

//! Returns  the number  of  intervals for  continuity <br>
//!          <S>. <br>
//!          May be one if Continuity(me) >= <S> <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) ;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;

//! Gets average value of Tangent(t) and Normal(t) it is usfull to <br>
//!          make fast approximation of rational  surfaces. <br>
virtual /*instead*/  void GetAverageLaw(OCNaroWrappers::OCgp_Vec^ ATangent, OCNaroWrappers::OCgp_Vec^ ANormal, OCNaroWrappers::OCgp_Vec^ ABiNormal) ;

//!  Says if the law is Constant. <br>
virtual /*instead*/  System::Boolean IsConstant() override;

//! Return True. <br>
virtual /*instead*/  System::Boolean IsOnlyBy3dCurve() override;

~OCGeomFill_ConstantBiNormal()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
