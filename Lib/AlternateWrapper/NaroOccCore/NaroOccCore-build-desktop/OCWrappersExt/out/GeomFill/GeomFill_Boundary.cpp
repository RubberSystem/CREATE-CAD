// File generated by CPPExt (CPP file)
//

#include "GeomFill_Boundary.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"


using namespace OCNaroWrappers;

OCGeomFill_Boundary::OCGeomFill_Boundary(Handle(GeomFill_Boundary)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_GeomFill_Boundary(*nativeHandle);
}

OCGeomFill_Boundary::OCGeomFill_Boundary(Standard_Real Tol3d, Standard_Real Tolang) : OCMMgt_TShared((OCDummy^)nullptr)

{}

 System::Boolean OCGeomFill_Boundary::HasNormals()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_Boundary*)nativeHandle))->HasNormals());
}

OCgp_Vec^ OCGeomFill_Boundary::Norm(Standard_Real U)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_GeomFill_Boundary*)nativeHandle))->Norm(U);
  return gcnew OCgp_Vec(tmp);
}

 void OCGeomFill_Boundary::D1Norm(Standard_Real U, OCNaroWrappers::OCgp_Vec^ N, OCNaroWrappers::OCgp_Vec^ DN)
{
  (*((Handle_GeomFill_Boundary*)nativeHandle))->D1Norm(U, *((gp_Vec*)N->Handle), *((gp_Vec*)DN->Handle));
}

 void OCGeomFill_Boundary::Points(OCNaroWrappers::OCgp_Pnt^ PFirst, OCNaroWrappers::OCgp_Pnt^ PLast)
{
  (*((Handle_GeomFill_Boundary*)nativeHandle))->Points(*((gp_Pnt*)PFirst->Handle), *((gp_Pnt*)PLast->Handle));
}

 Standard_Real OCGeomFill_Boundary::Tol3d()
{
  return (*((Handle_GeomFill_Boundary*)nativeHandle))->Tol3d();
}

 void OCGeomFill_Boundary::Tol3d(Standard_Real Tol)
{
  (*((Handle_GeomFill_Boundary*)nativeHandle))->Tol3d(Tol);
}

 Standard_Real OCGeomFill_Boundary::Tolang()
{
  return (*((Handle_GeomFill_Boundary*)nativeHandle))->Tolang();
}

 void OCGeomFill_Boundary::Tolang(Standard_Real Tol)
{
  (*((Handle_GeomFill_Boundary*)nativeHandle))->Tolang(Tol);
}


