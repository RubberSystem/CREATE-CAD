// File generated by CPPExt (Package)
//

#ifndef _GeomFill_OCWrappers_HeaderFile
#define _GeomFill_OCWrappers_HeaderFile

// Include the wrapped header
#include <GeomFill.hxx>

#include "GeomFill_Filling.h"
#include "GeomFill_Stretch.h"
#include "GeomFill_Coons.h"
#include "GeomFill_Curved.h"
#include "GeomFill_BezierCurves.h"
#include "GeomFill_BSplineCurves.h"
#include "GeomFill_Profiler.h"
#include "GeomFill_SectionGenerator.h"
#include "GeomFill_Line.h"
#include "GeomFill_AppSurf.h"
#include "GeomFill_SweepSectionGenerator.h"
#include "GeomFill_AppSweep.h"
#include "GeomFill_Generator.h"
#include "GeomFill_Pipe.h"
#include "GeomFill_Tensor.h"
#include "GeomFill_ConstrainedFilling.h"
#include "GeomFill_Boundary.h"
#include "GeomFill_DegeneratedBound.h"
#include "GeomFill_SimpleBound.h"
#include "GeomFill_BoundWithSurf.h"
#include "GeomFill_CoonsAlgPatch.h"
#include "GeomFill_TgtField.h"
#include "GeomFill_TgtOnCoons.h"
#include "GeomFill_CornerState.h"
#include "GeomFill_SequenceOfTrsf.h"
#include "GeomFill_CircularBlendFunc.h"
#include "GeomFill_SweepFunction.h"
#include "GeomFill_LocFunction.h"
#include "GeomFill_PolynomialConvertor.h"
#include "GeomFill_QuasiAngularConvertor.h"
#include "GeomFill_SnglrFunc.h"
#include "GeomFill_FunctionDraft.h"
#include "GeomFill_PlanFunc.h"
#include "GeomFill_FunctionGuide.h"
#include "GeomFill_SectionLaw.h"
#include "GeomFill_UniformSection.h"
#include "GeomFill_EvolvedSection.h"
#include "GeomFill_NSections.h"
#include "GeomFill_LocationLaw.h"
#include "GeomFill_CurveAndTrihedron.h"
#include "GeomFill_LocationDraft.h"
#include "GeomFill_LocationGuide.h"
#include "GeomFill_TrihedronLaw.h"
#include "GeomFill_Fixed.h"
#include "GeomFill_Frenet.h"
#include "GeomFill_CorrectedFrenet.h"
#include "GeomFill_ConstantBiNormal.h"
#include "GeomFill_Darboux.h"
#include "GeomFill_DraftTrihedron.h"
#include "GeomFill_TrihedronWithGuide.h"
#include "GeomFill_GuideTrihedronAC.h"
#include "GeomFill_GuideTrihedronPlan.h"
#include "GeomFill_Sweep.h"
#include "GeomFill_SectionPlacement.h"
#include "GeomFill_Array1OfSectionLaw.h"
#include "GeomFill_HArray1OfSectionLaw.h"
#include "GeomFill_Array1OfLocationLaw.h"
#include "GeomFill_HArray1OfLocationLaw.h"
#include "GeomFill_SequenceNodeOfSequenceOfTrsf.h"


namespace OCNaroWrappers
{
//! Tools and Data to filling Surface and Sweep Surfaces <br>
public ref class OCGeomFill abstract sealed
{

public:
// Methods


//! Builds a ruled surface between the two curves, Curve1 and Curve2. <br>
static /*instead*/  OCGeom_Surface^ Surface(OCNaroWrappers::OCGeom_Curve^ Curve1, OCNaroWrappers::OCGeom_Curve^ Curve2) ;


static /*instead*/  void GetCircle(OCConvert_ParameterisationType TConv, OCNaroWrappers::OCgp_Vec^ ns1, OCNaroWrappers::OCgp_Vec^ ns2, OCNaroWrappers::OCgp_Vec^ nplan, OCNaroWrappers::OCgp_Pnt^ pt1, OCNaroWrappers::OCgp_Pnt^ pt2, Standard_Real Rayon, OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths) ;


static /*instead*/  System::Boolean GetCircle(OCConvert_ParameterisationType TConv, OCNaroWrappers::OCgp_Vec^ ns1, OCNaroWrappers::OCgp_Vec^ ns2, OCNaroWrappers::OCgp_Vec^ dn1w, OCNaroWrappers::OCgp_Vec^ dn2w, OCNaroWrappers::OCgp_Vec^ nplan, OCNaroWrappers::OCgp_Vec^ dnplan, OCNaroWrappers::OCgp_Pnt^ pts1, OCNaroWrappers::OCgp_Pnt^ pts2, OCNaroWrappers::OCgp_Vec^ tang1, OCNaroWrappers::OCgp_Vec^ tang2, Standard_Real Rayon, Standard_Real DRayon, OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Vec^ DCenter, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths) ;


static /*instead*/  System::Boolean GetCircle(OCConvert_ParameterisationType TConv, OCNaroWrappers::OCgp_Vec^ ns1, OCNaroWrappers::OCgp_Vec^ ns2, OCNaroWrappers::OCgp_Vec^ dn1w, OCNaroWrappers::OCgp_Vec^ dn2w, OCNaroWrappers::OCgp_Vec^ d2n1w, OCNaroWrappers::OCgp_Vec^ d2n2w, OCNaroWrappers::OCgp_Vec^ nplan, OCNaroWrappers::OCgp_Vec^ dnplan, OCNaroWrappers::OCgp_Vec^ d2nplan, OCNaroWrappers::OCgp_Pnt^ pts1, OCNaroWrappers::OCgp_Pnt^ pts2, OCNaroWrappers::OCgp_Vec^ tang1, OCNaroWrappers::OCgp_Vec^ tang2, OCNaroWrappers::OCgp_Vec^ Dtang1, OCNaroWrappers::OCgp_Vec^ Dtang2, Standard_Real Rayon, Standard_Real DRayon, Standard_Real D2Rayon, OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Vec^ DCenter, OCNaroWrappers::OCgp_Vec^ D2Center, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColgp_Array1OfVec^ D2Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths, OCNaroWrappers::OCTColStd_Array1OfReal^ D2Weigths) ;


static /*instead*/  void GetShape(Standard_Real MaxAng, Standard_Integer& NbPoles, Standard_Integer& NbKnots, Standard_Integer& Degree, OCConvert_ParameterisationType& TypeConv) ;


static /*instead*/  void Knots(OCConvert_ParameterisationType TypeConv, OCNaroWrappers::OCTColStd_Array1OfReal^ TKnots) ;


static /*instead*/  void Mults(OCConvert_ParameterisationType TypeConv, OCNaroWrappers::OCTColStd_Array1OfInteger^ TMults) ;


static /*instead*/  void GetMinimalWeights(OCConvert_ParameterisationType TConv, Standard_Real AngleMin, Standard_Real AngleMax, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths) ;


static /*instead*/  Standard_Real GetTolerance(OCConvert_ParameterisationType TConv, Standard_Real AngleMin, Standard_Real Radius, Standard_Real AngularTol, Standard_Real SpatialTol) ;


};

}; // OCNaroWrappers

#endif
