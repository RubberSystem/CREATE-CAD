// File generated by CPPExt (CPP file)
//

#include "GeomFill_GuideTrihedronAC.h"
#include "../Converter.h"
#include "../Approx/Approx_CurvlinFunc.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "GeomFill_TrihedronLaw.h"
#include "../gp/gp_Vec.h"
#include "../TColStd/TColStd_Array1OfReal.h"


using namespace OCNaroWrappers;

OCGeomFill_GuideTrihedronAC::OCGeomFill_GuideTrihedronAC(Handle(GeomFill_GuideTrihedronAC)* nativeHandle) : OCGeomFill_TrihedronWithGuide((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_GeomFill_GuideTrihedronAC(*nativeHandle);
}

OCGeomFill_GuideTrihedronAC::OCGeomFill_GuideTrihedronAC(OCNaroWrappers::OCAdaptor3d_HCurve^ guide) : OCGeomFill_TrihedronWithGuide((OCDummy^)nullptr)

{
  nativeHandle = new Handle_GeomFill_GuideTrihedronAC(new GeomFill_GuideTrihedronAC(*((Handle_Adaptor3d_HCurve*)guide->Handle)));
}

 void OCGeomFill_GuideTrihedronAC::SetCurve(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  (*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->SetCurve(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

OCGeomFill_TrihedronLaw^ OCGeomFill_GuideTrihedronAC::Copy()
{
  Handle(GeomFill_TrihedronLaw) tmp = (*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->Copy();
  return gcnew OCGeomFill_TrihedronLaw(&tmp);
}

OCAdaptor3d_HCurve^ OCGeomFill_GuideTrihedronAC::Guide()
{
  Handle(Adaptor3d_HCurve) tmp = (*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->Guide();
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 System::Boolean OCGeomFill_GuideTrihedronAC::D0(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ BiNormal)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->D0(Param, *((gp_Vec*)Tangent->Handle), *((gp_Vec*)Normal->Handle), *((gp_Vec*)BiNormal->Handle)));
}

 System::Boolean OCGeomFill_GuideTrihedronAC::D1(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->D1(Param, *((gp_Vec*)Tangent->Handle), *((gp_Vec*)DTangent->Handle), *((gp_Vec*)Normal->Handle), *((gp_Vec*)DNormal->Handle), *((gp_Vec*)BiNormal->Handle), *((gp_Vec*)DBiNormal->Handle)));
}

 System::Boolean OCGeomFill_GuideTrihedronAC::D2(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ D2Tangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ D2Normal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal, OCNaroWrappers::OCgp_Vec^ D2BiNormal)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->D2(Param, *((gp_Vec*)Tangent->Handle), *((gp_Vec*)DTangent->Handle), *((gp_Vec*)D2Tangent->Handle), *((gp_Vec*)Normal->Handle), *((gp_Vec*)DNormal->Handle), *((gp_Vec*)D2Normal->Handle), *((gp_Vec*)BiNormal->Handle), *((gp_Vec*)DBiNormal->Handle), *((gp_Vec*)D2BiNormal->Handle)));
}

 Standard_Integer OCGeomFill_GuideTrihedronAC::NbIntervals(OCGeomAbs_Shape S)
{
  return (*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->NbIntervals((GeomAbs_Shape)S);
}

 void OCGeomFill_GuideTrihedronAC::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  (*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 void OCGeomFill_GuideTrihedronAC::SetInterval(Standard_Real First, Standard_Real Last)
{
  (*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->SetInterval(First, Last);
}

 void OCGeomFill_GuideTrihedronAC::GetAverageLaw(OCNaroWrappers::OCgp_Vec^ ATangent, OCNaroWrappers::OCgp_Vec^ ANormal, OCNaroWrappers::OCgp_Vec^ ABiNormal)
{
  (*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->GetAverageLaw(*((gp_Vec*)ATangent->Handle), *((gp_Vec*)ANormal->Handle), *((gp_Vec*)ABiNormal->Handle));
}

 System::Boolean OCGeomFill_GuideTrihedronAC::IsConstant()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->IsConstant());
}

 System::Boolean OCGeomFill_GuideTrihedronAC::IsOnlyBy3dCurve()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->IsOnlyBy3dCurve());
}

 void OCGeomFill_GuideTrihedronAC::Origine(Standard_Real OrACR1, Standard_Real OrACR2)
{
  (*((Handle_GeomFill_GuideTrihedronAC*)nativeHandle))->Origine(OrACR1, OrACR2);
}


