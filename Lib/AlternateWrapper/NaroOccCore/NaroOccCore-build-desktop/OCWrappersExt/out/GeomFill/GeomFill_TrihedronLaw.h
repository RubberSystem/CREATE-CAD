// File generated by CPPExt (Transient)
//
#ifndef _GeomFill_TrihedronLaw_OCWrappers_HeaderFile
#define _GeomFill_TrihedronLaw_OCWrappers_HeaderFile

// include the wrapped class
#include <GeomFill_TrihedronLaw.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "GeomFill_PipeError.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HCurve;
ref class OCgp_Vec;
ref class OCTColStd_Array1OfReal;


//! To define Trihedron along one Curve <br>
public ref class OCGeomFill_TrihedronLaw : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCGeomFill_TrihedronLaw(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeomFill_TrihedronLaw(Handle(GeomFill_TrihedronLaw)* nativeHandle);

// Methods PUBLIC


virtual /*instead*/  void SetCurve(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;

//!Give a status to the Law <br>
//!         Returns PipeOk (default implementation) <br>
virtual /*instead*/  OCGeomFill_PipeError ErrorStatus() ;

//! compute Triedrhon and  derivative Trihedron  on curve <br>
//!          at parameter <Param> <br>
//!  Warning : It used only for C1 or C2 aproximation <br>
virtual /*instead*/  System::Boolean D1(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal) ;

//! compute  Trihedron on curve <br>
//!          first and seconde  derivatives. <br>
//!  Warning : It used only for C2 aproximation <br>
virtual /*instead*/  System::Boolean D2(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ D2Tangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ D2Normal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal, OCNaroWrappers::OCgp_Vec^ D2BiNormal) ;

//! Sets the bounds of the parametric interval on <br>
//!          the function <br>
//!          This determines the derivatives in these values if the <br>
//!          function is not Cn. <br>
virtual /*instead*/  void SetInterval(Standard_Real First, Standard_Real Last) ;

//! Gets the bounds of the parametric interval on <br>
//!          the function <br>
 /*instead*/  void GetInterval(Standard_Real& First, Standard_Real& Last) ;

//! Say if the law is Constant <br>
virtual /*instead*/  System::Boolean IsConstant() ;

//! Say if the law is defined, only by the 3d Geometry of <br>
//!          the setted Curve <br>
//!          Return False by Default. <br>
virtual /*instead*/  System::Boolean IsOnlyBy3dCurve() ;

~OCGeomFill_TrihedronLaw()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
