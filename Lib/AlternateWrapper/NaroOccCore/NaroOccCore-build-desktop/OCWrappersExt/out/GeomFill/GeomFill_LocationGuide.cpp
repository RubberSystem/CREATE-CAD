// File generated by CPPExt (CPP file)
//

#include "GeomFill_LocationGuide.h"
#include "../Converter.h"
#include "GeomFill_TrihedronWithGuide.h"
#include "GeomFill_SectionLaw.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../TColgp/TColgp_HArray2OfPnt2d.h"
#include "../gp/gp_Mat.h"
#include "GeomFill_LocationLaw.h"
#include "../gp/gp_Vec.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../TColgp/TColgp_Array1OfVec2d.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../Geom/Geom_Curve.h"


using namespace OCNaroWrappers;

OCGeomFill_LocationGuide::OCGeomFill_LocationGuide(Handle(GeomFill_LocationGuide)* nativeHandle) : OCGeomFill_LocationLaw((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_GeomFill_LocationGuide(*nativeHandle);
}

OCGeomFill_LocationGuide::OCGeomFill_LocationGuide(OCNaroWrappers::OCGeomFill_TrihedronWithGuide^ Triedre) : OCGeomFill_LocationLaw((OCDummy^)nullptr)

{
  nativeHandle = new Handle_GeomFill_LocationGuide(new GeomFill_LocationGuide(*((Handle_GeomFill_TrihedronWithGuide*)Triedre->Handle)));
}

 void OCGeomFill_LocationGuide::Set(OCNaroWrappers::OCGeomFill_SectionLaw^ Section, System::Boolean rotat, Standard_Real SFirst, Standard_Real SLast, Standard_Real PrecAngle, Standard_Real& LastAngle)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->Set(*((Handle_GeomFill_SectionLaw*)Section->Handle), OCConverter::BooleanToStandardBoolean(rotat), SFirst, SLast, PrecAngle, LastAngle);
}

 void OCGeomFill_LocationGuide::EraseRotation()
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->EraseRotation();
}

 void OCGeomFill_LocationGuide::SetCurve(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->SetCurve(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

OCAdaptor3d_HCurve^ OCGeomFill_LocationGuide::GetCurve()
{
  Handle(Adaptor3d_HCurve) tmp = (*((Handle_GeomFill_LocationGuide*)nativeHandle))->GetCurve();
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 void OCGeomFill_LocationGuide::SetTrsf(OCNaroWrappers::OCgp_Mat^ Transfo)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->SetTrsf(*((gp_Mat*)Transfo->Handle));
}

OCGeomFill_LocationLaw^ OCGeomFill_LocationGuide::Copy()
{
  Handle(GeomFill_LocationLaw) tmp = (*((Handle_GeomFill_LocationGuide*)nativeHandle))->Copy();
  return gcnew OCGeomFill_LocationLaw(&tmp);
}

 System::Boolean OCGeomFill_LocationGuide::D0(Standard_Real Param, OCNaroWrappers::OCgp_Mat^ M, OCNaroWrappers::OCgp_Vec^ V)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationGuide*)nativeHandle))->D0(Param, *((gp_Mat*)M->Handle), *((gp_Vec*)V->Handle)));
}

 System::Boolean OCGeomFill_LocationGuide::D0(Standard_Real Param, OCNaroWrappers::OCgp_Mat^ M, OCNaroWrappers::OCgp_Vec^ V, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationGuide*)nativeHandle))->D0(Param, *((gp_Mat*)M->Handle), *((gp_Vec*)V->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle)));
}

 System::Boolean OCGeomFill_LocationGuide::D1(Standard_Real Param, OCNaroWrappers::OCgp_Mat^ M, OCNaroWrappers::OCgp_Vec^ V, OCNaroWrappers::OCgp_Mat^ DM, OCNaroWrappers::OCgp_Vec^ DV, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationGuide*)nativeHandle))->D1(Param, *((gp_Mat*)M->Handle), *((gp_Vec*)V->Handle), *((gp_Mat*)DM->Handle), *((gp_Vec*)DV->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColgp_Array1OfVec2d*)DPoles2d->Handle)));
}

 System::Boolean OCGeomFill_LocationGuide::D2(Standard_Real Param, OCNaroWrappers::OCgp_Mat^ M, OCNaroWrappers::OCgp_Vec^ V, OCNaroWrappers::OCgp_Mat^ DM, OCNaroWrappers::OCgp_Vec^ DV, OCNaroWrappers::OCgp_Mat^ D2M, OCNaroWrappers::OCgp_Vec^ D2V, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ D2Poles2d)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationGuide*)nativeHandle))->D2(Param, *((gp_Mat*)M->Handle), *((gp_Vec*)V->Handle), *((gp_Mat*)DM->Handle), *((gp_Vec*)DV->Handle), *((gp_Mat*)D2M->Handle), *((gp_Vec*)D2V->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColgp_Array1OfVec2d*)DPoles2d->Handle), *((TColgp_Array1OfVec2d*)D2Poles2d->Handle)));
}

 System::Boolean OCGeomFill_LocationGuide::HasFirstRestriction()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationGuide*)nativeHandle))->HasFirstRestriction());
}

 System::Boolean OCGeomFill_LocationGuide::HasLastRestriction()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationGuide*)nativeHandle))->HasLastRestriction());
}

 Standard_Integer OCGeomFill_LocationGuide::TraceNumber()
{
  return (*((Handle_GeomFill_LocationGuide*)nativeHandle))->TraceNumber();
}

 OCGeomFill_PipeError OCGeomFill_LocationGuide::ErrorStatus()
{
  return (OCGeomFill_PipeError)((*((Handle_GeomFill_LocationGuide*)nativeHandle))->ErrorStatus());
}

 Standard_Integer OCGeomFill_LocationGuide::NbIntervals(OCGeomAbs_Shape S)
{
  return (*((Handle_GeomFill_LocationGuide*)nativeHandle))->NbIntervals((GeomAbs_Shape)S);
}

 void OCGeomFill_LocationGuide::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 void OCGeomFill_LocationGuide::SetInterval(Standard_Real First, Standard_Real Last)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->SetInterval(First, Last);
}

 void OCGeomFill_LocationGuide::GetInterval(Standard_Real& First, Standard_Real& Last)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->GetInterval(First, Last);
}

 void OCGeomFill_LocationGuide::GetDomain(Standard_Real& First, Standard_Real& Last)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->GetDomain(First, Last);
}

 void OCGeomFill_LocationGuide::SetTolerance(Standard_Real Tol3d, Standard_Real Tol2d)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->SetTolerance(Tol3d, Tol2d);
}

 void OCGeomFill_LocationGuide::Resolution(Standard_Integer Index, Standard_Real Tol, Standard_Real& TolU, Standard_Real& TolV)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->Resolution(Index, Tol, TolU, TolV);
}

 Standard_Real OCGeomFill_LocationGuide::GetMaximalNorm()
{
  return (*((Handle_GeomFill_LocationGuide*)nativeHandle))->GetMaximalNorm();
}

 void OCGeomFill_LocationGuide::GetAverageLaw(OCNaroWrappers::OCgp_Mat^ AM, OCNaroWrappers::OCgp_Vec^ AV)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->GetAverageLaw(*((gp_Mat*)AM->Handle), *((gp_Vec*)AV->Handle));
}

 System::Boolean OCGeomFill_LocationGuide::IsTranslation(Standard_Real& Error)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationGuide*)nativeHandle))->IsTranslation(Error));
}

 System::Boolean OCGeomFill_LocationGuide::IsRotation(Standard_Real& Error)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_LocationGuide*)nativeHandle))->IsRotation(Error));
}

 void OCGeomFill_LocationGuide::Rotation(OCNaroWrappers::OCgp_Pnt^ Center)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->Rotation(*((gp_Pnt*)Center->Handle));
}

OCGeom_Curve^ OCGeomFill_LocationGuide::Section()
{
  Handle(Geom_Curve) tmp = (*((Handle_GeomFill_LocationGuide*)nativeHandle))->Section();
  return gcnew OCGeom_Curve(&tmp);
}

OCAdaptor3d_HCurve^ OCGeomFill_LocationGuide::Guide()
{
  Handle(Adaptor3d_HCurve) tmp = (*((Handle_GeomFill_LocationGuide*)nativeHandle))->Guide();
  return gcnew OCAdaptor3d_HCurve(&tmp);
}

 void OCGeomFill_LocationGuide::SetOrigine(Standard_Real Param1, Standard_Real Param2)
{
  (*((Handle_GeomFill_LocationGuide*)nativeHandle))->SetOrigine(Param1, Param2);
}


