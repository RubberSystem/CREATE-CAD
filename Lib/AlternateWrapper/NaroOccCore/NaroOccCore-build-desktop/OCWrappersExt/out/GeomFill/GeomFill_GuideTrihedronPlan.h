// File generated by CPPExt (Transient)
//
#ifndef _GeomFill_GuideTrihedronPlan_OCWrappers_HeaderFile
#define _GeomFill_GuideTrihedronPlan_OCWrappers_HeaderFile

// include the wrapped class
#include <GeomFill_GuideTrihedronPlan.hxx>
#include "../Converter.h"

#include "GeomFill_TrihedronWithGuide.h"

#include "../math/math_Vector.h"
#include "GeomFill_PipeError.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HCurve;
ref class OCTColgp_HArray2OfPnt2d;
ref class OCGeomFill_Frenet;
ref class OCGeomFill_TrihedronLaw;
ref class OCgp_Vec;
ref class OCTColStd_Array1OfReal;


//! Trihedron in  the case of sweeping along a guide curve defined <br>
//! by the orthogonal  plan on  the trajectory <br>
public ref class OCGeomFill_GuideTrihedronPlan : OCGeomFill_TrihedronWithGuide {

protected:
  // dummy constructor;
  OCGeomFill_GuideTrihedronPlan(OCDummy^) : OCGeomFill_TrihedronWithGuide((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeomFill_GuideTrihedronPlan(Handle(GeomFill_GuideTrihedronPlan)* nativeHandle);

// Methods PUBLIC


OCGeomFill_GuideTrihedronPlan(OCNaroWrappers::OCAdaptor3d_HCurve^ theGuide);


virtual /*instead*/  void SetCurve(OCNaroWrappers::OCAdaptor3d_HCurve^ thePath) override;


virtual /*instead*/  OCGeomFill_TrihedronLaw^ Copy() ;

//!Give a status to the Law <br>
//!         Returns PipeOk (default implementation) <br>
virtual /*instead*/  OCGeomFill_PipeError ErrorStatus() override;


virtual /*instead*/  OCAdaptor3d_HCurve^ Guide() ;


virtual /*instead*/  System::Boolean D0(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ BiNormal) ;


virtual /*instead*/  System::Boolean D1(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal) override;


virtual /*instead*/  System::Boolean D2(Standard_Real Param, OCNaroWrappers::OCgp_Vec^ Tangent, OCNaroWrappers::OCgp_Vec^ DTangent, OCNaroWrappers::OCgp_Vec^ D2Tangent, OCNaroWrappers::OCgp_Vec^ Normal, OCNaroWrappers::OCgp_Vec^ DNormal, OCNaroWrappers::OCgp_Vec^ D2Normal, OCNaroWrappers::OCgp_Vec^ BiNormal, OCNaroWrappers::OCgp_Vec^ DBiNormal, OCNaroWrappers::OCgp_Vec^ D2BiNormal) override;

//! Sets the bounds of the parametric interval on <br>
//!          the function <br>
//!          This determines the derivatives in these values if the <br>
//!          function is not Cn. <br>
virtual /*instead*/  void SetInterval(Standard_Real First, Standard_Real Last) override;

//! Returns  the number  of  intervals for  continuity <br>
//!          <S>. <br>
//!          May be one if Continuity(me) >= <S> <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) ;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;

//! Get average value of M(t) and V(t) it is usfull to <br>
//!          make fast approximation of rational  surfaces. <br>
virtual /*instead*/  void GetAverageLaw(OCNaroWrappers::OCgp_Vec^ ATangent, OCNaroWrappers::OCgp_Vec^ ANormal, OCNaroWrappers::OCgp_Vec^ ABiNormal) ;

//! Say if the law is Constant <br>
virtual /*instead*/  System::Boolean IsConstant() override;

//! Say if the law is defined, only by the 3d Geometry of <br>
//!          the setted Curve <br>
//!          Return False by Default. <br>
virtual /*instead*/  System::Boolean IsOnlyBy3dCurve() override;


virtual /*instead*/  void Origine(Standard_Real OrACR1, Standard_Real OrACR2) ;

~OCGeomFill_GuideTrihedronPlan()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
