// File generated by CPPExt (CPP file)
//

#include "GeomFill_SectionLaw.h"
#include "../Converter.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColgp/TColgp_Array1OfVec.h"
#include "../Geom/Geom_BSplineSurface.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../gp/gp_Pnt.h"
#include "../Geom/Geom_Curve.h"


using namespace OCNaroWrappers;

OCGeomFill_SectionLaw::OCGeomFill_SectionLaw(Handle(GeomFill_SectionLaw)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_GeomFill_SectionLaw(*nativeHandle);
}

 System::Boolean OCGeomFill_SectionLaw::D1(Standard_Real Param, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_SectionLaw*)nativeHandle))->D1(Param, *((TColgp_Array1OfPnt*)Poles->Handle), *((TColgp_Array1OfVec*)DPoles->Handle), *((TColStd_Array1OfReal*)Weigths->Handle), *((TColStd_Array1OfReal*)DWeigths->Handle)));
}

 System::Boolean OCGeomFill_SectionLaw::D2(Standard_Real Param, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColgp_Array1OfVec^ D2Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths, OCNaroWrappers::OCTColStd_Array1OfReal^ D2Weigths)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_SectionLaw*)nativeHandle))->D2(Param, *((TColgp_Array1OfPnt*)Poles->Handle), *((TColgp_Array1OfVec*)DPoles->Handle), *((TColgp_Array1OfVec*)D2Poles->Handle), *((TColStd_Array1OfReal*)Weigths->Handle), *((TColStd_Array1OfReal*)DWeigths->Handle), *((TColStd_Array1OfReal*)D2Weigths->Handle)));
}

OCGeom_BSplineSurface^ OCGeomFill_SectionLaw::BSplineSurface()
{
  Handle(Geom_BSplineSurface) tmp = (*((Handle_GeomFill_SectionLaw*)nativeHandle))->BSplineSurface();
  return gcnew OCGeom_BSplineSurface(&tmp);
}

 void OCGeomFill_SectionLaw::SetTolerance(Standard_Real Tol3d, Standard_Real Tol2d)
{
  (*((Handle_GeomFill_SectionLaw*)nativeHandle))->SetTolerance(Tol3d, Tol2d);
}

OCgp_Pnt^ OCGeomFill_SectionLaw::BarycentreOfSurf()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_GeomFill_SectionLaw*)nativeHandle))->BarycentreOfSurf();
  return gcnew OCgp_Pnt(tmp);
}

 void OCGeomFill_SectionLaw::GetMinimalWeight(OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths)
{
  (*((Handle_GeomFill_SectionLaw*)nativeHandle))->GetMinimalWeight(*((TColStd_Array1OfReal*)Weigths->Handle));
}

 System::Boolean OCGeomFill_SectionLaw::IsConstant(Standard_Real& Error)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_SectionLaw*)nativeHandle))->IsConstant(Error));
}

OCGeom_Curve^ OCGeomFill_SectionLaw::ConstantSection()
{
  Handle(Geom_Curve) tmp = (*((Handle_GeomFill_SectionLaw*)nativeHandle))->ConstantSection();
  return gcnew OCGeom_Curve(&tmp);
}

 System::Boolean OCGeomFill_SectionLaw::IsConicalLaw(Standard_Real& Error)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_SectionLaw*)nativeHandle))->IsConicalLaw(Error));
}

OCGeom_Curve^ OCGeomFill_SectionLaw::CirclSection(Standard_Real Param)
{
  Handle(Geom_Curve) tmp = (*((Handle_GeomFill_SectionLaw*)nativeHandle))->CirclSection(Param);
  return gcnew OCGeom_Curve(&tmp);
}


