// File generated by CPPExt (MPV)
//
#ifndef _GeomFill_BezierCurves_OCWrappers_HeaderFile
#define _GeomFill_BezierCurves_OCWrappers_HeaderFile

// include native header
#include <GeomFill_BezierCurves.hxx>
#include "../Converter.h"


#include "GeomFill_FillingStyle.h"


namespace OCNaroWrappers
{

ref class OCGeom_BezierSurface;
ref class OCGeom_BezierCurve;


//! This class provides an algorithm for constructing a Bezier surface filled from <br>
//! contiguous Bezier curves which form its boundaries. <br>
//! The algorithm accepts two, three or four Bezier curves <br>
//! as the boundaries of the target surface. <br>
//! A range of filling styles - more or less rounded, more or less flat - is available. <br>
//! A BezierCurves object provides a framework for: <br>
//! -   defining the boundaries, and the filling style of the surface <br>
//! -   implementing the construction algorithm <br>
//! -   consulting the result. <br>
//! Warning <br>
//! Some problems may show up with rational curves. <br>
public ref class OCGeomFill_BezierCurves  {

protected:
  GeomFill_BezierCurves* nativeHandle;
  OCGeomFill_BezierCurves(OCDummy^) {};

public:
  property GeomFill_BezierCurves* Handle
  {
    GeomFill_BezierCurves* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeomFill_BezierCurves(GeomFill_BezierCurves* nativeHandle);

// Methods PUBLIC

//! Constructs an empty framework for building a Bezier <br>
//! surface from contiguous Bezier curves. <br>
//! You use the Init function to define the boundaries of the surface. <br>
OCGeomFill_BezierCurves();

//! Constructs a framework for building a Bezier surface <br>
//! from the four contiguous Bezier curves, C1, C2, C3 and C4 <br>
//! Raises Standard_ConstructionError if the curves are not contiguous. <br>
OCGeomFill_BezierCurves(OCNaroWrappers::OCGeom_BezierCurve^ C1, OCNaroWrappers::OCGeom_BezierCurve^ C2, OCNaroWrappers::OCGeom_BezierCurve^ C3, OCNaroWrappers::OCGeom_BezierCurve^ C4, OCGeomFill_FillingStyle Type);

//! Constructs a framework for building a Bezier surface <br>
//! from the three contiguous Bezier curves, C1, C2 and C3 <br>
//! Raises Standard_ConstructionError if the curves are not contiguous. <br>
OCGeomFill_BezierCurves(OCNaroWrappers::OCGeom_BezierCurve^ C1, OCNaroWrappers::OCGeom_BezierCurve^ C2, OCNaroWrappers::OCGeom_BezierCurve^ C3, OCGeomFill_FillingStyle Type);

//! Constructs a framework for building a Bezier surface <br>
//! from the two contiguous Bezier curves, C1 and C2 <br>
//! Raises Standard_ConstructionError if the curves are not contiguous. <br>
OCGeomFill_BezierCurves(OCNaroWrappers::OCGeom_BezierCurve^ C1, OCNaroWrappers::OCGeom_BezierCurve^ C2, OCGeomFill_FillingStyle Type);

//! if the curves cannot be joined <br>
 /*instead*/  void Init(OCNaroWrappers::OCGeom_BezierCurve^ C1, OCNaroWrappers::OCGeom_BezierCurve^ C2, OCNaroWrappers::OCGeom_BezierCurve^ C3, OCNaroWrappers::OCGeom_BezierCurve^ C4, OCGeomFill_FillingStyle Type) ;

//! if the curves cannot be joined <br>
 /*instead*/  void Init(OCNaroWrappers::OCGeom_BezierCurve^ C1, OCNaroWrappers::OCGeom_BezierCurve^ C2, OCNaroWrappers::OCGeom_BezierCurve^ C3, OCGeomFill_FillingStyle Type) ;

//! Initializes or reinitializes this algorithm with two, three, <br>
//! or four curves - C1, C2, C3, and C4 - and Type, one <br>
//! of the following filling styles: <br>
//! -   GeomFill_Stretch - the style with the flattest patch <br>
//! -   GeomFill_Coons - a rounded style of patch with <br>
//!   less depth than that of Curved <br>
//! -   GeomFill_Curved - the style with the most rounded patch. <br>
//!  Exceptions <br>
//! Standard_ConstructionError if the curves are not contiguous. <br>
 /*instead*/  void Init(OCNaroWrappers::OCGeom_BezierCurve^ C1, OCNaroWrappers::OCGeom_BezierCurve^ C2, OCGeomFill_FillingStyle Type) ;

//! Returns the Bezier surface resulting from the <br>
//! computation performed by this algorithm. <br>
 /*instead*/  OCGeom_BezierSurface^ Surface() ;

~OCGeomFill_BezierCurves()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
