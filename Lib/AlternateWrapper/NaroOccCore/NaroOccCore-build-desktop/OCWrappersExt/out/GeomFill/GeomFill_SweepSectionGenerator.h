// File generated by CPPExt (MPV)
//
#ifndef _GeomFill_SweepSectionGenerator_OCWrappers_HeaderFile
#define _GeomFill_SweepSectionGenerator_OCWrappers_HeaderFile

// include native header
#include <GeomFill_SweepSectionGenerator.hxx>
#include "../Converter.h"


#include "../gp/gp_Ax1.h"
#include "GeomFill_SequenceOfTrsf.h"


namespace OCNaroWrappers
{

ref class OCGeom_BSplineCurve;
ref class OCAdaptor3d_HCurve;
ref class OCGeom_Curve;
ref class OCTColStd_Array1OfReal;
ref class OCTColStd_Array1OfInteger;
ref class OCTColgp_Array1OfPnt;
ref class OCTColgp_Array1OfVec;
ref class OCTColgp_Array1OfPnt2d;
ref class OCTColgp_Array1OfVec2d;
ref class OCgp_Trsf;


//! class for instantiation of AppBlend. <br>
//!          evaluate the sections of a sweep surface. <br>
public ref class OCGeomFill_SweepSectionGenerator  {

protected:
  GeomFill_SweepSectionGenerator* nativeHandle;
  OCGeomFill_SweepSectionGenerator(OCDummy^) {};

public:
  property GeomFill_SweepSectionGenerator* Handle
  {
    GeomFill_SweepSectionGenerator* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeomFill_SweepSectionGenerator(GeomFill_SweepSectionGenerator* nativeHandle);

// Methods PUBLIC


OCGeomFill_SweepSectionGenerator();

//! Create a sweept surface with a constant radius. <br>
OCGeomFill_SweepSectionGenerator(OCNaroWrappers::OCGeom_Curve^ Path, Standard_Real Radius);

//! Create a sweept surface with a constant section <br>
OCGeomFill_SweepSectionGenerator(OCNaroWrappers::OCGeom_Curve^ Path, OCNaroWrappers::OCGeom_Curve^ FirstSect);

//! Create a sweept surface with an evolving section <br>
//!          The section evoluate from First to Last Section <br>
OCGeomFill_SweepSectionGenerator(OCNaroWrappers::OCGeom_Curve^ Path, OCNaroWrappers::OCGeom_Curve^ FirstSect, OCNaroWrappers::OCGeom_Curve^ LastSect);

//! Create  a pipe  with  a constant  radius with  2 <br>
//!          guide-line. <br>
OCGeomFill_SweepSectionGenerator(OCNaroWrappers::OCGeom_Curve^ Path, OCNaroWrappers::OCGeom_Curve^ Curve1, OCNaroWrappers::OCGeom_Curve^ Curve2, Standard_Real Radius);

//! Create  a pipe  with  a constant  radius with  2 <br>
//!          guide-line. <br>
OCGeomFill_SweepSectionGenerator(OCNaroWrappers::OCAdaptor3d_HCurve^ Path, OCNaroWrappers::OCAdaptor3d_HCurve^ Curve1, OCNaroWrappers::OCAdaptor3d_HCurve^ Curve2, Standard_Real Radius);


 /*instead*/  void Init(OCNaroWrappers::OCGeom_Curve^ Path, Standard_Real Radius) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom_Curve^ Path, OCNaroWrappers::OCGeom_Curve^ FirstSect) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom_Curve^ Path, OCNaroWrappers::OCGeom_Curve^ FirstSect, OCNaroWrappers::OCGeom_Curve^ LastSect) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom_Curve^ Path, OCNaroWrappers::OCGeom_Curve^ Curve1, OCNaroWrappers::OCGeom_Curve^ Curve2, Standard_Real Radius) ;


 /*instead*/  void Init(OCNaroWrappers::OCAdaptor3d_HCurve^ Path, OCNaroWrappers::OCAdaptor3d_HCurve^ Curve1, OCNaroWrappers::OCAdaptor3d_HCurve^ Curve2, Standard_Real Radius) ;


 /*instead*/  void Perform(System::Boolean Polynomial) ;


 /*instead*/  void GetShape(Standard_Integer& NbPoles, Standard_Integer& NbKnots, Standard_Integer& Degree, Standard_Integer& NbPoles2d) ;


 /*instead*/  void Knots(OCNaroWrappers::OCTColStd_Array1OfReal^ TKnots) ;


 /*instead*/  void Mults(OCNaroWrappers::OCTColStd_Array1OfInteger^ TMults) ;


 /*instead*/  Standard_Integer NbSections() ;

//! Used for the first and last section <br>
//!          The method returns Standard_True if the derivatives <br>
//!          are computed, otherwise it returns Standard_False. <br>
 /*instead*/  System::Boolean Section(Standard_Integer P, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths) ;


 /*instead*/  void Section(Standard_Integer P, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths) ;

//! raised if <Index> not in the range [1,NbSections()] <br>
 /*instead*/  OCgp_Trsf^ Transformation(Standard_Integer Index) ;

//! Returns  the parameter of   <P>, to impose  it for the <br>
//!          approximation. <br>
 /*instead*/  Standard_Real Parameter(Standard_Integer P) ;

~OCGeomFill_SweepSectionGenerator()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
