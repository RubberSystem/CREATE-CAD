// File generated by CPPExt (CPP file)
//

#include "GeomFill_CircularBlendFunc.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColgp/TColgp_Array1OfVec.h"
#include "../TColgp/TColgp_Array1OfVec2d.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCGeomFill_CircularBlendFunc::OCGeomFill_CircularBlendFunc(Handle(GeomFill_CircularBlendFunc)* nativeHandle) : OCApprox_SweepFunction((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_GeomFill_CircularBlendFunc(*nativeHandle);
}

OCGeomFill_CircularBlendFunc::OCGeomFill_CircularBlendFunc(OCNaroWrappers::OCAdaptor3d_HCurve^ Path, OCNaroWrappers::OCAdaptor3d_HCurve^ Curve1, OCNaroWrappers::OCAdaptor3d_HCurve^ Curve2, Standard_Real Radius, System::Boolean Polynomial) : OCApprox_SweepFunction((OCDummy^)nullptr)

{
  nativeHandle = new Handle_GeomFill_CircularBlendFunc(new GeomFill_CircularBlendFunc(*((Handle_Adaptor3d_HCurve*)Path->Handle), *((Handle_Adaptor3d_HCurve*)Curve1->Handle), *((Handle_Adaptor3d_HCurve*)Curve2->Handle), Radius, OCConverter::BooleanToStandardBoolean(Polynomial)));
}

 System::Boolean OCGeomFill_CircularBlendFunc::D0(Standard_Real Param, Standard_Real First, Standard_Real Last, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->D0(Param, First, Last, *((TColgp_Array1OfPnt*)Poles->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColStd_Array1OfReal*)Weigths->Handle)));
}

 System::Boolean OCGeomFill_CircularBlendFunc::D1(Standard_Real Param, Standard_Real First, Standard_Real Last, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->D1(Param, First, Last, *((TColgp_Array1OfPnt*)Poles->Handle), *((TColgp_Array1OfVec*)DPoles->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColgp_Array1OfVec2d*)DPoles2d->Handle), *((TColStd_Array1OfReal*)Weigths->Handle), *((TColStd_Array1OfReal*)DWeigths->Handle)));
}

 System::Boolean OCGeomFill_CircularBlendFunc::D2(Standard_Real Param, Standard_Real First, Standard_Real Last, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColgp_Array1OfVec^ D2Poles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ D2Poles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths, OCNaroWrappers::OCTColStd_Array1OfReal^ D2Weigths)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->D2(Param, First, Last, *((TColgp_Array1OfPnt*)Poles->Handle), *((TColgp_Array1OfVec*)DPoles->Handle), *((TColgp_Array1OfVec*)D2Poles->Handle), *((TColgp_Array1OfPnt2d*)Poles2d->Handle), *((TColgp_Array1OfVec2d*)DPoles2d->Handle), *((TColgp_Array1OfVec2d*)D2Poles2d->Handle), *((TColStd_Array1OfReal*)Weigths->Handle), *((TColStd_Array1OfReal*)DWeigths->Handle), *((TColStd_Array1OfReal*)D2Weigths->Handle)));
}

 Standard_Integer OCGeomFill_CircularBlendFunc::Nb2dCurves()
{
  return (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->Nb2dCurves();
}

 void OCGeomFill_CircularBlendFunc::SectionShape(Standard_Integer& NbPoles, Standard_Integer& NbKnots, Standard_Integer& Degree)
{
  (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->SectionShape(NbPoles, NbKnots, Degree);
}

 void OCGeomFill_CircularBlendFunc::Knots(OCNaroWrappers::OCTColStd_Array1OfReal^ TKnots)
{
  (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->Knots(*((TColStd_Array1OfReal*)TKnots->Handle));
}

 void OCGeomFill_CircularBlendFunc::Mults(OCNaroWrappers::OCTColStd_Array1OfInteger^ TMults)
{
  (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->Mults(*((TColStd_Array1OfInteger*)TMults->Handle));
}

 System::Boolean OCGeomFill_CircularBlendFunc::IsRational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->IsRational());
}

 Standard_Integer OCGeomFill_CircularBlendFunc::NbIntervals(OCGeomAbs_Shape S)
{
  return (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->NbIntervals((GeomAbs_Shape)S);
}

 void OCGeomFill_CircularBlendFunc::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 void OCGeomFill_CircularBlendFunc::SetInterval(Standard_Real First, Standard_Real Last)
{
  (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->SetInterval(First, Last);
}

 void OCGeomFill_CircularBlendFunc::GetTolerance(Standard_Real BoundTol, Standard_Real SurfTol, Standard_Real AngleTol, OCNaroWrappers::OCTColStd_Array1OfReal^ Tol3d)
{
  (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->GetTolerance(BoundTol, SurfTol, AngleTol, *((TColStd_Array1OfReal*)Tol3d->Handle));
}

 void OCGeomFill_CircularBlendFunc::SetTolerance(Standard_Real Tol3d, Standard_Real Tol2d)
{
  (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->SetTolerance(Tol3d, Tol2d);
}

OCgp_Pnt^ OCGeomFill_CircularBlendFunc::BarycentreOfSurf()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->BarycentreOfSurf();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCGeomFill_CircularBlendFunc::MaximalSection()
{
  return (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->MaximalSection();
}

 void OCGeomFill_CircularBlendFunc::GetMinimalWeight(OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths)
{
  (*((Handle_GeomFill_CircularBlendFunc*)nativeHandle))->GetMinimalWeight(*((TColStd_Array1OfReal*)Weigths->Handle));
}


