// File generated by CPPExt (MPV)
//
#ifndef _GeomFill_ConstrainedFilling_OCWrappers_HeaderFile
#define _GeomFill_ConstrainedFilling_OCWrappers_HeaderFile

// include native header
#include <GeomFill_ConstrainedFilling.hxx>
#include "../Converter.h"


#include "GeomFill_CornerState.h"
#include "../gp/gp_Vec.h"


namespace OCNaroWrappers
{

ref class OCGeomFill_CoonsAlgPatch;
ref class OCGeomFill_TgtField;
ref class OCTColgp_HArray1OfPnt;
ref class OCTColStd_HArray1OfInteger;
ref class OCTColStd_HArray1OfReal;
ref class OCTColgp_HArray2OfPnt;
ref class OCGeom_BSplineSurface;
ref class OCGeomFill_Boundary;
ref class OCGeomFill_BoundWithSurf;


//! An algorithm for constructing a BSpline surface filled <br>
//! from a series of boundaries which serve as path <br>
//! constraints and optionally, as tangency constraints. <br>
//! The algorithm accepts three or four curves as the <br>
//! boundaries of the target surface. <br>
//! A ConstrainedFilling object provides a framework for: <br>
//! -   defining the boundaries of the surface <br>
//! -   implementing the construction algorithm <br>
//! -   consulting the result. <br>
//! Warning <br>
//! This surface filling algorithm is specifically designed to <br>
//! be used in connection with fillets. Satisfactory results <br>
//! cannot be guaranteed for other uses. <br>
public ref class OCGeomFill_ConstrainedFilling  {

protected:
  GeomFill_ConstrainedFilling* nativeHandle;
  OCGeomFill_ConstrainedFilling(OCDummy^) {};

public:
  property GeomFill_ConstrainedFilling* Handle
  {
    GeomFill_ConstrainedFilling* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeomFill_ConstrainedFilling(GeomFill_ConstrainedFilling* nativeHandle);

// Methods PUBLIC


//! Constructs an empty framework for filling a surface from boundaries. <br>
//! The boundaries of the surface will be defined, and the <br>
//! surface will be built by using the function Init. <br>
//! The surface will respect the following constraints: <br>
//! -   its degree will not be greater than MaxDeg <br>
//! -   the maximum number of segments MaxSeg which <br>
//!   BSpline surfaces can have. <br>
OCGeomFill_ConstrainedFilling(Standard_Integer MaxDeg, Standard_Integer MaxSeg);


 /*instead*/  void Init(OCNaroWrappers::OCGeomFill_Boundary^ B1, OCNaroWrappers::OCGeomFill_Boundary^ B2, OCNaroWrappers::OCGeomFill_Boundary^ B3, System::Boolean NoCheck) ;

//! Constructs a BSpline surface filled from the series of <br>
//! boundaries B1, B2, B3 and, if need be, B4, which serve: <br>
//! -   as path constraints <br>
//! -   and optionally, as tangency constraints if they are <br>
//!   GeomFill_BoundWithSurf curves. <br>
//! The boundaries may be given in any order: they are <br>
//! classified and if necessary, reversed and reparameterized. <br>
//! The surface will also respect the following constraints: <br>
//! -   its degree will not be greater than the maximum <br>
//!   degree defined at the time of construction of this framework, and <br>
//! -   the maximum number of segments MaxSeg which BSpline surfaces can have <br>
 /*instead*/  void Init(OCNaroWrappers::OCGeomFill_Boundary^ B1, OCNaroWrappers::OCGeomFill_Boundary^ B2, OCNaroWrappers::OCGeomFill_Boundary^ B3, OCNaroWrappers::OCGeomFill_Boundary^ B4, System::Boolean NoCheck) ;

//! Allows to modify domain on witch the blending function <br>
//!          associated to  the constrained boundary B  will propag <br>
//!          the  influence   of the  field   of  tangency.  Can be <br>
//!          usefull to  reduce  influence of boundaries  on whitch <br>
//!          the Coons compatibility  conditions are not respected. <br>
//!          l is a  relative value of  the parametric range of  B. <br>
//!          Default value for l is 1 (used in Init). <br>
//!  Warning: Must be called after  Init with a constrained boundary <br>
//!          used in the call to Init. <br>
 /*instead*/  void SetDomain(Standard_Real l, OCNaroWrappers::OCGeomFill_BoundWithSurf^ B) ;

//! Computes the  new poles  of  the surface using the  new <br>
//!          blending  functions set by several calls to SetDomain. <br>
 /*instead*/  void ReBuild() ;

//! Returns the bound of index i after sort. <br>
 /*instead*/  OCGeomFill_Boundary^ Boundary(Standard_Integer I) ;

//! Returns the BSpline surface after computation of the fill by this framework. <br>
 /*instead*/  OCGeom_BSplineSurface^ Surface() ;

//! Internal use for Advmath approximation call. <br>
 /*instead*/  Standard_Integer Eval(Standard_Real W, Standard_Integer Ord, Standard_Real& Result) ;

//! Computes the fields of tangents on 30 points along the <br>
//!          bound  I, these  are  not the  constraint tangents but <br>
//!          gives an idea of the coonsAlgPatch regularity. <br>
 /*instead*/  void CheckCoonsAlgPatch(Standard_Integer I) ;

//! Computes  the fields  of tangents  and  normals on  30 <br>
//!          points along the bound  I, draw them, and computes the <br>
//!          max dot product that must be near than 0. <br>
 /*instead*/  void CheckTgteField(Standard_Integer I) ;

//! Computes  values  and normals  along  the bound  I and <br>
//!          compare  them to the  approx  result curves (bound and <br>
//!          tgte field) , draw  the normals and tangents. <br>
 /*instead*/  void CheckApprox(Standard_Integer I) ;

//! Computes values and normals along the  bound I on both <br>
//!          constraint  surface    and result  surface,  draw  the <br>
//!          normals, and  computes the max distance between values <br>
//!          and the max angle  between normals. <br>
 /*instead*/  void CheckResult(Standard_Integer I) ;

~OCGeomFill_ConstrainedFilling()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
