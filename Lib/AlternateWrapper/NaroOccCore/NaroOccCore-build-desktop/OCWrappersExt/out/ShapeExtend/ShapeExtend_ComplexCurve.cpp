// File generated by CPPExt (CPP file)
//

#include "ShapeExtend_ComplexCurve.h"
#include "../Converter.h"
#include "../Geom/Geom_Curve.h"
#include "../gp/gp_Trsf.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"


using namespace OCNaroWrappers;

OCShapeExtend_ComplexCurve::OCShapeExtend_ComplexCurve(Handle(ShapeExtend_ComplexCurve)* nativeHandle) : OCGeom_Curve((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_ShapeExtend_ComplexCurve(*nativeHandle);
}

OCShapeExtend_ComplexCurve::OCShapeExtend_ComplexCurve() : OCGeom_Curve((OCDummy^)nullptr)

{}

 void OCShapeExtend_ComplexCurve::Transform(OCNaroWrappers::OCgp_Trsf^ T)
{
  (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->Transform(*((gp_Trsf*)T->Handle));
}

 Standard_Real OCShapeExtend_ComplexCurve::ReversedParameter(Standard_Real U)
{
  return (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->ReversedParameter(U);
}

 Standard_Real OCShapeExtend_ComplexCurve::FirstParameter()
{
  return (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->FirstParameter();
}

 Standard_Real OCShapeExtend_ComplexCurve::LastParameter()
{
  return (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->LastParameter();
}

 System::Boolean OCShapeExtend_ComplexCurve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->IsClosed());
}

 System::Boolean OCShapeExtend_ComplexCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->IsPeriodic());
}

 OCGeomAbs_Shape OCShapeExtend_ComplexCurve::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->Continuity());
}

 System::Boolean OCShapeExtend_ComplexCurve::IsCN(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->IsCN(N));
}

 void OCShapeExtend_ComplexCurve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->D0(U, *((gp_Pnt*)P->Handle));
}

 void OCShapeExtend_ComplexCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1)
{
  (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->D1(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle));
}

 void OCShapeExtend_ComplexCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->D2(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCShapeExtend_ComplexCurve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->D3(U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCShapeExtend_ComplexCurve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = (*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec(tmp);
}

 System::Boolean OCShapeExtend_ComplexCurve::CheckConnectivity(Standard_Real Preci)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_ShapeExtend_ComplexCurve*)nativeHandle))->CheckConnectivity(Preci));
}


