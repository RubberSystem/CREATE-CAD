// File generated by CPPExt (Transient)
//
#ifndef _ShapeExtend_ComplexCurve_OCWrappers_HeaderFile
#define _ShapeExtend_ComplexCurve_OCWrappers_HeaderFile

// include the wrapped class
#include <ShapeExtend_ComplexCurve.hxx>
#include "../Converter.h"

#include "../Geom/Geom_Curve.h"

#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCGeom_Curve;
ref class OCgp_Trsf;
ref class OCgp_Pnt;
ref class OCgp_Vec;


//! Defines a curve which consists of several segments. <br>
//!          Implements basic interface to it. <br>
public ref class OCShapeExtend_ComplexCurve : OCGeom_Curve {

protected:
  // dummy constructor;
  OCShapeExtend_ComplexCurve(OCDummy^) : OCGeom_Curve((OCDummy^)nullptr) {};

public:

// constructor from native
OCShapeExtend_ComplexCurve(Handle(ShapeExtend_ComplexCurve)* nativeHandle);

// Methods PUBLIC


OCShapeExtend_ComplexCurve();

//! Applies transformation to each curve <br>
virtual /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf^ T) ;

//! Returns 1 - U <br>
virtual /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;

//! Returns 0 <br>
virtual /*instead*/  Standard_Real FirstParameter() ;

//! Returns 1 <br>
virtual /*instead*/  Standard_Real LastParameter() ;

//! Returns True if the curve is closed <br>
virtual /*instead*/  System::Boolean IsClosed() ;

//! Returns False <br>
virtual /*instead*/  System::Boolean IsPeriodic() ;

//! Returns GeomAbs_C0 <br>
virtual /*instead*/  OCGeomAbs_Shape Continuity() ;

//! Returns False if N > 0 <br>
virtual /*instead*/  System::Boolean IsCN(Standard_Integer N) ;

//! Returns point at parameter U. <br>
//!          Finds appropriate curve and local parameter on it. <br>
virtual /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) ;


virtual /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1) ;


virtual /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


virtual /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) ;


virtual /*instead*/  OCgp_Vec^ DN(Standard_Real U, Standard_Integer N) ;

//! Checks geometrical connectivity of the curves, including <br>
//!          closure (sets fields myClosed) <br>
 /*instead*/  System::Boolean CheckConnectivity(Standard_Real Preci) ;

~OCShapeExtend_ComplexCurve()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
