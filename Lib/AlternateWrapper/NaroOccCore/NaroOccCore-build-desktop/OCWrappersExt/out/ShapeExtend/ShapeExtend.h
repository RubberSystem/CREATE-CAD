// File generated by CPPExt (Package)
//

#ifndef _ShapeExtend_OCWrappers_HeaderFile
#define _ShapeExtend_OCWrappers_HeaderFile

// Include the wrapped header
#include <ShapeExtend.hxx>

#include "ShapeExtend_ComplexCurve.h"
#include "ShapeExtend_CompositeSurface.h"
#include "ShapeExtend_WireData.h"
#include "ShapeExtend_BasicMsgRegistrator.h"
#include "ShapeExtend_MsgRegistrator.h"
#include "ShapeExtend_Explorer.h"
#include "ShapeExtend_DataMapOfShapeListOfMsg.h"
#include "ShapeExtend_DataMapOfTransientListOfMsg.h"
#include "ShapeExtend_DataMapNodeOfDataMapOfShapeListOfMsg.h"
#include "ShapeExtend_DataMapIteratorOfDataMapOfShapeListOfMsg.h"
#include "ShapeExtend_DataMapNodeOfDataMapOfTransientListOfMsg.h"
#include "ShapeExtend_DataMapIteratorOfDataMapOfTransientListOfMsg.h"


namespace OCNaroWrappers
{
//! This package provides general tools and data structures common <br>
//!	        for other packages in SHAPEWORKS and extending CAS.CADE <br>
//!          structures. <br>
//!          The following items are provided by this package: <br>
//!          - enumeration Status used for coding status flags in methods <br>
//!            inside the SHAPEWORKS <br>
//!          - enumeration Parametrisation used for setting global parametrisation <br>
//!            on the composite surface <br>
//!          - class CompositeSurface representing a composite surface <br>
//!            made of a grid of surface patches <br>
//!          - class WireData representing a wire in the form of ordered <br>
//!            list of edges <br>
//!          - class MsgRegistrator for attaching messages to the objects <br>
//!          - tools for exploring the shapes <br>
//! -       tools for creating       new shapes. <br>
public ref class OCShapeExtend abstract sealed
{

public:
// Methods

//! Inits using of ShapeExtend. <br>
//!          Currently, loads messages output by ShapeHealing algorithms. <br>
static /*instead*/  void Init() ;

//! Encodes status (enumeration) to a bit flag <br>
static /*instead*/  Standard_Integer EncodeStatus(OCShapeExtend_Status status) ;

//! Tells if a bit flag contains bit corresponding to enumerated status <br>
static /*instead*/  System::Boolean DecodeStatus(Standard_Integer flag, OCShapeExtend_Status status) ;


};

}; // OCNaroWrappers

#endif
