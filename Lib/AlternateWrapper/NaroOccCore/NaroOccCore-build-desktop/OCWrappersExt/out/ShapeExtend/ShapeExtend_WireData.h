// File generated by CPPExt (Transient)
//
#ifndef _ShapeExtend_WireData_OCWrappers_HeaderFile
#define _ShapeExtend_WireData_OCWrappers_HeaderFile

// include the wrapped class
#include <ShapeExtend_WireData.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCTopTools_HSequenceOfShape;
ref class OCTColStd_HSequenceOfInteger;
ref class OCTopoDS_Wire;
ref class OCTopoDS_Edge;
ref class OCTopoDS_Shape;
ref class OCTopoDS_Face;


//! This class provides a data structure necessary for work with the wire as with <br>
//! ordered list of edges, what is required for many algorithms. The advantage of <br>
//! this class is that it allows to work with wires which are not correct. <br>
//! The object of the class ShapeExtend_WireData can be initialized by <br>
//! TopoDS_Wire, and converted back to TopoDS_Wire. <br>
//! An edge in the wire is defined by its rank number. Operations of accessing, <br>
//! adding and removing edge at the given rank number are provided. On the whole <br>
//! wire, operations of circular permutation and reversing (both orientations of <br>
//! all edges and order of edges) are provided as well. <br>
//! This class also provides a method to check if the edge in the wire is a seam <br>
//! (if the wire lies on a face). <br>
//! This class is handled by reference. Such an approach gives the following advantages: <br>
//!    1.    Sharing the object of this class strongly optimizes the processes of <br>
//!       analysis and fixing performed in parallel on the wire stored in the form <br>
//!      of this class. Fixing tool (e.g. ShapeFix_Wire) fixes problems one by <br>
//!      one using analyzing tool (e.g. ShapeAnalysis_Wire). Sharing allows not <br>
//!      to reinitialize each time the analyzing tool with modified <br>
//!      ShapeExtend_WireData what consumes certain time. <br>
//!   2.    No copying of contents. The object of ShapeExtend_WireData class has <br>
//!      quite big size, returning it as a result of the function would cause <br>
//!      additional copying of contents if this class were one handled by value. <br>
//!      Moreover, this class is stored as a field in other classes which are <br>
//!      they returned as results of functions, storing only a handle to <br>
//!      ShapeExtend_WireData saves time and memory. <br>
public ref class OCShapeExtend_WireData : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCShapeExtend_WireData(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCShapeExtend_WireData(Handle(ShapeExtend_WireData)* nativeHandle);

// Methods PUBLIC

//! Empty constructor, creates empty wire with no edges <br>
OCShapeExtend_WireData();

//! Constructor initializing the data from TopoDS_Wire. Calls Init(wire,chained). <br>
OCShapeExtend_WireData(OCNaroWrappers::OCTopoDS_Wire^ wire, System::Boolean chained, System::Boolean theManifoldMode);

//! Copies data from another WireData <br>
 /*instead*/  void Init(OCNaroWrappers::OCShapeExtend_WireData^ other) ;

//! Loads an already existing wire <br>
//!          If <chained> is True (default), edges are added in the <br>
//!          sequence as they are explored by TopoDS_Iterator <br>
//!          Else, if <chained> is False, wire is explored by <br>
//!          BRepTools_WireExplorer and it is guaranteed that edges will <br>
//!          be sequencially connected. <br>
//! Remark : In the latter case it can happen that not all edges <br>
//!          will be found (because of limitations of <br>
//!          BRepTools_WireExplorer for disconnected wires and wires <br>
//!          with seam edges). <br>
 /*instead*/  System::Boolean Init(OCNaroWrappers::OCTopoDS_Wire^ wire, System::Boolean chained, System::Boolean theManifoldMode) ;

//! Clears data about Wire. <br>
 /*instead*/  void Clear() ;

//! Computes the list of seam edges <br>
//!          By default (direct call), computing is enforced <br>
//!          For indirect call (from IsSeam) it is redone only if not yet <br>
//!          already done or if the list of edges has changed <br>
//! Remark : A Seam Edge is an Edge present twice in the list, once as <br>
//!          FORWARD and once as REVERSED <br>
//!          Each sense has its own PCurve, the one for FORWARD <br>
//!          must be set in first <br>
 /*instead*/  void ComputeSeams(System::Boolean enforce) ;

//! Does a circular permutation in order to set <num>th edge last <br>
 /*instead*/  void SetLast(Standard_Integer num) ;

//! When the wire contains at least one degenerated edge, sets it <br>
//!          as last one <br>
//! Note   : It is useful to process pcurves, for instance, while the pcurve <br>
//!          of a DGNR may not be computed from its 3D part (there is none) <br>
//!          it is computed after the other edges have been computed and <br>
//!          chained. <br>
 /*instead*/  void SetDegeneratedLast() ;

//! Adds an edge to a wire, being defined (not yet ended) <br>
//!          This is the plain, basic, function to add an edge <br>
//!          <num> = 0 (D): Appends at end <br>
//!          <num> = 1: Preprends at start <br>
//!          else, Insert before <num> <br>
//! Remark : Null Edge is simply ignored <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Edge^ edge, Standard_Integer atnum) ;

//! Adds an entire wire, considered as a list of edges <br>
//! Remark : The wire is assumed to be ordered (TopoDS_Iterator <br>
//!          is used) <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Wire^ wire, Standard_Integer atnum) ;

//! Adds a wire in the form of WireData <br>
 /*instead*/  void Add(OCNaroWrappers::OCShapeExtend_WireData^ wire, Standard_Integer atnum) ;

//! Adds an edge or a wire invoking corresponding method Add <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Integer atnum) ;

//! Adds an edge to start or end of <me>, according to <mode> <br>
//!          0: at end, as direct <br>
//!          1: at end, as reversed <br>
//!          2: at start, as direct <br>
//!          3: at start, as reversed <br>
//!          < 0: no adding <br>
 /*instead*/  void AddOriented(OCNaroWrappers::OCTopoDS_Edge^ edge, Standard_Integer mode) ;

//! Adds a wire to start or end of <me>, according to <mode> <br>
//!          0: at end, as direct <br>
//!          1: at end, as reversed <br>
//!          2: at start, as direct <br>
//!          3: at start, as reversed <br>
//!          < 0: no adding <br>
 /*instead*/  void AddOriented(OCNaroWrappers::OCTopoDS_Wire^ wire, Standard_Integer mode) ;

//! Adds an edge or a wire invoking corresponding method <br>
//!          AddOriented <br>
 /*instead*/  void AddOriented(OCNaroWrappers::OCTopoDS_Shape^ shape, Standard_Integer mode) ;

//! Removes an Edge, given its rank. By default removes the last edge. <br>
 /*instead*/  void Remove(Standard_Integer num) ;

//! Replaces an edge at the given <br>
//!          rank number <num> with new one. Default is last edge (<num> = 0). <br>
 /*instead*/  void Set(OCNaroWrappers::OCTopoDS_Edge^ edge, Standard_Integer num) ;

//! Reverses the sense of the list and the orientation of each Edge <br>
//!          This method should be called when either wire has no seam edges <br>
//!          or face is not available <br>
 /*instead*/  void Reverse() ;

//! Reverses the sense of the list and the orientation of each Edge <br>
//!          The face is necessary for swapping pcurves for seam edges <br>
//!          (first pcurve corresponds to orientation FORWARD, and second to <br>
//!          REVERSED; when edge is reversed, pcurves must be swapped) <br>
//!          If face is NULL, no swapping is performed <br>
 /*instead*/  void Reverse(OCNaroWrappers::OCTopoDS_Face^ face) ;

//! Returns the count of currently recorded edges <br>
 /*instead*/  Standard_Integer NbEdges() ;

//! Returns the count of currently recorded non-manifold edges <br>
 /*instead*/  Standard_Integer NbNonManifoldEdges() ;

//! Returns <num>th nonmanifold Edge <br>
 /*instead*/  OCTopoDS_Edge^ NonmanifoldEdge(Standard_Integer num) ;

//! Returns sequence of non-manifold edges <br>
//!          This sequence can be not empty if wire data set in manifold mode but <br>
//!          initial wire has INTERNAL orientation or contains INTERNAL edges <br>
 /*instead*/  OCTopTools_HSequenceOfShape^ NonmanifoldEdges() ;

//! Returns mode defining manifold wire data or not. <br>
//!          If manifold that nonmanifold edges will not be not <br>
//!          consider during operations(previous behaviour) <br>
//!         and they will be added only in result wire <br>
//!          else non-manifold edges will consider during operations <br>
 /*instead*/  System::Boolean ManifoldMode() ;

//! Returns <num>th Edge <br>
 /*instead*/  OCTopoDS_Edge^ Edge(Standard_Integer num) ;

//! Returns the index of the edge <br>
//!          If the edge is a seam the orientation is also checked <br>
//!          Returns 0 if the edge is not found in the list <br>
 /*instead*/  Standard_Integer Index(OCNaroWrappers::OCTopoDS_Edge^ edge) ;

//! Tells if an Edge is seam (see ComputeSeams) <br>
//! An edge is considered as seam if it presents twice in <br>
//! the edge list, once as FORWARD and once as REVERSED. <br>
 /*instead*/  System::Boolean IsSeam(Standard_Integer num) ;

//! Makes TopoDS_Wire using <br>
//! BRep_Builder (just creates the TopoDS_Wire object and adds <br>
//! all edges into it). This method should be called when <br>
//! the wire is correct (for example, after successful <br>
//! fixes by ShapeFix_Wire) and adjacent edges share common <br>
//! vertices. In case if adjacent edges do not share the same <br>
//! vertices the resulting TopoDS_Wire will be invalid. <br>
 /*instead*/  OCTopoDS_Wire^ Wire() ;

//! Makes TopoDS_Wire using <br>
//! BRepAPI_MakeWire. Class BRepAPI_MakeWire merges <br>
//! geometrically coincided vertices and can disturb <br>
//! correct order of edges in the wire. If this class fails, <br>
//! null shape is returned. <br>
 /*instead*/  OCTopoDS_Wire^ WireAPIMake() ;

~OCShapeExtend_WireData()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
