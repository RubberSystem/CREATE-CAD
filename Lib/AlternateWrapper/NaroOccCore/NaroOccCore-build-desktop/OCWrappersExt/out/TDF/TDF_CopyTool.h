// File generated by CPPExt (MPV)
//
#ifndef _TDF_CopyTool_OCWrappers_HeaderFile
#define _TDF_CopyTool_OCWrappers_HeaderFile

// include native header
#include <TDF_CopyTool.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTDF_DataSet;
ref class OCTDF_RelocationTable;
ref class OCTDF_IDFilter;
ref class OCTDF_Label;
ref class OCTDF_LabelDataMap;
ref class OCTDF_AttributeDataMap;
ref class OCTDF_LabelMap;
ref class OCTDF_AttributeMap;


//! This class provides services to build, copy or <br>
//!          paste a set of information. <br>
//! <br>
//!          Copy methods: <br>
//!          ------------- <br>
//! <br>
//!          * Copy(aSourceDataSet, aTargetLabel, <br>
//!          aRelocationTable) copies a source DataSet under <br>
//!          its target place (see below: IMPORTANT NOTICE 1). <br>
//! <br>
//!          * Copy(aSourceDataSet, anTargetLabel, <br>
//!          aRelocationTable, aFilter) does the same job as <br>
//!          the previous method. But <aFilter> gives a list of <br>
//!          IDs for which a target attribute prevails over a <br>
//!          source one. In this special case, the source <br>
//!          attribute will be copied only if there will be no <br>
//!          target attribute. <br>
//! <br>
//! <br>
//!          IMPORTANT NOTICE : Label pre-binding <br>
//!          ------------------ <br>
//! <br>
//!          For it is possible to copy root labels in another <br>
//!          place in the same Data or in a different one with <br>
//!          other tags, it is necessary to inform the Copy <br>
//!          algorithm about the target place. To do so: <br>
//! <br>
//!          * first get or create new target root labels; <br>
//! <br>
//!          * then bind them with the source root labels using <br>
//!          the relocation table method: <br>
//!          SetRelocation(aSourceLabel, aTargetLabel); <br>
//! <br>
//!          * finally call Copy(...) with the relocation table <br>
//!          previously set. In this way, this method will take <br>
//!          these relocations in account. <br>
public ref class OCTDF_CopyTool  {

protected:
  TDF_CopyTool* nativeHandle;
  OCTDF_CopyTool(OCDummy^) {};

public:
  property TDF_CopyTool* Handle
  {
    TDF_CopyTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTDF_CopyTool(TDF_CopyTool* nativeHandle);

// Methods PUBLIC

//!  Copy   <aSourceDataSet> with using  and  updating <br>
//!           <aRelocationTable>. This  method ignores   target <br>
//!          attributes privilege over source ones. <br>
static /*instead*/  void Copy(OCNaroWrappers::OCTDF_DataSet^ aSourceDataSet, OCNaroWrappers::OCTDF_RelocationTable^ aRelocationTable) ;

//!    Copy  <aSourceDataSet>  using      and updating <br>
//!          <aRelocationTable>. Use <aPrivilegeFilter> to give <br>
//!           a list  of   IDs for which  the target  attribute <br>
//!          prevails over the source one. <br>
static /*instead*/  void Copy(OCNaroWrappers::OCTDF_DataSet^ aSourceDataSet, OCNaroWrappers::OCTDF_RelocationTable^ aRelocationTable, OCNaroWrappers::OCTDF_IDFilter^ aPrivilegeFilter) ;

//!   Copy    <aSourceDataSet>   using and    updating <br>
//!          <aRelocationTable>. Use <aPrivilegeFilter> to give <br>
//!           a  list of IDs   for which  the target  attribute <br>
//!             prevails    over    the    source     one.   If <br>
//!            <setSelfContained>   is   set  to   true,  every <br>
//!          TDF_Reference will  be replaced  by the referenced <br>
//!          structure according to <aRefFilter>. <br>
//! <br>
//!          NB: <aRefFilter> is used only if <br>
//!          <setSelfContained> is true. <br>//! Internal root label copy recursive method. <br>
static /*instead*/  void Copy(OCNaroWrappers::OCTDF_DataSet^ aSourceDataSet, OCNaroWrappers::OCTDF_RelocationTable^ aRelocationTable, OCNaroWrappers::OCTDF_IDFilter^ aPrivilegeFilter, OCNaroWrappers::OCTDF_IDFilter^ aRefFilter, System::Boolean setSelfContained) ;

~OCTDF_CopyTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
