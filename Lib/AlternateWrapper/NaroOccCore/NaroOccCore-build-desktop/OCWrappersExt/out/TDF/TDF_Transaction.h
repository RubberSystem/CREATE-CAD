// File generated by CPPExt (MPV)
//
#ifndef _TDF_Transaction_OCWrappers_HeaderFile
#define _TDF_Transaction_OCWrappers_HeaderFile

// include native header
#include <TDF_Transaction.hxx>
#include "../Converter.h"


#include "../TCollection/TCollection_AsciiString.h"


namespace OCNaroWrappers
{

ref class OCTDF_Data;
ref class OCTDF_Delta;
ref class OCTCollection_AsciiString;


//! This class offers services to open, commit or <br>
//!          abort a transaction in a more secure way than <br>
//!          using Data from TDF. If you forget to close a <br>
//!          transaction, it will be automaticaly aborted at <br>
//!          the destruction of this object, at the closure of <br>
//!          its scope. <br>
//! <br>
//!          In case of catching errors, the effect will be the <br>
//!          same: aborting transactions until the good current <br>
//!          one. <br>
public ref class OCTDF_Transaction  {

protected:
  TDF_Transaction* nativeHandle;
  OCTDF_Transaction(OCDummy^) {};

public:
  property TDF_Transaction* Handle
  {
    TDF_Transaction* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTDF_Transaction(TDF_Transaction* nativeHandle);

// Methods PUBLIC

//! Creates an empty transaction context, unable to be <br>
//!          opened. <br>
OCTDF_Transaction(OCNaroWrappers::OCTCollection_AsciiString^ aName);

//! Creates a transaction context on <aDF>, ready to <br>
//!          be opened. <br>
OCTDF_Transaction(OCNaroWrappers::OCTDF_Data^ aDF, OCNaroWrappers::OCTCollection_AsciiString^ aName);

//! Aborts all the transactions on <myDF> and sets <br>
//!          <aDF> to build a transaction context on <aDF>, <br>
//!          ready to be opened. <br>
 /*instead*/  void Initialize(OCNaroWrappers::OCTDF_Data^ aDF) ;

//! If not yet done, opens a new transaction on <br>
//!          <myDF>. Returns the index of the just opened <br>
//!          transaction. <br>
//! <br>
//!          It raises DomainError if the transaction is <br>
//!          already open, and NullObject if there is no <br>
//!          current Data framework. <br>
 /*instead*/  Standard_Integer Open() ;

//! Commits the transactions until AND including the <br>
//!          current opened one. <br>
 /*instead*/  OCTDF_Delta^ Commit(System::Boolean withDelta) ;

//! Returns the Data from TDF. <br>
//! <br>
 /*instead*/  OCTDF_Data^ Data() ;

//! Returns the number of the transaction opened by <me>. <br>
//! <br>
 /*instead*/  Standard_Integer Transaction() ;

//! Returns the transaction name. <br>
//! <br>
 /*instead*/  OCTCollection_AsciiString^ Name() ;

//! Returns true if the transaction is open. <br>
//! <br>
 /*instead*/  System::Boolean IsOpen() ;

~OCTDF_Transaction()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
