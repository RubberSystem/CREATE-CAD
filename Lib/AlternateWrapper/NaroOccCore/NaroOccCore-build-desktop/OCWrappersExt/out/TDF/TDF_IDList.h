// File generated by CPPExt (MPV)
//
#ifndef _TDF_IDList_OCWrappers_HeaderFile
#define _TDF_IDList_OCWrappers_HeaderFile

// include native header
#include <TDF_IDList.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTDF_ListIteratorOfIDList;
ref class OCStandard_GUID;
ref class OCTDF_ListNodeOfIDList;



public ref class OCTDF_IDList  {

protected:
  TDF_IDList* nativeHandle;
  OCTDF_IDList(OCDummy^) {};

public:
  property TDF_IDList* Handle
  {
    TDF_IDList* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTDF_IDList(TDF_IDList* nativeHandle);

// Methods PUBLIC


OCTDF_IDList();


 /*instead*/  void Assign(OCNaroWrappers::OCTDF_IDList^ Other) ;


 /*instead*/  Standard_Integer Extent() ;


 /*instead*/  System::Boolean IsEmpty() ;


 /*instead*/  void Prepend(OCNaroWrappers::OCStandard_GUID^ I) ;


 /*instead*/  void Prepend(OCNaroWrappers::OCStandard_GUID^ I, OCNaroWrappers::OCTDF_ListIteratorOfIDList^ theIt) ;


 /*instead*/  void Prepend(OCNaroWrappers::OCTDF_IDList^ Other) ;


 /*instead*/  void Append(OCNaroWrappers::OCStandard_GUID^ I) ;


 /*instead*/  void Append(OCNaroWrappers::OCStandard_GUID^ I, OCNaroWrappers::OCTDF_ListIteratorOfIDList^ theIt) ;


 /*instead*/  void Append(OCNaroWrappers::OCTDF_IDList^ Other) ;


 /*instead*/  OCStandard_GUID^ First() ;


 /*instead*/  OCStandard_GUID^ Last() ;


 /*instead*/  void RemoveFirst() ;


 /*instead*/  void Remove(OCNaroWrappers::OCTDF_ListIteratorOfIDList^ It) ;


 /*instead*/  void InsertBefore(OCNaroWrappers::OCStandard_GUID^ I, OCNaroWrappers::OCTDF_ListIteratorOfIDList^ It) ;


 /*instead*/  void InsertBefore(OCNaroWrappers::OCTDF_IDList^ Other, OCNaroWrappers::OCTDF_ListIteratorOfIDList^ It) ;


 /*instead*/  void InsertAfter(OCNaroWrappers::OCStandard_GUID^ I, OCNaroWrappers::OCTDF_ListIteratorOfIDList^ It) ;


 /*instead*/  void InsertAfter(OCNaroWrappers::OCTDF_IDList^ Other, OCNaroWrappers::OCTDF_ListIteratorOfIDList^ It) ;

~OCTDF_IDList()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
