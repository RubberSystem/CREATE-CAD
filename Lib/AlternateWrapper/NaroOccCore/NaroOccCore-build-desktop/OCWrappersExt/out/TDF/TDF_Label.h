// File generated by CPPExt (MPV)
//
#ifndef _TDF_Label_OCWrappers_HeaderFile
#define _TDF_Label_OCWrappers_HeaderFile

// include native header
#include <TDF_Label.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTDF_ChildIterator;
ref class OCTDF_Attribute;
ref class OCTDF_AttributeIterator;
ref class OCTDF_Data;
ref class OCTDF_LabelMapHasher;
ref class OCStandard_GUID;
ref class OCTDF_IDFilter;
ref class OCTDF_AttributeIndexedMap;


//! This class provides basic operations  to define <br>
//! a label in a data structure. <br>
//! A label is a feature in the feature hierarchy. A <br>
//!          label is always connected to a Data from TDF. <br>
//! To a label is attached attributes containing the <br>
//!          software components information. <br>
//! <br>
//!          Label information: <br>
//! <br>
//!          It is possible to know the tag, the father, the <br>
//!          depth in the tree of the label, if the label is <br>
//!          root, null or equal to another label. <br>
//! <br>
//!          Comfort methods: <br>
//!          Some methods useful on a label. <br>
//! <br>
//!          Attributes: <br>
//! <br>
//!          It is possible to get an attribute in accordance <br>
//!          to an ID, or the yougest previous version of a <br>
//!          current attribute. <br>
public ref class OCTDF_Label  {

protected:
  TDF_Label* nativeHandle;
  OCTDF_Label(OCDummy^) {};

public:
  property TDF_Label* Handle
  {
    TDF_Label* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTDF_Label(TDF_Label* nativeHandle);

// Methods PUBLIC

//! Constructs an empty label object. <br>
OCTDF_Label();

//! Nullifies the label. <br>
//! <br>
 /*instead*/  void Nullify() ;

//! Returns the Data owning <me>. <br>
//! <br>
 /*instead*/  OCTDF_Data^ Data() ;

//! Returns the tag of the label. <br>
//! This is the integer assigned randomly to a label <br>
//!  in a data framework. This integer is used to <br>
//! identify this label in an entry. <br>
//! <br>
 /*instead*/  Standard_Integer Tag() ;

//! Returns the label father. This label may be null <br>
//!          if the label is root. <br>
//! <br>
 /*instead*/  OCTDF_Label^ Father() ;

//! Returns True if the <aLabel> is null, i.e. it has <br>
//!          not been included in the data framework. <br>
//! <br>
 /*instead*/  System::Boolean IsNull() ;

//! Sets or unsets <me> and all its descendants as <br>
//!          imported label, according to <aStatus>. <br>
 /*instead*/  void Imported(System::Boolean aStatus) ;

//! Returns True if the <aLabel> is imported. <br>
//! <br>
 /*instead*/  System::Boolean IsImported() ;

//! Returns True if the <aLabel> is equal to me (same <br>
//!           LabelNode*). <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCTDF_Label^ aLabel) ;


 /*instead*/  System::Boolean IsDifferent(OCNaroWrappers::OCTDF_Label^ aLabel) ;


 /*instead*/  System::Boolean IsRoot() ;

//! Returns true if <me> owns an attribute with <anID> as ID. <br>
 /*instead*/  System::Boolean IsAttribute(OCNaroWrappers::OCStandard_GUID^ anID) ;

//! Adds an Attribute  to the current label. Raises if <br>
//!          there is already one. <br>
 /*instead*/  void AddAttribute(OCNaroWrappers::OCTDF_Attribute^ anAttribute) ;

//!  Forgets an  Attribute   from the  current  label, <br>
//!          setting its   forgotten status true and  its valid <br>
//!           status false. Raises if   the attribute is not in <br>
//!          the structure. <br>
 /*instead*/  void ForgetAttribute(OCNaroWrappers::OCTDF_Attribute^ anAttribute) ;

//! Forgets the  Attribute of  GUID <aguid> from   the <br>
//!          current label   . If the   attribute doesn't exist <br>
//!          returns False. Otherwise returns True. <br>
 /*instead*/  System::Boolean ForgetAttribute(OCNaroWrappers::OCStandard_GUID^ aguid) ;

//! Forgets all the attributes. Does it on also on the <br>
//!          sub-labels if <clearChildren> is set to true. Of <br>
//!          course, this method is compatible with Transaction <br>
//!          & Delta mecanisms. <br>
 /*instead*/  void ForgetAllAttributes(System::Boolean clearChildren) ;

//! Undo Forget action, setting its forgotten status <br>
//!          false and its valid status true. Raises if the <br>
//!          attribute is not in the structure. <br>
 /*instead*/  void ResumeAttribute(OCNaroWrappers::OCTDF_Attribute^ anAttribute) ;

//! Finds an attribute of the current label, according <br>
//!          to <anID>. <br>
//! If anAttribute is not a valid one, false is returned. <br>
//! <br>
//!        The method returns True if found, False otherwise. <br>
//! <br>
//!          A removed attribute cannot be found. <br>
 /*instead*/  System::Boolean FindAttribute(OCNaroWrappers::OCStandard_GUID^ anID, OCNaroWrappers::OCTDF_Attribute^ anAttribute) ;

//! Finds an attribute of the current label, according <br>
//!          to <anID> and <aTransaction>. This attribute <br>
//!          has/had to be a valid one for the given <br>
//!          transaction index . So, this attribute is not <br>
//!          necessary a valid one. <br>
//! <br>
//!          The method returns True if found, False otherwise. <br>
//! <br>
//!          A removed attribute cannot be found nor a backuped <br>
//!          attribute of a removed one. <br>
 /*instead*/  System::Boolean FindAttribute(OCNaroWrappers::OCStandard_GUID^ anID, Standard_Integer aTransaction, OCNaroWrappers::OCTDF_Attribute^ anAttribute) ;

//! Returns true if <me> or a DESCENDANT of <me> owns <br>
//!          attributes not yet available in transaction 0. It <br>
//!          means at least one of their attributes is new, <br>
//!          modified or deleted. <br>
//! <br>
 /*instead*/  System::Boolean MayBeModified() ;

//! Returns true if <me> owns attributes not yet <br>
//!          available in transaction 0. It means at least one <br>
//!          attribute is new, modified or deleted. <br>
//! <br>
 /*instead*/  System::Boolean AttributesModified() ;

//! Returns true if this label has at least one attribute. <br>
 /*instead*/  System::Boolean HasAttribute() ;

//! Returns the number of attributes. <br>
 /*instead*/  Standard_Integer NbAttributes() ;

//! Returns the depth of the label in the data framework. <br>
//! This corresponds to the number of fathers which <br>
//! this label has, and is used in determining <br>
//! whether a label is root, null or equivalent to another label. <br>
//! Exceptions: <br>
//! Standard_NullObject if this label is null. This is <br>
//! because a null object can have no depth. <br>
 /*instead*/  Standard_Integer Depth() ;

//! Returns True if <me> is a descendant of <br>
//!          <aLabel>. Attention: every label is its own <br>
//!          descendant. <br>
 /*instead*/  System::Boolean IsDescendant(OCNaroWrappers::OCTDF_Label^ aLabel) ;

//! Returns the root label Root of the data structure. <br>
//! This has a depth of 0. <br>
//! Exceptions: <br>
//! Standard_NullObject if this label is null. This is <br>
//! because a null object can have no depth. <br>
 /*instead*/  OCTDF_Label^ Root() ;

//! Returns true if this label has at least one child. <br>
 /*instead*/  System::Boolean HasChild() ;

//! Returns the number of children. <br>
 /*instead*/  Standard_Integer NbChildren() ;

//! Finds a child label having <aTag> as tag. Creates <br>
//! The tag aTag identifies the label which will be the parent. <br>
//! If create is true and no child label is found, a new one is created. <br>
//! Example: <br>
//! //creating a label with tag 10 at Root <br>
//! TDF_Label lab1 = aDF->Root().FindChild(10); <br>
//! //creating labels 7 and 2 on label 10 <br>
//! TDF_Label lab2 = lab1.FindChild(7); <br>
//! TDF_Label lab3 = lab1.FindChild(2); <br>
 /*instead*/  OCTDF_Label^ FindChild(Standard_Integer aTag, System::Boolean create) ;

//! Create  a new child   label of me  using autoamtic <br>
//!          delivery tags provided by TagSource. <br>
 /*instead*/  OCTDF_Label^ NewChild() ;

//! Returns the current transaction index. <br>
 /*instead*/  Standard_Integer Transaction() ;

//! Returns true if node address of <me> is lower than <br>
//!          <otherLabel> one. Used to quickly sort labels (not <br>
//!          on entry criterion). <br>
//! <br>
//! -C++: inline <br>
 /*instead*/  System::Boolean HasLowerNode(OCNaroWrappers::OCTDF_Label^ otherLabel) ;

//! Returns true if node address of <me> is greater <br>
//!          than <otherLabel> one. Used to quickly sort labels <br>
//!          (not on entry criterion). <br>
//! <br>
//! -C++: inline <br>
 /*instead*/  System::Boolean HasGreaterNode(OCNaroWrappers::OCTDF_Label^ otherLabel) ;

//! Dumps the minimum information about <me> on <br>
//!          <aStream>. <br>
//! <br>
 /*instead*/  Standard_OStream& Dump(Standard_OStream& anOS) ;

//! Dumps the label on <aStream> and its attributes <br>
//!          rank in <aMap> if their IDs are kept by <IDFilter>. <br>
 /*instead*/  void ExtendedDump(Standard_OStream& anOS, OCNaroWrappers::OCTDF_IDFilter^ aFilter, OCNaroWrappers::OCTDF_AttributeIndexedMap^ aMap) ;

//! Dumps the label entry. <br>
 /*instead*/  void EntryDump(Standard_OStream& anOS) ;

~OCTDF_Label()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
