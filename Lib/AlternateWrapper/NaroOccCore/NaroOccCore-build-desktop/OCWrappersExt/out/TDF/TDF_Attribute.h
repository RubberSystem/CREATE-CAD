// File generated by CPPExt (Transient)
//
#ifndef _TDF_Attribute_OCWrappers_HeaderFile
#define _TDF_Attribute_OCWrappers_HeaderFile

// include the wrapped class
#include <TDF_Attribute.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCTDF_Data;
ref class OCTDF_Label;
ref class OCTDF_LabelNode;
ref class OCTDF_AttributeIterator;
ref class OCTDF_DeltaOnForget;
ref class OCStandard_GUID;
ref class OCTDF_AttributeDelta;
ref class OCTDF_DeltaOnAddition;
ref class OCTDF_DeltaOnResume;
ref class OCTDF_DeltaOnModification;
ref class OCTDF_DeltaOnRemoval;
ref class OCTDF_RelocationTable;
ref class OCTDF_DataSet;
ref class OCTDF_IDFilter;
ref class OCTDF_AttributeIndexedMap;


//! This abstract class, alongwith Label, <br>
//! is one of the cornerstones of Model Editor. <br>
//! The groundwork is to define the root of <br>
//! information. This information is to be <br>
//! attached to a Label, and could be of any of <br>
//! the following types: <br>
//! -   a feature <br>
//! -   a constraint <br>
//! -   a comment <br>
//! <br>
//!          Contents: <br>
//!          --------- <br>
//! <br>
//!          Each software component who'd like to attach its <br>
//!          own information to a label has to inherit from <br>
//!          this class and has to add its own information as <br>
//!          fields of this new class. <br>
//! <br>
//!          Identification: <br>
//!          --------------- <br>
//! <br>
//!          An attribute can be identified by its ID. Every <br>
//!          attributes used with the same meaning (for <br>
//!          exemple: Integer, String, Topology...) have the <br>
//!          same worldwide unique ID. <br>
//! <br>
//!          Addition: <br>
//!          --------- <br>
//! <br>
//!          An attribute can be added to a label only if there <br>
//!          is no attribute yet with the same ID. Call-back <br>
//!          methods are offered, called automatically before <br>
//!          and after the addition action. <br>
//! <br>
//!          Removal: <br>
//!          -------- <br>
//! <br>
//!          An attribute can be removed from a label only if <br>
//!          there is an attribute yet with the same <br>
//!          ID. Call-back methods are offered, called <br>
//!          automatically before and after the removal <br>
//!          action. A removed attribute cannot be found <br>
//!          again. After a removal, only an addition of an <br>
//!          attribute with the sane ID is possible (no <br>
//!          backup...). <br>
//! <br>
//!          Modification & Transaction: <br>
//!          --------------------------- <br>
//! <br>
//!          An attribute can be backuped before a <br>
//!          modification. Only one backup attribute by <br>
//!          transaction is possible. The modification can be <br>
//!          forgotten (abort transaction) or validated (commit <br>
//!          transaction). <br>
//! <br>
//!          BackupCopy and restore are methods used by the backup or <br>
//!          abort transaction actions. BackupCopy is called by <br>
//!          Backup to generate an attribute with the same <br>
//!          contents as the current one. Restore is called <br>
//!          when aborting a transaction to transfer the <br>
//!          backuped contents into the current <br>
//!          attribute. These methods must be implemented by <br>
//!          end use inheriting classes. <br>
//! <br>
//!          A standard implementation of BackupCopy is provided, but <br>
//!          it is not necessary a good one for any use. <br>
//! <br>
//!          Copy use methods: <br>
//!          ----------------- <br>
//! <br>
//!          Paste and NewEmpty methods are used by the copy <br>
//!          algorithms. The goal of "Paste" is to transfer an <br>
//!          attribute new contents into another attribute. The <br>
//!          goal of "NewEmpty" is to create an attribute <br>
//!          whithout contents, to be further filled with the <br>
//!          new contents of another one. These 2 methods must <br>
//!          be implemented by end use inheriting classes. <br>
//! <br>
//!          AttributeDelta: <br>
//!          --------------- <br>
//! <br>
//!          An AttributeDelta is the difference between to <br>
//!          attribute values states.  These methods must be <br>
//!          implemented by end use inheriting classes, to <br>
//!          profit from the delta services. <br>
public ref class OCTDF_Attribute : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCTDF_Attribute(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCTDF_Attribute(Handle(TDF_Attribute)* nativeHandle);

// Methods PUBLIC

//! Initializes fields. <br>
OCTDF_Attribute();

//! Returns   the   label to which  the   attribute is <br>
//!          attached. If the  label is not  included in a  DF, <br>
//!          the label is null. See Label. <br>
//!  Warning <br>
//!  If the label is not included in a data <br>
//!  framework, it is null. <br>
//!  This function should not be redefined inline. <br>
 /*instead*/  OCTDF_Label^ Label() ;

//! Returns the transaction index in which the <br>
//!          attribute has been created or modified. <br>
//! <br>
 /*instead*/  Standard_Integer Transaction() ;

//! Returns the upper transaction index until which <br>
//!          the attribute is/was valid. This number may <br>
//!          vary. A removed attribute validity range is <br>
//!          reduced to its transaction index. <br>
 /*instead*/  Standard_Integer UntilTransaction() ;

//! Returns true if the attribute is valid; i.e. not a <br>
//!          backuped or removed one. <br>
//! <br>
 /*instead*/  System::Boolean IsValid() ;

//! Returns true if the attribute has no backup <br>
//! <br>
 /*instead*/  System::Boolean IsNew() ;

//! Returns true if the attribute forgotten status is <br>
//!          set. <br>
//! <br>//! ShortCut Methods concerning associated attributes <br>
//!          ================================================= <br>
 /*instead*/  System::Boolean IsForgotten() ;

//! Returns true if it  exists an associated attribute <br>
//!          of <me> with <anID> as ID. <br>
 /*instead*/  System::Boolean IsAttribute(OCNaroWrappers::OCStandard_GUID^ anID) ;

//! Finds an associated  attribute of  <me>, according <br>
//!          to <anID>.  the returned <anAttribute> is a  valid <br>
//!          one. The  method  returns  True if   found,  False <br>
//!          otherwise.   A removed attribute  cannot be found using <br>
//! this  method. <br>
 /*instead*/  System::Boolean FindAttribute(OCNaroWrappers::OCStandard_GUID^ anID, OCNaroWrappers::OCTDF_Attribute^ anAttribute) ;

//! Adds   an   Attribute <other>  to  the   label  of <br>
//!           <me>.Raises if there is  already  one of the same <br>
//!          GUID fhan <other>. <br>
 /*instead*/  void AddAttribute(OCNaroWrappers::OCTDF_Attribute^ other) ;

//! Forgets  the Attribute of  GUID <aguid> associated <br>
//!          to the label of <me>. Be  carefull that if <me> is <br>
//!          the attribute of <guid>, <me> will have a null label <br>
//!          after this call.  If  the attribute doesn't  exist <br>
//!          returns False. Otherwise returns True. <br>
 /*instead*/  System::Boolean ForgetAttribute(OCNaroWrappers::OCStandard_GUID^ aguid) ;

//! Forgets all the  attributes attached to  the label <br>
//!            of <me>.    Does   it   on  the  sub-labels   if <br>
//!          <clearChildren> is set  to true.  Of  course, this <br>
//!           method  is  compatible with Transaction  &  Delta <br>
//!           mecanisms. Be carefull  that  if <me> will have a <br>
//!          null label after this call <br>
 /*instead*/  void ForgetAllAttributes(System::Boolean clearChildren) ;

//! Something to do after adding an Attribute to a label. <br>
virtual /*instead*/  void AfterAddition() ;

//! Something to do before removing an Attribute from <br>
//!          a label. <br>
virtual /*instead*/  void BeforeRemoval() ;

//! Something to do before forgetting an Attribute to a <br>
//!          label. <br>
virtual /*instead*/  void BeforeForget() ;

//! Something to do after resuming an Attribute from <br>
//!          a label. <br>
virtual /*instead*/  void AfterResume() ;

//! Something to do AFTER creation of an attribute by <br>
//!          persistent-transient translation. The returned <br>
//!          status says if AfterUndo has been performed (true) <br>
//!          or if this callback must be called once again <br>
//!          further (false). If <forceIt> is set to true, the <br>
//!          method MUST perform and return true. Does nothing <br>
//!          by default and returns true. <br>
virtual /*instead*/  System::Boolean AfterRetrieval(System::Boolean forceIt) ;

//! Something to do before applying <anAttDelta>. The <br>
//!          returned status says if AfterUndo has been <br>
//!          performed (true) or if this callback must be <br>
//!          called once again further (false). If <forceIt> is <br>
//!          set to true, the method MUST perform and return <br>
//!          true. Does nothing by default and returns true. <br>
virtual /*instead*/  System::Boolean BeforeUndo(OCNaroWrappers::OCTDF_AttributeDelta^ anAttDelta, System::Boolean forceIt) ;

//! Something to do after applying <anAttDelta>. The <br>
//!          returned status says if AfterUndo has been <br>
//!          performed (true) or if this callback must be <br>
//!          called once again further (false). If <forceIt> is <br>
//!          set to true, the method MUST perform and return <br>
//!          true. Does nothing by default and returns true. <br>
virtual /*instead*/  System::Boolean AfterUndo(OCNaroWrappers::OCTDF_AttributeDelta^ anAttDelta, System::Boolean forceIt) ;

//! A callback. <br>
//!          By default does nothing. <br>
//!          It is called by TDF_Data::CommitTransaction() method. <br>
virtual /*instead*/  void BeforeCommitTransaction() ;

//! Backups the attribute. The backuped attribute is <br>
//!          flagged "Backuped" and not "Valid". <br>
//! <br>
//!          The method does nothing: <br>
//! <br>
//!          1) If the attribute transaction number is equal to <br>
//!          the current transaction number (the attribute has <br>
//!          already been backuped). <br>
//! <br>
//!          2) If the attribute is not attached to a label. <br>
 /*instead*/  void Backup() ;

//! Returns true if the attribute backup status is <br>
//!          set. This status is set/unset by the <br>
//!          Backup() method. <br>
//! <br>
 /*instead*/  System::Boolean IsBackuped() ;

//! Copies  the attribute  contents into  a  new other <br>
//!          attribute. It is used by Backup(). <br>
virtual /*instead*/  OCTDF_Attribute^ BackupCopy() ;

//! Makes an AttributeDelta because <me> <br>
//!         appeared. The only known use of a redefinition of <br>
//!         this method is to return a null handle (no delta). <br>
virtual /*instead*/  OCTDF_DeltaOnAddition^ DeltaOnAddition() ;

//! Makes an AttributeDelta because <me> has been <br>
//!         forgotten. <br>
virtual /*instead*/  OCTDF_DeltaOnForget^ DeltaOnForget() ;

//! Makes an AttributeDelta because <me> has been <br>
//!         resumed. <br>
virtual /*instead*/  OCTDF_DeltaOnResume^ DeltaOnResume() ;

//! Makes a DeltaOnModification between <me> and <br>
//!         <anOldAttribute. <br>
virtual /*instead*/  OCTDF_DeltaOnModification^ DeltaOnModification(OCNaroWrappers::OCTDF_Attribute^ anOldAttribute) ;

//! Applies a DeltaOnModification to <me>. <br>
virtual /*instead*/  void DeltaOnModification(OCNaroWrappers::OCTDF_DeltaOnModification^ aDelta) ;

//! Makes a DeltaOnRemoval on <me> because <me> has <br>
//!         disappeared from the DS. <br>
virtual /*instead*/  OCTDF_DeltaOnRemoval^ DeltaOnRemoval() ;

//! Adds the first level referenced attributes and labels <br>
//!          to <aDataSet>. <br>
//! <br>
//!          For this, use the AddLabel or AddAttribute of <br>
//!          DataSet. <br>
//! <br>
//!          If there is none, do not implement the method. <br>
virtual /*instead*/  void References(OCNaroWrappers::OCTDF_DataSet^ aDataSet) ;

//! Dumps the minimum information about <me> on <br>
//!          <aStream>. <br>
//! <br>
virtual /*instead*/  Standard_OStream& Dump(Standard_OStream& anOS) ;

//! Dumps the attribute content on <aStream>, using <br>
//!          <aMap> like this: if an attribute is not in the <br>
//!          map, first put add it to the map and then dump it. <br>
//!          Use the map rank instead of dumping each attribute <br>
//!          field. <br>
virtual /*instead*/  void ExtendedDump(Standard_OStream& anOS, OCNaroWrappers::OCTDF_IDFilter^ aFilter, OCNaroWrappers::OCTDF_AttributeIndexedMap^ aMap) ;

//! Forgets the attribute. <aTransaction> is the <br>
//!          current transaction in which the forget is done. A <br>
//!          forgotten attribute is also flagged not "Valid". <br>
//! <br>
//!          A forgotten attribute is invisible. Set also the <br>
//!          "Valid" status to False. Obvioulsy, DF cannot <br>
//!          empty an attribute (this has a semantic <br>
//!          signification), but can remove it from the <br>
//!          structure. So, a forgotten attribute is NOT an empty <br>
//!          one, but a soon DEAD one. <br>
//! <br>
//!          Should be private. <br>
 /*instead*/  void Forget(Standard_Integer aTransaction) ;

~OCTDF_Attribute()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
