// File generated by CPPExt (Package)
//

#ifndef _GeomConvert_OCWrappers_HeaderFile
#define _GeomConvert_OCWrappers_HeaderFile

// Include the wrapped header
#include <GeomConvert.hxx>

#include "GeomConvert_BSplineCurveKnotSplitting.h"
#include "GeomConvert_BSplineSurfaceKnotSplitting.h"
#include "GeomConvert_BSplineCurveToBezierCurve.h"
#include "GeomConvert_CompCurveToBSplineCurve.h"
#include "GeomConvert_BSplineSurfaceToBezierSurface.h"
#include "GeomConvert_CompBezierSurfacesToBSplineSurface.h"
#include "GeomConvert_ApproxSurface.h"
#include "GeomConvert_ApproxCurve.h"


namespace OCNaroWrappers
{
//! The GeomConvert package provides some global functions as follows <br>
//! -   converting classical Geom curves into BSpline curves, <br>
//! -   segmenting BSpline curves, particularly at knots <br>
//!   values: this function may be used in conjunction with the <br>
//!   GeomConvert_BSplineCurveKnotSplitting <br>
//!   class to segment a BSpline curve into arcs which <br>
//!   comply with required continuity levels, <br>
//! -   converting classical Geom surfaces into BSpline surfaces, and <br>
//! -   segmenting BSpline surfaces, particularly at <br>
//!   knots values: this function may be used in conjunction with the <br>
//!   GeomConvert_BSplineSurfaceKnotSplitting <br>
//!   class to segment a BSpline surface into patches <br>
//!   which comply with required continuity levels. <br>
//!  All geometric entities used in this package are bounded. <br>
//! <br>
//! References : <br>
//!  . Generating the Bezier Points of B-spline curves and surfaces <br>
//!    (Wolfgang Bohm) CAGD volume 13 number 6 november 1981 <br>
//!  . On NURBS: A Survey  (Leslie Piegl) IEEE Computer Graphics and <br>
//!    Application January 1991 <br>
//!  . Curve and surface construction using rational B-splines <br>
//!    (Leslie Piegl and Wayne Tiller) CAD Volume 19 number 9 november <br>
//!    1987 <br>
//!  . A survey of curve and surface methods in CAGD (Wolfgang BOHM) <br>
//!    CAGD 1 1984 <br>
public ref class OCGeomConvert abstract sealed
{

public:
// Methods

//!  Raised if FromK1 = ToK2 <br>
//!             Raised if FromK1 or ToK2 are out of the bounds <br>
//!             [FirstUKnotIndex, LastUKnotIndex] <br>
static /*instead*/  OCGeom_BSplineCurve^ SplitBSplineCurve(OCNaroWrappers::OCGeom_BSplineCurve^ C, Standard_Integer FromK1, Standard_Integer ToK2, System::Boolean SameOrientation) ;


//!  Raised if FromU1 or ToU2 are out of the parametric bounds of the <br>
//!  curve (The tolerance criterion is ParametricTolerance). <br>
//!  Raised if Abs (FromU1 - ToU2) <= ParametricTolerance <br>
//!  Raised if ParametricTolerance < Resolution from gp. <br>
static /*instead*/  OCGeom_BSplineCurve^ SplitBSplineCurve(OCNaroWrappers::OCGeom_BSplineCurve^ C, Standard_Real FromU1, Standard_Real ToU2, Standard_Real ParametricTolerance, System::Boolean SameOrientation) ;

//!  Raised if <br>
//!             FromUK1 = ToUK2 or FromVK1 = ToVK2 <br>
//!             FromUK1 or ToUK2 are out of the bounds <br>
//!             [FirstUKnotIndex, LastUKnotIndex] <br>
//!             FromVK1 or ToVK2 are out of the bounds <br>
//!             [FirstVKnotIndex, LastVKnotIndex] <br>
static /*instead*/  OCGeom_BSplineSurface^ SplitBSplineSurface(OCNaroWrappers::OCGeom_BSplineSurface^ S, Standard_Integer FromUK1, Standard_Integer ToUK2, Standard_Integer FromVK1, Standard_Integer ToVK2, System::Boolean SameUOrientation, System::Boolean SameVOrientation) ;

//! Raised if FromK1 = ToK2 or if <br>
//!            FromK1 or ToK2 are out of the bounds <br>
//!            [FirstUKnotIndex, LastUKnotIndex] in the <br>
//!            considered parametric direction. <br>
static /*instead*/  OCGeom_BSplineSurface^ SplitBSplineSurface(OCNaroWrappers::OCGeom_BSplineSurface^ S, Standard_Integer FromK1, Standard_Integer ToK2, System::Boolean USplit, System::Boolean SameOrientation) ;


//!  Raised if FromU1 or ToU2 or FromV1 or ToU2 are out of the <br>
//!  parametric bounds of the surface (the tolerance criterion is <br>
//!  ParametricTolerance). <br>
//!  Raised if Abs (FromU1 - ToU2) <= ParametricTolerance or <br>
//!  Abs (FromV1 - ToV2) <= ParametricTolerance. <br>
//!  Raised if ParametricTolerance < Resolution. <br>
static /*instead*/  OCGeom_BSplineSurface^ SplitBSplineSurface(OCNaroWrappers::OCGeom_BSplineSurface^ S, Standard_Real FromU1, Standard_Real ToU2, Standard_Real FromV1, Standard_Real ToV2, Standard_Real ParametricTolerance, System::Boolean SameUOrientation, System::Boolean SameVOrientation) ;


//!  Raises if FromParam1 or ToParam2 are out of the parametric bounds <br>
//!  of the surface in the considered direction. <br>
//!  Raises if Abs (FromParam1 - ToParam2) <= ParametricTolerance. <br>
static /*instead*/  OCGeom_BSplineSurface^ SplitBSplineSurface(OCNaroWrappers::OCGeom_BSplineSurface^ S, Standard_Real FromParam1, Standard_Real ToParam2, System::Boolean USplit, Standard_Real ParametricTolerance, System::Boolean SameOrientation) ;


static /*instead*/  OCGeom_BSplineCurve^ CurveToBSplineCurve(OCNaroWrappers::OCGeom_Curve^ C, OCConvert_ParameterisationType Parameterisation) ;


static /*instead*/  OCGeom_BSplineSurface^ SurfaceToBSplineSurface(OCNaroWrappers::OCGeom_Surface^ S) ;

//! This Method concatenates G1 the ArrayOfCurves as far <br>
//!  as it  is possible. <br>
//!  ArrayOfCurves[0..N-1] <br>
//!  ArrayOfToler contains the  biggest tolerance of the two <br>
//!               points shared by two consecutives curves. <br>
//!               Its dimension: [0..N-2] <br>
//!  ClosedG1     indicates if the ArrayOfCurves is closed. <br>
//!               In this case ClosedG1 contains the biggest tolerance <br>
//!               of the two points which are at the closure. <br>
//!               Otherwise its value is 0.0 <br>
static /*instead*/  void ConcatG1(OCNaroWrappers::OCTColGeom_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColGeom_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedG1Flag, Standard_Real ClosedTolerance) ;

//! This Method concatenates C1 the ArrayOfCurves as far <br>
//!  as it is possible. <br>
//!  ArrayOfCurves[0..N-1] <br>
//!  ArrayOfToler contains the  biggest tolerance of the two <br>
//!               points shared by two consecutives curves. <br>
//!               Its dimension: [0..N-2] <br>
//!  ClosedG1     indicates if the ArrayOfCurves is closed. <br>
//!               In this case ClosedG1 contains the biggest tolerance <br>
//!               of the two points which are at the closure. <br>
//!               Otherwise its value is 0.0 <br>
static /*instead*/  void ConcatC1(OCNaroWrappers::OCTColGeom_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColStd_HArray1OfInteger^ ArrayOfIndices, OCNaroWrappers::OCTColGeom_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedG1Flag, Standard_Real ClosedTolerance) ;

//! This Method concatenates C1 the ArrayOfCurves as far <br>
//!  as it is possible. <br>
//!  ArrayOfCurves[0..N-1] <br>
//!  ArrayOfToler contains the  biggest tolerance of the two <br>
//!               points shared by two consecutives curves. <br>
//!               Its dimension: [0..N-2] <br>
//!  ClosedG1     indicates if the ArrayOfCurves is closed. <br>
//!               In this case ClosedG1 contains the biggest tolerance <br>
//!               of the two points which are at the closure. <br>
//!               Otherwise its value is 0.0 <br>
//! <br>
static /*instead*/  void ConcatC1(OCNaroWrappers::OCTColGeom_Array1OfBSplineCurve^ ArrayOfCurves, OCNaroWrappers::OCTColStd_Array1OfReal^ ArrayOfToler, OCNaroWrappers::OCTColStd_HArray1OfInteger^ ArrayOfIndices, OCNaroWrappers::OCTColGeom_HArray1OfBSplineCurve^ ArrayOfConcatenated, System::Boolean ClosedG1Flag, Standard_Real ClosedTolerance, Standard_Real AngularTolerance) ;

//! This  Method reduces as far as   it is possible the <br>
//!  multiplicities of  the  knots of  the BSpline BS.(keeping  the <br>
//!  geometry).  It returns a new BSpline which  could still be C0. <br>
//!  tolerance is a  geometrical tolerance. <br>
//!  The  Angular toleranceis in radians  and mesures  the angle of <br>
//!  the tangents  on  the left and on  the right  to decide if  the <br>
//! curve is G1 or not at a given point <br>
static /*instead*/  void C0BSplineToC1BSplineCurve(OCNaroWrappers::OCGeom_BSplineCurve^ BS, Standard_Real tolerance, Standard_Real AngularTolerance) ;

//! This Method   reduces as far  as  it is possible  the <br>
//!  multiplicities  of  the knots  of the BSpline  BS.(keeping the geometry). <br>
//!  It returns an array of BSpline C1. tolerance is a geometrical tolerance. <br>
static /*instead*/  void C0BSplineToArrayOfC1BSplineCurve(OCNaroWrappers::OCGeom_BSplineCurve^ BS, OCNaroWrappers::OCTColGeom_HArray1OfBSplineCurve^ tabBS, Standard_Real tolerance) ;

//!This   Method reduces as far   as it is  possible the <br>
//!  multiplicities of  the  knots of  the  BSpline BS.(keeping the <br>
//!  geometry).  It returns an array of BSpline C1.  tolerance is a <br>
//!  geometrical tolerance : it  allows for the maximum deformation <br>
//!  The  Angular tolerance is in  radians and mesures the angle of <br>
//!  the tangents on the left and on the right to decide if the curve <br>
//!  is C1 or not at a given point <br>
static /*instead*/  void C0BSplineToArrayOfC1BSplineCurve(OCNaroWrappers::OCGeom_BSplineCurve^ BS, OCNaroWrappers::OCTColGeom_HArray1OfBSplineCurve^ tabBS, Standard_Real AngularTolerance, Standard_Real tolerance) ;


};

}; // OCNaroWrappers

#endif
