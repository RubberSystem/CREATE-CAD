// File generated by CPPExt (CPP file)
//

#include "GeomConvert_CompBezierSurfacesToBSplineSurface.h"
#include "../Converter.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColgp/TColgp_HArray2OfPnt.h"
#include "../TColGeom/TColGeom_Array2OfBezierSurface.h"
#include "../TColStd/TColStd_Array1OfReal.h"


using namespace OCNaroWrappers;

OCGeomConvert_CompBezierSurfacesToBSplineSurface::OCGeomConvert_CompBezierSurfacesToBSplineSurface(GeomConvert_CompBezierSurfacesToBSplineSurface* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGeomConvert_CompBezierSurfacesToBSplineSurface::OCGeomConvert_CompBezierSurfacesToBSplineSurface(OCNaroWrappers::OCTColGeom_Array2OfBezierSurface^ Beziers) 
{
  nativeHandle = new GeomConvert_CompBezierSurfacesToBSplineSurface(*((TColGeom_Array2OfBezierSurface*)Beziers->Handle));
}

OCGeomConvert_CompBezierSurfacesToBSplineSurface::OCGeomConvert_CompBezierSurfacesToBSplineSurface(OCNaroWrappers::OCTColGeom_Array2OfBezierSurface^ Beziers, Standard_Real Tolerance, System::Boolean RemoveKnots) 
{
  nativeHandle = new GeomConvert_CompBezierSurfacesToBSplineSurface(*((TColGeom_Array2OfBezierSurface*)Beziers->Handle), Tolerance, OCConverter::BooleanToStandardBoolean(RemoveKnots));
}

OCGeomConvert_CompBezierSurfacesToBSplineSurface::OCGeomConvert_CompBezierSurfacesToBSplineSurface(OCNaroWrappers::OCTColGeom_Array2OfBezierSurface^ Beziers, OCNaroWrappers::OCTColStd_Array1OfReal^ UKnots, OCNaroWrappers::OCTColStd_Array1OfReal^ VKnots, OCGeomAbs_Shape UContinuity, OCGeomAbs_Shape VContinuity, Standard_Real Tolerance) 
{
  nativeHandle = new GeomConvert_CompBezierSurfacesToBSplineSurface(*((TColGeom_Array2OfBezierSurface*)Beziers->Handle), *((TColStd_Array1OfReal*)UKnots->Handle), *((TColStd_Array1OfReal*)VKnots->Handle), (GeomAbs_Shape)UContinuity, (GeomAbs_Shape)VContinuity, Tolerance);
}

 Standard_Integer OCGeomConvert_CompBezierSurfacesToBSplineSurface::NbUKnots()
{
  return ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->NbUKnots();
}

 Standard_Integer OCGeomConvert_CompBezierSurfacesToBSplineSurface::NbUPoles()
{
  return ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->NbUPoles();
}

 Standard_Integer OCGeomConvert_CompBezierSurfacesToBSplineSurface::NbVKnots()
{
  return ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->NbVKnots();
}

 Standard_Integer OCGeomConvert_CompBezierSurfacesToBSplineSurface::NbVPoles()
{
  return ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->NbVPoles();
}

OCTColgp_HArray2OfPnt^ OCGeomConvert_CompBezierSurfacesToBSplineSurface::Poles()
{
  Handle(TColgp_HArray2OfPnt) tmp = ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->Poles();
  return gcnew OCTColgp_HArray2OfPnt(&tmp);
}

OCTColStd_HArray1OfReal^ OCGeomConvert_CompBezierSurfacesToBSplineSurface::UKnots()
{
  Handle(TColStd_HArray1OfReal) tmp = ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->UKnots();
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

 Standard_Integer OCGeomConvert_CompBezierSurfacesToBSplineSurface::UDegree()
{
  return ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->UDegree();
}

OCTColStd_HArray1OfReal^ OCGeomConvert_CompBezierSurfacesToBSplineSurface::VKnots()
{
  Handle(TColStd_HArray1OfReal) tmp = ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->VKnots();
  return gcnew OCTColStd_HArray1OfReal(&tmp);
}

 Standard_Integer OCGeomConvert_CompBezierSurfacesToBSplineSurface::VDegree()
{
  return ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->VDegree();
}

OCTColStd_HArray1OfInteger^ OCGeomConvert_CompBezierSurfacesToBSplineSurface::UMultiplicities()
{
  Handle(TColStd_HArray1OfInteger) tmp = ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->UMultiplicities();
  return gcnew OCTColStd_HArray1OfInteger(&tmp);
}

OCTColStd_HArray1OfInteger^ OCGeomConvert_CompBezierSurfacesToBSplineSurface::VMultiplicities()
{
  Handle(TColStd_HArray1OfInteger) tmp = ((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->VMultiplicities();
  return gcnew OCTColStd_HArray1OfInteger(&tmp);
}

 System::Boolean OCGeomConvert_CompBezierSurfacesToBSplineSurface::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((GeomConvert_CompBezierSurfacesToBSplineSurface*)nativeHandle)->IsDone());
}


