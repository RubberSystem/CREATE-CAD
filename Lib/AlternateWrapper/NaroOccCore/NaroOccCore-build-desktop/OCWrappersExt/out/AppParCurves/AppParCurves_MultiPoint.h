// File generated by CPPExt (MPV)
//
#ifndef _AppParCurves_MultiPoint_OCWrappers_HeaderFile
#define _AppParCurves_MultiPoint_OCWrappers_HeaderFile

// include native header
#include <AppParCurves_MultiPoint.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCMMgt_TShared;
ref class OCTColgp_Array1OfPnt;
ref class OCTColgp_Array1OfPnt2d;
ref class OCgp_Pnt;
ref class OCgp_Pnt2d;


//! This class describes Points composing a MultiPoint. <br>
//!          These points can be 2D or 3D. The user must first give the <br>
//!          3D Points and then the 2D Points. <br>
//!          They are Poles of a Bezier Curve. <br>
//! This class is used either to define data input or <br>
//! results when performing the approximation of several lines in parallel. <br>
public ref class OCAppParCurves_MultiPoint  {

protected:
  AppParCurves_MultiPoint* nativeHandle;
  OCAppParCurves_MultiPoint(OCDummy^) {};

public:
  property AppParCurves_MultiPoint* Handle
  {
    AppParCurves_MultiPoint* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCAppParCurves_MultiPoint(AppParCurves_MultiPoint* nativeHandle);

// Methods PUBLIC

//! creates an indefinite MultiPoint. <br>
OCAppParCurves_MultiPoint();

//! constructs a set of Points used to approximate a <br>
//!          Multiline. <br>
//!          These Points can be of 2 or 3 dimensions. <br>
//!          Points will be initialized with SetPoint and SetPoint2d. <br>
//!          NbPoints is the number of 3D Points. <br>
//!          NbPoints2d is the number of 2D Points. <br>
OCAppParCurves_MultiPoint(Standard_Integer NbPoints, Standard_Integer NbPoints2d);

//! creates a MultiPoint only composed of 3D points. <br>
OCAppParCurves_MultiPoint(OCNaroWrappers::OCTColgp_Array1OfPnt^ tabP);

//! creates a MultiPoint only composed of 2D points. <br>
OCAppParCurves_MultiPoint(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ tabP2d);

//! constructs a set of Points used to approximate a <br>
//!          Multiline. <br>
//!          These Points can be of 2 or 3 dimensions. <br>
//!          Points will be initialized with SetPoint and SetPoint2d. <br>
//!          NbPoints is the total number of Points. <br>
OCAppParCurves_MultiPoint(OCNaroWrappers::OCTColgp_Array1OfPnt^ tabP, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ tabP2d);


virtual /*instead*/  void Delete() ;

//! the 3d Point of range Index of this MultiPoint is <br>
//!          set to <Point>. <br>
//!          An exception is raised if Index < 0 or <br>
//!          Index > number of 3d Points. <br>
 /*instead*/  void SetPoint(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ Point) ;

//! returns the 3d Point of range Index. <br>
//!          An exception is raised if Index < 0 or <br>
//!          Index < number of 3d Points. <br>
 /*instead*/  OCgp_Pnt^ Point(Standard_Integer Index) ;

//! The 2d Point of range Index is set to <Point>. <br>
//!          An exception is raised if Index > 3d Points or <br>
//!          Index > total number of Points. <br>
 /*instead*/  void SetPoint2d(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt2d^ Point) ;

//! returns the 2d Point of range Index. <br>
//!          An exception is raised if index <= number of <br>
//!          3d Points or Index > total number of Points. <br>
 /*instead*/  OCgp_Pnt2d^ Point2d(Standard_Integer Index) ;

//! returns the dimension of the point of range Index. <br>
//!          An exception is raised if Index <0 or Index > NbCurves. <br>
 /*instead*/  Standard_Integer Dimension(Standard_Integer Index) ;

//! returns the number of points of dimension 3D. <br>
 /*instead*/  Standard_Integer NbPoints() ;

//! returns the number of points of dimension 2D. <br>
 /*instead*/  Standard_Integer NbPoints2d() ;

//! Applies a transformation to the curve of range <br>
//!          <CuIndex>. <br>
//!          newx = x + dx*oldx <br>
//!          newy = y + dy*oldy    for all points of the curve. <br>
//!          newz = z + dz*oldz <br>
 /*instead*/  void Transform(Standard_Integer CuIndex, Standard_Real x, Standard_Real dx, Standard_Real y, Standard_Real dy, Standard_Real z, Standard_Real dz) ;

//! Applies a transformation to the Curve of range <br>
//!          <CuIndex>. <br>
//!          newx = x + dx*oldx <br>
//!          newy = y + dy*oldy    for all points of the curve. <br>
 /*instead*/  void Transform2d(Standard_Integer CuIndex, Standard_Real x, Standard_Real dx, Standard_Real y, Standard_Real dy) ;

//! Prints on the stream o information on the current <br>
//!          state of the object. <br>
//!          Is used to redefine the operator <<. <br>
virtual /*instead*/  void Dump(Standard_OStream& o) ;

~OCAppParCurves_MultiPoint()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
