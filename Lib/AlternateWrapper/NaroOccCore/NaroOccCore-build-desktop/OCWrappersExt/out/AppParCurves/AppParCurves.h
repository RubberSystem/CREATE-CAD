// File generated by CPPExt (Package)
//

#ifndef _AppParCurves_OCWrappers_HeaderFile
#define _AppParCurves_OCWrappers_HeaderFile

// Include the wrapped header
#include <AppParCurves.hxx>

#include "AppParCurves_MLineTool.h"
#include "AppParCurves_MultiPoint.h"
#include "AppParCurves_MultiCurve.h"
#include "AppParCurves_MultiBSpCurve.h"
#include "AppParCurves_ConstraintCouple.h"
#include "AppParCurves_LeastSquare.h"
#include "AppParCurves_ResolConstraint.h"
#include "AppParCurves_Function.h"
#include "AppParCurves_BSpFunction.h"
#include "AppParCurves_Gradient.h"
#include "AppParCurves_Gradient_BFGS.h"
#include "AppParCurves_ParLeastSquare.h"
#include "AppParCurves_ResConstraint.h"
#include "AppParCurves_ParFunction.h"
#include "AppParCurves_BSpGradient.h"
#include "AppParCurves_BSpGradient_BFGS.h"
#include "AppParCurves_BSpParLeastSquare.h"
#include "AppParCurves_BSpParFunction.h"
#include "AppParCurves_Projection.h"
#include "AppParCurves_ProLeastSquare.h"
#include "AppParCurves_ProConstraint.h"
#include "AppParCurves_ProFunction.h"
#include "AppParCurves_SmoothCriterion.h"
#include "AppParCurves_LinearCriteria.h"
#include "AppParCurves_Variational.h"
#include "AppParCurves_Array1OfConstraintCouple.h"
#include "AppParCurves_HArray1OfConstraintCouple.h"
#include "AppParCurves_Array1OfMultiPoint.h"
#include "AppParCurves_HArray1OfMultiPoint.h"
#include "AppParCurves_Array1OfMultiCurve.h"
#include "AppParCurves_HArray1OfMultiCurve.h"
#include "AppParCurves_SequenceOfMultiCurve.h"
#include "AppParCurves_Array1OfMultiBSpCurve.h"
#include "AppParCurves_HArray1OfMultiBSpCurve.h"
#include "AppParCurves_SequenceOfMultiBSpCurve.h"
#include "AppParCurves_SequenceNodeOfSequenceOfMultiCurve.h"
#include "AppParCurves_SequenceNodeOfSequenceOfMultiBSpCurve.h"


namespace OCNaroWrappers
{
//! Parallel Approximation in n curves. <br>
//! This package gives all the algorithms used to approximate a MultiLine <br>
//! described by the tool MLineTool. <br>
//! The result of the approximation will be a MultiCurve. <br>
public ref class OCAppParCurves abstract sealed
{

public:
// Methods


static /*instead*/  void BernsteinMatrix(Standard_Integer NbPoles, OCNaroWrappers::OCmath_Vector^ U, OCNaroWrappers::OCmath_Matrix^ A) ;


static /*instead*/  void Bernstein(Standard_Integer NbPoles, OCNaroWrappers::OCmath_Vector^ U, OCNaroWrappers::OCmath_Matrix^ A, OCNaroWrappers::OCmath_Matrix^ DA) ;


static /*instead*/  void SecondDerivativeBernstein(Standard_Real U, OCNaroWrappers::OCmath_Vector^ DDA) ;


static /*instead*/  void SplineFunction(Standard_Integer NbPoles, Standard_Integer Degree, OCNaroWrappers::OCmath_Vector^ Parameters, OCNaroWrappers::OCmath_Vector^ FlatKnots, OCNaroWrappers::OCmath_Matrix^ A, OCNaroWrappers::OCmath_Matrix^ DA, OCNaroWrappers::OCmath_IntegerVector^ Index) ;


};

}; // OCNaroWrappers

#endif
