// File generated by CPPExt (CPP file)
//

#include "AppParCurves_MultiCurve.h"
#include "../Converter.h"
#include "AppParCurves_HArray1OfMultiPoint.h"
#include "AppParCurves_Array1OfMultiPoint.h"
#include "AppParCurves_MultiPoint.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Vec2d.h"


using namespace OCNaroWrappers;

OCAppParCurves_MultiCurve::OCAppParCurves_MultiCurve(AppParCurves_MultiCurve* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCAppParCurves_MultiCurve::OCAppParCurves_MultiCurve() 
{
  nativeHandle = new AppParCurves_MultiCurve();
}

OCAppParCurves_MultiCurve::OCAppParCurves_MultiCurve(Standard_Integer NbPol) 
{
  nativeHandle = new AppParCurves_MultiCurve(NbPol);
}

OCAppParCurves_MultiCurve::OCAppParCurves_MultiCurve(OCNaroWrappers::OCAppParCurves_Array1OfMultiPoint^ tabMU) 
{
  nativeHandle = new AppParCurves_MultiCurve(*((AppParCurves_Array1OfMultiPoint*)tabMU->Handle));
}

 void OCAppParCurves_MultiCurve::Delete()
{
  ((AppParCurves_MultiCurve*)nativeHandle)->Delete();
}

 void OCAppParCurves_MultiCurve::SetNbPoles(Standard_Integer nbPoles)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->SetNbPoles(nbPoles);
}

 void OCAppParCurves_MultiCurve::SetValue(Standard_Integer Index, OCNaroWrappers::OCAppParCurves_MultiPoint^ MPoint)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->SetValue(Index, *((AppParCurves_MultiPoint*)MPoint->Handle));
}

 Standard_Integer OCAppParCurves_MultiCurve::NbCurves()
{
  return ((AppParCurves_MultiCurve*)nativeHandle)->NbCurves();
}

 Standard_Integer OCAppParCurves_MultiCurve::NbPoles()
{
  return ((AppParCurves_MultiCurve*)nativeHandle)->NbPoles();
}

 Standard_Integer OCAppParCurves_MultiCurve::Degree()
{
  return ((AppParCurves_MultiCurve*)nativeHandle)->Degree();
}

 Standard_Integer OCAppParCurves_MultiCurve::Dimension(Standard_Integer CuIndex)
{
  return ((AppParCurves_MultiCurve*)nativeHandle)->Dimension(CuIndex);
}

 void OCAppParCurves_MultiCurve::Curve(Standard_Integer CuIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ TabPnt)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->Curve(CuIndex, *((TColgp_Array1OfPnt*)TabPnt->Handle));
}

 void OCAppParCurves_MultiCurve::Curve(Standard_Integer CuIndex, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ TabPnt)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->Curve(CuIndex, *((TColgp_Array1OfPnt2d*)TabPnt->Handle));
}

OCAppParCurves_MultiPoint^ OCAppParCurves_MultiCurve::Value(Standard_Integer Index)
{
  AppParCurves_MultiPoint* tmp = new AppParCurves_MultiPoint();
  *tmp = ((AppParCurves_MultiCurve*)nativeHandle)->Value(Index);
  return gcnew OCAppParCurves_MultiPoint(tmp);
}

OCgp_Pnt^ OCAppParCurves_MultiCurve::Pole(Standard_Integer CuIndex, Standard_Integer Nieme)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((AppParCurves_MultiCurve*)nativeHandle)->Pole(CuIndex, Nieme);
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt2d^ OCAppParCurves_MultiCurve::Pole2d(Standard_Integer CuIndex, Standard_Integer Nieme)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((AppParCurves_MultiCurve*)nativeHandle)->Pole2d(CuIndex, Nieme);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCAppParCurves_MultiCurve::Transform(Standard_Integer CuIndex, Standard_Real x, Standard_Real dx, Standard_Real y, Standard_Real dy, Standard_Real z, Standard_Real dz)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->Transform(CuIndex, x, dx, y, dy, z, dz);
}

 void OCAppParCurves_MultiCurve::Transform2d(Standard_Integer CuIndex, Standard_Real x, Standard_Real dx, Standard_Real y, Standard_Real dy)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->Transform2d(CuIndex, x, dx, y, dy);
}

 void OCAppParCurves_MultiCurve::Value(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->Value(CuIndex, U, *((gp_Pnt*)Pt->Handle));
}

 void OCAppParCurves_MultiCurve::Value(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->Value(CuIndex, U, *((gp_Pnt2d*)Pt->Handle));
}

 void OCAppParCurves_MultiCurve::D1(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt, OCNaroWrappers::OCgp_Vec^ V1)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->D1(CuIndex, U, *((gp_Pnt*)Pt->Handle), *((gp_Vec*)V1->Handle));
}

 void OCAppParCurves_MultiCurve::D1(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt, OCNaroWrappers::OCgp_Vec2d^ V1)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->D1(CuIndex, U, *((gp_Pnt2d*)Pt->Handle), *((gp_Vec2d*)V1->Handle));
}

 void OCAppParCurves_MultiCurve::D2(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->D2(CuIndex, U, *((gp_Pnt*)Pt->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCAppParCurves_MultiCurve::D2(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->D2(CuIndex, U, *((gp_Pnt2d*)Pt->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCAppParCurves_MultiCurve::Dump(Standard_OStream& o)
{
  ((AppParCurves_MultiCurve*)nativeHandle)->Dump(o);
}


