// File generated by CPPExt (MPV)
//
#ifndef _AppParCurves_MultiCurve_OCWrappers_HeaderFile
#define _AppParCurves_MultiCurve_OCWrappers_HeaderFile

// include native header
#include <AppParCurves_MultiCurve.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCAppParCurves_HArray1OfMultiPoint;
ref class OCAppParCurves_Array1OfMultiPoint;
ref class OCAppParCurves_MultiPoint;
ref class OCTColgp_Array1OfPnt;
ref class OCTColgp_Array1OfPnt2d;
ref class OCgp_Pnt;
ref class OCgp_Pnt2d;
ref class OCgp_Vec;
ref class OCgp_Vec2d;


//! This class describes a MultiCurve approximating a Multiline. <br>
//!          As a Multiline is a set of n lines, a MultiCurve is a set <br>
//!          of n curves. These curves are Bezier curves. <br>
//!          A MultiCurve is composed of m MultiPoint. <br>
//!          The approximating degree of these n curves is the same for <br>
//!          each one. <br>
public ref class OCAppParCurves_MultiCurve  {

protected:
  AppParCurves_MultiCurve* nativeHandle;
  OCAppParCurves_MultiCurve(OCDummy^) {};

public:
  property AppParCurves_MultiCurve* Handle
  {
    AppParCurves_MultiCurve* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCAppParCurves_MultiCurve(AppParCurves_MultiCurve* nativeHandle);

// Methods PUBLIC

//! returns an indefinite MultiCurve. <br>
OCAppParCurves_MultiCurve();

//! creates a MultiCurve, describing Bezier curves all <br>
//!          containing the same number of MultiPoint. <br>
//!          An exception is raised if Degree < 0. <br>
OCAppParCurves_MultiCurve(Standard_Integer NbPol);

//! creates a MultiCurve, describing Bezier curves all <br>
//!          containing the same number of MultiPoint. <br>
//!          Each MultiPoint must have NbCurves Poles. <br>
OCAppParCurves_MultiCurve(OCNaroWrappers::OCAppParCurves_Array1OfMultiPoint^ tabMU);


virtual /*instead*/  void Delete() ;

//! The number of poles of the MultiCurve <br>
//!          will be set to <nbPoles>. <br>
 /*instead*/  void SetNbPoles(Standard_Integer nbPoles) ;

//! sets the MultiPoint of range Index to the value <br>
//!          <MPoint>. <br>
//!          An exception is raised if Index <0 or Index >NbMPoint. <br>
 /*instead*/  void SetValue(Standard_Integer Index, OCNaroWrappers::OCAppParCurves_MultiPoint^ MPoint) ;

//! Returns the number of curves resulting from the <br>
//! approximation of a MultiLine. <br>
 /*instead*/  Standard_Integer NbCurves() ;

//!  Returns the number of poles on curves resulting from the approximation of a MultiLine. <br>
virtual /*instead*/  Standard_Integer NbPoles() ;

//! returns the degree of the curves. <br>
virtual /*instead*/  Standard_Integer Degree() ;

//! returns the dimension of the CuIndex curve. <br>
//!          An exception is raised if CuIndex<0 or CuIndex>NbCurves. <br>
 /*instead*/  Standard_Integer Dimension(Standard_Integer CuIndex) ;

//! returns the Pole array of the curve of range CuIndex. <br>
//!          An exception is raised if the dimension of the curve <br>
//!          is 2d. <br>
 /*instead*/  void Curve(Standard_Integer CuIndex, OCNaroWrappers::OCTColgp_Array1OfPnt^ TabPnt) ;

//! returns the Pole array of the curve of range CuIndex. <br>
//!          An exception is raised if the dimension of the curve <br>
//!          is 3d. <br>
 /*instead*/  void Curve(Standard_Integer CuIndex, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ TabPnt) ;

//! returns the Index MultiPoint. <br>
//!          An exception is raised if Index <0 or Index >Degree+1. <br>
 /*instead*/  OCAppParCurves_MultiPoint^ Value(Standard_Integer Index) ;

//! returns the Nieme pole of the CuIndex curve. <br>
//!          the curve must be a 3D curve. <br>
 /*instead*/  OCgp_Pnt^ Pole(Standard_Integer CuIndex, Standard_Integer Nieme) ;

//! returns the Nieme pole of the CuIndex curve. <br>
//!          the curve must be a 2D curve. <br>
 /*instead*/  OCgp_Pnt2d^ Pole2d(Standard_Integer CuIndex, Standard_Integer Nieme) ;

//! Applies a transformation to the curve of range <br>
//!          <CuIndex>. <br>
//!          newx = x + dx*oldx <br>
//!          newy = y + dy*oldy    for all points of the curve. <br>
//!          newz = z + dz*oldz <br>
 /*instead*/  void Transform(Standard_Integer CuIndex, Standard_Real x, Standard_Real dx, Standard_Real y, Standard_Real dy, Standard_Real z, Standard_Real dz) ;

//! Applies a transformation to the Curve of range <br>
//!          <CuIndex>. <br>
//!          newx = x + dx*oldx <br>
//!          newy = y + dy*oldy    for all points of the curve. <br>
 /*instead*/  void Transform2d(Standard_Integer CuIndex, Standard_Real x, Standard_Real dx, Standard_Real y, Standard_Real dy) ;

//! returns the value of the point with a parameter U <br>
//!          on the Bezier curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 2d. <br>
virtual /*instead*/  void Value(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt) ;

//! returns the value of the point with a parameter U <br>
//!          on the Bezier curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 3d. <br>
virtual /*instead*/  void Value(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt) ;

//! returns the value of the point with a parameter U <br>
//!          on the Bezier curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 3d. <br>
virtual /*instead*/  void D1(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt, OCNaroWrappers::OCgp_Vec^ V1) ;

//! returns the value of the point with a parameter U <br>
//!          on the Bezier curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 2d. <br>
virtual /*instead*/  void D1(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt, OCNaroWrappers::OCgp_Vec2d^ V1) ;

//! returns the value of the point with a parameter U <br>
//!          on the Bezier curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 3d. <br>
virtual /*instead*/  void D2(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;

//! returns the value of the point with a parameter U <br>
//!          on the Bezier curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 2d. <br>
virtual /*instead*/  void D2(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;

//! Prints on the stream o information on the current <br>
//!          state of the object. <br>
//!          Is used to redefine the operator <<. <br>
virtual /*instead*/  void Dump(Standard_OStream& o) ;

~OCAppParCurves_MultiCurve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
