// File generated by CPPExt (MPV)
//
#ifndef _AppParCurves_MultiBSpCurve_OCWrappers_HeaderFile
#define _AppParCurves_MultiBSpCurve_OCWrappers_HeaderFile

// include native header
#include <AppParCurves_MultiBSpCurve.hxx>
#include "../Converter.h"

#include "AppParCurves_MultiCurve.h"

#include "AppParCurves_MultiCurve.h"


namespace OCNaroWrappers
{

ref class OCTColStd_HArray1OfReal;
ref class OCTColStd_HArray1OfInteger;
ref class OCAppParCurves_Array1OfMultiPoint;
ref class OCTColStd_Array1OfReal;
ref class OCTColStd_Array1OfInteger;
ref class OCAppParCurves_MultiCurve;
ref class OCgp_Pnt;
ref class OCgp_Pnt2d;
ref class OCgp_Vec;
ref class OCgp_Vec2d;


//! This class describes a MultiBSpCurve approximating a Multiline. <br>
//!    Just as a Multiline is a set of a given number of lines, a MultiBSpCurve is a set <br>
//! of a specified number of bsplines defined by: <br>
//! -   A specified number of MultiPoints - the poles of a specified number of curves <br>
//! -   The degree of approximation identical for each of the specified number of curves. <br>
public ref class OCAppParCurves_MultiBSpCurve  : public OCAppParCurves_MultiCurve {

protected:
  // dummy constructor;
  OCAppParCurves_MultiBSpCurve(OCDummy^) : OCAppParCurves_MultiCurve((OCDummy^)nullptr) {};

public:

// constructor from native
OCAppParCurves_MultiBSpCurve(AppParCurves_MultiBSpCurve* nativeHandle);

// Methods PUBLIC

//! returns an indefinite MultiBSpCurve. <br>
OCAppParCurves_MultiBSpCurve();

//! creates a MultiBSpCurve, describing BSpline curves all <br>
//!          containing the same number of MultiPoint. <br>
//!          An exception is raised if Degree < 0. <br>
OCAppParCurves_MultiBSpCurve(Standard_Integer NbPol);

//! creates a MultiBSpCurve, describing BSpline curves all <br>
//!          containing the same number of MultiPoint. <br>
//!          Each MultiPoint must have NbCurves Poles. <br>
OCAppParCurves_MultiBSpCurve(OCNaroWrappers::OCAppParCurves_Array1OfMultiPoint^ tabMU, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults);

//! creates a MultiBSpCurve, describing BSpline <br>
//!          curves, taking control points from <SC>. <br>
OCAppParCurves_MultiBSpCurve(OCNaroWrappers::OCAppParCurves_MultiCurve^ SC, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults);

//! Knots of the multiBSpCurve are assigned to <theknots>. <br>
 /*instead*/  void SetKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ theKnots) ;

//! Multiplicities of the multiBSpCurve are assigned <br>
//!          to <theMults>. <br>
 /*instead*/  void SetMultiplicities(OCNaroWrappers::OCTColStd_Array1OfInteger^ theMults) ;

//! Returns an array of Reals containing <br>
//! the multiplicities of curves resulting from the approximation. <br>
 /*instead*/  OCTColStd_Array1OfReal^ Knots() ;

//! Returns an array of Reals containing the <br>
//!  multiplicities of curves resulting from the approximation. <br>
 /*instead*/  OCTColStd_Array1OfInteger^ Multiplicities() ;

//! returns the degree of the curve(s). <br>
virtual /*instead*/  Standard_Integer Degree() override;

//! returns the value of the point with a parameter U <br>
//!          on the BSpline curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 2d. <br>
virtual /*instead*/  void Value(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt) override;

//! returns the value of the point with a parameter U <br>
//!          on the BSpline curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 3d. <br>
virtual /*instead*/  void Value(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt) override;

//! returns the value of the point with a parameter U <br>
//!          on the BSpline curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 3d. <br>
virtual /*instead*/  void D1(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt, OCNaroWrappers::OCgp_Vec^ V1) override;

//! returns the value of the point with a parameter U <br>
//!          on the BSpline curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 2d. <br>
virtual /*instead*/  void D1(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt, OCNaroWrappers::OCgp_Vec2d^ V1) override;

//! returns the value of the point with a parameter U <br>
//!          on the BSpline curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 3d. <br>
virtual /*instead*/  void D2(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ Pt, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) override;

//! returns the value of the point with a parameter U <br>
//!          on the BSpline curve number CuIndex. <br>
//!          An exception is raised if CuIndex <0 or > NbCurves. <br>
//!          An exception is raised if the curve dimension is 2d. <br>
virtual /*instead*/  void D2(Standard_Integer CuIndex, Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ Pt, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) override;

//! Prints on the stream o information on the current <br>
//!          state of the object. <br>
//!          Is used to redefine the operator <<. <br>
virtual /*instead*/  void Dump(Standard_OStream& o) override;

~OCAppParCurves_MultiBSpCurve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
