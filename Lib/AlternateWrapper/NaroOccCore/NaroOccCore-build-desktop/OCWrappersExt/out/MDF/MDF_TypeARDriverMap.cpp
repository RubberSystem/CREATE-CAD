// File generated by CPPExt (CPP file)
//

#include "MDF_TypeARDriverMap.h"
#include "../Converter.h"
#include "../Standard/Standard_Type.h"
#include "MDF_ARDriver.h"
#include "../TColStd/TColStd_MapTransientHasher.h"
#include "MDF_DataMapNodeOfTypeARDriverMap.h"
#include "MDF_DataMapIteratorOfTypeARDriverMap.h"


using namespace OCNaroWrappers;

OCMDF_TypeARDriverMap::OCMDF_TypeARDriverMap(MDF_TypeARDriverMap* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMDF_TypeARDriverMap::OCMDF_TypeARDriverMap(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new MDF_TypeARDriverMap(NbBuckets);
}

OCMDF_TypeARDriverMap^ OCMDF_TypeARDriverMap::Assign(OCNaroWrappers::OCMDF_TypeARDriverMap^ Other)
{
  MDF_TypeARDriverMap* tmp = new MDF_TypeARDriverMap(0);
  *tmp = ((MDF_TypeARDriverMap*)nativeHandle)->Assign(*((MDF_TypeARDriverMap*)Other->Handle));
  return gcnew OCMDF_TypeARDriverMap(tmp);
}

 void OCMDF_TypeARDriverMap::ReSize(Standard_Integer NbBuckets)
{
  ((MDF_TypeARDriverMap*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCMDF_TypeARDriverMap::Bind(OCNaroWrappers::OCStandard_Type^ K, OCNaroWrappers::OCMDF_ARDriver^ I)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeARDriverMap*)nativeHandle)->Bind(*((Handle_Standard_Type*)K->Handle), *((Handle_MDF_ARDriver*)I->Handle)));
}

 System::Boolean OCMDF_TypeARDriverMap::IsBound(OCNaroWrappers::OCStandard_Type^ K)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeARDriverMap*)nativeHandle)->IsBound(*((Handle_Standard_Type*)K->Handle)));
}

 System::Boolean OCMDF_TypeARDriverMap::UnBind(OCNaroWrappers::OCStandard_Type^ K)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeARDriverMap*)nativeHandle)->UnBind(*((Handle_Standard_Type*)K->Handle)));
}

OCMDF_ARDriver^ OCMDF_TypeARDriverMap::Find(OCNaroWrappers::OCStandard_Type^ K)
{
  Handle(MDF_ARDriver) tmp = ((MDF_TypeARDriverMap*)nativeHandle)->Find(*((Handle_Standard_Type*)K->Handle));
  return gcnew OCMDF_ARDriver(&tmp);
}

OCMDF_ARDriver^ OCMDF_TypeARDriverMap::ChangeFind(OCNaroWrappers::OCStandard_Type^ K)
{
  Handle(MDF_ARDriver) tmp = ((MDF_TypeARDriverMap*)nativeHandle)->ChangeFind(*((Handle_Standard_Type*)K->Handle));
  return gcnew OCMDF_ARDriver(&tmp);
}

 Standard_Address OCMDF_TypeARDriverMap::Find1(OCNaroWrappers::OCStandard_Type^ K)
{
  return ((MDF_TypeARDriverMap*)nativeHandle)->Find1(*((Handle_Standard_Type*)K->Handle));
}

 Standard_Address OCMDF_TypeARDriverMap::ChangeFind1(OCNaroWrappers::OCStandard_Type^ K)
{
  return ((MDF_TypeARDriverMap*)nativeHandle)->ChangeFind1(*((Handle_Standard_Type*)K->Handle));
}


