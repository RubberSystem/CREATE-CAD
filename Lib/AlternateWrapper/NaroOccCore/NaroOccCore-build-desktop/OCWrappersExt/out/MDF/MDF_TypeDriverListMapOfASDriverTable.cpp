// File generated by CPPExt (CPP file)
//

#include "MDF_TypeDriverListMapOfASDriverTable.h"
#include "../Converter.h"
#include "../Standard/Standard_Type.h"
#include "MDF_DriverListOfASDriverTable.h"
#include "../TColStd/TColStd_MapTransientHasher.h"
#include "MDF_DataMapNodeOfTypeDriverListMapOfASDriverTable.h"
#include "MDF_DataMapIteratorOfTypeDriverListMapOfASDriverTable.h"


using namespace OCNaroWrappers;

OCMDF_TypeDriverListMapOfASDriverTable::OCMDF_TypeDriverListMapOfASDriverTable(MDF_TypeDriverListMapOfASDriverTable* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMDF_TypeDriverListMapOfASDriverTable::OCMDF_TypeDriverListMapOfASDriverTable(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new MDF_TypeDriverListMapOfASDriverTable(NbBuckets);
}

OCMDF_TypeDriverListMapOfASDriverTable^ OCMDF_TypeDriverListMapOfASDriverTable::Assign(OCNaroWrappers::OCMDF_TypeDriverListMapOfASDriverTable^ Other)
{
  MDF_TypeDriverListMapOfASDriverTable* tmp = new MDF_TypeDriverListMapOfASDriverTable(0);
  *tmp = ((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->Assign(*((MDF_TypeDriverListMapOfASDriverTable*)Other->Handle));
  return gcnew OCMDF_TypeDriverListMapOfASDriverTable(tmp);
}

 void OCMDF_TypeDriverListMapOfASDriverTable::ReSize(Standard_Integer NbBuckets)
{
  ((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCMDF_TypeDriverListMapOfASDriverTable::Bind(OCNaroWrappers::OCStandard_Type^ K, OCNaroWrappers::OCMDF_DriverListOfASDriverTable^ I)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->Bind(*((Handle_Standard_Type*)K->Handle), *((MDF_DriverListOfASDriverTable*)I->Handle)));
}

 System::Boolean OCMDF_TypeDriverListMapOfASDriverTable::IsBound(OCNaroWrappers::OCStandard_Type^ K)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->IsBound(*((Handle_Standard_Type*)K->Handle)));
}

 System::Boolean OCMDF_TypeDriverListMapOfASDriverTable::UnBind(OCNaroWrappers::OCStandard_Type^ K)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->UnBind(*((Handle_Standard_Type*)K->Handle)));
}

OCMDF_DriverListOfASDriverTable^ OCMDF_TypeDriverListMapOfASDriverTable::Find(OCNaroWrappers::OCStandard_Type^ K)
{
  MDF_DriverListOfASDriverTable* tmp = new MDF_DriverListOfASDriverTable();
  *tmp = ((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->Find(*((Handle_Standard_Type*)K->Handle));
  return gcnew OCMDF_DriverListOfASDriverTable(tmp);
}

OCMDF_DriverListOfASDriverTable^ OCMDF_TypeDriverListMapOfASDriverTable::ChangeFind(OCNaroWrappers::OCStandard_Type^ K)
{
  MDF_DriverListOfASDriverTable* tmp = new MDF_DriverListOfASDriverTable();
  *tmp = ((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->ChangeFind(*((Handle_Standard_Type*)K->Handle));
  return gcnew OCMDF_DriverListOfASDriverTable(tmp);
}

 Standard_Address OCMDF_TypeDriverListMapOfASDriverTable::Find1(OCNaroWrappers::OCStandard_Type^ K)
{
  return ((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->Find1(*((Handle_Standard_Type*)K->Handle));
}

 Standard_Address OCMDF_TypeDriverListMapOfASDriverTable::ChangeFind1(OCNaroWrappers::OCStandard_Type^ K)
{
  return ((MDF_TypeDriverListMapOfASDriverTable*)nativeHandle)->ChangeFind1(*((Handle_Standard_Type*)K->Handle));
}


