// File generated by CPPExt (CPP file)
//

#include "MDF_DataMapIteratorOfTypeASDriverMap.h"
#include "../Converter.h"
#include "../Standard/Standard_Type.h"
#include "MDF_ASDriver.h"
#include "../TColStd/TColStd_MapTransientHasher.h"
#include "MDF_TypeASDriverMap.h"
#include "MDF_DataMapNodeOfTypeASDriverMap.h"


using namespace OCNaroWrappers;

OCMDF_DataMapIteratorOfTypeASDriverMap::OCMDF_DataMapIteratorOfTypeASDriverMap(MDF_DataMapIteratorOfTypeASDriverMap* nativeHandle) : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMDF_DataMapIteratorOfTypeASDriverMap::OCMDF_DataMapIteratorOfTypeASDriverMap() : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  nativeHandle = new MDF_DataMapIteratorOfTypeASDriverMap();
}

OCMDF_DataMapIteratorOfTypeASDriverMap::OCMDF_DataMapIteratorOfTypeASDriverMap(OCNaroWrappers::OCMDF_TypeASDriverMap^ aMap) : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  nativeHandle = new MDF_DataMapIteratorOfTypeASDriverMap(*((MDF_TypeASDriverMap*)aMap->Handle));
}

 void OCMDF_DataMapIteratorOfTypeASDriverMap::Initialize(OCNaroWrappers::OCMDF_TypeASDriverMap^ aMap)
{
  ((MDF_DataMapIteratorOfTypeASDriverMap*)nativeHandle)->Initialize(*((MDF_TypeASDriverMap*)aMap->Handle));
}

OCStandard_Type^ OCMDF_DataMapIteratorOfTypeASDriverMap::Key()
{
  Handle(Standard_Type) tmp = ((MDF_DataMapIteratorOfTypeASDriverMap*)nativeHandle)->Key();
  return gcnew OCStandard_Type(&tmp);
}

OCMDF_ASDriver^ OCMDF_DataMapIteratorOfTypeASDriverMap::Value()
{
  Handle(MDF_ASDriver) tmp = ((MDF_DataMapIteratorOfTypeASDriverMap*)nativeHandle)->Value();
  return gcnew OCMDF_ASDriver(&tmp);
}


