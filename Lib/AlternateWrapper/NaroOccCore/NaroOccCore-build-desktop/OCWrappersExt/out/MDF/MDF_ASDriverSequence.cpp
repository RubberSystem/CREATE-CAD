// File generated by CPPExt (CPP file)
//

#include "MDF_ASDriverSequence.h"
#include "../Converter.h"
#include "MDF_ASDriver.h"
#include "MDF_SequenceNodeOfASDriverSequence.h"


using namespace OCNaroWrappers;

OCMDF_ASDriverSequence::OCMDF_ASDriverSequence(MDF_ASDriverSequence* nativeHandle) : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMDF_ASDriverSequence::OCMDF_ASDriverSequence() : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  nativeHandle = new MDF_ASDriverSequence();
}

OCMDF_ASDriverSequence^ OCMDF_ASDriverSequence::Assign(OCNaroWrappers::OCMDF_ASDriverSequence^ Other)
{
  MDF_ASDriverSequence* tmp = new MDF_ASDriverSequence();
  *tmp = ((MDF_ASDriverSequence*)nativeHandle)->Assign(*((MDF_ASDriverSequence*)Other->Handle));
  return gcnew OCMDF_ASDriverSequence(tmp);
}

 void OCMDF_ASDriverSequence::Append(OCNaroWrappers::OCMDF_ASDriver^ T)
{
  ((MDF_ASDriverSequence*)nativeHandle)->Append(*((Handle_MDF_ASDriver*)T->Handle));
}

 void OCMDF_ASDriverSequence::Append(OCNaroWrappers::OCMDF_ASDriverSequence^ S)
{
  ((MDF_ASDriverSequence*)nativeHandle)->Append(*((MDF_ASDriverSequence*)S->Handle));
}

 void OCMDF_ASDriverSequence::Prepend(OCNaroWrappers::OCMDF_ASDriver^ T)
{
  ((MDF_ASDriverSequence*)nativeHandle)->Prepend(*((Handle_MDF_ASDriver*)T->Handle));
}

 void OCMDF_ASDriverSequence::Prepend(OCNaroWrappers::OCMDF_ASDriverSequence^ S)
{
  ((MDF_ASDriverSequence*)nativeHandle)->Prepend(*((MDF_ASDriverSequence*)S->Handle));
}

 void OCMDF_ASDriverSequence::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCMDF_ASDriver^ T)
{
  ((MDF_ASDriverSequence*)nativeHandle)->InsertBefore(Index, *((Handle_MDF_ASDriver*)T->Handle));
}

 void OCMDF_ASDriverSequence::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCMDF_ASDriverSequence^ S)
{
  ((MDF_ASDriverSequence*)nativeHandle)->InsertBefore(Index, *((MDF_ASDriverSequence*)S->Handle));
}

 void OCMDF_ASDriverSequence::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCMDF_ASDriver^ T)
{
  ((MDF_ASDriverSequence*)nativeHandle)->InsertAfter(Index, *((Handle_MDF_ASDriver*)T->Handle));
}

 void OCMDF_ASDriverSequence::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCMDF_ASDriverSequence^ S)
{
  ((MDF_ASDriverSequence*)nativeHandle)->InsertAfter(Index, *((MDF_ASDriverSequence*)S->Handle));
}

OCMDF_ASDriver^ OCMDF_ASDriverSequence::First()
{
  Handle(MDF_ASDriver) tmp = ((MDF_ASDriverSequence*)nativeHandle)->First();
  return gcnew OCMDF_ASDriver(&tmp);
}

OCMDF_ASDriver^ OCMDF_ASDriverSequence::Last()
{
  Handle(MDF_ASDriver) tmp = ((MDF_ASDriverSequence*)nativeHandle)->Last();
  return gcnew OCMDF_ASDriver(&tmp);
}

 void OCMDF_ASDriverSequence::Split(Standard_Integer Index, OCNaroWrappers::OCMDF_ASDriverSequence^ Sub)
{
  ((MDF_ASDriverSequence*)nativeHandle)->Split(Index, *((MDF_ASDriverSequence*)Sub->Handle));
}

OCMDF_ASDriver^ OCMDF_ASDriverSequence::Value(Standard_Integer Index)
{
  Handle(MDF_ASDriver) tmp = ((MDF_ASDriverSequence*)nativeHandle)->Value(Index);
  return gcnew OCMDF_ASDriver(&tmp);
}

 void OCMDF_ASDriverSequence::SetValue(Standard_Integer Index, OCNaroWrappers::OCMDF_ASDriver^ I)
{
  ((MDF_ASDriverSequence*)nativeHandle)->SetValue(Index, *((Handle_MDF_ASDriver*)I->Handle));
}

OCMDF_ASDriver^ OCMDF_ASDriverSequence::ChangeValue(Standard_Integer Index)
{
  Handle(MDF_ASDriver) tmp = ((MDF_ASDriverSequence*)nativeHandle)->ChangeValue(Index);
  return gcnew OCMDF_ASDriver(&tmp);
}

 void OCMDF_ASDriverSequence::Remove(Standard_Integer Index)
{
  ((MDF_ASDriverSequence*)nativeHandle)->Remove(Index);
}

 void OCMDF_ASDriverSequence::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  ((MDF_ASDriverSequence*)nativeHandle)->Remove(FromIndex, ToIndex);
}


