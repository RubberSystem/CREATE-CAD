// File generated by CPPExt (CPP file)
//

#include "MDF_TypeASDriverMap.h"
#include "../Converter.h"
#include "../Standard/Standard_Type.h"
#include "MDF_ASDriver.h"
#include "../TColStd/TColStd_MapTransientHasher.h"
#include "MDF_DataMapNodeOfTypeASDriverMap.h"
#include "MDF_DataMapIteratorOfTypeASDriverMap.h"


using namespace OCNaroWrappers;

OCMDF_TypeASDriverMap::OCMDF_TypeASDriverMap(MDF_TypeASDriverMap* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMDF_TypeASDriverMap::OCMDF_TypeASDriverMap(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new MDF_TypeASDriverMap(NbBuckets);
}

OCMDF_TypeASDriverMap^ OCMDF_TypeASDriverMap::Assign(OCNaroWrappers::OCMDF_TypeASDriverMap^ Other)
{
  MDF_TypeASDriverMap* tmp = new MDF_TypeASDriverMap(0);
  *tmp = ((MDF_TypeASDriverMap*)nativeHandle)->Assign(*((MDF_TypeASDriverMap*)Other->Handle));
  return gcnew OCMDF_TypeASDriverMap(tmp);
}

 void OCMDF_TypeASDriverMap::ReSize(Standard_Integer NbBuckets)
{
  ((MDF_TypeASDriverMap*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCMDF_TypeASDriverMap::Bind(OCNaroWrappers::OCStandard_Type^ K, OCNaroWrappers::OCMDF_ASDriver^ I)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeASDriverMap*)nativeHandle)->Bind(*((Handle_Standard_Type*)K->Handle), *((Handle_MDF_ASDriver*)I->Handle)));
}

 System::Boolean OCMDF_TypeASDriverMap::IsBound(OCNaroWrappers::OCStandard_Type^ K)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeASDriverMap*)nativeHandle)->IsBound(*((Handle_Standard_Type*)K->Handle)));
}

 System::Boolean OCMDF_TypeASDriverMap::UnBind(OCNaroWrappers::OCStandard_Type^ K)
{
  return OCConverter::StandardBooleanToBoolean(((MDF_TypeASDriverMap*)nativeHandle)->UnBind(*((Handle_Standard_Type*)K->Handle)));
}

OCMDF_ASDriver^ OCMDF_TypeASDriverMap::Find(OCNaroWrappers::OCStandard_Type^ K)
{
  Handle(MDF_ASDriver) tmp = ((MDF_TypeASDriverMap*)nativeHandle)->Find(*((Handle_Standard_Type*)K->Handle));
  return gcnew OCMDF_ASDriver(&tmp);
}

OCMDF_ASDriver^ OCMDF_TypeASDriverMap::ChangeFind(OCNaroWrappers::OCStandard_Type^ K)
{
  Handle(MDF_ASDriver) tmp = ((MDF_TypeASDriverMap*)nativeHandle)->ChangeFind(*((Handle_Standard_Type*)K->Handle));
  return gcnew OCMDF_ASDriver(&tmp);
}

 Standard_Address OCMDF_TypeASDriverMap::Find1(OCNaroWrappers::OCStandard_Type^ K)
{
  return ((MDF_TypeASDriverMap*)nativeHandle)->Find1(*((Handle_Standard_Type*)K->Handle));
}

 Standard_Address OCMDF_TypeASDriverMap::ChangeFind1(OCNaroWrappers::OCStandard_Type^ K)
{
  return ((MDF_TypeASDriverMap*)nativeHandle)->ChangeFind1(*((Handle_Standard_Type*)K->Handle));
}


