// File generated by CPPExt (Package)
//

#ifndef _BRepLib_OCWrappers_HeaderFile
#define _BRepLib_OCWrappers_HeaderFile

// Include the wrapped header
#include <BRepLib.hxx>

#include "BRepLib_Command.h"
#include "BRepLib_MakeShape.h"
#include "BRepLib_MakeVertex.h"
#include "BRepLib_MakeEdge.h"
#include "BRepLib_MakeEdge2d.h"
#include "BRepLib_MakePolygon.h"
#include "BRepLib_MakeFace.h"
#include "BRepLib_MakeWire.h"
#include "BRepLib_MakeShell.h"
#include "BRepLib_MakeSolid.h"
#include "BRepLib_FindSurface.h"
#include "BRepLib_FuseEdges.h"


namespace OCNaroWrappers
{
//! The BRepLib package provides general utilities for <br>
//!          BRep. <br>
//! <br>
//!          * FindSurface : Class to compute a surface through <br>
//!          a set of edges. <br>
//! <br>
//!          * Compute missing 3d curve on an edge. <br>
public ref class OCBRepLib abstract sealed
{

public:
// Methods

//! Sets the default precision.  The current Precision <br>
//!          is returned. <br>
static /*instead*/  void Precision(Standard_Real P) ;

//! Returns the default precision. <br>
static /*instead*/  Standard_Real Precision() ;

//! Sets the current plane to P. <br>
static /*instead*/  void Plane(OCNaroWrappers::OCGeom_Plane^ P) ;

//! Returns the current plane. <br>
//! <br>
static /*instead*/  OCGeom_Plane^ Plane() ;

//! checks if the Edge is same range IGNORING <br>
//!          the same range flag of the edge <br>
//!          Confusion argument is to compare real numbers <br>
//!          idenpendently of any model space tolerance <br>
//! <br>
static /*instead*/  System::Boolean CheckSameRange(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real Confusion) ;

//! will make all the curve representation have <br>
//!          the same range domain for the parameters. <br>
//!          This will IGNORE the same range flag value <br>
//!          to proceed. <br>
//!          If there is a 3D curve there it will the <br>
//!          range of that curve. If not the first curve representation <br>
//!          encountered in the list will give its range to <br>
//!          the all the other curves. <br>
static /*instead*/  void SameRange(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real Tolerance) ;

//! Computes the 3d curve for the edge  <E> if it does <br>
//!          not exist. Returns True  if the curve was computed <br>
//!          or  existed. Returns False  if there is no  planar <br>
//!          pcurve or the computation failed. <br>
//!          <MaxSegment> >= 30 in approximation <br>
static /*instead*/  System::Boolean BuildCurve3d(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real Tolerance, OCGeomAbs_Shape Continuity, Standard_Integer MaxDegree, Standard_Integer MaxSegment) ;

//! Computes  the 3d curves  for all the  edges of <S> <br>
//!          return False if one of the computation failed. <br>
//!          <MaxSegment> >= 30 in approximation <br>
static /*instead*/  System::Boolean BuildCurves3d(OCNaroWrappers::OCTopoDS_Shape^ S, Standard_Real Tolerance, OCGeomAbs_Shape Continuity, Standard_Integer MaxDegree, Standard_Integer MaxSegment) ;

//! Computes  the 3d curves  for all the  edges of <S> <br>
//!          return False if one of the computation failed. <br>
static /*instead*/  System::Boolean BuildCurves3d(OCNaroWrappers::OCTopoDS_Shape^ S) ;


static /*instead*/  System::Boolean UpdateEdgeTol(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real MinToleranceRequest, Standard_Real MaxToleranceToCheck) ;


static /*instead*/  System::Boolean UpdateEdgeTolerance(OCNaroWrappers::OCTopoDS_Shape^ S, Standard_Real MinToleranceRequest, Standard_Real MaxToleranceToCheck) ;

//! Computes new 2d curve(s)  for the edge <E> to have <br>
//!          the same parameter  as  the  3d curve. <br>
//!          The algorithm is not done if the flag SameParameter <br>
//!          was True  on the  Edge. <br>
static /*instead*/  void SameParameter(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real Tolerance) ;

//! Computes new 2d curve(s) for all the edges of  <S> <br>
//!          to have the same parameter  as  the  3d curve. <br>
//!          The algorithm is not done if the flag SameParameter <br>
//!          was True  on an  Edge. <br>
static /*instead*/  void SameParameter(OCNaroWrappers::OCTopoDS_Shape^ S, Standard_Real Tolerance, System::Boolean forced) ;

//!  Replaces tolerance   of  FACE EDGE VERTEX  by  the <br>
//!          tolerance Max of their connected handling shapes. <br>
//!          It is not necessary to use this call after <br>
//!          SameParameter. (called in) <br>
static /*instead*/  void UpdateTolerances(OCNaroWrappers::OCTopoDS_Shape^ S, System::Boolean verifyFaceTolerance) ;


static /*instead*/  System::Boolean OrientClosedSolid(OCNaroWrappers::OCTopoDS_Solid^ solid) ;

//! Encodes the Regularity of edges on a Shape. <br>
//!  Warning: <TolAng> is an angular tolerance, expressed in Rad. <br>
//!  Warning: If the edges's regularity are coded before, nothing <br>
//!          is done. <br>
static /*instead*/  void EncodeRegularity(OCNaroWrappers::OCTopoDS_Shape^ S, Standard_Real TolAng) ;

//! Encodes the Regularity beetween <F1> and <F2> by <E> <br>
//! Warning: <TolAng> is an angular tolerance, expressed in Rad. <br>
//! Warning: If the edge's regularity is coded before, nothing <br>
//!          is done. <br>
static /*instead*/  void EncodeRegularity(OCNaroWrappers::OCTopoDS_Edge^ S, OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, Standard_Real TolAng) ;

//! Sorts in  LF the Faces of   S on the  complexity of <br>
//!                             their                  surfaces <br>
//!          (Plane,Cylinder,Cone,Sphere,Torus,other) <br>
static /*instead*/  void SortFaces(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_ListOfShape^ LF) ;

//!    Sorts in  LF  the   Faces  of S   on the reverse <br>
//!               complexity       of       their      surfaces <br>
//!          (other,Torus,Sphere,Cone,Cylinder,Plane) <br>
static /*instead*/  void ReverseSortFaces(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_ListOfShape^ LF) ;


};

}; // OCNaroWrappers

#endif
