// File generated by CPPExt (MPV)
//
#ifndef _BRepLib_MakeWire_OCWrappers_HeaderFile
#define _BRepLib_MakeWire_OCWrappers_HeaderFile

// include native header
#include <BRepLib_MakeWire.hxx>
#include "../Converter.h"

#include "BRepLib_MakeShape.h"

#include "BRepLib_WireError.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopTools/TopTools_MapOfShape.h"
#include "BRepLib_MakeShape.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Edge;
ref class OCTopoDS_Wire;
ref class OCTopTools_ListOfShape;
ref class OCTopoDS_Vertex;


//! Provides methods to build wires. <br>
//! <br>
//!          A wire may be built : <br>
//! <br>
//!          * From a single edge. <br>
//! <br>
//!          * From a wire and an edge. <br>
//! <br>
//!            - A new wire  is created with the edges  of  the <br>
//!            wire + the edge. <br>
//! <br>
//!            - If the edge is not connnected  to the wire the <br>
//!            flag NotDone   is set and  the  method Wire will <br>
//!            raise an error. <br>
//! <br>
//!            - The connection may be : <br>
//! <br>
//!              . Through an existing vertex. The edge is shared. <br>
//! <br>
//!              . Through a geometric coincidence of vertices. <br>
//!              The edge is  copied  and the vertices from the <br>
//!              edge are  replaced  by  the vertices from  the <br>
//!              wire. <br>
//! <br>
//!              . The new edge and the connection vertices are <br>
//!              kept by the algorithm. <br>
//! <br>
//! <br>
//!          * From 2, 3, 4 edges. <br>
//! <br>
//!              - A wire is  created from  the first edge, the <br>
//!              following edges are added. <br>
//! <br>
//!          * From many edges. <br>
//! <br>
//!              - The following syntax may be used : <br>
//! <br>
//!                BRepLib_MakeWire MW; <br>
//! <br>
//!                  // for all the edges ... <br>
//!                  MW.Add(anEdge); <br>
//! <br>
//!                TopoDS_Wire W = MW; <br>
public ref class OCBRepLib_MakeWire  : public OCBRepLib_MakeShape {

protected:
  // dummy constructor;
  OCBRepLib_MakeWire(OCDummy^) : OCBRepLib_MakeShape((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepLib_MakeWire(BRepLib_MakeWire* nativeHandle);

// Methods PUBLIC

//! NotDone MakeWire. <br>
OCBRepLib_MakeWire();

//! Make a Wire from an edge. <br>
OCBRepLib_MakeWire(OCNaroWrappers::OCTopoDS_Edge^ E);

//! Make a Wire from two edges. <br>
OCBRepLib_MakeWire(OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2);

//! Make a Wire from three edges. <br>
OCBRepLib_MakeWire(OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2, OCNaroWrappers::OCTopoDS_Edge^ E3);

//! Make a Wire from four edges. <br>
OCBRepLib_MakeWire(OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2, OCNaroWrappers::OCTopoDS_Edge^ E3, OCNaroWrappers::OCTopoDS_Edge^ E4);

//! Make a Wire from a Wire. Usefull for adding later. <br>
OCBRepLib_MakeWire(OCNaroWrappers::OCTopoDS_Wire^ W);

//! Add an edge to a wire. <br>
OCBRepLib_MakeWire(OCNaroWrappers::OCTopoDS_Wire^ W, OCNaroWrappers::OCTopoDS_Edge^ E);

//! Add the edge <E> to the current wire. <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Add the edges of <W> to the current wire. <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Wire^ W) ;

//! Add the edges of <L> to the current wire. <br>
//!          The edges are not to be consecutive.  But they are <br>
//!          to be all connected geometrically or topologically. <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopTools_ListOfShape^ L) ;


 /*instead*/  OCBRepLib_WireError Error() ;

//! Returns the new wire. <br>
//! <br>
 /*instead*/  OCTopoDS_Wire^ Wire() ;

//! Returns the last edge added to the wire. <br>
//! <br>
 /*instead*/  OCTopoDS_Edge^ Edge() ;

//! Returns the last connecting vertex. <br>
//! <br>
 /*instead*/  OCTopoDS_Vertex^ Vertex() ;

~OCBRepLib_MakeWire()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
