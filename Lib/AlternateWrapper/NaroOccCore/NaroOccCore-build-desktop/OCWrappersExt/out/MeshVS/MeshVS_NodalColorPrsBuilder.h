// File generated by CPPExt (Transient)
//
#ifndef _MeshVS_NodalColorPrsBuilder_OCWrappers_HeaderFile
#define _MeshVS_NodalColorPrsBuilder_OCWrappers_HeaderFile

// include the wrapped class
#include <MeshVS_NodalColorPrsBuilder.hxx>
#include "../Converter.h"

#include "MeshVS_PrsBuilder.h"

#include "MeshVS_DataMapOfIntegerColor.h"
#include "../Aspect/Aspect_SequenceOfColor.h"
#include "../TColStd/TColStd_DataMapOfIntegerReal.h"
#include "../Quantity/Quantity_Color.h"


namespace OCNaroWrappers
{

ref class OCMeshVS_Mesh;
ref class OCMeshVS_DataSource;
ref class OCPrs3d_Presentation;
ref class OCMeshVS_DataMapOfIntegerColor;
ref class OCQuantity_Color;
ref class OCAspect_SequenceOfColor;
ref class OCTColStd_DataMapOfIntegerReal;
ref class OCGraphic3d_Texture2D;


//! This class provides methods to create presentation of nodes with assigned color. <br>
//! There are two ways of presentation building <br>
//! 1. Without using texture. <br>
//! In this case colors of nodes are specified with DataMapOfIntegerColor and presentation <br>
//! is built with gradient fill between these nodes (default behaviour) <br>
//! 2. Using texture. <br>
//! In this case presentation is built with spectrum filling between nodes. For example, if <br>
//! one node has blue color and second one has violet color, parameters of this class may be <br>
//! set to fill presentation between nodes with solar spectrum. <br>
//! Methods: <br>
//! UseTexture - activates/deactivates this way <br>
//! SetColorMap - sets colors used for generation of texture <br>
//! SetColorindices - specifies correspondence between node IDs and indices of colors from color map <br>
public ref class OCMeshVS_NodalColorPrsBuilder : OCMeshVS_PrsBuilder {

protected:
  // dummy constructor;
  OCMeshVS_NodalColorPrsBuilder(OCDummy^) : OCMeshVS_PrsBuilder((OCDummy^)nullptr) {};

public:

// constructor from native
OCMeshVS_NodalColorPrsBuilder(Handle(MeshVS_NodalColorPrsBuilder)* nativeHandle);

// Methods PUBLIC


OCMeshVS_NodalColorPrsBuilder(OCNaroWrappers::OCMeshVS_Mesh^ Parent, MeshVS_DisplayModeFlags Flags, OCNaroWrappers::OCMeshVS_DataSource^ DS, Standard_Integer Id, MeshVS_BuilderPriority Priority);

//! Builds presentation of nodes with assigned color. <br>
virtual /*instead*/  void Build(OCNaroWrappers::OCPrs3d_Presentation^ Prs, TColStd_PackedMapOfInteger IDs, TColStd_PackedMapOfInteger& IDsToExclude, System::Boolean IsElement, Standard_Integer DisplayMode) ;

//! Returns map of colors assigned to nodes. <br>
 /*instead*/  OCMeshVS_DataMapOfIntegerColor^ GetColors() ;

//! Sets map of colors assigned to nodes. <br>
 /*instead*/  void SetColors(OCNaroWrappers::OCMeshVS_DataMapOfIntegerColor^ Map) ;

//! Returns true, if map isn't empty <br>
 /*instead*/  System::Boolean HasColors() ;

//! Returns color assigned to single node <br>
 /*instead*/  System::Boolean GetColor(Standard_Integer ID, OCNaroWrappers::OCQuantity_Color^ theColor) ;

//! Sets color assigned to single node <br>
 /*instead*/  void SetColor(Standard_Integer ID, OCNaroWrappers::OCQuantity_Color^ theColor) ;

//! Specify whether texture must be used to build presentation <br>
 /*instead*/  void UseTexture(System::Boolean theToUse) ;

//! Verify whether texture is used to build presentation <br>
 /*instead*/  System::Boolean IsUseTexture() ;

//! Set colors to be used for texrture presentation <br>
//! theColors - colors for valid coordinates (laying in range [0, 1]) <br>
 /*instead*/  void SetColorMap(OCNaroWrappers::OCAspect_SequenceOfColor^ theColors) ;

//! Return colors used for texrture presentation <br>
 /*instead*/  OCAspect_SequenceOfColor^ GetColorMap() ;

//! Set color representing invalid texture coordinate <br>
//!        (laying outside range [0, 1]) <br>
 /*instead*/  void SetInvalidColor(OCNaroWrappers::OCQuantity_Color^ theInvalidColor) ;

//! Return color representing invalid texture coordinate <br>
//!        (laying outside range [0, 1]) <br>
 /*instead*/  OCQuantity_Color^ GetInvalidColor() ;

//! Specify correspondence between node IDs and texture coordinates (range [0, 1]) <br>
 /*instead*/  void SetTextureCoords(OCNaroWrappers::OCTColStd_DataMapOfIntegerReal^ theMap) ;

//! Get correspondence between node IDs and texture coordinates (range [0, 1]) <br>
 /*instead*/  OCTColStd_DataMapOfIntegerReal^ GetTextureCoords() ;

//! Specify correspondence between node ID and texture coordinate (range [0, 1]) <br>
 /*instead*/  void SetTextureCoord(Standard_Integer theID, Standard_Real theCoord) ;

//! Return correspondence between node IDs and texture coordinate (range [0, 1]) <br>
 /*instead*/  Standard_Real GetTextureCoord(Standard_Integer theID) ;

~OCMeshVS_NodalColorPrsBuilder()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
