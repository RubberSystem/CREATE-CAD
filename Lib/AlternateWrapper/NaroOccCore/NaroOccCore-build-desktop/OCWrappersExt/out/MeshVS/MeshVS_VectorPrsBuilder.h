// File generated by CPPExt (Transient)
//
#ifndef _MeshVS_VectorPrsBuilder_OCWrappers_HeaderFile
#define _MeshVS_VectorPrsBuilder_OCWrappers_HeaderFile

// include the wrapped class
#include <MeshVS_VectorPrsBuilder.hxx>
#include "../Converter.h"

#include "MeshVS_PrsBuilder.h"

#include "MeshVS_DataMapOfIntegerVector.h"


namespace OCNaroWrappers
{

ref class OCMeshVS_Mesh;
ref class OCQuantity_Color;
ref class OCMeshVS_DataSource;
ref class OCPrs3d_Presentation;
ref class OCgp_Trsf;
ref class OCTColgp_Array1OfPnt;
ref class OCGraphic3d_ArrayOfPrimitives;
ref class OCMeshVS_DataMapOfIntegerVector;
ref class OCgp_Vec;


//! This class provides methods to create vector data presentation. <br>
//! It store map of vectors assigned with nodes or elements. <br>
//! In simplified mode vectors draws with thickened ends instead of arrows <br>
public ref class OCMeshVS_VectorPrsBuilder : OCMeshVS_PrsBuilder {

protected:
  // dummy constructor;
  OCMeshVS_VectorPrsBuilder(OCDummy^) : OCMeshVS_PrsBuilder((OCDummy^)nullptr) {};

public:

// constructor from native
OCMeshVS_VectorPrsBuilder(Handle(MeshVS_VectorPrsBuilder)* nativeHandle);

// Methods PUBLIC


OCMeshVS_VectorPrsBuilder(OCNaroWrappers::OCMeshVS_Mesh^ Parent, Standard_Real MaxLength, OCNaroWrappers::OCQuantity_Color^ VectorColor, MeshVS_DisplayModeFlags Flags, OCNaroWrappers::OCMeshVS_DataSource^ DS, Standard_Integer Id, MeshVS_BuilderPriority Priority, System::Boolean IsSimplePrs);

//! Builds vector data presentation <br>
virtual /*instead*/  void Build(OCNaroWrappers::OCPrs3d_Presentation^ Prs, TColStd_PackedMapOfInteger IDs, TColStd_PackedMapOfInteger& IDsToExclude, System::Boolean IsElement, Standard_Integer theDisplayMode) ;

//! Adds to array of polygons and polylines some primitive representing single vector <br>
 /*instead*/  void DrawVector(OCNaroWrappers::OCgp_Trsf^ theTrsf, Standard_Real Length, Standard_Real MaxLength, OCNaroWrappers::OCTColgp_Array1OfPnt^ ArrowPoints, OCNaroWrappers::OCGraphic3d_ArrayOfPrimitives^ Lines, OCNaroWrappers::OCGraphic3d_ArrayOfPrimitives^ ArrowLines, OCNaroWrappers::OCGraphic3d_ArrayOfPrimitives^ Triangles) ;

//! Calculates points of arrow presentation <br>
static /*instead*/  Standard_Real calculateArrow(OCNaroWrappers::OCTColgp_Array1OfPnt^ Points, Standard_Real Length, Standard_Real ArrowPart) ;

//! Returns map of vectors assigned with nodes or elements <br>
 /*instead*/  OCMeshVS_DataMapOfIntegerVector^ GetVectors(System::Boolean IsElement) ;

//! Sets map of vectors assigned with nodes or elements <br>
 /*instead*/  void SetVectors(System::Boolean IsElement, OCNaroWrappers::OCMeshVS_DataMapOfIntegerVector^ Map) ;

//! Returns true, if map isn't empty <br>
 /*instead*/  System::Boolean HasVectors(System::Boolean IsElement) ;

//! Returns vector assigned with certain node or element <br>
 /*instead*/  System::Boolean GetVector(System::Boolean IsElement, Standard_Integer ID, OCNaroWrappers::OCgp_Vec^ Vect) ;

//! Sets vector assigned with certain node or element <br>
 /*instead*/  void SetVector(System::Boolean IsElement, Standard_Integer ID, OCNaroWrappers::OCgp_Vec^ Vect) ;

//! Calculates minimal and maximal length of vectors in map <br>
//! ( nodal, if IsElement = False or elemental, if IsElement = True ) <br>
 /*instead*/  void GetMinMaxVectorValue(System::Boolean IsElement, Standard_Real& MinValue, Standard_Real& MaxValue) ;

//! Sets flag that indicates is simple vector arrow mode uses or not <br>
//! default value is False <br>
 /*instead*/  void SetSimplePrsMode(System::Boolean IsSimpleArrow) ;

//! Sets parameters of simple vector arrwo presentation <br>
//! theLineWidthParam - coefficient of vector line width (to draw line instead of arrow) <br>
//! theStartParam and theEndParam parameters of start and end of thickened ends <br>
//! position of thickening calculates according to parameters and maximum vector length <br>
//! default values are: <br>
//!   theLineWidthParam = 2.5 <br>
//!   theStartParam     = 0.85 <br>
//!   theEndParam       = 0.95 <br>
 /*instead*/  void SetSimplePrsParams(Standard_Real theLineWidthParam, Standard_Real theStartParam, Standard_Real theEndParam) ;

~OCMeshVS_VectorPrsBuilder()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
