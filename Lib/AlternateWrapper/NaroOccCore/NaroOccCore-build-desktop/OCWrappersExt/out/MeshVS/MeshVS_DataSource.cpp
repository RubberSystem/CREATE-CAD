// File generated by CPPExt (CPP file)
//

#include "MeshVS_DataSource.h"
#include "../Converter.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "MeshVS_HArray1OfSequenceOfInteger.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../Bnd/Bnd_Box.h"
#include "MeshVS_Mesh.h"
#include "../TColStd/TColStd_HPackedMapOfInteger.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../Bnd/Bnd_Box2d.h"


using namespace OCNaroWrappers;

OCMeshVS_DataSource::OCMeshVS_DataSource(Handle(MeshVS_DataSource)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MeshVS_DataSource(*nativeHandle);
}

 System::Boolean OCMeshVS_DataSource::Get3DGeom(Standard_Integer ID, Standard_Integer& NbNodes, OCNaroWrappers::OCMeshVS_HArray1OfSequenceOfInteger^ Data)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->Get3DGeom(ID, NbNodes, *((Handle_MeshVS_HArray1OfSequenceOfInteger*)Data->Handle)));
}

 System::Boolean OCMeshVS_DataSource::GetNormal(Standard_Integer Id, Standard_Integer Max, Standard_Real& nx, Standard_Real& ny, Standard_Real& nz)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->GetNormal(Id, Max, nx, ny, nz));
}

 System::Boolean OCMeshVS_DataSource::GetNodeNormal(Standard_Integer ranknode, Standard_Integer ElementId, Standard_Real& nx, Standard_Real& ny, Standard_Real& nz)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->GetNodeNormal(ranknode, ElementId, nx, ny, nz));
}

 System::Boolean OCMeshVS_DataSource::GetNormalsByElement(Standard_Integer Id, System::Boolean IsNodal, Standard_Integer MaxNodes, OCNaroWrappers::OCTColStd_HArray1OfReal^ Normals)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->GetNormalsByElement(Id, OCConverter::BooleanToStandardBoolean(IsNodal), MaxNodes, *((Handle_TColStd_HArray1OfReal*)Normals->Handle)));
}

 void OCMeshVS_DataSource::GetAllGroups(TColStd_PackedMapOfInteger& Ids)
{
  (*((Handle_MeshVS_DataSource*)nativeHandle))->GetAllGroups(Ids);
}

 System::Boolean OCMeshVS_DataSource::GetGroup(Standard_Integer Id, MeshVS_EntityType& Type, TColStd_PackedMapOfInteger& Ids)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->GetGroup(Id, Type, Ids));
}

 Standard_Address OCMeshVS_DataSource::GetGroupAddr(Standard_Integer ID)
{
  return (*((Handle_MeshVS_DataSource*)nativeHandle))->GetGroupAddr(ID);
}

 System::Boolean OCMeshVS_DataSource::IsAdvancedSelectionEnabled()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->IsAdvancedSelectionEnabled());
}

OCBnd_Box^ OCMeshVS_DataSource::GetBoundingBox()
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = (*((Handle_MeshVS_DataSource*)nativeHandle))->GetBoundingBox();
  return gcnew OCBnd_Box(tmp);
}

 System::Boolean OCMeshVS_DataSource::GetDetectedEntities(OCNaroWrappers::OCMeshVS_Mesh^ Prs, Standard_Real X, Standard_Real Y, Standard_Real aTol, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elements, Standard_Real& DMin)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->GetDetectedEntities(*((Handle_MeshVS_Mesh*)Prs->Handle), X, Y, aTol, *((Handle_TColStd_HPackedMapOfInteger*)Nodes->Handle), *((Handle_TColStd_HPackedMapOfInteger*)Elements->Handle), DMin));
}

 System::Boolean OCMeshVS_DataSource::GetDetectedEntities(OCNaroWrappers::OCMeshVS_Mesh^ Prs, Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elements)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->GetDetectedEntities(*((Handle_MeshVS_Mesh*)Prs->Handle), XMin, YMin, XMax, YMax, aTol, *((Handle_TColStd_HPackedMapOfInteger*)Nodes->Handle), *((Handle_TColStd_HPackedMapOfInteger*)Elements->Handle)));
}

 System::Boolean OCMeshVS_DataSource::GetDetectedEntities(OCNaroWrappers::OCMeshVS_Mesh^ Prs, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elements)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->GetDetectedEntities(*((Handle_MeshVS_Mesh*)Prs->Handle), *((TColgp_Array1OfPnt2d*)Polyline->Handle), *((Bnd_Box2d*)aBox->Handle), aTol, *((Handle_TColStd_HPackedMapOfInteger*)Nodes->Handle), *((Handle_TColStd_HPackedMapOfInteger*)Elements->Handle)));
}

 System::Boolean OCMeshVS_DataSource::GetDetectedEntities(OCNaroWrappers::OCMeshVS_Mesh^ Prs, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elements)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DataSource*)nativeHandle))->GetDetectedEntities(*((Handle_MeshVS_Mesh*)Prs->Handle), *((Handle_TColStd_HPackedMapOfInteger*)Nodes->Handle), *((Handle_TColStd_HPackedMapOfInteger*)Elements->Handle)));
}


