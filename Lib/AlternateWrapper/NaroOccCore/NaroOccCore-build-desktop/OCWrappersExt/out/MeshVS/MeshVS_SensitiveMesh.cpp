// File generated by CPPExt (CPP file)
//

#include "MeshVS_SensitiveMesh.h"
#include "../Converter.h"
#include "../SelectBasics/SelectBasics_EntityOwner.h"
#include "../Select3D/Select3D_SensitiveEntity.h"
#include "../TopLoc/TopLoc_Location.h"
#include "../gp/gp_Lin.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../Bnd/Bnd_Box2d.h"
#include "../Select3D/Select3D_Projector.h"
#include "../SelectBasics/SelectBasics_ListOfBox2d.h"


using namespace OCNaroWrappers;

OCMeshVS_SensitiveMesh::OCMeshVS_SensitiveMesh(Handle(MeshVS_SensitiveMesh)* nativeHandle) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MeshVS_SensitiveMesh(*nativeHandle);
}

OCMeshVS_SensitiveMesh::OCMeshVS_SensitiveMesh(OCNaroWrappers::OCSelectBasics_EntityOwner^ theOwner, Standard_Integer theMode) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MeshVS_SensitiveMesh(new MeshVS_SensitiveMesh(*((Handle_SelectBasics_EntityOwner*)theOwner->Handle), theMode));
}

 Standard_Integer OCMeshVS_SensitiveMesh::GetMode()
{
  return (*((Handle_MeshVS_SensitiveMesh*)nativeHandle))->GetMode();
}

OCSelect3D_SensitiveEntity^ OCMeshVS_SensitiveMesh::GetConnected(OCNaroWrappers::OCTopLoc_Location^ aLocation)
{
  Handle(Select3D_SensitiveEntity) tmp = (*((Handle_MeshVS_SensitiveMesh*)nativeHandle))->GetConnected(*((TopLoc_Location*)aLocation->Handle));
  return gcnew OCSelect3D_SensitiveEntity(&tmp);
}

 Standard_Real OCMeshVS_SensitiveMesh::ComputeDepth(OCNaroWrappers::OCgp_Lin^ EyeLine)
{
  return (*((Handle_MeshVS_SensitiveMesh*)nativeHandle))->ComputeDepth(*((gp_Lin*)EyeLine->Handle));
}

 System::Boolean OCMeshVS_SensitiveMesh::Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_SensitiveMesh*)nativeHandle))->Matches(X, Y, aTol, DMin));
}

 System::Boolean OCMeshVS_SensitiveMesh::Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_SensitiveMesh*)nativeHandle))->Matches(XMin, YMin, XMax, YMax, aTol));
}

 System::Boolean OCMeshVS_SensitiveMesh::Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_SensitiveMesh*)nativeHandle))->Matches(*((TColgp_Array1OfPnt2d*)Polyline->Handle), *((Bnd_Box2d*)aBox->Handle), aTol));
}

 void OCMeshVS_SensitiveMesh::Project(OCNaroWrappers::OCSelect3D_Projector^ aProjector)
{
  (*((Handle_MeshVS_SensitiveMesh*)nativeHandle))->Project(*((Handle_Select3D_Projector*)aProjector->Handle));
}

 void OCMeshVS_SensitiveMesh::Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ boxes)
{
  (*((Handle_MeshVS_SensitiveMesh*)nativeHandle))->Areas(*((SelectBasics_ListOfBox2d*)boxes->Handle));
}


