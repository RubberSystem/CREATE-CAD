// File generated by CPPExt (CPP file)
//

#include "MeshVS_MeshOwner.h"
#include "../Converter.h"
#include "MeshVS_DataSource.h"
#include "../TColStd/TColStd_HPackedMapOfInteger.h"
#include "../PrsMgr/PrsMgr_PresentationManager3d.h"
#include "../PrsMgr/PrsMgr_PresentationManager.h"


using namespace OCNaroWrappers;

OCMeshVS_MeshOwner::OCMeshVS_MeshOwner(Handle(MeshVS_MeshOwner)* nativeHandle) : OCSelectMgr_EntityOwner((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MeshVS_MeshOwner(*nativeHandle);
}

OCMeshVS_MeshOwner::OCMeshVS_MeshOwner(SelectMgr_SOPtr theSelObj, OCNaroWrappers::OCMeshVS_DataSource^ theDS, Standard_Integer thePriority) : OCSelectMgr_EntityOwner((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MeshVS_MeshOwner(new MeshVS_MeshOwner(theSelObj, *((Handle_MeshVS_DataSource*)theDS->Handle), thePriority));
}

OCMeshVS_DataSource^ OCMeshVS_MeshOwner::GetDataSource()
{
  Handle(MeshVS_DataSource) tmp = (*((Handle_MeshVS_MeshOwner*)nativeHandle))->GetDataSource();
  return gcnew OCMeshVS_DataSource(&tmp);
}

OCTColStd_HPackedMapOfInteger^ OCMeshVS_MeshOwner::GetSelectedNodes()
{
  Handle(TColStd_HPackedMapOfInteger) tmp = (*((Handle_MeshVS_MeshOwner*)nativeHandle))->GetSelectedNodes();
  return gcnew OCTColStd_HPackedMapOfInteger(&tmp);
}

OCTColStd_HPackedMapOfInteger^ OCMeshVS_MeshOwner::GetSelectedElements()
{
  Handle(TColStd_HPackedMapOfInteger) tmp = (*((Handle_MeshVS_MeshOwner*)nativeHandle))->GetSelectedElements();
  return gcnew OCTColStd_HPackedMapOfInteger(&tmp);
}

 void OCMeshVS_MeshOwner::AddSelectedEntities(OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elems)
{
  (*((Handle_MeshVS_MeshOwner*)nativeHandle))->AddSelectedEntities(*((Handle_TColStd_HPackedMapOfInteger*)Nodes->Handle), *((Handle_TColStd_HPackedMapOfInteger*)Elems->Handle));
}

 void OCMeshVS_MeshOwner::ClearSelectedEntities()
{
  (*((Handle_MeshVS_MeshOwner*)nativeHandle))->ClearSelectedEntities();
}

OCTColStd_HPackedMapOfInteger^ OCMeshVS_MeshOwner::GetDetectedNodes()
{
  Handle(TColStd_HPackedMapOfInteger) tmp = (*((Handle_MeshVS_MeshOwner*)nativeHandle))->GetDetectedNodes();
  return gcnew OCTColStd_HPackedMapOfInteger(&tmp);
}

OCTColStd_HPackedMapOfInteger^ OCMeshVS_MeshOwner::GetDetectedElements()
{
  Handle(TColStd_HPackedMapOfInteger) tmp = (*((Handle_MeshVS_MeshOwner*)nativeHandle))->GetDetectedElements();
  return gcnew OCTColStd_HPackedMapOfInteger(&tmp);
}

 void OCMeshVS_MeshOwner::SetDetectedEntities(OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elems)
{
  (*((Handle_MeshVS_MeshOwner*)nativeHandle))->SetDetectedEntities(*((Handle_TColStd_HPackedMapOfInteger*)Nodes->Handle), *((Handle_TColStd_HPackedMapOfInteger*)Elems->Handle));
}

 void OCMeshVS_MeshOwner::HilightWithColor(OCNaroWrappers::OCPrsMgr_PresentationManager3d^ PM, OCQuantity_NameOfColor theColor, Standard_Integer Mode)
{
  (*((Handle_MeshVS_MeshOwner*)nativeHandle))->HilightWithColor(*((Handle_PrsMgr_PresentationManager3d*)PM->Handle), (Quantity_NameOfColor)theColor, Mode);
}

 void OCMeshVS_MeshOwner::Unhilight(OCNaroWrappers::OCPrsMgr_PresentationManager^ PM, Standard_Integer Mode)
{
  (*((Handle_MeshVS_MeshOwner*)nativeHandle))->Unhilight(*((Handle_PrsMgr_PresentationManager*)PM->Handle), Mode);
}

 System::Boolean OCMeshVS_MeshOwner::IsForcedHilight()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_MeshOwner*)nativeHandle))->IsForcedHilight());
}


