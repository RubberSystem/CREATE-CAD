// File generated by CPPExt (CPP file)
//

#include "MeshVS_DataMapOfHArray1OfSequenceOfInteger.h"
#include "../Converter.h"
#include "MeshVS_HArray1OfSequenceOfInteger.h"
#include "../TColStd/TColStd_MapIntegerHasher.h"
#include "MeshVS_DataMapNodeOfDataMapOfHArray1OfSequenceOfInteger.h"
#include "MeshVS_DataMapIteratorOfDataMapOfHArray1OfSequenceOfInteger.h"


using namespace OCNaroWrappers;

OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::OCMeshVS_DataMapOfHArray1OfSequenceOfInteger(MeshVS_DataMapOfHArray1OfSequenceOfInteger* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::OCMeshVS_DataMapOfHArray1OfSequenceOfInteger(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new MeshVS_DataMapOfHArray1OfSequenceOfInteger(NbBuckets);
}

OCMeshVS_DataMapOfHArray1OfSequenceOfInteger^ OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::Assign(OCNaroWrappers::OCMeshVS_DataMapOfHArray1OfSequenceOfInteger^ Other)
{
  MeshVS_DataMapOfHArray1OfSequenceOfInteger* tmp = new MeshVS_DataMapOfHArray1OfSequenceOfInteger(0);
  *tmp = ((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->Assign(*((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)Other->Handle));
  return gcnew OCMeshVS_DataMapOfHArray1OfSequenceOfInteger(tmp);
}

 void OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::ReSize(Standard_Integer NbBuckets)
{
  ((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::Bind(Standard_Integer K, OCNaroWrappers::OCMeshVS_HArray1OfSequenceOfInteger^ I)
{
  return OCConverter::StandardBooleanToBoolean(((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->Bind(K, *((Handle_MeshVS_HArray1OfSequenceOfInteger*)I->Handle)));
}

 System::Boolean OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::IsBound(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->IsBound(K));
}

 System::Boolean OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::UnBind(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->UnBind(K));
}

OCMeshVS_HArray1OfSequenceOfInteger^ OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::Find(Standard_Integer K)
{
  Handle(MeshVS_HArray1OfSequenceOfInteger) tmp = ((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->Find(K);
  return gcnew OCMeshVS_HArray1OfSequenceOfInteger(&tmp);
}

OCMeshVS_HArray1OfSequenceOfInteger^ OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::ChangeFind(Standard_Integer K)
{
  Handle(MeshVS_HArray1OfSequenceOfInteger) tmp = ((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->ChangeFind(K);
  return gcnew OCMeshVS_HArray1OfSequenceOfInteger(&tmp);
}

 Standard_Address OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::Find1(Standard_Integer K)
{
  return ((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->Find1(K);
}

 Standard_Address OCMeshVS_DataMapOfHArray1OfSequenceOfInteger::ChangeFind1(Standard_Integer K)
{
  return ((MeshVS_DataMapOfHArray1OfSequenceOfInteger*)nativeHandle)->ChangeFind1(K);
}


