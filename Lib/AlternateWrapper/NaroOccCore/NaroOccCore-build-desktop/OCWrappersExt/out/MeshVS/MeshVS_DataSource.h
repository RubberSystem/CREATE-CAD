// File generated by CPPExt (Transient)
//
#ifndef _MeshVS_DataSource_OCWrappers_HeaderFile
#define _MeshVS_DataSource_OCWrappers_HeaderFile

// include the wrapped class
#include <MeshVS_DataSource.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCTColStd_Array1OfReal;
ref class OCMeshVS_HArray1OfSequenceOfInteger;
ref class OCTColStd_Array1OfInteger;
ref class OCTColStd_HArray1OfReal;
ref class OCBnd_Box;
ref class OCMeshVS_Mesh;
ref class OCTColStd_HPackedMapOfInteger;
ref class OCTColgp_Array1OfPnt2d;
ref class OCBnd_Box2d;


//! The deferred class using for the following tasks: <br>
//! 1) Receiving geometry data about single element of node by its number; <br>
//! 2) Receiving type of element or node by its number; <br>
//! 3) Receiving topological information about links between element and nodes it consist of; <br>
//! 4) Receiving information about what element cover this node; <br>
//! 5) Receiving information about all nodes and elements the object consist of <br>
//! 6) Activation of advanced mesh selection. In the advanced mesh selection mode there is created: <br>
//!    - one owner for the whole mesh and for all selection modes <br>
//!    - one sensitive entity for the whole mesh and for each selection mode <br>
//!    Receiving of IDs of detected entities (nodes and elements) in a viewer is achieved by <br>
//!    implementation of a group of methods GetDetectedEntities. <br>
public ref class OCMeshVS_DataSource : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMeshVS_DataSource(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMeshVS_DataSource(Handle(MeshVS_DataSource)* nativeHandle);

// Methods PUBLIC

//! This method returns topology information about 3D-element <br>
//! Returns false if element with ID isn't 3D or because other troubles <br>
virtual /*instead*/  System::Boolean Get3DGeom(Standard_Integer ID, Standard_Integer& NbNodes, OCNaroWrappers::OCMeshVS_HArray1OfSequenceOfInteger^ Data) ;

//! This method calculates normal of face, which is using for correct reflection presentation. <br>
//!   There is default method, for advance reflection this method can be redefined. <br>
//! Id is the numerical identificator of only element! <br>
//! Max is maximal number of nodes an element can consist of <br>
//! nx, ny, nz  are values whose represent co-ordinates of normal (will be returned) <br>
//!   In the redefined method you can return normal with length more then 1, but in this case <br>
//!   the appearance of element will be more bright than usual. For ordinary brightness you must return <br>
//!   normal with length 1 <br>
virtual /*instead*/  System::Boolean GetNormal(Standard_Integer Id, Standard_Integer Max, Standard_Real& nx, Standard_Real& ny, Standard_Real& nz) ;

//! This method return normal of node ranknode of face Id, <br>
//!          which is using for smooth shading presentation. <br>
//!          Returns false if normal isn't defined. <br>
virtual /*instead*/  System::Boolean GetNodeNormal(Standard_Integer ranknode, Standard_Integer ElementId, Standard_Real& nx, Standard_Real& ny, Standard_Real& nz) ;

//! This method puts components of normal vectors at each node of a mesh face (at each face of a mesh volume) <br>
//! into the output array. <br>
//! Returns false if some problem was detected during calculation of normals. <br>
//! Id is an identifier of the mesh element. <br>
//! IsNodal, when true, means that normals at mesh element nodes are needed. If nodal normals <br>
//! are not available, or IsNodal is false, or the mesh element is a volume, then the output array contents <br>
//! depend on the element type: <br>
//!   face: a normal calculated by GetNormal() is duplicated for each node of the face; <br>
//!   volume: normals to all faces of the volume are computed (not for each node!). <br>
//! MaxNodes is maximal number of nodes an element can consist of. <br>
//! Normals contains the result. <br>
virtual /*instead*/  System::Boolean GetNormalsByElement(Standard_Integer Id, System::Boolean IsNodal, Standard_Integer MaxNodes, OCNaroWrappers::OCTColStd_HArray1OfReal^ Normals) ;

//! This method returns map of all groups the object contains. <br>
virtual /*instead*/  void GetAllGroups(TColStd_PackedMapOfInteger& Ids) ;

//! This method returns map of all group elements. <br>
virtual /*instead*/  System::Boolean GetGroup(Standard_Integer Id, MeshVS_EntityType& Type, TColStd_PackedMapOfInteger& Ids) ;

//! This method returns pointer which represents group data structure. <br>
//! This address will be saved in MeshVS_MeshOwner, so that you can access to data structure fast <br>
//! by the method Owner(). In the redefined method you can return NULL. <br>
//! ID is the numerical identificator of group <br>
virtual /*instead*/  Standard_Address GetGroupAddr(Standard_Integer ID) ;

//! Returns True if advanced mesh selection is enabled. <br>
//!          Default implementation returns False. <br>
//!          It should be redefined to return True for advanced <br>
//!          mesh selection activation. <br>
virtual /*instead*/  System::Boolean IsAdvancedSelectionEnabled() ;

//! Returns the bounding box of the whole mesh. <br>
//!          It is used in advanced selection mode to define roughly <br>
//!          the sensitive area of the mesh. <br>
//!          It can be redefined to get access to a box computed in advance. <br>
virtual /*instead*/  OCBnd_Box^ GetBoundingBox() ;

//! Returns maps of entities (nodes and elements) detected <br>
//!          by mouse click at the point (X,Y) on the current view plane, <br>
//!          with the tolerance aTol. <br>
//!          DMin - is out argument should return actual detection tolerance. <br>
//!          Returns True if something is detected. <br>
//!          It should be redefined if the advanced mesh selection is <br>
//!          activated. Default implementation returns False. <br>
virtual /*instead*/  System::Boolean GetDetectedEntities(OCNaroWrappers::OCMeshVS_Mesh^ Prs, Standard_Real X, Standard_Real Y, Standard_Real aTol, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elements, Standard_Real& DMin) ;

//! Returns maps of entities (nodes and elements) detected <br>
//!          by mouse selection with rectangular box (XMin, YMin, XMax, YMax) <br>
//!          on the current veiw plane, with the tolerance aTol. <br>
//!          Returns True if something is detected. <br>
//!          It should be redefined if the advanced mesh selection is <br>
//!          activated. Default implementation returns False. <br>
virtual /*instead*/  System::Boolean GetDetectedEntities(OCNaroWrappers::OCMeshVS_Mesh^ Prs, Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elements) ;

//! Returns maps of entities (nodes and elements) detected <br>
//!          by mouse selection with the polyline <Polyline> <br>
//!          on the current veiw plane, with the tolerance aTol. <br>
//!          Returns True if something is detected. <br>
//!          It should be redefined if the advanced mesh selection is <br>
//!          activated. Default implementation returns False. <br>
virtual /*instead*/  System::Boolean GetDetectedEntities(OCNaroWrappers::OCMeshVS_Mesh^ Prs, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elements) ;

//! Filter out the maps of mesh entities so as to keep <br>
//!          only the entities that are allowed to be selected <br>
//!          according to the current context. <br>
//!          Returns True if any of the maps has been changed. <br>
//!          It should be redefined if the advanced mesh selection is <br>
//!          activated. Default implementation returns False. <br>
virtual /*instead*/  System::Boolean GetDetectedEntities(OCNaroWrappers::OCMeshVS_Mesh^ Prs, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Nodes, OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Elements) ;

~OCMeshVS_DataSource()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
