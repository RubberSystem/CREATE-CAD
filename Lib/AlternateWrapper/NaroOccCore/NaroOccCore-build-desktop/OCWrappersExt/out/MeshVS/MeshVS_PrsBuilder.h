// File generated by CPPExt (Transient)
//
#ifndef _MeshVS_PrsBuilder_OCWrappers_HeaderFile
#define _MeshVS_PrsBuilder_OCWrappers_HeaderFile

// include the wrapped class
#include <MeshVS_PrsBuilder.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCMeshVS_DataSource;
ref class OCMeshVS_Drawer;
ref class OCPrsMgr_PresentationManager3d;
ref class OCMeshVS_Mesh;
ref class OCPrs3d_Presentation;
ref class OCSelectBasics_SensitiveEntity;
ref class OCSelectBasics_EntityOwner;


//! This class is parent for all builders using in MeshVS_Mesh. <br>
//! It provides base fields and methods all buildes need. <br>
public ref class OCMeshVS_PrsBuilder : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCMeshVS_PrsBuilder(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCMeshVS_PrsBuilder(Handle(MeshVS_PrsBuilder)* nativeHandle);

// Methods PUBLIC

//! Constructor <br>
//! Parent is pointer to MeshVS_Mesh object <br>
//! Flags is set of display modes corresponding to this builder <br>
//! DS is data source object, from which builder will pick geometry and topological information <br>
//! Id is numeric identificator of builder. You must set it to positive integer, but if <br>
//! you set it to -1, constructor will select the smallest integer, not occupied by other builders <br>
//! Priority is numerical priority constant. As priority bigger, as sooner builder starts during <br>
//! presentation construction <br>
OCMeshVS_PrsBuilder(OCNaroWrappers::OCMeshVS_Mesh^ Parent, MeshVS_DisplayModeFlags Flags, OCNaroWrappers::OCMeshVS_DataSource^ DS, Standard_Integer Id, MeshVS_BuilderPriority Priority);

//! This method is called to build presentation of custom elements (they have MeshVS_ET_0D type). <br>
//! IDs is set of numeric identificators of elements for custom building. <br>
//! IDsToExclude is set of IDs to exclude from processing. If some entity <br>
//! has been excluded, it is not processed by other builders. <br>
//! DisplayMode is numeric constant describing display mode (see MeshVS_DisplayModeFlags.hxx) <br>
virtual /*instead*/  void CustomBuild(OCNaroWrappers::OCPrs3d_Presentation^ Prs, TColStd_PackedMapOfInteger IDs, TColStd_PackedMapOfInteger& IDsToExclude, Standard_Integer DisplayMode) ;

//! This method is called to build sensitive of custom elements ( they have MeshVS_ET_0D type ) <br>
virtual /*instead*/  OCSelectBasics_SensitiveEntity^ CustomSensitiveEntity(OCNaroWrappers::OCSelectBasics_EntityOwner^ Owner, Standard_Integer SelectMode) ;

//! Returns flags, assigned with builder during creation <br>
 /*instead*/  Standard_Integer GetFlags() ;

//! Test whether display mode has flags assigned with this builder. <br>
//! This method has default implementation and can be redefined for advance behavior <br>
//! Returns Standard_True only if display mode is appropriate for this builder <br>
virtual /*instead*/  System::Boolean TestFlags(Standard_Integer DisplayMode) ;

//! Returns builder ID <br>
 /*instead*/  Standard_Integer GetId() ;

//! Returns priority; as priority bigger, as soon builder will be called. <br>
 /*instead*/  Standard_Integer GetPriority() ;

//! Returns custom data source or default ( from MeshVS_Mesh ) if custom is NULL <br>
 /*instead*/  OCMeshVS_DataSource^ GetDataSource() ;

//! Change custom data source <br>
 /*instead*/  void SetDataSource(OCNaroWrappers::OCMeshVS_DataSource^ newDS) ;

//! Returns custom drawer or default ( from MeshVS_Mesh ) if custom is NULL <br>
 /*instead*/  OCMeshVS_Drawer^ GetDrawer() ;

//! Change custom drawer <br>
 /*instead*/  void SetDrawer(OCNaroWrappers::OCMeshVS_Drawer^ newDr) ;

//! Set excluding state. If it is Standard_True, the nodes or elements, processed by current builder <br>
//! will be noted and next builder won't process its. <br>
 /*instead*/  void SetExcluding(System::Boolean state) ;

//! Read excluding state <br>
 /*instead*/  System::Boolean IsExcludingOn() ;

//! Set presentation manager for builder <br>
 /*instead*/  void SetPresentationManager(OCNaroWrappers::OCPrsMgr_PresentationManager3d^ thePrsMgr) ;

//! Get presentation manager of builder <br>
 /*instead*/  OCPrsMgr_PresentationManager3d^ GetPresentationManager() ;

~OCMeshVS_PrsBuilder()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
