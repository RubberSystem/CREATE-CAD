// File generated by CPPExt (CPP file)
//

#include "MeshVS_DataMapOfIntegerMeshEntityOwner.h"
#include "../Converter.h"
#include "MeshVS_MeshEntityOwner.h"
#include "../TColStd/TColStd_MapIntegerHasher.h"
#include "MeshVS_DataMapNodeOfDataMapOfIntegerMeshEntityOwner.h"
#include "MeshVS_DataMapIteratorOfDataMapOfIntegerMeshEntityOwner.h"


using namespace OCNaroWrappers;

OCMeshVS_DataMapOfIntegerMeshEntityOwner::OCMeshVS_DataMapOfIntegerMeshEntityOwner(MeshVS_DataMapOfIntegerMeshEntityOwner* nativeHandle) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMeshVS_DataMapOfIntegerMeshEntityOwner::OCMeshVS_DataMapOfIntegerMeshEntityOwner(Standard_Integer NbBuckets) : OCTCollection_BasicMap((OCDummy^)nullptr)

{
  nativeHandle = new MeshVS_DataMapOfIntegerMeshEntityOwner(NbBuckets);
}

OCMeshVS_DataMapOfIntegerMeshEntityOwner^ OCMeshVS_DataMapOfIntegerMeshEntityOwner::Assign(OCNaroWrappers::OCMeshVS_DataMapOfIntegerMeshEntityOwner^ Other)
{
  MeshVS_DataMapOfIntegerMeshEntityOwner* tmp = new MeshVS_DataMapOfIntegerMeshEntityOwner(0);
  *tmp = ((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->Assign(*((MeshVS_DataMapOfIntegerMeshEntityOwner*)Other->Handle));
  return gcnew OCMeshVS_DataMapOfIntegerMeshEntityOwner(tmp);
}

 void OCMeshVS_DataMapOfIntegerMeshEntityOwner::ReSize(Standard_Integer NbBuckets)
{
  ((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->ReSize(NbBuckets);
}

 System::Boolean OCMeshVS_DataMapOfIntegerMeshEntityOwner::Bind(Standard_Integer K, OCNaroWrappers::OCMeshVS_MeshEntityOwner^ I)
{
  return OCConverter::StandardBooleanToBoolean(((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->Bind(K, *((Handle_MeshVS_MeshEntityOwner*)I->Handle)));
}

 System::Boolean OCMeshVS_DataMapOfIntegerMeshEntityOwner::IsBound(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->IsBound(K));
}

 System::Boolean OCMeshVS_DataMapOfIntegerMeshEntityOwner::UnBind(Standard_Integer K)
{
  return OCConverter::StandardBooleanToBoolean(((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->UnBind(K));
}

OCMeshVS_MeshEntityOwner^ OCMeshVS_DataMapOfIntegerMeshEntityOwner::Find(Standard_Integer K)
{
  Handle(MeshVS_MeshEntityOwner) tmp = ((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->Find(K);
  return gcnew OCMeshVS_MeshEntityOwner(&tmp);
}

OCMeshVS_MeshEntityOwner^ OCMeshVS_DataMapOfIntegerMeshEntityOwner::ChangeFind(Standard_Integer K)
{
  Handle(MeshVS_MeshEntityOwner) tmp = ((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->ChangeFind(K);
  return gcnew OCMeshVS_MeshEntityOwner(&tmp);
}

 Standard_Address OCMeshVS_DataMapOfIntegerMeshEntityOwner::Find1(Standard_Integer K)
{
  return ((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->Find1(K);
}

 Standard_Address OCMeshVS_DataMapOfIntegerMeshEntityOwner::ChangeFind1(Standard_Integer K)
{
  return ((MeshVS_DataMapOfIntegerMeshEntityOwner*)nativeHandle)->ChangeFind1(K);
}


