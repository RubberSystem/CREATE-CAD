// File generated by CPPExt (CPP file)
//

#include "MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger.h"
#include "../Converter.h"
#include "../Quantity/Quantity_Color.h"
#include "../TColStd/TColStd_MapOfInteger.h"
#include "MeshVS_ColorHasher.h"
#include "MeshVS_DataMapOfColorMapOfInteger.h"
#include "MeshVS_DataMapNodeOfDataMapOfColorMapOfInteger.h"


using namespace OCNaroWrappers;

OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger::OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger(MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger* nativeHandle) : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger::OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger() : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  nativeHandle = new MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger();
}

OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger::OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger(OCNaroWrappers::OCMeshVS_DataMapOfColorMapOfInteger^ aMap) : OCTCollection_BasicMapIterator((OCDummy^)nullptr)

{
  nativeHandle = new MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger(*((MeshVS_DataMapOfColorMapOfInteger*)aMap->Handle));
}

 void OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger::Initialize(OCNaroWrappers::OCMeshVS_DataMapOfColorMapOfInteger^ aMap)
{
  ((MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger*)nativeHandle)->Initialize(*((MeshVS_DataMapOfColorMapOfInteger*)aMap->Handle));
}

OCQuantity_Color^ OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger::Key()
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = ((MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger*)nativeHandle)->Key();
  return gcnew OCQuantity_Color(tmp);
}

OCTColStd_MapOfInteger^ OCMeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger::Value()
{
  TColStd_MapOfInteger* tmp = new TColStd_MapOfInteger(0);
  *tmp = ((MeshVS_DataMapIteratorOfDataMapOfColorMapOfInteger*)nativeHandle)->Value();
  return gcnew OCTColStd_MapOfInteger(tmp);
}


