// File generated by CPPExt (CPP file)
//

#include "MeshVS_NodalColorPrsBuilder.h"
#include "../Converter.h"
#include "MeshVS_Mesh.h"
#include "MeshVS_DataSource.h"
#include "../Prs3d/Prs3d_Presentation.h"
#include "MeshVS_DataMapOfIntegerColor.h"
#include "../Quantity/Quantity_Color.h"
#include "../Aspect/Aspect_SequenceOfColor.h"
#include "../TColStd/TColStd_DataMapOfIntegerReal.h"
#include "../Graphic3d/Graphic3d_Texture2D.h"


using namespace OCNaroWrappers;

OCMeshVS_NodalColorPrsBuilder::OCMeshVS_NodalColorPrsBuilder(Handle(MeshVS_NodalColorPrsBuilder)* nativeHandle) : OCMeshVS_PrsBuilder((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MeshVS_NodalColorPrsBuilder(*nativeHandle);
}

OCMeshVS_NodalColorPrsBuilder::OCMeshVS_NodalColorPrsBuilder(OCNaroWrappers::OCMeshVS_Mesh^ Parent, MeshVS_DisplayModeFlags Flags, OCNaroWrappers::OCMeshVS_DataSource^ DS, Standard_Integer Id, MeshVS_BuilderPriority Priority) : OCMeshVS_PrsBuilder((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MeshVS_NodalColorPrsBuilder(new MeshVS_NodalColorPrsBuilder(*((Handle_MeshVS_Mesh*)Parent->Handle), Flags, *((Handle_MeshVS_DataSource*)DS->Handle), Id, Priority));
}

 void OCMeshVS_NodalColorPrsBuilder::Build(OCNaroWrappers::OCPrs3d_Presentation^ Prs, TColStd_PackedMapOfInteger IDs, TColStd_PackedMapOfInteger& IDsToExclude, System::Boolean IsElement, Standard_Integer DisplayMode)
{
  (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->Build(*((Handle_Prs3d_Presentation*)Prs->Handle), IDs, IDsToExclude, OCConverter::BooleanToStandardBoolean(IsElement), DisplayMode);
}

OCMeshVS_DataMapOfIntegerColor^ OCMeshVS_NodalColorPrsBuilder::GetColors()
{
  MeshVS_DataMapOfIntegerColor* tmp = new MeshVS_DataMapOfIntegerColor(0);
  *tmp = (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->GetColors();
  return gcnew OCMeshVS_DataMapOfIntegerColor(tmp);
}

 void OCMeshVS_NodalColorPrsBuilder::SetColors(OCNaroWrappers::OCMeshVS_DataMapOfIntegerColor^ Map)
{
  (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->SetColors(*((MeshVS_DataMapOfIntegerColor*)Map->Handle));
}

 System::Boolean OCMeshVS_NodalColorPrsBuilder::HasColors()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->HasColors());
}

 System::Boolean OCMeshVS_NodalColorPrsBuilder::GetColor(Standard_Integer ID, OCNaroWrappers::OCQuantity_Color^ theColor)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->GetColor(ID, *((Quantity_Color*)theColor->Handle)));
}

 void OCMeshVS_NodalColorPrsBuilder::SetColor(Standard_Integer ID, OCNaroWrappers::OCQuantity_Color^ theColor)
{
  (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->SetColor(ID, *((Quantity_Color*)theColor->Handle));
}

 void OCMeshVS_NodalColorPrsBuilder::UseTexture(System::Boolean theToUse)
{
  (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->UseTexture(OCConverter::BooleanToStandardBoolean(theToUse));
}

 System::Boolean OCMeshVS_NodalColorPrsBuilder::IsUseTexture()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->IsUseTexture());
}

 void OCMeshVS_NodalColorPrsBuilder::SetColorMap(OCNaroWrappers::OCAspect_SequenceOfColor^ theColors)
{
  (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->SetColorMap(*((Aspect_SequenceOfColor*)theColors->Handle));
}

OCAspect_SequenceOfColor^ OCMeshVS_NodalColorPrsBuilder::GetColorMap()
{
  Aspect_SequenceOfColor* tmp = new Aspect_SequenceOfColor();
  *tmp = (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->GetColorMap();
  return gcnew OCAspect_SequenceOfColor(tmp);
}

 void OCMeshVS_NodalColorPrsBuilder::SetInvalidColor(OCNaroWrappers::OCQuantity_Color^ theInvalidColor)
{
  (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->SetInvalidColor(*((Quantity_Color*)theInvalidColor->Handle));
}

OCQuantity_Color^ OCMeshVS_NodalColorPrsBuilder::GetInvalidColor()
{
  Quantity_Color* tmp = new Quantity_Color();
  *tmp = (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->GetInvalidColor();
  return gcnew OCQuantity_Color(tmp);
}

 void OCMeshVS_NodalColorPrsBuilder::SetTextureCoords(OCNaroWrappers::OCTColStd_DataMapOfIntegerReal^ theMap)
{
  (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->SetTextureCoords(*((TColStd_DataMapOfIntegerReal*)theMap->Handle));
}

OCTColStd_DataMapOfIntegerReal^ OCMeshVS_NodalColorPrsBuilder::GetTextureCoords()
{
  TColStd_DataMapOfIntegerReal* tmp = new TColStd_DataMapOfIntegerReal(0);
  *tmp = (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->GetTextureCoords();
  return gcnew OCTColStd_DataMapOfIntegerReal(tmp);
}

 void OCMeshVS_NodalColorPrsBuilder::SetTextureCoord(Standard_Integer theID, Standard_Real theCoord)
{
  (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->SetTextureCoord(theID, theCoord);
}

 Standard_Real OCMeshVS_NodalColorPrsBuilder::GetTextureCoord(Standard_Integer theID)
{
  return (*((Handle_MeshVS_NodalColorPrsBuilder*)nativeHandle))->GetTextureCoord(theID);
}


