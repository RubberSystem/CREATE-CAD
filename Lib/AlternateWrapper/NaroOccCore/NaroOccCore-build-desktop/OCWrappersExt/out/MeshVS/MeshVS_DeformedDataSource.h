// File generated by CPPExt (Transient)
//
#ifndef _MeshVS_DeformedDataSource_OCWrappers_HeaderFile
#define _MeshVS_DeformedDataSource_OCWrappers_HeaderFile

// include the wrapped class
#include <MeshVS_DeformedDataSource.hxx>
#include "../Converter.h"

#include "MeshVS_DataSource.h"

#include "MeshVS_DataMapOfIntegerVector.h"


namespace OCNaroWrappers
{

ref class OCMeshVS_DataSource;
ref class OCTColStd_Array1OfReal;
ref class OCMeshVS_HArray1OfSequenceOfInteger;
ref class OCTColStd_Array1OfInteger;
ref class OCMeshVS_DataMapOfIntegerVector;
ref class OCgp_Vec;


//! The class provides default class which helps to represent node displacements by deformed mesh <br>
//!    This class has an internal handle to canonical non-deformed mesh data source and <br>
//! map of displacement vectors. The displacement can be magnified to useful size. <br>
//! All methods is implemented with calling the corresponding methods of non-deformed data source. <br>
public ref class OCMeshVS_DeformedDataSource : OCMeshVS_DataSource {

protected:
  // dummy constructor;
  OCMeshVS_DeformedDataSource(OCDummy^) : OCMeshVS_DataSource((OCDummy^)nullptr) {};

public:

// constructor from native
OCMeshVS_DeformedDataSource(Handle(MeshVS_DeformedDataSource)* nativeHandle);

// Methods PUBLIC

//!  Constructor <br>
//! theNonDeformDS is canonical non-deformed data source, by which we are able to calculate <br>
//!   deformed mesh geometry <br>
//! theMagnify is coefficient of displacement magnify <br>
OCMeshVS_DeformedDataSource(OCNaroWrappers::OCMeshVS_DataSource^ theNonDeformDS, Standard_Real theMagnify);


virtual /*instead*/  System::Boolean GetGeom(Standard_Integer ID, System::Boolean IsElement, OCNaroWrappers::OCTColStd_Array1OfReal^ Coords, Standard_Integer& NbNodes, MeshVS_EntityType& Type) ;


virtual /*instead*/  System::Boolean GetGeomType(Standard_Integer ID, System::Boolean IsElement, MeshVS_EntityType& Type) ;


virtual /*instead*/  System::Boolean Get3DGeom(Standard_Integer ID, Standard_Integer& NbNodes, OCNaroWrappers::OCMeshVS_HArray1OfSequenceOfInteger^ Data) override;


virtual /*instead*/  Standard_Address GetAddr(Standard_Integer ID, System::Boolean IsElement) ;


virtual /*instead*/  System::Boolean GetNodesByElement(Standard_Integer ID, OCNaroWrappers::OCTColStd_Array1OfInteger^ NodeIDs, Standard_Integer& NbNodes) ;


virtual /*instead*/  TColStd_PackedMapOfInteger& GetAllNodes() ;


virtual /*instead*/  TColStd_PackedMapOfInteger& GetAllElements() ;

//! This method returns map of nodal displacement vectors <br>
 /*instead*/  OCMeshVS_DataMapOfIntegerVector^ GetVectors() ;

//! This method sets map of nodal displacement vectors (Map). <br>
 /*instead*/  void SetVectors(OCNaroWrappers::OCMeshVS_DataMapOfIntegerVector^ Map) ;

//! This method returns vector ( Vect ) assigned to node number ID. <br>
 /*instead*/  System::Boolean GetVector(Standard_Integer ID, OCNaroWrappers::OCgp_Vec^ Vect) ;

//! This method sets vector ( Vect ) assigned to node number ID. <br>
 /*instead*/  void SetVector(Standard_Integer ID, OCNaroWrappers::OCgp_Vec^ Vect) ;


 /*instead*/  void SetNonDeformedDataSource(OCNaroWrappers::OCMeshVS_DataSource^ theDS) ;

//! With this methods you can read and change internal canonical data source <br>
 /*instead*/  OCMeshVS_DataSource^ GetNonDeformedDataSource() ;


 /*instead*/  void SetMagnify(Standard_Real theMagnify) ;

//! With this methods you can read and change magnify coefficient of nodal displacements <br>
 /*instead*/  Standard_Real GetMagnify() ;

~OCMeshVS_DeformedDataSource()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
