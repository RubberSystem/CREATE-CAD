// File generated by CPPExt (Transient)
//
#ifndef _MeshVS_MeshPrsBuilder_OCWrappers_HeaderFile
#define _MeshVS_MeshPrsBuilder_OCWrappers_HeaderFile

// include the wrapped class
#include <MeshVS_MeshPrsBuilder.hxx>
#include "../Converter.h"

#include "MeshVS_PrsBuilder.h"



namespace OCNaroWrappers
{

ref class OCMeshVS_Mesh;
ref class OCMeshVS_DataSource;
ref class OCPrs3d_Presentation;
ref class OCTColStd_Array1OfReal;
ref class OCGraphic3d_ArrayOfPolylines;
ref class OCGraphic3d_ArrayOfPolygons;
ref class OCMeshVS_HArray1OfSequenceOfInteger;
ref class OCGraphic3d_ArrayOfPrimitives;
ref class OCGraphic3d_AspectFillArea3d;
ref class OCGraphic3d_AspectLine3d;


//! This class provides methods to compute base mesh presentation <br>
public ref class OCMeshVS_MeshPrsBuilder : OCMeshVS_PrsBuilder {

protected:
  // dummy constructor;
  OCMeshVS_MeshPrsBuilder(OCDummy^) : OCMeshVS_PrsBuilder((OCDummy^)nullptr) {};

public:

// constructor from native
OCMeshVS_MeshPrsBuilder(Handle(MeshVS_MeshPrsBuilder)* nativeHandle);

// Methods PUBLIC

//! Creates builder with certain display mode flags, data source, ID and priority <br>
OCMeshVS_MeshPrsBuilder(OCNaroWrappers::OCMeshVS_Mesh^ Parent, MeshVS_DisplayModeFlags Flags, OCNaroWrappers::OCMeshVS_DataSource^ DS, Standard_Integer Id, MeshVS_BuilderPriority Priority);

//! Builds base mesh presentation by calling the methods below <br>
virtual /*instead*/  void Build(OCNaroWrappers::OCPrs3d_Presentation^ Prs, TColStd_PackedMapOfInteger IDs, TColStd_PackedMapOfInteger& IDsToExclude, System::Boolean IsElement, Standard_Integer DisplayMode) ;

//! Builds nodes presentation <br>
virtual /*instead*/  void BuildNodes(OCNaroWrappers::OCPrs3d_Presentation^ Prs, TColStd_PackedMapOfInteger IDs, TColStd_PackedMapOfInteger& IDsToExclude, Standard_Integer DisplayMode) ;

//! Builds elements presentation <br>
virtual /*instead*/  void BuildElements(OCNaroWrappers::OCPrs3d_Presentation^ Prs, TColStd_PackedMapOfInteger IDs, TColStd_PackedMapOfInteger& IDsToExclude, Standard_Integer DisplayMode) ;

//! Builds presentation of hilighted entity <br>
virtual /*instead*/  void BuildHilightPrs(OCNaroWrappers::OCPrs3d_Presentation^ Prs, TColStd_PackedMapOfInteger IDs, System::Boolean IsElement) ;

//! Add to array polygons or polylines representing volume <br>
static /*instead*/  void AddVolumePrs(OCNaroWrappers::OCMeshVS_HArray1OfSequenceOfInteger^ Topo, OCNaroWrappers::OCTColStd_Array1OfReal^ Nodes, Standard_Integer NbNodes, OCNaroWrappers::OCGraphic3d_ArrayOfPrimitives^ Array, System::Boolean IsReflected, System::Boolean IsShrinked, System::Boolean IsSelect, Standard_Real ShrinkCoef) ;

//! Calculate how many polygons or polylines are necessary to draw passed topology <br>
static /*instead*/  void HowManyPrimitives(OCNaroWrappers::OCMeshVS_HArray1OfSequenceOfInteger^ Topo, System::Boolean AsPolygons, System::Boolean IsSelect, Standard_Integer NbNodes, Standard_Integer& Vertices, Standard_Integer& Bounds) ;

~OCMeshVS_MeshPrsBuilder()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
