// File generated by CPPExt (CPP file)
//

#include "MeshVS_SensitivePolyhedron.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HArray1OfPnt.h"
#include "../TColgp/TColgp_HArray1OfPnt2d.h"
#include "MeshVS_HArray1OfSequenceOfInteger.h"
#include "../SelectBasics/SelectBasics_EntityOwner.h"
#include "../TColgp/TColgp_Array1OfPnt.h"
#include "../Select3D/Select3D_Projector.h"
#include "../Select3D/Select3D_SensitiveEntity.h"
#include "../TopLoc/TopLoc_Location.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../Bnd/Bnd_Box2d.h"
#include "../TColStd/TColStd_SequenceOfInteger.h"
#include "../gp/gp_Lin.h"
#include "../SelectBasics/SelectBasics_ListOfBox2d.h"


using namespace OCNaroWrappers;

OCMeshVS_SensitivePolyhedron::OCMeshVS_SensitivePolyhedron(Handle(MeshVS_SensitivePolyhedron)* nativeHandle) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MeshVS_SensitivePolyhedron(*nativeHandle);
}

OCMeshVS_SensitivePolyhedron::OCMeshVS_SensitivePolyhedron(OCNaroWrappers::OCSelectBasics_EntityOwner^ Owner, OCNaroWrappers::OCTColgp_Array1OfPnt^ Nodes, OCNaroWrappers::OCMeshVS_HArray1OfSequenceOfInteger^ Topo) : OCSelect3D_SensitiveEntity((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MeshVS_SensitivePolyhedron(new MeshVS_SensitivePolyhedron(*((Handle_SelectBasics_EntityOwner*)Owner->Handle), *((TColgp_Array1OfPnt*)Nodes->Handle), *((Handle_MeshVS_HArray1OfSequenceOfInteger*)Topo->Handle)));
}

 void OCMeshVS_SensitivePolyhedron::Project(OCNaroWrappers::OCSelect3D_Projector^ aProjector)
{
  (*((Handle_MeshVS_SensitivePolyhedron*)nativeHandle))->Project(*((Handle_Select3D_Projector*)aProjector->Handle));
}

OCSelect3D_SensitiveEntity^ OCMeshVS_SensitivePolyhedron::GetConnected(OCNaroWrappers::OCTopLoc_Location^ aLocation)
{
  Handle(Select3D_SensitiveEntity) tmp = (*((Handle_MeshVS_SensitivePolyhedron*)nativeHandle))->GetConnected(*((TopLoc_Location*)aLocation->Handle));
  return gcnew OCSelect3D_SensitiveEntity(&tmp);
}

 System::Boolean OCMeshVS_SensitivePolyhedron::Matches(Standard_Real X, Standard_Real Y, Standard_Real aTol, Standard_Real& DMin)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_SensitivePolyhedron*)nativeHandle))->Matches(X, Y, aTol, DMin));
}

 System::Boolean OCMeshVS_SensitivePolyhedron::Matches(Standard_Real XMin, Standard_Real YMin, Standard_Real XMax, Standard_Real YMax, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_SensitivePolyhedron*)nativeHandle))->Matches(XMin, YMin, XMax, YMax, aTol));
}

 System::Boolean OCMeshVS_SensitivePolyhedron::Matches(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Polyline, OCNaroWrappers::OCBnd_Box2d^ aBox, Standard_Real aTol)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_SensitivePolyhedron*)nativeHandle))->Matches(*((TColgp_Array1OfPnt2d*)Polyline->Handle), *((Bnd_Box2d*)aBox->Handle), aTol));
}

 Standard_Real OCMeshVS_SensitivePolyhedron::ComputeDepth(OCNaroWrappers::OCgp_Lin^ EyeLine)
{
  return (*((Handle_MeshVS_SensitivePolyhedron*)nativeHandle))->ComputeDepth(*((gp_Lin*)EyeLine->Handle));
}

 void OCMeshVS_SensitivePolyhedron::Areas(OCNaroWrappers::OCSelectBasics_ListOfBox2d^ aResult)
{
  (*((Handle_MeshVS_SensitivePolyhedron*)nativeHandle))->Areas(*((SelectBasics_ListOfBox2d*)aResult->Handle));
}


