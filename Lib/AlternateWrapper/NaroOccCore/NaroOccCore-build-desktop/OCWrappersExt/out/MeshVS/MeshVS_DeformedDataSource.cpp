// File generated by CPPExt (CPP file)
//

#include "MeshVS_DeformedDataSource.h"
#include "../Converter.h"
#include "MeshVS_DataSource.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "MeshVS_HArray1OfSequenceOfInteger.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "MeshVS_DataMapOfIntegerVector.h"
#include "../gp/gp_Vec.h"


using namespace OCNaroWrappers;

OCMeshVS_DeformedDataSource::OCMeshVS_DeformedDataSource(Handle(MeshVS_DeformedDataSource)* nativeHandle) : OCMeshVS_DataSource((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MeshVS_DeformedDataSource(*nativeHandle);
}

OCMeshVS_DeformedDataSource::OCMeshVS_DeformedDataSource(OCNaroWrappers::OCMeshVS_DataSource^ theNonDeformDS, Standard_Real theMagnify) : OCMeshVS_DataSource((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MeshVS_DeformedDataSource(new MeshVS_DeformedDataSource(*((Handle_MeshVS_DataSource*)theNonDeformDS->Handle), theMagnify));
}

 System::Boolean OCMeshVS_DeformedDataSource::GetGeom(Standard_Integer ID, System::Boolean IsElement, OCNaroWrappers::OCTColStd_Array1OfReal^ Coords, Standard_Integer& NbNodes, MeshVS_EntityType& Type)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetGeom(ID, OCConverter::BooleanToStandardBoolean(IsElement), *((TColStd_Array1OfReal*)Coords->Handle), NbNodes, Type));
}

 System::Boolean OCMeshVS_DeformedDataSource::GetGeomType(Standard_Integer ID, System::Boolean IsElement, MeshVS_EntityType& Type)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetGeomType(ID, OCConverter::BooleanToStandardBoolean(IsElement), Type));
}

 System::Boolean OCMeshVS_DeformedDataSource::Get3DGeom(Standard_Integer ID, Standard_Integer& NbNodes, OCNaroWrappers::OCMeshVS_HArray1OfSequenceOfInteger^ Data)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->Get3DGeom(ID, NbNodes, *((Handle_MeshVS_HArray1OfSequenceOfInteger*)Data->Handle)));
}

 Standard_Address OCMeshVS_DeformedDataSource::GetAddr(Standard_Integer ID, System::Boolean IsElement)
{
  return (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetAddr(ID, OCConverter::BooleanToStandardBoolean(IsElement));
}

 System::Boolean OCMeshVS_DeformedDataSource::GetNodesByElement(Standard_Integer ID, OCNaroWrappers::OCTColStd_Array1OfInteger^ NodeIDs, Standard_Integer& NbNodes)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetNodesByElement(ID, *((TColStd_Array1OfInteger*)NodeIDs->Handle), NbNodes));
}

 TColStd_PackedMapOfInteger& OCMeshVS_DeformedDataSource::GetAllNodes()
{
  return (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetAllNodes();
}

 TColStd_PackedMapOfInteger& OCMeshVS_DeformedDataSource::GetAllElements()
{
  return (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetAllElements();
}

OCMeshVS_DataMapOfIntegerVector^ OCMeshVS_DeformedDataSource::GetVectors()
{
  MeshVS_DataMapOfIntegerVector* tmp = new MeshVS_DataMapOfIntegerVector(0);
  *tmp = (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetVectors();
  return gcnew OCMeshVS_DataMapOfIntegerVector(tmp);
}

 void OCMeshVS_DeformedDataSource::SetVectors(OCNaroWrappers::OCMeshVS_DataMapOfIntegerVector^ Map)
{
  (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->SetVectors(*((MeshVS_DataMapOfIntegerVector*)Map->Handle));
}

 System::Boolean OCMeshVS_DeformedDataSource::GetVector(Standard_Integer ID, OCNaroWrappers::OCgp_Vec^ Vect)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetVector(ID, *((gp_Vec*)Vect->Handle)));
}

 void OCMeshVS_DeformedDataSource::SetVector(Standard_Integer ID, OCNaroWrappers::OCgp_Vec^ Vect)
{
  (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->SetVector(ID, *((gp_Vec*)Vect->Handle));
}

 void OCMeshVS_DeformedDataSource::SetNonDeformedDataSource(OCNaroWrappers::OCMeshVS_DataSource^ theDS)
{
  (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->SetNonDeformedDataSource(*((Handle_MeshVS_DataSource*)theDS->Handle));
}

OCMeshVS_DataSource^ OCMeshVS_DeformedDataSource::GetNonDeformedDataSource()
{
  Handle(MeshVS_DataSource) tmp = (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetNonDeformedDataSource();
  return gcnew OCMeshVS_DataSource(&tmp);
}

 void OCMeshVS_DeformedDataSource::SetMagnify(Standard_Real theMagnify)
{
  (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->SetMagnify(theMagnify);
}

 Standard_Real OCMeshVS_DeformedDataSource::GetMagnify()
{
  return (*((Handle_MeshVS_DeformedDataSource*)nativeHandle))->GetMagnify();
}


