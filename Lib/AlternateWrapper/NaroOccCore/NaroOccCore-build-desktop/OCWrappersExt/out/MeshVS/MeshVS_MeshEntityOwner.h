// File generated by CPPExt (Transient)
//
#ifndef _MeshVS_MeshEntityOwner_OCWrappers_HeaderFile
#define _MeshVS_MeshEntityOwner_OCWrappers_HeaderFile

// include the wrapped class
#include <MeshVS_MeshEntityOwner.hxx>
#include "../Converter.h"

#include "../SelectMgr/SelectMgr_EntityOwner.h"

#include "../Quantity/Quantity_NameOfColor.h"


namespace OCNaroWrappers
{

ref class OCPrsMgr_PresentationManager;
ref class OCPrsMgr_PresentationManager3d;


//! The custom owner. This class provides methods to store owner information: <br>
//!   1) An address of element or node data structure <br>
//!   2) Type of node or element owner assigned <br>
//!   3) ID of node or element owner assigned <br>
public ref class OCMeshVS_MeshEntityOwner : OCSelectMgr_EntityOwner {

protected:
  // dummy constructor;
  OCMeshVS_MeshEntityOwner(OCDummy^) : OCSelectMgr_EntityOwner((OCDummy^)nullptr) {};

public:

// constructor from native
OCMeshVS_MeshEntityOwner(Handle(MeshVS_MeshEntityOwner)* nativeHandle);

// Methods PUBLIC


OCMeshVS_MeshEntityOwner(SelectMgr_SOPtr SelObj, Standard_Integer ID, Standard_Address MeshEntity, MeshVS_EntityType Type, Standard_Integer Priority, System::Boolean IsGroup);

//! Returns an address of element or node data structure <br>
 /*instead*/  Standard_Address Owner() ;

//! Returns type of element or node data structure <br>
 /*instead*/  MeshVS_EntityType Type() ;

//! Returns ID of element or node data structure <br>
 /*instead*/  Standard_Integer ID() ;

//! Returns true if owner represents group of nodes or elements <br>
 /*instead*/  System::Boolean IsGroup() ;

//! Returns true if owner is hilighted <br>
virtual /*instead*/  System::Boolean IsHilighted(OCNaroWrappers::OCPrsMgr_PresentationManager^ PM, Standard_Integer Mode) override;

//! Hilights owner <br>
virtual /*instead*/  void Hilight() override;

//! Hilights owner <br>
virtual /*instead*/  void Hilight(OCNaroWrappers::OCPrsMgr_PresentationManager^ PM, Standard_Integer Mode) override;

//! Hilights owner with the certain color <br>
virtual /*instead*/  void HilightWithColor(OCNaroWrappers::OCPrsMgr_PresentationManager3d^ PM, OCQuantity_NameOfColor theColor, Standard_Integer Mode) override;

//! Strip hilight of owner <br>
virtual /*instead*/  void Unhilight(OCNaroWrappers::OCPrsMgr_PresentationManager^ PM, Standard_Integer Mode) override;


virtual /*instead*/  void Clear(OCNaroWrappers::OCPrsMgr_PresentationManager^ PM, Standard_Integer Mode) override;

~OCMeshVS_MeshEntityOwner()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
