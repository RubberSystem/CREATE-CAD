// File generated by CPPExt (CPP file)
//

#include "MeshVS_Mesh.h"
#include "../Converter.h"
#include "MeshVS_PrsBuilder.h"
#include "../TColStd/TColStd_HPackedMapOfInteger.h"
#include "MeshVS_DataSource.h"
#include "MeshVS_Drawer.h"
#include "../SelectMgr/SelectMgr_EntityOwner.h"
#include "../PrsMgr/PrsMgr_PresentationManager3d.h"
#include "../Prs3d/Prs3d_Presentation.h"
#include "../SelectMgr/SelectMgr_Selection.h"
#include "../SelectMgr/SelectMgr_SequenceOfOwner.h"
#include "MeshVS_DataMapOfIntegerOwner.h"


using namespace OCNaroWrappers;

OCMeshVS_Mesh::OCMeshVS_Mesh(Handle(MeshVS_Mesh)* nativeHandle) : OCAIS_InteractiveObject((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_MeshVS_Mesh(*nativeHandle);
}

OCMeshVS_Mesh::OCMeshVS_Mesh(System::Boolean theIsAllowOverlapped) : OCAIS_InteractiveObject((OCDummy^)nullptr)

{
  nativeHandle = new Handle_MeshVS_Mesh(new MeshVS_Mesh(OCConverter::BooleanToStandardBoolean(theIsAllowOverlapped)));
}

 void OCMeshVS_Mesh::Compute(OCNaroWrappers::OCPrsMgr_PresentationManager3d^ PM, OCNaroWrappers::OCPrs3d_Presentation^ Prs, Standard_Integer DisplayMode)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->Compute(*((Handle_PrsMgr_PresentationManager3d*)PM->Handle), *((Handle_Prs3d_Presentation*)Prs->Handle), DisplayMode);
}

 void OCMeshVS_Mesh::ComputeSelection(OCNaroWrappers::OCSelectMgr_Selection^ Sel, Standard_Integer SelectMode)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->ComputeSelection(*((Handle_SelectMgr_Selection*)Sel->Handle), SelectMode);
}

 void OCMeshVS_Mesh::HilightSelected(OCNaroWrappers::OCPrsMgr_PresentationManager3d^ PM, OCNaroWrappers::OCSelectMgr_SequenceOfOwner^ Owners)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->HilightSelected(*((Handle_PrsMgr_PresentationManager3d*)PM->Handle), *((SelectMgr_SequenceOfOwner*)Owners->Handle));
}

 void OCMeshVS_Mesh::HilightOwnerWithColor(OCNaroWrappers::OCPrsMgr_PresentationManager3d^ PM, OCQuantity_NameOfColor Color, OCNaroWrappers::OCSelectMgr_EntityOwner^ Owner)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->HilightOwnerWithColor(*((Handle_PrsMgr_PresentationManager3d*)PM->Handle), (Quantity_NameOfColor)Color, *((Handle_SelectMgr_EntityOwner*)Owner->Handle));
}

 void OCMeshVS_Mesh::ClearSelected()
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->ClearSelected();
}

 Standard_Integer OCMeshVS_Mesh::GetBuildersCount()
{
  return (*((Handle_MeshVS_Mesh*)nativeHandle))->GetBuildersCount();
}

OCMeshVS_PrsBuilder^ OCMeshVS_Mesh::GetBuilder(Standard_Integer Index)
{
  Handle(MeshVS_PrsBuilder) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetBuilder(Index);
  return gcnew OCMeshVS_PrsBuilder(&tmp);
}

OCMeshVS_PrsBuilder^ OCMeshVS_Mesh::GetBuilderById(Standard_Integer Id)
{
  Handle(MeshVS_PrsBuilder) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetBuilderById(Id);
  return gcnew OCMeshVS_PrsBuilder(&tmp);
}

 Standard_Integer OCMeshVS_Mesh::GetFreeId()
{
  return (*((Handle_MeshVS_Mesh*)nativeHandle))->GetFreeId();
}

 void OCMeshVS_Mesh::AddBuilder(OCNaroWrappers::OCMeshVS_PrsBuilder^ Builder, System::Boolean TreatAsHilighter)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->AddBuilder(*((Handle_MeshVS_PrsBuilder*)Builder->Handle), OCConverter::BooleanToStandardBoolean(TreatAsHilighter));
}

 void OCMeshVS_Mesh::SetHilighter(OCNaroWrappers::OCMeshVS_PrsBuilder^ Builder)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->SetHilighter(*((Handle_MeshVS_PrsBuilder*)Builder->Handle));
}

 System::Boolean OCMeshVS_Mesh::SetHilighter(Standard_Integer Index)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_Mesh*)nativeHandle))->SetHilighter(Index));
}

 System::Boolean OCMeshVS_Mesh::SetHilighterById(Standard_Integer Id)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_Mesh*)nativeHandle))->SetHilighterById(Id));
}

OCMeshVS_PrsBuilder^ OCMeshVS_Mesh::GetHilighter()
{
  Handle(MeshVS_PrsBuilder) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetHilighter();
  return gcnew OCMeshVS_PrsBuilder(&tmp);
}

 void OCMeshVS_Mesh::RemoveBuilder(Standard_Integer Index)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->RemoveBuilder(Index);
}

 void OCMeshVS_Mesh::RemoveBuilderById(Standard_Integer Id)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->RemoveBuilderById(Id);
}

OCMeshVS_PrsBuilder^ OCMeshVS_Mesh::FindBuilder(System::String^ TypeString)
{
  Handle(MeshVS_PrsBuilder) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->FindBuilder(OCConverter::StringToStandardCString(TypeString));
  return gcnew OCMeshVS_PrsBuilder(&tmp);
}

OCMeshVS_DataMapOfIntegerOwner^ OCMeshVS_Mesh::GetOwnerMaps(System::Boolean IsElement)
{
  MeshVS_DataMapOfIntegerOwner* tmp = new MeshVS_DataMapOfIntegerOwner(0);
  *tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetOwnerMaps(OCConverter::BooleanToStandardBoolean(IsElement));
  return gcnew OCMeshVS_DataMapOfIntegerOwner(tmp);
}

OCMeshVS_DataSource^ OCMeshVS_Mesh::GetDataSource()
{
  Handle(MeshVS_DataSource) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetDataSource();
  return gcnew OCMeshVS_DataSource(&tmp);
}

 void OCMeshVS_Mesh::SetDataSource(OCNaroWrappers::OCMeshVS_DataSource^ aDataSource)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->SetDataSource(*((Handle_MeshVS_DataSource*)aDataSource->Handle));
}

OCMeshVS_Drawer^ OCMeshVS_Mesh::GetDrawer()
{
  Handle(MeshVS_Drawer) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetDrawer();
  return gcnew OCMeshVS_Drawer(&tmp);
}

 void OCMeshVS_Mesh::SetDrawer(OCNaroWrappers::OCMeshVS_Drawer^ aDrawer)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->SetDrawer(*((Handle_MeshVS_Drawer*)aDrawer->Handle));
}

 System::Boolean OCMeshVS_Mesh::IsHiddenElem(Standard_Integer ID)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_Mesh*)nativeHandle))->IsHiddenElem(ID));
}

 System::Boolean OCMeshVS_Mesh::IsHiddenNode(Standard_Integer ID)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_Mesh*)nativeHandle))->IsHiddenNode(ID));
}

 System::Boolean OCMeshVS_Mesh::IsSelectableElem(Standard_Integer ID)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_Mesh*)nativeHandle))->IsSelectableElem(ID));
}

 System::Boolean OCMeshVS_Mesh::IsSelectableNode(Standard_Integer ID)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_Mesh*)nativeHandle))->IsSelectableNode(ID));
}

OCTColStd_HPackedMapOfInteger^ OCMeshVS_Mesh::GetHiddenNodes()
{
  Handle(TColStd_HPackedMapOfInteger) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetHiddenNodes();
  return gcnew OCTColStd_HPackedMapOfInteger(&tmp);
}

 void OCMeshVS_Mesh::SetHiddenNodes(OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Ids)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->SetHiddenNodes(*((Handle_TColStd_HPackedMapOfInteger*)Ids->Handle));
}

OCTColStd_HPackedMapOfInteger^ OCMeshVS_Mesh::GetHiddenElems()
{
  Handle(TColStd_HPackedMapOfInteger) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetHiddenElems();
  return gcnew OCTColStd_HPackedMapOfInteger(&tmp);
}

 void OCMeshVS_Mesh::SetHiddenElems(OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Ids)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->SetHiddenElems(*((Handle_TColStd_HPackedMapOfInteger*)Ids->Handle));
}

OCTColStd_HPackedMapOfInteger^ OCMeshVS_Mesh::GetSelectableNodes()
{
  Handle(TColStd_HPackedMapOfInteger) tmp = (*((Handle_MeshVS_Mesh*)nativeHandle))->GetSelectableNodes();
  return gcnew OCTColStd_HPackedMapOfInteger(&tmp);
}

 void OCMeshVS_Mesh::SetSelectableNodes(OCNaroWrappers::OCTColStd_HPackedMapOfInteger^ Ids)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->SetSelectableNodes(*((Handle_TColStd_HPackedMapOfInteger*)Ids->Handle));
}

 void OCMeshVS_Mesh::UpdateSelectableNodes()
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->UpdateSelectableNodes();
}

 OCMeshVS_MeshSelectionMethod OCMeshVS_Mesh::GetMeshSelMethod()
{
  return (OCMeshVS_MeshSelectionMethod)((*((Handle_MeshVS_Mesh*)nativeHandle))->GetMeshSelMethod());
}

 void OCMeshVS_Mesh::SetMeshSelMethod(OCMeshVS_MeshSelectionMethod M)
{
  (*((Handle_MeshVS_Mesh*)nativeHandle))->SetMeshSelMethod((MeshVS_MeshSelectionMethod)M);
}

 System::Boolean OCMeshVS_Mesh::IsWholeMeshOwner(OCNaroWrappers::OCSelectMgr_EntityOwner^ theOwner)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_MeshVS_Mesh*)nativeHandle))->IsWholeMeshOwner(*((Handle_SelectMgr_EntityOwner*)theOwner->Handle)));
}


