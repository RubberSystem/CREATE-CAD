// File generated by CPPExt (Transient)
//
#ifndef _Adaptor2d_HCurve2d_OCWrappers_HeaderFile
#define _Adaptor2d_HCurve2d_OCWrappers_HeaderFile

// include the wrapped class
#include <Adaptor2d_HCurve2d.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../GeomAbs/GeomAbs_Shape.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../gp/gp_Lin2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"


namespace OCNaroWrappers
{

ref class OCAdaptor2d_Curve2d;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt2d;
ref class OCgp_Vec2d;
ref class OCGeom2d_BezierCurve;
ref class OCGeom2d_BSplineCurve;


//! Root class for 2D curves manipulated by handles, on <br>
//! which geometric algorithms work. <br>
//! An adapted curve is an interface between the <br>
//! services provided by a curve, and those required of <br>
//! the curve by algorithms, which use it. <br>
//! A derived specific class is provided: <br>
//! Geom2dAdaptor_HCurve for a curve from the Geom2d package. <br>
public ref class OCAdaptor2d_HCurve2d : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCAdaptor2d_HCurve2d(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCAdaptor2d_HCurve2d(Handle(Adaptor2d_HCurve2d)* nativeHandle);

// Methods PUBLIC


 /*instead*/  Standard_Real FirstParameter() ;


 /*instead*/  Standard_Real LastParameter() ;


 /*instead*/  OCGeomAbs_Shape Continuity() ;


 /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) ;


 /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;

//! If <First> >= <Last> <br>
 /*instead*/  OCAdaptor2d_HCurve2d^ Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol) ;


 /*instead*/  System::Boolean IsClosed() ;


 /*instead*/  System::Boolean IsPeriodic() ;


 /*instead*/  Standard_Real Period() ;


 /*instead*/  OCgp_Pnt2d^ Value(Standard_Real U) ;


 /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V) ;


 /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;


 /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) ;


 /*instead*/  OCgp_Vec2d^ DN(Standard_Real U, Standard_Integer N) ;


 /*instead*/  Standard_Real Resolution(Standard_Real R3d) ;


 /*instead*/  OCGeomAbs_CurveType GetType() ;


 /*instead*/  OCgp_Lin2d^ Line() ;


 /*instead*/  OCgp_Circ2d^ Circle() ;


 /*instead*/  OCgp_Elips2d^ Ellipse() ;


 /*instead*/  OCgp_Hypr2d^ Hyperbola() ;


 /*instead*/  OCgp_Parab2d^ Parabola() ;


 /*instead*/  Standard_Integer Degree() ;


 /*instead*/  System::Boolean IsRational() ;


 /*instead*/  Standard_Integer NbPoles() ;


 /*instead*/  Standard_Integer NbKnots() ;


 /*instead*/  OCGeom2d_BezierCurve^ Bezier() ;


virtual /*instead*/  OCGeom2d_BSplineCurve^ BSpline() ;

~OCAdaptor2d_HCurve2d()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
