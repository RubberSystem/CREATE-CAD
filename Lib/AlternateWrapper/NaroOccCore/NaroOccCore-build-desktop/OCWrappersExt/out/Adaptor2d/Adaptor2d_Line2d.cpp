// File generated by CPPExt (CPP file)
//

#include "Adaptor2d_Line2d.h"
#include "../Converter.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Dir2d.h"
#include "../gp/gp_Lin2d.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "Adaptor2d_HCurve2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Hypr2d.h"
#include "../gp/gp_Parab2d.h"
#include "../Geom2d/Geom2d_BezierCurve.h"
#include "../Geom2d/Geom2d_BSplineCurve.h"


using namespace OCNaroWrappers;

OCAdaptor2d_Line2d::OCAdaptor2d_Line2d(Adaptor2d_Line2d* nativeHandle) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCAdaptor2d_Line2d::OCAdaptor2d_Line2d() : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor2d_Line2d();
}

OCAdaptor2d_Line2d::OCAdaptor2d_Line2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ D, Standard_Real UFirst, Standard_Real ULast) : OCAdaptor2d_Curve2d((OCDummy^)nullptr)

{
  nativeHandle = new Adaptor2d_Line2d(*((gp_Pnt2d*)P->Handle), *((gp_Dir2d*)D->Handle), UFirst, ULast);
}

 void OCAdaptor2d_Line2d::Load(OCNaroWrappers::OCgp_Lin2d^ L)
{
  ((Adaptor2d_Line2d*)nativeHandle)->Load(*((gp_Lin2d*)L->Handle));
}

 void OCAdaptor2d_Line2d::Load(OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real UFirst, Standard_Real ULast)
{
  ((Adaptor2d_Line2d*)nativeHandle)->Load(*((gp_Lin2d*)L->Handle), UFirst, ULast);
}

 Standard_Real OCAdaptor2d_Line2d::FirstParameter()
{
  return ((Adaptor2d_Line2d*)nativeHandle)->FirstParameter();
}

 Standard_Real OCAdaptor2d_Line2d::LastParameter()
{
  return ((Adaptor2d_Line2d*)nativeHandle)->LastParameter();
}

 OCGeomAbs_Shape OCAdaptor2d_Line2d::Continuity()
{
  return (OCGeomAbs_Shape)(((Adaptor2d_Line2d*)nativeHandle)->Continuity());
}

 Standard_Integer OCAdaptor2d_Line2d::NbIntervals(OCGeomAbs_Shape S)
{
  return ((Adaptor2d_Line2d*)nativeHandle)->NbIntervals((GeomAbs_Shape)S);
}

 void OCAdaptor2d_Line2d::Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  ((Adaptor2d_Line2d*)nativeHandle)->Intervals(*((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

OCAdaptor2d_HCurve2d^ OCAdaptor2d_Line2d::Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol)
{
  Handle(Adaptor2d_HCurve2d) tmp = ((Adaptor2d_Line2d*)nativeHandle)->Trim(First, Last, Tol);
  return gcnew OCAdaptor2d_HCurve2d(&tmp);
}

 System::Boolean OCAdaptor2d_Line2d::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor2d_Line2d*)nativeHandle)->IsClosed());
}

 System::Boolean OCAdaptor2d_Line2d::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor2d_Line2d*)nativeHandle)->IsPeriodic());
}

 Standard_Real OCAdaptor2d_Line2d::Period()
{
  return ((Adaptor2d_Line2d*)nativeHandle)->Period();
}

OCgp_Pnt2d^ OCAdaptor2d_Line2d::Value(Standard_Real X)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((Adaptor2d_Line2d*)nativeHandle)->Value(X);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCAdaptor2d_Line2d::D0(Standard_Real X, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((Adaptor2d_Line2d*)nativeHandle)->D0(X, *((gp_Pnt2d*)P->Handle));
}

 void OCAdaptor2d_Line2d::D1(Standard_Real X, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V)
{
  ((Adaptor2d_Line2d*)nativeHandle)->D1(X, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V->Handle));
}

 void OCAdaptor2d_Line2d::D2(Standard_Real X, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  ((Adaptor2d_Line2d*)nativeHandle)->D2(X, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCAdaptor2d_Line2d::D3(Standard_Real X, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  ((Adaptor2d_Line2d*)nativeHandle)->D3(X, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCAdaptor2d_Line2d::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((Adaptor2d_Line2d*)nativeHandle)->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 Standard_Real OCAdaptor2d_Line2d::Resolution(Standard_Real R3d)
{
  return ((Adaptor2d_Line2d*)nativeHandle)->Resolution(R3d);
}

 OCGeomAbs_CurveType OCAdaptor2d_Line2d::GetType()
{
  return (OCGeomAbs_CurveType)(((Adaptor2d_Line2d*)nativeHandle)->GetType());
}

OCgp_Lin2d^ OCAdaptor2d_Line2d::Line()
{
  gp_Lin2d* tmp = new gp_Lin2d();
  *tmp = ((Adaptor2d_Line2d*)nativeHandle)->Line();
  return gcnew OCgp_Lin2d(tmp);
}

OCgp_Circ2d^ OCAdaptor2d_Line2d::Circle()
{
  gp_Circ2d* tmp = new gp_Circ2d();
  *tmp = ((Adaptor2d_Line2d*)nativeHandle)->Circle();
  return gcnew OCgp_Circ2d(tmp);
}

OCgp_Elips2d^ OCAdaptor2d_Line2d::Ellipse()
{
  gp_Elips2d* tmp = new gp_Elips2d();
  *tmp = ((Adaptor2d_Line2d*)nativeHandle)->Ellipse();
  return gcnew OCgp_Elips2d(tmp);
}

OCgp_Hypr2d^ OCAdaptor2d_Line2d::Hyperbola()
{
  gp_Hypr2d* tmp = new gp_Hypr2d();
  *tmp = ((Adaptor2d_Line2d*)nativeHandle)->Hyperbola();
  return gcnew OCgp_Hypr2d(tmp);
}

OCgp_Parab2d^ OCAdaptor2d_Line2d::Parabola()
{
  gp_Parab2d* tmp = new gp_Parab2d();
  *tmp = ((Adaptor2d_Line2d*)nativeHandle)->Parabola();
  return gcnew OCgp_Parab2d(tmp);
}

 Standard_Integer OCAdaptor2d_Line2d::Degree()
{
  return ((Adaptor2d_Line2d*)nativeHandle)->Degree();
}

 System::Boolean OCAdaptor2d_Line2d::IsRational()
{
  return OCConverter::StandardBooleanToBoolean(((Adaptor2d_Line2d*)nativeHandle)->IsRational());
}

 Standard_Integer OCAdaptor2d_Line2d::NbPoles()
{
  return ((Adaptor2d_Line2d*)nativeHandle)->NbPoles();
}

 Standard_Integer OCAdaptor2d_Line2d::NbKnots()
{
  return ((Adaptor2d_Line2d*)nativeHandle)->NbKnots();
}

OCGeom2d_BezierCurve^ OCAdaptor2d_Line2d::Bezier()
{
  Handle(Geom2d_BezierCurve) tmp = ((Adaptor2d_Line2d*)nativeHandle)->Bezier();
  return gcnew OCGeom2d_BezierCurve(&tmp);
}

OCGeom2d_BSplineCurve^ OCAdaptor2d_Line2d::BSpline()
{
  Handle(Geom2d_BSplineCurve) tmp = ((Adaptor2d_Line2d*)nativeHandle)->BSpline();
  return gcnew OCGeom2d_BSplineCurve(&tmp);
}


