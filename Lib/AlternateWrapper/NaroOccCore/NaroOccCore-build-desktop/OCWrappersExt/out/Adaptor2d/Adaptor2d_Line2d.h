// File generated by CPPExt (MPV)
//
#ifndef _Adaptor2d_Line2d_OCWrappers_HeaderFile
#define _Adaptor2d_Line2d_OCWrappers_HeaderFile

// include native header
#include <Adaptor2d_Line2d.hxx>
#include "../Converter.h"

#include "Adaptor2d_Curve2d.h"

#include "../gp/gp_Ax2d.h"
#include "Adaptor2d_Curve2d.h"
#include "../GeomAbs/GeomAbs_Shape.h"
#include "../GeomAbs/GeomAbs_CurveType.h"


namespace OCNaroWrappers
{

ref class OCgp_Pnt2d;
ref class OCgp_Dir2d;
ref class OCgp_Lin2d;
ref class OCTColStd_Array1OfReal;
ref class OCAdaptor2d_HCurve2d;
ref class OCgp_Vec2d;
ref class OCgp_Circ2d;
ref class OCgp_Elips2d;
ref class OCgp_Hypr2d;
ref class OCgp_Parab2d;
ref class OCGeom2d_BezierCurve;
ref class OCGeom2d_BSplineCurve;



public ref class OCAdaptor2d_Line2d  : public OCAdaptor2d_Curve2d {

protected:
  // dummy constructor;
  OCAdaptor2d_Line2d(OCDummy^) : OCAdaptor2d_Curve2d((OCDummy^)nullptr) {};

public:

// constructor from native
OCAdaptor2d_Line2d(Adaptor2d_Line2d* nativeHandle);

// Methods PUBLIC


OCAdaptor2d_Line2d();


OCAdaptor2d_Line2d(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ D, Standard_Real UFirst, Standard_Real ULast);


 /*instead*/  void Load(OCNaroWrappers::OCgp_Lin2d^ L) ;


 /*instead*/  void Load(OCNaroWrappers::OCgp_Lin2d^ L, Standard_Real UFirst, Standard_Real ULast) ;


virtual /*instead*/  Standard_Real FirstParameter() override;


virtual /*instead*/  Standard_Real LastParameter() override;


virtual /*instead*/  OCGeomAbs_Shape Continuity() override;

//! If necessary,  breaks the  curve in  intervals  of <br>
//!          continuity  <S>.    And  returns   the number   of <br>
//!          intervals. <br>
virtual /*instead*/  Standard_Integer NbIntervals(OCGeomAbs_Shape S) override;

//! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
virtual /*instead*/  void Intervals(OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) override;

//! Returns    a  curve equivalent   of  <me>  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>//! If <First> >= <Last> <br>
virtual /*instead*/  OCAdaptor2d_HCurve2d^ Trim(Standard_Real First, Standard_Real Last, Standard_Real Tol) override;


virtual /*instead*/  System::Boolean IsClosed() override;


virtual /*instead*/  System::Boolean IsPeriodic() override;


virtual /*instead*/  Standard_Real Period() override;


virtual /*instead*/  OCgp_Pnt2d^ Value(Standard_Real X) override;


virtual /*instead*/  void D0(Standard_Real X, OCNaroWrappers::OCgp_Pnt2d^ P) override;


virtual /*instead*/  void D1(Standard_Real X, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V) override;


virtual /*instead*/  void D2(Standard_Real X, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) override;


virtual /*instead*/  void D3(Standard_Real X, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) override;


virtual /*instead*/  OCgp_Vec2d^ DN(Standard_Real U, Standard_Integer N) override;


virtual /*instead*/  Standard_Real Resolution(Standard_Real R3d) override;


virtual /*instead*/  OCGeomAbs_CurveType GetType() override;


virtual /*instead*/  OCgp_Lin2d^ Line() override;


virtual /*instead*/  OCgp_Circ2d^ Circle() override;


virtual /*instead*/  OCgp_Elips2d^ Ellipse() override;


virtual /*instead*/  OCgp_Hypr2d^ Hyperbola() override;


virtual /*instead*/  OCgp_Parab2d^ Parabola() override;


virtual /*instead*/  Standard_Integer Degree() override;


virtual /*instead*/  System::Boolean IsRational() override;


virtual /*instead*/  Standard_Integer NbPoles() override;


virtual /*instead*/  Standard_Integer NbKnots() override;


virtual /*instead*/  OCGeom2d_BezierCurve^ Bezier() override;


virtual /*instead*/  OCGeom2d_BSplineCurve^ BSpline() override;

~OCAdaptor2d_Line2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
