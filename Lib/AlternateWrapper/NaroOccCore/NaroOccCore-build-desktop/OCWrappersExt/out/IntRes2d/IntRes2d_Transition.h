// File generated by CPPExt (MPV)
//
#ifndef _IntRes2d_Transition_OCWrappers_HeaderFile
#define _IntRes2d_Transition_OCWrappers_HeaderFile

// include native header
#include <IntRes2d_Transition.hxx>
#include "../Converter.h"


#include "IntRes2d_Position.h"
#include "IntRes2d_TypeTrans.h"
#include "IntRes2d_Situation.h"
#include "../Standard/Standard_Storable.h"


namespace OCNaroWrappers
{



//! Definition of    the  type  of   transition    near an <br>
//!          intersection point between  two curves. The transition <br>
//!          is either a "true transition", which means that one of <br>
//!          the curves goes inside or outside  the area defined by <br>
//!          the other curve  near  the intersection, or  a  "touch <br>
//!          transition" which means that the  first curve does not <br>
//!          cross  the  other one,  or an  "undecided" transition, <br>
//!          which means that the curves are superposed. <br>
public ref class OCIntRes2d_Transition  {

protected:
  IntRes2d_Transition* nativeHandle;
  OCIntRes2d_Transition(OCDummy^) {};

public:
  property IntRes2d_Transition* Handle
  {
    IntRes2d_Transition* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntRes2d_Transition(IntRes2d_Transition* nativeHandle);

// Methods PUBLIC

//! Empty constructor. <br>
OCIntRes2d_Transition();

//! Creates an IN or OUT transition. <br>
OCIntRes2d_Transition(System::Boolean Tangent, OCIntRes2d_Position Pos, OCIntRes2d_TypeTrans Type);

//! Creates a TOUCH transition. <br>
OCIntRes2d_Transition(System::Boolean Tangent, OCIntRes2d_Position Pos, OCIntRes2d_Situation Situ, System::Boolean Oppos);

//! Creates an UNDECIDED transition. <br>
OCIntRes2d_Transition(OCIntRes2d_Position Pos);

//! Sets the values of an IN or OUT transition. <br>
 /*instead*/  void SetValue(System::Boolean Tangent, OCIntRes2d_Position Pos, OCIntRes2d_TypeTrans Type) ;

//! Sets the values of a TOUCH transition. <br>
 /*instead*/  void SetValue(System::Boolean Tangent, OCIntRes2d_Position Pos, OCIntRes2d_Situation Situ, System::Boolean Oppos) ;

//! Sets the values of an UNDECIDED transition. <br>
 /*instead*/  void SetValue(OCIntRes2d_Position Pos) ;

//! Sets the value of the position. <br>
 /*instead*/  void SetPosition(OCIntRes2d_Position Pos) ;

//! Indicates if the  intersection is at the beginning <br>
//!          (IntRes2d_Head),  at the end (IntRes2d_End), or in <br>
//!          the middle (IntRes2d_Middle) of the curve. <br>
 /*instead*/  OCIntRes2d_Position PositionOnCurve() ;

//! Returns the type of transition at the intersection. <br>
//!          It may be IN or OUT or TOUCH, or UNDECIDED if the <br>
//!          two first derivatives are not enough to give <br>
//!          the tangent to one of the two curves. <br>
 /*instead*/  OCIntRes2d_TypeTrans TransitionType() ;

//! Returns TRUE when the 2 curves are tangent at the <br>
//!          intersection point. <br>
//!          Theexception DomainError is raised if the type of <br>
//!          transition is UNDECIDED. <br>
 /*instead*/  System::Boolean IsTangent() ;

//! returns a significant value if TransitionType returns <br>
//!          TOUCH. In this case, the function returns : <br>
//!          INSIDE when the curve remains inside the other one, <br>
//!          OUTSIDE when it remains outside the other one, <br>
//!          UNKNOWN when the calculus, based on the second derivatives <br>
//!          cannot give the result. <br>
//!          If TransitionType returns IN or OUT or UNDECIDED, the <br>
//!          exception DomainError is raised. <br>
 /*instead*/  OCIntRes2d_Situation Situation() ;

//! returns a  significant value   if   TransitionType <br>
//!          returns TOUCH. In this  case, the function returns <br>
//!          true   when  the  2   curves   locally define  two <br>
//!          different  parts of the  space.  If TransitionType <br>
//!          returns  IN or   OUT or UNDECIDED,  the  exception <br>
//!          DomainError is raised. <br>
 /*instead*/  System::Boolean IsOpposite() ;

~OCIntRes2d_Transition()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
