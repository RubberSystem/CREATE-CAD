// File generated by CPPExt (CPP file)
//

#include "IntRes2d_Domain.h"
#include "../Converter.h"
#include "../gp/gp_Pnt2d.h"


using namespace OCNaroWrappers;

OCIntRes2d_Domain::OCIntRes2d_Domain(IntRes2d_Domain* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntRes2d_Domain::OCIntRes2d_Domain() 
{
  nativeHandle = new IntRes2d_Domain();
}

OCIntRes2d_Domain::OCIntRes2d_Domain(OCNaroWrappers::OCgp_Pnt2d^ Pnt1, Standard_Real Par1, Standard_Real Tol1, OCNaroWrappers::OCgp_Pnt2d^ Pnt2, Standard_Real Par2, Standard_Real Tol2) 
{
  nativeHandle = new IntRes2d_Domain(*((gp_Pnt2d*)Pnt1->Handle), Par1, Tol1, *((gp_Pnt2d*)Pnt2->Handle), Par2, Tol2);
}

OCIntRes2d_Domain::OCIntRes2d_Domain(OCNaroWrappers::OCgp_Pnt2d^ Pnt, Standard_Real Par, Standard_Real Tol, System::Boolean First) 
{
  nativeHandle = new IntRes2d_Domain(*((gp_Pnt2d*)Pnt->Handle), Par, Tol, OCConverter::BooleanToStandardBoolean(First));
}

 void OCIntRes2d_Domain::SetValues(OCNaroWrappers::OCgp_Pnt2d^ Pnt1, Standard_Real Par1, Standard_Real Tol1, OCNaroWrappers::OCgp_Pnt2d^ Pnt2, Standard_Real Par2, Standard_Real Tol2)
{
  ((IntRes2d_Domain*)nativeHandle)->SetValues(*((gp_Pnt2d*)Pnt1->Handle), Par1, Tol1, *((gp_Pnt2d*)Pnt2->Handle), Par2, Tol2);
}

 void OCIntRes2d_Domain::SetValues()
{
  ((IntRes2d_Domain*)nativeHandle)->SetValues();
}

 void OCIntRes2d_Domain::SetValues(OCNaroWrappers::OCgp_Pnt2d^ Pnt, Standard_Real Par, Standard_Real Tol, System::Boolean First)
{
  ((IntRes2d_Domain*)nativeHandle)->SetValues(*((gp_Pnt2d*)Pnt->Handle), Par, Tol, OCConverter::BooleanToStandardBoolean(First));
}

 void OCIntRes2d_Domain::SetEquivalentParameters(Standard_Real zero, Standard_Real period)
{
  ((IntRes2d_Domain*)nativeHandle)->SetEquivalentParameters(zero, period);
}

 System::Boolean OCIntRes2d_Domain::HasFirstPoint()
{
  return OCConverter::StandardBooleanToBoolean(((IntRes2d_Domain*)nativeHandle)->HasFirstPoint());
}

 Standard_Real OCIntRes2d_Domain::FirstParameter()
{
  return ((IntRes2d_Domain*)nativeHandle)->FirstParameter();
}

OCgp_Pnt2d^ OCIntRes2d_Domain::FirstPoint()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((IntRes2d_Domain*)nativeHandle)->FirstPoint();
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Real OCIntRes2d_Domain::FirstTolerance()
{
  return ((IntRes2d_Domain*)nativeHandle)->FirstTolerance();
}

 System::Boolean OCIntRes2d_Domain::HasLastPoint()
{
  return OCConverter::StandardBooleanToBoolean(((IntRes2d_Domain*)nativeHandle)->HasLastPoint());
}

 Standard_Real OCIntRes2d_Domain::LastParameter()
{
  return ((IntRes2d_Domain*)nativeHandle)->LastParameter();
}

OCgp_Pnt2d^ OCIntRes2d_Domain::LastPoint()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((IntRes2d_Domain*)nativeHandle)->LastPoint();
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Real OCIntRes2d_Domain::LastTolerance()
{
  return ((IntRes2d_Domain*)nativeHandle)->LastTolerance();
}

 System::Boolean OCIntRes2d_Domain::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((IntRes2d_Domain*)nativeHandle)->IsClosed());
}

 void OCIntRes2d_Domain::EquivalentParameters(Standard_Real& zero, Standard_Real& zeroplusperiod)
{
  ((IntRes2d_Domain*)nativeHandle)->EquivalentParameters(zero, zeroplusperiod);
}


