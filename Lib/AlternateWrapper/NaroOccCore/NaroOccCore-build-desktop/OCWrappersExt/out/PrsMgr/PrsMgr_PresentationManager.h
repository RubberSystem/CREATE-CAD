// File generated by CPPExt (Transient)
//
#ifndef _PrsMgr_PresentationManager_OCWrappers_HeaderFile
#define _PrsMgr_PresentationManager_OCWrappers_HeaderFile

// include the wrapped class
#include <PrsMgr_PresentationManager.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TColStd/TColStd_ListOfTransient.h"


namespace OCNaroWrappers
{

ref class OCPrsMgr_PresentableObject;
ref class OCViewer_View;
ref class OCPrsMgr_Presentation;


//! This class represents any kind of entity able to collect <br>
//!          representations of an object, to show or erase them. <br>
//!          Example: StructureManager from Graphic3d <br>
//!                   View from Graphic2d <br>
public ref class OCPrsMgr_PresentationManager : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCPrsMgr_PresentationManager(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCPrsMgr_PresentationManager(Handle(PrsMgr_PresentationManager)* nativeHandle);

// Methods PUBLIC


OCPrsMgr_PresentationManager();

//! Displays the presentation of the object in the given <br>
//!          Presentation manager with the given mode. <br>
//!          The mode should be enumerated by the object which <br>
//!          inherits PresentableObject. <br>
 /*instead*/  void Display(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! erases the presentation of the object in the given <br>
//!          Presentation manager with the given mode. <br>
 /*instead*/  void Erase(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;


//! Clears the presentation of the presentable object <br>
//! aPresentableObject in this framework with the <br>
//! display mode aMode. <br>
virtual /*instead*/  void Clear(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! Highlights the presentation of the presentable object <br>
//! aPresentableObject in this framework with the display mode aMode. <br>
 /*instead*/  void Highlight(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! Removes highlighting from the presentation of the <br>
//! presentable object aPresentableObject in this <br>
//! framework with the display mode aMode. <br>
 /*instead*/  void Unhighlight(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;


//! Sets the display priority aNewPrior   of the <br>
//! presentable object aPresentableObject in this <br>
//! framework with the display mode aMode. <br>
 /*instead*/  void SetDisplayPriority(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer amode, Standard_Integer aNewPrior) ;


//! Returns the display priority of the presentable object <br>
//! aPresentableObject in this framework with the <br>
//! display mode aMode. <br>
 /*instead*/  Standard_Integer DisplayPriority(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer amode) ;

//! Set Z layer ID for all presentations of the object. <br>
 /*instead*/  void SetZLayer(OCNaroWrappers::OCPrsMgr_PresentableObject^ thePresentableObject, Standard_Integer theLayerId) ;

//! Get Z layer ID assigned to all presentations of the object. <br>
//! Method returns -1 value if object has no presentations and is <br>
//! impossible to get layer index. <br>
 /*instead*/  Standard_Integer GetZLayer(OCNaroWrappers::OCPrsMgr_PresentableObject^ thePresentableObject) ;

//! Returns true if the presentation of the presentable <br>
//! object aPresentableObject in this framework with the <br>
//! display mode aMode is displayed. <br>
 /*instead*/  System::Boolean IsDisplayed(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! Returns true if the presentation of the presentable <br>
//! object aPresentableObject in this framework with the <br>
//! display mode aMode is highlighted. <br>
 /*instead*/  System::Boolean IsHighlighted(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! Updates the presentation of the presentable object <br>
//! aPresentableObject in this framework with the display mode aMode. <br>
 /*instead*/  void Update(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! initializes the list of Prs to be displayed in transient mode <br>
virtual /*instead*/  void BeginDraw() ;

//! Performs an iteration of the transient objects to look <br>
//! for the presentable objects with the display mode aMode. <br>
//! Appends the presentation of the presentable object <br>
//! aPresentableObject with the mode aMode to the list <br>
//! of objects in immediate mode. <br>
 /*instead*/  void Add(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! Performs an iteration of the transient objects to look <br>
//! for the presentable objects with the display mode aMode. <br>
//! Removes the presentation of the presentable object <br>
//! aPresentableObject with the mode aMode from the <br>
//! list of objects in immediate mode. <br>
 /*instead*/  void Remove(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! Returns true if immediate (transient) mode is on. <br>
 /*instead*/  System::Boolean IsImmediateModeOn() ;

//! Returns true if there is a presentation of the <br>
//! presentable object aPresentableObject in this <br>
//! framework, aPresentableObject having the display mode aMode. <br>
 /*instead*/  System::Boolean HasPresentation(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

//! Returns the presentation Presentation of the <br>
//! presentable object aPresentableObject in this <br>
//! framework. aPresentableObject has the display mode aMode. <br>
 /*instead*/  OCPrsMgr_Presentation^ Presentation(OCNaroWrappers::OCPrsMgr_PresentableObject^ aPresentableObject, Standard_Integer aMode) ;

~OCPrsMgr_PresentationManager()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
