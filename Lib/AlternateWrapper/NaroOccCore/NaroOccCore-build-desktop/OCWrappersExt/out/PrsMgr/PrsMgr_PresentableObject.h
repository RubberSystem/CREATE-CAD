// File generated by CPPExt (Transient)
//
#ifndef _PrsMgr_PresentableObject_OCWrappers_HeaderFile
#define _PrsMgr_PresentableObject_OCWrappers_HeaderFile

// include the wrapped class
#include <PrsMgr_PresentableObject.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "PrsMgr_Presentations.h"
#include "PrsMgr_TypeOfPresentation3d.h"
#include "../TopLoc/TopLoc_Location.h"
#include "PrsMgr_Presentation3d.h"


namespace OCNaroWrappers
{

ref class OCPrsMgr_PresentationManager;
ref class OCGraphic3d_Structure;
ref class OCGraphic3d_DataStructureManager;
ref class OCGeom_Transformation;
ref class OCPrsMgr_PresentationManager2d;
ref class OCGraphic2d_GraphicObject;
ref class OCPrsMgr_PresentationManager3d;
ref class OCPrs3d_Presentation;
ref class OCPrs3d_Projector;
ref class OCPrsMgr_Presentation;
ref class OCPrsMgr_Presentations;
ref class OCgp_Pnt;
ref class OCTColStd_ListOfInteger;
ref class OCTopLoc_Location;


//! A framework to supply the Graphic2d or Graphic3d <br>
//! structure of the object to be presented. On the first <br>
//! display request, this structure is created by calling the <br>
//! appropriate algorithm and retaining this frameworkfor <br>
//! further display. <br>
//! This abstract framework is inherited in Application <br>
//! Interactive Services (AIS), notably in: <br>
//! -   AIS_InteractiveObject <br>
//! -   AIS_ConnectedInteractive <br>
//! -   AIS_MultipleConnectedInteractive <br>
//! -   AIS_Shape <br>
//!   Consequently, 3D presentation should be handled by <br>
//! the relevant daughter classes and their member <br>
//! functions in AIS. This is particularly true in the <br>
//! creation of new interactive objects. <br>
public ref class OCPrsMgr_PresentableObject : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCPrsMgr_PresentableObject(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCPrsMgr_PresentableObject(Handle(PrsMgr_PresentableObject)* nativeHandle);

// Methods PUBLIC


OCPrsMgr_PresentableObject(OCPrsMgr_TypeOfPresentation3d aTypeOfPresentation3d);

//! Returns information on whether the object accepts display in HLR mode or not. <br>
 /*instead*/  OCPrsMgr_TypeOfPresentation3d TypeOfPresentation3d() ;

//!  Sets up Transform Persistence Mode for this object. <br>
//! This function used to lock in object position, rotation and / or zooming relative to camera position. <br>
//! Object will be drawn in the origin setted by APoint parameter (except Graphic3d_TMF_TriedronPers flag <br>
//! - see description later). aFlag should be: <br>
//! -   Graphic3d_TMF_None - no persistence attributes (reset); <br>
//! -   Graphic3d_TMF_PanPers - object doesn't move; <br>
//! -   Graphic3d_TMF_ZoomPers - object doesn't resize; <br>
//! -   Graphic3d_TMF_RotatePers - object doesn't rotate; <br>
//! -   Graphic3d_TMF_FullPers - pan, zoom and rotate transform persistence; <br>
//! -   Graphic3d_TMF_TriedronPers - object behaves like trihedron; <br>
//! -   combination (Graphic3d_TMF_PanPers | Graphic3d_TMF_ZoomPers); <br>
//! -   combination (Graphic3d_TMF_PanPers | Graphic3d_TMF_RotatePers); <br>
//! -   combination (Graphic3d_TMF_ZoomPers | Graphic3d_TMF_RotatePers). <br>
//! If Graphic3d_TMF_TriedronPers persistence mode selected APoint coordinates X and Y means: <br>
//! -   X = 0.0, Y = 0.0 - center of view window; <br>
//! -   X > 0.0, Y > 0.0 - right upper corner of view window; <br>
//! -   X > 0.0, Y < 0.0 - right lower corner of view window; <br>
//! -   X < 0.0, Y > 0.0 - left  upper corner of view window; <br>
//! -   X < 0.0, Y < 0.0 - left  lower corner of view window. <br>
//! And Z coordinate defines the gap from border of view window (except center position). <br>
virtual /*instead*/  void SetTransformPersistence(Graphic3d_TransModeFlags aFlag, OCNaroWrappers::OCgp_Pnt^ APoint) ;

//!  Calls previous method  with  point  (0,0,0) <br>
 /*instead*/  void SetTransformPersistence(Graphic3d_TransModeFlags aFlag) ;

//!  Gets  Transform  Persistence Mode  for  this  object <br>
 /*instead*/  Graphic3d_TransModeFlags GetTransformPersistenceMode() ;

//!  Gets  point  of  transform  persistence for  this  object <br>
 /*instead*/  OCgp_Pnt^ GetTransformPersistencePoint() ;


 /*instead*/  void SetTypeOfPresentation(OCPrsMgr_TypeOfPresentation3d aType) ;

//! flags the Prs of mode <AMode> to be Updated. <br>
//!          the Update will be done when needed. <br>
 /*instead*/  void SetToUpdate(Standard_Integer aMode) ;

//! flags all the Presentations to be Updated. <br>
 /*instead*/  void SetToUpdate() ;

//! gives the list of modes which are flagged "to be updated". <br>
 /*instead*/  void ToBeUpdated(OCNaroWrappers::OCTColStd_ListOfInteger^ ListOfMode) ;


virtual /*instead*/  void SetLocation(OCNaroWrappers::OCTopLoc_Location^ aLoc) ;


 /*instead*/  System::Boolean HasLocation() ;


 /*instead*/  OCTopLoc_Location^ Location() ;


virtual /*instead*/  void ResetLocation() ;


virtual /*instead*/  void UpdateLocation() ;


virtual /*instead*/  void UpdateLocation(OCNaroWrappers::OCPrs3d_Presentation^ P) ;

//! Set Z layer ID and update all presentations of <br>
//! the presentable object. The layer can be set only for displayed object. <br>
//! If all object presentations are removed, the layer ID will be set to <br>
//! default value when computing presentation. The layers mechanism allows <br>
//! drawing objects in higher layers in overlay of objects in lower layers. <br>
virtual /*instead*/  void SetZLayer(OCNaroWrappers::OCPrsMgr_PresentationManager^ thePrsMgr, Standard_Integer theLayerId) ;

//! Get ID of Z layer. If no presentations of object is displayed, <br>
//! and layer ID is unavailable, the -1 value is returned. <br>
 /*instead*/  Standard_Integer GetZLayer(OCNaroWrappers::OCPrsMgr_PresentationManager^ thePrsMgr) ;

~OCPrsMgr_PresentableObject()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
