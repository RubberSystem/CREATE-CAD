// File generated by CPPExt (MPV)
//
#ifndef _IntCurveSurface_ThePolyhedronToolOfHInter_OCWrappers_HeaderFile
#define _IntCurveSurface_ThePolyhedronToolOfHInter_OCWrappers_HeaderFile

// include native header
#include <IntCurveSurface_ThePolyhedronToolOfHInter.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCIntCurveSurface_ThePolyhedronOfHInter;
ref class OCBnd_Box;
ref class OCBnd_HArray1OfBox;
ref class OCgp_Pnt;



public ref class OCIntCurveSurface_ThePolyhedronToolOfHInter  {

protected:
  IntCurveSurface_ThePolyhedronToolOfHInter* nativeHandle;
  OCIntCurveSurface_ThePolyhedronToolOfHInter(OCDummy^) {};

public:
  property IntCurveSurface_ThePolyhedronToolOfHInter* Handle
  {
    IntCurveSurface_ThePolyhedronToolOfHInter* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntCurveSurface_ThePolyhedronToolOfHInter(IntCurveSurface_ThePolyhedronToolOfHInter* nativeHandle);

// Methods PUBLIC


static /*instead*/  OCBnd_Box^ Bounding(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh) ;


static /*instead*/  OCBnd_HArray1OfBox^ ComponentsBounding(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh) ;


static /*instead*/  Standard_Real DeflectionOverEstimation(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh) ;


static /*instead*/  Standard_Integer NbTriangles(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh) ;


static /*instead*/  void Triangle(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh, Standard_Integer Index, Standard_Integer& P1, Standard_Integer& P2, Standard_Integer& P3) ;


static /*instead*/  OCgp_Pnt^ Point(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh, Standard_Integer Index) ;


static /*instead*/  Standard_Integer TriConnex(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh, Standard_Integer Triang, Standard_Integer Pivot, Standard_Integer Pedge, Standard_Integer& TriCon, Standard_Integer& OtherP) ;


static /*instead*/  System::Boolean IsOnBound(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh, Standard_Integer Index1, Standard_Integer Index2) ;


static /*instead*/  Standard_Real GetBorderDeflection(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh) ;


static /*instead*/  void Dump(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh) ;

~OCIntCurveSurface_ThePolyhedronToolOfHInter()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
