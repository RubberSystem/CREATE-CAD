// File generated by CPPExt (CPP file)
//

#include "IntCurveSurface_IntersectionPoint.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCIntCurveSurface_IntersectionPoint::OCIntCurveSurface_IntersectionPoint(IntCurveSurface_IntersectionPoint* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntCurveSurface_IntersectionPoint::OCIntCurveSurface_IntersectionPoint() 
{
  nativeHandle = new IntCurveSurface_IntersectionPoint();
}

OCIntCurveSurface_IntersectionPoint::OCIntCurveSurface_IntersectionPoint(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real USurf, Standard_Real VSurf, Standard_Real UCurv, OCIntCurveSurface_TransitionOnCurve TrCurv) 
{
  nativeHandle = new IntCurveSurface_IntersectionPoint(*((gp_Pnt*)P->Handle), USurf, VSurf, UCurv, (IntCurveSurface_TransitionOnCurve)TrCurv);
}

 void OCIntCurveSurface_IntersectionPoint::SetValues(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real USurf, Standard_Real VSurf, Standard_Real UCurv, OCIntCurveSurface_TransitionOnCurve TrCurv)
{
  ((IntCurveSurface_IntersectionPoint*)nativeHandle)->SetValues(*((gp_Pnt*)P->Handle), USurf, VSurf, UCurv, (IntCurveSurface_TransitionOnCurve)TrCurv);
}

 void OCIntCurveSurface_IntersectionPoint::Values(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real& USurf, Standard_Real& VSurf, Standard_Real& UCurv, OCIntCurveSurface_TransitionOnCurve& TrCurv)
{
  ((IntCurveSurface_IntersectionPoint*)nativeHandle)->Values(*((gp_Pnt*)P->Handle), USurf, VSurf, UCurv, (IntCurveSurface_TransitionOnCurve&)TrCurv);
}

OCgp_Pnt^ OCIntCurveSurface_IntersectionPoint::Pnt()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntCurveSurface_IntersectionPoint*)nativeHandle)->Pnt();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCIntCurveSurface_IntersectionPoint::U()
{
  return ((IntCurveSurface_IntersectionPoint*)nativeHandle)->U();
}

 Standard_Real OCIntCurveSurface_IntersectionPoint::V()
{
  return ((IntCurveSurface_IntersectionPoint*)nativeHandle)->V();
}

 Standard_Real OCIntCurveSurface_IntersectionPoint::W()
{
  return ((IntCurveSurface_IntersectionPoint*)nativeHandle)->W();
}

 OCIntCurveSurface_TransitionOnCurve OCIntCurveSurface_IntersectionPoint::Transition()
{
  return (OCIntCurveSurface_TransitionOnCurve)(((IntCurveSurface_IntersectionPoint*)nativeHandle)->Transition());
}

 void OCIntCurveSurface_IntersectionPoint::Dump()
{
  ((IntCurveSurface_IntersectionPoint*)nativeHandle)->Dump();
}


