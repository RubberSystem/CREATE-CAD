// File generated by CPPExt (CPP file)
//

#include "IntCurveSurface_ThePolyhedronToolOfHInter.h"
#include "../Converter.h"
#include "IntCurveSurface_ThePolyhedronOfHInter.h"
#include "../Bnd/Bnd_Box.h"
#include "../Bnd/Bnd_HArray1OfBox.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCIntCurveSurface_ThePolyhedronToolOfHInter::OCIntCurveSurface_ThePolyhedronToolOfHInter(IntCurveSurface_ThePolyhedronToolOfHInter* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBnd_Box^ OCIntCurveSurface_ThePolyhedronToolOfHInter::Bounding(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh)
{
  Bnd_Box* tmp = new Bnd_Box();
  *tmp = IntCurveSurface_ThePolyhedronToolOfHInter::Bounding(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle));
  return gcnew OCBnd_Box(tmp);
}

OCBnd_HArray1OfBox^ OCIntCurveSurface_ThePolyhedronToolOfHInter::ComponentsBounding(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh)
{
  Handle(Bnd_HArray1OfBox) tmp = IntCurveSurface_ThePolyhedronToolOfHInter::ComponentsBounding(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle));
  return gcnew OCBnd_HArray1OfBox(&tmp);
}

 Standard_Real OCIntCurveSurface_ThePolyhedronToolOfHInter::DeflectionOverEstimation(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh)
{
  return IntCurveSurface_ThePolyhedronToolOfHInter::DeflectionOverEstimation(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle));
}

 Standard_Integer OCIntCurveSurface_ThePolyhedronToolOfHInter::NbTriangles(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh)
{
  return IntCurveSurface_ThePolyhedronToolOfHInter::NbTriangles(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle));
}

 void OCIntCurveSurface_ThePolyhedronToolOfHInter::Triangle(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh, Standard_Integer Index, Standard_Integer& P1, Standard_Integer& P2, Standard_Integer& P3)
{
  IntCurveSurface_ThePolyhedronToolOfHInter::Triangle(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle), Index, P1, P2, P3);
}

OCgp_Pnt^ OCIntCurveSurface_ThePolyhedronToolOfHInter::Point(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh, Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = IntCurveSurface_ThePolyhedronToolOfHInter::Point(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle), Index);
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Integer OCIntCurveSurface_ThePolyhedronToolOfHInter::TriConnex(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh, Standard_Integer Triang, Standard_Integer Pivot, Standard_Integer Pedge, Standard_Integer& TriCon, Standard_Integer& OtherP)
{
  return IntCurveSurface_ThePolyhedronToolOfHInter::TriConnex(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle), Triang, Pivot, Pedge, TriCon, OtherP);
}

 System::Boolean OCIntCurveSurface_ThePolyhedronToolOfHInter::IsOnBound(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh, Standard_Integer Index1, Standard_Integer Index2)
{
  return OCConverter::StandardBooleanToBoolean(IntCurveSurface_ThePolyhedronToolOfHInter::IsOnBound(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle), Index1, Index2));
}

 Standard_Real OCIntCurveSurface_ThePolyhedronToolOfHInter::GetBorderDeflection(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh)
{
  return IntCurveSurface_ThePolyhedronToolOfHInter::GetBorderDeflection(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle));
}

 void OCIntCurveSurface_ThePolyhedronToolOfHInter::Dump(OCNaroWrappers::OCIntCurveSurface_ThePolyhedronOfHInter^ thePolyh)
{
  IntCurveSurface_ThePolyhedronToolOfHInter::Dump(*((IntCurveSurface_ThePolyhedronOfHInter*)thePolyh->Handle));
}


