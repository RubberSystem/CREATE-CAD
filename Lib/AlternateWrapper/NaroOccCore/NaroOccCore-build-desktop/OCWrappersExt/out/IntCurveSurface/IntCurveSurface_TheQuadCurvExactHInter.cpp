// File generated by CPPExt (CPP file)
//

#include "IntCurveSurface_TheQuadCurvExactHInter.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Adaptor3d/Adaptor3d_HSurfaceTool.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "IntCurveSurface_TheHCurveTool.h"
#include "IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter.h"


using namespace OCNaroWrappers;

OCIntCurveSurface_TheQuadCurvExactHInter::OCIntCurveSurface_TheQuadCurvExactHInter(IntCurveSurface_TheQuadCurvExactHInter* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntCurveSurface_TheQuadCurvExactHInter::OCIntCurveSurface_TheQuadCurvExactHInter(OCNaroWrappers::OCAdaptor3d_HSurface^ S, OCNaroWrappers::OCAdaptor3d_HCurve^ C) 
{
  nativeHandle = new IntCurveSurface_TheQuadCurvExactHInter(*((Handle_Adaptor3d_HSurface*)S->Handle), *((Handle_Adaptor3d_HCurve*)C->Handle));
}

 System::Boolean OCIntCurveSurface_TheQuadCurvExactHInter::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((IntCurveSurface_TheQuadCurvExactHInter*)nativeHandle)->IsDone());
}

 Standard_Integer OCIntCurveSurface_TheQuadCurvExactHInter::NbRoots()
{
  return ((IntCurveSurface_TheQuadCurvExactHInter*)nativeHandle)->NbRoots();
}

 Standard_Real OCIntCurveSurface_TheQuadCurvExactHInter::Root(Standard_Integer Index)
{
  return ((IntCurveSurface_TheQuadCurvExactHInter*)nativeHandle)->Root(Index);
}

 Standard_Integer OCIntCurveSurface_TheQuadCurvExactHInter::NbIntervals()
{
  return ((IntCurveSurface_TheQuadCurvExactHInter*)nativeHandle)->NbIntervals();
}

 void OCIntCurveSurface_TheQuadCurvExactHInter::Intervals(Standard_Integer Index, Standard_Real& U1, Standard_Real& U2)
{
  ((IntCurveSurface_TheQuadCurvExactHInter*)nativeHandle)->Intervals(Index, U1, U2);
}


