// File generated by CPPExt (MPV)
//
#ifndef _IntCurveSurface_TheHCurveTool_OCWrappers_HeaderFile
#define _IntCurveSurface_TheHCurveTool_OCWrappers_HeaderFile

// include native header
#include <IntCurveSurface_TheHCurveTool.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_Shape.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../GeomAbs/GeomAbs_CurveType.h"
#include "../gp/gp_Lin.h"
#include "../gp/gp_Circ.h"
#include "../gp/gp_Elips.h"
#include "../gp/gp_Hypr.h"
#include "../gp/gp_Parab.h"


namespace OCNaroWrappers
{

ref class OCAdaptor3d_HCurve;
ref class OCTColStd_Array1OfReal;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCGeom_BezierCurve;
ref class OCGeom_BSplineCurve;
ref class OCTColStd_HArray1OfReal;



public ref class OCIntCurveSurface_TheHCurveTool  {

protected:
  IntCurveSurface_TheHCurveTool* nativeHandle;
  OCIntCurveSurface_TheHCurveTool(OCDummy^) {};

public:
  property IntCurveSurface_TheHCurveTool* Handle
  {
    IntCurveSurface_TheHCurveTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntCurveSurface_TheHCurveTool(IntCurveSurface_TheHCurveTool* nativeHandle);

// Methods PUBLIC


static /*instead*/  Standard_Real FirstParameter(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  Standard_Real LastParameter(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCGeomAbs_Shape Continuity(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  Standard_Integer NbIntervals(OCNaroWrappers::OCAdaptor3d_HCurve^ C, OCGeomAbs_Shape S) ;


static /*instead*/  void Intervals(OCNaroWrappers::OCAdaptor3d_HCurve^ C, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S) ;


static /*instead*/  System::Boolean IsClosed(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  System::Boolean IsPeriodic(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  Standard_Real Period(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCgp_Pnt^ Value(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U) ;


static /*instead*/  void D0(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P) ;


static /*instead*/  void D1(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V) ;


static /*instead*/  void D2(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2) ;


static /*instead*/  void D3(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3) ;


static /*instead*/  OCgp_Vec^ DN(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, Standard_Integer N) ;


static /*instead*/  Standard_Real Resolution(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real R3d) ;


static /*instead*/  OCGeomAbs_CurveType GetType(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCgp_Lin^ Line(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCgp_Circ^ Circle(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCgp_Elips^ Ellipse(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCgp_Hypr^ Hyperbola(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCgp_Parab^ Parabola(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCGeom_BezierCurve^ Bezier(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  OCGeom_BSplineCurve^ BSpline(OCNaroWrappers::OCAdaptor3d_HCurve^ C) ;


static /*instead*/  Standard_Integer NbSamples(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U0, Standard_Real U1) ;


static /*instead*/  void SamplePars(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U0, Standard_Real U1, Standard_Real Defl, Standard_Integer NbMin, OCNaroWrappers::OCTColStd_HArray1OfReal^ Pars) ;

~OCIntCurveSurface_TheHCurveTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
