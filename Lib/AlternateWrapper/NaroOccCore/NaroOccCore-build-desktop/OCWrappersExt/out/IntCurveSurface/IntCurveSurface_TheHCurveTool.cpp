// File generated by CPPExt (CPP file)
//

#include "IntCurveSurface_TheHCurveTool.h"
#include "../Converter.h"
#include "../Adaptor3d/Adaptor3d_HCurve.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../Geom/Geom_BezierCurve.h"
#include "../Geom/Geom_BSplineCurve.h"
#include "../TColStd/TColStd_HArray1OfReal.h"


using namespace OCNaroWrappers;

OCIntCurveSurface_TheHCurveTool::OCIntCurveSurface_TheHCurveTool(IntCurveSurface_TheHCurveTool* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Real OCIntCurveSurface_TheHCurveTool::FirstParameter(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return IntCurveSurface_TheHCurveTool::FirstParameter(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

 Standard_Real OCIntCurveSurface_TheHCurveTool::LastParameter(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return IntCurveSurface_TheHCurveTool::LastParameter(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

 OCGeomAbs_Shape OCIntCurveSurface_TheHCurveTool::Continuity(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return (OCGeomAbs_Shape)(IntCurveSurface_TheHCurveTool::Continuity(*((Handle_Adaptor3d_HCurve*)C->Handle)));
}

 Standard_Integer OCIntCurveSurface_TheHCurveTool::NbIntervals(OCNaroWrappers::OCAdaptor3d_HCurve^ C, OCGeomAbs_Shape S)
{
  return IntCurveSurface_TheHCurveTool::NbIntervals(*((Handle_Adaptor3d_HCurve*)C->Handle), (GeomAbs_Shape)S);
}

 void OCIntCurveSurface_TheHCurveTool::Intervals(OCNaroWrappers::OCAdaptor3d_HCurve^ C, OCNaroWrappers::OCTColStd_Array1OfReal^ T, OCGeomAbs_Shape S)
{
  IntCurveSurface_TheHCurveTool::Intervals(*((Handle_Adaptor3d_HCurve*)C->Handle), *((TColStd_Array1OfReal*)T->Handle), (GeomAbs_Shape)S);
}

 System::Boolean OCIntCurveSurface_TheHCurveTool::IsClosed(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return OCConverter::StandardBooleanToBoolean(IntCurveSurface_TheHCurveTool::IsClosed(*((Handle_Adaptor3d_HCurve*)C->Handle)));
}

 System::Boolean OCIntCurveSurface_TheHCurveTool::IsPeriodic(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return OCConverter::StandardBooleanToBoolean(IntCurveSurface_TheHCurveTool::IsPeriodic(*((Handle_Adaptor3d_HCurve*)C->Handle)));
}

 Standard_Real OCIntCurveSurface_TheHCurveTool::Period(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return IntCurveSurface_TheHCurveTool::Period(*((Handle_Adaptor3d_HCurve*)C->Handle));
}

OCgp_Pnt^ OCIntCurveSurface_TheHCurveTool::Value(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = IntCurveSurface_TheHCurveTool::Value(*((Handle_Adaptor3d_HCurve*)C->Handle), U);
  return gcnew OCgp_Pnt(tmp);
}

 void OCIntCurveSurface_TheHCurveTool::D0(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P)
{
  IntCurveSurface_TheHCurveTool::D0(*((Handle_Adaptor3d_HCurve*)C->Handle), U, *((gp_Pnt*)P->Handle));
}

 void OCIntCurveSurface_TheHCurveTool::D1(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V)
{
  IntCurveSurface_TheHCurveTool::D1(*((Handle_Adaptor3d_HCurve*)C->Handle), U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V->Handle));
}

 void OCIntCurveSurface_TheHCurveTool::D2(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2)
{
  IntCurveSurface_TheHCurveTool::D2(*((Handle_Adaptor3d_HCurve*)C->Handle), U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle));
}

 void OCIntCurveSurface_TheHCurveTool::D3(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ V1, OCNaroWrappers::OCgp_Vec^ V2, OCNaroWrappers::OCgp_Vec^ V3)
{
  IntCurveSurface_TheHCurveTool::D3(*((Handle_Adaptor3d_HCurve*)C->Handle), U, *((gp_Pnt*)P->Handle), *((gp_Vec*)V1->Handle), *((gp_Vec*)V2->Handle), *((gp_Vec*)V3->Handle));
}

OCgp_Vec^ OCIntCurveSurface_TheHCurveTool::DN(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U, Standard_Integer N)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = IntCurveSurface_TheHCurveTool::DN(*((Handle_Adaptor3d_HCurve*)C->Handle), U, N);
  return gcnew OCgp_Vec(tmp);
}

 Standard_Real OCIntCurveSurface_TheHCurveTool::Resolution(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real R3d)
{
  return IntCurveSurface_TheHCurveTool::Resolution(*((Handle_Adaptor3d_HCurve*)C->Handle), R3d);
}

 OCGeomAbs_CurveType OCIntCurveSurface_TheHCurveTool::GetType(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  return (OCGeomAbs_CurveType)(IntCurveSurface_TheHCurveTool::GetType(*((Handle_Adaptor3d_HCurve*)C->Handle)));
}

OCgp_Lin^ OCIntCurveSurface_TheHCurveTool::Line(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Lin* tmp = new gp_Lin();
  *tmp = IntCurveSurface_TheHCurveTool::Line(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Lin(tmp);
}

OCgp_Circ^ OCIntCurveSurface_TheHCurveTool::Circle(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Circ* tmp = new gp_Circ();
  *tmp = IntCurveSurface_TheHCurveTool::Circle(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Circ(tmp);
}

OCgp_Elips^ OCIntCurveSurface_TheHCurveTool::Ellipse(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Elips* tmp = new gp_Elips();
  *tmp = IntCurveSurface_TheHCurveTool::Ellipse(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Elips(tmp);
}

OCgp_Hypr^ OCIntCurveSurface_TheHCurveTool::Hyperbola(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Hypr* tmp = new gp_Hypr();
  *tmp = IntCurveSurface_TheHCurveTool::Hyperbola(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Hypr(tmp);
}

OCgp_Parab^ OCIntCurveSurface_TheHCurveTool::Parabola(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  gp_Parab* tmp = new gp_Parab();
  *tmp = IntCurveSurface_TheHCurveTool::Parabola(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCgp_Parab(tmp);
}

OCGeom_BezierCurve^ OCIntCurveSurface_TheHCurveTool::Bezier(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  Handle(Geom_BezierCurve) tmp = IntCurveSurface_TheHCurveTool::Bezier(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCGeom_BezierCurve(&tmp);
}

OCGeom_BSplineCurve^ OCIntCurveSurface_TheHCurveTool::BSpline(OCNaroWrappers::OCAdaptor3d_HCurve^ C)
{
  Handle(Geom_BSplineCurve) tmp = IntCurveSurface_TheHCurveTool::BSpline(*((Handle_Adaptor3d_HCurve*)C->Handle));
  return gcnew OCGeom_BSplineCurve(&tmp);
}

 Standard_Integer OCIntCurveSurface_TheHCurveTool::NbSamples(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U0, Standard_Real U1)
{
  return IntCurveSurface_TheHCurveTool::NbSamples(*((Handle_Adaptor3d_HCurve*)C->Handle), U0, U1);
}

 void OCIntCurveSurface_TheHCurveTool::SamplePars(OCNaroWrappers::OCAdaptor3d_HCurve^ C, Standard_Real U0, Standard_Real U1, Standard_Real Defl, Standard_Integer NbMin, OCNaroWrappers::OCTColStd_HArray1OfReal^ Pars)
{
  IntCurveSurface_TheHCurveTool::SamplePars(*((Handle_Adaptor3d_HCurve*)C->Handle), U0, U1, Defl, NbMin, *((Handle_TColStd_HArray1OfReal*)Pars->Handle));
}


