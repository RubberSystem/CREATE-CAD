// File generated by CPPExt (CPP file)
//

#include "IntSurf_Quadric.h"
#include "../Converter.h"
#include "../gp/gp_Pln.h"
#include "../gp/gp_Cylinder.h"
#include "../gp/gp_Sphere.h"
#include "../gp/gp_Cone.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"


using namespace OCNaroWrappers;

OCIntSurf_Quadric::OCIntSurf_Quadric(IntSurf_Quadric* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntSurf_Quadric::OCIntSurf_Quadric() 
{
  nativeHandle = new IntSurf_Quadric();
}

OCIntSurf_Quadric::OCIntSurf_Quadric(OCNaroWrappers::OCgp_Pln^ P) 
{
  nativeHandle = new IntSurf_Quadric(*((gp_Pln*)P->Handle));
}

OCIntSurf_Quadric::OCIntSurf_Quadric(OCNaroWrappers::OCgp_Cylinder^ C) 
{
  nativeHandle = new IntSurf_Quadric(*((gp_Cylinder*)C->Handle));
}

OCIntSurf_Quadric::OCIntSurf_Quadric(OCNaroWrappers::OCgp_Sphere^ S) 
{
  nativeHandle = new IntSurf_Quadric(*((gp_Sphere*)S->Handle));
}

OCIntSurf_Quadric::OCIntSurf_Quadric(OCNaroWrappers::OCgp_Cone^ C) 
{
  nativeHandle = new IntSurf_Quadric(*((gp_Cone*)C->Handle));
}

 void OCIntSurf_Quadric::SetValue(OCNaroWrappers::OCgp_Pln^ P)
{
  ((IntSurf_Quadric*)nativeHandle)->SetValue(*((gp_Pln*)P->Handle));
}

 void OCIntSurf_Quadric::SetValue(OCNaroWrappers::OCgp_Cylinder^ C)
{
  ((IntSurf_Quadric*)nativeHandle)->SetValue(*((gp_Cylinder*)C->Handle));
}

 void OCIntSurf_Quadric::SetValue(OCNaroWrappers::OCgp_Sphere^ S)
{
  ((IntSurf_Quadric*)nativeHandle)->SetValue(*((gp_Sphere*)S->Handle));
}

 void OCIntSurf_Quadric::SetValue(OCNaroWrappers::OCgp_Cone^ C)
{
  ((IntSurf_Quadric*)nativeHandle)->SetValue(*((gp_Cone*)C->Handle));
}

 Standard_Real OCIntSurf_Quadric::Distance(OCNaroWrappers::OCgp_Pnt^ P)
{
  return ((IntSurf_Quadric*)nativeHandle)->Distance(*((gp_Pnt*)P->Handle));
}

OCgp_Vec^ OCIntSurf_Quadric::Gradient(OCNaroWrappers::OCgp_Pnt^ P)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->Gradient(*((gp_Pnt*)P->Handle));
  return gcnew OCgp_Vec(tmp);
}

 void OCIntSurf_Quadric::ValAndGrad(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real& Dist, OCNaroWrappers::OCgp_Vec^ Grad)
{
  ((IntSurf_Quadric*)nativeHandle)->ValAndGrad(*((gp_Pnt*)P->Handle), Dist, *((gp_Vec*)Grad->Handle));
}

 OCGeomAbs_SurfaceType OCIntSurf_Quadric::TypeQuadric()
{
  return (OCGeomAbs_SurfaceType)(((IntSurf_Quadric*)nativeHandle)->TypeQuadric());
}

OCgp_Pln^ OCIntSurf_Quadric::Plane()
{
  gp_Pln* tmp = new gp_Pln();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->Plane();
  return gcnew OCgp_Pln(tmp);
}

OCgp_Sphere^ OCIntSurf_Quadric::Sphere()
{
  gp_Sphere* tmp = new gp_Sphere();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->Sphere();
  return gcnew OCgp_Sphere(tmp);
}

OCgp_Cylinder^ OCIntSurf_Quadric::Cylinder()
{
  gp_Cylinder* tmp = new gp_Cylinder();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->Cylinder();
  return gcnew OCgp_Cylinder(tmp);
}

OCgp_Cone^ OCIntSurf_Quadric::Cone()
{
  gp_Cone* tmp = new gp_Cone();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->Cone();
  return gcnew OCgp_Cone(tmp);
}

OCgp_Pnt^ OCIntSurf_Quadric::Value(Standard_Real U, Standard_Real V)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->Value(U, V);
  return gcnew OCgp_Pnt(tmp);
}

 void OCIntSurf_Quadric::D1(Standard_Real U, Standard_Real V, OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Vec^ D1U, OCNaroWrappers::OCgp_Vec^ D1V)
{
  ((IntSurf_Quadric*)nativeHandle)->D1(U, V, *((gp_Pnt*)P->Handle), *((gp_Vec*)D1U->Handle), *((gp_Vec*)D1V->Handle));
}

OCgp_Vec^ OCIntSurf_Quadric::DN(Standard_Real U, Standard_Real V, Standard_Integer Nu, Standard_Integer Nv)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->DN(U, V, Nu, Nv);
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCIntSurf_Quadric::Normale(Standard_Real U, Standard_Real V)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->Normale(U, V);
  return gcnew OCgp_Vec(tmp);
}

 void OCIntSurf_Quadric::Parameters(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real& U, Standard_Real& V)
{
  ((IntSurf_Quadric*)nativeHandle)->Parameters(*((gp_Pnt*)P->Handle), U, V);
}

OCgp_Vec^ OCIntSurf_Quadric::Normale(OCNaroWrappers::OCgp_Pnt^ P)
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((IntSurf_Quadric*)nativeHandle)->Normale(*((gp_Pnt*)P->Handle));
  return gcnew OCgp_Vec(tmp);
}


