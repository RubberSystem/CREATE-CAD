// File generated by CPPExt (MPV)
//
#ifndef _IntSurf_Transition_OCWrappers_HeaderFile
#define _IntSurf_Transition_OCWrappers_HeaderFile

// include native header
#include <IntSurf_Transition.hxx>
#include "../Converter.h"


#include "IntSurf_TypeTrans.h"
#include "IntSurf_Situation.h"


namespace OCNaroWrappers
{



//! Definition of the transition at the intersection <br>
//!          between an intersection line and a restriction curve <br>
//!          on a surface. <br>
public ref class OCIntSurf_Transition  {

protected:
  IntSurf_Transition* nativeHandle;
  OCIntSurf_Transition(OCDummy^) {};

public:
  property IntSurf_Transition* Handle
  {
    IntSurf_Transition* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntSurf_Transition(IntSurf_Transition* nativeHandle);

// Methods PUBLIC

//! Empty constructor. Creates an UNDECIDED transition. <br>
OCIntSurf_Transition();

//! Create a IN or OUT transition <br>
OCIntSurf_Transition(System::Boolean Tangent, OCIntSurf_TypeTrans Type);

//! Create a TOUCH transition. <br>
OCIntSurf_Transition(System::Boolean Tangent, OCIntSurf_Situation Situ, System::Boolean Oppos);

//! Set the values of an IN or OUT transition. <br>
 /*instead*/  void SetValue(System::Boolean Tangent, OCIntSurf_TypeTrans Type) ;

//! Set the values of a TOUCH transition. <br>
 /*instead*/  void SetValue(System::Boolean Tangent, OCIntSurf_Situation Situ, System::Boolean Oppos) ;

//! Set the values of an UNDECIDED transition. <br>
 /*instead*/  void SetValue() ;

//! Returns the type of Transition (in/out/touch/undecided) <br>
//!          for the arc given by value. This the transition of <br>
//!          the intersection line compared to the Arc of restriction, <br>
//!          i-e when the function returns INSIDE for example, it <br>
//!          means that the intersection line goes inside the <br>
//!          part of plane limited by the arc of restriction. <br>
 /*instead*/  OCIntSurf_TypeTrans TransitionType() ;

//! Returns TRUE if the point is tangent to the arc <br>
//!          given by Value. <br>
//!          An exception is raised if TransitionType returns UNDECIDED. <br>
 /*instead*/  System::Boolean IsTangent() ;

//! Returns a significant value if TransitionType returns <br>
//!          TOUCH. In this case, the function returns : <br>
//!          INSIDE when the intersection line remains inside the Arc, <br>
//!          OUTSIDE when it remains outside the Arc, <br>
//!          UNKNOWN when the calsulus cannot give results. <br>
//!          If TransitionType returns IN, or OUT, or UNDECIDED, a <br>
//!          exception is raised. <br>
 /*instead*/  OCIntSurf_Situation Situation() ;

//! returns a significant value if TransitionType returns <br>
//!          TOUCH. <br>
//!          In this case, the function returns true when <br>
//!          the 2 curves locally define two different parts of the <br>
//!          space. <br>
//!          If TransitionType returns IN or OUT or UNDECIDED, an <br>
//!          exception is raised. <br>
 /*instead*/  System::Boolean IsOpposite() ;

~OCIntSurf_Transition()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
