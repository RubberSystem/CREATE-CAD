// File generated by CPPExt (MPV)
//
#ifndef _IntSurf_PathPoint_OCWrappers_HeaderFile
#define _IntSurf_PathPoint_OCWrappers_HeaderFile

// include native header
#include <IntSurf_PathPoint.hxx>
#include "../Converter.h"


#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Dir2d.h"


namespace OCNaroWrappers
{

ref class OCTColgp_HSequenceOfXY;
ref class OCgp_Pnt;
ref class OCgp_Vec;
ref class OCgp_Dir2d;



public ref class OCIntSurf_PathPoint  {

protected:
  IntSurf_PathPoint* nativeHandle;
  OCIntSurf_PathPoint(OCDummy^) {};

public:
  property IntSurf_PathPoint* Handle
  {
    IntSurf_PathPoint* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntSurf_PathPoint(IntSurf_PathPoint* nativeHandle);

// Methods PUBLIC


OCIntSurf_PathPoint();


OCIntSurf_PathPoint(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V);


 /*instead*/  void SetValue(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V) ;


 /*instead*/  void AddUV(Standard_Real U, Standard_Real V) ;


 /*instead*/  void SetDirections(OCNaroWrappers::OCgp_Vec^ V, OCNaroWrappers::OCgp_Dir2d^ D) ;


 /*instead*/  void SetTangency(System::Boolean Tang) ;


 /*instead*/  void SetPassing(System::Boolean Pass) ;


 /*instead*/  OCgp_Pnt^ Value() ;


 /*instead*/  void Value2d(Standard_Real& U, Standard_Real& V) ;


 /*instead*/  System::Boolean IsPassingPnt() ;


 /*instead*/  System::Boolean IsTangent() ;


 /*instead*/  OCgp_Vec^ Direction3d() ;


 /*instead*/  OCgp_Dir2d^ Direction2d() ;


 /*instead*/  Standard_Integer Multiplicity() ;


 /*instead*/  void Parameters(Standard_Integer Index, Standard_Real& U, Standard_Real& V) ;

~OCIntSurf_PathPoint()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
