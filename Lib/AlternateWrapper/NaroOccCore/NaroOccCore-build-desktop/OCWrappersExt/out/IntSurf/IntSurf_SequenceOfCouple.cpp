// File generated by CPPExt (CPP file)
//

#include "IntSurf_SequenceOfCouple.h"
#include "../Converter.h"
#include "IntSurf_Couple.h"
#include "IntSurf_SequenceNodeOfSequenceOfCouple.h"


using namespace OCNaroWrappers;

OCIntSurf_SequenceOfCouple::OCIntSurf_SequenceOfCouple(IntSurf_SequenceOfCouple* nativeHandle) : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCIntSurf_SequenceOfCouple::OCIntSurf_SequenceOfCouple() : OCTCollection_BaseSequence((OCDummy^)nullptr)

{
  nativeHandle = new IntSurf_SequenceOfCouple();
}

OCIntSurf_SequenceOfCouple^ OCIntSurf_SequenceOfCouple::Assign(OCNaroWrappers::OCIntSurf_SequenceOfCouple^ Other)
{
  IntSurf_SequenceOfCouple* tmp = new IntSurf_SequenceOfCouple();
  *tmp = ((IntSurf_SequenceOfCouple*)nativeHandle)->Assign(*((IntSurf_SequenceOfCouple*)Other->Handle));
  return gcnew OCIntSurf_SequenceOfCouple(tmp);
}

 void OCIntSurf_SequenceOfCouple::Append(OCNaroWrappers::OCIntSurf_Couple^ T)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->Append(*((IntSurf_Couple*)T->Handle));
}

 void OCIntSurf_SequenceOfCouple::Append(OCNaroWrappers::OCIntSurf_SequenceOfCouple^ S)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->Append(*((IntSurf_SequenceOfCouple*)S->Handle));
}

 void OCIntSurf_SequenceOfCouple::Prepend(OCNaroWrappers::OCIntSurf_Couple^ T)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->Prepend(*((IntSurf_Couple*)T->Handle));
}

 void OCIntSurf_SequenceOfCouple::Prepend(OCNaroWrappers::OCIntSurf_SequenceOfCouple^ S)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->Prepend(*((IntSurf_SequenceOfCouple*)S->Handle));
}

 void OCIntSurf_SequenceOfCouple::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCIntSurf_Couple^ T)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->InsertBefore(Index, *((IntSurf_Couple*)T->Handle));
}

 void OCIntSurf_SequenceOfCouple::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCIntSurf_SequenceOfCouple^ S)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->InsertBefore(Index, *((IntSurf_SequenceOfCouple*)S->Handle));
}

 void OCIntSurf_SequenceOfCouple::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCIntSurf_Couple^ T)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->InsertAfter(Index, *((IntSurf_Couple*)T->Handle));
}

 void OCIntSurf_SequenceOfCouple::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCIntSurf_SequenceOfCouple^ S)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->InsertAfter(Index, *((IntSurf_SequenceOfCouple*)S->Handle));
}

OCIntSurf_Couple^ OCIntSurf_SequenceOfCouple::First()
{
  IntSurf_Couple* tmp = new IntSurf_Couple();
  *tmp = ((IntSurf_SequenceOfCouple*)nativeHandle)->First();
  return gcnew OCIntSurf_Couple(tmp);
}

OCIntSurf_Couple^ OCIntSurf_SequenceOfCouple::Last()
{
  IntSurf_Couple* tmp = new IntSurf_Couple();
  *tmp = ((IntSurf_SequenceOfCouple*)nativeHandle)->Last();
  return gcnew OCIntSurf_Couple(tmp);
}

 void OCIntSurf_SequenceOfCouple::Split(Standard_Integer Index, OCNaroWrappers::OCIntSurf_SequenceOfCouple^ Sub)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->Split(Index, *((IntSurf_SequenceOfCouple*)Sub->Handle));
}

OCIntSurf_Couple^ OCIntSurf_SequenceOfCouple::Value(Standard_Integer Index)
{
  IntSurf_Couple* tmp = new IntSurf_Couple();
  *tmp = ((IntSurf_SequenceOfCouple*)nativeHandle)->Value(Index);
  return gcnew OCIntSurf_Couple(tmp);
}

 void OCIntSurf_SequenceOfCouple::SetValue(Standard_Integer Index, OCNaroWrappers::OCIntSurf_Couple^ I)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->SetValue(Index, *((IntSurf_Couple*)I->Handle));
}

OCIntSurf_Couple^ OCIntSurf_SequenceOfCouple::ChangeValue(Standard_Integer Index)
{
  IntSurf_Couple* tmp = new IntSurf_Couple();
  *tmp = ((IntSurf_SequenceOfCouple*)nativeHandle)->ChangeValue(Index);
  return gcnew OCIntSurf_Couple(tmp);
}

 void OCIntSurf_SequenceOfCouple::Remove(Standard_Integer Index)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->Remove(Index);
}

 void OCIntSurf_SequenceOfCouple::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  ((IntSurf_SequenceOfCouple*)nativeHandle)->Remove(FromIndex, ToIndex);
}


