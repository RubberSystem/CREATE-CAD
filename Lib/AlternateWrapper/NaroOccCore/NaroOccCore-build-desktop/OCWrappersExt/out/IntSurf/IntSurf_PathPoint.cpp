// File generated by CPPExt (CPP file)
//

#include "IntSurf_PathPoint.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HSequenceOfXY.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Dir2d.h"


using namespace OCNaroWrappers;

OCIntSurf_PathPoint::OCIntSurf_PathPoint(IntSurf_PathPoint* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIntSurf_PathPoint::OCIntSurf_PathPoint() 
{
  nativeHandle = new IntSurf_PathPoint();
}

OCIntSurf_PathPoint::OCIntSurf_PathPoint(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V) 
{
  nativeHandle = new IntSurf_PathPoint(*((gp_Pnt*)P->Handle), U, V);
}

 void OCIntSurf_PathPoint::SetValue(OCNaroWrappers::OCgp_Pnt^ P, Standard_Real U, Standard_Real V)
{
  ((IntSurf_PathPoint*)nativeHandle)->SetValue(*((gp_Pnt*)P->Handle), U, V);
}

 void OCIntSurf_PathPoint::AddUV(Standard_Real U, Standard_Real V)
{
  ((IntSurf_PathPoint*)nativeHandle)->AddUV(U, V);
}

 void OCIntSurf_PathPoint::SetDirections(OCNaroWrappers::OCgp_Vec^ V, OCNaroWrappers::OCgp_Dir2d^ D)
{
  ((IntSurf_PathPoint*)nativeHandle)->SetDirections(*((gp_Vec*)V->Handle), *((gp_Dir2d*)D->Handle));
}

 void OCIntSurf_PathPoint::SetTangency(System::Boolean Tang)
{
  ((IntSurf_PathPoint*)nativeHandle)->SetTangency(OCConverter::BooleanToStandardBoolean(Tang));
}

 void OCIntSurf_PathPoint::SetPassing(System::Boolean Pass)
{
  ((IntSurf_PathPoint*)nativeHandle)->SetPassing(OCConverter::BooleanToStandardBoolean(Pass));
}

OCgp_Pnt^ OCIntSurf_PathPoint::Value()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((IntSurf_PathPoint*)nativeHandle)->Value();
  return gcnew OCgp_Pnt(tmp);
}

 void OCIntSurf_PathPoint::Value2d(Standard_Real& U, Standard_Real& V)
{
  ((IntSurf_PathPoint*)nativeHandle)->Value2d(U, V);
}

 System::Boolean OCIntSurf_PathPoint::IsPassingPnt()
{
  return OCConverter::StandardBooleanToBoolean(((IntSurf_PathPoint*)nativeHandle)->IsPassingPnt());
}

 System::Boolean OCIntSurf_PathPoint::IsTangent()
{
  return OCConverter::StandardBooleanToBoolean(((IntSurf_PathPoint*)nativeHandle)->IsTangent());
}

OCgp_Vec^ OCIntSurf_PathPoint::Direction3d()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((IntSurf_PathPoint*)nativeHandle)->Direction3d();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Dir2d^ OCIntSurf_PathPoint::Direction2d()
{
  gp_Dir2d* tmp = new gp_Dir2d();
  *tmp = ((IntSurf_PathPoint*)nativeHandle)->Direction2d();
  return gcnew OCgp_Dir2d(tmp);
}

 Standard_Integer OCIntSurf_PathPoint::Multiplicity()
{
  return ((IntSurf_PathPoint*)nativeHandle)->Multiplicity();
}

 void OCIntSurf_PathPoint::Parameters(Standard_Integer Index, Standard_Real& U, Standard_Real& V)
{
  ((IntSurf_PathPoint*)nativeHandle)->Parameters(Index, U, V);
}


