// File generated by CPPExt (MPV)
//
#ifndef _GeomAPI_PointsToBSplineSurface_OCWrappers_HeaderFile
#define _GeomAPI_PointsToBSplineSurface_OCWrappers_HeaderFile

// include native header
#include <GeomAPI_PointsToBSplineSurface.hxx>
#include "../Converter.h"


#include "../GeomAbs/GeomAbs_Shape.h"
#include "../Approx/Approx_ParametrizationType.h"


namespace OCNaroWrappers
{

ref class OCGeom_BSplineSurface;
ref class OCTColgp_Array2OfPnt;
ref class OCTColStd_Array2OfReal;


//! This class is used to approximate or interpolate <br>
//!          a BSplineSurface passing through an  Array2 of <br>
//!          points, with a given continuity. <br>
//! Describes functions for building a BSpline <br>
//! surface which approximates or interpolates a set of points. <br>
//! A PointsToBSplineSurface object provides a framework for: <br>
//! -   defining the data of the BSpline surface to be built, <br>
//! -   implementing the approximation algorithm <br>
//!   or the interpolation algorithm, and consulting the results. <br>
public ref class OCGeomAPI_PointsToBSplineSurface  {

protected:
  GeomAPI_PointsToBSplineSurface* nativeHandle;
  OCGeomAPI_PointsToBSplineSurface(OCDummy^) {};

public:
  property GeomAPI_PointsToBSplineSurface* Handle
  {
    GeomAPI_PointsToBSplineSurface* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeomAPI_PointsToBSplineSurface(GeomAPI_PointsToBSplineSurface* nativeHandle);

// Methods PUBLIC

//! Constructs an empty algorithm for <br>
//! approximation or interpolation of a surface. <br>
//! Use: <br>
//! -   an Init function to define and build the <br>
//!   BSpline surface by approximation, or <br>
//! -   an Interpolate function to define and build <br>
//!   the BSpline surface by interpolation. <br>
OCGeomAPI_PointsToBSplineSurface();

//! Approximates  a BSpline  Surface passing  through  an <br>
//!          array of  Points.  The resulting BSpline will  have <br>
//!          the following properties: <br>
//!          1- his degree will be in the range [Degmin,Degmax] <br>
//!          2- his  continuity will be  at  least <Continuity> <br>
//!          3- the distance from the point <Points> to the <br>
//!             BSpline will be lower to Tol3D <br>
OCGeomAPI_PointsToBSplineSurface(OCNaroWrappers::OCTColgp_Array2OfPnt^ Points, Standard_Integer DegMin, Standard_Integer DegMax, OCGeomAbs_Shape Continuity, Standard_Real Tol3D);

//! Approximates  a BSpline  Surface passing  through  an <br>
//!          array of  Points.  The resulting BSpline will  have <br>
//!          the following properties: <br>
//!          1- his degree will be in the range [Degmin,Degmax] <br>
//!          2- his  continuity will be  at  least <Continuity> <br>
//!          3- the distance from the point <Points> to the <br>
//!             BSpline will be lower to Tol3D <br>
OCGeomAPI_PointsToBSplineSurface(OCNaroWrappers::OCTColgp_Array2OfPnt^ Points, OCApprox_ParametrizationType ParType, Standard_Integer DegMin, Standard_Integer DegMax, OCGeomAbs_Shape Continuity, Standard_Real Tol3D);

//! Approximates  a BSpline  Surface passing  through  an <br>
//!          array of  points using variational smoothing algorithm, <br>
//!          which tries to minimize additional criterium: <br>
//!          Weight1*CurveLength + Weight2*Curvature + Weight3*Torsion <br>
OCGeomAPI_PointsToBSplineSurface(OCNaroWrappers::OCTColgp_Array2OfPnt^ Points, Standard_Real Weight1, Standard_Real Weight2, Standard_Real Weight3, Standard_Integer DegMax, OCGeomAbs_Shape Continuity, Standard_Real Tol3D);

//! Approximates  a BSpline  Surface passing  through  an <br>
//!          array of  Points. <br>
//! <br>
//!          The points will be constructed as follow: <br>
//!            P(i,j) = gp_Pnt( X0 + (i-1)*dX , <br>
//!                             Y0 + (j-1)*dY , <br>
//!                             ZPoints(i,j)   ) <br>
//! <br>
//!          The resulting BSpline will  have the following <br>
//!          properties: <br>
//!          1- his degree will be in the range [Degmin,Degmax] <br>
//!          2- his  continuity will be  at  least <Continuity> <br>
//!          3- the distance from the point <Points> to the <br>
//!             BSpline will be lower to Tol3D <br>
//!          4- the parametrization of the surface will verify: <br>
//!               S->Value( U, V) = gp_Pnt( U, V, Z(U,V) ); <br>
OCGeomAPI_PointsToBSplineSurface(OCNaroWrappers::OCTColStd_Array2OfReal^ ZPoints, Standard_Real X0, Standard_Real dX, Standard_Real Y0, Standard_Real dY, Standard_Integer DegMin, Standard_Integer DegMax, OCGeomAbs_Shape Continuity, Standard_Real Tol3D);

//! Approximates  a BSpline Surface passing  through  an <br>
//!          array of  Point.  The resulting BSpline will  have <br>
//!          the following properties: <br>
//!          1- his degree will be in the range [Degmin,Degmax] <br>
//!          2- his  continuity will be  at  least <Continuity> <br>
//!          3- the distance from the point <Points> to the <br>
//!             BSpline will be lower to Tol3D <br>
 /*instead*/  void Init(OCNaroWrappers::OCTColgp_Array2OfPnt^ Points, Standard_Integer DegMin, Standard_Integer DegMax, OCGeomAbs_Shape Continuity, Standard_Real Tol3D) ;

//! Interpolates  a BSpline Surface passing  through  an <br>
//!          array of  Point.  The resulting BSpline will  have <br>
//!          the following properties: <br>
//!          1- his degree will be 3. <br>
//!          2- his  continuity will be  C2. <br>
 /*instead*/  void Interpolate(OCNaroWrappers::OCTColgp_Array2OfPnt^ Points) ;

//! Interpolates  a BSpline Surface passing  through  an <br>
//!          array of  Point.  The resulting BSpline will  have <br>
//!          the following properties: <br>
//!          1- his degree will be 3. <br>
//!          2- his  continuity will be  C2. <br>
 /*instead*/  void Interpolate(OCNaroWrappers::OCTColgp_Array2OfPnt^ Points, OCApprox_ParametrizationType ParType) ;

//! Approximates  a BSpline  Surface passing  through  an <br>
//!          array of  Points. <br>
//! <br>
//!          The points will be constructed as follow: <br>
//!            P(i,j) = gp_Pnt( X0 + (i-1)*dX , <br>
//!                             Y0 + (j-1)*dY , <br>
//!                             ZPoints(i,j)   ) <br>
//! <br>
//!          The resulting BSpline will  have the following <br>
//!          properties: <br>
//!          1- his degree will be in the range [Degmin,Degmax] <br>
//!          2- his  continuity will be  at  least <Continuity> <br>
//!          3- the distance from the point <Points> to the <br>
//!             BSpline will be lower to Tol3D <br>
//!          4- the parametrization of the surface will verify: <br>
//!               S->Value( U, V) = gp_Pnt( U, V, Z(U,V) ); <br>
 /*instead*/  void Init(OCNaroWrappers::OCTColStd_Array2OfReal^ ZPoints, Standard_Real X0, Standard_Real dX, Standard_Real Y0, Standard_Real dY, Standard_Integer DegMin, Standard_Integer DegMax, OCGeomAbs_Shape Continuity, Standard_Real Tol3D) ;

//! Interpolates  a BSpline  Surface passing  through  an <br>
//!          array of  Points. <br>
//! <br>
//!          The points will be constructed as follow: <br>
//!            P(i,j) = gp_Pnt( X0 + (i-1)*dX , <br>
//!                             Y0 + (j-1)*dY , <br>
//!                             ZPoints(i,j)   ) <br>
//! <br>
//!          The resulting BSpline will  have the following <br>
//!          properties: <br>
//!          1- his degree will be 3 <br>
//!          2- his  continuity will be  C2. <br>
//!          4- the parametrization of the surface will verify: <br>
//!               S->Value( U, V) = gp_Pnt( U, V, Z(U,V) ); <br>
 /*instead*/  void Interpolate(OCNaroWrappers::OCTColStd_Array2OfReal^ ZPoints, Standard_Real X0, Standard_Real dX, Standard_Real Y0, Standard_Real dY) ;

//! Approximates  a BSpline Surface passing  through  an <br>
//!          array of  Point.  The resulting BSpline will  have <br>
//!          the following properties: <br>
//!          1- his degree will be in the range [Degmin,Degmax] <br>
//!          2- his  continuity will be  at  least <Continuity> <br>
//!          3- the distance from the point <Points> to the <br>
//!             BSpline will be lower to Tol3D <br>
 /*instead*/  void Init(OCNaroWrappers::OCTColgp_Array2OfPnt^ Points, OCApprox_ParametrizationType ParType, Standard_Integer DegMin, Standard_Integer DegMax, OCGeomAbs_Shape Continuity, Standard_Real Tol3D) ;

//! Approximates  a BSpline Surface passing  through  an <br>
//!          array of  point using variational smoothing algorithm, <br>
//!          which tries to minimize additional criterium: <br>
//!          Weight1*CurveLength + Weight2*Curvature + Weight3*Torsion <br>
 /*instead*/  void Init(OCNaroWrappers::OCTColgp_Array2OfPnt^ Points, Standard_Real Weight1, Standard_Real Weight2, Standard_Real Weight3, Standard_Integer DegMax, OCGeomAbs_Shape Continuity, Standard_Real Tol3D) ;

//! Returns the approximate BSpline Surface <br>
 /*instead*/  OCGeom_BSplineSurface^ Surface() ;


 /*instead*/  System::Boolean IsDone() ;

~OCGeomAPI_PointsToBSplineSurface()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
