// File generated by CPPExt (MPV)
//
#ifndef _GeomAPI_ProjectPointOnSurf_OCWrappers_HeaderFile
#define _GeomAPI_ProjectPointOnSurf_OCWrappers_HeaderFile

// include native header
#include <GeomAPI_ProjectPointOnSurf.hxx>
#include "../Converter.h"


#include "../Extrema/Extrema_ExtPS.h"
#include "../GeomAdaptor/GeomAdaptor_Surface.h"
#include "../Extrema/Extrema_ExtAlgo.h"


namespace OCNaroWrappers
{

ref class OCgp_Pnt;
ref class OCGeom_Surface;
ref class OCExtrema_ExtPS;



//! This class implements methods for  computing all the orthogonal <br>
//!  projections of a point onto a  surface. <br>
public ref class OCGeomAPI_ProjectPointOnSurf  {

protected:
  GeomAPI_ProjectPointOnSurf* nativeHandle;
  OCGeomAPI_ProjectPointOnSurf(OCDummy^) {};

public:
  property GeomAPI_ProjectPointOnSurf* Handle
  {
    GeomAPI_ProjectPointOnSurf* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeomAPI_ProjectPointOnSurf(GeomAPI_ProjectPointOnSurf* nativeHandle);

// Methods PUBLIC

//! Creates an empty object. Use the <br>
//! Init function for further initialization. <br>
OCGeomAPI_ProjectPointOnSurf();

//! Create the projection  of a point <P> on a surface <br>
//!          <Surface> <br>
OCGeomAPI_ProjectPointOnSurf(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, OCExtrema_ExtAlgo Algo);

//! Create the projection  of a point <P> on a surface <br>
//!          <Surface> <br>//! Create the projection of a point <P>  on a surface <br>
//!          <Surface>. The solution are computed in the domain <br>
//!          [Umin,Usup] [Vmin,Vsup] of the surface. <br>
OCGeomAPI_ProjectPointOnSurf(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo);


OCGeomAPI_ProjectPointOnSurf(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo);

//! Init the projection  of a point <P> on a surface <br>
//!          <Surface> <br>
OCGeomAPI_ProjectPointOnSurf(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, OCExtrema_ExtAlgo Algo);


 /*instead*/  void Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo) ;

//! Init the projection of a point <P>  on a surface <br>
//!          <Surface>. The solution are computed in the domain <br>
//!          [Umin,Usup] [Vmin,Vsup] of the surface. <br>
 /*instead*/  void Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, OCExtrema_ExtAlgo Algo) ;


 /*instead*/  void Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo) ;

//! Init the projection for many points on a surface <br>
//!          <Surface>. The solutions will be computed in the domain <br>
//!          [Umin,Usup] [Vmin,Vsup] of the surface. <br>
 /*instead*/  void Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, OCExtrema_ExtAlgo Algo) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo) ;


 /*instead*/  void Init(OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, OCExtrema_ExtAlgo Algo) ;

//! Performs the projection of a point on the current surface. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  System::Boolean IsDone() ;

//! Returns the number of computed orthogonal projection points. <br>
//! Note: if projection fails, NbPoints returns 0. <br>
 /*instead*/  Standard_Integer NbPoints() ;

//! Returns the orthogonal projection <br>
//! on the surface. Index is a number of a computed point. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where <br>
//! NbPoints is the number of solution points. <br>
 /*instead*/  OCgp_Pnt^ Point(Standard_Integer Index) ;

//! Returns the parameters (U,V) on the <br>
//! surface of the orthogonal projection. Index is a number of a <br>
//! computed point. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where <br>
//! NbPoints is the number of solution points. <br>
 /*instead*/  void Parameters(Standard_Integer Index, Quantity_Parameter& U, Quantity_Parameter& V) ;

//! Computes the distance between the <br>
//! point and its orthogonal projection on the surface. Index is a number <br>
//! of a computed point. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where <br>
//! NbPoints is the number of solution points. <br>
 /*instead*/  Quantity_Length Distance(Standard_Integer Index) ;

//! Returns the nearest orthogonal projection of the point <br>
//! on the surface. <br>
//! Exceptions <br>
//! StdFail_NotDone if projection fails. <br>
 /*instead*/  OCgp_Pnt^ NearestPoint() ;

//! Returns the parameters (U,V) on the <br>
//! surface of the nearest computed orthogonal projection of the point. <br>
//! Exceptions <br>
//! StdFail_NotDone if projection fails. <br>
 /*instead*/  void LowerDistanceParameters(Quantity_Parameter& U, Quantity_Parameter& V) ;

//! Computes the distance between the <br>
//! point and its nearest orthogonal projection on the surface. <br>
//! Exceptions <br>
//! StdFail_NotDone if projection fails. <br>
 /*instead*/  Quantity_Length LowerDistance() ;

//! return the algorithmic object from Extrema <br>
 /*instead*/  OCExtrema_ExtPS^ Extrema() ;

~OCGeomAPI_ProjectPointOnSurf()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
