// File generated by CPPExt (CPP file)
//

#include "GeomAPI_ProjectPointOnCurve.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"
#include "../Geom/Geom_Curve.h"
#include "../Extrema/Extrema_ExtPC.h"


using namespace OCNaroWrappers;

OCGeomAPI_ProjectPointOnCurve::OCGeomAPI_ProjectPointOnCurve(GeomAPI_ProjectPointOnCurve* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGeomAPI_ProjectPointOnCurve::OCGeomAPI_ProjectPointOnCurve() 
{
  nativeHandle = new GeomAPI_ProjectPointOnCurve();
}

OCGeomAPI_ProjectPointOnCurve::OCGeomAPI_ProjectPointOnCurve(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve) 
{
  nativeHandle = new GeomAPI_ProjectPointOnCurve(*((gp_Pnt*)P->Handle), *((Handle_Geom_Curve*)Curve->Handle));
}

OCGeomAPI_ProjectPointOnCurve::OCGeomAPI_ProjectPointOnCurve(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve, Quantity_Parameter Umin, Quantity_Parameter Usup) 
{
  nativeHandle = new GeomAPI_ProjectPointOnCurve(*((gp_Pnt*)P->Handle), *((Handle_Geom_Curve*)Curve->Handle), Umin, Usup);
}

 void OCGeomAPI_ProjectPointOnCurve::Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve)
{
  ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Init(*((gp_Pnt*)P->Handle), *((Handle_Geom_Curve*)Curve->Handle));
}

 void OCGeomAPI_ProjectPointOnCurve::Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve, Quantity_Parameter Umin, Quantity_Parameter Usup)
{
  ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Init(*((gp_Pnt*)P->Handle), *((Handle_Geom_Curve*)Curve->Handle), Umin, Usup);
}

 void OCGeomAPI_ProjectPointOnCurve::Init(OCNaroWrappers::OCGeom_Curve^ Curve, Quantity_Parameter Umin, Quantity_Parameter Usup)
{
  ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Init(*((Handle_Geom_Curve*)Curve->Handle), Umin, Usup);
}

 void OCGeomAPI_ProjectPointOnCurve::Perform(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Perform(*((gp_Pnt*)P->Handle));
}

 Standard_Integer OCGeomAPI_ProjectPointOnCurve::NbPoints()
{
  return ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->NbPoints();
}

OCgp_Pnt^ OCGeomAPI_ProjectPointOnCurve::Point(Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Point(Index);
  return gcnew OCgp_Pnt(tmp);
}

 Quantity_Parameter OCGeomAPI_ProjectPointOnCurve::Parameter(Standard_Integer Index)
{
  return ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Parameter(Index);
}

 void OCGeomAPI_ProjectPointOnCurve::Parameter(Standard_Integer Index, Quantity_Parameter& U)
{
  ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Parameter(Index, U);
}

 Quantity_Length OCGeomAPI_ProjectPointOnCurve::Distance(Standard_Integer Index)
{
  return ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Distance(Index);
}

OCgp_Pnt^ OCGeomAPI_ProjectPointOnCurve::NearestPoint()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->NearestPoint();
  return gcnew OCgp_Pnt(tmp);
}

 Quantity_Parameter OCGeomAPI_ProjectPointOnCurve::LowerDistanceParameter()
{
  return ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->LowerDistanceParameter();
}

 Quantity_Length OCGeomAPI_ProjectPointOnCurve::LowerDistance()
{
  return ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->LowerDistance();
}

OCExtrema_ExtPC^ OCGeomAPI_ProjectPointOnCurve::Extrema()
{
  Extrema_ExtPC* tmp = new Extrema_ExtPC();
  *tmp = ((GeomAPI_ProjectPointOnCurve*)nativeHandle)->Extrema();
  return gcnew OCExtrema_ExtPC(tmp);
}


