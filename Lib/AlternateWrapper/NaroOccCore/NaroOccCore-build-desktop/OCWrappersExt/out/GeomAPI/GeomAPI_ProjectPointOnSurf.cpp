// File generated by CPPExt (CPP file)
//

#include "GeomAPI_ProjectPointOnSurf.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"
#include "../Geom/Geom_Surface.h"
#include "../Extrema/Extrema_ExtPS.h"


using namespace OCNaroWrappers;

OCGeomAPI_ProjectPointOnSurf::OCGeomAPI_ProjectPointOnSurf(GeomAPI_ProjectPointOnSurf* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCGeomAPI_ProjectPointOnSurf::OCGeomAPI_ProjectPointOnSurf() 
{
  nativeHandle = new GeomAPI_ProjectPointOnSurf();
}

OCGeomAPI_ProjectPointOnSurf::OCGeomAPI_ProjectPointOnSurf(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, OCExtrema_ExtAlgo Algo) 
{
  nativeHandle = new GeomAPI_ProjectPointOnSurf(*((gp_Pnt*)P->Handle), *((Handle_Geom_Surface*)Surface->Handle), (Extrema_ExtAlgo)Algo);
}

OCGeomAPI_ProjectPointOnSurf::OCGeomAPI_ProjectPointOnSurf(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo) 
{
  nativeHandle = new GeomAPI_ProjectPointOnSurf(*((gp_Pnt*)P->Handle), *((Handle_Geom_Surface*)Surface->Handle), Tolerance, (Extrema_ExtAlgo)Algo);
}

OCGeomAPI_ProjectPointOnSurf::OCGeomAPI_ProjectPointOnSurf(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo) 
{
  nativeHandle = new GeomAPI_ProjectPointOnSurf(*((gp_Pnt*)P->Handle), *((Handle_Geom_Surface*)Surface->Handle), Umin, Usup, Vmin, Vsup, Tolerance, (Extrema_ExtAlgo)Algo);
}

OCGeomAPI_ProjectPointOnSurf::OCGeomAPI_ProjectPointOnSurf(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, OCExtrema_ExtAlgo Algo) 
{
  nativeHandle = new GeomAPI_ProjectPointOnSurf(*((gp_Pnt*)P->Handle), *((Handle_Geom_Surface*)Surface->Handle), Umin, Usup, Vmin, Vsup, (Extrema_ExtAlgo)Algo);
}

 void OCGeomAPI_ProjectPointOnSurf::Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Init(*((gp_Pnt*)P->Handle), *((Handle_Geom_Surface*)Surface->Handle), Tolerance, (Extrema_ExtAlgo)Algo);
}

 void OCGeomAPI_ProjectPointOnSurf::Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, OCExtrema_ExtAlgo Algo)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Init(*((gp_Pnt*)P->Handle), *((Handle_Geom_Surface*)Surface->Handle), (Extrema_ExtAlgo)Algo);
}

 void OCGeomAPI_ProjectPointOnSurf::Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Init(*((gp_Pnt*)P->Handle), *((Handle_Geom_Surface*)Surface->Handle), Umin, Usup, Vmin, Vsup, Tolerance, (Extrema_ExtAlgo)Algo);
}

 void OCGeomAPI_ProjectPointOnSurf::Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, OCExtrema_ExtAlgo Algo)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Init(*((gp_Pnt*)P->Handle), *((Handle_Geom_Surface*)Surface->Handle), Umin, Usup, Vmin, Vsup, (Extrema_ExtAlgo)Algo);
}

 void OCGeomAPI_ProjectPointOnSurf::Init(OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, Standard_Real Tolerance, OCExtrema_ExtAlgo Algo)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Init(*((Handle_Geom_Surface*)Surface->Handle), Umin, Usup, Vmin, Vsup, Tolerance, (Extrema_ExtAlgo)Algo);
}

 void OCGeomAPI_ProjectPointOnSurf::Init(OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Umin, Quantity_Parameter Usup, Quantity_Parameter Vmin, Quantity_Parameter Vsup, OCExtrema_ExtAlgo Algo)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Init(*((Handle_Geom_Surface*)Surface->Handle), Umin, Usup, Vmin, Vsup, (Extrema_ExtAlgo)Algo);
}

 void OCGeomAPI_ProjectPointOnSurf::Perform(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Perform(*((gp_Pnt*)P->Handle));
}

 System::Boolean OCGeomAPI_ProjectPointOnSurf::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((GeomAPI_ProjectPointOnSurf*)nativeHandle)->IsDone());
}

 Standard_Integer OCGeomAPI_ProjectPointOnSurf::NbPoints()
{
  return ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->NbPoints();
}

OCgp_Pnt^ OCGeomAPI_ProjectPointOnSurf::Point(Standard_Integer Index)
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Point(Index);
  return gcnew OCgp_Pnt(tmp);
}

 void OCGeomAPI_ProjectPointOnSurf::Parameters(Standard_Integer Index, Quantity_Parameter& U, Quantity_Parameter& V)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Parameters(Index, U, V);
}

 Quantity_Length OCGeomAPI_ProjectPointOnSurf::Distance(Standard_Integer Index)
{
  return ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Distance(Index);
}

OCgp_Pnt^ OCGeomAPI_ProjectPointOnSurf::NearestPoint()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->NearestPoint();
  return gcnew OCgp_Pnt(tmp);
}

 void OCGeomAPI_ProjectPointOnSurf::LowerDistanceParameters(Quantity_Parameter& U, Quantity_Parameter& V)
{
  ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->LowerDistanceParameters(U, V);
}

 Quantity_Length OCGeomAPI_ProjectPointOnSurf::LowerDistance()
{
  return ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->LowerDistance();
}

OCExtrema_ExtPS^ OCGeomAPI_ProjectPointOnSurf::Extrema()
{
  Extrema_ExtPS* tmp = new Extrema_ExtPS();
  *tmp = ((GeomAPI_ProjectPointOnSurf*)nativeHandle)->Extrema();
  return gcnew OCExtrema_ExtPS(tmp);
}


