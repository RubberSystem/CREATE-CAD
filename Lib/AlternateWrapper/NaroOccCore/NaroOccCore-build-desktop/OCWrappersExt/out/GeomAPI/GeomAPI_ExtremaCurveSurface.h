// File generated by CPPExt (MPV)
//
#ifndef _GeomAPI_ExtremaCurveSurface_OCWrappers_HeaderFile
#define _GeomAPI_ExtremaCurveSurface_OCWrappers_HeaderFile

// include native header
#include <GeomAPI_ExtremaCurveSurface.hxx>
#include "../Converter.h"


#include "../Extrema/Extrema_ExtCS.h"


namespace OCNaroWrappers
{

ref class OCGeom_Curve;
ref class OCGeom_Surface;
ref class OCgp_Pnt;
ref class OCExtrema_ExtCS;


//! Describes functions for computing all the extrema <br>
//! between a curve and a surface. <br>
//! An ExtremaCurveSurface algorithm minimizes or <br>
//! maximizes the distance between a point on the curve <br>
//! and a point on the surface. Thus, it computes start <br>
//! and end points of perpendiculars common to the <br>
//! curve and the surface (an intersection point is not an <br>
//! extremum except where the curve and the surface <br>
//! are tangential at this point). <br>
//! Solutions consist of pairs of points, and an extremum <br>
//! is considered to be a segment joining the two points of a solution. <br>
//! An ExtremaCurveSurface object provides a framework for: <br>
//! -   defining the construction of the extrema, <br>
//! -   implementing the construction algorithm, and <br>
//! -   consulting the results. <br>
//! Warning <br>
//! In some cases, the nearest points between a curve <br>
//! and a surface do not correspond to one of the <br>
//! computed extrema. Instead, they may be given by: <br>
//! -   a point of a bounding curve of the surface and one of the following: <br>
//!   -   its orthogonal projection on the curve, <br>
//!   -   a limit point of the curve; or <br>
//! -   a limit point of the curve and its projection on the surface; or <br>
//! -   an intersection point between the curve and the surface. <br>
public ref class OCGeomAPI_ExtremaCurveSurface  {

protected:
  GeomAPI_ExtremaCurveSurface* nativeHandle;
  OCGeomAPI_ExtremaCurveSurface(OCDummy^) {};

public:
  property GeomAPI_ExtremaCurveSurface* Handle
  {
    GeomAPI_ExtremaCurveSurface* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeomAPI_ExtremaCurveSurface(GeomAPI_ExtremaCurveSurface* nativeHandle);

// Methods PUBLIC

//! Constructs an empty algorithm for computing <br>
//! extrema between a curve and a surface. Use an <br>
//! Init function to define the curve and the surface on <br>
//! which it is going to work. <br>
OCGeomAPI_ExtremaCurveSurface();

//! Computes  the  extrema  distances  between  the <br>
//!          curve <C> and the surface  <S>. <br>
OCGeomAPI_ExtremaCurveSurface(OCNaroWrappers::OCGeom_Curve^ Curve, OCNaroWrappers::OCGeom_Surface^ Surface);

//! Computes  the  extrema  distances  between  the <br>
//!          curve <C>  and the  surface  <S>.  The solution <br>
//!          point are computed in the domain [Wmin,Wmax] of <br>
//!          the  curve   and  in  the  domain   [Umin,Umax] <br>
//!          [Vmin,Vmax] of the surface. <br>
//!	Warning <br>
//! Use the function NbExtrema to obtain the number <br>
//! of solutions. If this algorithm fails, NbExtrema returns 0. <br>
OCGeomAPI_ExtremaCurveSurface(OCNaroWrappers::OCGeom_Curve^ Curve, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Wmin, Quantity_Parameter Wmax, Quantity_Parameter Umin, Quantity_Parameter Umax, Quantity_Parameter Vmin, Quantity_Parameter Vmax);

//! Computes  the  extrema  distances  between  the <br>
//!          curve <C> and the surface  <S>. <br>
 /*instead*/  void Init(OCNaroWrappers::OCGeom_Curve^ Curve, OCNaroWrappers::OCGeom_Surface^ Surface) ;

//! Computes  the  extrema  distances  between  the <br>
//!          curve <C>  and the  surface  <S>.  The solution <br>
//!          point are computed in the domain [Wmin,Wmax] of <br>
//!          the  curve   and  in  the  domain   [Umin,Umax] <br>
//!          [Vmin,Vmax] of the surface. <br>
//! Warning <br>
//! Use the function NbExtrema to obtain the number <br>
//! of solutions. If this algorithm fails, NbExtrema returns 0. <br>
 /*instead*/  void Init(OCNaroWrappers::OCGeom_Curve^ Curve, OCNaroWrappers::OCGeom_Surface^ Surface, Quantity_Parameter Wmin, Quantity_Parameter Wmax, Quantity_Parameter Umin, Quantity_Parameter Umax, Quantity_Parameter Vmin, Quantity_Parameter Vmax) ;

//! Returns the number of extrema computed by this algorithm. <br>
//! Note: if this algorithm fails, NbExtrema returns 0. <br>
 /*instead*/  Standard_Integer NbExtrema() ;

//! Returns the points P1 on the curve and P2 on the <br>
//! surface, which are the ends of the extremum of index <br>
//! Index computed by this algorithm. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ <br>
//! 1,NbExtrema ], where NbExtrema is the <br>
//! number of extrema computed by this algorithm. <br>
 /*instead*/  void Points(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2) ;

//! Returns the parameters W of the point on the curve, <br>
//! and (U,V) of the point on the surface, which are the <br>
//! ends of the extremum of index Index computed by this algorithm. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ <br>
//! 1,NbExtrema ], where NbExtrema is the <br>
//! number of extrema computed by this algorithm. <br>
 /*instead*/  void Parameters(Standard_Integer Index, Quantity_Parameter& W, Quantity_Parameter& U, Quantity_Parameter& V) ;

//! Computes the distance between the end points of the <br>
//! extremum of index Index computed by this algorithm. <br>
//! Exceptions <br>
//! Standard_OutOfRange if index is not in the range [ <br>
//! 1,NbExtrema ], where NbExtrema is the <br>
//! number of extrema computed by this algorithm. <br>
 /*instead*/  Quantity_Length Distance(Standard_Integer Index) ;

//! Returns the points PC on the curve and PS on the <br>
//! surface, which are the ends of the shortest extremum computed by this algorithm. <br>
//! Exceptions - StdFail_NotDone if this algorithm fails. <br>
 /*instead*/  void NearestPoints(OCNaroWrappers::OCgp_Pnt^ PC, OCNaroWrappers::OCgp_Pnt^ PS) ;

//! Returns the parameters W of the point on the curve <br>
//! and (U,V) of the point on the surface, which are the <br>
//! ends of the shortest extremum computed by this algorithm. <br>
//! Exceptions - StdFail_NotDone if this algorithm fails. <br>
 /*instead*/  void LowerDistanceParameters(Quantity_Parameter& W, Quantity_Parameter& U, Quantity_Parameter& V) ;

//! Computes the distance between the end points of the <br>
//! shortest extremum computed by this algorithm. <br>
//! Exceptions - StdFail_NotDone if this algorithm fails. <br>
 /*instead*/  Quantity_Length LowerDistance() ;

//! Returns the algorithmic object from Extrema <br>
 /*instead*/  OCExtrema_ExtCS^ Extrema() ;

~OCGeomAPI_ExtremaCurveSurface()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
