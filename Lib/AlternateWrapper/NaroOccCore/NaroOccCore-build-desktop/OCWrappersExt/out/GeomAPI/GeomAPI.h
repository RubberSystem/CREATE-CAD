// File generated by CPPExt (Package)
//

#ifndef _GeomAPI_OCWrappers_HeaderFile
#define _GeomAPI_OCWrappers_HeaderFile

// Include the wrapped header
#include <GeomAPI.hxx>

#include "GeomAPI_ProjectPointOnCurve.h"
#include "GeomAPI_ProjectPointOnSurf.h"
#include "GeomAPI_ExtremaCurveCurve.h"
#include "GeomAPI_ExtremaCurveSurface.h"
#include "GeomAPI_ExtremaSurfaceSurface.h"
#include "GeomAPI_PointsToBSpline.h"
#include "GeomAPI_PointsToBSplineSurface.h"
#include "GeomAPI_Interpolate.h"
#include "GeomAPI_IntSS.h"
#include "GeomAPI_IntCS.h"


namespace OCNaroWrappers
{
//! The   GeomAPI   package  provides  an  Application <br>
//!          Programming Interface for the Geometry. <br>
//! <br>
//!          The API is a set of  classes and methods aiming to <br>
//!          provide : <br>
//! <br>
//!          * High level and simple calls  for the most common <br>
//!          operations. <br>
//! <br>
//!          *    Keeping   an   access  on    the    low-level <br>
//!          implementation of high-level calls. <br>
//! <br>
//! <br>
//! 	    The API  provides classes to  call the algorithmes <br>
//! 	    of the Geometry <br>
//! <br>
//! 	    * The  constructors  of the classes  provides  the <br>
//! 	    different constructions methods. <br>
//! <br>
//! 	    * The  class keeps as fields the   different tools <br>
//! 	    used by the algorithmes <br>
//! <br>
//! 	    *   The class  provides  a  casting  method to get <br>
//! 	    automatically the  result  with  a   function-like <br>
//! 	    call. <br>
//! <br>
//! 	    For example to evaluate the distance <D> between a <br>
//! 	    point <P> and a curve <C>, one can writes : <br>
//! <br>
//! 	        D = GeomAPI_ProjectPointOnCurve(P,C); <br>
//! <br>
//! 	    or <br>
//! <br>
//! 	        GeomAPI_ProjectPointOnCurve PonC(P,C); <br>
//! 	        D = PonC.LowerDistance(); <br>
//! <br>
public ref class OCGeomAPI abstract sealed
{

public:
// Methods

//! This function builds (in the <br>
//! parametric space of the plane P) a 2D curve equivalent to the 3D curve <br>
//! C. The 3D curve C is considered to be located in the plane P. <br>
//! Warning <br>
//! The 3D curve C must be of one of the following types: <br>
//! -      a line <br>
//! -      a circle <br>
//! -      an ellipse <br>
//! -      a hyperbola <br>
//! -      a parabola <br>
//! -      a Bezier curve <br>
//! -      a BSpline curve <br>
//! Exceptions Standard_NoSuchObject if C is not a defined type curve. <br>
static /*instead*/  OCGeom2d_Curve^ To2d(OCNaroWrappers::OCGeom_Curve^ C, OCNaroWrappers::OCgp_Pln^ P) ;

//! Builds a 3D curve equivalent to the 2D curve C <br>
//! described in the parametric space defined by the local <br>
//! coordinate system of plane P. <br>
//! The resulting 3D curve is of the same nature as that of the curve C. <br>
static /*instead*/  OCGeom_Curve^ To3d(OCNaroWrappers::OCGeom2d_Curve^ C, OCNaroWrappers::OCgp_Pln^ P) ;


};

}; // OCNaroWrappers

#endif
