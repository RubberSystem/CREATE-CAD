// File generated by CPPExt (MPV)
//
#ifndef _GeomAPI_ProjectPointOnCurve_OCWrappers_HeaderFile
#define _GeomAPI_ProjectPointOnCurve_OCWrappers_HeaderFile

// include native header
#include <GeomAPI_ProjectPointOnCurve.hxx>
#include "../Converter.h"


#include "../Extrema/Extrema_ExtPC.h"
#include "../GeomAdaptor/GeomAdaptor_Curve.h"


namespace OCNaroWrappers
{

ref class OCgp_Pnt;
ref class OCGeom_Curve;
ref class OCExtrema_ExtPC;



//! This class implements methods for  computing all the orthogonal <br>
//!  projections of a 3D point onto a  3D curve. <br>
public ref class OCGeomAPI_ProjectPointOnCurve  {

protected:
  GeomAPI_ProjectPointOnCurve* nativeHandle;
  OCGeomAPI_ProjectPointOnCurve(OCDummy^) {};

public:
  property GeomAPI_ProjectPointOnCurve* Handle
  {
    GeomAPI_ProjectPointOnCurve* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCGeomAPI_ProjectPointOnCurve(GeomAPI_ProjectPointOnCurve* nativeHandle);

// Methods PUBLIC

//! Creates an empty object. Use an <br>
//! Init function for further initialization. <br>
OCGeomAPI_ProjectPointOnCurve();

//! Create the projection  of a  point  <P> on a curve <br>
//!          <Curve> <br>
OCGeomAPI_ProjectPointOnCurve(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve);

//! Create  the projection  of a point <P>  on a curve <br>
//!          <Curve> limited by the two points of parameter Umin and Usup. <br>
OCGeomAPI_ProjectPointOnCurve(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve, Quantity_Parameter Umin, Quantity_Parameter Usup);

//! Init the projection  of a  point  <P> on a curve <br>
//!          <Curve> <br>
 /*instead*/  void Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve) ;

//! Init  the  projection  of a  point <P>  on a curve <br>
//!          <Curve> limited by the two points of parameter Umin and Usup. <br>
 /*instead*/  void Init(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCGeom_Curve^ Curve, Quantity_Parameter Umin, Quantity_Parameter Usup) ;

//! Init  the  projection  of a  point <P>  on a curve <br>
//!          <Curve> limited by the two points of parameter Umin and Usup. <br>
 /*instead*/  void Init(OCNaroWrappers::OCGeom_Curve^ Curve, Quantity_Parameter Umin, Quantity_Parameter Usup) ;

//! Performs the projection of a point on the current curve. <br>
 /*instead*/  void Perform(OCNaroWrappers::OCgp_Pnt^ P) ;

//! Returns the number of computed <br>
//! orthogonal projection points. <br>
//! Note: if this algorithm fails, NbPoints returns 0. <br>
 /*instead*/  Standard_Integer NbPoints() ;

//! Returns the orthogonal projection <br>
//! on the curve. Index is a number of a computed point. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where <br>
//! NbPoints is the number of solution points. <br>
 /*instead*/  OCgp_Pnt^ Point(Standard_Integer Index) ;

//! Returns the parameter on the curve <br>
//! of the point, which is the orthogonal projection. Index is a <br>
//! number of a computed point. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where <br>
//! NbPoints is the number of solution points. <br>
 /*instead*/  Quantity_Parameter Parameter(Standard_Integer Index) ;

//! Returns the parameter on the curve <br>
//! of the point, which is the orthogonal projection. Index is a <br>
//! number of a computed point. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where <br>
//! NbPoints is the number of solution points.- <br>
 /*instead*/  void Parameter(Standard_Integer Index, Quantity_Parameter& U) ;

//! Computes the distance between the <br>
//! point and its orthogonal projection on the curve. Index is a number of a computed point. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is not in the range [ 1,NbPoints ], where <br>
//! NbPoints is the number of solution points. <br>
 /*instead*/  Quantity_Length Distance(Standard_Integer Index) ;

//! Returns the nearest orthogonal <br>
//! projection of the point on the curve. <br>
//! Exceptions: StdFail_NotDone if this algorithm fails. <br>
 /*instead*/  OCgp_Pnt^ NearestPoint() ;

//! Returns the parameter on the curve <br>
//! of the nearest orthogonal projection of the point. <br>
//! Exceptions: StdFail_NotDone if this algorithm fails. <br>
 /*instead*/  Quantity_Parameter LowerDistanceParameter() ;

//! Computes the distance between the <br>
//! point and its nearest orthogonal projection on the curve. <br>
//! Exceptions: StdFail_NotDone if this algorithm fails. <br>
 /*instead*/  Quantity_Length LowerDistance() ;

//! return the algorithmic object from Extrema <br>
 /*instead*/  OCExtrema_ExtPC^ Extrema() ;

~OCGeomAPI_ProjectPointOnCurve()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
