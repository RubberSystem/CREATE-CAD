// File generated by CPPExt (CPP file)
//

#include "Intf_SectionLine.h"
#include "../Converter.h"
#include "Intf_SectionPoint.h"


using namespace OCNaroWrappers;

OCIntf_SectionLine::OCIntf_SectionLine(Intf_SectionLine* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Integer OCIntf_SectionLine::NumberOfPoints()
{
  return ((Intf_SectionLine*)nativeHandle)->NumberOfPoints();
}

OCIntf_SectionPoint^ OCIntf_SectionLine::GetPoint(Standard_Integer Index)
{
  Intf_SectionPoint* tmp = new Intf_SectionPoint();
  *tmp = ((Intf_SectionLine*)nativeHandle)->GetPoint(Index);
  return gcnew OCIntf_SectionPoint(tmp);
}

 System::Boolean OCIntf_SectionLine::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean(((Intf_SectionLine*)nativeHandle)->IsClosed());
}

 System::Boolean OCIntf_SectionLine::Contains(OCNaroWrappers::OCIntf_SectionPoint^ ThePI)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_SectionLine*)nativeHandle)->Contains(*((Intf_SectionPoint*)ThePI->Handle)));
}

 Standard_Integer OCIntf_SectionLine::IsEnd(OCNaroWrappers::OCIntf_SectionPoint^ ThePI)
{
  return ((Intf_SectionLine*)nativeHandle)->IsEnd(*((Intf_SectionPoint*)ThePI->Handle));
}

 System::Boolean OCIntf_SectionLine::IsEqual(OCNaroWrappers::OCIntf_SectionLine^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_SectionLine*)nativeHandle)->IsEqual(*((Intf_SectionLine*)Other->Handle)));
}

OCIntf_SectionLine::OCIntf_SectionLine() 
{
  nativeHandle = new Intf_SectionLine();
}

OCIntf_SectionLine::OCIntf_SectionLine(OCNaroWrappers::OCIntf_SectionLine^ Other) 
{
  nativeHandle = new Intf_SectionLine(*((Intf_SectionLine*)Other->Handle));
}

 void OCIntf_SectionLine::Append(OCNaroWrappers::OCIntf_SectionPoint^ Pi)
{
  ((Intf_SectionLine*)nativeHandle)->Append(*((Intf_SectionPoint*)Pi->Handle));
}

 void OCIntf_SectionLine::Append(OCNaroWrappers::OCIntf_SectionLine^ LS)
{
  ((Intf_SectionLine*)nativeHandle)->Append(*((Intf_SectionLine*)LS->Handle));
}

 void OCIntf_SectionLine::Prepend(OCNaroWrappers::OCIntf_SectionPoint^ Pi)
{
  ((Intf_SectionLine*)nativeHandle)->Prepend(*((Intf_SectionPoint*)Pi->Handle));
}

 void OCIntf_SectionLine::Prepend(OCNaroWrappers::OCIntf_SectionLine^ LS)
{
  ((Intf_SectionLine*)nativeHandle)->Prepend(*((Intf_SectionLine*)LS->Handle));
}

 void OCIntf_SectionLine::Reverse()
{
  ((Intf_SectionLine*)nativeHandle)->Reverse();
}

 void OCIntf_SectionLine::Close()
{
  ((Intf_SectionLine*)nativeHandle)->Close();
}

 void OCIntf_SectionLine::Dump(Standard_Integer Indent)
{
  ((Intf_SectionLine*)nativeHandle)->Dump(Indent);
}


