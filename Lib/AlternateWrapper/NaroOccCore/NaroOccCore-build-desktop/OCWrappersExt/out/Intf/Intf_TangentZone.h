// File generated by CPPExt (MPV)
//
#ifndef _Intf_TangentZone_OCWrappers_HeaderFile
#define _Intf_TangentZone_OCWrappers_HeaderFile

// include native header
#include <Intf_TangentZone.hxx>
#include "../Converter.h"


#include "Intf_SeqOfSectionPoint.h"


namespace OCNaroWrappers
{

ref class OCIntf_SectionPoint;


//! Describes   a  zone  of  tangence  between  polygons  or <br>
//!          polyhedra as a sequence of points of intersection. <br>
public ref class OCIntf_TangentZone  {

protected:
  Intf_TangentZone* nativeHandle;
  OCIntf_TangentZone(OCDummy^) {};

public:
  property Intf_TangentZone* Handle
  {
    Intf_TangentZone* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntf_TangentZone(Intf_TangentZone* nativeHandle);

// Methods PUBLIC

//! Returns number of SectionPoint in this TangentZone. <br>
 /*instead*/  Standard_Integer NumberOfPoints() ;

//! Gives   the   SectionPoint   of  address  <Index>  in  the <br>
//!          TangentZone. <br>
//! <br>
 /*instead*/  OCIntf_SectionPoint^ GetPoint(Standard_Integer Index) ;

//! Compares two TangentZones. <br>
//! <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCIntf_TangentZone^ Other) ;

//! Checks if <ThePI> is in TangentZone. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCIntf_SectionPoint^ ThePI) ;

//! Gives  the parameter range of the  TangentZone on the first <br>
//!          argument of the Interference. (Usable only for polygon) <br>
 /*instead*/  void ParamOnFirst(Standard_Real& paraMin, Standard_Real& paraMax) ;

//! Gives the parameter range of the  TangentZone on the second <br>
//!          argument of the Interference. (Usable only for polygon) <br>
 /*instead*/  void ParamOnSecond(Standard_Real& paraMin, Standard_Real& paraMax) ;

//! Gives information  about  the    first argument   of   the <br>
//!          Interference. (Usable only for polygon) <br>
 /*instead*/  void InfoFirst(Standard_Integer& segMin, Standard_Real& paraMin, Standard_Integer& segMax, Standard_Real& paraMax) ;

//! Gives   informations  about  the  second   argument of  the <br>
//!          Interference. (Usable only for polygon) <br>
 /*instead*/  void InfoSecond(Standard_Integer& segMin, Standard_Real& paraMin, Standard_Integer& segMax, Standard_Real& paraMax) ;

//! Returns True if  <ThePI>  is in the parameter  range of the <br>
//!          TangentZone. <br>
 /*instead*/  System::Boolean RangeContains(OCNaroWrappers::OCIntf_SectionPoint^ ThePI) ;

//! Returns True if the TangentZone  <Other> has  a common part <br>
//!          with <me>. <br>
 /*instead*/  System::Boolean HasCommonRange(OCNaroWrappers::OCIntf_TangentZone^ Other) ;

//! Builds an empty tangent zone. <br>
OCIntf_TangentZone();

//! Copies a Tangent zone. <br>
OCIntf_TangentZone(OCNaroWrappers::OCIntf_TangentZone^ Other);

//! Adds a SectionPoint to the TangentZone. <br>
 /*instead*/  void Append(OCNaroWrappers::OCIntf_SectionPoint^ Pi) ;

//! Adds the TangentZone <Tzi> to <me>. <br>
 /*instead*/  void Append(OCNaroWrappers::OCIntf_TangentZone^ Tzi) ;

//! Inserts a SectionPoint in the TangentZone. <br>
 /*instead*/  System::Boolean Insert(OCNaroWrappers::OCIntf_SectionPoint^ Pi) ;

//! Inserts a point in the polygonal TangentZone. <br>
 /*instead*/  void PolygonInsert(OCNaroWrappers::OCIntf_SectionPoint^ Pi) ;

//! Inserts a SectionPoint before <Index> in the TangentZone. <br>
 /*instead*/  void InsertBefore(Standard_Integer Index, OCNaroWrappers::OCIntf_SectionPoint^ Pi) ;

//! Inserts a SectionPoint after <Index> in the TangentZone. <br>
 /*instead*/  void InsertAfter(Standard_Integer Index, OCNaroWrappers::OCIntf_SectionPoint^ Pi) ;


 /*instead*/  void Dump(Standard_Integer Indent) ;

~OCIntf_TangentZone()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
