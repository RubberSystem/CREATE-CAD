// File generated by CPPExt (CPP file)
//

#include "Intf_TangentZone.h"
#include "../Converter.h"
#include "Intf_SectionPoint.h"


using namespace OCNaroWrappers;

OCIntf_TangentZone::OCIntf_TangentZone(Intf_TangentZone* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 Standard_Integer OCIntf_TangentZone::NumberOfPoints()
{
  return ((Intf_TangentZone*)nativeHandle)->NumberOfPoints();
}

OCIntf_SectionPoint^ OCIntf_TangentZone::GetPoint(Standard_Integer Index)
{
  Intf_SectionPoint* tmp = new Intf_SectionPoint();
  *tmp = ((Intf_TangentZone*)nativeHandle)->GetPoint(Index);
  return gcnew OCIntf_SectionPoint(tmp);
}

 System::Boolean OCIntf_TangentZone::IsEqual(OCNaroWrappers::OCIntf_TangentZone^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_TangentZone*)nativeHandle)->IsEqual(*((Intf_TangentZone*)Other->Handle)));
}

 System::Boolean OCIntf_TangentZone::Contains(OCNaroWrappers::OCIntf_SectionPoint^ ThePI)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_TangentZone*)nativeHandle)->Contains(*((Intf_SectionPoint*)ThePI->Handle)));
}

 void OCIntf_TangentZone::ParamOnFirst(Standard_Real& paraMin, Standard_Real& paraMax)
{
  ((Intf_TangentZone*)nativeHandle)->ParamOnFirst(paraMin, paraMax);
}

 void OCIntf_TangentZone::ParamOnSecond(Standard_Real& paraMin, Standard_Real& paraMax)
{
  ((Intf_TangentZone*)nativeHandle)->ParamOnSecond(paraMin, paraMax);
}

 void OCIntf_TangentZone::InfoFirst(Standard_Integer& segMin, Standard_Real& paraMin, Standard_Integer& segMax, Standard_Real& paraMax)
{
  ((Intf_TangentZone*)nativeHandle)->InfoFirst(segMin, paraMin, segMax, paraMax);
}

 void OCIntf_TangentZone::InfoSecond(Standard_Integer& segMin, Standard_Real& paraMin, Standard_Integer& segMax, Standard_Real& paraMax)
{
  ((Intf_TangentZone*)nativeHandle)->InfoSecond(segMin, paraMin, segMax, paraMax);
}

 System::Boolean OCIntf_TangentZone::RangeContains(OCNaroWrappers::OCIntf_SectionPoint^ ThePI)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_TangentZone*)nativeHandle)->RangeContains(*((Intf_SectionPoint*)ThePI->Handle)));
}

 System::Boolean OCIntf_TangentZone::HasCommonRange(OCNaroWrappers::OCIntf_TangentZone^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_TangentZone*)nativeHandle)->HasCommonRange(*((Intf_TangentZone*)Other->Handle)));
}

OCIntf_TangentZone::OCIntf_TangentZone() 
{
  nativeHandle = new Intf_TangentZone();
}

OCIntf_TangentZone::OCIntf_TangentZone(OCNaroWrappers::OCIntf_TangentZone^ Other) 
{
  nativeHandle = new Intf_TangentZone(*((Intf_TangentZone*)Other->Handle));
}

 void OCIntf_TangentZone::Append(OCNaroWrappers::OCIntf_SectionPoint^ Pi)
{
  ((Intf_TangentZone*)nativeHandle)->Append(*((Intf_SectionPoint*)Pi->Handle));
}

 void OCIntf_TangentZone::Append(OCNaroWrappers::OCIntf_TangentZone^ Tzi)
{
  ((Intf_TangentZone*)nativeHandle)->Append(*((Intf_TangentZone*)Tzi->Handle));
}

 System::Boolean OCIntf_TangentZone::Insert(OCNaroWrappers::OCIntf_SectionPoint^ Pi)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_TangentZone*)nativeHandle)->Insert(*((Intf_SectionPoint*)Pi->Handle)));
}

 void OCIntf_TangentZone::PolygonInsert(OCNaroWrappers::OCIntf_SectionPoint^ Pi)
{
  ((Intf_TangentZone*)nativeHandle)->PolygonInsert(*((Intf_SectionPoint*)Pi->Handle));
}

 void OCIntf_TangentZone::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCIntf_SectionPoint^ Pi)
{
  ((Intf_TangentZone*)nativeHandle)->InsertBefore(Index, *((Intf_SectionPoint*)Pi->Handle));
}

 void OCIntf_TangentZone::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCIntf_SectionPoint^ Pi)
{
  ((Intf_TangentZone*)nativeHandle)->InsertAfter(Index, *((Intf_SectionPoint*)Pi->Handle));
}

 void OCIntf_TangentZone::Dump(Standard_Integer Indent)
{
  ((Intf_TangentZone*)nativeHandle)->Dump(Indent);
}


