// File generated by CPPExt (MPV)
//
#ifndef _Intf_Interference_OCWrappers_HeaderFile
#define _Intf_Interference_OCWrappers_HeaderFile

// include native header
#include <Intf_Interference.hxx>
#include "../Converter.h"


#include "Intf_SeqOfSectionPoint.h"
#include "Intf_SeqOfSectionLine.h"
#include "Intf_SeqOfTangentZone.h"


namespace OCNaroWrappers
{

ref class OCIntf_SectionPoint;
ref class OCIntf_SectionLine;
ref class OCIntf_TangentZone;


//! Describes the   Interference  computation    result <br>
//!          between polygon2d or polygon3d or polyhedron. <br>
public ref class OCIntf_Interference  {

protected:
  Intf_Interference* nativeHandle;
  OCIntf_Interference(OCDummy^) {};

public:
  property Intf_Interference* Handle
  {
    Intf_Interference* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntf_Interference(Intf_Interference* nativeHandle);

// Methods PUBLIC


OCIntf_Interference(System::Boolean Self);

//! Gives the number   of  points of  intersection  in the <br>
//!          interference. <br>
 /*instead*/  Standard_Integer NbSectionPoints() ;

//! Gives the point of  intersection of address  Index in <br>
//!          the interference. <br>
 /*instead*/  OCIntf_SectionPoint^ PntValue(Standard_Integer Index) ;

//! Gives the number  of polylines of  intersection in the <br>
//!          interference. <br>
 /*instead*/  Standard_Integer NbSectionLines() ;

//! Gives the polyline of intersection at address <Index> in <br>
//!          the interference. <br>
 /*instead*/  OCIntf_SectionLine^ LineValue(Standard_Integer Index) ;

//! Gives the number of zones of tangence in the interference. <br>
 /*instead*/  Standard_Integer NbTangentZones() ;

//! Gives  the zone of  tangence at address   Index in the <br>
//!          interference. <br>
 /*instead*/  OCIntf_TangentZone^ ZoneValue(Standard_Integer Index) ;

//! Gives the tolerance used for the calculation. <br>
 /*instead*/  Standard_Real GetTolerance() ;

//! Tests if the polylines of  intersection or the zones of <br>
//!          tangence contain the point of intersection <ThePnt>. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCIntf_SectionPoint^ ThePnt) ;

//! Inserts a new zone of tangence in  the current list of <br>
//!          tangent zones of  the interference  and  returns  True <br>
//!          when done. <br>
 /*instead*/  System::Boolean Insert(OCNaroWrappers::OCIntf_TangentZone^ TheZone) ;

//! Insert a new segment of intersection in the current  list of <br>
//!          polylines of intersection of the interference. <br>
 /*instead*/  void Insert(OCNaroWrappers::OCIntf_SectionPoint^ pdeb, OCNaroWrappers::OCIntf_SectionPoint^ pfin) ;


 /*instead*/  void Dump() ;

~OCIntf_Interference()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
