// File generated by CPPExt (Package)
//

#ifndef _Intf_OCWrappers_HeaderFile
#define _Intf_OCWrappers_HeaderFile

// Include the wrapped header
#include <Intf.hxx>

#include "Intf_Polygon2d.h"
#include "Intf_ToolPolyhedron.h"
#include "Intf_Array1OfLin.h"
#include "Intf_SectionPoint.h"
#include "Intf_SeqOfSectionPoint.h"
#include "Intf_SectionLine.h"
#include "Intf_SeqOfSectionLine.h"
#include "Intf_TangentZone.h"
#include "Intf_SeqOfTangentZone.h"
#include "Intf_Interference.h"
#include "Intf_Tool.h"
#include "Intf_InterferencePolygon2d.h"
#include "Intf_InterferencePolygon3d.h"
#include "Intf_InterferencePolygonPolyhedron.h"
#include "Intf_InterferencePolyhedron.h"
#include "Intf_SequenceNodeOfSeqOfSectionPoint.h"
#include "Intf_SequenceNodeOfSeqOfSectionLine.h"
#include "Intf_SequenceNodeOfSeqOfTangentZone.h"


namespace OCNaroWrappers
{
//! Interference computation  between polygons, lines  and <br>
//!          polyhedra with only  triangular  facets. These objects <br>
//!          are polygonal  representations of complex   curves and <br>
//!          triangulated representations of complex surfaces. <br>
public ref class OCIntf abstract sealed
{

public:
// Methods

//! Give the plane equation of the triangle <P1> <P2> <P3>. <br>
static /*instead*/  void PlaneEquation(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3, OCNaroWrappers::OCgp_XYZ^ NormalVector, Standard_Real& PolarDistance) ;

//! Compute if the triangle <P1> <P2> <P3> contain <ThePnt>. <br>
static /*instead*/  System::Boolean Contain(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3, OCNaroWrappers::OCgp_Pnt^ ThePnt) ;


};

}; // OCNaroWrappers

#endif
