// File generated by CPPExt (MPV)
//
#ifndef _Intf_SectionPoint_OCWrappers_HeaderFile
#define _Intf_SectionPoint_OCWrappers_HeaderFile

// include native header
#include <Intf_SectionPoint.hxx>
#include "../Converter.h"


#include "../gp/gp_Pnt.h"
#include "Intf_PIType.h"


namespace OCNaroWrappers
{

ref class OCgp_Pnt;
ref class OCgp_Pnt2d;


//! Describes an intersection  point between  polygons  and <br>
//!          polyedra. <br>
public ref class OCIntf_SectionPoint  {

protected:
  Intf_SectionPoint* nativeHandle;
  OCIntf_SectionPoint(OCDummy^) {};

public:
  property Intf_SectionPoint* Handle
  {
    Intf_SectionPoint* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntf_SectionPoint(Intf_SectionPoint* nativeHandle);

// Methods PUBLIC

//! Returns the location of the SectionPoint. <br>
 /*instead*/  OCgp_Pnt^ Pnt() ;

//! Returns the cumulated  Parameter of the SectionPoint on the <br>
//!          first element. <br>
//! <br>
 /*instead*/  Standard_Real ParamOnFirst() ;

//! Returns the cumulated Parameter of the section point on the <br>
//!          second element. <br>
//! <br>
 /*instead*/  Standard_Real ParamOnSecond() ;

//! Returns the type of the section point on the first element. <br>
//! <br>
 /*instead*/  OCIntf_PIType TypeOnFirst() ;

//! Returns  the  type  of the  section  point  on  the  second <br>
//!          element. <br>
//! <br>
 /*instead*/  OCIntf_PIType TypeOnSecond() ;


 /*instead*/  void InfoFirst(OCIntf_PIType& Dim, Standard_Integer& Add1, Standard_Integer& Add2, Standard_Real& Param) ;

//! Gives the   datas  about   the    first  argument of    the <br>
//!          Interference. <br>
 /*instead*/  void InfoFirst(OCIntf_PIType& Dim, Standard_Integer& Addr, Standard_Real& Param) ;


 /*instead*/  void InfoSecond(OCIntf_PIType& Dim, Standard_Integer& Add1, Standard_Integer& Add2, Standard_Real& Param) ;

//! Gives the   datas  about   the    second  argument of    the <br>
//!          Interference. <br>
 /*instead*/  void InfoSecond(OCIntf_PIType& Dim, Standard_Integer& Addr, Standard_Real& Param) ;

//! Gives the incidence at  this  section point. The  incidence <br>
//!          between the two triangles is given by the cosine.  The best <br>
//!          incidence is 0. (PI/2).  The worst is 1. (null angle). <br>
 /*instead*/  Standard_Real Incidence() ;

//! Returns True if the two SectionPoint have the  same logical <br>
//!          informations. <br>
//! <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCIntf_SectionPoint^ Other) ;

//! Returns True if the two SectionPoints are  on the  same edge <br>
//!          of the first or the second element. <br>
 /*instead*/  System::Boolean IsOnSameEdge(OCNaroWrappers::OCIntf_SectionPoint^ Other) ;


OCIntf_SectionPoint();

//! Builds  a  SectionPoint    with the  respective  dimensions <br>
//!          (vertex edge or face)  of the concerned arguments and their <br>
//!          addresses in the Topological structure. <br>
OCIntf_SectionPoint(OCNaroWrappers::OCgp_Pnt^ Where, OCIntf_PIType DimeO, Standard_Integer AddrO1, Standard_Integer AddrO2, Standard_Real ParamO, OCIntf_PIType DimeT, Standard_Integer AddrT1, Standard_Integer AddrT2, Standard_Real ParamT, Standard_Real Incid);

//! Builds  a  SectionPoint 2d   with the respective dimensions <br>
//!          (vertex or  edge)  of  the concerned arguments   and  their <br>
//!          addresses in the Topological structure. <br>
OCIntf_SectionPoint(OCNaroWrappers::OCgp_Pnt2d^ Where, OCIntf_PIType DimeO, Standard_Integer AddrO1, Standard_Real ParamO, OCIntf_PIType DimeT, Standard_Integer AddrT1, Standard_Real ParamT, Standard_Real Incid);

//! Merges two SectionPoints. <br>
 /*instead*/  void Merge(OCNaroWrappers::OCIntf_SectionPoint^ Other) ;


 /*instead*/  void Dump(Standard_Integer Indent) ;

~OCIntf_SectionPoint()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
