// File generated by CPPExt (CPP file)
//

#include "Intf_SectionPoint.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"


using namespace OCNaroWrappers;

OCIntf_SectionPoint::OCIntf_SectionPoint(Intf_SectionPoint* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCgp_Pnt^ OCIntf_SectionPoint::Pnt()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Intf_SectionPoint*)nativeHandle)->Pnt();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCIntf_SectionPoint::ParamOnFirst()
{
  return ((Intf_SectionPoint*)nativeHandle)->ParamOnFirst();
}

 Standard_Real OCIntf_SectionPoint::ParamOnSecond()
{
  return ((Intf_SectionPoint*)nativeHandle)->ParamOnSecond();
}

 OCIntf_PIType OCIntf_SectionPoint::TypeOnFirst()
{
  return (OCIntf_PIType)(((Intf_SectionPoint*)nativeHandle)->TypeOnFirst());
}

 OCIntf_PIType OCIntf_SectionPoint::TypeOnSecond()
{
  return (OCIntf_PIType)(((Intf_SectionPoint*)nativeHandle)->TypeOnSecond());
}

 void OCIntf_SectionPoint::InfoFirst(OCIntf_PIType& Dim, Standard_Integer& Add1, Standard_Integer& Add2, Standard_Real& Param)
{
  ((Intf_SectionPoint*)nativeHandle)->InfoFirst((Intf_PIType&)Dim, Add1, Add2, Param);
}

 void OCIntf_SectionPoint::InfoFirst(OCIntf_PIType& Dim, Standard_Integer& Addr, Standard_Real& Param)
{
  ((Intf_SectionPoint*)nativeHandle)->InfoFirst((Intf_PIType&)Dim, Addr, Param);
}

 void OCIntf_SectionPoint::InfoSecond(OCIntf_PIType& Dim, Standard_Integer& Add1, Standard_Integer& Add2, Standard_Real& Param)
{
  ((Intf_SectionPoint*)nativeHandle)->InfoSecond((Intf_PIType&)Dim, Add1, Add2, Param);
}

 void OCIntf_SectionPoint::InfoSecond(OCIntf_PIType& Dim, Standard_Integer& Addr, Standard_Real& Param)
{
  ((Intf_SectionPoint*)nativeHandle)->InfoSecond((Intf_PIType&)Dim, Addr, Param);
}

 Standard_Real OCIntf_SectionPoint::Incidence()
{
  return ((Intf_SectionPoint*)nativeHandle)->Incidence();
}

 System::Boolean OCIntf_SectionPoint::IsEqual(OCNaroWrappers::OCIntf_SectionPoint^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_SectionPoint*)nativeHandle)->IsEqual(*((Intf_SectionPoint*)Other->Handle)));
}

 System::Boolean OCIntf_SectionPoint::IsOnSameEdge(OCNaroWrappers::OCIntf_SectionPoint^ Other)
{
  return OCConverter::StandardBooleanToBoolean(((Intf_SectionPoint*)nativeHandle)->IsOnSameEdge(*((Intf_SectionPoint*)Other->Handle)));
}

OCIntf_SectionPoint::OCIntf_SectionPoint() 
{
  nativeHandle = new Intf_SectionPoint();
}

OCIntf_SectionPoint::OCIntf_SectionPoint(OCNaroWrappers::OCgp_Pnt^ Where, OCIntf_PIType DimeO, Standard_Integer AddrO1, Standard_Integer AddrO2, Standard_Real ParamO, OCIntf_PIType DimeT, Standard_Integer AddrT1, Standard_Integer AddrT2, Standard_Real ParamT, Standard_Real Incid) 
{
  nativeHandle = new Intf_SectionPoint(*((gp_Pnt*)Where->Handle), (Intf_PIType)DimeO, AddrO1, AddrO2, ParamO, (Intf_PIType)DimeT, AddrT1, AddrT2, ParamT, Incid);
}

OCIntf_SectionPoint::OCIntf_SectionPoint(OCNaroWrappers::OCgp_Pnt2d^ Where, OCIntf_PIType DimeO, Standard_Integer AddrO1, Standard_Real ParamO, OCIntf_PIType DimeT, Standard_Integer AddrT1, Standard_Real ParamT, Standard_Real Incid) 
{
  nativeHandle = new Intf_SectionPoint(*((gp_Pnt2d*)Where->Handle), (Intf_PIType)DimeO, AddrO1, ParamO, (Intf_PIType)DimeT, AddrT1, ParamT, Incid);
}

 void OCIntf_SectionPoint::Merge(OCNaroWrappers::OCIntf_SectionPoint^ Other)
{
  ((Intf_SectionPoint*)nativeHandle)->Merge(*((Intf_SectionPoint*)Other->Handle));
}

 void OCIntf_SectionPoint::Dump(Standard_Integer Indent)
{
  ((Intf_SectionPoint*)nativeHandle)->Dump(Indent);
}


