// File generated by CPPExt (MPV)
//
#ifndef _Intf_SectionLine_OCWrappers_HeaderFile
#define _Intf_SectionLine_OCWrappers_HeaderFile

// include native header
#include <Intf_SectionLine.hxx>
#include "../Converter.h"


#include "Intf_SeqOfSectionPoint.h"


namespace OCNaroWrappers
{

ref class OCIntf_SectionPoint;


//! Describe    a  polyline  of   intersection  between two <br>
//!          polyhedra as a sequence of points of intersection. <br>
public ref class OCIntf_SectionLine  {

protected:
  Intf_SectionLine* nativeHandle;
  OCIntf_SectionLine(OCDummy^) {};

public:
  property Intf_SectionLine* Handle
  {
    Intf_SectionLine* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIntf_SectionLine(Intf_SectionLine* nativeHandle);

// Methods PUBLIC

//! Returns number of points in this SectionLine. <br>
 /*instead*/  Standard_Integer NumberOfPoints() ;

//! Gives the point of intersection of  address <Index>  in the <br>
//!          SectionLine. <br>
//! <br>
 /*instead*/  OCIntf_SectionPoint^ GetPoint(Standard_Integer Index) ;

//! Returns True if the SectionLine is closed. <br>
 /*instead*/  System::Boolean IsClosed() ;

//! Returns True if ThePI is in the SectionLine <me>. <br>
 /*instead*/  System::Boolean Contains(OCNaroWrappers::OCIntf_SectionPoint^ ThePI) ;

//! Checks if <ThePI>  is an end of  the SectionLine. Returns 1 <br>
//!          for the beginning, 2 for the end, otherwise 0. <br>
 /*instead*/  Standard_Integer IsEnd(OCNaroWrappers::OCIntf_SectionPoint^ ThePI) ;

//! Compares two SectionLines. <br>
//! <br>
 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCIntf_SectionLine^ Other) ;

//! Constructs an empty SectionLine. <br>
OCIntf_SectionLine();

//! Copies a SectionLine. <br>
OCIntf_SectionLine(OCNaroWrappers::OCIntf_SectionLine^ Other);

//! Adds a point at the end of the SectionLine. <br>
 /*instead*/  void Append(OCNaroWrappers::OCIntf_SectionPoint^ Pi) ;

//! Concatenates   the SectionLine  <LS>  at  the  end  of  the <br>
//!          SectionLine <me>. <br>
 /*instead*/  void Append(OCNaroWrappers::OCIntf_SectionLine^ LS) ;

//! Adds a point to the beginning of the SectionLine <me>. <br>
 /*instead*/  void Prepend(OCNaroWrappers::OCIntf_SectionPoint^ Pi) ;

//! Concatenates a SectionLine  <LS>  at the  beginning  of the <br>
//!          SectionLine <me>. <br>
 /*instead*/  void Prepend(OCNaroWrappers::OCIntf_SectionLine^ LS) ;

//! Reverses the order of the elements of the SectionLine. <br>
 /*instead*/  void Reverse() ;

//! Closes the SectionLine. <br>
 /*instead*/  void Close() ;


 /*instead*/  void Dump(Standard_Integer Indent) ;

~OCIntf_SectionLine()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
