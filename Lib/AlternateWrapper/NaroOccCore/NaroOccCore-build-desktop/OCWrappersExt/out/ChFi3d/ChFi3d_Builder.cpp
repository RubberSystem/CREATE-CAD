// File generated by CPPExt (CPP file)
//

#include "ChFi3d_Builder.h"
#include "../Converter.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_HDataStructure.h"
#include "../TopOpeBRepBuild/TopOpeBRepBuild_HBuilder.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../ChFiDS/ChFiDS_Spine.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopTools/TopTools_ListOfShape.h"
#include "../Geom/Geom_Surface.h"
#include "../ChFiDS/ChFiDS_SurfData.h"
#include "../ChFiDS/ChFiDS_HElSpine.h"
#include "../BRepAdaptor/BRepAdaptor_HSurface.h"
#include "../Adaptor3d/Adaptor3d_TopolTool.h"
#include "../math/math_Vector.h"
#include "../BRepAdaptor/BRepAdaptor_HCurve2d.h"
#include "../BRepBlend/BRepBlend_Line.h"
#include "../Adaptor3d/Adaptor3d_HSurface.h"
#include "../Blend/Blend_Function.h"
#include "../Blend/Blend_FuncInv.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../Blend/Blend_SurfRstFunction.h"
#include "../Blend/Blend_SurfPointFuncInv.h"
#include "../Blend/Blend_SurfCurvFuncInv.h"
#include "../Blend/Blend_RstRstFunction.h"
#include "../Blend/Blend_CurvPointFuncInv.h"
#include "../ChFiDS/ChFiDS_Stripe.h"
#include "../BRepTopAdaptor/BRepTopAdaptor_TopolTool.h"
#include "../ChFiDS/ChFiDS_SequenceOfSurfData.h"
#include "../gp/gp_Pnt2d.h"
#include "../ChFiDS/ChFiDS_ListOfStripe.h"
#include "../ChFiDS/ChFiDS_CommonPoint.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../AppBlend/AppBlend_Approx.h"
#include "../Geom2d/Geom2d_Curve.h"


using namespace OCNaroWrappers;

OCChFi3d_Builder::OCChFi3d_Builder(ChFi3d_Builder* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

 void OCChFi3d_Builder::Delete()
{
  ((ChFi3d_Builder*)nativeHandle)->Delete();
}

OCChFi3d_Builder::OCChFi3d_Builder(OCNaroWrappers::OCTopoDS_Shape^ S, Standard_Real Ta) 
{}

 void OCChFi3d_Builder::SetParams(Standard_Real Tang, Standard_Real Tesp, Standard_Real T2d, Standard_Real TApp3d, Standard_Real TolApp2d, Standard_Real Fleche)
{
  ((ChFi3d_Builder*)nativeHandle)->SetParams(Tang, Tesp, T2d, TApp3d, TolApp2d, Fleche);
}

 void OCChFi3d_Builder::SetContinuity(OCGeomAbs_Shape InternalContinuity, Standard_Real AngularTolerance)
{
  ((ChFi3d_Builder*)nativeHandle)->SetContinuity((GeomAbs_Shape)InternalContinuity, AngularTolerance);
}

 void OCChFi3d_Builder::Remove(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  ((ChFi3d_Builder*)nativeHandle)->Remove(*((TopoDS_Edge*)E->Handle));
}

 Standard_Integer OCChFi3d_Builder::Contains(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  return ((ChFi3d_Builder*)nativeHandle)->Contains(*((TopoDS_Edge*)E->Handle));
}

 Standard_Integer OCChFi3d_Builder::Contains(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Integer& IndexInSpine)
{
  return ((ChFi3d_Builder*)nativeHandle)->Contains(*((TopoDS_Edge*)E->Handle), IndexInSpine);
}

 Standard_Integer OCChFi3d_Builder::NbElements()
{
  return ((ChFi3d_Builder*)nativeHandle)->NbElements();
}

OCChFiDS_Spine^ OCChFi3d_Builder::Value(Standard_Integer I)
{
  Handle(ChFiDS_Spine) tmp = ((ChFi3d_Builder*)nativeHandle)->Value(I);
  return gcnew OCChFiDS_Spine(&tmp);
}

 Standard_Real OCChFi3d_Builder::Length(Standard_Integer IC)
{
  return ((ChFi3d_Builder*)nativeHandle)->Length(IC);
}

OCTopoDS_Vertex^ OCChFi3d_Builder::FirstVertex(Standard_Integer IC)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = ((ChFi3d_Builder*)nativeHandle)->FirstVertex(IC);
  return gcnew OCTopoDS_Vertex(tmp);
}

OCTopoDS_Vertex^ OCChFi3d_Builder::LastVertex(Standard_Integer IC)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = ((ChFi3d_Builder*)nativeHandle)->LastVertex(IC);
  return gcnew OCTopoDS_Vertex(tmp);
}

 Standard_Real OCChFi3d_Builder::Abscissa(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  return ((ChFi3d_Builder*)nativeHandle)->Abscissa(IC, *((TopoDS_Vertex*)V->Handle));
}

 Standard_Real OCChFi3d_Builder::RelativeAbscissa(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  return ((ChFi3d_Builder*)nativeHandle)->RelativeAbscissa(IC, *((TopoDS_Vertex*)V->Handle));
}

 System::Boolean OCChFi3d_Builder::ClosedAndTangent(Standard_Integer IC)
{
  return OCConverter::StandardBooleanToBoolean(((ChFi3d_Builder*)nativeHandle)->ClosedAndTangent(IC));
}

 System::Boolean OCChFi3d_Builder::Closed(Standard_Integer IC)
{
  return OCConverter::StandardBooleanToBoolean(((ChFi3d_Builder*)nativeHandle)->Closed(IC));
}

 void OCChFi3d_Builder::Compute()
{
  ((ChFi3d_Builder*)nativeHandle)->Compute();
}

 System::Boolean OCChFi3d_Builder::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((ChFi3d_Builder*)nativeHandle)->IsDone());
}

OCTopoDS_Shape^ OCChFi3d_Builder::Shape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((ChFi3d_Builder*)nativeHandle)->Shape();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopTools_ListOfShape^ OCChFi3d_Builder::Generated(OCNaroWrappers::OCTopoDS_Shape^ EouV)
{
  TopTools_ListOfShape* tmp = new TopTools_ListOfShape();
  *tmp = ((ChFi3d_Builder*)nativeHandle)->Generated(*((TopoDS_Shape*)EouV->Handle));
  return gcnew OCTopTools_ListOfShape(tmp);
}

 Standard_Integer OCChFi3d_Builder::NbFaultyContours()
{
  return ((ChFi3d_Builder*)nativeHandle)->NbFaultyContours();
}

 Standard_Integer OCChFi3d_Builder::FaultyContour(Standard_Integer I)
{
  return ((ChFi3d_Builder*)nativeHandle)->FaultyContour(I);
}

 Standard_Integer OCChFi3d_Builder::NbComputedSurfaces(Standard_Integer IC)
{
  return ((ChFi3d_Builder*)nativeHandle)->NbComputedSurfaces(IC);
}

OCGeom_Surface^ OCChFi3d_Builder::ComputedSurface(Standard_Integer IC, Standard_Integer IS)
{
  Handle(Geom_Surface) tmp = ((ChFi3d_Builder*)nativeHandle)->ComputedSurface(IC, IS);
  return gcnew OCGeom_Surface(&tmp);
}

 Standard_Integer OCChFi3d_Builder::NbFaultyVertices()
{
  return ((ChFi3d_Builder*)nativeHandle)->NbFaultyVertices();
}

OCTopoDS_Vertex^ OCChFi3d_Builder::FaultyVertex(Standard_Integer IV)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = ((ChFi3d_Builder*)nativeHandle)->FaultyVertex(IV);
  return gcnew OCTopoDS_Vertex(tmp);
}

 System::Boolean OCChFi3d_Builder::HasResult()
{
  return OCConverter::StandardBooleanToBoolean(((ChFi3d_Builder*)nativeHandle)->HasResult());
}

OCTopoDS_Shape^ OCChFi3d_Builder::BadShape()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((ChFi3d_Builder*)nativeHandle)->BadShape();
  return gcnew OCTopoDS_Shape(tmp);
}

 OCChFiDS_ErrorStatus OCChFi3d_Builder::StripeStatus(Standard_Integer IC)
{
  return (OCChFiDS_ErrorStatus)(((ChFi3d_Builder*)nativeHandle)->StripeStatus(IC));
}

 void OCChFi3d_Builder::Reset()
{
  ((ChFi3d_Builder*)nativeHandle)->Reset();
}

OCTopOpeBRepBuild_HBuilder^ OCChFi3d_Builder::Builder()
{
  Handle(TopOpeBRepBuild_HBuilder) tmp = ((ChFi3d_Builder*)nativeHandle)->Builder();
  return gcnew OCTopOpeBRepBuild_HBuilder(&tmp);
}

 System::Boolean OCChFi3d_Builder::SplitKPart(OCNaroWrappers::OCChFiDS_SurfData^ Data, OCNaroWrappers::OCChFiDS_SequenceOfSurfData^ SetData, OCNaroWrappers::OCChFiDS_Spine^ Spine, Standard_Integer Iedge, OCNaroWrappers::OCAdaptor3d_HSurface^ S1, OCNaroWrappers::OCAdaptor3d_TopolTool^ I1, OCNaroWrappers::OCAdaptor3d_HSurface^ S2, OCNaroWrappers::OCAdaptor3d_TopolTool^ I2, System::Boolean& Intf, System::Boolean& Intl)
{
  return OCConverter::StandardBooleanToBoolean(((ChFi3d_Builder*)nativeHandle)->SplitKPart(*((Handle_ChFiDS_SurfData*)Data->Handle), *((ChFiDS_SequenceOfSurfData*)SetData->Handle), *((Handle_ChFiDS_Spine*)Spine->Handle), Iedge, *((Handle_Adaptor3d_HSurface*)S1->Handle), *((Handle_Adaptor3d_TopolTool*)I1->Handle), *((Handle_Adaptor3d_HSurface*)S2->Handle), *((Handle_Adaptor3d_TopolTool*)I2->Handle), (Standard_Boolean&)(Intf), (Standard_Boolean&)(Intl)));
}

 Standard_Integer OCChFi3d_Builder::PerformTwoCornerbyInter(Standard_Integer Index)
{
  return ((ChFi3d_Builder*)nativeHandle)->PerformTwoCornerbyInter(Index);
}


