// File generated by CPPExt (MPV)
//
#ifndef _ChFi3d_FilBuilder_OCWrappers_HeaderFile
#define _ChFi3d_FilBuilder_OCWrappers_HeaderFile

// include native header
#include <ChFi3d_FilBuilder.hxx>
#include "../Converter.h"

#include "ChFi3d_Builder.h"

#include "../BlendFunc/BlendFunc_SectionShape.h"
#include "ChFi3d_Builder.h"
#include "ChFi3d_FilletShape.h"
#include "../TopAbs/TopAbs_Orientation.h"
#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopoDS_Edge;
ref class OCLaw_Function;
ref class OCTopoDS_Vertex;
ref class OCgp_XY;
ref class OCChFiDS_SecHArray1;
ref class OCChFiDS_SurfData;
ref class OCChFiDS_HElSpine;
ref class OCChFiDS_Spine;
ref class OCBRepAdaptor_HSurface;
ref class OCAdaptor3d_TopolTool;
ref class OCmath_Vector;
ref class OCBRepAdaptor_HCurve2d;
ref class OCChFiDS_SequenceOfSurfData;
ref class OCBRepBlend_Line;
ref class OCChFiDS_Stripe;
ref class OCChFiDS_ListOfStripe;


//! Tool  of  construction of  fillets 3d on  edges. <br>
public ref class OCChFi3d_FilBuilder  : public OCChFi3d_Builder {

protected:
  // dummy constructor;
  OCChFi3d_FilBuilder(OCDummy^) : OCChFi3d_Builder((OCDummy^)nullptr) {};

public:

// constructor from native
OCChFi3d_FilBuilder(ChFi3d_FilBuilder* nativeHandle);

// Methods PUBLIC


OCChFi3d_FilBuilder(OCNaroWrappers::OCTopoDS_Shape^ S, OCChFi3d_FilletShape FShape, Standard_Real Ta);

//! Sets the type of fillet surface. <br>
 /*instead*/  void SetFilletShape(OCChFi3d_FilletShape FShape) ;

//! Returns the type of fillet surface. <br>
 /*instead*/  OCChFi3d_FilletShape GetFilletShape() ;

//! initialisation of  a contour with the first edge <br>
//!          (the following are found  by propagation). <br>
//!          Attention, you  need  to start  with  SetRadius. <br>
//! <br>
 /*instead*/  void Add(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! initialisation of the constant vector the corresponding  1st  edge. <br>
//! <br>
 /*instead*/  void Add(Standard_Real Radius, OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Set the radius of the contour of index IC. <br>
 /*instead*/  void SetRadius(OCNaroWrappers::OCLaw_Function^ C, Standard_Integer IC, Standard_Integer IinC) ;

//! Returns true the contour is flaged as edge constant. <br>
 /*instead*/  System::Boolean IsConstant(Standard_Integer IC) ;

//! Returns the vector if the contour is flagged as edge <br>
//!          constant. <br>
 /*instead*/  Standard_Real Radius(Standard_Integer IC) ;

//! Reset all vectors of contour IC. <br>
 /*instead*/  void ResetContour(Standard_Integer IC) ;

//! Set a constant on edge E of  the contour of <br>
//!          index IC. Since  then  E is flagged as constant. <br>
 /*instead*/  void SetRadius(Standard_Real Radius, Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Extracts the flag constant and the vector of edge E. <br>
 /*instead*/  void UnSet(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Set a vector on vertex  V of  the contour of index IC. <br>
 /*instead*/  void SetRadius(Standard_Real Radius, Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V) ;

//! Extracts the vector of  the vertex V. <br>
 /*instead*/  void UnSet(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V) ;

//! Set  a vertex on the point of parametre U in the edge IinC <br>
//!          of  the contour of index IC <br>
 /*instead*/  void SetRadius(OCNaroWrappers::OCgp_XY^ UandR, Standard_Integer IC, Standard_Integer IinC) ;

//! Returns true E is flagged as edge constant. <br>
 /*instead*/  System::Boolean IsConstant(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Returns the vector if E is flagged as edge constant. <br>
 /*instead*/  Standard_Real Radius(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Returns in First and Last  les extremities of  the <br>
//!          part of variable  vector framing E, returns <br>
//!          False  if  E is flagged as edge constant. <br>
 /*instead*/  System::Boolean GetBounds(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real& First, Standard_Real& Last) ;

//! Returns the rule of  elementary  evolution of  the <br>
//!          part to  variable vector framing E, returns a <br>
//!          rule zero if E is flagged as edge constant. <br>
 /*instead*/  OCLaw_Function^ GetLaw(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! Sets the rule of elementary evolution of  the <br>
//!          part to variable  vector framing E. <br>
 /*instead*/  void SetLaw(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCLaw_Function^ L) ;


 /*instead*/  void Simulate(Standard_Integer IC) ;


 /*instead*/  Standard_Integer NbSurf(Standard_Integer IC) ;


 /*instead*/  OCChFiDS_SecHArray1^ Sect(Standard_Integer IC, Standard_Integer IS) ;

~OCChFi3d_FilBuilder()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
