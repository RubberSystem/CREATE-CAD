// File generated by CPPExt (MPV)
//
#ifndef _ChFi3d_Builder_OCWrappers_HeaderFile
#define _ChFi3d_Builder_OCWrappers_HeaderFile

// include native header
#include <ChFi3d_Builder.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Shape.h"
#include "../GeomAbs/GeomAbs_Shape.h"
#include "../ChFiDS/ChFiDS_Map.h"
#include "../ChFiDS/ChFiDS_ListOfStripe.h"
#include "../ChFiDS/ChFiDS_StripeMap.h"
#include "../ChFiDS/ChFiDS_Regularities.h"
#include "../TopTools/TopTools_ListOfShape.h"
#include "../TopTools/TopTools_DataMapOfShapeListOfInteger.h"
#include "../ChFiDS/ChFiDS_ErrorStatus.h"
#include "../TopAbs/TopAbs_Orientation.h"
#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{

ref class OCTopOpeBRepDS_HDataStructure;
ref class OCTopOpeBRepBuild_HBuilder;
ref class OCTopoDS_Shape;
ref class OCTopoDS_Edge;
ref class OCChFiDS_Spine;
ref class OCTopoDS_Vertex;
ref class OCTopTools_ListOfShape;
ref class OCGeom_Surface;
ref class OCChFiDS_SurfData;
ref class OCChFiDS_HElSpine;
ref class OCBRepAdaptor_HSurface;
ref class OCAdaptor3d_TopolTool;
ref class OCmath_Vector;
ref class OCBRepAdaptor_HCurve2d;
ref class OCBRepBlend_Line;
ref class OCAdaptor3d_HSurface;
ref class OCBlend_Function;
ref class OCBlend_FuncInv;
ref class OCAdaptor2d_HCurve2d;
ref class OCBlend_SurfRstFunction;
ref class OCBlend_SurfPointFuncInv;
ref class OCBlend_SurfCurvFuncInv;
ref class OCBlend_RstRstFunction;
ref class OCBlend_CurvPointFuncInv;
ref class OCChFiDS_Stripe;
ref class OCBRepTopAdaptor_TopolTool;
ref class OCChFiDS_SequenceOfSurfData;
ref class OCgp_Pnt2d;
ref class OCChFiDS_ListOfStripe;
ref class OCChFiDS_CommonPoint;
ref class OCTopoDS_Face;
ref class OCAppBlend_Approx;
ref class OCGeom2d_Curve;


//! Root  class  for calculation of  surfaces (fillets, <br>
//!          chamfers)  destined  to smooth edges  of <br>
//!          a gap on a Shape and the reconstruction of  the   Shape. <br>
public ref class OCChFi3d_Builder  {

protected:
  ChFi3d_Builder* nativeHandle;
  OCChFi3d_Builder(OCDummy^) {};

public:
  property ChFi3d_Builder* Handle
  {
    ChFi3d_Builder* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCChFi3d_Builder(ChFi3d_Builder* nativeHandle);

// Methods PUBLIC


virtual /*instead*/  void Delete() ;


OCChFi3d_Builder(OCNaroWrappers::OCTopoDS_Shape^ S, Standard_Real Ta);


 /*instead*/  void SetParams(Standard_Real Tang, Standard_Real Tesp, Standard_Real T2d, Standard_Real TApp3d, Standard_Real TolApp2d, Standard_Real Fleche) ;


 /*instead*/  void SetContinuity(OCGeomAbs_Shape InternalContinuity, Standard_Real AngularTolerance) ;

//! extracts from  the list the contour containing edge E. <br>
//! <br>
 /*instead*/  void Remove(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! gives the number of  the contour containing E or 0 <br>
//!          if E does  not  belong to  any  contour. <br>
 /*instead*/  Standard_Integer Contains(OCNaroWrappers::OCTopoDS_Edge^ E) ;

//! gives  the number of  the contour containing E or 0 <br>
//!          if E does  not  belong  to  any  contour. <br>
//!	        Sets in IndexInSpine the index of E in the contour if it's found <br>
 /*instead*/  Standard_Integer Contains(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Integer& IndexInSpine) ;

//! gives the number of  disjoint contours on  which <br>
//!          the  fillets  are  calculated <br>
 /*instead*/  Standard_Integer NbElements() ;

//! gives the n'th set  of edges (contour) <br>//! if I >NbElements() <br>
 /*instead*/  OCChFiDS_Spine^ Value(Standard_Integer I) ;

//! returns the length of  the contour of index IC. <br>
 /*instead*/  Standard_Real Length(Standard_Integer IC) ;

//! returns the First vertex V of <br>
//!          the contour of index IC. <br>
 /*instead*/  OCTopoDS_Vertex^ FirstVertex(Standard_Integer IC) ;

//! returns the Last vertex V of <br>
//!          the contour of index IC. <br>
 /*instead*/  OCTopoDS_Vertex^ LastVertex(Standard_Integer IC) ;

//! returns the abscissa of the vertex V on <br>
//!          the contour of index IC. <br>
 /*instead*/  Standard_Real Abscissa(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V) ;

//! returns the relative abscissa([0.,1.]) of the <br>
//!          vertex V on the contour of index IC. <br>
 /*instead*/  Standard_Real RelativeAbscissa(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V) ;

//! returns true if the contour of index IC is closed <br>
//!          an tangent. <br>
 /*instead*/  System::Boolean ClosedAndTangent(Standard_Integer IC) ;

//! returns true if the contour of index IC is closed <br>
 /*instead*/  System::Boolean Closed(Standard_Integer IC) ;

//! general calculation of geometry on all edges, <br>
//!          topologic reconstruction. <br>
 /*instead*/  void Compute() ;

//! returns True if the computation  is  success <br>
 /*instead*/  System::Boolean IsDone() ;

//! if (Isdone()) makes the result. <br>//! if (!Isdone()) <br>
 /*instead*/  OCTopoDS_Shape^ Shape() ;

//! Advanced  function for the history <br>
 /*instead*/  OCTopTools_ListOfShape^ Generated(OCNaroWrappers::OCTopoDS_Shape^ EouV) ;

//! Returns the number of contours on  which the calculation <br>
//!          has failed. <br>
 /*instead*/  Standard_Integer NbFaultyContours() ;

//! Returns the number of  I'th contour on  which the calculation <br>
//!          has failed. <br>
 /*instead*/  Standard_Integer FaultyContour(Standard_Integer I) ;

//! Returns the number of  surfaces calculated  on  the contour IC. <br>
 /*instead*/  Standard_Integer NbComputedSurfaces(Standard_Integer IC) ;

//! Returns the IS'th surface calculated on  the contour IC. <br>
 /*instead*/  OCGeom_Surface^ ComputedSurface(Standard_Integer IC, Standard_Integer IS) ;

//! Returns the number of vertices on  which the calculation <br>
//!          has failed. <br>
 /*instead*/  Standard_Integer NbFaultyVertices() ;

//! Returns the IV'th vertex on  which the calculation has failed. <br>
 /*instead*/  OCTopoDS_Vertex^ FaultyVertex(Standard_Integer IV) ;

//! returns True if  a partial result has  been  calculated <br>
 /*instead*/  System::Boolean HasResult() ;

//! if (HasResult()) returns partial result <br>//! if (!HasResult()) <br>
 /*instead*/  OCTopoDS_Shape^ BadShape() ;

//! for the stripe IC ,indication on the cause <br>
//!          of  failure WalkingFailure,TwistedSurface,Error, Ok <br>
 /*instead*/  OCChFiDS_ErrorStatus StripeStatus(Standard_Integer IC) ;

//! Reset all  results of   compute and returns the  algorythm <br>
//!          in  the  state  of  the  last  acquisition to <br>
//!          enable modification of contours or areas. <br>
 /*instead*/  void Reset() ;

//! Returns the Builder of  topologic operations. <br>
 /*instead*/  OCTopOpeBRepBuild_HBuilder^ Builder() ;

//! Method, implemented in the inheritants, calculates <br>
//!          the elements of construction of the surface (fillet or <br>
//!          chamfer). <br>
 /*instead*/  System::Boolean SplitKPart(OCNaroWrappers::OCChFiDS_SurfData^ Data, OCNaroWrappers::OCChFiDS_SequenceOfSurfData^ SetData, OCNaroWrappers::OCChFiDS_Spine^ Spine, Standard_Integer Iedge, OCNaroWrappers::OCAdaptor3d_HSurface^ S1, OCNaroWrappers::OCAdaptor3d_TopolTool^ I1, OCNaroWrappers::OCAdaptor3d_HSurface^ S2, OCNaroWrappers::OCAdaptor3d_TopolTool^ I2, System::Boolean& Intf, System::Boolean& Intl) ;


 /*instead*/  Standard_Integer PerformTwoCornerbyInter(Standard_Integer Index) ;

~OCChFi3d_Builder()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
