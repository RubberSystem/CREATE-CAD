// File generated by CPPExt (CPP file)
//

#include "ChFi3d_FilBuilder.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../Law/Law_Function.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../gp/gp_XY.h"
#include "../ChFiDS/ChFiDS_SecHArray1.h"
#include "../ChFiDS/ChFiDS_SurfData.h"
#include "../ChFiDS/ChFiDS_HElSpine.h"
#include "../ChFiDS/ChFiDS_Spine.h"
#include "../BRepAdaptor/BRepAdaptor_HSurface.h"
#include "../Adaptor3d/Adaptor3d_TopolTool.h"
#include "../math/math_Vector.h"
#include "../BRepAdaptor/BRepAdaptor_HCurve2d.h"
#include "../ChFiDS/ChFiDS_SequenceOfSurfData.h"
#include "../BRepBlend/BRepBlend_Line.h"
#include "../ChFiDS/ChFiDS_Stripe.h"
#include "../ChFiDS/ChFiDS_ListOfStripe.h"


using namespace OCNaroWrappers;

OCChFi3d_FilBuilder::OCChFi3d_FilBuilder(ChFi3d_FilBuilder* nativeHandle) : OCChFi3d_Builder((OCDummy^)nullptr)

{
  this->nativeHandle = nativeHandle;
}

OCChFi3d_FilBuilder::OCChFi3d_FilBuilder(OCNaroWrappers::OCTopoDS_Shape^ S, OCChFi3d_FilletShape FShape, Standard_Real Ta) : OCChFi3d_Builder((OCDummy^)nullptr)

{
  nativeHandle = new ChFi3d_FilBuilder(*((TopoDS_Shape*)S->Handle), (ChFi3d_FilletShape)FShape, Ta);
}

 void OCChFi3d_FilBuilder::SetFilletShape(OCChFi3d_FilletShape FShape)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->SetFilletShape((ChFi3d_FilletShape)FShape);
}

 OCChFi3d_FilletShape OCChFi3d_FilBuilder::GetFilletShape()
{
  return (OCChFi3d_FilletShape)(((ChFi3d_FilBuilder*)nativeHandle)->GetFilletShape());
}

 void OCChFi3d_FilBuilder::Add(OCNaroWrappers::OCTopoDS_Edge^ E)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->Add(*((TopoDS_Edge*)E->Handle));
}

 void OCChFi3d_FilBuilder::Add(Standard_Real Radius, OCNaroWrappers::OCTopoDS_Edge^ E)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->Add(Radius, *((TopoDS_Edge*)E->Handle));
}

 void OCChFi3d_FilBuilder::SetRadius(OCNaroWrappers::OCLaw_Function^ C, Standard_Integer IC, Standard_Integer IinC)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->SetRadius(*((Handle_Law_Function*)C->Handle), IC, IinC);
}

 System::Boolean OCChFi3d_FilBuilder::IsConstant(Standard_Integer IC)
{
  return OCConverter::StandardBooleanToBoolean(((ChFi3d_FilBuilder*)nativeHandle)->IsConstant(IC));
}

 Standard_Real OCChFi3d_FilBuilder::Radius(Standard_Integer IC)
{
  return ((ChFi3d_FilBuilder*)nativeHandle)->Radius(IC);
}

 void OCChFi3d_FilBuilder::ResetContour(Standard_Integer IC)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->ResetContour(IC);
}

 void OCChFi3d_FilBuilder::SetRadius(Standard_Real Radius, Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->SetRadius(Radius, IC, *((TopoDS_Edge*)E->Handle));
}

 void OCChFi3d_FilBuilder::UnSet(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->UnSet(IC, *((TopoDS_Edge*)E->Handle));
}

 void OCChFi3d_FilBuilder::SetRadius(Standard_Real Radius, Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->SetRadius(Radius, IC, *((TopoDS_Vertex*)V->Handle));
}

 void OCChFi3d_FilBuilder::UnSet(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->UnSet(IC, *((TopoDS_Vertex*)V->Handle));
}

 void OCChFi3d_FilBuilder::SetRadius(OCNaroWrappers::OCgp_XY^ UandR, Standard_Integer IC, Standard_Integer IinC)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->SetRadius(*((gp_XY*)UandR->Handle), IC, IinC);
}

 System::Boolean OCChFi3d_FilBuilder::IsConstant(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E)
{
  return OCConverter::StandardBooleanToBoolean(((ChFi3d_FilBuilder*)nativeHandle)->IsConstant(IC, *((TopoDS_Edge*)E->Handle)));
}

 Standard_Real OCChFi3d_FilBuilder::Radius(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E)
{
  return ((ChFi3d_FilBuilder*)nativeHandle)->Radius(IC, *((TopoDS_Edge*)E->Handle));
}

 System::Boolean OCChFi3d_FilBuilder::GetBounds(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real& First, Standard_Real& Last)
{
  return OCConverter::StandardBooleanToBoolean(((ChFi3d_FilBuilder*)nativeHandle)->GetBounds(IC, *((TopoDS_Edge*)E->Handle), First, Last));
}

OCLaw_Function^ OCChFi3d_FilBuilder::GetLaw(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E)
{
  Handle(Law_Function) tmp = ((ChFi3d_FilBuilder*)nativeHandle)->GetLaw(IC, *((TopoDS_Edge*)E->Handle));
  return gcnew OCLaw_Function(&tmp);
}

 void OCChFi3d_FilBuilder::SetLaw(Standard_Integer IC, OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCLaw_Function^ L)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->SetLaw(IC, *((TopoDS_Edge*)E->Handle), *((Handle_Law_Function*)L->Handle));
}

 void OCChFi3d_FilBuilder::Simulate(Standard_Integer IC)
{
  ((ChFi3d_FilBuilder*)nativeHandle)->Simulate(IC);
}

 Standard_Integer OCChFi3d_FilBuilder::NbSurf(Standard_Integer IC)
{
  return ((ChFi3d_FilBuilder*)nativeHandle)->NbSurf(IC);
}

OCChFiDS_SecHArray1^ OCChFi3d_FilBuilder::Sect(Standard_Integer IC, Standard_Integer IS)
{
  Handle(ChFiDS_SecHArray1) tmp = ((ChFi3d_FilBuilder*)nativeHandle)->Sect(IC, IS);
  return gcnew OCChFiDS_SecHArray1(&tmp);
}


