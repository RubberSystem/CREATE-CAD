// File generated by CPPExt (Transient)
//
#ifndef _Geom2d_Line_OCWrappers_HeaderFile
#define _Geom2d_Line_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom2d_Line.hxx>
#include "../Converter.h"

#include "Geom2d_Curve.h"

#include "../gp/gp_Ax2d.h"
#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCgp_Ax2d;
ref class OCgp_Lin2d;
ref class OCgp_Pnt2d;
ref class OCgp_Dir2d;
ref class OCgp_Vec2d;
ref class OCgp_Trsf2d;
ref class OCGeom2d_Geometry;


//! Describes an infinite line in the plane (2D space). <br>
//! A line is defined and positioned in the plane with an <br>
//! axis (gp_Ax2d object) which gives it an origin and a unit vector. <br>
//! The Geom2d_Line line is parameterized as follows: <br>
//! P (U) = O + U*Dir <br>
//! where: <br>
//! - P is the point of parameter U, <br>
//! - O is the origin and Dir the unit vector of its positioning axis. <br>
//!   The parameter range is ] -infinite, +infinite [. <br>
//! The orientation of the line is given by the unit vector <br>
//! of its positioning axis. <br>
//! See Also <br>
//! GCE2d_MakeLine which provides functions for more <br>
//! complex line constructions <br>
//! gp_Ax2d <br>
//! gp_Lin2d for an equivalent, non-parameterized data structure. <br>
public ref class OCGeom2d_Line : OCGeom2d_Curve {

protected:
  // dummy constructor;
  OCGeom2d_Line(OCDummy^) : OCGeom2d_Curve((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom2d_Line(Handle(Geom2d_Line)* nativeHandle);

// Methods PUBLIC


//!  Creates a line located in 2D space with the axis placement A. <br>
//!  The Location of A is the origin of the line. <br>
OCGeom2d_Line(OCNaroWrappers::OCgp_Ax2d^ A);


//!  Creates a line by conversion of the gp_Lin2d line L. <br>
OCGeom2d_Line(OCNaroWrappers::OCgp_Lin2d^ L);

//! Constructs a line passing through point P and parallel to <br>
//!   vector V (P and V are, respectively, the origin <br>
//!   and the unit vector of the positioning axis of the line). <br>
OCGeom2d_Line(OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Dir2d^ V);


//!  Set <me> so that <me> has the same geometric properties as L. <br>
 /*instead*/  void SetLin2d(OCNaroWrappers::OCgp_Lin2d^ L) ;

//! changes the direction of the line. <br>
 /*instead*/  void SetDirection(OCNaroWrappers::OCgp_Dir2d^ V) ;

//! changes the direction of the line. <br>
 /*instead*/  OCgp_Dir2d^ Direction() ;


//!  Changes the "Location" point (origin) of the line. <br>
 /*instead*/  void SetLocation(OCNaroWrappers::OCgp_Pnt2d^ P) ;


//!  Changes the "Location" point (origin) of the line. <br>
 /*instead*/  OCgp_Pnt2d^ Location() ;


//!  Changes the "Location" and a the "Direction" of <me>. <br>
 /*instead*/  void SetPosition(OCNaroWrappers::OCgp_Ax2d^ A) ;


 /*instead*/  OCgp_Ax2d^ Position() ;


//!  Returns non persistent line from gp with the same geometric <br>
//!  properties as <me> <br>
 /*instead*/  OCgp_Lin2d^ Lin2d() ;

//! Changes the orientation of this line. As a result, the <br>
//! unit vector of the positioning axis of this line is reversed. <br>
 /*instead*/  void Reverse() ;

//! Computes the parameter on the reversed line for the <br>
//! point of parameter U on this line. <br>
//! For a line, the returned value is -U. <br>
 /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;

//! Returns RealFirst  from  Standard. <br>
 /*instead*/  Standard_Real FirstParameter() ;

//! Returns RealLast  from Standard <br>
 /*instead*/  Standard_Real LastParameter() ;

//! Returns False <br>
 /*instead*/  System::Boolean IsClosed() ;

//! Returns False <br>
 /*instead*/  System::Boolean IsPeriodic() ;

//! Returns GeomAbs_CN, which is the global continuity of any line. <br>
 /*instead*/  OCGeomAbs_Shape Continuity() ;

//! Computes the distance between <me> and the point P. <br>
 /*instead*/  Standard_Real Distance(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Returns True. <br>
 /*instead*/  System::Boolean IsCN(Standard_Integer N) ;

//! Returns in P the point of parameter U. <br>
//!  P (U) = O + U * Dir where O is the "Location" point of the <br>
//!  line and Dir the direction of the line. <br>
 /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P) ;


//!  Returns the point P of parameter u and the first derivative V1. <br>
 /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1) ;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. V2 is a vector with null magnitude <br>
//!  for a line. <br>
 /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;


//!  V2 and V3 are vectors with null magnitude for a line. <br>
 /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) ;

//! For the point of parameter U of this line, computes <br>
//! the vector corresponding to the Nth derivative. <br>
//! Note: if N is greater than or equal to 2, the result is a <br>
//! vector with null magnitude. <br>
//! Exceptions Standard_RangeError if N is less than 1. <br>
 /*instead*/  OCgp_Vec2d^ DN(Standard_Real U, Standard_Integer N) ;

//! Applies the transformation T to this line. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Computes the parameter on the line transformed by <br>
//! T for the point of parameter U on this line. <br>
//! For a line, the returned value is equal to U multiplied <br>
//! by the scale factor of transformation T. <br>
virtual /*instead*/  Standard_Real TransformedParameter(Standard_Real U, OCNaroWrappers::OCgp_Trsf2d^ T) override;

//! Returns the coefficient required to compute the <br>
//! parametric transformation of this line when <br>
//! transformation T is applied. This coefficient is the <br>
//! ratio between the parameter of a point on this line <br>
//! and the parameter of the transformed point on the <br>
//! new line transformed by T. <br>
//! For a line, the returned value is the scale factor of the transformation T. <br>
virtual /*instead*/  Standard_Real ParametricTransformation(OCNaroWrappers::OCgp_Trsf2d^ T) override;

//! Creates a new object, which is a copy of this line. <br>
 /*instead*/  OCGeom2d_Geometry^ Copy() ;

~OCGeom2d_Line()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
