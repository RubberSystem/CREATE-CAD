// File generated by CPPExt (CPP file)
//

#include "Geom2d_BSplineCurve.h"
#include "../Converter.h"
#include "../TColgp/TColgp_HArray1OfPnt2d.h"
#include "../TColStd/TColStd_HArray1OfReal.h"
#include "../TColStd/TColStd_HArray1OfInteger.h"
#include "../TColgp/TColgp_Array1OfPnt2d.h"
#include "../TColStd/TColStd_Array1OfReal.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Trsf2d.h"
#include "Geom2d_Geometry.h"


using namespace OCNaroWrappers;

OCGeom2d_BSplineCurve::OCGeom2d_BSplineCurve(Handle(Geom2d_BSplineCurve)* nativeHandle) : OCGeom2d_BoundedCurve((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom2d_BSplineCurve(*nativeHandle);
}

OCGeom2d_BSplineCurve::OCGeom2d_BSplineCurve(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Multiplicities, Standard_Integer Degree, System::Boolean Periodic) : OCGeom2d_BoundedCurve((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_BSplineCurve(new Geom2d_BSplineCurve(*((TColgp_Array1OfPnt2d*)Poles->Handle), *((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Multiplicities->Handle), Degree, OCConverter::BooleanToStandardBoolean(Periodic)));
}

OCGeom2d_BSplineCurve::OCGeom2d_BSplineCurve(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles, OCNaroWrappers::OCTColStd_Array1OfReal^ Weights, OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Multiplicities, Standard_Integer Degree, System::Boolean Periodic) : OCGeom2d_BoundedCurve((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_BSplineCurve(new Geom2d_BSplineCurve(*((TColgp_Array1OfPnt2d*)Poles->Handle), *((TColStd_Array1OfReal*)Weights->Handle), *((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Multiplicities->Handle), Degree, OCConverter::BooleanToStandardBoolean(Periodic)));
}

 void OCGeom2d_BSplineCurve::IncreaseDegree(Standard_Integer Degree)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->IncreaseDegree(Degree);
}

 void OCGeom2d_BSplineCurve::IncreaseMultiplicity(Standard_Integer Index, Standard_Integer M)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->IncreaseMultiplicity(Index, M);
}

 void OCGeom2d_BSplineCurve::IncreaseMultiplicity(Standard_Integer I1, Standard_Integer I2, Standard_Integer M)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->IncreaseMultiplicity(I1, I2, M);
}

 void OCGeom2d_BSplineCurve::IncrementMultiplicity(Standard_Integer I1, Standard_Integer I2, Standard_Integer M)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->IncrementMultiplicity(I1, I2, M);
}

 void OCGeom2d_BSplineCurve::InsertKnot(Standard_Real U, Standard_Integer M, Standard_Real ParametricTolerance)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->InsertKnot(U, M, ParametricTolerance);
}

 void OCGeom2d_BSplineCurve::InsertKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ Knots, OCNaroWrappers::OCTColStd_Array1OfInteger^ Mults, Standard_Real ParametricTolerance, System::Boolean Add)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->InsertKnots(*((TColStd_Array1OfReal*)Knots->Handle), *((TColStd_Array1OfInteger*)Mults->Handle), ParametricTolerance, OCConverter::BooleanToStandardBoolean(Add));
}

 System::Boolean OCGeom2d_BSplineCurve::RemoveKnot(Standard_Integer Index, Standard_Integer M, Standard_Real Tolerance)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_BSplineCurve*)nativeHandle))->RemoveKnot(Index, M, Tolerance));
}

 void OCGeom2d_BSplineCurve::InsertPoleAfter(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Weight)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->InsertPoleAfter(Index, *((gp_Pnt2d*)P->Handle), Weight);
}

 void OCGeom2d_BSplineCurve::InsertPoleBefore(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Weight)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->InsertPoleBefore(Index, *((gp_Pnt2d*)P->Handle), Weight);
}

 void OCGeom2d_BSplineCurve::RemovePole(Standard_Integer Index)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->RemovePole(Index);
}

 void OCGeom2d_BSplineCurve::Reverse()
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Reverse();
}

 Standard_Real OCGeom2d_BSplineCurve::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->ReversedParameter(U);
}

 void OCGeom2d_BSplineCurve::Segment(Standard_Real U1, Standard_Real U2)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Segment(U1, U2);
}

 void OCGeom2d_BSplineCurve::SetKnot(Standard_Integer Index, Standard_Real K)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetKnot(Index, K);
}

 void OCGeom2d_BSplineCurve::SetKnots(OCNaroWrappers::OCTColStd_Array1OfReal^ K)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetKnots(*((TColStd_Array1OfReal*)K->Handle));
}

 void OCGeom2d_BSplineCurve::SetKnot(Standard_Integer Index, Standard_Real K, Standard_Integer M)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetKnot(Index, K, M);
}

 void OCGeom2d_BSplineCurve::PeriodicNormalization(Standard_Real& U)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->PeriodicNormalization(U);
}

 void OCGeom2d_BSplineCurve::SetPeriodic()
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetPeriodic();
}

 void OCGeom2d_BSplineCurve::SetOrigin(Standard_Integer Index)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetOrigin(Index);
}

 void OCGeom2d_BSplineCurve::SetNotPeriodic()
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetNotPeriodic();
}

 void OCGeom2d_BSplineCurve::SetPole(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetPole(Index, *((gp_Pnt2d*)P->Handle));
}

 void OCGeom2d_BSplineCurve::SetPole(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Weight)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetPole(Index, *((gp_Pnt2d*)P->Handle), Weight);
}

 void OCGeom2d_BSplineCurve::SetWeight(Standard_Integer Index, Standard_Real Weight)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->SetWeight(Index, Weight);
}

 void OCGeom2d_BSplineCurve::MovePoint(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Integer Index1, Standard_Integer Index2, Standard_Integer& FirstModifiedPole, Standard_Integer& LastModifiedPole)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->MovePoint(U, *((gp_Pnt2d*)P->Handle), Index1, Index2, FirstModifiedPole, LastModifiedPole);
}

 void OCGeom2d_BSplineCurve::MovePointAndTangent(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ Tangent, Standard_Real Tolerance, Standard_Integer StartingCondition, Standard_Integer EndingCondition, Standard_Integer& ErrorStatus)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->MovePointAndTangent(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)Tangent->Handle), Tolerance, StartingCondition, EndingCondition, ErrorStatus);
}

 System::Boolean OCGeom2d_BSplineCurve::IsCN(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_BSplineCurve*)nativeHandle))->IsCN(N));
}

 System::Boolean OCGeom2d_BSplineCurve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_BSplineCurve*)nativeHandle))->IsClosed());
}

 System::Boolean OCGeom2d_BSplineCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_BSplineCurve*)nativeHandle))->IsPeriodic());
}

 System::Boolean OCGeom2d_BSplineCurve::IsRational()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_BSplineCurve*)nativeHandle))->IsRational());
}

 OCGeomAbs_Shape OCGeom2d_BSplineCurve::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Continuity());
}

 Standard_Integer OCGeom2d_BSplineCurve::Degree()
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Degree();
}

 void OCGeom2d_BSplineCurve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->D0(U, *((gp_Pnt2d*)P->Handle));
}

 void OCGeom2d_BSplineCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle));
}

 void OCGeom2d_BSplineCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCGeom2d_BSplineCurve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->D3(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCGeom2d_BSplineCurve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

OCgp_Pnt2d^ OCGeom2d_BSplineCurve::LocalValue(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LocalValue(U, FromK1, ToK2);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCGeom2d_BSplineCurve::LocalD0(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LocalD0(U, FromK1, ToK2, *((gp_Pnt2d*)P->Handle));
}

 void OCGeom2d_BSplineCurve::LocalD1(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LocalD1(U, FromK1, ToK2, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle));
}

 void OCGeom2d_BSplineCurve::LocalD2(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LocalD2(U, FromK1, ToK2, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCGeom2d_BSplineCurve::LocalD3(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LocalD3(U, FromK1, ToK2, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCGeom2d_BSplineCurve::LocalDN(Standard_Real U, Standard_Integer FromK1, Standard_Integer ToK2, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LocalDN(U, FromK1, ToK2, N);
  return gcnew OCgp_Vec2d(tmp);
}

OCgp_Pnt2d^ OCGeom2d_BSplineCurve::EndPoint()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->EndPoint();
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Integer OCGeom2d_BSplineCurve::FirstUKnotIndex()
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->FirstUKnotIndex();
}

 Standard_Real OCGeom2d_BSplineCurve::FirstParameter()
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->FirstParameter();
}

 Standard_Real OCGeom2d_BSplineCurve::Knot(Standard_Integer Index)
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Knot(Index);
}

 void OCGeom2d_BSplineCurve::Knots(OCNaroWrappers::OCTColStd_Array1OfReal^ K)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Knots(*((TColStd_Array1OfReal*)K->Handle));
}

 void OCGeom2d_BSplineCurve::KnotSequence(OCNaroWrappers::OCTColStd_Array1OfReal^ K)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->KnotSequence(*((TColStd_Array1OfReal*)K->Handle));
}

 OCGeomAbs_BSplKnotDistribution OCGeom2d_BSplineCurve::KnotDistribution()
{
  return (OCGeomAbs_BSplKnotDistribution)((*((Handle_Geom2d_BSplineCurve*)nativeHandle))->KnotDistribution());
}

 Standard_Integer OCGeom2d_BSplineCurve::LastUKnotIndex()
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LastUKnotIndex();
}

 Standard_Real OCGeom2d_BSplineCurve::LastParameter()
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LastParameter();
}

 void OCGeom2d_BSplineCurve::LocateU(Standard_Real U, Standard_Real ParametricTolerance, Standard_Integer& I1, Standard_Integer& I2, System::Boolean WithKnotRepetition)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->LocateU(U, ParametricTolerance, I1, I2, OCConverter::BooleanToStandardBoolean(WithKnotRepetition));
}

 Standard_Integer OCGeom2d_BSplineCurve::Multiplicity(Standard_Integer Index)
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Multiplicity(Index);
}

 void OCGeom2d_BSplineCurve::Multiplicities(OCNaroWrappers::OCTColStd_Array1OfInteger^ M)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Multiplicities(*((TColStd_Array1OfInteger*)M->Handle));
}

 Standard_Integer OCGeom2d_BSplineCurve::NbKnots()
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->NbKnots();
}

 Standard_Integer OCGeom2d_BSplineCurve::NbPoles()
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->NbPoles();
}

OCgp_Pnt2d^ OCGeom2d_BSplineCurve::Pole(Standard_Integer Index)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Pole(Index);
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCGeom2d_BSplineCurve::Poles(OCNaroWrappers::OCTColgp_Array1OfPnt2d^ P)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Poles(*((TColgp_Array1OfPnt2d*)P->Handle));
}

OCgp_Pnt2d^ OCGeom2d_BSplineCurve::StartPoint()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->StartPoint();
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Real OCGeom2d_BSplineCurve::Weight(Standard_Integer Index)
{
  return (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Weight(Index);
}

 void OCGeom2d_BSplineCurve::Weights(OCNaroWrappers::OCTColStd_Array1OfReal^ W)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Weights(*((TColStd_Array1OfReal*)W->Handle));
}

 void OCGeom2d_BSplineCurve::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Transform(*((gp_Trsf2d*)T->Handle));
}

 Standard_Integer OCGeom2d_BSplineCurve::MaxDegree()
{
  return Geom2d_BSplineCurve::MaxDegree();
}

 void OCGeom2d_BSplineCurve::Resolution(Standard_Real ToleranceUV, Standard_Real& UTolerance)
{
  (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Resolution(ToleranceUV, UTolerance);
}

OCGeom2d_Geometry^ OCGeom2d_BSplineCurve::Copy()
{
  Handle(Geom2d_Geometry) tmp = (*((Handle_Geom2d_BSplineCurve*)nativeHandle))->Copy();
  return gcnew OCGeom2d_Geometry(&tmp);
}


