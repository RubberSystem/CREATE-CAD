// File generated by CPPExt (Transient)
//
#ifndef _Geom2d_Geometry_OCWrappers_HeaderFile
#define _Geom2d_Geometry_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom2d_Geometry.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCgp_Pnt2d;
ref class OCgp_Ax2d;
ref class OCgp_Vec2d;
ref class OCgp_Trsf2d;



//!  The general abstract class Geometry in 2D space describes <br>
//!  the common behaviour of all the geometric entities. <br>
//! <br>
//!  All the objects derived from this class can be move with a <br>
//!  geometric transformation. Only the transformations which <br>
//!  doesn't modify the nature of the geometry are available in <br>
//!  this package. <br>
//!  The method Transform which defines a general transformation <br>
//!  is deferred. The other specifics transformations used the <br>
//!  method Transform. <br>
//!  All the following transformations modify the object itself. <br>
//! Warning <br>
//! Only transformations which do not modify the nature <br>
//! of the geometry can be applied to Geom2d objects: <br>
//! this is the case with translations, rotations, <br>
//! symmetries and scales; this is also the case with <br>
//! gp_Trsf2d composite transformations which are <br>
//! used to define the geometric transformations applied <br>
//! using the Transform or Transformed functions. <br>
//! Note: Geometry defines the "prototype" of the <br>
//! abstract method Transform which is defined for each <br>
//! concrete type of derived object. All other <br>
//! transformations are implemented using the Transform method. <br>
public ref class OCGeom2d_Geometry : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCGeom2d_Geometry(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom2d_Geometry(Handle(Geom2d_Geometry)* nativeHandle);

// Methods PUBLIC

//! Performs the symmetrical transformation of a Geometry <br>
//!  with respect to the point P which is the center of the <br>
//!  symmetry and assigns the result to this geometric object. <br>
 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Pnt2d^ P) ;

//! Performs the symmetrical transformation of a Geometry <br>
//!  with respect to an axis placement which is the axis of the symmetry. <br>
 /*instead*/  void Mirror(OCNaroWrappers::OCgp_Ax2d^ A) ;

//! Rotates a Geometry. P is the center of the rotation. <br>
//!  Ang is the angular value of the rotation in radians. <br>
 /*instead*/  void Rotate(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang) ;

//! Scales a Geometry. S is the scaling value. <br>
 /*instead*/  void Scale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S) ;

//! Translates a Geometry.  V is the vector of the tanslation. <br>
 /*instead*/  void Translate(OCNaroWrappers::OCgp_Vec2d^ V) ;

//! Translates a Geometry from the point P1 to the point P2. <br>
 /*instead*/  void Translate(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;


 /*instead*/  OCGeom2d_Geometry^ Mirrored(OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  OCGeom2d_Geometry^ Mirrored(OCNaroWrappers::OCgp_Ax2d^ A) ;


 /*instead*/  OCGeom2d_Geometry^ Rotated(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang) ;


 /*instead*/  OCGeom2d_Geometry^ Scaled(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S) ;


 /*instead*/  OCGeom2d_Geometry^ Transformed(OCNaroWrappers::OCgp_Trsf2d^ T) ;


 /*instead*/  OCGeom2d_Geometry^ Translated(OCNaroWrappers::OCgp_Vec2d^ V) ;


 /*instead*/  OCGeom2d_Geometry^ Translated(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2) ;

~OCGeom2d_Geometry()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
