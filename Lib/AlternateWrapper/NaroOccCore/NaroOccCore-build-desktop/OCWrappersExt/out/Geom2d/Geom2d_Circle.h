// File generated by CPPExt (Transient)
//
#ifndef _Geom2d_Circle_OCWrappers_HeaderFile
#define _Geom2d_Circle_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom2d_Circle.hxx>
#include "../Converter.h"

#include "Geom2d_Conic.h"



namespace OCNaroWrappers
{

ref class OCgp_Circ2d;
ref class OCgp_Ax2d;
ref class OCgp_Ax22d;
ref class OCgp_Pnt2d;
ref class OCgp_Vec2d;
ref class OCgp_Trsf2d;
ref class OCGeom2d_Geometry;


//! Describes a circle in the plane (2D space). <br>
//! A circle is defined by its radius and, as with any conic <br>
//! curve, is positioned in the plane with a coordinate <br>
//! system (gp_Ax22d object) where the origin is the <br>
//! center of the circle. <br>
//! The coordinate system is the local coordinate <br>
//! system of the circle. <br>
//! The orientation (direct or indirect) of the local <br>
//! coordinate system gives an explicit orientation to the <br>
//! circle, determining the direction in which the <br>
//! parameter increases along the circle. <br>
//! The Geom2d_Circle circle is parameterized by an angle: <br>
//! P(U) = O + R*Cos(U)*XDir + R*Sin(U)*YDir <br>
//! where: <br>
//! - P is the point of parameter U, <br>
//! - O, XDir and YDir are respectively the origin, "X <br>
//!   Direction" and "Y Direction" of its local coordinate system, <br>
//! - R is the radius of the circle. <br>
//! The "X Axis" of the local coordinate system therefore <br>
//! defines the origin of the parameter of the circle. The <br>
//! parameter is the angle with this "X Direction". <br>
//! A circle is a closed and periodic curve. The period is <br>
//! 2.*Pi and the parameter range is [ 0,2.*Pi [. <br>
//! See Also <br>
//! GCE2d_MakeCircle which provides functions for <br>
//! more complex circle constructions <br>
//! gp_Ax22d and  gp_Circ2d for an equivalent, non-parameterized data structure. <br>
public ref class OCGeom2d_Circle : OCGeom2d_Conic {

protected:
  // dummy constructor;
  OCGeom2d_Circle(OCDummy^) : OCGeom2d_Conic((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom2d_Circle(Handle(Geom2d_Circle)* nativeHandle);

// Methods PUBLIC

//!  Constructs a circle by conversion of the gp_Circ2d circle C. <br>
OCGeom2d_Circle(OCNaroWrappers::OCgp_Circ2d^ C);

//! Constructs a circle of radius Radius, whose center is the origin of axis <br>
//!   A; A is the "X Axis" of the local coordinate system <br>
//!   of the circle; this coordinate system is direct if <br>
//!   Sense is true (default value) or indirect if Sense is false. <br>
//! Note: It is possible to create a circle where Radius is equal to 0.0. <br>
//! Exceptions Standard_ConstructionError if Radius is negative. <br>
OCGeom2d_Circle(OCNaroWrappers::OCgp_Ax2d^ A, Standard_Real Radius, System::Boolean Sense);

//! Constructs a circle <br>
//! of radius Radius, where the coordinate system A <br>
//!   locates the circle and defines its orientation in the plane such that: <br>
//!   - the center of the circle is the origin of A, <br>
//!   - the orientation (direct or indirect) of A gives the <br>
//!    orientation of the circle. <br>
OCGeom2d_Circle(OCNaroWrappers::OCgp_Ax22d^ A, Standard_Real Radius);


//!  Converts the gp_Circ2d circle C into this circle. <br>
 /*instead*/  void SetCirc2d(OCNaroWrappers::OCgp_Circ2d^ C) ;


 /*instead*/  void SetRadius(Standard_Real R) ;


//!  Returns the non persistent circle from gp with the same <br>
//!  geometric properties as <me>. <br>
 /*instead*/  OCgp_Circ2d^ Circ2d() ;

//! Returns the radius of this circle. <br>
 /*instead*/  Standard_Real Radius() ;

//! Computes the parameter on the reversed circle for <br>
//! the point of parameter U on this circle. <br>
//! For a circle, the returned value is: 2.*Pi - U. <br>
virtual /*instead*/  Standard_Real ReversedParameter(Standard_Real U) ;

//!  Returns 0., which is the eccentricity of any circle. <br>
virtual /*instead*/  Standard_Real Eccentricity() ;

//! Returns 0.0 <br>
virtual /*instead*/  Standard_Real FirstParameter() ;

//! Returns 2*PI. <br>
virtual /*instead*/  Standard_Real LastParameter() ;

//! returns True. <br>
virtual /*instead*/  System::Boolean IsClosed() ;

//! returns True. The period of a circle is 2.*Pi. <br>
virtual /*instead*/  System::Boolean IsPeriodic() ;

//! Returns in P the point of parameter U. <br>
//!  P = C + R * Cos (U) * XDir + R * Sin (U) * YDir <br>
//!  where C is the center of the circle , XDir the XDirection and <br>
//!  YDir the YDirection of the circle's local coordinate system. <br>
virtual /*instead*/  void D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P) ;


//!  Returns the point P of parameter U and the first derivative V1. <br>
virtual /*instead*/  void D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1) ;


//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>
virtual /*instead*/  void D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2) ;


//!  Returns the point P of parameter u, the first second and third <br>
//!  derivatives V1 V2 and V3. <br>
virtual /*instead*/  void D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3) ;

//! For the point of parameter U of this circle, computes <br>
//! the vector corresponding to the Nth derivative. <br>
//! Exceptions: Standard_RangeError if N is less than 1. <br>
virtual /*instead*/  OCgp_Vec2d^ DN(Standard_Real U, Standard_Integer N) ;

//! Applies the transformation T to this circle. <br>
virtual /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Creates a new object which is a copy of this circle. <br>
virtual /*instead*/  OCGeom2d_Geometry^ Copy() ;

~OCGeom2d_Circle()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
