// File generated by CPPExt (CPP file)
//

#include "Geom2d_Circle.h"
#include "../Converter.h"
#include "../gp/gp_Circ2d.h"
#include "../gp/gp_Ax2d.h"
#include "../gp/gp_Ax22d.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Trsf2d.h"
#include "Geom2d_Geometry.h"


using namespace OCNaroWrappers;

OCGeom2d_Circle::OCGeom2d_Circle(Handle(Geom2d_Circle)* nativeHandle) : OCGeom2d_Conic((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom2d_Circle(*nativeHandle);
}

OCGeom2d_Circle::OCGeom2d_Circle(OCNaroWrappers::OCgp_Circ2d^ C) : OCGeom2d_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_Circle(new Geom2d_Circle(*((gp_Circ2d*)C->Handle)));
}

OCGeom2d_Circle::OCGeom2d_Circle(OCNaroWrappers::OCgp_Ax2d^ A, Standard_Real Radius, System::Boolean Sense) : OCGeom2d_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_Circle(new Geom2d_Circle(*((gp_Ax2d*)A->Handle), Radius, OCConverter::BooleanToStandardBoolean(Sense)));
}

OCGeom2d_Circle::OCGeom2d_Circle(OCNaroWrappers::OCgp_Ax22d^ A, Standard_Real Radius) : OCGeom2d_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_Circle(new Geom2d_Circle(*((gp_Ax22d*)A->Handle), Radius));
}

 void OCGeom2d_Circle::SetCirc2d(OCNaroWrappers::OCgp_Circ2d^ C)
{
  (*((Handle_Geom2d_Circle*)nativeHandle))->SetCirc2d(*((gp_Circ2d*)C->Handle));
}

 void OCGeom2d_Circle::SetRadius(Standard_Real R)
{
  (*((Handle_Geom2d_Circle*)nativeHandle))->SetRadius(R);
}

OCgp_Circ2d^ OCGeom2d_Circle::Circ2d()
{
  gp_Circ2d* tmp = new gp_Circ2d();
  *tmp = (*((Handle_Geom2d_Circle*)nativeHandle))->Circ2d();
  return gcnew OCgp_Circ2d(tmp);
}

 Standard_Real OCGeom2d_Circle::Radius()
{
  return (*((Handle_Geom2d_Circle*)nativeHandle))->Radius();
}

 Standard_Real OCGeom2d_Circle::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom2d_Circle*)nativeHandle))->ReversedParameter(U);
}

 Standard_Real OCGeom2d_Circle::Eccentricity()
{
  return (*((Handle_Geom2d_Circle*)nativeHandle))->Eccentricity();
}

 Standard_Real OCGeom2d_Circle::FirstParameter()
{
  return (*((Handle_Geom2d_Circle*)nativeHandle))->FirstParameter();
}

 Standard_Real OCGeom2d_Circle::LastParameter()
{
  return (*((Handle_Geom2d_Circle*)nativeHandle))->LastParameter();
}

 System::Boolean OCGeom2d_Circle::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_Circle*)nativeHandle))->IsClosed());
}

 System::Boolean OCGeom2d_Circle::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_Circle*)nativeHandle))->IsPeriodic());
}

 void OCGeom2d_Circle::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  (*((Handle_Geom2d_Circle*)nativeHandle))->D0(U, *((gp_Pnt2d*)P->Handle));
}

 void OCGeom2d_Circle::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1)
{
  (*((Handle_Geom2d_Circle*)nativeHandle))->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle));
}

 void OCGeom2d_Circle::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  (*((Handle_Geom2d_Circle*)nativeHandle))->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCGeom2d_Circle::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  (*((Handle_Geom2d_Circle*)nativeHandle))->D3(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCGeom2d_Circle::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = (*((Handle_Geom2d_Circle*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 void OCGeom2d_Circle::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  (*((Handle_Geom2d_Circle*)nativeHandle))->Transform(*((gp_Trsf2d*)T->Handle));
}

OCGeom2d_Geometry^ OCGeom2d_Circle::Copy()
{
  Handle(Geom2d_Geometry) tmp = (*((Handle_Geom2d_Circle*)nativeHandle))->Copy();
  return gcnew OCGeom2d_Geometry(&tmp);
}


