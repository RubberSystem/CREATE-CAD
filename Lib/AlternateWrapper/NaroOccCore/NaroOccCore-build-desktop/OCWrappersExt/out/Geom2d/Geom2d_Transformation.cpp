// File generated by CPPExt (CPP file)
//

#include "Geom2d_Transformation.h"
#include "../Converter.h"
#include "../gp/gp_Trsf2d.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Ax2d.h"
#include "../gp/gp_Vec2d.h"


using namespace OCNaroWrappers;

OCGeom2d_Transformation::OCGeom2d_Transformation(Handle(Geom2d_Transformation)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom2d_Transformation(*nativeHandle);
}

OCGeom2d_Transformation::OCGeom2d_Transformation() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_Transformation(new Geom2d_Transformation());
}

OCGeom2d_Transformation::OCGeom2d_Transformation(OCNaroWrappers::OCgp_Trsf2d^ T) : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_Transformation(new Geom2d_Transformation(*((gp_Trsf2d*)T->Handle)));
}

 void OCGeom2d_Transformation::SetMirror(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetMirror(*((gp_Pnt2d*)P->Handle));
}

 void OCGeom2d_Transformation::SetMirror(OCNaroWrappers::OCgp_Ax2d^ A)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetMirror(*((gp_Ax2d*)A->Handle));
}

 void OCGeom2d_Transformation::SetRotation(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real Ang)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetRotation(*((gp_Pnt2d*)P->Handle), Ang);
}

 void OCGeom2d_Transformation::SetScale(OCNaroWrappers::OCgp_Pnt2d^ P, Standard_Real S)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetScale(*((gp_Pnt2d*)P->Handle), S);
}

 void OCGeom2d_Transformation::SetTransformation(OCNaroWrappers::OCgp_Ax2d^ FromSystem1, OCNaroWrappers::OCgp_Ax2d^ ToSystem2)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetTransformation(*((gp_Ax2d*)FromSystem1->Handle), *((gp_Ax2d*)ToSystem2->Handle));
}

 void OCGeom2d_Transformation::SetTransformation(OCNaroWrappers::OCgp_Ax2d^ ToSystem)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetTransformation(*((gp_Ax2d*)ToSystem->Handle));
}

 void OCGeom2d_Transformation::SetTranslation(OCNaroWrappers::OCgp_Vec2d^ V)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetTranslation(*((gp_Vec2d*)V->Handle));
}

 void OCGeom2d_Transformation::SetTranslation(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetTranslation(*((gp_Pnt2d*)P1->Handle), *((gp_Pnt2d*)P2->Handle));
}

 void OCGeom2d_Transformation::SetTrsf2d(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->SetTrsf2d(*((gp_Trsf2d*)T->Handle));
}

 System::Boolean OCGeom2d_Transformation::IsNegative()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_Transformation*)nativeHandle))->IsNegative());
}

 OCgp_TrsfForm OCGeom2d_Transformation::Form()
{
  return (OCgp_TrsfForm)((*((Handle_Geom2d_Transformation*)nativeHandle))->Form());
}

 Standard_Real OCGeom2d_Transformation::ScaleFactor()
{
  return (*((Handle_Geom2d_Transformation*)nativeHandle))->ScaleFactor();
}

OCgp_Trsf2d^ OCGeom2d_Transformation::Trsf2d()
{
  gp_Trsf2d* tmp = new gp_Trsf2d();
  *tmp = (*((Handle_Geom2d_Transformation*)nativeHandle))->Trsf2d();
  return gcnew OCgp_Trsf2d(tmp);
}

 Standard_Real OCGeom2d_Transformation::Value(Standard_Integer Row, Standard_Integer Col)
{
  return (*((Handle_Geom2d_Transformation*)nativeHandle))->Value(Row, Col);
}

 void OCGeom2d_Transformation::Invert()
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->Invert();
}

OCGeom2d_Transformation^ OCGeom2d_Transformation::Inverted()
{
  Handle(Geom2d_Transformation) tmp = (*((Handle_Geom2d_Transformation*)nativeHandle))->Inverted();
  return gcnew OCGeom2d_Transformation(&tmp);
}

OCGeom2d_Transformation^ OCGeom2d_Transformation::Multiplied(OCNaroWrappers::OCGeom2d_Transformation^ Other)
{
  Handle(Geom2d_Transformation) tmp = (*((Handle_Geom2d_Transformation*)nativeHandle))->Multiplied(*((Handle_Geom2d_Transformation*)Other->Handle));
  return gcnew OCGeom2d_Transformation(&tmp);
}

 void OCGeom2d_Transformation::Multiply(OCNaroWrappers::OCGeom2d_Transformation^ Other)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->Multiply(*((Handle_Geom2d_Transformation*)Other->Handle));
}

 void OCGeom2d_Transformation::Power(Standard_Integer N)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->Power(N);
}

OCGeom2d_Transformation^ OCGeom2d_Transformation::Powered(Standard_Integer N)
{
  Handle(Geom2d_Transformation) tmp = (*((Handle_Geom2d_Transformation*)nativeHandle))->Powered(N);
  return gcnew OCGeom2d_Transformation(&tmp);
}

 void OCGeom2d_Transformation::PreMultiply(OCNaroWrappers::OCGeom2d_Transformation^ Other)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->PreMultiply(*((Handle_Geom2d_Transformation*)Other->Handle));
}

 void OCGeom2d_Transformation::Transforms(Standard_Real& X, Standard_Real& Y)
{
  (*((Handle_Geom2d_Transformation*)nativeHandle))->Transforms(X, Y);
}

OCGeom2d_Transformation^ OCGeom2d_Transformation::Copy()
{
  Handle(Geom2d_Transformation) tmp = (*((Handle_Geom2d_Transformation*)nativeHandle))->Copy();
  return gcnew OCGeom2d_Transformation(&tmp);
}


