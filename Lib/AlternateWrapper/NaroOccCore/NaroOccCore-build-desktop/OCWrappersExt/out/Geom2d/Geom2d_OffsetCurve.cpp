// File generated by CPPExt (CPP file)
//

#include "Geom2d_OffsetCurve.h"
#include "../Converter.h"
#include "Geom2d_Curve.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Trsf2d.h"
#include "Geom2d_Geometry.h"


using namespace OCNaroWrappers;

OCGeom2d_OffsetCurve::OCGeom2d_OffsetCurve(Handle(Geom2d_OffsetCurve)* nativeHandle) : OCGeom2d_Curve((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom2d_OffsetCurve(*nativeHandle);
}

OCGeom2d_OffsetCurve::OCGeom2d_OffsetCurve(OCNaroWrappers::OCGeom2d_Curve^ C, Standard_Real Offset) : OCGeom2d_Curve((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_OffsetCurve(new Geom2d_OffsetCurve(*((Handle_Geom2d_Curve*)C->Handle), Offset));
}

 void OCGeom2d_OffsetCurve::Reverse()
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->Reverse();
}

 Standard_Real OCGeom2d_OffsetCurve::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->ReversedParameter(U);
}

 void OCGeom2d_OffsetCurve::SetBasisCurve(OCNaroWrappers::OCGeom2d_Curve^ C)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->SetBasisCurve(*((Handle_Geom2d_Curve*)C->Handle));
}

 void OCGeom2d_OffsetCurve::SetOffsetValue(Standard_Real D)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->SetOffsetValue(D);
}

OCGeom2d_Curve^ OCGeom2d_OffsetCurve::BasisCurve()
{
  Handle(Geom2d_Curve) tmp = (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->BasisCurve();
  return gcnew OCGeom2d_Curve(&tmp);
}

 OCGeomAbs_Shape OCGeom2d_OffsetCurve::Continuity()
{
  return (OCGeomAbs_Shape)((*((Handle_Geom2d_OffsetCurve*)nativeHandle))->Continuity());
}

 void OCGeom2d_OffsetCurve::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->D0(U, *((gp_Pnt2d*)P->Handle));
}

 void OCGeom2d_OffsetCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle));
}

 void OCGeom2d_OffsetCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCGeom2d_OffsetCurve::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->D3(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCGeom2d_OffsetCurve::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 void OCGeom2d_OffsetCurve::Value(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Pnt2d^ Pbasis, OCNaroWrappers::OCgp_Vec2d^ V1basis)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->Value(U, *((gp_Pnt2d*)P->Handle), *((gp_Pnt2d*)Pbasis->Handle), *((gp_Vec2d*)V1basis->Handle));
}

 void OCGeom2d_OffsetCurve::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Pnt2d^ Pbasis, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V1basis, OCNaroWrappers::OCgp_Vec2d^ V2basis)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Pnt2d*)Pbasis->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V1basis->Handle), *((gp_Vec2d*)V2basis->Handle));
}

 void OCGeom2d_OffsetCurve::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Pnt2d^ Pbasis, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V1basis, OCNaroWrappers::OCgp_Vec2d^ V2basis, OCNaroWrappers::OCgp_Vec2d^ V3basis)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Pnt2d*)Pbasis->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V1basis->Handle), *((gp_Vec2d*)V2basis->Handle), *((gp_Vec2d*)V3basis->Handle));
}

 Standard_Real OCGeom2d_OffsetCurve::FirstParameter()
{
  return (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->FirstParameter();
}

 Standard_Real OCGeom2d_OffsetCurve::LastParameter()
{
  return (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->LastParameter();
}

 Standard_Real OCGeom2d_OffsetCurve::Offset()
{
  return (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->Offset();
}

 System::Boolean OCGeom2d_OffsetCurve::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_OffsetCurve*)nativeHandle))->IsClosed());
}

 System::Boolean OCGeom2d_OffsetCurve::IsCN(Standard_Integer N)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_OffsetCurve*)nativeHandle))->IsCN(N));
}

 System::Boolean OCGeom2d_OffsetCurve::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_OffsetCurve*)nativeHandle))->IsPeriodic());
}

 Standard_Real OCGeom2d_OffsetCurve::Period()
{
  return (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->Period();
}

 void OCGeom2d_OffsetCurve::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->Transform(*((gp_Trsf2d*)T->Handle));
}

 Standard_Real OCGeom2d_OffsetCurve::TransformedParameter(Standard_Real U, OCNaroWrappers::OCgp_Trsf2d^ T)
{
  return (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->TransformedParameter(U, *((gp_Trsf2d*)T->Handle));
}

 Standard_Real OCGeom2d_OffsetCurve::ParametricTransformation(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  return (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->ParametricTransformation(*((gp_Trsf2d*)T->Handle));
}

OCGeom2d_Geometry^ OCGeom2d_OffsetCurve::Copy()
{
  Handle(Geom2d_Geometry) tmp = (*((Handle_Geom2d_OffsetCurve*)nativeHandle))->Copy();
  return gcnew OCGeom2d_Geometry(&tmp);
}


