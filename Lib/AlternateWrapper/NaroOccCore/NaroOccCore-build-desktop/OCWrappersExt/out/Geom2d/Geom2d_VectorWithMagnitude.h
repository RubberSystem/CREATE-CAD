// File generated by CPPExt (Transient)
//
#ifndef _Geom2d_VectorWithMagnitude_OCWrappers_HeaderFile
#define _Geom2d_VectorWithMagnitude_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom2d_VectorWithMagnitude.hxx>
#include "../Converter.h"

#include "Geom2d_Vector.h"



namespace OCNaroWrappers
{

ref class OCgp_Vec2d;
ref class OCgp_Pnt2d;
ref class OCGeom2d_Vector;
ref class OCgp_Trsf2d;
ref class OCGeom2d_Geometry;



//!  Defines a vector with magnitude. <br>
//!  A vector with magnitude can have a zero length. <br>
public ref class OCGeom2d_VectorWithMagnitude : OCGeom2d_Vector {

protected:
  // dummy constructor;
  OCGeom2d_VectorWithMagnitude(OCDummy^) : OCGeom2d_Vector((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom2d_VectorWithMagnitude(Handle(Geom2d_VectorWithMagnitude)* nativeHandle);

// Methods PUBLIC

//! Creates a persistent copy of V. <br>
OCGeom2d_VectorWithMagnitude(OCNaroWrappers::OCgp_Vec2d^ V);

//! Creates a vector with two cartesian coordinates. <br>
OCGeom2d_VectorWithMagnitude(Standard_Real X, Standard_Real Y);


//!  Creates a vector from the point P1 to the point P2. <br>
//!  The magnitude of the vector is the distance between P1 and P2 <br>
OCGeom2d_VectorWithMagnitude(OCNaroWrappers::OCgp_Pnt2d^ P1, OCNaroWrappers::OCgp_Pnt2d^ P2);

//!  Set <me> to X, Y coordinates. <br>
 /*instead*/  void SetCoord(Standard_Real X, Standard_Real Y) ;


 /*instead*/  void SetVec2d(OCNaroWrappers::OCgp_Vec2d^ V) ;

//! Changes the X coordinate of <me>. <br>
 /*instead*/  void SetX(Standard_Real X) ;

//!  Changes the Y coordinate of <me> <br>
 /*instead*/  void SetY(Standard_Real Y) ;

//! Returns the magnitude of <me>. <br>
 /*instead*/  Standard_Real Magnitude() ;

//! Returns the square magnitude of <me>. <br>
 /*instead*/  Standard_Real SquareMagnitude() ;


//!  Adds the Vector Other to <me>. <br>
 /*instead*/  void Add(OCNaroWrappers::OCGeom2d_Vector^ Other) ;


//!  Adds the vector Other to <me>. <br>
 /*instead*/  OCGeom2d_VectorWithMagnitude^ Added(OCNaroWrappers::OCGeom2d_Vector^ Other) ;


//!  Computes the cross product  between <me> and Other <br>
//!  <me> ^ Other. A new vector is returned. <br>
 /*instead*/  Standard_Real Crossed(OCNaroWrappers::OCGeom2d_Vector^ Other) ;

//! Divides <me> by a scalar. <br>
 /*instead*/  void Divide(Standard_Real Scalar) ;


//!  Divides <me> by a scalar. A new vector is returned. <br>
 /*instead*/  OCGeom2d_VectorWithMagnitude^ Divided(Standard_Real Scalar) ;


//!  Computes the product of the vector <me> by a scalar. <br>
//!  A new vector is returned. <br>
//! <br>
//!  -C++: alias operator * <br>
//!  Collision with same operator defined for the class Vector! <br>
 /*instead*/  OCGeom2d_VectorWithMagnitude^ Multiplied(Standard_Real Scalar) ;


//!  Computes the product of the vector <me> by a scalar. <br>
 /*instead*/  void Multiply(Standard_Real Scalar) ;

//! Normalizes <me>. <br>
//!  Raised if the magnitude of the vector is lower or equal to <br>
//!  Resolution from package gp. <br>
 /*instead*/  void Normalize() ;

//! Returns a copy of <me> Normalized. <br>
//!  Raised if the magnitude of the vector is lower or equal to <br>
//!  Resolution from package gp. <br>
 /*instead*/  OCGeom2d_VectorWithMagnitude^ Normalized() ;

//! Subtracts the Vector Other to <me>. <br>
 /*instead*/  void Subtract(OCNaroWrappers::OCGeom2d_Vector^ Other) ;


//!  Subtracts the vector Other to <me>. A new vector is returned. <br>
 /*instead*/  OCGeom2d_VectorWithMagnitude^ Subtracted(OCNaroWrappers::OCGeom2d_Vector^ Other) ;

//! Applies the transformation T to this vector. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Creates a new object which is a copy of this vector. <br>
 /*instead*/  OCGeom2d_Geometry^ Copy() ;

~OCGeom2d_VectorWithMagnitude()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
