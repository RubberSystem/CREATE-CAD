// File generated by CPPExt (Transient)
//
#ifndef _Geom2d_Curve_OCWrappers_HeaderFile
#define _Geom2d_Curve_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom2d_Curve.hxx>
#include "../Converter.h"

#include "Geom2d_Geometry.h"

#include "../GeomAbs/GeomAbs_Shape.h"


namespace OCNaroWrappers
{

ref class OCgp_Trsf2d;
ref class OCgp_Pnt2d;
ref class OCgp_Vec2d;


//! The abstract class Curve describes the common <br>
//! behavior of curves in 2D space. The Geom2d <br>
//! package provides numerous concrete classes of <br>
//! derived curves, including lines, circles, conics, Bezier <br>
//! or BSpline curves, etc. <br>
//! The main characteristic of these curves is that they <br>
//! are parameterized. The Geom2d_Curve class shows: <br>
//! - how to work with the parametric equation of a <br>
//!   curve in order to calculate the point of parameter <br>
//!   u, together with the vector tangent and the <br>
//!   derivative vectors of order 2, 3,..., N at this point; <br>
//! - how to obtain general information about the curve <br>
//!   (for example, level of continuity, closed <br>
//!   characteristics, periodicity, bounds of the parameter field); <br>
//! - how the parameter changes when a geometric <br>
//!   transformation is applied to the curve or when the <br>
//!   orientation of the curve is inverted. <br>
//! All curves must have a geometric continuity: a curve is <br>
//! at least "C0". Generally, this property is checked at <br>
//! the time of construction or when the curve is edited. <br>
//! Where this is not the case, the documentation <br>
//! explicitly states so. <br>
//! Warning <br>
//! The Geom2d package does not prevent the <br>
//! construction of curves with null length or curves which <br>
//! self-intersect. <br>
public ref class OCGeom2d_Curve : OCGeom2d_Geometry {

protected:
  // dummy constructor;
  OCGeom2d_Curve(OCDummy^) : OCGeom2d_Geometry((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom2d_Curve(Handle(Geom2d_Curve)* nativeHandle);

// Methods PUBLIC

//! Computes the parameter on the curve transformed by <br>
//! T for the point of parameter U on this curve. <br>
//! Note: this function generally returns U but it can be <br>
//! redefined (for example, on a line). <br>
virtual /*instead*/  Standard_Real TransformedParameter(Standard_Real U, OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Returns the coefficient required to compute the <br>
//! parametric transformation of this curve when <br>
//! transformation T is applied. This coefficient is the <br>
//! ratio between the parameter of a point on this curve <br>
//! and the parameter of the transformed point on the <br>
//! new curve transformed by T. <br>
//! Note: this function generally returns 1. but it can be <br>
//! redefined (for example, on a line). <br>
virtual /*instead*/  Standard_Real ParametricTransformation(OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Creates a reversed duplicate Changes the orientation of this curve. The first and <br>
//! last parameters are not changed, but the parametric <br>
//! direction of the curve is reversed. <br>
//! If the curve is bounded: <br>
//! - the start point of the initial curve becomes the end <br>
//!   point of the reversed curve, and <br>
//! - the end point of the initial curve becomes the start <br>
//!   point of the reversed curve. <br>
//! - Reversed creates a new curve. <br>
 /*instead*/  OCGeom2d_Curve^ Reversed() ;

//! Returns thne period of this curve. <br>//! raises if the curve is not periodic <br>
virtual /*instead*/  Standard_Real Period() ;

//! Computes the point of parameter U on <me>. <br>
//!  If the curve is periodic  then the returned point is P(U) with <br>
//!  U = Ustart + (U - Uend)  where Ustart and Uend are the <br>
//!  parametric bounds of the curve. <br>
//! <br>
//!  it is implemented with D0. <br>
//!  Raised only for the "OffsetCurve" if it is not possible to <br>
//!  compute the current point. For example when the first <br>
//!  derivative on the basis curve and the offset direction <br>
//!  are parallel. <br>
 /*instead*/  OCgp_Pnt2d^ Value(Standard_Real U) ;

~OCGeom2d_Curve()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
