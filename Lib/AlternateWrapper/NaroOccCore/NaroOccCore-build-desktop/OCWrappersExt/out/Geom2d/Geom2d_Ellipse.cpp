// File generated by CPPExt (CPP file)
//

#include "Geom2d_Ellipse.h"
#include "../Converter.h"
#include "../gp/gp_Elips2d.h"
#include "../gp/gp_Ax2d.h"
#include "../gp/gp_Ax22d.h"
#include "../gp/gp_Pnt2d.h"
#include "../gp/gp_Vec2d.h"
#include "../gp/gp_Trsf2d.h"
#include "Geom2d_Geometry.h"


using namespace OCNaroWrappers;

OCGeom2d_Ellipse::OCGeom2d_Ellipse(Handle(Geom2d_Ellipse)* nativeHandle) : OCGeom2d_Conic((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_Geom2d_Ellipse(*nativeHandle);
}

OCGeom2d_Ellipse::OCGeom2d_Ellipse(OCNaroWrappers::OCgp_Elips2d^ E) : OCGeom2d_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_Ellipse(new Geom2d_Ellipse(*((gp_Elips2d*)E->Handle)));
}

OCGeom2d_Ellipse::OCGeom2d_Ellipse(OCNaroWrappers::OCgp_Ax2d^ MajorAxis, Standard_Real MajorRadius, Standard_Real MinorRadius, System::Boolean Sense) : OCGeom2d_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_Ellipse(new Geom2d_Ellipse(*((gp_Ax2d*)MajorAxis->Handle), MajorRadius, MinorRadius, OCConverter::BooleanToStandardBoolean(Sense)));
}

OCGeom2d_Ellipse::OCGeom2d_Ellipse(OCNaroWrappers::OCgp_Ax22d^ Axis, Standard_Real MajorRadius, Standard_Real MinorRadius) : OCGeom2d_Conic((OCDummy^)nullptr)

{
  nativeHandle = new Handle_Geom2d_Ellipse(new Geom2d_Ellipse(*((gp_Ax22d*)Axis->Handle), MajorRadius, MinorRadius));
}

 void OCGeom2d_Ellipse::SetElips2d(OCNaroWrappers::OCgp_Elips2d^ E)
{
  (*((Handle_Geom2d_Ellipse*)nativeHandle))->SetElips2d(*((gp_Elips2d*)E->Handle));
}

 void OCGeom2d_Ellipse::SetMajorRadius(Standard_Real MajorRadius)
{
  (*((Handle_Geom2d_Ellipse*)nativeHandle))->SetMajorRadius(MajorRadius);
}

 void OCGeom2d_Ellipse::SetMinorRadius(Standard_Real MinorRadius)
{
  (*((Handle_Geom2d_Ellipse*)nativeHandle))->SetMinorRadius(MinorRadius);
}

OCgp_Elips2d^ OCGeom2d_Ellipse::Elips2d()
{
  gp_Elips2d* tmp = new gp_Elips2d();
  *tmp = (*((Handle_Geom2d_Ellipse*)nativeHandle))->Elips2d();
  return gcnew OCgp_Elips2d(tmp);
}

 Standard_Real OCGeom2d_Ellipse::ReversedParameter(Standard_Real U)
{
  return (*((Handle_Geom2d_Ellipse*)nativeHandle))->ReversedParameter(U);
}

OCgp_Ax2d^ OCGeom2d_Ellipse::Directrix1()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = (*((Handle_Geom2d_Ellipse*)nativeHandle))->Directrix1();
  return gcnew OCgp_Ax2d(tmp);
}

OCgp_Ax2d^ OCGeom2d_Ellipse::Directrix2()
{
  gp_Ax2d* tmp = new gp_Ax2d();
  *tmp = (*((Handle_Geom2d_Ellipse*)nativeHandle))->Directrix2();
  return gcnew OCgp_Ax2d(tmp);
}

 Standard_Real OCGeom2d_Ellipse::Eccentricity()
{
  return (*((Handle_Geom2d_Ellipse*)nativeHandle))->Eccentricity();
}

 Standard_Real OCGeom2d_Ellipse::Focal()
{
  return (*((Handle_Geom2d_Ellipse*)nativeHandle))->Focal();
}

OCgp_Pnt2d^ OCGeom2d_Ellipse::Focus1()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_Geom2d_Ellipse*)nativeHandle))->Focus1();
  return gcnew OCgp_Pnt2d(tmp);
}

OCgp_Pnt2d^ OCGeom2d_Ellipse::Focus2()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_Geom2d_Ellipse*)nativeHandle))->Focus2();
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Real OCGeom2d_Ellipse::MajorRadius()
{
  return (*((Handle_Geom2d_Ellipse*)nativeHandle))->MajorRadius();
}

 Standard_Real OCGeom2d_Ellipse::MinorRadius()
{
  return (*((Handle_Geom2d_Ellipse*)nativeHandle))->MinorRadius();
}

 Standard_Real OCGeom2d_Ellipse::Parameter()
{
  return (*((Handle_Geom2d_Ellipse*)nativeHandle))->Parameter();
}

 Standard_Real OCGeom2d_Ellipse::FirstParameter()
{
  return (*((Handle_Geom2d_Ellipse*)nativeHandle))->FirstParameter();
}

 Standard_Real OCGeom2d_Ellipse::LastParameter()
{
  return (*((Handle_Geom2d_Ellipse*)nativeHandle))->LastParameter();
}

 System::Boolean OCGeom2d_Ellipse::IsClosed()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_Ellipse*)nativeHandle))->IsClosed());
}

 System::Boolean OCGeom2d_Ellipse::IsPeriodic()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_Geom2d_Ellipse*)nativeHandle))->IsPeriodic());
}

 void OCGeom2d_Ellipse::D0(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P)
{
  (*((Handle_Geom2d_Ellipse*)nativeHandle))->D0(U, *((gp_Pnt2d*)P->Handle));
}

 void OCGeom2d_Ellipse::D1(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1)
{
  (*((Handle_Geom2d_Ellipse*)nativeHandle))->D1(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle));
}

 void OCGeom2d_Ellipse::D2(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2)
{
  (*((Handle_Geom2d_Ellipse*)nativeHandle))->D2(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle));
}

 void OCGeom2d_Ellipse::D3(Standard_Real U, OCNaroWrappers::OCgp_Pnt2d^ P, OCNaroWrappers::OCgp_Vec2d^ V1, OCNaroWrappers::OCgp_Vec2d^ V2, OCNaroWrappers::OCgp_Vec2d^ V3)
{
  (*((Handle_Geom2d_Ellipse*)nativeHandle))->D3(U, *((gp_Pnt2d*)P->Handle), *((gp_Vec2d*)V1->Handle), *((gp_Vec2d*)V2->Handle), *((gp_Vec2d*)V3->Handle));
}

OCgp_Vec2d^ OCGeom2d_Ellipse::DN(Standard_Real U, Standard_Integer N)
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = (*((Handle_Geom2d_Ellipse*)nativeHandle))->DN(U, N);
  return gcnew OCgp_Vec2d(tmp);
}

 void OCGeom2d_Ellipse::Transform(OCNaroWrappers::OCgp_Trsf2d^ T)
{
  (*((Handle_Geom2d_Ellipse*)nativeHandle))->Transform(*((gp_Trsf2d*)T->Handle));
}

OCGeom2d_Geometry^ OCGeom2d_Ellipse::Copy()
{
  Handle(Geom2d_Geometry) tmp = (*((Handle_Geom2d_Ellipse*)nativeHandle))->Copy();
  return gcnew OCGeom2d_Geometry(&tmp);
}


