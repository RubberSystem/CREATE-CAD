// File generated by CPPExt (Transient)
//
#ifndef _Geom2d_Direction_OCWrappers_HeaderFile
#define _Geom2d_Direction_OCWrappers_HeaderFile

// include the wrapped class
#include <Geom2d_Direction.hxx>
#include "../Converter.h"

#include "Geom2d_Vector.h"



namespace OCNaroWrappers
{

ref class OCgp_Dir2d;
ref class OCGeom2d_Vector;
ref class OCgp_Trsf2d;
ref class OCGeom2d_Geometry;



//!  The class Direction specifies a vector that is never null. <br>
//!  It is a unit vector. <br>
public ref class OCGeom2d_Direction : OCGeom2d_Vector {

protected:
  // dummy constructor;
  OCGeom2d_Direction(OCDummy^) : OCGeom2d_Vector((OCDummy^)nullptr) {};

public:

// constructor from native
OCGeom2d_Direction(Handle(Geom2d_Direction)* nativeHandle);

// Methods PUBLIC

//! Creates a unit vector with it 2 cartesian coordinates. <br>
//!  Raised if Sqrt( X*X + Y*Y) <= Resolution from gp. <br>
OCGeom2d_Direction(Standard_Real X, Standard_Real Y);

//! Creates a persistent copy of <me>. <br>
OCGeom2d_Direction(OCNaroWrappers::OCgp_Dir2d^ V);

//! Assigns the coordinates X and Y to this unit vector, <br>
//! then normalizes it. <br>
//! Exceptions <br>
//! Standard_ConstructionError if Sqrt(X*X + <br>
//! Y*Y) is less than or equal to gp::Resolution(). <br>
 /*instead*/  void SetCoord(Standard_Real X, Standard_Real Y) ;

//! Converts the gp_Dir2d unit vector V into this unit vector. <br>
 /*instead*/  void SetDir2d(OCNaroWrappers::OCgp_Dir2d^ V) ;


//! Assigns a value to the X coordinate of this unit vector, then normalizes it. <br>
//! Exceptions <br>
//! Standard_ConstructionError if the value assigned <br>
//! causes the magnitude of the vector to become less <br>
//! than or equal to gp::Resolution(). <br>
 /*instead*/  void SetX(Standard_Real X) ;

//! Assigns a value to the Y coordinate of this unit vector, then normalizes it. <br>
//! Exceptions <br>
//! Standard_ConstructionError if the value assigned <br>
//! causes the magnitude of the vector to become less <br>
//! than or equal to gp::Resolution(). <br>
 /*instead*/  void SetY(Standard_Real Y) ;

//! Converts this unit vector into a gp_Dir2d unit vector. <br>
 /*instead*/  OCgp_Dir2d^ Dir2d() ;

//! returns 1.0 <br>
 /*instead*/  Standard_Real Magnitude() ;

//! returns 1.0 <br>
 /*instead*/  Standard_Real SquareMagnitude() ;

//! Computes the cross product between <me> and <Other>. <br>
 /*instead*/  Standard_Real Crossed(OCNaroWrappers::OCGeom2d_Vector^ Other) ;

//! Applies the transformation T to this unit vector, then normalizes it. <br>
 /*instead*/  void Transform(OCNaroWrappers::OCgp_Trsf2d^ T) ;

//! Creates a new object which is a copy of this unit vector. <br>
 /*instead*/  OCGeom2d_Geometry^ Copy() ;

~OCGeom2d_Direction()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
