// File generated by CPPExt (CPP file)
//

#include "PColStd_HSequenceOfHExtendedString.h"
#include "../Converter.h"
#include "PColStd_SeqNodeOfHSequenceOfHExtendedString.h"
#include "PColStd_SeqExplorerOfHSequenceOfHExtendedString.h"
#include "../PCollection/PCollection_HExtendedString.h"
#include "../Standard/Standard_Persistent.h"


using namespace OCNaroWrappers;

OCPColStd_HSequenceOfHExtendedString::OCPColStd_HSequenceOfHExtendedString(Handle(PColStd_HSequenceOfHExtendedString)* nativeHandle) : OCStandard_Persistent((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PColStd_HSequenceOfHExtendedString(*nativeHandle);
}

OCPColStd_HSequenceOfHExtendedString::OCPColStd_HSequenceOfHExtendedString() : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PColStd_HSequenceOfHExtendedString(new PColStd_HSequenceOfHExtendedString());
}

 System::Boolean OCPColStd_HSequenceOfHExtendedString::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCPColStd_HSequenceOfHExtendedString::Length()
{
  return (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Length();
}

OCPCollection_HExtendedString^ OCPColStd_HSequenceOfHExtendedString::First()
{
  Handle(PCollection_HExtendedString) tmp = (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->First();
  return gcnew OCPCollection_HExtendedString(&tmp);
}

OCPCollection_HExtendedString^ OCPColStd_HSequenceOfHExtendedString::Last()
{
  Handle(PCollection_HExtendedString) tmp = (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Last();
  return gcnew OCPCollection_HExtendedString(&tmp);
}

 void OCPColStd_HSequenceOfHExtendedString::Clear()
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Clear();
}

 void OCPColStd_HSequenceOfHExtendedString::Append(OCNaroWrappers::OCPCollection_HExtendedString^ T)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Append(*((Handle_PCollection_HExtendedString*)T->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::Append(OCNaroWrappers::OCPColStd_HSequenceOfHExtendedString^ S)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Append(*((Handle_PColStd_HSequenceOfHExtendedString*)S->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::Prepend(OCNaroWrappers::OCPCollection_HExtendedString^ T)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Prepend(*((Handle_PCollection_HExtendedString*)T->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::Prepend(OCNaroWrappers::OCPColStd_HSequenceOfHExtendedString^ S)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Prepend(*((Handle_PColStd_HSequenceOfHExtendedString*)S->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::Reverse()
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Reverse();
}

 void OCPColStd_HSequenceOfHExtendedString::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPCollection_HExtendedString^ T)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->InsertBefore(Index, *((Handle_PCollection_HExtendedString*)T->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPColStd_HSequenceOfHExtendedString^ S)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->InsertBefore(Index, *((Handle_PColStd_HSequenceOfHExtendedString*)S->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPCollection_HExtendedString^ T)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->InsertAfter(Index, *((Handle_PCollection_HExtendedString*)T->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPColStd_HSequenceOfHExtendedString^ S)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->InsertAfter(Index, *((Handle_PColStd_HSequenceOfHExtendedString*)S->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::Exchange(Standard_Integer I, Standard_Integer J)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Exchange(I, J);
}

OCPColStd_HSequenceOfHExtendedString^ OCPColStd_HSequenceOfHExtendedString::SubSequence(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  Handle(PColStd_HSequenceOfHExtendedString) tmp = (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->SubSequence(FromIndex, ToIndex);
  return gcnew OCPColStd_HSequenceOfHExtendedString(&tmp);
}

OCPColStd_HSequenceOfHExtendedString^ OCPColStd_HSequenceOfHExtendedString::Split(Standard_Integer Index)
{
  Handle(PColStd_HSequenceOfHExtendedString) tmp = (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Split(Index);
  return gcnew OCPColStd_HSequenceOfHExtendedString(&tmp);
}

 void OCPColStd_HSequenceOfHExtendedString::SetValue(Standard_Integer Index, OCNaroWrappers::OCPCollection_HExtendedString^ T)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->SetValue(Index, *((Handle_PCollection_HExtendedString*)T->Handle));
}

OCPCollection_HExtendedString^ OCPColStd_HSequenceOfHExtendedString::Value(Standard_Integer Index)
{
  Handle(PCollection_HExtendedString) tmp = (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Value(Index);
  return gcnew OCPCollection_HExtendedString(&tmp);
}

 System::Boolean OCPColStd_HSequenceOfHExtendedString::Contains(OCNaroWrappers::OCPCollection_HExtendedString^ T)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Contains(*((Handle_PCollection_HExtendedString*)T->Handle)));
}

 Standard_Integer OCPColStd_HSequenceOfHExtendedString::Location(Standard_Integer N, OCNaroWrappers::OCPCollection_HExtendedString^ T, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Location(N, *((Handle_PCollection_HExtendedString*)T->Handle), FromIndex, ToIndex);
}

 Standard_Integer OCPColStd_HSequenceOfHExtendedString::Location(Standard_Integer N, OCNaroWrappers::OCPCollection_HExtendedString^ T)
{
  return (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Location(N, *((Handle_PCollection_HExtendedString*)T->Handle));
}

 void OCPColStd_HSequenceOfHExtendedString::Remove(Standard_Integer Index)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Remove(Index);
}

 void OCPColStd_HSequenceOfHExtendedString::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->Remove(FromIndex, ToIndex);
}

OCStandard_Persistent^ OCPColStd_HSequenceOfHExtendedString::ShallowCopy()
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->ShallowCopy();
  return gcnew OCStandard_Persistent(&tmp);
}

 void OCPColStd_HSequenceOfHExtendedString::ShallowDump(Standard_OStream& s)
{
  (*((Handle_PColStd_HSequenceOfHExtendedString*)nativeHandle))->ShallowDump(s);
}


