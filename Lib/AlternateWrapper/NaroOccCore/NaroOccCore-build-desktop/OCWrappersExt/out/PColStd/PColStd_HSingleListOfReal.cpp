// File generated by CPPExt (CPP file)
//

#include "PColStd_HSingleListOfReal.h"
#include "../Converter.h"
#include "../Standard/Standard_Persistent.h"


using namespace OCNaroWrappers;

OCPColStd_HSingleListOfReal::OCPColStd_HSingleListOfReal(Handle(PColStd_HSingleListOfReal)* nativeHandle) : OCPMMgt_PManaged((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PColStd_HSingleListOfReal(*nativeHandle);
}

OCPColStd_HSingleListOfReal::OCPColStd_HSingleListOfReal() : OCPMMgt_PManaged((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PColStd_HSingleListOfReal(new PColStd_HSingleListOfReal());
}

 System::Boolean OCPColStd_HSingleListOfReal::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->IsEmpty());
}

OCPColStd_HSingleListOfReal^ OCPColStd_HSingleListOfReal::Construct(Standard_Real T)
{
  Handle(PColStd_HSingleListOfReal) tmp = (*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->Construct(T);
  return gcnew OCPColStd_HSingleListOfReal(&tmp);
}

 Standard_Real OCPColStd_HSingleListOfReal::Value()
{
  return (*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->Value();
}

OCPColStd_HSingleListOfReal^ OCPColStd_HSingleListOfReal::Tail()
{
  Handle(PColStd_HSingleListOfReal) tmp = (*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->Tail();
  return gcnew OCPColStd_HSingleListOfReal(&tmp);
}

 void OCPColStd_HSingleListOfReal::SwapTail(OCNaroWrappers::OCPColStd_HSingleListOfReal^ WithList)
{
  (*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->SwapTail(*((Handle_PColStd_HSingleListOfReal*)WithList->Handle));
}

 void OCPColStd_HSingleListOfReal::SetValue(Standard_Real T)
{
  (*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->SetValue(T);
}

 void OCPColStd_HSingleListOfReal::ChangeForwardPointer(OCNaroWrappers::OCPColStd_HSingleListOfReal^ ForwardPointer)
{
  (*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->ChangeForwardPointer(*((Handle_PColStd_HSingleListOfReal*)ForwardPointer->Handle));
}

OCStandard_Persistent^ OCPColStd_HSingleListOfReal::ShallowCopy()
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->ShallowCopy();
  return gcnew OCStandard_Persistent(&tmp);
}

 void OCPColStd_HSingleListOfReal::ShallowDump(Standard_OStream& s)
{
  (*((Handle_PColStd_HSingleListOfReal*)nativeHandle))->ShallowDump(s);
}


