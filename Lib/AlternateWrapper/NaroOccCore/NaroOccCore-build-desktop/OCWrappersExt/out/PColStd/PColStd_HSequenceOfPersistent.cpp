// File generated by CPPExt (CPP file)
//

#include "PColStd_HSequenceOfPersistent.h"
#include "../Converter.h"
#include "PColStd_SeqNodeOfHSequenceOfPersistent.h"
#include "PColStd_SeqExplorerOfHSequenceOfPersistent.h"
#include "../Standard/Standard_Persistent.h"


using namespace OCNaroWrappers;

OCPColStd_HSequenceOfPersistent::OCPColStd_HSequenceOfPersistent(Handle(PColStd_HSequenceOfPersistent)* nativeHandle) : OCStandard_Persistent((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PColStd_HSequenceOfPersistent(*nativeHandle);
}

OCPColStd_HSequenceOfPersistent::OCPColStd_HSequenceOfPersistent() : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PColStd_HSequenceOfPersistent(new PColStd_HSequenceOfPersistent());
}

 System::Boolean OCPColStd_HSequenceOfPersistent::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCPColStd_HSequenceOfPersistent::Length()
{
  return (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Length();
}

OCStandard_Persistent^ OCPColStd_HSequenceOfPersistent::First()
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->First();
  return gcnew OCStandard_Persistent(&tmp);
}

OCStandard_Persistent^ OCPColStd_HSequenceOfPersistent::Last()
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Last();
  return gcnew OCStandard_Persistent(&tmp);
}

 void OCPColStd_HSequenceOfPersistent::Clear()
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Clear();
}

 void OCPColStd_HSequenceOfPersistent::Append(OCNaroWrappers::OCStandard_Persistent^ T)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Append(*((Handle_Standard_Persistent*)T->Handle));
}

 void OCPColStd_HSequenceOfPersistent::Append(OCNaroWrappers::OCPColStd_HSequenceOfPersistent^ S)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Append(*((Handle_PColStd_HSequenceOfPersistent*)S->Handle));
}

 void OCPColStd_HSequenceOfPersistent::Prepend(OCNaroWrappers::OCStandard_Persistent^ T)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Prepend(*((Handle_Standard_Persistent*)T->Handle));
}

 void OCPColStd_HSequenceOfPersistent::Prepend(OCNaroWrappers::OCPColStd_HSequenceOfPersistent^ S)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Prepend(*((Handle_PColStd_HSequenceOfPersistent*)S->Handle));
}

 void OCPColStd_HSequenceOfPersistent::Reverse()
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Reverse();
}

 void OCPColStd_HSequenceOfPersistent::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCStandard_Persistent^ T)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->InsertBefore(Index, *((Handle_Standard_Persistent*)T->Handle));
}

 void OCPColStd_HSequenceOfPersistent::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPColStd_HSequenceOfPersistent^ S)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->InsertBefore(Index, *((Handle_PColStd_HSequenceOfPersistent*)S->Handle));
}

 void OCPColStd_HSequenceOfPersistent::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCStandard_Persistent^ T)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->InsertAfter(Index, *((Handle_Standard_Persistent*)T->Handle));
}

 void OCPColStd_HSequenceOfPersistent::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPColStd_HSequenceOfPersistent^ S)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->InsertAfter(Index, *((Handle_PColStd_HSequenceOfPersistent*)S->Handle));
}

 void OCPColStd_HSequenceOfPersistent::Exchange(Standard_Integer I, Standard_Integer J)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Exchange(I, J);
}

OCPColStd_HSequenceOfPersistent^ OCPColStd_HSequenceOfPersistent::SubSequence(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  Handle(PColStd_HSequenceOfPersistent) tmp = (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->SubSequence(FromIndex, ToIndex);
  return gcnew OCPColStd_HSequenceOfPersistent(&tmp);
}

OCPColStd_HSequenceOfPersistent^ OCPColStd_HSequenceOfPersistent::Split(Standard_Integer Index)
{
  Handle(PColStd_HSequenceOfPersistent) tmp = (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Split(Index);
  return gcnew OCPColStd_HSequenceOfPersistent(&tmp);
}

 void OCPColStd_HSequenceOfPersistent::SetValue(Standard_Integer Index, OCNaroWrappers::OCStandard_Persistent^ T)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->SetValue(Index, *((Handle_Standard_Persistent*)T->Handle));
}

OCStandard_Persistent^ OCPColStd_HSequenceOfPersistent::Value(Standard_Integer Index)
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Value(Index);
  return gcnew OCStandard_Persistent(&tmp);
}

 System::Boolean OCPColStd_HSequenceOfPersistent::Contains(OCNaroWrappers::OCStandard_Persistent^ T)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Contains(*((Handle_Standard_Persistent*)T->Handle)));
}

 Standard_Integer OCPColStd_HSequenceOfPersistent::Location(Standard_Integer N, OCNaroWrappers::OCStandard_Persistent^ T, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Location(N, *((Handle_Standard_Persistent*)T->Handle), FromIndex, ToIndex);
}

 Standard_Integer OCPColStd_HSequenceOfPersistent::Location(Standard_Integer N, OCNaroWrappers::OCStandard_Persistent^ T)
{
  return (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Location(N, *((Handle_Standard_Persistent*)T->Handle));
}

 void OCPColStd_HSequenceOfPersistent::Remove(Standard_Integer Index)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Remove(Index);
}

 void OCPColStd_HSequenceOfPersistent::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->Remove(FromIndex, ToIndex);
}

OCStandard_Persistent^ OCPColStd_HSequenceOfPersistent::ShallowCopy()
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->ShallowCopy();
  return gcnew OCStandard_Persistent(&tmp);
}

 void OCPColStd_HSequenceOfPersistent::ShallowDump(Standard_OStream& s)
{
  (*((Handle_PColStd_HSequenceOfPersistent*)nativeHandle))->ShallowDump(s);
}


