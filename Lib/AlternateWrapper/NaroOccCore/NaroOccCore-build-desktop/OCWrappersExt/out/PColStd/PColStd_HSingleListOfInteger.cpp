// File generated by CPPExt (CPP file)
//

#include "PColStd_HSingleListOfInteger.h"
#include "../Converter.h"
#include "../Standard/Standard_Persistent.h"


using namespace OCNaroWrappers;

OCPColStd_HSingleListOfInteger::OCPColStd_HSingleListOfInteger(Handle(PColStd_HSingleListOfInteger)* nativeHandle) : OCPMMgt_PManaged((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PColStd_HSingleListOfInteger(*nativeHandle);
}

OCPColStd_HSingleListOfInteger::OCPColStd_HSingleListOfInteger() : OCPMMgt_PManaged((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PColStd_HSingleListOfInteger(new PColStd_HSingleListOfInteger());
}

 System::Boolean OCPColStd_HSingleListOfInteger::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->IsEmpty());
}

OCPColStd_HSingleListOfInteger^ OCPColStd_HSingleListOfInteger::Construct(Standard_Integer T)
{
  Handle(PColStd_HSingleListOfInteger) tmp = (*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->Construct(T);
  return gcnew OCPColStd_HSingleListOfInteger(&tmp);
}

 Standard_Integer OCPColStd_HSingleListOfInteger::Value()
{
  return (*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->Value();
}

OCPColStd_HSingleListOfInteger^ OCPColStd_HSingleListOfInteger::Tail()
{
  Handle(PColStd_HSingleListOfInteger) tmp = (*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->Tail();
  return gcnew OCPColStd_HSingleListOfInteger(&tmp);
}

 void OCPColStd_HSingleListOfInteger::SwapTail(OCNaroWrappers::OCPColStd_HSingleListOfInteger^ WithList)
{
  (*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->SwapTail(*((Handle_PColStd_HSingleListOfInteger*)WithList->Handle));
}

 void OCPColStd_HSingleListOfInteger::SetValue(Standard_Integer T)
{
  (*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->SetValue(T);
}

 void OCPColStd_HSingleListOfInteger::ChangeForwardPointer(OCNaroWrappers::OCPColStd_HSingleListOfInteger^ ForwardPointer)
{
  (*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->ChangeForwardPointer(*((Handle_PColStd_HSingleListOfInteger*)ForwardPointer->Handle));
}

OCStandard_Persistent^ OCPColStd_HSingleListOfInteger::ShallowCopy()
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->ShallowCopy();
  return gcnew OCStandard_Persistent(&tmp);
}

 void OCPColStd_HSingleListOfInteger::ShallowDump(Standard_OStream& s)
{
  (*((Handle_PColStd_HSingleListOfInteger*)nativeHandle))->ShallowDump(s);
}


