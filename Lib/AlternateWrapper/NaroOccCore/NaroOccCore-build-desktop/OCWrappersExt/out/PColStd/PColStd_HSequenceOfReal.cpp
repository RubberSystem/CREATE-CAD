// File generated by CPPExt (CPP file)
//

#include "PColStd_HSequenceOfReal.h"
#include "../Converter.h"
#include "PColStd_SeqNodeOfHSequenceOfReal.h"
#include "PColStd_SeqExplorerOfHSequenceOfReal.h"
#include "../Standard/Standard_Persistent.h"


using namespace OCNaroWrappers;

OCPColStd_HSequenceOfReal::OCPColStd_HSequenceOfReal(Handle(PColStd_HSequenceOfReal)* nativeHandle) : OCStandard_Persistent((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PColStd_HSequenceOfReal(*nativeHandle);
}

OCPColStd_HSequenceOfReal::OCPColStd_HSequenceOfReal() : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PColStd_HSequenceOfReal(new PColStd_HSequenceOfReal());
}

 System::Boolean OCPColStd_HSequenceOfReal::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCPColStd_HSequenceOfReal::Length()
{
  return (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Length();
}

 Standard_Real OCPColStd_HSequenceOfReal::First()
{
  return (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->First();
}

 Standard_Real OCPColStd_HSequenceOfReal::Last()
{
  return (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Last();
}

 void OCPColStd_HSequenceOfReal::Clear()
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Clear();
}

 void OCPColStd_HSequenceOfReal::Append(Standard_Real T)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Append(T);
}

 void OCPColStd_HSequenceOfReal::Append(OCNaroWrappers::OCPColStd_HSequenceOfReal^ S)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Append(*((Handle_PColStd_HSequenceOfReal*)S->Handle));
}

 void OCPColStd_HSequenceOfReal::Prepend(Standard_Real T)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Prepend(T);
}

 void OCPColStd_HSequenceOfReal::Prepend(OCNaroWrappers::OCPColStd_HSequenceOfReal^ S)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Prepend(*((Handle_PColStd_HSequenceOfReal*)S->Handle));
}

 void OCPColStd_HSequenceOfReal::Reverse()
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Reverse();
}

 void OCPColStd_HSequenceOfReal::InsertBefore(Standard_Integer Index, Standard_Real T)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->InsertBefore(Index, T);
}

 void OCPColStd_HSequenceOfReal::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPColStd_HSequenceOfReal^ S)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->InsertBefore(Index, *((Handle_PColStd_HSequenceOfReal*)S->Handle));
}

 void OCPColStd_HSequenceOfReal::InsertAfter(Standard_Integer Index, Standard_Real T)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->InsertAfter(Index, T);
}

 void OCPColStd_HSequenceOfReal::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPColStd_HSequenceOfReal^ S)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->InsertAfter(Index, *((Handle_PColStd_HSequenceOfReal*)S->Handle));
}

 void OCPColStd_HSequenceOfReal::Exchange(Standard_Integer I, Standard_Integer J)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Exchange(I, J);
}

OCPColStd_HSequenceOfReal^ OCPColStd_HSequenceOfReal::SubSequence(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  Handle(PColStd_HSequenceOfReal) tmp = (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->SubSequence(FromIndex, ToIndex);
  return gcnew OCPColStd_HSequenceOfReal(&tmp);
}

OCPColStd_HSequenceOfReal^ OCPColStd_HSequenceOfReal::Split(Standard_Integer Index)
{
  Handle(PColStd_HSequenceOfReal) tmp = (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Split(Index);
  return gcnew OCPColStd_HSequenceOfReal(&tmp);
}

 void OCPColStd_HSequenceOfReal::SetValue(Standard_Integer Index, Standard_Real T)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->SetValue(Index, T);
}

 Standard_Real OCPColStd_HSequenceOfReal::Value(Standard_Integer Index)
{
  return (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Value(Index);
}

 System::Boolean OCPColStd_HSequenceOfReal::Contains(Standard_Real T)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Contains(T));
}

 Standard_Integer OCPColStd_HSequenceOfReal::Location(Standard_Integer N, Standard_Real T, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Location(N, T, FromIndex, ToIndex);
}

 Standard_Integer OCPColStd_HSequenceOfReal::Location(Standard_Integer N, Standard_Real T)
{
  return (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Location(N, T);
}

 void OCPColStd_HSequenceOfReal::Remove(Standard_Integer Index)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Remove(Index);
}

 void OCPColStd_HSequenceOfReal::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->Remove(FromIndex, ToIndex);
}

OCStandard_Persistent^ OCPColStd_HSequenceOfReal::ShallowCopy()
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->ShallowCopy();
  return gcnew OCStandard_Persistent(&tmp);
}

 void OCPColStd_HSequenceOfReal::ShallowDump(Standard_OStream& s)
{
  (*((Handle_PColStd_HSequenceOfReal*)nativeHandle))->ShallowDump(s);
}


