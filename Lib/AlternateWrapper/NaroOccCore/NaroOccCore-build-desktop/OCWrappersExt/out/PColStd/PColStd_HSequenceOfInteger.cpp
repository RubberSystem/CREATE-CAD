// File generated by CPPExt (CPP file)
//

#include "PColStd_HSequenceOfInteger.h"
#include "../Converter.h"
#include "PColStd_SeqNodeOfHSequenceOfInteger.h"
#include "PColStd_SeqExplorerOfHSequenceOfInteger.h"
#include "../Standard/Standard_Persistent.h"


using namespace OCNaroWrappers;

OCPColStd_HSequenceOfInteger::OCPColStd_HSequenceOfInteger(Handle(PColStd_HSequenceOfInteger)* nativeHandle) : OCStandard_Persistent((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_PColStd_HSequenceOfInteger(*nativeHandle);
}

OCPColStd_HSequenceOfInteger::OCPColStd_HSequenceOfInteger() : OCStandard_Persistent((OCDummy^)nullptr)

{
  nativeHandle = new Handle_PColStd_HSequenceOfInteger(new PColStd_HSequenceOfInteger());
}

 System::Boolean OCPColStd_HSequenceOfInteger::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->IsEmpty());
}

 Standard_Integer OCPColStd_HSequenceOfInteger::Length()
{
  return (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Length();
}

 Standard_Integer OCPColStd_HSequenceOfInteger::First()
{
  return (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->First();
}

 Standard_Integer OCPColStd_HSequenceOfInteger::Last()
{
  return (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Last();
}

 void OCPColStd_HSequenceOfInteger::Clear()
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Clear();
}

 void OCPColStd_HSequenceOfInteger::Append(Standard_Integer T)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Append(T);
}

 void OCPColStd_HSequenceOfInteger::Append(OCNaroWrappers::OCPColStd_HSequenceOfInteger^ S)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Append(*((Handle_PColStd_HSequenceOfInteger*)S->Handle));
}

 void OCPColStd_HSequenceOfInteger::Prepend(Standard_Integer T)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Prepend(T);
}

 void OCPColStd_HSequenceOfInteger::Prepend(OCNaroWrappers::OCPColStd_HSequenceOfInteger^ S)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Prepend(*((Handle_PColStd_HSequenceOfInteger*)S->Handle));
}

 void OCPColStd_HSequenceOfInteger::Reverse()
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Reverse();
}

 void OCPColStd_HSequenceOfInteger::InsertBefore(Standard_Integer Index, Standard_Integer T)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->InsertBefore(Index, T);
}

 void OCPColStd_HSequenceOfInteger::InsertBefore(Standard_Integer Index, OCNaroWrappers::OCPColStd_HSequenceOfInteger^ S)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->InsertBefore(Index, *((Handle_PColStd_HSequenceOfInteger*)S->Handle));
}

 void OCPColStd_HSequenceOfInteger::InsertAfter(Standard_Integer Index, Standard_Integer T)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->InsertAfter(Index, T);
}

 void OCPColStd_HSequenceOfInteger::InsertAfter(Standard_Integer Index, OCNaroWrappers::OCPColStd_HSequenceOfInteger^ S)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->InsertAfter(Index, *((Handle_PColStd_HSequenceOfInteger*)S->Handle));
}

 void OCPColStd_HSequenceOfInteger::Exchange(Standard_Integer I, Standard_Integer J)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Exchange(I, J);
}

OCPColStd_HSequenceOfInteger^ OCPColStd_HSequenceOfInteger::SubSequence(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  Handle(PColStd_HSequenceOfInteger) tmp = (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->SubSequence(FromIndex, ToIndex);
  return gcnew OCPColStd_HSequenceOfInteger(&tmp);
}

OCPColStd_HSequenceOfInteger^ OCPColStd_HSequenceOfInteger::Split(Standard_Integer Index)
{
  Handle(PColStd_HSequenceOfInteger) tmp = (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Split(Index);
  return gcnew OCPColStd_HSequenceOfInteger(&tmp);
}

 void OCPColStd_HSequenceOfInteger::SetValue(Standard_Integer Index, Standard_Integer T)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->SetValue(Index, T);
}

 Standard_Integer OCPColStd_HSequenceOfInteger::Value(Standard_Integer Index)
{
  return (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Value(Index);
}

 System::Boolean OCPColStd_HSequenceOfInteger::Contains(Standard_Integer T)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Contains(T));
}

 Standard_Integer OCPColStd_HSequenceOfInteger::Location(Standard_Integer N, Standard_Integer T, Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  return (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Location(N, T, FromIndex, ToIndex);
}

 Standard_Integer OCPColStd_HSequenceOfInteger::Location(Standard_Integer N, Standard_Integer T)
{
  return (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Location(N, T);
}

 void OCPColStd_HSequenceOfInteger::Remove(Standard_Integer Index)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Remove(Index);
}

 void OCPColStd_HSequenceOfInteger::Remove(Standard_Integer FromIndex, Standard_Integer ToIndex)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->Remove(FromIndex, ToIndex);
}

OCStandard_Persistent^ OCPColStd_HSequenceOfInteger::ShallowCopy()
{
  Handle(Standard_Persistent) tmp = (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->ShallowCopy();
  return gcnew OCStandard_Persistent(&tmp);
}

 void OCPColStd_HSequenceOfInteger::ShallowDump(Standard_OStream& s)
{
  (*((Handle_PColStd_HSequenceOfInteger*)nativeHandle))->ShallowDump(s);
}


