// File generated by CPPExt (MPV)
//
#ifndef _Blend_CSFunction_OCWrappers_HeaderFile
#define _Blend_CSFunction_OCWrappers_HeaderFile

// include native header
#include <Blend_CSFunction.hxx>
#include "../Converter.h"

#include "Blend_AppFunction.h"

#include "Blend_AppFunction.h"


namespace OCNaroWrappers
{

ref class OCmath_Vector;
ref class OCmath_Matrix;
ref class OCgp_Pnt;
ref class OCgp_Pnt2d;
ref class OCgp_Vec;
ref class OCgp_Vec2d;
ref class OCTColStd_Array1OfReal;
ref class OCTColStd_Array1OfInteger;
ref class OCBlend_Point;
ref class OCTColgp_Array1OfPnt;
ref class OCTColgp_Array1OfVec;
ref class OCTColgp_Array1OfPnt2d;
ref class OCTColgp_Array1OfVec2d;


//! Deferred class for a function used to compute a blending <br>
//!          surface between a surface and a curve, using a guide line. <br>
//!          The vector <X> used in Value, Values and Derivatives methods <br>
//!          may be the vector of the parametric coordinates U,V, <br>
//!          W of the extremities of a section on the surface  and <br>
//!          the curve. <br>
public ref class OCBlend_CSFunction  : public OCBlend_AppFunction {

protected:
  // dummy constructor;
  OCBlend_CSFunction(OCDummy^) : OCBlend_AppFunction((OCDummy^)nullptr) {};

public:

// constructor from native
OCBlend_CSFunction(Blend_CSFunction* nativeHandle);

// Methods PUBLIC

//! Returns 3 (default value). Can be redefined. <br>
virtual /*instead*/  Standard_Integer NbVariables() ;

//! Returns   the    minimal  Distance  beetween   two <br>
//!          extremitys of calculed sections. <br>
virtual /*instead*/  Standard_Real GetMinimalDistance() ;

//! Returns the point on the first support. <br>
virtual /*instead*/  OCgp_Pnt^ Pnt1() ;

//! Returns the point on the seconde support. <br>
virtual /*instead*/  OCgp_Pnt^ Pnt2() ;

//! Used for the first and last section <br>
//!          The method returns Standard_True if the derivatives <br>
//!          are computed, otherwise it returns Standard_False. <br>
virtual /*instead*/  System::Boolean Section(OCNaroWrappers::OCBlend_Point^ P, OCNaroWrappers::OCTColgp_Array1OfPnt^ Poles, OCNaroWrappers::OCTColgp_Array1OfVec^ DPoles, OCNaroWrappers::OCTColgp_Array1OfVec^ D2Poles, OCNaroWrappers::OCTColgp_Array1OfPnt2d^ Poles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ DPoles2d, OCNaroWrappers::OCTColgp_Array1OfVec2d^ D2Poles2d, OCNaroWrappers::OCTColStd_Array1OfReal^ Weigths, OCNaroWrappers::OCTColStd_Array1OfReal^ DWeigths, OCNaroWrappers::OCTColStd_Array1OfReal^ D2Weigths) ;

~OCBlend_CSFunction()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
