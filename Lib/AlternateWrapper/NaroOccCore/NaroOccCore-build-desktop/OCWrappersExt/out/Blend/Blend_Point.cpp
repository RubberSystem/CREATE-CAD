// File generated by CPPExt (CPP file)
//

#include "Blend_Point.h"
#include "../Converter.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Vec.h"
#include "../gp/gp_Vec2d.h"


using namespace OCNaroWrappers;

OCBlend_Point::OCBlend_Point(Blend_Point* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCBlend_Point::OCBlend_Point() 
{
  nativeHandle = new Blend_Point();
}

OCBlend_Point::OCBlend_Point(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, OCNaroWrappers::OCgp_Vec^ Tg1, OCNaroWrappers::OCgp_Vec^ Tg2, OCNaroWrappers::OCgp_Vec2d^ Tg12d, OCNaroWrappers::OCgp_Vec2d^ Tg22d) 
{
  nativeHandle = new Blend_Point(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, *((gp_Vec*)Tg1->Handle), *((gp_Vec*)Tg2->Handle), *((gp_Vec2d*)Tg12d->Handle), *((gp_Vec2d*)Tg22d->Handle));
}

OCBlend_Point::OCBlend_Point(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2) 
{
  nativeHandle = new Blend_Point(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2);
}

OCBlend_Point::OCBlend_Point(OCNaroWrappers::OCgp_Pnt^ Pts, OCNaroWrappers::OCgp_Pnt^ Ptc, Standard_Real Param, Standard_Real U, Standard_Real V, Standard_Real W, OCNaroWrappers::OCgp_Vec^ Tgs, OCNaroWrappers::OCgp_Vec^ Tgc, OCNaroWrappers::OCgp_Vec2d^ Tg2d) 
{
  nativeHandle = new Blend_Point(*((gp_Pnt*)Pts->Handle), *((gp_Pnt*)Ptc->Handle), Param, U, V, W, *((gp_Vec*)Tgs->Handle), *((gp_Vec*)Tgc->Handle), *((gp_Vec2d*)Tg2d->Handle));
}

OCBlend_Point::OCBlend_Point(OCNaroWrappers::OCgp_Pnt^ Pts, OCNaroWrappers::OCgp_Pnt^ Ptc, Standard_Real Param, Standard_Real U, Standard_Real V, Standard_Real W) 
{
  nativeHandle = new Blend_Point(*((gp_Pnt*)Pts->Handle), *((gp_Pnt*)Ptc->Handle), Param, U, V, W);
}

OCBlend_Point::OCBlend_Point(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, Standard_Real PC, OCNaroWrappers::OCgp_Vec^ Tg1, OCNaroWrappers::OCgp_Vec^ Tg2, OCNaroWrappers::OCgp_Vec2d^ Tg12d, OCNaroWrappers::OCgp_Vec2d^ Tg22d) 
{
  nativeHandle = new Blend_Point(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, PC, *((gp_Vec*)Tg1->Handle), *((gp_Vec*)Tg2->Handle), *((gp_Vec2d*)Tg12d->Handle), *((gp_Vec2d*)Tg22d->Handle));
}

OCBlend_Point::OCBlend_Point(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, Standard_Real PC) 
{
  nativeHandle = new Blend_Point(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, PC);
}

OCBlend_Point::OCBlend_Point(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, Standard_Real PC1, Standard_Real PC2, OCNaroWrappers::OCgp_Vec^ Tg1, OCNaroWrappers::OCgp_Vec^ Tg2, OCNaroWrappers::OCgp_Vec2d^ Tg12d, OCNaroWrappers::OCgp_Vec2d^ Tg22d) 
{
  nativeHandle = new Blend_Point(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, PC1, PC2, *((gp_Vec*)Tg1->Handle), *((gp_Vec*)Tg2->Handle), *((gp_Vec2d*)Tg12d->Handle), *((gp_Vec2d*)Tg22d->Handle));
}

OCBlend_Point::OCBlend_Point(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, Standard_Real PC1, Standard_Real PC2) 
{
  nativeHandle = new Blend_Point(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, PC1, PC2);
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, OCNaroWrappers::OCgp_Vec^ Tg1, OCNaroWrappers::OCgp_Vec^ Tg2, OCNaroWrappers::OCgp_Vec2d^ Tg12d, OCNaroWrappers::OCgp_Vec2d^ Tg22d)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, *((gp_Vec*)Tg1->Handle), *((gp_Vec*)Tg2->Handle), *((gp_Vec2d*)Tg12d->Handle), *((gp_Vec2d*)Tg22d->Handle));
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2);
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pts, OCNaroWrappers::OCgp_Pnt^ Ptc, Standard_Real Param, Standard_Real U, Standard_Real V, Standard_Real W, OCNaroWrappers::OCgp_Vec^ Tgs, OCNaroWrappers::OCgp_Vec^ Tgc, OCNaroWrappers::OCgp_Vec2d^ Tg2d)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pts->Handle), *((gp_Pnt*)Ptc->Handle), Param, U, V, W, *((gp_Vec*)Tgs->Handle), *((gp_Vec*)Tgc->Handle), *((gp_Vec2d*)Tg2d->Handle));
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pts, OCNaroWrappers::OCgp_Pnt^ Ptc, Standard_Real Param, Standard_Real U, Standard_Real V, Standard_Real W)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pts->Handle), *((gp_Pnt*)Ptc->Handle), Param, U, V, W);
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, Standard_Real PC, OCNaroWrappers::OCgp_Vec^ Tg1, OCNaroWrappers::OCgp_Vec^ Tg2, OCNaroWrappers::OCgp_Vec2d^ Tg12d, OCNaroWrappers::OCgp_Vec2d^ Tg22d)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, PC, *((gp_Vec*)Tg1->Handle), *((gp_Vec*)Tg2->Handle), *((gp_Vec2d*)Tg12d->Handle), *((gp_Vec2d*)Tg22d->Handle));
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, Standard_Real PC)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, PC);
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, Standard_Real PC1, Standard_Real PC2, OCNaroWrappers::OCgp_Vec^ Tg1, OCNaroWrappers::OCgp_Vec^ Tg2, OCNaroWrappers::OCgp_Vec2d^ Tg12d, OCNaroWrappers::OCgp_Vec2d^ Tg22d)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, PC1, PC2, *((gp_Vec*)Tg1->Handle), *((gp_Vec*)Tg2->Handle), *((gp_Vec2d*)Tg12d->Handle), *((gp_Vec2d*)Tg22d->Handle));
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real U1, Standard_Real V1, Standard_Real U2, Standard_Real V2, Standard_Real PC1, Standard_Real PC2)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, U1, V1, U2, V2, PC1, PC2);
}

 void OCBlend_Point::SetValue(OCNaroWrappers::OCgp_Pnt^ Pt1, OCNaroWrappers::OCgp_Pnt^ Pt2, Standard_Real Param, Standard_Real PC1, Standard_Real PC2)
{
  ((Blend_Point*)nativeHandle)->SetValue(*((gp_Pnt*)Pt1->Handle), *((gp_Pnt*)Pt2->Handle), Param, PC1, PC2);
}

 Standard_Real OCBlend_Point::Parameter()
{
  return ((Blend_Point*)nativeHandle)->Parameter();
}

 System::Boolean OCBlend_Point::IsTangencyPoint()
{
  return OCConverter::StandardBooleanToBoolean(((Blend_Point*)nativeHandle)->IsTangencyPoint());
}

OCgp_Pnt^ OCBlend_Point::PointOnS1()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Blend_Point*)nativeHandle)->PointOnS1();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCBlend_Point::PointOnS2()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Blend_Point*)nativeHandle)->PointOnS2();
  return gcnew OCgp_Pnt(tmp);
}

 void OCBlend_Point::ParametersOnS1(Standard_Real& U, Standard_Real& V)
{
  ((Blend_Point*)nativeHandle)->ParametersOnS1(U, V);
}

 void OCBlend_Point::ParametersOnS2(Standard_Real& U, Standard_Real& V)
{
  ((Blend_Point*)nativeHandle)->ParametersOnS2(U, V);
}

OCgp_Vec^ OCBlend_Point::TangentOnS1()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((Blend_Point*)nativeHandle)->TangentOnS1();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCBlend_Point::TangentOnS2()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((Blend_Point*)nativeHandle)->TangentOnS2();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec2d^ OCBlend_Point::Tangent2dOnS1()
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((Blend_Point*)nativeHandle)->Tangent2dOnS1();
  return gcnew OCgp_Vec2d(tmp);
}

OCgp_Vec2d^ OCBlend_Point::Tangent2dOnS2()
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((Blend_Point*)nativeHandle)->Tangent2dOnS2();
  return gcnew OCgp_Vec2d(tmp);
}

OCgp_Pnt^ OCBlend_Point::PointOnS()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Blend_Point*)nativeHandle)->PointOnS();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCBlend_Point::PointOnC()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Blend_Point*)nativeHandle)->PointOnC();
  return gcnew OCgp_Pnt(tmp);
}

 void OCBlend_Point::ParametersOnS(Standard_Real& U, Standard_Real& V)
{
  ((Blend_Point*)nativeHandle)->ParametersOnS(U, V);
}

 Standard_Real OCBlend_Point::ParameterOnC()
{
  return ((Blend_Point*)nativeHandle)->ParameterOnC();
}

OCgp_Vec^ OCBlend_Point::TangentOnS()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((Blend_Point*)nativeHandle)->TangentOnS();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCBlend_Point::TangentOnC()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((Blend_Point*)nativeHandle)->TangentOnC();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec2d^ OCBlend_Point::Tangent2d()
{
  gp_Vec2d* tmp = new gp_Vec2d();
  *tmp = ((Blend_Point*)nativeHandle)->Tangent2d();
  return gcnew OCgp_Vec2d(tmp);
}

OCgp_Pnt^ OCBlend_Point::PointOnC1()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Blend_Point*)nativeHandle)->PointOnC1();
  return gcnew OCgp_Pnt(tmp);
}

OCgp_Pnt^ OCBlend_Point::PointOnC2()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((Blend_Point*)nativeHandle)->PointOnC2();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCBlend_Point::ParameterOnC1()
{
  return ((Blend_Point*)nativeHandle)->ParameterOnC1();
}

 Standard_Real OCBlend_Point::ParameterOnC2()
{
  return ((Blend_Point*)nativeHandle)->ParameterOnC2();
}

OCgp_Vec^ OCBlend_Point::TangentOnC1()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((Blend_Point*)nativeHandle)->TangentOnC1();
  return gcnew OCgp_Vec(tmp);
}

OCgp_Vec^ OCBlend_Point::TangentOnC2()
{
  gp_Vec* tmp = new gp_Vec();
  *tmp = ((Blend_Point*)nativeHandle)->TangentOnC2();
  return gcnew OCgp_Vec(tmp);
}


