// File generated by CPPExt (MPV)
//
#ifndef _BRepOffset_Tool_OCWrappers_HeaderFile
#define _BRepOffset_Tool_OCWrappers_HeaderFile

// include native header
#include <BRepOffset_Tool.hxx>
#include "../Converter.h"


#include "../TopAbs/TopAbs_Orientation.h"
#include "../TopAbs/TopAbs_State.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Edge;
ref class OCTopoDS_Vertex;
ref class OCTopoDS_Face;
ref class OCTopTools_ListOfShape;
ref class OCBRepOffset_Analyse;
ref class OCTopTools_DataMapOfShapeShape;
ref class OCTopoDS_Wire;
ref class OCTopoDS_Shape;
ref class OCTopTools_DataMapOfShapeListOfShape;
ref class OCTopTools_MapOfShape;
ref class OCTopTools_IndexedMapOfShape;
ref class OCBRepAlgo_AsDes;
ref class OCBRepAlgo_Image;
ref class OCGeom_Curve;



public ref class OCBRepOffset_Tool  {

protected:
  BRepOffset_Tool* nativeHandle;
  OCBRepOffset_Tool(OCDummy^) {};

public:
  property BRepOffset_Tool* Handle
  {
    BRepOffset_Tool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCBRepOffset_Tool(BRepOffset_Tool* nativeHandle);

// Methods PUBLIC

//! <V1> is the FirstVertex ,<V2> is the Last Vertex of <Edge> <br>
//!          taking account the orientation of Edge. <br>
static /*instead*/  void EdgeVertices(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Vertex^ V1, OCNaroWrappers::OCTopoDS_Vertex^ V2) ;

//! returns the cumul  of the orientation  of <Edge> <br>
//!          and thc containing wire in <Face> <br>
static /*instead*/  OCTopAbs_Orientation OriEdgeInFace(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F) ;

//! <E> is a section  between <F1> and <F2>.  Computes <br>
//!          <O1> the orientation of <E> in <F1> influenced by <F2>. <br>
//!          idem for <O2>. <br>
static /*instead*/  void OrientSection(OCNaroWrappers::OCTopoDS_Edge^ E, OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCTopAbs_Orientation& O1, OCTopAbs_Orientation& O2) ;

//! Returns True if  <F1> and <F2> has common Vertices <br>
//!          or edges , <LE> contains the common edges. <LV> the <br>
//!          common vertices. <br>
static /*instead*/  System::Boolean HasCommonShapes(OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCNaroWrappers::OCTopTools_ListOfShape^ LE, OCNaroWrappers::OCTopTools_ListOfShape^ LV) ;

//! Computes the   Section betwwen  <F1> and  <F2> the <br>
//!          edges solution   are  stored in <LInt1>  with  the <br>
//!          orientation on <F1>, the sames edges are stored in <br>
//!          <Lint2> with the orientation on <F2>. <br>
static /*instead*/  void Inter3D(OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCNaroWrappers::OCTopTools_ListOfShape^ LInt1, OCNaroWrappers::OCTopTools_ListOfShape^ LInt2, OCTopAbs_State Side, OCNaroWrappers::OCTopoDS_Edge^ RefEdge, System::Boolean IsRefEdgeDefined) ;

//! Find if the edges <Edges> of the face <F2> are on <br>
//!          the face <F1>. <br>
//!          Set in <LInt1> <LInt2> the updated edges. <br>
//!          If all the edges are computed, returns true. <br>
//! <br>
static /*instead*/  System::Boolean TryProject(OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCNaroWrappers::OCTopTools_ListOfShape^ Edges, OCNaroWrappers::OCTopTools_ListOfShape^ LInt1, OCNaroWrappers::OCTopTools_ListOfShape^ LInt2, OCTopAbs_State Side, Standard_Real TolConf) ;


static /*instead*/  void PipeInter(OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCNaroWrappers::OCTopTools_ListOfShape^ LInt1, OCNaroWrappers::OCTopTools_ListOfShape^ LInt2, OCTopAbs_State Side) ;


static /*instead*/  void Inter2d(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Edge^ E1, OCNaroWrappers::OCTopoDS_Edge^ E2, OCNaroWrappers::OCTopTools_ListOfShape^ LV, Standard_Real Tol) ;


static /*instead*/  void InterOrExtent(OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCNaroWrappers::OCTopTools_ListOfShape^ LInt1, OCNaroWrappers::OCTopTools_ListOfShape^ LInt2, OCTopAbs_State Side) ;


static /*instead*/  void CheckBounds(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCBRepOffset_Analyse^ Analyse, System::Boolean& enlargeU, System::Boolean& enlargeVfirst, System::Boolean& enlargeVlast) ;

//! if <ChangeGeom> is TRUE  ,   the surface  can  be <br>
//!          changed . <br>
//!          if <UpdatePCurve>  is  TRUE, update the  pcurves of the <br>
//!          edges of <F> on   the new surface.if the surface has  been changed, <br>
//!          Returns  True if The Surface of  <NF> has changed. <br>
//! <br>
static /*instead*/  System::Boolean EnLargeFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopoDS_Face^ NF, System::Boolean ChangeGeom, System::Boolean UpDatePCurve, System::Boolean enlargeU, System::Boolean enlargeVfirst, System::Boolean enlargeVlast) ;


static /*instead*/  void ExtentFace(OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ ConstShapes, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ ToBuild, OCTopAbs_State Side, Standard_Real TolConf, OCNaroWrappers::OCTopoDS_Face^ NF) ;

//! Via the wire explorer store in <NOnV1> for <br>
//!          an Edge <E> of <W> his Edge neighbour on the first <br>
//!          vertex <V1> of <E>. <br>
//!          Store in NOnV2 the Neighbour of <E>on the last <br>
//!          vertex <V2> of <E>. <br>
static /*instead*/  void BuildNeighbour(OCNaroWrappers::OCTopoDS_Wire^ W, OCNaroWrappers::OCTopoDS_Face^ F, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ NOnV1, OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ NOnV2) ;

//! Store in MVE for a vertex <V>  in <S> the incident <br>
//!          edges <E> in <S>. <br>
//!          An Edge is Store only one Time for a vertex. <br>
static /*instead*/  void MapVertexEdges(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_DataMapOfShapeListOfShape^ MVE) ;

//! Remove the non valid   part of an offsetshape <br>
//!          1 - Remove all the free boundary  and the faces <br>
//!          connex to such edges. <br>
//!          2 - Remove all the shapes not  valid in the result <br>
//!          (according to the side of offseting) <br>
//!   in this verion only the first point is implemented. <br>
static /*instead*/  OCTopoDS_Shape^ Deboucle3D(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_MapOfShape^ Boundary) ;


static /*instead*/  void CorrectOrientation(OCNaroWrappers::OCTopoDS_Shape^ SI, OCNaroWrappers::OCTopTools_IndexedMapOfShape^ NewEdges, OCNaroWrappers::OCBRepAlgo_AsDes^ AsDes, OCNaroWrappers::OCBRepAlgo_Image^ InitOffset, Standard_Real Offset) ;


static /*instead*/  Standard_Real Gabarit(OCNaroWrappers::OCGeom_Curve^ aCurve) ;

~OCBRepOffset_Tool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
