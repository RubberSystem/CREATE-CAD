// File generated by CPPExt (MPV)
//
#ifndef _MeshAlgo_Vertex_OCWrappers_HeaderFile
#define _MeshAlgo_Vertex_OCWrappers_HeaderFile

// include native header
#include <MeshAlgo_Vertex.hxx>
#include "../Converter.h"


#include "../MeshDS/MeshDS_DegreeOfFreedom.h"


namespace OCNaroWrappers
{

ref class OCgp_XY;


//! Describes the data  structure for  a  vertex in  a <br>
//!          Delaunay triangulation. <br>
public ref class OCMeshAlgo_Vertex  {

protected:
  MeshAlgo_Vertex* nativeHandle;
  OCMeshAlgo_Vertex(OCDummy^) {};

public:
  property MeshAlgo_Vertex* Handle
  {
    MeshAlgo_Vertex* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCMeshAlgo_Vertex(MeshAlgo_Vertex* nativeHandle);

// Methods PUBLIC


OCMeshAlgo_Vertex(Standard_Real x, Standard_Real y, Standard_Integer dom, OCMeshDS_DegreeOfFreedom theMov);


 /*instead*/  OCgp_XY^ Coord() ;


 /*instead*/  OCMeshDS_DegreeOfFreedom Movability() ;


 /*instead*/  void SetMovability(OCMeshDS_DegreeOfFreedom mov) ;

//! For maping the Vertices. <br>
//!          Same Vertex -> Same HashCode <br>
//!          Different Vertices -> Not IsEqual but can have same HashCode <br>
 /*instead*/  Standard_Integer Domain() ;


 /*instead*/  Standard_Integer HashCode(Standard_Integer Upper) ;


 /*instead*/  System::Boolean IsEqual(OCNaroWrappers::OCMeshAlgo_Vertex^ Other) ;

~OCMeshAlgo_Vertex()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
