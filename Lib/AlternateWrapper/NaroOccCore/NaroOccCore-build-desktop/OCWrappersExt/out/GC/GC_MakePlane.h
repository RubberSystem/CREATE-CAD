// File generated by CPPExt (MPV)
//
#ifndef _GC_MakePlane_OCWrappers_HeaderFile
#define _GC_MakePlane_OCWrappers_HeaderFile

// include native header
#include <GC_MakePlane.hxx>
#include "../Converter.h"

#include "GC_Root.h"

#include "GC_Root.h"


namespace OCNaroWrappers
{

ref class OCGeom_Plane;
ref class OCgp_Ax2;
ref class OCgp_Pln;
ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Ax1;


//! This class implements the following algorithms used <br>
//!           to create a Plane from gp. <br>
//!           * Create a Plane parallel to another and passing <br>
//!             through a point. <br>
//!           * Create a Plane passing through 3 points. <br>
//!           * Create a Plane by its normal <br>
//!           A MakePlane object provides a framework for: <br>
//!           -   defining the construction of the plane, <br>
//!           -   implementing the construction algorithm, and <br>
//!           -   consulting the results. In particular, the Value <br>
//!           function returns the constructed plane. <br>
public ref class OCGC_MakePlane  : public OCGC_Root {

protected:
  // dummy constructor;
  OCGC_MakePlane(OCDummy^) : OCGC_Root((OCDummy^)nullptr) {};

public:

// constructor from native
OCGC_MakePlane(GC_MakePlane* nativeHandle);

// Methods PUBLIC


//!  Creates a plane located in 3D space with an axis placement <br>
//!  two axis.  The "ZDirection" of "A2" is the direction normal <br>
//!  to the plane.  The "Location" point of "A2" is the origin of <br>
//!  the plane. The "XDirection" and "YDirection" of "A2" define <br>
//!  the directions of the U isoparametric and V isoparametric <br>
//!  curves. <br>
OCGC_MakePlane(OCNaroWrappers::OCgp_Ax2^ A2);


//!  Creates a plane from a non persistent plane from package gp. <br>
OCGC_MakePlane(OCNaroWrappers::OCgp_Pln^ Pl);


//!  P is the "Location" point or origin of the plane. <br>
//!  V is the direction normal to the plane. <br>
OCGC_MakePlane(OCNaroWrappers::OCgp_Pnt^ P, OCNaroWrappers::OCgp_Dir^ V);


//!  Creates a plane from its cartesian equation : <br>
//!  Ax + By + Cz + D = 0.0 <br>
//!  Status is "BadEquation" if Sqrt (A*A + B*B + C*C) <br>
//!  <= Resolution from gp <br>
OCGC_MakePlane(Standard_Real A, Standard_Real B, Standard_Real C, Standard_Real D);

//! Make a Plane from Geom <ThePlane> parallel to another <br>
//!           Pln <Pln> and passing through a Pnt <Point>. <br>
OCGC_MakePlane(OCNaroWrappers::OCgp_Pln^ Pln, OCNaroWrappers::OCgp_Pnt^ Point);

//! Make a Plane from Geom <ThePlane> parallel to another <br>
//!           Pln <Pln> at the distance <Dist> which can be greater <br>
//!           or lower than zero. <br>
//!           In the first case the result is at the distance <br>
//!           <Dist> to the plane <Pln> in the direction of the <br>
//!           normal to <Pln>. <br>
//!           Otherwize it is in the oposite direction. <br>
OCGC_MakePlane(OCNaroWrappers::OCgp_Pln^ Pln, Standard_Real Dist);

//! Make a Plane from Geom <ThePlane> passing through 3 <br>
//!           Pnt <P1>,<P2>,<P3>. <br>
//!           It returns false if <P1> <P2> <P3> are confused. <br>
OCGC_MakePlane(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3);

//! Make a Plane  passing through the location of <Axis>and <br>
//!          normal to the Direction of <Axis>. <br>
OCGC_MakePlane(OCNaroWrappers::OCgp_Ax1^ Axis);

//! Returns the constructed plane. <br>
//! Exceptions StdFail_NotDone if no plane is constructed. <br>
 /*instead*/  OCGeom_Plane^ Value() ;


 /*instead*/  OCGeom_Plane^ Operator() ;

~OCGC_MakePlane()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
