// File generated by CPPExt (MPV)
//
#ifndef _GC_MakeTrimmedCylinder_OCWrappers_HeaderFile
#define _GC_MakeTrimmedCylinder_OCWrappers_HeaderFile

// include native header
#include <GC_MakeTrimmedCylinder.hxx>
#include "../Converter.h"

#include "GC_Root.h"

#include "GC_Root.h"


namespace OCNaroWrappers
{

ref class OCGeom_RectangularTrimmedSurface;
ref class OCgp_Pnt;
ref class OCgp_Circ;
ref class OCgp_Ax1;
ref class OCgp_Cylinder;


//! Implements construction algorithms for a trimmed <br>
//! cylinder limited by two planes orthogonal to its axis. <br>
//! The result is a Geom_RectangularTrimmedSurface surface. <br>
//! A MakeTrimmedCylinder provides a framework for: <br>
//! -   defining the construction of the trimmed cylinder, <br>
//! -   implementing the construction algorithm, and <br>
//! -   consulting the results. In particular, the Value <br>
//!   function returns the constructed trimmed cylinder. <br>
public ref class OCGC_MakeTrimmedCylinder  : public OCGC_Root {

protected:
  // dummy constructor;
  OCGC_MakeTrimmedCylinder(OCDummy^) : OCGC_Root((OCDummy^)nullptr) {};

public:

// constructor from native
OCGC_MakeTrimmedCylinder(GC_MakeTrimmedCylinder* nativeHandle);

// Methods PUBLIC

//! Make a cylindricalSurface <Cyl> from Geom <br>
//!          Its axis is is <P1P2> and its radius is the distance <br>
//!          between <P3> and <P1P2>. <br>
//!          The height is the distance between P1 and P2. <br>
OCGC_MakeTrimmedCylinder(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3);

//! Make a cylindricalSurface <Cyl> from gp by its base <Circ>. <br>
//!          Its axis is the normal to the plane defined bi <Circ>. <br>
//!          <Height> can be greater than zero or lower than zero. <br>
//!          In the first case the V parametric direction of the <br>
//!          result has the same orientation as the normal to <Circ>. <br>
//!          In the other case it has the opposite orientation. <br>
OCGC_MakeTrimmedCylinder(OCNaroWrappers::OCgp_Circ^ Circ, Standard_Real Height);

//! Make a cylindricalSurface <Cyl> from gp by its <br>
//!          axis <A1> and its radius <Radius>. <br>
//!          It returns NullObject if <Radius> is lower than zero. <br>
//!          <Height> can be greater than zero or lower than zero. <br>
//!          In the first case the V parametric direction of the <br>
//!          result has the same orientation as <A1>. <br>
//!          In the other case it has the opposite orientation. <br>
OCGC_MakeTrimmedCylinder(OCNaroWrappers::OCgp_Ax1^ A1, Standard_Real Radius, Standard_Real Height);

//! Make a RectangularTrimmedSurface <Cylinder> from gp by <br>
//!          a cylinder from gp. <br>
//!          It is trimmed by the point <P> and the heigh <Heigh>. <br>
//!          <Height> can be greater than zero or lower than zero. <br>
//!          in the first case the limit section is in the side of <br>
//!          the positives V paramters of <Cyl> and in the other <br>
//!          side if <Heigh> is lower than zero. <br>
OCGC_MakeTrimmedCylinder(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Height);

//! Make a RectangularTrimmedSurface <Cylinder> from gp by <br>
//!          a cylinder from gp. <br>
//!          It is trimmed by the two points <P1> and <P2>. <br>
//! Warning <br>
//! If an error occurs (that is, when IsDone returns <br>
//! false), the Status function returns: <br>
//! -   gce_NegativeRadius if Radius is less than 0.0, or <br>
//! -   gce_ConfusedPoints if the points P1 and P2 are coincident. <br>
//! -   gce_ColinearPoints if the points P1, P2 and P3 are collinear. <br>
OCGC_MakeTrimmedCylinder(OCNaroWrappers::OCgp_Cylinder^ Cyl, OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2);

//! Returns the constructed trimmed cylinder. <br>
//! Exceptions <br>
//! StdFail_NotDone if no trimmed cylinder is constructed. <br>
 /*instead*/  OCGeom_RectangularTrimmedSurface^ Value() ;


 /*instead*/  OCGeom_RectangularTrimmedSurface^ Operator() ;

~OCGC_MakeTrimmedCylinder()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
