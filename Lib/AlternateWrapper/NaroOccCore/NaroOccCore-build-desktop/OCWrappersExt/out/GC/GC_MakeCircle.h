// File generated by CPPExt (MPV)
//
#ifndef _GC_MakeCircle_OCWrappers_HeaderFile
#define _GC_MakeCircle_OCWrappers_HeaderFile

// include native header
#include <GC_MakeCircle.hxx>
#include "../Converter.h"

#include "GC_Root.h"

#include "GC_Root.h"


namespace OCNaroWrappers
{

ref class OCGeom_Circle;
ref class OCgp_Circ;
ref class OCgp_Ax2;
ref class OCgp_Pnt;
ref class OCgp_Dir;
ref class OCgp_Ax1;


//! This class implements the following algorithms used <br>
//!           to create Cirlec from Geom. <br>
//! <br>
//!           * Create a Circle parallel to another and passing <br>
//!             though a point. <br>
//!           * Create a Circle parallel to another at the distance <br>
//!             Dist. <br>
//!           * Create a Circle passing through 3 points. <br>
//!           * Create a Circle with its center and the normal of its <br>
//!             plane and its radius. <br>
//!           * Create a Circle with its axis and radius. <br>
//!  The circle's parameter is the angle (Radian). <br>
//!  The parametrization range is [0,2*PI]. <br>
//!  The circle is a closed and periodic curve. <br>
//!  The center of the circle is the Location point of its axis <br>
//!  placement. The XDirection of the axis placement defines the <br>
//!  origin of the parametrization. <br>
public ref class OCGC_MakeCircle  : public OCGC_Root {

protected:
  // dummy constructor;
  OCGC_MakeCircle(OCDummy^) : OCGC_Root((OCDummy^)nullptr) {};

public:

// constructor from native
OCGC_MakeCircle(GC_MakeCircle* nativeHandle);

// Methods PUBLIC

//!  creates a circle from a non persistent circle C by its conversion. <br>
OCGC_MakeCircle(OCNaroWrappers::OCgp_Circ^ C);


//!  A2 is the local coordinates system of the circle. <br>
//!  It is not forbidden to create a circle with Radius = 0.0 <br>
//!  Status is "NegativeRadius" if Radius < 0. <br>
OCGC_MakeCircle(OCNaroWrappers::OCgp_Ax2^ A2, Standard_Real Radius);

//! Make a Circle from Geom <TheCirc> parallel to another <br>
//!           Circ <Circ> with a distance <Dist>. <br>
//!           If Dist is greater than zero the result is enclosing <br>
//!           the circle <Circ>, else the result is enclosed by the <br>
//!           circle <Circ>. <br>
OCGC_MakeCircle(OCNaroWrappers::OCgp_Circ^ Circ, Standard_Real Dist);

//! Make a Circle from Geom <TheCirc> parallel to another <br>
//!           Circ <Circ> and passing through a Pnt <Point>. <br>
OCGC_MakeCircle(OCNaroWrappers::OCgp_Circ^ Circ, OCNaroWrappers::OCgp_Pnt^ Point);

//! Make a Circ from gp <TheCirc> passing through 3 <br>
//!           Pnt2d <P1>,<P2>,<P3>. <br>
OCGC_MakeCircle(OCNaroWrappers::OCgp_Pnt^ P1, OCNaroWrappers::OCgp_Pnt^ P2, OCNaroWrappers::OCgp_Pnt^ P3);

//! Make a Circle from Geom <TheCirc> with its center <br>
//!           <Center> and the normal of its plane <Norm> and <br>
//!           its radius <Radius>. <br>
OCGC_MakeCircle(OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Dir^ Norm, Standard_Real Radius);

//! Make a Circle from Geom <TheCirc> with its center <br>
//!           <Center> and the normal of its plane defined by the <br>
//!           two points <Center> and <PtAxis> and its radius <Radius>. <br>
OCGC_MakeCircle(OCNaroWrappers::OCgp_Pnt^ Center, OCNaroWrappers::OCgp_Pnt^ PtAxis, Standard_Real Radius);

//! Make a Circle from Geom <TheCirc> with its center <br>
//!           <Center> and its radius <Radius>. <br>
OCGC_MakeCircle(OCNaroWrappers::OCgp_Ax1^ Axis, Standard_Real Radius);


//! Returns the constructed circle. <br>
//! Exceptions <br>
//! StdFail_NotDone if no circle is constructed. <br>
 /*instead*/  OCGeom_Circle^ Value() ;


 /*instead*/  OCGeom_Circle^ Operator() ;

~OCGC_MakeCircle()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
