// File generated by CPPExt (CPP file)
//

#include "TopOpeBRep_EdgesIntersector.h"
#include "../Converter.h"
#include "../BRepAdaptor/BRepAdaptor_HSurface.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../Bnd/Bnd_Box.h"
#include "../Geom2dAdaptor/Geom2dAdaptor_Curve.h"
#include "../BRepAdaptor/BRepAdaptor_Surface.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "TopOpeBRep_SequenceOfPoint2d.h"
#include "TopOpeBRep_Point2d.h"
#include "../IntRes2d/IntRes2d_IntersectionSegment.h"
#include "../IntRes2d/IntRes2d_IntersectionPoint.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_Transition.h"
#include "../gp/gp_Pnt.h"


using namespace OCNaroWrappers;

OCTopOpeBRep_EdgesIntersector::OCTopOpeBRep_EdgesIntersector(TopOpeBRep_EdgesIntersector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRep_EdgesIntersector::OCTopOpeBRep_EdgesIntersector() 
{
  nativeHandle = new TopOpeBRep_EdgesIntersector();
}

 void OCTopOpeBRep_EdgesIntersector::Delete()
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Delete();
}

 void OCTopOpeBRep_EdgesIntersector::SetFaces(OCNaroWrappers::OCTopoDS_Shape^ F1, OCNaroWrappers::OCTopoDS_Shape^ F2)
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->SetFaces(*((TopoDS_Shape*)F1->Handle), *((TopoDS_Shape*)F2->Handle));
}

 void OCTopOpeBRep_EdgesIntersector::SetFaces(OCNaroWrappers::OCTopoDS_Shape^ F1, OCNaroWrappers::OCTopoDS_Shape^ F2, OCNaroWrappers::OCBnd_Box^ B1, OCNaroWrappers::OCBnd_Box^ B2)
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->SetFaces(*((TopoDS_Shape*)F1->Handle), *((TopoDS_Shape*)F2->Handle), *((Bnd_Box*)B1->Handle), *((Bnd_Box*)B2->Handle));
}

 void OCTopOpeBRep_EdgesIntersector::ForceTolerances(Standard_Real Tol1, Standard_Real Tol2)
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->ForceTolerances(Tol1, Tol2);
}

 void OCTopOpeBRep_EdgesIntersector::Dimension(Standard_Integer D)
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Dimension(D);
}

 Standard_Integer OCTopOpeBRep_EdgesIntersector::Dimension()
{
  return ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Dimension();
}

 void OCTopOpeBRep_EdgesIntersector::Perform(OCNaroWrappers::OCTopoDS_Shape^ E1, OCNaroWrappers::OCTopoDS_Shape^ E2, System::Boolean ReduceSegments)
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Perform(*((TopoDS_Shape*)E1->Handle), *((TopoDS_Shape*)E2->Handle), OCConverter::BooleanToStandardBoolean(ReduceSegments));
}

 System::Boolean OCTopOpeBRep_EdgesIntersector::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_EdgesIntersector*)nativeHandle)->IsEmpty());
}

 System::Boolean OCTopOpeBRep_EdgesIntersector::HasSegment()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_EdgesIntersector*)nativeHandle)->HasSegment());
}

 System::Boolean OCTopOpeBRep_EdgesIntersector::SameDomain()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_EdgesIntersector*)nativeHandle)->SameDomain());
}

OCTopoDS_Shape^ OCTopOpeBRep_EdgesIntersector::Edge(Standard_Integer Index)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Edge(Index);
  return gcnew OCTopoDS_Shape(tmp);
}

OCGeom2dAdaptor_Curve^ OCTopOpeBRep_EdgesIntersector::Curve(Standard_Integer Index)
{
  Geom2dAdaptor_Curve* tmp = new Geom2dAdaptor_Curve();
  *tmp = ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Curve(Index);
  return gcnew OCGeom2dAdaptor_Curve(tmp);
}

OCTopoDS_Shape^ OCTopOpeBRep_EdgesIntersector::Face(Standard_Integer Index)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Face(Index);
  return gcnew OCTopoDS_Shape(tmp);
}

OCBRepAdaptor_Surface^ OCTopOpeBRep_EdgesIntersector::Surface(Standard_Integer Index)
{
  BRepAdaptor_Surface* tmp = new BRepAdaptor_Surface();
  *tmp = ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Surface(Index);
  return gcnew OCBRepAdaptor_Surface(tmp);
}

 System::Boolean OCTopOpeBRep_EdgesIntersector::SurfacesSameOriented()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_EdgesIntersector*)nativeHandle)->SurfacesSameOriented());
}

 System::Boolean OCTopOpeBRep_EdgesIntersector::FacesSameOriented()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_EdgesIntersector*)nativeHandle)->FacesSameOriented());
}

 Standard_Real OCTopOpeBRep_EdgesIntersector::ToleranceMax()
{
  return ((TopOpeBRep_EdgesIntersector*)nativeHandle)->ToleranceMax();
}

 void OCTopOpeBRep_EdgesIntersector::Tolerances(Standard_Real& tol1, Standard_Real& tol2)
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Tolerances(tol1, tol2);
}

 Standard_Real OCTopOpeBRep_EdgesIntersector::Tolerance2()
{
  return ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Tolerance2();
}

 Standard_Integer OCTopOpeBRep_EdgesIntersector::NbPoints()
{
  return ((TopOpeBRep_EdgesIntersector*)nativeHandle)->NbPoints();
}

 Standard_Integer OCTopOpeBRep_EdgesIntersector::NbSegments()
{
  return ((TopOpeBRep_EdgesIntersector*)nativeHandle)->NbSegments();
}

 void OCTopOpeBRep_EdgesIntersector::Dump(OCNaroWrappers::OCTCollection_AsciiString^ str, Standard_Integer ie1, Standard_Integer ie2)
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Dump(*((TCollection_AsciiString*)str->Handle), ie1, ie2);
}

 void OCTopOpeBRep_EdgesIntersector::InitPoint(System::Boolean selectkeep)
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->InitPoint(OCConverter::BooleanToStandardBoolean(selectkeep));
}

 System::Boolean OCTopOpeBRep_EdgesIntersector::MorePoint()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_EdgesIntersector*)nativeHandle)->MorePoint());
}

 void OCTopOpeBRep_EdgesIntersector::NextPoint()
{
  ((TopOpeBRep_EdgesIntersector*)nativeHandle)->NextPoint();
}

OCTopOpeBRep_SequenceOfPoint2d^ OCTopOpeBRep_EdgesIntersector::Points()
{
  TopOpeBRep_SequenceOfPoint2d* tmp = new TopOpeBRep_SequenceOfPoint2d();
  *tmp = ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Points();
  return gcnew OCTopOpeBRep_SequenceOfPoint2d(tmp);
}

OCTopOpeBRep_Point2d^ OCTopOpeBRep_EdgesIntersector::Point()
{
  TopOpeBRep_Point2d* tmp = new TopOpeBRep_Point2d();
  *tmp = ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Point();
  return gcnew OCTopOpeBRep_Point2d(tmp);
}

OCTopOpeBRep_Point2d^ OCTopOpeBRep_EdgesIntersector::Point(Standard_Integer I)
{
  TopOpeBRep_Point2d* tmp = new TopOpeBRep_Point2d();
  *tmp = ((TopOpeBRep_EdgesIntersector*)nativeHandle)->Point(I);
  return gcnew OCTopOpeBRep_Point2d(tmp);
}

 System::Boolean OCTopOpeBRep_EdgesIntersector::ReduceSegment(OCNaroWrappers::OCTopOpeBRep_Point2d^ P1, OCNaroWrappers::OCTopOpeBRep_Point2d^ P2, OCNaroWrappers::OCTopOpeBRep_Point2d^ Pn)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_EdgesIntersector*)nativeHandle)->ReduceSegment(*((TopOpeBRep_Point2d*)P1->Handle), *((TopOpeBRep_Point2d*)P2->Handle), *((TopOpeBRep_Point2d*)Pn->Handle)));
}

 OCTopOpeBRep_P2Dstatus OCTopOpeBRep_EdgesIntersector::Status1()
{
  return (OCTopOpeBRep_P2Dstatus)(((TopOpeBRep_EdgesIntersector*)nativeHandle)->Status1());
}


