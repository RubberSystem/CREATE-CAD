// File generated by CPPExt (CPP file)
//

#include "TopOpeBRep_FaceEdgeIntersector.h"
#include "../Converter.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_Transition.h"
#include "../TopoDS/TopoDS_Vertex.h"


using namespace OCNaroWrappers;

OCTopOpeBRep_FaceEdgeIntersector::OCTopOpeBRep_FaceEdgeIntersector(TopOpeBRep_FaceEdgeIntersector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRep_FaceEdgeIntersector::OCTopOpeBRep_FaceEdgeIntersector() 
{
  nativeHandle = new TopOpeBRep_FaceEdgeIntersector();
}

 void OCTopOpeBRep_FaceEdgeIntersector::Perform(OCNaroWrappers::OCTopoDS_Shape^ F, OCNaroWrappers::OCTopoDS_Shape^ E)
{
  ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->Perform(*((TopoDS_Shape*)F->Handle), *((TopoDS_Shape*)E->Handle));
}

 System::Boolean OCTopOpeBRep_FaceEdgeIntersector::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->IsEmpty());
}

OCTopoDS_Shape^ OCTopOpeBRep_FaceEdgeIntersector::Shape(Standard_Integer Index)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->Shape(Index);
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCTopOpeBRep_FaceEdgeIntersector::ForceTolerance(Standard_Real tol)
{
  ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->ForceTolerance(tol);
}

 Standard_Real OCTopOpeBRep_FaceEdgeIntersector::Tolerance()
{
  return ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->Tolerance();
}

 Standard_Integer OCTopOpeBRep_FaceEdgeIntersector::NbPoints()
{
  return ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->NbPoints();
}

 void OCTopOpeBRep_FaceEdgeIntersector::InitPoint()
{
  ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->InitPoint();
}

 System::Boolean OCTopOpeBRep_FaceEdgeIntersector::MorePoint()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->MorePoint());
}

 void OCTopOpeBRep_FaceEdgeIntersector::NextPoint()
{
  ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->NextPoint();
}

OCgp_Pnt^ OCTopOpeBRep_FaceEdgeIntersector::Value()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->Value();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCTopOpeBRep_FaceEdgeIntersector::Parameter()
{
  return ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->Parameter();
}

 void OCTopOpeBRep_FaceEdgeIntersector::UVPoint(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->UVPoint(*((gp_Pnt2d*)P->Handle));
}

 OCTopAbs_State OCTopOpeBRep_FaceEdgeIntersector::State()
{
  return (OCTopAbs_State)(((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->State());
}

OCTopOpeBRepDS_Transition^ OCTopOpeBRep_FaceEdgeIntersector::Transition(Standard_Integer Index, OCTopAbs_Orientation FaceOrientation)
{
  TopOpeBRepDS_Transition* tmp = new TopOpeBRepDS_Transition();
  *tmp = ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->Transition(Index, (TopAbs_Orientation)FaceOrientation);
  return gcnew OCTopOpeBRepDS_Transition(tmp);
}

 System::Boolean OCTopOpeBRep_FaceEdgeIntersector::IsVertex(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCgp_Pnt^ P, Standard_Real Tol, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->IsVertex(*((TopoDS_Shape*)S->Handle), *((gp_Pnt*)P->Handle), Tol, *((TopoDS_Vertex*)V->Handle)));
}

 System::Boolean OCTopOpeBRep_FaceEdgeIntersector::IsVertex(Standard_Integer I, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->IsVertex(I, *((TopoDS_Vertex*)V->Handle)));
}

 Standard_Integer OCTopOpeBRep_FaceEdgeIntersector::Index()
{
  return ((TopOpeBRep_FaceEdgeIntersector*)nativeHandle)->Index();
}


