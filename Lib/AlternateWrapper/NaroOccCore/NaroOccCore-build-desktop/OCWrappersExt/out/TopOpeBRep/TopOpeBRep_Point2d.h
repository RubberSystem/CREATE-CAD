// File generated by CPPExt (MPV)
//
#ifndef _TopOpeBRep_Point2d_OCWrappers_HeaderFile
#define _TopOpeBRep_Point2d_OCWrappers_HeaderFile

// include native header
#include <TopOpeBRep_Point2d.hxx>
#include "../Converter.h"


#include "../IntRes2d/IntRes2d_IntersectionPoint.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_Transition.h"
#include "TopOpeBRep_P2Dstatus.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_Config.h"


namespace OCNaroWrappers
{

ref class OCTopOpeBRep_Hctxff2d;
ref class OCTopOpeBRep_Hctxee2d;
ref class OCTopOpeBRep_EdgesIntersector;
ref class OCIntRes2d_IntersectionPoint;
ref class OCTopoDS_Vertex;
ref class OCTopOpeBRepDS_Transition;
ref class OCgp_Pnt;
ref class OCgp_Pnt2d;



public ref class OCTopOpeBRep_Point2d  {

protected:
  TopOpeBRep_Point2d* nativeHandle;
  OCTopOpeBRep_Point2d(OCDummy^) {};

public:
  property TopOpeBRep_Point2d* Handle
  {
    TopOpeBRep_Point2d* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopOpeBRep_Point2d(TopOpeBRep_Point2d* nativeHandle);

// Methods PUBLIC


OCTopOpeBRep_Point2d();


 /*instead*/  void Dump(Standard_Integer ie1, Standard_Integer ie2) ;


 /*instead*/  void SetPint(OCNaroWrappers::OCIntRes2d_IntersectionPoint^ P) ;


 /*instead*/  System::Boolean HasPint() ;


 /*instead*/  OCIntRes2d_IntersectionPoint^ Pint() ;


 /*instead*/  void SetIsVertex(Standard_Integer I, System::Boolean B) ;


 /*instead*/  System::Boolean IsVertex(Standard_Integer I) ;


 /*instead*/  void SetVertex(Standard_Integer I, OCNaroWrappers::OCTopoDS_Vertex^ V) ;


 /*instead*/  OCTopoDS_Vertex^ Vertex(Standard_Integer I) ;


 /*instead*/  void SetTransition(Standard_Integer I, OCNaroWrappers::OCTopOpeBRepDS_Transition^ T) ;


 /*instead*/  OCTopOpeBRepDS_Transition^ Transition(Standard_Integer I) ;


 /*instead*/  OCTopOpeBRepDS_Transition^ ChangeTransition(Standard_Integer I) ;


 /*instead*/  void SetParameter(Standard_Integer I, Standard_Real P) ;


 /*instead*/  Standard_Real Parameter(Standard_Integer I) ;


 /*instead*/  void SetIsPointOfSegment(System::Boolean B) ;


 /*instead*/  System::Boolean IsPointOfSegment() ;


 /*instead*/  void SetSegmentAncestors(Standard_Integer IP1, Standard_Integer IP2) ;


 /*instead*/  System::Boolean SegmentAncestors(Standard_Integer& IP1, Standard_Integer& IP2) ;


 /*instead*/  void SetStatus(OCTopOpeBRep_P2Dstatus S) ;


 /*instead*/  OCTopOpeBRep_P2Dstatus Status() ;


 /*instead*/  void SetIndex(Standard_Integer X) ;


 /*instead*/  Standard_Integer Index() ;


 /*instead*/  void SetValue(OCNaroWrappers::OCgp_Pnt^ P) ;


 /*instead*/  OCgp_Pnt^ Value() ;


 /*instead*/  void SetValue2d(OCNaroWrappers::OCgp_Pnt2d^ P) ;


 /*instead*/  OCgp_Pnt2d^ Value2d() ;


 /*instead*/  void SetKeep(System::Boolean B) ;


 /*instead*/  System::Boolean Keep() ;


 /*instead*/  void SetEdgesConfig(OCTopOpeBRepDS_Config C) ;


 /*instead*/  OCTopOpeBRepDS_Config EdgesConfig() ;


 /*instead*/  void SetTolerance(Standard_Real T) ;


 /*instead*/  Standard_Real Tolerance() ;


 /*instead*/  void SetHctxff2d(OCNaroWrappers::OCTopOpeBRep_Hctxff2d^ ff2d) ;


 /*instead*/  OCTopOpeBRep_Hctxff2d^ Hctxff2d() ;


 /*instead*/  void SetHctxee2d(OCNaroWrappers::OCTopOpeBRep_Hctxee2d^ ee2d) ;


 /*instead*/  OCTopOpeBRep_Hctxee2d^ Hctxee2d() ;

~OCTopOpeBRep_Point2d()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
