// File generated by CPPExt (MPV)
//
#ifndef _TopOpeBRep_DSFiller_OCWrappers_HeaderFile
#define _TopOpeBRep_DSFiller_OCWrappers_HeaderFile

// include native header
#include <TopOpeBRep_DSFiller.hxx>
#include "../Converter.h"


#include "TopOpeBRep_ShapeIntersector.h"
#include "TopOpeBRep_ShapeIntersector2d.h"
#include "TopOpeBRep_FacesFiller.h"
#include "TopOpeBRep_EdgesFiller.h"
#include "TopOpeBRep_FaceEdgeFiller.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopOpeBRepDS_HDataStructure;
ref class OCTopoDS_Face;
ref class OCTopOpeBRep_ShapeIntersector;
ref class OCTopOpeBRep_ShapeIntersector2d;
ref class OCTopOpeBRep_FacesFiller;
ref class OCTopOpeBRep_EdgesFiller;
ref class OCTopOpeBRep_FaceEdgeFiller;


//! Provides class  methods  to  fill  a datastructure <br>
//!          with  results  of intersections. <br>
//! <br>
//!          1.  Use  an    Intersector  to   find    pairs  of <br>
//!          intersecting GeomShapes <br>
//! <br>
//!          2. For each  pair fill the DataStructure using the <br>
//!          appropriate Filler. <br>
//! <br>
//!          3. Complete the  DataStructure to record shapes to <br>
//!          rebuild (shells, wires ) <br>
public ref class OCTopOpeBRep_DSFiller  {

protected:
  TopOpeBRep_DSFiller* nativeHandle;
  OCTopOpeBRep_DSFiller(OCDummy^) {};

public:
  property TopOpeBRep_DSFiller* Handle
  {
    TopOpeBRep_DSFiller* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopOpeBRep_DSFiller(TopOpeBRep_DSFiller* nativeHandle);

// Methods PUBLIC


OCTopOpeBRep_DSFiller();


 /*instead*/  void Destroy() ;

//! return field myPShapeClassifier. <br>//! set field myPShapeClassifier. <br>
 /*instead*/  TopOpeBRepTool_PShapeClassifier PShapeClassifier() ;

//! Stores in <DS> the intersections of <S1> and <S2>. <br>
//!          if orientFORWARD = True <br>
//!               S FORWARD,REVERSED   --> FORWARD <br>
//!               S EXTERNAL,INTERNAL --> EXTERNAL,INTERNAL <br>
 /*instead*/  void Insert(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2, OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS, System::Boolean orientFORWARD) ;

//! Stores in <DS> the intersections of <S1> and <S2>. <br>
//!          if orientFORWARD = True <br>
//!               S FORWAR,REVERSED   --> FORWARD <br>
//!               S EXTERNAL,INTERNAL --> EXTERNAL,INTERNAL <br>
 /*instead*/  void InsertIntersection(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2, OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS, System::Boolean orientFORWARD) ;


 /*instead*/  void Complete(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;

//! Stores in <DS> the intersections of <S1> and <S2>. <br>
//!          S1 et S2 contain only SameDomain Face <br>
 /*instead*/  void Insert2d(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2, OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;

//! S1, S2 set of tangent face <br>
//!          lance les intersections 2d pour coder correctement <br>
//!          les faces SameDomain. <br>
 /*instead*/  void InsertIntersection2d(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2, OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;


 /*instead*/  System::Boolean IsMadeOf1d(OCNaroWrappers::OCTopoDS_Shape^ S) ;


 /*instead*/  System::Boolean IsContext1d(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Stores in <DS> the intersections of <S1> and <S2>. <br>
//!          S1 and S2 are edges or wires. <br>
//!          S1 edges have a 2d representation in face F1 <br>
//!          S2 edges have a 2d representation in face F2 <br>
//!          F1 is the face which surface is taken as reference <br>
//!          for 2d description of S1 and S2 edges. <br>
//!          if orientFORWARD = True <br>
//!               S FORWARD,REVERSED  --> FORWARD <br>
//!               S EXTERNAL,INTERNAL --> EXTERNAL,INTERNAL <br>
 /*instead*/  void Insert1d(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2, OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS, System::Boolean orientFORWARD) ;


 /*instead*/  OCTopOpeBRep_ShapeIntersector^ ChangeShapeIntersector() ;


 /*instead*/  OCTopOpeBRep_ShapeIntersector2d^ ChangeShapeIntersector2d() ;


 /*instead*/  OCTopOpeBRep_FacesFiller^ ChangeFacesFiller() ;


 /*instead*/  OCTopOpeBRep_EdgesFiller^ ChangeEdgesFiller() ;


 /*instead*/  OCTopOpeBRep_FaceEdgeFiller^ ChangeFaceEdgeFiller() ;


 /*instead*/  void GapFiller(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;

//! Update   the  data      structure  with   relevant <br>
//!          informations deduced from the intersections. <br>
//! <br>
//!          Shells containing an intersected face. <br>
//!          Wires  containing an intersected edge. <br>
//! <br>
 /*instead*/  void CompleteDS(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;


 /*instead*/  void Filter(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;


 /*instead*/  void Reducer(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;


 /*instead*/  void RemoveUnsharedGeometry(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;


 /*instead*/  void Checker(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;

//! Update   the  data      structure  with   relevant <br>
//!          informations deduced from the intersections 2d. <br>
//! <br>
//!          Shells containing an intersected face. <br>
//!          Wires  containing an intersected edge. <br>
//! <br>//! search for interference identity using edge connexity //NYI <br>
 /*instead*/  void CompleteDS2d(OCNaroWrappers::OCTopOpeBRepDS_HDataStructure^ HDS) ;

~OCTopOpeBRep_DSFiller()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
