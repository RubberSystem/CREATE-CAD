// File generated by CPPExt (CPP file)
//

#include "TopOpeBRep_VPointInter.h"
#include "../Converter.h"
#include "../IntPatch/IntPatch_Point.h"
#include "../gp/gp_Pnt.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../gp/gp_Pnt2d.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopoDS/TopoDS_Face.h"


using namespace OCNaroWrappers;

OCTopOpeBRep_VPointInter::OCTopOpeBRep_VPointInter(TopOpeBRep_VPointInter* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRep_VPointInter::OCTopOpeBRep_VPointInter() 
{
  nativeHandle = new TopOpeBRep_VPointInter();
}

 void OCTopOpeBRep_VPointInter::SetPoint(OCNaroWrappers::OCIntPatch_Point^ P)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->SetPoint(*((IntPatch_Point*)P->Handle));
}

 void OCTopOpeBRep_VPointInter::SetShapes(Standard_Integer I1, Standard_Integer I2)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->SetShapes(I1, I2);
}

 void OCTopOpeBRep_VPointInter::GetShapes(Standard_Integer& I1, Standard_Integer& I2)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->GetShapes(I1, I2);
}

OCIntSurf_Transition^ OCTopOpeBRep_VPointInter::TransitionOnS1()
{
  IntSurf_Transition* tmp = new IntSurf_Transition();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->TransitionOnS1();
  return gcnew OCIntSurf_Transition(tmp);
}

OCIntSurf_Transition^ OCTopOpeBRep_VPointInter::TransitionOnS2()
{
  IntSurf_Transition* tmp = new IntSurf_Transition();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->TransitionOnS2();
  return gcnew OCIntSurf_Transition(tmp);
}

OCIntSurf_Transition^ OCTopOpeBRep_VPointInter::TransitionLineArc1()
{
  IntSurf_Transition* tmp = new IntSurf_Transition();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->TransitionLineArc1();
  return gcnew OCIntSurf_Transition(tmp);
}

OCIntSurf_Transition^ OCTopOpeBRep_VPointInter::TransitionLineArc2()
{
  IntSurf_Transition* tmp = new IntSurf_Transition();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->TransitionLineArc2();
  return gcnew OCIntSurf_Transition(tmp);
}

 System::Boolean OCTopOpeBRep_VPointInter::IsOnDomS1()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->IsOnDomS1());
}

 System::Boolean OCTopOpeBRep_VPointInter::IsOnDomS2()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->IsOnDomS2());
}

 void OCTopOpeBRep_VPointInter::ParametersOnS1(Standard_Real& u, Standard_Real& v)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->ParametersOnS1(u, v);
}

 void OCTopOpeBRep_VPointInter::ParametersOnS2(Standard_Real& u, Standard_Real& v)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->ParametersOnS2(u, v);
}

OCgp_Pnt^ OCTopOpeBRep_VPointInter::Value()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->Value();
  return gcnew OCgp_Pnt(tmp);
}

 Standard_Real OCTopOpeBRep_VPointInter::Tolerance()
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->Tolerance();
}

OCTopoDS_Shape^ OCTopOpeBRep_VPointInter::ArcOnS1()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->ArcOnS1();
  return gcnew OCTopoDS_Shape(tmp);
}

OCTopoDS_Shape^ OCTopOpeBRep_VPointInter::ArcOnS2()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->ArcOnS2();
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Real OCTopOpeBRep_VPointInter::ParameterOnLine()
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->ParameterOnLine();
}

 Standard_Real OCTopOpeBRep_VPointInter::ParameterOnArc1()
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->ParameterOnArc1();
}

 System::Boolean OCTopOpeBRep_VPointInter::IsVertexOnS1()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->IsVertexOnS1());
}

OCTopoDS_Shape^ OCTopOpeBRep_VPointInter::VertexOnS1()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->VertexOnS1();
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Real OCTopOpeBRep_VPointInter::ParameterOnArc2()
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->ParameterOnArc2();
}

 System::Boolean OCTopOpeBRep_VPointInter::IsVertexOnS2()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->IsVertexOnS2());
}

OCTopoDS_Shape^ OCTopOpeBRep_VPointInter::VertexOnS2()
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->VertexOnS2();
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCTopOpeBRep_VPointInter::IsInternal()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->IsInternal());
}

 System::Boolean OCTopOpeBRep_VPointInter::IsMultiple()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->IsMultiple());
}

 OCTopAbs_State OCTopOpeBRep_VPointInter::State(Standard_Integer I)
{
  return (OCTopAbs_State)(((TopOpeBRep_VPointInter*)nativeHandle)->State(I));
}

 void OCTopOpeBRep_VPointInter::State(OCTopAbs_State S, Standard_Integer I)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->State((TopAbs_State)S, I);
}

 void OCTopOpeBRep_VPointInter::EdgeON(OCNaroWrappers::OCTopoDS_Shape^ Eon, Standard_Real Par, Standard_Integer I)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->EdgeON(*((TopoDS_Shape*)Eon->Handle), Par, I);
}

OCTopoDS_Shape^ OCTopOpeBRep_VPointInter::EdgeON(Standard_Integer I)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->EdgeON(I);
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Real OCTopOpeBRep_VPointInter::EdgeONParameter(Standard_Integer I)
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->EdgeONParameter(I);
}

 Standard_Integer OCTopOpeBRep_VPointInter::ShapeIndex()
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->ShapeIndex();
}

 void OCTopOpeBRep_VPointInter::ShapeIndex(Standard_Integer I)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->ShapeIndex(I);
}

OCTopoDS_Shape^ OCTopOpeBRep_VPointInter::Edge(Standard_Integer I)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->Edge(I);
  return gcnew OCTopoDS_Shape(tmp);
}

 Standard_Real OCTopOpeBRep_VPointInter::EdgeParameter(Standard_Integer I)
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->EdgeParameter(I);
}

OCgp_Pnt2d^ OCTopOpeBRep_VPointInter::SurfaceParameters(Standard_Integer I)
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->SurfaceParameters(I);
  return gcnew OCgp_Pnt2d(tmp);
}

 System::Boolean OCTopOpeBRep_VPointInter::IsVertex(Standard_Integer I)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->IsVertex(I));
}

OCTopoDS_Shape^ OCTopOpeBRep_VPointInter::Vertex(Standard_Integer I)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_VPointInter*)nativeHandle)->Vertex(I);
  return gcnew OCTopoDS_Shape(tmp);
}

 void OCTopOpeBRep_VPointInter::UpdateKeep()
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->UpdateKeep();
}

 System::Boolean OCTopOpeBRep_VPointInter::Keep()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->Keep());
}

 void OCTopOpeBRep_VPointInter::ChangeKeep(System::Boolean keep)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->ChangeKeep(OCConverter::BooleanToStandardBoolean(keep));
}

 System::Boolean OCTopOpeBRep_VPointInter::EqualpP(OCNaroWrappers::OCTopOpeBRep_VPointInter^ VP)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->EqualpP(*((TopOpeBRep_VPointInter*)VP->Handle)));
}

 System::Boolean OCTopOpeBRep_VPointInter::ParonE(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real& par)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_VPointInter*)nativeHandle)->ParonE(*((TopoDS_Edge*)E->Handle), par));
}

 void OCTopOpeBRep_VPointInter::Index(Standard_Integer I)
{
  ((TopOpeBRep_VPointInter*)nativeHandle)->Index(I);
}

 Standard_Integer OCTopOpeBRep_VPointInter::Index()
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->Index();
}

 Standard_OStream& OCTopOpeBRep_VPointInter::Dump(Standard_Integer I, OCNaroWrappers::OCTopoDS_Face^ F, Standard_OStream& OS)
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->Dump(I, *((TopoDS_Face*)F->Handle), OS);
}

 Standard_OStream& OCTopOpeBRep_VPointInter::Dump(OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, Standard_OStream& OS)
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->Dump(*((TopoDS_Face*)F1->Handle), *((TopoDS_Face*)F2->Handle), OS);
}

 TopOpeBRep_PThePointOfIntersection OCTopOpeBRep_VPointInter::PThePointOfIntersectionDummy()
{
  return ((TopOpeBRep_VPointInter*)nativeHandle)->PThePointOfIntersectionDummy();
}


