// File generated by CPPExt (MPV)
//
#ifndef _TopOpeBRep_EdgesIntersector_OCWrappers_HeaderFile
#define _TopOpeBRep_EdgesIntersector_OCWrappers_HeaderFile

// include native header
#include <TopOpeBRep_EdgesIntersector.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Face.h"
#include "../GeomAbs/GeomAbs_SurfaceType.h"
#include "../IntRes2d/IntRes2d_Domain.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../Geom2dAdaptor/Geom2dAdaptor_Curve.h"
#include "../Geom2dInt/Geom2dInt_GInter.h"
#include "../IntRes2d/IntRes2d_SequenceOfIntersectionPoint.h"
#include "../IntRes2d/IntRes2d_SequenceOfIntersectionSegment.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "TopOpeBRep_SequenceOfPoint2d.h"
#include "TopOpeBRep_P2Dstatus.h"
#include "../TopAbs/TopAbs_Orientation.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_Config.h"


namespace OCNaroWrappers
{

ref class OCBRepAdaptor_HSurface;
ref class OCTopoDS_Shape;
ref class OCBnd_Box;
ref class OCGeom2dAdaptor_Curve;
ref class OCBRepAdaptor_Surface;
ref class OCTCollection_AsciiString;
ref class OCTopOpeBRep_SequenceOfPoint2d;
ref class OCTopOpeBRep_Point2d;
ref class OCIntRes2d_IntersectionSegment;
ref class OCIntRes2d_IntersectionPoint;
ref class OCTopOpeBRepDS_Transition;
ref class OCgp_Pnt;



public ref class OCTopOpeBRep_EdgesIntersector  {

protected:
  TopOpeBRep_EdgesIntersector* nativeHandle;
  OCTopOpeBRep_EdgesIntersector(OCDummy^) {};

public:
  property TopOpeBRep_EdgesIntersector* Handle
  {
    TopOpeBRep_EdgesIntersector* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopOpeBRep_EdgesIntersector(TopOpeBRep_EdgesIntersector* nativeHandle);

// Methods PUBLIC


OCTopOpeBRep_EdgesIntersector();


virtual /*instead*/  void Delete() ;


 /*instead*/  void SetFaces(OCNaroWrappers::OCTopoDS_Shape^ F1, OCNaroWrappers::OCTopoDS_Shape^ F2) ;


 /*instead*/  void SetFaces(OCNaroWrappers::OCTopoDS_Shape^ F1, OCNaroWrappers::OCTopoDS_Shape^ F2, OCNaroWrappers::OCBnd_Box^ B1, OCNaroWrappers::OCBnd_Box^ B2) ;


 /*instead*/  void ForceTolerances(Standard_Real Tol1, Standard_Real Tol2) ;


 /*instead*/  void Dimension(Standard_Integer D) ;

//! set working space dimension D = 1 for E &|| W, 2 for E in F <br>
 /*instead*/  Standard_Integer Dimension() ;


 /*instead*/  void Perform(OCNaroWrappers::OCTopoDS_Shape^ E1, OCNaroWrappers::OCTopoDS_Shape^ E2, System::Boolean ReduceSegments) ;


 /*instead*/  System::Boolean IsEmpty() ;

//! true if at least one intersection segment. <br>
 /*instead*/  System::Boolean HasSegment() ;

//! = mySameDomain. <br>
 /*instead*/  System::Boolean SameDomain() ;


 /*instead*/  OCTopoDS_Shape^ Edge(Standard_Integer Index) ;


 /*instead*/  OCGeom2dAdaptor_Curve^ Curve(Standard_Integer Index) ;


 /*instead*/  OCTopoDS_Shape^ Face(Standard_Integer Index) ;


 /*instead*/  OCBRepAdaptor_Surface^ Surface(Standard_Integer Index) ;


 /*instead*/  System::Boolean SurfacesSameOriented() ;


 /*instead*/  System::Boolean FacesSameOriented() ;


 /*instead*/  Standard_Real ToleranceMax() ;


 /*instead*/  void Tolerances(Standard_Real& tol1, Standard_Real& tol2) ;


 /*instead*/  Standard_Real Tolerance2() ;


 /*instead*/  Standard_Integer NbPoints() ;


 /*instead*/  Standard_Integer NbSegments() ;


 /*instead*/  void Dump(OCNaroWrappers::OCTCollection_AsciiString^ str, Standard_Integer ie1, Standard_Integer ie2) ;


 /*instead*/  void InitPoint(System::Boolean selectkeep) ;


 /*instead*/  System::Boolean MorePoint() ;


 /*instead*/  void NextPoint() ;


 /*instead*/  OCTopOpeBRep_SequenceOfPoint2d^ Points() ;


 /*instead*/  OCTopOpeBRep_Point2d^ Point() ;


 /*instead*/  OCTopOpeBRep_Point2d^ Point(Standard_Integer I) ;


virtual /*instead*/  System::Boolean ReduceSegment(OCNaroWrappers::OCTopOpeBRep_Point2d^ P1, OCNaroWrappers::OCTopOpeBRep_Point2d^ P2, OCNaroWrappers::OCTopOpeBRep_Point2d^ Pn) ;


 /*instead*/  OCTopOpeBRep_P2Dstatus Status1() ;

~OCTopOpeBRep_EdgesIntersector()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
