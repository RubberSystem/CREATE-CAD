// File generated by CPPExt (MPV)
//
#ifndef _TopOpeBRep_VPointInter_OCWrappers_HeaderFile
#define _TopOpeBRep_VPointInter_OCWrappers_HeaderFile

// include native header
#include <TopOpeBRep_VPointInter.hxx>
#include "../Converter.h"


#include "../TopAbs/TopAbs_State.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../IntSurf/IntSurf_Transition.h"


namespace OCNaroWrappers
{

ref class OCIntPatch_Point;
ref class OCgp_Pnt;
ref class OCTopoDS_Shape;
ref class OCgp_Pnt2d;
ref class OCTopoDS_Edge;
ref class OCTopoDS_Face;



public ref class OCTopOpeBRep_VPointInter  {

protected:
  TopOpeBRep_VPointInter* nativeHandle;
  OCTopOpeBRep_VPointInter(OCDummy^) {};

public:
  property TopOpeBRep_VPointInter* Handle
  {
    TopOpeBRep_VPointInter* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopOpeBRep_VPointInter(TopOpeBRep_VPointInter* nativeHandle);

// Methods PUBLIC


OCTopOpeBRep_VPointInter();


 /*instead*/  void SetPoint(OCNaroWrappers::OCIntPatch_Point^ P) ;


 /*instead*/  void SetShapes(Standard_Integer I1, Standard_Integer I2) ;


 /*instead*/  void GetShapes(Standard_Integer& I1, Standard_Integer& I2) ;


 /*instead*/  OCIntSurf_Transition^ TransitionOnS1() ;


 /*instead*/  OCIntSurf_Transition^ TransitionOnS2() ;


 /*instead*/  OCIntSurf_Transition^ TransitionLineArc1() ;


 /*instead*/  OCIntSurf_Transition^ TransitionLineArc2() ;


 /*instead*/  System::Boolean IsOnDomS1() ;


 /*instead*/  System::Boolean IsOnDomS2() ;


 /*instead*/  void ParametersOnS1(Standard_Real& u, Standard_Real& v) ;


 /*instead*/  void ParametersOnS2(Standard_Real& u, Standard_Real& v) ;


 /*instead*/  OCgp_Pnt^ Value() ;


 /*instead*/  Standard_Real Tolerance() ;


 /*instead*/  OCTopoDS_Shape^ ArcOnS1() ;


 /*instead*/  OCTopoDS_Shape^ ArcOnS2() ;


 /*instead*/  Standard_Real ParameterOnLine() ;


 /*instead*/  Standard_Real ParameterOnArc1() ;

//! Returns TRUE if the point is a vertex on the initial <br>
//!          restriction facet of the first surface. <br>
 /*instead*/  System::Boolean IsVertexOnS1() ;

//! Returns the information about the point when it is <br>
//!          on the domain of the first patch, i-e when the function <br>
//!          IsVertexOnS1 returns True. <br>
//!          Otherwise, an exception is raised. <br>
 /*instead*/  OCTopoDS_Shape^ VertexOnS1() ;


 /*instead*/  Standard_Real ParameterOnArc2() ;

//! Returns TRUE if the point is a vertex on the initial <br>
//!          restriction facet of the second surface. <br>
 /*instead*/  System::Boolean IsVertexOnS2() ;

//! Returns the information about the point when it is <br>
//!          on the domain of the second patch, i-e when the function <br>
//!          IsVertexOnS2 returns True. <br>
//!          Otherwise, an exception is raised. <br>
 /*instead*/  OCTopoDS_Shape^ VertexOnS2() ;


 /*instead*/  System::Boolean IsInternal() ;

//! Returns True if the point belongs to several intersection <br>
//!          lines. <br>
 /*instead*/  System::Boolean IsMultiple() ;

//! get state of VPoint within the domain of geometric shape <br>
//!          domain <I> (= 1 or 2). <br>
 /*instead*/  OCTopAbs_State State(Standard_Integer I) ;

//! Set the state of VPoint within the  domain of <br>
//!          the geometric shape <I> (= 1 or 2). <br>
 /*instead*/  void State(OCTopAbs_State S, Standard_Integer I) ;

//! set the shape Eon of shape I (1,2) containing the point, <br>
//!          and parameter <Par> of point on <Eon>. <br>
 /*instead*/  void EdgeON(OCNaroWrappers::OCTopoDS_Shape^ Eon, Standard_Real Par, Standard_Integer I) ;

//! get the edge of shape I (1,2) containing the point. <br>
 /*instead*/  OCTopoDS_Shape^ EdgeON(Standard_Integer I) ;

//! get the parameter on edge of shape I (1,2) containing the point. <br>
 /*instead*/  Standard_Real EdgeONParameter(Standard_Integer I) ;

//! returns value of filed myShapeIndex = 0,1,2,3 <br>
//!          0 means the VPoint is on no restriction <br>
//!          1 means the VPoint is on the restriction 1 <br>
//!          2 means the VPoint is on the restriction 2 <br>
//!          3 means the VPoint is on the restrictions 1 and 2 <br>
 /*instead*/  Standard_Integer ShapeIndex() ;

//! set value of shape supporting me (0,1,2,3). <br>
 /*instead*/  void ShapeIndex(Standard_Integer I) ;

//! get the edge of shape I (1,2) containing the point. <br>
//!          Returned shape is null if the VPoint is not on an edge <br>
//!          of shape I (1,2). <br>
 /*instead*/  OCTopoDS_Shape^ Edge(Standard_Integer I) ;

//! get the parameter on edge of shape I (1,2) containing the point <br>
 /*instead*/  Standard_Real EdgeParameter(Standard_Integer I) ;

//! get the parameter on surface of shape I (1,2) containing the point <br>
 /*instead*/  OCgp_Pnt2d^ SurfaceParameters(Standard_Integer I) ;


 /*instead*/  System::Boolean IsVertex(Standard_Integer I) ;


 /*instead*/  OCTopoDS_Shape^ Vertex(Standard_Integer I) ;

//! set myKeep value according to current states. <br>
 /*instead*/  void UpdateKeep() ;


//! Returns value of myKeep (does not evaluate states) <br>
//! False at creation of VPoint. <br>
//! Updated by State(State from TopAbs,Integer from Standard) <br>
 /*instead*/  System::Boolean Keep() ;

//! updates VPointInter flag "keep" with <keep>. <br>
 /*instead*/  void ChangeKeep(System::Boolean keep) ;

//! returns <True> if the 3d points and the parameters of the <br>
//!          VPoints are same <br>
 /*instead*/  System::Boolean EqualpP(OCNaroWrappers::OCTopOpeBRep_VPointInter^ VP) ;

//! returns <false> if the vpoint is not given on arc <E>, <br>
//!          else returns <par> parameter on <E> <br>
 /*instead*/  System::Boolean ParonE(OCNaroWrappers::OCTopoDS_Edge^ E, Standard_Real& par) ;


 /*instead*/  void Index(Standard_Integer I) ;


 /*instead*/  Standard_Integer Index() ;


 /*instead*/  Standard_OStream& Dump(Standard_Integer I, OCNaroWrappers::OCTopoDS_Face^ F, Standard_OStream& OS) ;


 /*instead*/  Standard_OStream& Dump(OCNaroWrappers::OCTopoDS_Face^ F1, OCNaroWrappers::OCTopoDS_Face^ F2, Standard_OStream& OS) ;


 /*instead*/  TopOpeBRep_PThePointOfIntersection PThePointOfIntersectionDummy() ;

~OCTopOpeBRep_VPointInter()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
