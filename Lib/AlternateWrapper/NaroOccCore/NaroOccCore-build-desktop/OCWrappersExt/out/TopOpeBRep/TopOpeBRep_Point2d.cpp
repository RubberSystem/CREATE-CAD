// File generated by CPPExt (CPP file)
//

#include "TopOpeBRep_Point2d.h"
#include "../Converter.h"
#include "TopOpeBRep_Hctxff2d.h"
#include "TopOpeBRep_Hctxee2d.h"
#include "TopOpeBRep_EdgesIntersector.h"
#include "../IntRes2d/IntRes2d_IntersectionPoint.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../TopOpeBRepDS/TopOpeBRepDS_Transition.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"


using namespace OCNaroWrappers;

OCTopOpeBRep_Point2d::OCTopOpeBRep_Point2d(TopOpeBRep_Point2d* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRep_Point2d::OCTopOpeBRep_Point2d() 
{
  nativeHandle = new TopOpeBRep_Point2d();
}

 void OCTopOpeBRep_Point2d::Dump(Standard_Integer ie1, Standard_Integer ie2)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->Dump(ie1, ie2);
}

 void OCTopOpeBRep_Point2d::SetPint(OCNaroWrappers::OCIntRes2d_IntersectionPoint^ P)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetPint(*((IntRes2d_IntersectionPoint*)P->Handle));
}

 System::Boolean OCTopOpeBRep_Point2d::HasPint()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_Point2d*)nativeHandle)->HasPint());
}

OCIntRes2d_IntersectionPoint^ OCTopOpeBRep_Point2d::Pint()
{
  IntRes2d_IntersectionPoint* tmp = new IntRes2d_IntersectionPoint();
  *tmp = ((TopOpeBRep_Point2d*)nativeHandle)->Pint();
  return gcnew OCIntRes2d_IntersectionPoint(tmp);
}

 void OCTopOpeBRep_Point2d::SetIsVertex(Standard_Integer I, System::Boolean B)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetIsVertex(I, OCConverter::BooleanToStandardBoolean(B));
}

 System::Boolean OCTopOpeBRep_Point2d::IsVertex(Standard_Integer I)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_Point2d*)nativeHandle)->IsVertex(I));
}

 void OCTopOpeBRep_Point2d::SetVertex(Standard_Integer I, OCNaroWrappers::OCTopoDS_Vertex^ V)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetVertex(I, *((TopoDS_Vertex*)V->Handle));
}

OCTopoDS_Vertex^ OCTopOpeBRep_Point2d::Vertex(Standard_Integer I)
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = ((TopOpeBRep_Point2d*)nativeHandle)->Vertex(I);
  return gcnew OCTopoDS_Vertex(tmp);
}

 void OCTopOpeBRep_Point2d::SetTransition(Standard_Integer I, OCNaroWrappers::OCTopOpeBRepDS_Transition^ T)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetTransition(I, *((TopOpeBRepDS_Transition*)T->Handle));
}

OCTopOpeBRepDS_Transition^ OCTopOpeBRep_Point2d::Transition(Standard_Integer I)
{
  TopOpeBRepDS_Transition* tmp = new TopOpeBRepDS_Transition();
  *tmp = ((TopOpeBRep_Point2d*)nativeHandle)->Transition(I);
  return gcnew OCTopOpeBRepDS_Transition(tmp);
}

OCTopOpeBRepDS_Transition^ OCTopOpeBRep_Point2d::ChangeTransition(Standard_Integer I)
{
  TopOpeBRepDS_Transition* tmp = new TopOpeBRepDS_Transition();
  *tmp = ((TopOpeBRep_Point2d*)nativeHandle)->ChangeTransition(I);
  return gcnew OCTopOpeBRepDS_Transition(tmp);
}

 void OCTopOpeBRep_Point2d::SetParameter(Standard_Integer I, Standard_Real P)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetParameter(I, P);
}

 Standard_Real OCTopOpeBRep_Point2d::Parameter(Standard_Integer I)
{
  return ((TopOpeBRep_Point2d*)nativeHandle)->Parameter(I);
}

 void OCTopOpeBRep_Point2d::SetIsPointOfSegment(System::Boolean B)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetIsPointOfSegment(OCConverter::BooleanToStandardBoolean(B));
}

 System::Boolean OCTopOpeBRep_Point2d::IsPointOfSegment()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_Point2d*)nativeHandle)->IsPointOfSegment());
}

 void OCTopOpeBRep_Point2d::SetSegmentAncestors(Standard_Integer IP1, Standard_Integer IP2)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetSegmentAncestors(IP1, IP2);
}

 System::Boolean OCTopOpeBRep_Point2d::SegmentAncestors(Standard_Integer& IP1, Standard_Integer& IP2)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_Point2d*)nativeHandle)->SegmentAncestors(IP1, IP2));
}

 void OCTopOpeBRep_Point2d::SetStatus(OCTopOpeBRep_P2Dstatus S)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetStatus((TopOpeBRep_P2Dstatus)S);
}

 OCTopOpeBRep_P2Dstatus OCTopOpeBRep_Point2d::Status()
{
  return (OCTopOpeBRep_P2Dstatus)(((TopOpeBRep_Point2d*)nativeHandle)->Status());
}

 void OCTopOpeBRep_Point2d::SetIndex(Standard_Integer X)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetIndex(X);
}

 Standard_Integer OCTopOpeBRep_Point2d::Index()
{
  return ((TopOpeBRep_Point2d*)nativeHandle)->Index();
}

 void OCTopOpeBRep_Point2d::SetValue(OCNaroWrappers::OCgp_Pnt^ P)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetValue(*((gp_Pnt*)P->Handle));
}

OCgp_Pnt^ OCTopOpeBRep_Point2d::Value()
{
  gp_Pnt* tmp = new gp_Pnt();
  *tmp = ((TopOpeBRep_Point2d*)nativeHandle)->Value();
  return gcnew OCgp_Pnt(tmp);
}

 void OCTopOpeBRep_Point2d::SetValue2d(OCNaroWrappers::OCgp_Pnt2d^ P)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetValue2d(*((gp_Pnt2d*)P->Handle));
}

OCgp_Pnt2d^ OCTopOpeBRep_Point2d::Value2d()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = ((TopOpeBRep_Point2d*)nativeHandle)->Value2d();
  return gcnew OCgp_Pnt2d(tmp);
}

 void OCTopOpeBRep_Point2d::SetKeep(System::Boolean B)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetKeep(OCConverter::BooleanToStandardBoolean(B));
}

 System::Boolean OCTopOpeBRep_Point2d::Keep()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_Point2d*)nativeHandle)->Keep());
}

 void OCTopOpeBRep_Point2d::SetEdgesConfig(OCTopOpeBRepDS_Config C)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetEdgesConfig((TopOpeBRepDS_Config)C);
}

 OCTopOpeBRepDS_Config OCTopOpeBRep_Point2d::EdgesConfig()
{
  return (OCTopOpeBRepDS_Config)(((TopOpeBRep_Point2d*)nativeHandle)->EdgesConfig());
}

 void OCTopOpeBRep_Point2d::SetTolerance(Standard_Real T)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetTolerance(T);
}

 Standard_Real OCTopOpeBRep_Point2d::Tolerance()
{
  return ((TopOpeBRep_Point2d*)nativeHandle)->Tolerance();
}

 void OCTopOpeBRep_Point2d::SetHctxff2d(OCNaroWrappers::OCTopOpeBRep_Hctxff2d^ ff2d)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetHctxff2d(*((Handle_TopOpeBRep_Hctxff2d*)ff2d->Handle));
}

OCTopOpeBRep_Hctxff2d^ OCTopOpeBRep_Point2d::Hctxff2d()
{
  Handle(TopOpeBRep_Hctxff2d) tmp = ((TopOpeBRep_Point2d*)nativeHandle)->Hctxff2d();
  return gcnew OCTopOpeBRep_Hctxff2d(&tmp);
}

 void OCTopOpeBRep_Point2d::SetHctxee2d(OCNaroWrappers::OCTopOpeBRep_Hctxee2d^ ee2d)
{
  ((TopOpeBRep_Point2d*)nativeHandle)->SetHctxee2d(*((Handle_TopOpeBRep_Hctxee2d*)ee2d->Handle));
}

OCTopOpeBRep_Hctxee2d^ OCTopOpeBRep_Point2d::Hctxee2d()
{
  Handle(TopOpeBRep_Hctxee2d) tmp = ((TopOpeBRep_Point2d*)nativeHandle)->Hctxee2d();
  return gcnew OCTopOpeBRep_Hctxee2d(&tmp);
}


