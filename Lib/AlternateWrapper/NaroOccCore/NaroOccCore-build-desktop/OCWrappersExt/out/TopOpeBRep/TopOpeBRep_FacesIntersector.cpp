// File generated by CPPExt (CPP file)
//

#include "TopOpeBRep_FacesIntersector.h"
#include "../Converter.h"
#include "TopOpeBRep_HArray1OfLineInter.h"
#include "../BRepAdaptor/BRepAdaptor_HSurface.h"
#include "../BRepTopAdaptor/BRepTopAdaptor_TopolTool.h"
#include "../TopoDS/TopoDS_Shape.h"
#include "../Bnd/Bnd_Box.h"
#include "../TopTools/TopTools_IndexedMapOfShape.h"
#include "TopOpeBRep_LineInter.h"


using namespace OCNaroWrappers;

OCTopOpeBRep_FacesIntersector::OCTopOpeBRep_FacesIntersector(TopOpeBRep_FacesIntersector* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCTopOpeBRep_FacesIntersector::OCTopOpeBRep_FacesIntersector() 
{
  nativeHandle = new TopOpeBRep_FacesIntersector();
}

 void OCTopOpeBRep_FacesIntersector::Perform(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2)
{
  ((TopOpeBRep_FacesIntersector*)nativeHandle)->Perform(*((TopoDS_Shape*)S1->Handle), *((TopoDS_Shape*)S2->Handle));
}

 void OCTopOpeBRep_FacesIntersector::Perform(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2, OCNaroWrappers::OCBnd_Box^ B1, OCNaroWrappers::OCBnd_Box^ B2)
{
  ((TopOpeBRep_FacesIntersector*)nativeHandle)->Perform(*((TopoDS_Shape*)S1->Handle), *((TopoDS_Shape*)S2->Handle), *((Bnd_Box*)B1->Handle), *((Bnd_Box*)B2->Handle));
}

 System::Boolean OCTopOpeBRep_FacesIntersector::IsEmpty()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FacesIntersector*)nativeHandle)->IsEmpty());
}

 System::Boolean OCTopOpeBRep_FacesIntersector::IsDone()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FacesIntersector*)nativeHandle)->IsDone());
}

 System::Boolean OCTopOpeBRep_FacesIntersector::SameDomain()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FacesIntersector*)nativeHandle)->SameDomain());
}

OCTopoDS_Shape^ OCTopOpeBRep_FacesIntersector::Face(Standard_Integer Index)
{
  TopoDS_Shape* tmp = new TopoDS_Shape();
  *tmp = ((TopOpeBRep_FacesIntersector*)nativeHandle)->Face(Index);
  return gcnew OCTopoDS_Shape(tmp);
}

 System::Boolean OCTopOpeBRep_FacesIntersector::SurfacesSameOriented()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FacesIntersector*)nativeHandle)->SurfacesSameOriented());
}

 System::Boolean OCTopOpeBRep_FacesIntersector::IsRestriction(OCNaroWrappers::OCTopoDS_Shape^ E)
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FacesIntersector*)nativeHandle)->IsRestriction(*((TopoDS_Shape*)E->Handle)));
}

OCTopTools_IndexedMapOfShape^ OCTopOpeBRep_FacesIntersector::Restrictions()
{
  TopTools_IndexedMapOfShape* tmp = new TopTools_IndexedMapOfShape(0);
  *tmp = ((TopOpeBRep_FacesIntersector*)nativeHandle)->Restrictions();
  return gcnew OCTopTools_IndexedMapOfShape(tmp);
}

 void OCTopOpeBRep_FacesIntersector::PrepareLines()
{
  ((TopOpeBRep_FacesIntersector*)nativeHandle)->PrepareLines();
}

OCTopOpeBRep_HArray1OfLineInter^ OCTopOpeBRep_FacesIntersector::Lines()
{
  Handle(TopOpeBRep_HArray1OfLineInter) tmp = ((TopOpeBRep_FacesIntersector*)nativeHandle)->Lines();
  return gcnew OCTopOpeBRep_HArray1OfLineInter(&tmp);
}

 Standard_Integer OCTopOpeBRep_FacesIntersector::NbLines()
{
  return ((TopOpeBRep_FacesIntersector*)nativeHandle)->NbLines();
}

 void OCTopOpeBRep_FacesIntersector::InitLine()
{
  ((TopOpeBRep_FacesIntersector*)nativeHandle)->InitLine();
}

 System::Boolean OCTopOpeBRep_FacesIntersector::MoreLine()
{
  return OCConverter::StandardBooleanToBoolean(((TopOpeBRep_FacesIntersector*)nativeHandle)->MoreLine());
}

 void OCTopOpeBRep_FacesIntersector::NextLine()
{
  ((TopOpeBRep_FacesIntersector*)nativeHandle)->NextLine();
}

OCTopOpeBRep_LineInter^ OCTopOpeBRep_FacesIntersector::CurrentLine()
{
  TopOpeBRep_LineInter* tmp = new TopOpeBRep_LineInter();
  *tmp = ((TopOpeBRep_FacesIntersector*)nativeHandle)->CurrentLine();
  return gcnew OCTopOpeBRep_LineInter(tmp);
}

 Standard_Integer OCTopOpeBRep_FacesIntersector::CurrentLineIndex()
{
  return ((TopOpeBRep_FacesIntersector*)nativeHandle)->CurrentLineIndex();
}

OCTopOpeBRep_LineInter^ OCTopOpeBRep_FacesIntersector::ChangeLine(Standard_Integer IL)
{
  TopOpeBRep_LineInter* tmp = new TopOpeBRep_LineInter();
  *tmp = ((TopOpeBRep_FacesIntersector*)nativeHandle)->ChangeLine(IL);
  return gcnew OCTopOpeBRep_LineInter(tmp);
}

 void OCTopOpeBRep_FacesIntersector::ForceTolerances(Standard_Real tolarc, Standard_Real toltang)
{
  ((TopOpeBRep_FacesIntersector*)nativeHandle)->ForceTolerances(tolarc, toltang);
}

 void OCTopOpeBRep_FacesIntersector::GetTolerances(Standard_Real& tolarc, Standard_Real& toltang)
{
  ((TopOpeBRep_FacesIntersector*)nativeHandle)->GetTolerances(tolarc, toltang);
}


