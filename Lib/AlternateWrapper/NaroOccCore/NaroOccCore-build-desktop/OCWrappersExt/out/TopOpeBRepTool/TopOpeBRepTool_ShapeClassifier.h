// File generated by CPPExt (MPV)
//
#ifndef _TopOpeBRepTool_ShapeClassifier_OCWrappers_HeaderFile
#define _TopOpeBRepTool_ShapeClassifier_OCWrappers_HeaderFile

// include native header
#include <TopOpeBRepTool_ShapeClassifier.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Shape.h"
#include "../TopTools/TopTools_IndexedMapOfShape.h"
#include "../TopAbs/TopAbs_State.h"
#include "../TopoDS/TopoDS_Edge.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../gp/gp_Pnt.h"
#include "../gp/gp_Pnt2d.h"
#include "TopOpeBRepTool_SolidClassifier.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopTools_ListOfShape;
ref class OCTopOpeBRepTool_SolidClassifier;
ref class OCgp_Pnt2d;
ref class OCgp_Pnt;



public ref class OCTopOpeBRepTool_ShapeClassifier  {

protected:
  TopOpeBRepTool_ShapeClassifier* nativeHandle;
  OCTopOpeBRepTool_ShapeClassifier(OCDummy^) {};

public:
  property TopOpeBRepTool_ShapeClassifier* Handle
  {
    TopOpeBRepTool_ShapeClassifier* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopOpeBRepTool_ShapeClassifier(TopOpeBRepTool_ShapeClassifier* nativeHandle);

// Methods PUBLIC


OCTopOpeBRepTool_ShapeClassifier();


//! SRef is the reference shape. <br>
//! StateShapeShape(S) calls will classify S with SRef. <br>
OCTopOpeBRepTool_ShapeClassifier(OCNaroWrappers::OCTopoDS_Shape^ SRef);

//! reset all internal data (SolidClassifier included) <br>
 /*instead*/  void ClearAll() ;

//! reset all internal data (except SolidClassified) <br>
 /*instead*/  void ClearCurrent() ;


//! Set SRef as reference shape <br>
//! the next StateShapeReference(S,AvoidS) calls will classify S with SRef. <br>
 /*instead*/  void SetReference(OCNaroWrappers::OCTopoDS_Shape^ SRef) ;


//!  classify shape S compared with shape SRef. <br>
//!  samedomain = 0 : S1,S2 are not same domain <br>
//!  samedomain = 1 : S1,S2 are same domain <br>
 /*instead*/  OCTopAbs_State StateShapeShape(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopoDS_Shape^ SRef, Standard_Integer samedomain) ;


 /*instead*/  Standard_Integer SameDomain() ;


//! set mode for next StateShapeShape call <br>
//! 	  samedomain = true --> S,Sref are same domain --> point <br>
//! 	  on restriction (ON S) is used to classify S. <br>
//! 	  samedomain = false --> S,Sref are not domain --> point <br>
//! 	  not on restriction of S (IN S) is used to classify S. <br>
//! 	  samedomain value is used only in next StateShapeShape call <br>
 /*instead*/  void SameDomain(Standard_Integer samedomain) ;


//! classify shape S compared with shape SRef. <br>
//! AvoidS is not used in classification; AvoidS may be IsNull(). <br>
//! (usefull to avoid ON or UNKNOWN state in special cases) <br>
 /*instead*/  OCTopAbs_State StateShapeShape(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopoDS_Shape^ AvoidS, OCNaroWrappers::OCTopoDS_Shape^ SRef) ;


//! classify shape S compared with shape SRef. <br>
//! LAvoidS is list of S subshapes to avoid in classification <br>
//! AvoidS is not used in classification; AvoidS may be IsNull(). <br>
//! (usefull to avoid ON or UNKNOWN state in special cases) <br>
 /*instead*/  OCTopAbs_State StateShapeShape(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_ListOfShape^ LAvoidS, OCNaroWrappers::OCTopoDS_Shape^ SRef) ;


//! classify shape S compared with reference shape. <br>
//! AvoidS is not used in classification; AvoidS may be IsNull(). <br>
//! (usefull to avoid ON or UNKNOWN state in special cases) <br>
 /*instead*/  OCTopAbs_State StateShapeReference(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopoDS_Shape^ AvoidS) ;


//! classify shape S compared with reference shape. <br>
//! LAvoidS is list of S subshapes to avoid in classification <br>
//! (usefull to avoid ON or UNKNOWN state in special cases) <br>
 /*instead*/  OCTopAbs_State StateShapeReference(OCNaroWrappers::OCTopoDS_Shape^ S, OCNaroWrappers::OCTopTools_ListOfShape^ LAvoidS) ;


 /*instead*/  OCTopOpeBRepTool_SolidClassifier^ ChangeSolidClassifier() ;

//! classify point P2D with myRef <br>
 /*instead*/  void StateP2DReference(OCNaroWrappers::OCgp_Pnt2d^ P2D) ;

//! classify point P3D with myRef <br>
 /*instead*/  void StateP3DReference(OCNaroWrappers::OCgp_Pnt^ P3D) ;

//! return field myState <br>
 /*instead*/  OCTopAbs_State State() ;


 /*instead*/  OCgp_Pnt2d^ P2D() ;


 /*instead*/  OCgp_Pnt^ P3D() ;

~OCTopOpeBRepTool_ShapeClassifier()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
