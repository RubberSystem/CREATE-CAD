// File generated by CPPExt (MPV)
//
#ifndef _TopOpeBRepTool_ShapeTool_OCWrappers_HeaderFile
#define _TopOpeBRepTool_ShapeTool_OCWrappers_HeaderFile

// include native header
#include <TopOpeBRepTool_ShapeTool.hxx>
#include "../Converter.h"




namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCgp_Pnt;
ref class OCGeom_Curve;
ref class OCTopoDS_Edge;
ref class OCGeom_Surface;
ref class OCTopoDS_Face;
ref class OCBRepAdaptor_Surface;
ref class OCBRepAdaptor_Curve;
ref class OCgp_Dir;



public ref class OCTopOpeBRepTool_ShapeTool  {

protected:
  TopOpeBRepTool_ShapeTool* nativeHandle;
  OCTopOpeBRepTool_ShapeTool(OCDummy^) {};

public:
  property TopOpeBRepTool_ShapeTool* Handle
  {
    TopOpeBRepTool_ShapeTool* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopOpeBRepTool_ShapeTool(TopOpeBRepTool_ShapeTool* nativeHandle);

// Methods PUBLIC

//! Returns the tolerance of the shape <S>. <br>
//!          If the shape <S> is Null, returns 0. <br>
static /*instead*/  Standard_Real Tolerance(OCNaroWrappers::OCTopoDS_Shape^ S) ;

//! Returns 3D point of vertex <S>. <br>
static /*instead*/  OCgp_Pnt^ Pnt(OCNaroWrappers::OCTopoDS_Shape^ S) ;


static /*instead*/  OCGeom_Curve^ BASISCURVE(OCNaroWrappers::OCGeom_Curve^ C) ;


static /*instead*/  OCGeom_Curve^ BASISCURVE(OCNaroWrappers::OCTopoDS_Edge^ E) ;


static /*instead*/  OCGeom_Surface^ BASISSURFACE(OCNaroWrappers::OCGeom_Surface^ S) ;


static /*instead*/  OCGeom_Surface^ BASISSURFACE(OCNaroWrappers::OCTopoDS_Face^ F) ;


static /*instead*/  void UVBOUNDS(OCNaroWrappers::OCGeom_Surface^ S, System::Boolean& UPeri, System::Boolean& VPeri, Standard_Real& Umin, Standard_Real& Umax, Standard_Real& Vmin, Standard_Real& Vmax) ;


static /*instead*/  void UVBOUNDS(OCNaroWrappers::OCTopoDS_Face^ F, System::Boolean& UPeri, System::Boolean& VPeri, Standard_Real& Umin, Standard_Real& Umax, Standard_Real& Vmin, Standard_Real& Vmax) ;

//! ajust u,v values in UVBounds of the domain of the <br>
//!          geometric shape <S>, according to Uperiodicity and <br>
//!          VPeriodicity of the domain. <br>
//!          <S> is assumed to be a face. <br>
//!          u and/or v is/are not modified when the domain is <br>
//!          not periodic in U and/or V . <br>
static /*instead*/  void AdjustOnPeriodic(OCNaroWrappers::OCTopoDS_Shape^ S, Standard_Real& u, Standard_Real& v) ;

//! indicates wheter shape S1 is a closing shape on S2 or not. <br>
static /*instead*/  System::Boolean Closed(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2) ;


static /*instead*/  Standard_Real PeriodizeParameter(Standard_Real par, OCNaroWrappers::OCTopoDS_Shape^ EE, OCNaroWrappers::OCTopoDS_Shape^ FF) ;


static /*instead*/  System::Boolean ShapesSameOriented(OCNaroWrappers::OCTopoDS_Shape^ S1, OCNaroWrappers::OCTopoDS_Shape^ S2) ;


static /*instead*/  System::Boolean SurfacesSameOriented(OCNaroWrappers::OCBRepAdaptor_Surface^ S1, OCNaroWrappers::OCBRepAdaptor_Surface^ S2) ;


static /*instead*/  System::Boolean FacesSameOriented(OCNaroWrappers::OCTopoDS_Shape^ F1, OCNaroWrappers::OCTopoDS_Shape^ F2) ;


static /*instead*/  System::Boolean CurvesSameOriented(OCNaroWrappers::OCBRepAdaptor_Curve^ C1, OCNaroWrappers::OCBRepAdaptor_Curve^ C2) ;


static /*instead*/  System::Boolean EdgesSameOriented(OCNaroWrappers::OCTopoDS_Shape^ E1, OCNaroWrappers::OCTopoDS_Shape^ E2) ;


//! Compute tangent T, normal N, curvature C at point of parameter <br>
//! P on curve BRAC. Returns the tolerance indicating if T,N are null. <br>
static /*instead*/  Standard_Real EdgeData(OCNaroWrappers::OCBRepAdaptor_Curve^ BRAC, Standard_Real P, OCNaroWrappers::OCgp_Dir^ T, OCNaroWrappers::OCgp_Dir^ N, Standard_Real& C) ;

//! Same as previous on edge E. <br>
static /*instead*/  Standard_Real EdgeData(OCNaroWrappers::OCTopoDS_Shape^ E, Standard_Real P, OCNaroWrappers::OCgp_Dir^ T, OCNaroWrappers::OCgp_Dir^ N, Standard_Real& C) ;


static /*instead*/  Standard_Real Resolution3dU(OCNaroWrappers::OCGeom_Surface^ SU, Standard_Real Tol2d) ;


static /*instead*/  Standard_Real Resolution3dV(OCNaroWrappers::OCGeom_Surface^ SU, Standard_Real Tol2d) ;


static /*instead*/  Standard_Real Resolution3d(OCNaroWrappers::OCGeom_Surface^ SU, Standard_Real Tol2d) ;


static /*instead*/  Standard_Real Resolution3d(OCNaroWrappers::OCTopoDS_Face^ F, Standard_Real Tol2d) ;

~OCTopOpeBRepTool_ShapeTool()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
