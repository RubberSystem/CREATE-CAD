// File generated by CPPExt (MPV)
//
#ifndef _TopOpeBRepTool_FuseEdges_OCWrappers_HeaderFile
#define _TopOpeBRepTool_FuseEdges_OCWrappers_HeaderFile

// include native header
#include <TopOpeBRepTool_FuseEdges.hxx>
#include "../Converter.h"


#include "../TopoDS/TopoDS_Shape.h"
#include "../TopTools/TopTools_IndexedDataMapOfShapeListOfShape.h"
#include "../TopTools/TopTools_DataMapOfIntegerListOfShape.h"
#include "../TopTools/TopTools_DataMapOfIntegerShape.h"
#include "../TopTools/TopTools_DataMapOfShapeShape.h"
#include "../TopTools/TopTools_IndexedMapOfShape.h"
#include "../TopAbs/TopAbs_ShapeEnum.h"


namespace OCNaroWrappers
{

ref class OCTopoDS_Shape;
ref class OCTopTools_IndexedMapOfShape;
ref class OCTopTools_DataMapOfIntegerListOfShape;
ref class OCTopTools_DataMapOfIntegerShape;
ref class OCTopTools_DataMapOfShapeShape;
ref class OCTopTools_IndexedDataMapOfShapeListOfShape;
ref class OCTopTools_MapOfShape;
ref class OCTopTools_ListOfShape;
ref class OCTopoDS_Vertex;
ref class OCTopoDS_Edge;


//! This class can detect  vertices in a face that can <br>
//!          be considered useless and then perform the fuse of <br>
//!          the  edges and remove  the  useless vertices.  By <br>
//!          useles vertices,  we mean : <br>
//!            * vertices that  have  exactly two connex edges <br>
//!            * the edges connex to the vertex must have <br>
//!              exactly the same 2 connex faces . <br>
//!            * The edges connex to the vertex must have the <br>
//!               same geometric support. <br>
public ref class OCTopOpeBRepTool_FuseEdges  {

protected:
  TopOpeBRepTool_FuseEdges* nativeHandle;
  OCTopOpeBRepTool_FuseEdges(OCDummy^) {};

public:
  property TopOpeBRepTool_FuseEdges* Handle
  {
    TopOpeBRepTool_FuseEdges* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCTopOpeBRepTool_FuseEdges(TopOpeBRepTool_FuseEdges* nativeHandle);

// Methods PUBLIC

//! Initialise members  and build  construction of map <br>
//!          of ancestors. <br>
OCTopOpeBRepTool_FuseEdges(OCNaroWrappers::OCTopoDS_Shape^ theShape, System::Boolean PerformNow);

//! set edges to avoid being fused <br>
 /*instead*/  void AvoidEdges(OCNaroWrappers::OCTopTools_IndexedMapOfShape^ theMapEdg) ;

//! returns  all the list of edges to be fused <br>
//!          each list of the map represent a set of connex edges <br>
//!          that can be fused. <br>
 /*instead*/  void Edges(OCNaroWrappers::OCTopTools_DataMapOfIntegerListOfShape^ theMapLstEdg) ;

//! returns all the fused edges. each integer entry in <br>
//!           the   map  corresponds  to  the  integer   in the <br>
//!           DataMapOfIntegerListOfShape  we    get in  method <br>
//!          Edges.   That is to say, to  the list  of edges in <br>
//!          theMapLstEdg(i) corresponds the resulting edge theMapEdge(i) <br>
//! <br>
 /*instead*/  void ResultEdges(OCNaroWrappers::OCTopTools_DataMapOfIntegerShape^ theMapEdg) ;

//! returns the map of modified faces. <br>
 /*instead*/  void Faces(OCNaroWrappers::OCTopTools_DataMapOfShapeShape^ theMapFac) ;

//! returns myShape modified with the list of internal <br>
//!          edges removed from it. <br>
 /*instead*/  OCTopoDS_Shape^ Shape() ;

//! returns the number of vertices candidate to be removed <br>
 /*instead*/  Standard_Integer NbVertices() ;

//! Using  map of list of connex  edges, fuse each list to <br>
//!           one edge and then update myShape <br>
 /*instead*/  void Perform() ;

~OCTopOpeBRepTool_FuseEdges()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
