// File generated by CPPExt (CPP file)
//

#include "IFSelect_WorkSession.h"
#include "../Converter.h"
#include "IFSelect_ShareOut.h"
#include "IFSelect_WorkLibrary.h"
#include "../Interface/Interface_Protocol.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Interface/Interface_HGraph.h"
#include "../Interface/Interface_GTool.h"
#include "../Dico/Dico_DictionaryOfTransient.h"
#include "IFSelect_ModelCopier.h"
#include "IFSelect_Signature.h"
#include "../Standard/Standard_Transient.h"
#include "../TCollection/TCollection_HAsciiString.h"
#include "../Interface/Interface_Graph.h"
#include "../TColStd/TColStd_HSequenceOfTransient.h"
#include "../Interface/Interface_CheckIterator.h"
#include "../TColStd/TColStd_HSequenceOfInteger.h"
#include "../Standard/Standard_Type.h"
#include "../TColStd/TColStd_HSequenceOfHAsciiString.h"
#include "IFSelect_IntParam.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "IFSelect_Selection.h"
#include "../Interface/Interface_EntityIterator.h"
#include "IFSelect_SelectionIterator.h"
#include "IFSelect_SignCounter.h"
#include "IFSelect_Dispatch.h"
#include "IFSelect_GeneralModifier.h"
#include "IFSelect_Modifier.h"
#include "IFSelect_Transformer.h"
#include "IFSelect_PacketList.h"
#include "../TColStd/TColStd_SequenceOfTransient.h"
#include "../TColStd/TColStd_SequenceOfInteger.h"
#include "../Message/Message_Messenger.h"
#include "IFSelect_SignatureList.h"


using namespace OCNaroWrappers;

OCIFSelect_WorkSession::OCIFSelect_WorkSession(Handle(IFSelect_WorkSession)* nativeHandle) : OCMMgt_TShared((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_IFSelect_WorkSession(*nativeHandle);
}

OCIFSelect_WorkSession::OCIFSelect_WorkSession() : OCMMgt_TShared((OCDummy^)nullptr)

{
  nativeHandle = new Handle_IFSelect_WorkSession(new IFSelect_WorkSession());
}

 void OCIFSelect_WorkSession::SetErrorHandle(System::Boolean hand)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetErrorHandle(OCConverter::BooleanToStandardBoolean(hand));
}

 System::Boolean OCIFSelect_WorkSession::ErrorHandle()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ErrorHandle());
}

OCIFSelect_ShareOut^ OCIFSelect_WorkSession::ShareOut()
{
  Handle(IFSelect_ShareOut) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ShareOut();
  return gcnew OCIFSelect_ShareOut(&tmp);
}

 void OCIFSelect_WorkSession::SetShareOut(OCNaroWrappers::OCIFSelect_ShareOut^ shareout)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetShareOut(*((Handle_IFSelect_ShareOut*)shareout->Handle));
}

 void OCIFSelect_WorkSession::SetModeStat(System::Boolean theMode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetModeStat(OCConverter::BooleanToStandardBoolean(theMode));
}

 System::Boolean OCIFSelect_WorkSession::GetModeStat()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->GetModeStat());
}

 void OCIFSelect_WorkSession::SetLibrary(OCNaroWrappers::OCIFSelect_WorkLibrary^ lib)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetLibrary(*((Handle_IFSelect_WorkLibrary*)lib->Handle));
}

OCIFSelect_WorkLibrary^ OCIFSelect_WorkSession::WorkLibrary()
{
  Handle(IFSelect_WorkLibrary) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->WorkLibrary();
  return gcnew OCIFSelect_WorkLibrary(&tmp);
}

 void OCIFSelect_WorkSession::SetProtocol(OCNaroWrappers::OCInterface_Protocol^ protocol)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetProtocol(*((Handle_Interface_Protocol*)protocol->Handle));
}

OCInterface_Protocol^ OCIFSelect_WorkSession::Protocol()
{
  Handle(Interface_Protocol) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Protocol();
  return gcnew OCInterface_Protocol(&tmp);
}

 void OCIFSelect_WorkSession::SetSignType(OCNaroWrappers::OCIFSelect_Signature^ signtype)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetSignType(*((Handle_IFSelect_Signature*)signtype->Handle));
}

OCIFSelect_Signature^ OCIFSelect_WorkSession::SignType()
{
  Handle(IFSelect_Signature) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->SignType();
  return gcnew OCIFSelect_Signature(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::HasModel()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->HasModel());
}

 void OCIFSelect_WorkSession::SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model, System::Boolean clearpointed)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetModel(*((Handle_Interface_InterfaceModel*)model->Handle), OCConverter::BooleanToStandardBoolean(clearpointed));
}

OCInterface_InterfaceModel^ OCIFSelect_WorkSession::Model()
{
  Handle(Interface_InterfaceModel) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Model();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 void OCIFSelect_WorkSession::SetLoadedFile(System::String^ filename)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetLoadedFile(OCConverter::StringToStandardCString(filename));
}

 System::String^ OCIFSelect_WorkSession::LoadedFile()
{
  return OCConverter::StandardCStringToString((*((Handle_IFSelect_WorkSession*)nativeHandle))->LoadedFile());
}

 OCIFSelect_ReturnStatus OCIFSelect_WorkSession::ReadFile(System::String^ filename)
{
  return (OCIFSelect_ReturnStatus)((*((Handle_IFSelect_WorkSession*)nativeHandle))->ReadFile(OCConverter::StringToStandardCString(filename)));
}

 Standard_Integer OCIFSelect_WorkSession::NbStartingEntities()
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->NbStartingEntities();
}

OCStandard_Transient^ OCIFSelect_WorkSession::StartingEntity(Standard_Integer num)
{
  Handle(Standard_Transient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->StartingEntity(num);
  return gcnew OCStandard_Transient(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::StartingNumber(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->StartingNumber(*((Handle_Standard_Transient*)ent->Handle));
}

 Standard_Integer OCIFSelect_WorkSession::NumberFromLabel(System::String^ val, Standard_Integer afternum)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->NumberFromLabel(OCConverter::StringToStandardCString(val), afternum);
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::EntityLabel(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->EntityLabel(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::EntityName(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->EntityName(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::CategoryNumber(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->CategoryNumber(*((Handle_Standard_Transient*)ent->Handle));
}

 System::String^ OCIFSelect_WorkSession::CategoryName(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardCStringToString((*((Handle_IFSelect_WorkSession*)nativeHandle))->CategoryName(*((Handle_Standard_Transient*)ent->Handle)));
}

 System::String^ OCIFSelect_WorkSession::ValidityName(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardCStringToString((*((Handle_IFSelect_WorkSession*)nativeHandle))->ValidityName(*((Handle_Standard_Transient*)ent->Handle)));
}

 void OCIFSelect_WorkSession::ClearData(Standard_Integer mode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->ClearData(mode);
}

 System::Boolean OCIFSelect_WorkSession::ComputeGraph(System::Boolean enforce)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ComputeGraph(OCConverter::BooleanToStandardBoolean(enforce)));
}

OCInterface_HGraph^ OCIFSelect_WorkSession::HGraph()
{
  Handle(Interface_HGraph) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->HGraph();
  return gcnew OCInterface_HGraph(&tmp);
}

OCInterface_Graph^ OCIFSelect_WorkSession::Graph()
{
  Interface_Graph* tmp = new Interface_Graph(123abc, 123abc, 0);
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Graph();
  return gcnew OCInterface_Graph(tmp);
}

OCTColStd_HSequenceOfTransient^ OCIFSelect_WorkSession::Shareds(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Shareds(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCTColStd_HSequenceOfTransient^ OCIFSelect_WorkSession::Sharings(OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Sharings(*((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::IsLoaded()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->IsLoaded());
}

 System::Boolean OCIFSelect_WorkSession::ComputeCheck(System::Boolean enforce)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ComputeCheck(OCConverter::BooleanToStandardBoolean(enforce)));
}

OCInterface_CheckIterator^ OCIFSelect_WorkSession::ModelCheckList(System::Boolean complete)
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ModelCheckList(OCConverter::BooleanToStandardBoolean(complete));
  return gcnew OCInterface_CheckIterator(tmp);
}

OCInterface_CheckIterator^ OCIFSelect_WorkSession::CheckOne(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean complete)
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->CheckOne(*((Handle_Standard_Transient*)ent->Handle), OCConverter::BooleanToStandardBoolean(complete));
  return gcnew OCInterface_CheckIterator(tmp);
}

OCInterface_CheckIterator^ OCIFSelect_WorkSession::LastRunCheckList()
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->LastRunCheckList();
  return gcnew OCInterface_CheckIterator(tmp);
}

 Standard_Integer OCIFSelect_WorkSession::MaxIdent()
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->MaxIdent();
}

OCStandard_Transient^ OCIFSelect_WorkSession::Item(Standard_Integer id)
{
  Handle(Standard_Transient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Item(id);
  return gcnew OCStandard_Transient(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::ItemIdent(OCNaroWrappers::OCStandard_Transient^ item)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->ItemIdent(*((Handle_Standard_Transient*)item->Handle));
}

OCStandard_Transient^ OCIFSelect_WorkSession::NamedItem(System::String^ name)
{
  Handle(Standard_Transient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->NamedItem(OCConverter::StringToStandardCString(name));
  return gcnew OCStandard_Transient(&tmp);
}

OCStandard_Transient^ OCIFSelect_WorkSession::NamedItem(OCNaroWrappers::OCTCollection_HAsciiString^ name)
{
  Handle(Standard_Transient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->NamedItem(*((Handle_TCollection_HAsciiString*)name->Handle));
  return gcnew OCStandard_Transient(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::NameIdent(System::String^ name)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->NameIdent(OCConverter::StringToStandardCString(name));
}

 System::Boolean OCIFSelect_WorkSession::HasName(OCNaroWrappers::OCStandard_Transient^ item)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->HasName(*((Handle_Standard_Transient*)item->Handle)));
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::Name(OCNaroWrappers::OCStandard_Transient^ item)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Name(*((Handle_Standard_Transient*)item->Handle));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::AddItem(OCNaroWrappers::OCStandard_Transient^ item, System::Boolean active)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->AddItem(*((Handle_Standard_Transient*)item->Handle), OCConverter::BooleanToStandardBoolean(active));
}

 Standard_Integer OCIFSelect_WorkSession::AddNamedItem(System::String^ name, OCNaroWrappers::OCStandard_Transient^ item, System::Boolean active)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->AddNamedItem(OCConverter::StringToStandardCString(name), *((Handle_Standard_Transient*)item->Handle), OCConverter::BooleanToStandardBoolean(active));
}

 System::Boolean OCIFSelect_WorkSession::SetActive(OCNaroWrappers::OCStandard_Transient^ item, System::Boolean mode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetActive(*((Handle_Standard_Transient*)item->Handle), OCConverter::BooleanToStandardBoolean(mode)));
}

 System::Boolean OCIFSelect_WorkSession::RemoveNamedItem(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->RemoveNamedItem(OCConverter::StringToStandardCString(name)));
}

 System::Boolean OCIFSelect_WorkSession::RemoveName(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->RemoveName(OCConverter::StringToStandardCString(name)));
}

 System::Boolean OCIFSelect_WorkSession::RemoveItem(OCNaroWrappers::OCStandard_Transient^ item)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->RemoveItem(*((Handle_Standard_Transient*)item->Handle)));
}

 void OCIFSelect_WorkSession::ClearItems()
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->ClearItems();
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::ItemLabel(Standard_Integer id)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ItemLabel(id);
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTColStd_HSequenceOfInteger^ OCIFSelect_WorkSession::ItemIdents(OCNaroWrappers::OCStandard_Type^ type)
{
  Handle(TColStd_HSequenceOfInteger) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ItemIdents(*((Handle_Standard_Type*)type->Handle));
  return gcnew OCTColStd_HSequenceOfInteger(&tmp);
}

OCTColStd_HSequenceOfHAsciiString^ OCIFSelect_WorkSession::ItemNames(OCNaroWrappers::OCStandard_Type^ type)
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ItemNames(*((Handle_Standard_Type*)type->Handle));
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}

OCTColStd_HSequenceOfHAsciiString^ OCIFSelect_WorkSession::ItemNamesForLabel(System::String^ label)
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ItemNamesForLabel(OCConverter::StringToStandardCString(label));
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::NextIdentForLabel(System::String^ label, Standard_Integer id, Standard_Integer mode)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->NextIdentForLabel(OCConverter::StringToStandardCString(label), id, mode);
}

OCStandard_Transient^ OCIFSelect_WorkSession::NewParamFromStatic(System::String^ statname, System::String^ name)
{
  Handle(Standard_Transient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->NewParamFromStatic(OCConverter::StringToStandardCString(statname), OCConverter::StringToStandardCString(name));
  return gcnew OCStandard_Transient(&tmp);
}

OCIFSelect_IntParam^ OCIFSelect_WorkSession::IntParam(Standard_Integer id)
{
  Handle(IFSelect_IntParam) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->IntParam(id);
  return gcnew OCIFSelect_IntParam(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::IntValue(OCNaroWrappers::OCIFSelect_IntParam^ it)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->IntValue(*((Handle_IFSelect_IntParam*)it->Handle));
}

OCIFSelect_IntParam^ OCIFSelect_WorkSession::NewIntParam(System::String^ name)
{
  Handle(IFSelect_IntParam) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->NewIntParam(OCConverter::StringToStandardCString(name));
  return gcnew OCIFSelect_IntParam(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::SetIntValue(OCNaroWrappers::OCIFSelect_IntParam^ it, Standard_Integer val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetIntValue(*((Handle_IFSelect_IntParam*)it->Handle), val));
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::TextParam(Standard_Integer id)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->TextParam(id);
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTCollection_AsciiString^ OCIFSelect_WorkSession::TextValue(OCNaroWrappers::OCTCollection_HAsciiString^ par)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->TextValue(*((Handle_TCollection_HAsciiString*)par->Handle));
  return gcnew OCTCollection_AsciiString(tmp);
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::NewTextParam(System::String^ name)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->NewTextParam(OCConverter::StringToStandardCString(name));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::SetTextValue(OCNaroWrappers::OCTCollection_HAsciiString^ par, System::String^ val)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetTextValue(*((Handle_TCollection_HAsciiString*)par->Handle), OCConverter::StringToStandardCString(val)));
}

OCIFSelect_Signature^ OCIFSelect_WorkSession::Signature(Standard_Integer id)
{
  Handle(IFSelect_Signature) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Signature(id);
  return gcnew OCIFSelect_Signature(&tmp);
}

 System::String^ OCIFSelect_WorkSession::SignValue(OCNaroWrappers::OCIFSelect_Signature^ sign, OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardCStringToString((*((Handle_IFSelect_WorkSession*)nativeHandle))->SignValue(*((Handle_IFSelect_Signature*)sign->Handle), *((Handle_Standard_Transient*)ent->Handle)));
}

OCIFSelect_Selection^ OCIFSelect_WorkSession::Selection(Standard_Integer id)
{
  Handle(IFSelect_Selection) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Selection(id);
  return gcnew OCIFSelect_Selection(&tmp);
}

OCInterface_EntityIterator^ OCIFSelect_WorkSession::EvalSelection(OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->EvalSelection(*((Handle_IFSelect_Selection*)sel->Handle));
  return gcnew OCInterface_EntityIterator(tmp);
}

OCIFSelect_SelectionIterator^ OCIFSelect_WorkSession::Sources(OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  IFSelect_SelectionIterator* tmp = new IFSelect_SelectionIterator();
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Sources(*((Handle_IFSelect_Selection*)sel->Handle));
  return gcnew OCIFSelect_SelectionIterator(tmp);
}

OCTColStd_HSequenceOfTransient^ OCIFSelect_WorkSession::SelectionResult(OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->SelectionResult(*((Handle_IFSelect_Selection*)sel->Handle));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCTColStd_HSequenceOfTransient^ OCIFSelect_WorkSession::SelectionResultFromList(OCNaroWrappers::OCIFSelect_Selection^ sel, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->SelectionResultFromList(*((Handle_IFSelect_Selection*)sel->Handle), *((Handle_TColStd_HSequenceOfTransient*)list->Handle));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::SetItemSelection(OCNaroWrappers::OCStandard_Transient^ item, OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetItemSelection(*((Handle_Standard_Transient*)item->Handle), *((Handle_IFSelect_Selection*)sel->Handle)));
}

 System::Boolean OCIFSelect_WorkSession::ResetItemSelection(OCNaroWrappers::OCStandard_Transient^ item)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ResetItemSelection(*((Handle_Standard_Transient*)item->Handle)));
}

OCIFSelect_Selection^ OCIFSelect_WorkSession::ItemSelection(OCNaroWrappers::OCStandard_Transient^ item)
{
  Handle(IFSelect_Selection) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ItemSelection(*((Handle_Standard_Transient*)item->Handle));
  return gcnew OCIFSelect_Selection(&tmp);
}

OCIFSelect_SignCounter^ OCIFSelect_WorkSession::SignCounter(Standard_Integer id)
{
  Handle(IFSelect_SignCounter) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->SignCounter(id);
  return gcnew OCIFSelect_SignCounter(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::ComputeCounter(OCNaroWrappers::OCIFSelect_SignCounter^ counter, System::Boolean forced)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ComputeCounter(*((Handle_IFSelect_SignCounter*)counter->Handle), OCConverter::BooleanToStandardBoolean(forced)));
}

 System::Boolean OCIFSelect_WorkSession::ComputeCounterFromList(OCNaroWrappers::OCIFSelect_SignCounter^ counter, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, System::Boolean clear)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ComputeCounterFromList(*((Handle_IFSelect_SignCounter*)counter->Handle), *((Handle_TColStd_HSequenceOfTransient*)list->Handle), OCConverter::BooleanToStandardBoolean(clear)));
}

OCTColStd_HSequenceOfInteger^ OCIFSelect_WorkSession::AppliedDispatches()
{
  Handle(TColStd_HSequenceOfInteger) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->AppliedDispatches();
  return gcnew OCTColStd_HSequenceOfInteger(&tmp);
}

 void OCIFSelect_WorkSession::ClearShareOut(System::Boolean onlydisp)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->ClearShareOut(OCConverter::BooleanToStandardBoolean(onlydisp));
}

OCIFSelect_Dispatch^ OCIFSelect_WorkSession::Dispatch(Standard_Integer id)
{
  Handle(IFSelect_Dispatch) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Dispatch(id);
  return gcnew OCIFSelect_Dispatch(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::DispatchRank(OCNaroWrappers::OCIFSelect_Dispatch^ disp)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->DispatchRank(*((Handle_IFSelect_Dispatch*)disp->Handle));
}

OCIFSelect_ModelCopier^ OCIFSelect_WorkSession::ModelCopier()
{
  Handle(IFSelect_ModelCopier) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ModelCopier();
  return gcnew OCIFSelect_ModelCopier(&tmp);
}

 void OCIFSelect_WorkSession::SetModelCopier(OCNaroWrappers::OCIFSelect_ModelCopier^ copier)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetModelCopier(*((Handle_IFSelect_ModelCopier*)copier->Handle));
}

 Standard_Integer OCIFSelect_WorkSession::NbFinalModifiers(System::Boolean formodel)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->NbFinalModifiers(OCConverter::BooleanToStandardBoolean(formodel));
}

OCTColStd_HSequenceOfInteger^ OCIFSelect_WorkSession::FinalModifierIdents(System::Boolean formodel)
{
  Handle(TColStd_HSequenceOfInteger) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->FinalModifierIdents(OCConverter::BooleanToStandardBoolean(formodel));
  return gcnew OCTColStd_HSequenceOfInteger(&tmp);
}

OCIFSelect_GeneralModifier^ OCIFSelect_WorkSession::GeneralModifier(Standard_Integer id)
{
  Handle(IFSelect_GeneralModifier) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->GeneralModifier(id);
  return gcnew OCIFSelect_GeneralModifier(&tmp);
}

OCIFSelect_Modifier^ OCIFSelect_WorkSession::ModelModifier(Standard_Integer id)
{
  Handle(IFSelect_Modifier) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->ModelModifier(id);
  return gcnew OCIFSelect_Modifier(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::ModifierRank(OCNaroWrappers::OCIFSelect_GeneralModifier^ item)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->ModifierRank(*((Handle_IFSelect_GeneralModifier*)item->Handle));
}

 System::Boolean OCIFSelect_WorkSession::ChangeModifierRank(System::Boolean formodel, Standard_Integer before, Standard_Integer after)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ChangeModifierRank(OCConverter::BooleanToStandardBoolean(formodel), before, after));
}

 void OCIFSelect_WorkSession::ClearFinalModifiers()
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->ClearFinalModifiers();
}

 System::Boolean OCIFSelect_WorkSession::SetAppliedModifier(OCNaroWrappers::OCIFSelect_GeneralModifier^ modif, OCNaroWrappers::OCStandard_Transient^ item)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetAppliedModifier(*((Handle_IFSelect_GeneralModifier*)modif->Handle), *((Handle_Standard_Transient*)item->Handle)));
}

 System::Boolean OCIFSelect_WorkSession::ResetAppliedModifier(OCNaroWrappers::OCIFSelect_GeneralModifier^ modif)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ResetAppliedModifier(*((Handle_IFSelect_GeneralModifier*)modif->Handle)));
}

OCStandard_Transient^ OCIFSelect_WorkSession::UsesAppliedModifier(OCNaroWrappers::OCIFSelect_GeneralModifier^ modif)
{
  Handle(Standard_Transient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->UsesAppliedModifier(*((Handle_IFSelect_GeneralModifier*)modif->Handle));
  return gcnew OCStandard_Transient(&tmp);
}

OCIFSelect_Transformer^ OCIFSelect_WorkSession::Transformer(Standard_Integer id)
{
  Handle(IFSelect_Transformer) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Transformer(id);
  return gcnew OCIFSelect_Transformer(&tmp);
}

 Standard_Integer OCIFSelect_WorkSession::RunTransformer(OCNaroWrappers::OCIFSelect_Transformer^ transf)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->RunTransformer(*((Handle_IFSelect_Transformer*)transf->Handle));
}

 Standard_Integer OCIFSelect_WorkSession::RunModifier(OCNaroWrappers::OCIFSelect_Modifier^ modif, System::Boolean copy)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->RunModifier(*((Handle_IFSelect_Modifier*)modif->Handle), OCConverter::BooleanToStandardBoolean(copy));
}

 Standard_Integer OCIFSelect_WorkSession::RunModifierSelected(OCNaroWrappers::OCIFSelect_Modifier^ modif, OCNaroWrappers::OCIFSelect_Selection^ sel, System::Boolean copy)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->RunModifierSelected(*((Handle_IFSelect_Modifier*)modif->Handle), *((Handle_IFSelect_Selection*)sel->Handle), OCConverter::BooleanToStandardBoolean(copy));
}

OCIFSelect_Transformer^ OCIFSelect_WorkSession::NewTransformStandard(System::Boolean copy, System::String^ name)
{
  Handle(IFSelect_Transformer) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->NewTransformStandard(OCConverter::BooleanToStandardBoolean(copy), OCConverter::StringToStandardCString(name));
  return gcnew OCIFSelect_Transformer(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::SetModelContent(OCNaroWrappers::OCIFSelect_Selection^ sel, System::Boolean keep)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetModelContent(*((Handle_IFSelect_Selection*)sel->Handle), OCConverter::BooleanToStandardBoolean(keep)));
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::FilePrefix()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->FilePrefix();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::DefaultFileRoot()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->DefaultFileRoot();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::FileExtension()
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->FileExtension();
  return gcnew OCTCollection_HAsciiString(&tmp);
}

OCTCollection_HAsciiString^ OCIFSelect_WorkSession::FileRoot(OCNaroWrappers::OCIFSelect_Dispatch^ disp)
{
  Handle(TCollection_HAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->FileRoot(*((Handle_IFSelect_Dispatch*)disp->Handle));
  return gcnew OCTCollection_HAsciiString(&tmp);
}

 void OCIFSelect_WorkSession::SetFilePrefix(System::String^ name)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetFilePrefix(OCConverter::StringToStandardCString(name));
}

 System::Boolean OCIFSelect_WorkSession::SetDefaultFileRoot(System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetDefaultFileRoot(OCConverter::StringToStandardCString(name)));
}

 void OCIFSelect_WorkSession::SetFileExtension(System::String^ name)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetFileExtension(OCConverter::StringToStandardCString(name));
}

 System::Boolean OCIFSelect_WorkSession::SetFileRoot(OCNaroWrappers::OCIFSelect_Dispatch^ disp, System::String^ name)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetFileRoot(*((Handle_IFSelect_Dispatch*)disp->Handle), OCConverter::StringToStandardCString(name)));
}

 System::String^ OCIFSelect_WorkSession::GiveFileRoot(System::String^ file)
{
  return OCConverter::StandardCStringToString((*((Handle_IFSelect_WorkSession*)nativeHandle))->GiveFileRoot(OCConverter::StringToStandardCString(file)));
}

 System::String^ OCIFSelect_WorkSession::GiveFileComplete(System::String^ file)
{
  return OCConverter::StandardCStringToString((*((Handle_IFSelect_WorkSession*)nativeHandle))->GiveFileComplete(OCConverter::StringToStandardCString(file)));
}

 void OCIFSelect_WorkSession::ClearFile()
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->ClearFile();
}

 void OCIFSelect_WorkSession::EvaluateFile()
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->EvaluateFile();
}

 Standard_Integer OCIFSelect_WorkSession::NbFiles()
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->NbFiles();
}

OCInterface_InterfaceModel^ OCIFSelect_WorkSession::FileModel(Standard_Integer num)
{
  Handle(Interface_InterfaceModel) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->FileModel(num);
  return gcnew OCInterface_InterfaceModel(&tmp);
}

OCTCollection_AsciiString^ OCIFSelect_WorkSession::FileName(Standard_Integer num)
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->FileName(num);
  return gcnew OCTCollection_AsciiString(tmp);
}

 void OCIFSelect_WorkSession::BeginSentFiles(System::Boolean record)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->BeginSentFiles(OCConverter::BooleanToStandardBoolean(record));
}

OCTColStd_HSequenceOfHAsciiString^ OCIFSelect_WorkSession::SentFiles()
{
  Handle(TColStd_HSequenceOfHAsciiString) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->SentFiles();
  return gcnew OCTColStd_HSequenceOfHAsciiString(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::SendSplit()
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SendSplit());
}

OCIFSelect_PacketList^ OCIFSelect_WorkSession::EvalSplit()
{
  Handle(IFSelect_PacketList) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->EvalSplit();
  return gcnew OCIFSelect_PacketList(&tmp);
}

OCInterface_EntityIterator^ OCIFSelect_WorkSession::SentList(Standard_Integer count)
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->SentList(count);
  return gcnew OCInterface_EntityIterator(tmp);
}

 Standard_Integer OCIFSelect_WorkSession::MaxSendingCount()
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->MaxSendingCount();
}

 System::Boolean OCIFSelect_WorkSession::SetRemaining(OCIFSelect_RemainMode mode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetRemaining((IFSelect_RemainMode)mode));
}

 OCIFSelect_ReturnStatus OCIFSelect_WorkSession::SendAll(System::String^ filename, System::Boolean computegraph)
{
  return (OCIFSelect_ReturnStatus)((*((Handle_IFSelect_WorkSession*)nativeHandle))->SendAll(OCConverter::StringToStandardCString(filename), OCConverter::BooleanToStandardBoolean(computegraph)));
}

 OCIFSelect_ReturnStatus OCIFSelect_WorkSession::SendSelected(System::String^ filename, OCNaroWrappers::OCIFSelect_Selection^ sel, System::Boolean computegraph)
{
  return (OCIFSelect_ReturnStatus)((*((Handle_IFSelect_WorkSession*)nativeHandle))->SendSelected(OCConverter::StringToStandardCString(filename), *((Handle_IFSelect_Selection*)sel->Handle), OCConverter::BooleanToStandardBoolean(computegraph)));
}

 OCIFSelect_ReturnStatus OCIFSelect_WorkSession::WriteFile(System::String^ filename)
{
  return (OCIFSelect_ReturnStatus)((*((Handle_IFSelect_WorkSession*)nativeHandle))->WriteFile(OCConverter::StringToStandardCString(filename)));
}

 OCIFSelect_ReturnStatus OCIFSelect_WorkSession::WriteFile(System::String^ filename, OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  return (OCIFSelect_ReturnStatus)((*((Handle_IFSelect_WorkSession*)nativeHandle))->WriteFile(OCConverter::StringToStandardCString(filename), *((Handle_IFSelect_Selection*)sel->Handle)));
}

 Standard_Integer OCIFSelect_WorkSession::NbSources(OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->NbSources(*((Handle_IFSelect_Selection*)sel->Handle));
}

OCIFSelect_Selection^ OCIFSelect_WorkSession::Source(OCNaroWrappers::OCIFSelect_Selection^ sel, Standard_Integer num)
{
  Handle(IFSelect_Selection) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->Source(*((Handle_IFSelect_Selection*)sel->Handle), num);
  return gcnew OCIFSelect_Selection(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::IsReversedSelectExtract(OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->IsReversedSelectExtract(*((Handle_IFSelect_Selection*)sel->Handle)));
}

 System::Boolean OCIFSelect_WorkSession::ToggleSelectExtract(OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->ToggleSelectExtract(*((Handle_IFSelect_Selection*)sel->Handle)));
}

 System::Boolean OCIFSelect_WorkSession::SetInputSelection(OCNaroWrappers::OCIFSelect_Selection^ sel, OCNaroWrappers::OCIFSelect_Selection^ input)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetInputSelection(*((Handle_IFSelect_Selection*)sel->Handle), *((Handle_IFSelect_Selection*)input->Handle)));
}

 System::Boolean OCIFSelect_WorkSession::SetControl(OCNaroWrappers::OCIFSelect_Selection^ sel, OCNaroWrappers::OCIFSelect_Selection^ sc, System::Boolean formain)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetControl(*((Handle_IFSelect_Selection*)sel->Handle), *((Handle_IFSelect_Selection*)sc->Handle), OCConverter::BooleanToStandardBoolean(formain)));
}

 Standard_Integer OCIFSelect_WorkSession::CombineAdd(OCNaroWrappers::OCIFSelect_Selection^ selcomb, OCNaroWrappers::OCIFSelect_Selection^ seladd, Standard_Integer atnum)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->CombineAdd(*((Handle_IFSelect_Selection*)selcomb->Handle), *((Handle_IFSelect_Selection*)seladd->Handle), atnum);
}

 System::Boolean OCIFSelect_WorkSession::CombineRemove(OCNaroWrappers::OCIFSelect_Selection^ selcomb, OCNaroWrappers::OCIFSelect_Selection^ selrem)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->CombineRemove(*((Handle_IFSelect_Selection*)selcomb->Handle), *((Handle_IFSelect_Selection*)selrem->Handle)));
}

OCIFSelect_Selection^ OCIFSelect_WorkSession::NewSelectPointed(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, System::String^ name)
{
  Handle(IFSelect_Selection) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->NewSelectPointed(*((Handle_TColStd_HSequenceOfTransient*)list->Handle), OCConverter::StringToStandardCString(name));
  return gcnew OCIFSelect_Selection(&tmp);
}

 System::Boolean OCIFSelect_WorkSession::SetSelectPointed(OCNaroWrappers::OCIFSelect_Selection^ sel, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, Standard_Integer mode)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_WorkSession*)nativeHandle))->SetSelectPointed(*((Handle_IFSelect_Selection*)sel->Handle), *((Handle_TColStd_HSequenceOfTransient*)list->Handle), mode));
}

OCIFSelect_Selection^ OCIFSelect_WorkSession::GiveSelection(System::String^ selname)
{
  Handle(IFSelect_Selection) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->GiveSelection(OCConverter::StringToStandardCString(selname));
  return gcnew OCIFSelect_Selection(&tmp);
}

OCTColStd_HSequenceOfTransient^ OCIFSelect_WorkSession::GiveList(OCNaroWrappers::OCStandard_Transient^ obj)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->GiveList(*((Handle_Standard_Transient*)obj->Handle));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCTColStd_HSequenceOfTransient^ OCIFSelect_WorkSession::GiveList(System::String^ first, System::String^ second)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->GiveList(OCConverter::StringToStandardCString(first), OCConverter::StringToStandardCString(second));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCTColStd_HSequenceOfTransient^ OCIFSelect_WorkSession::GiveListFromList(System::String^ selname, OCNaroWrappers::OCStandard_Transient^ ent)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->GiveListFromList(OCConverter::StringToStandardCString(selname), *((Handle_Standard_Transient*)ent->Handle));
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

OCTColStd_HSequenceOfTransient^ OCIFSelect_WorkSession::GiveListCombined(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ l1, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ l2, Standard_Integer mode)
{
  Handle(TColStd_HSequenceOfTransient) tmp = (*((Handle_IFSelect_WorkSession*)nativeHandle))->GiveListCombined(*((Handle_TColStd_HSequenceOfTransient*)l1->Handle), *((Handle_TColStd_HSequenceOfTransient*)l2->Handle), mode);
  return gcnew OCTColStd_HSequenceOfTransient(&tmp);
}

 void OCIFSelect_WorkSession::QueryCheckList(OCNaroWrappers::OCInterface_CheckIterator^ chl)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->QueryCheckList(*((Interface_CheckIterator*)chl->Handle));
}

 Standard_Integer OCIFSelect_WorkSession::QueryCheckStatus(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->QueryCheckStatus(*((Handle_Standard_Transient*)ent->Handle));
}

 Standard_Integer OCIFSelect_WorkSession::QueryParent(OCNaroWrappers::OCStandard_Transient^ entdad, OCNaroWrappers::OCStandard_Transient^ entson)
{
  return (*((Handle_IFSelect_WorkSession*)nativeHandle))->QueryParent(*((Handle_Standard_Transient*)entdad->Handle), *((Handle_Standard_Transient*)entson->Handle));
}

 void OCIFSelect_WorkSession::SetParams(OCNaroWrappers::OCTColStd_SequenceOfTransient^ params, OCNaroWrappers::OCTColStd_SequenceOfInteger^ uselist)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->SetParams(*((TColStd_SequenceOfTransient*)params->Handle), *((TColStd_SequenceOfInteger*)uselist->Handle));
}

 void OCIFSelect_WorkSession::TraceStatics(Standard_Integer use, Standard_Integer mode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->TraceStatics(use, mode);
}

 void OCIFSelect_WorkSession::DumpShare()
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->DumpShare();
}

 void OCIFSelect_WorkSession::ListItems(System::String^ label)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->ListItems(OCConverter::StringToStandardCString(label));
}

 void OCIFSelect_WorkSession::ListFinalModifiers(System::Boolean formodel)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->ListFinalModifiers(OCConverter::BooleanToStandardBoolean(formodel));
}

 void OCIFSelect_WorkSession::DumpSelection(OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->DumpSelection(*((Handle_IFSelect_Selection*)sel->Handle));
}

 void OCIFSelect_WorkSession::DumpModel(Standard_Integer level, OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->DumpModel(level, *((Handle_Message_Messenger*)S->Handle));
}

 void OCIFSelect_WorkSession::TraceDumpModel(Standard_Integer mode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->TraceDumpModel(mode);
}

 void OCIFSelect_WorkSession::DumpEntity(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level, OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->DumpEntity(*((Handle_Standard_Transient*)ent->Handle), level, *((Handle_Message_Messenger*)S->Handle));
}

 void OCIFSelect_WorkSession::PrintEntityStatus(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCMessage_Messenger^ S)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->PrintEntityStatus(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Message_Messenger*)S->Handle));
}

 void OCIFSelect_WorkSession::TraceDumpEntity(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->TraceDumpEntity(*((Handle_Standard_Transient*)ent->Handle), level);
}

 void OCIFSelect_WorkSession::PrintCheckList(OCNaroWrappers::OCInterface_CheckIterator^ checklist, System::Boolean failsonly, OCIFSelect_PrintCount mode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->PrintCheckList(*((Interface_CheckIterator*)checklist->Handle), OCConverter::BooleanToStandardBoolean(failsonly), (IFSelect_PrintCount)mode);
}

 void OCIFSelect_WorkSession::PrintSignatureList(OCNaroWrappers::OCIFSelect_SignatureList^ signlist, OCIFSelect_PrintCount mode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->PrintSignatureList(*((Handle_IFSelect_SignatureList*)signlist->Handle), (IFSelect_PrintCount)mode);
}

 void OCIFSelect_WorkSession::EvaluateSelection(OCNaroWrappers::OCIFSelect_Selection^ sel)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->EvaluateSelection(*((Handle_IFSelect_Selection*)sel->Handle));
}

 void OCIFSelect_WorkSession::EvaluateDispatch(OCNaroWrappers::OCIFSelect_Dispatch^ disp, Standard_Integer mode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->EvaluateDispatch(*((Handle_IFSelect_Dispatch*)disp->Handle), mode);
}

 void OCIFSelect_WorkSession::EvaluateComplete(Standard_Integer mode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->EvaluateComplete(mode);
}

 void OCIFSelect_WorkSession::ListEntities(OCNaroWrappers::OCInterface_EntityIterator^ iter, Standard_Integer mode)
{
  (*((Handle_IFSelect_WorkSession*)nativeHandle))->ListEntities(*((Interface_EntityIterator*)iter->Handle), mode);
}


