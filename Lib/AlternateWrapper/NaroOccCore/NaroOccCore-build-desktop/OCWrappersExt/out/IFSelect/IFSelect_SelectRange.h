// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_SelectRange_OCWrappers_HeaderFile
#define _IFSelect_SelectRange_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_SelectRange.hxx>
#include "../Converter.h"

#include "IFSelect_SelectExtract.h"



namespace OCNaroWrappers
{

ref class OCIFSelect_IntParam;
ref class OCStandard_Transient;
ref class OCInterface_InterfaceModel;
ref class OCTCollection_AsciiString;


//! A SelectRange keeps or rejects a sub-set of the input set, <br>
//!           that is the Entities of which rank in the iteration list <br>
//!           is in a given range (for instance form 2nd to 6th, etc...) <br>
public ref class OCIFSelect_SelectRange : OCIFSelect_SelectExtract {

protected:
  // dummy constructor;
  OCIFSelect_SelectRange(OCDummy^) : OCIFSelect_SelectExtract((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_SelectRange(Handle(IFSelect_SelectRange)* nativeHandle);

// Methods PUBLIC

//! Creates a SelectRange. Default is Take all the input list <br>
OCIFSelect_SelectRange();

//! Sets a Range for numbers, with a lower and a upper limits <br>
//!           Error if rankto is lower then rankfrom <br>
 /*instead*/  void SetRange(OCNaroWrappers::OCIFSelect_IntParam^ rankfrom, OCNaroWrappers::OCIFSelect_IntParam^ rankto) ;

//! Sets a unique number (only one Entity will be sorted as True) <br>
 /*instead*/  void SetOne(OCNaroWrappers::OCIFSelect_IntParam^ rank) ;

//! Sets a Lower limit but no upper limit <br>
 /*instead*/  void SetFrom(OCNaroWrappers::OCIFSelect_IntParam^ rankfrom) ;

//! Sets an Upper limit but no lower limit (equivalent to lower 1) <br>
 /*instead*/  void SetUntil(OCNaroWrappers::OCIFSelect_IntParam^ rankto) ;

//! Returns True if a Lower limit is defined <br>
 /*instead*/  System::Boolean HasLower() ;

//! Returns Lower limit (if there is; else, value is senseless) <br>
 /*instead*/  OCIFSelect_IntParam^ Lower() ;

//! Returns Value of Lower Limit (0 if none is defined) <br>
 /*instead*/  Standard_Integer LowerValue() ;

//! Returns True if a Lower limit is defined <br>
 /*instead*/  System::Boolean HasUpper() ;

//! Returns Upper limit (if there is; else, value is senseless) <br>
 /*instead*/  OCIFSelect_IntParam^ Upper() ;

//! Returns Value of Upper Limit (0 if none is defined) <br>
 /*instead*/  Standard_Integer UpperValue() ;

//! Returns True for an Entity of which occurence number in the <br>
//!           iteration is inside the selected Range (considers <rank>) <br>
 /*instead*/  System::Boolean Sort(Standard_Integer rank, OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! Returns a text defining the criterium : following cases, <br>
//!           " From .. Until .." or "From .." or "Until .." or "Rank no .." <br>
 /*instead*/  OCTCollection_AsciiString^ ExtractLabel() ;

~OCIFSelect_SelectRange()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
