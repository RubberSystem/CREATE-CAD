// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_Activator_OCWrappers_HeaderFile
#define _IFSelect_Activator_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_Activator.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "IFSelect_ReturnStatus.h"


namespace OCNaroWrappers
{

ref class OCTCollection_AsciiString;
ref class OCTColStd_HSequenceOfAsciiString;
ref class OCIFSelect_SessionPilot;


//! Defines the general frame for working with a SessionPilot. <br>
//!           Each Activator treats a set of Commands. Commands are given as <br>
//!           alphanumeric strings. They can be of two main forms : <br>
//!           - classic, to list, evaluate, enrich the session (by itself) : <br>
//!             no specific remark, its complete execution must be described <br>
//!           - creation of a new item : instead of creatinf it plus adding <br>
//!             it to the session (which is a classic way), it is possible <br>
//!             to create it and make it recorded by the SessionPilot : <br>
//!             then, the Pilot will add it to the session; this way allows <br>
//!             the Pilot to manage itself named items <br>
//! <br>
//!           In order to make easier the use of Activator, this class <br>
//!           provides a simple way to Select an Actor for a Command : <br>
//!           each sub-class of SectionActor defines the command titles it <br>
//!           recognizes, plus attaches a Number, unique for this sub-class, <br>
//!           to each distinct command title. <br>
//! <br>
//!           Each time an action is required, the corresponding Number <br>
//!           can then be given to help the selection of the action to do. <br>
//! <br>
//!           The result of an Execution must indicate if it is worth to be <br>
//!           recorded or not : see method Do <br>
public ref class OCIFSelect_Activator : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCIFSelect_Activator(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_Activator(Handle(IFSelect_Activator)* nativeHandle);

// Methods PUBLIC

//! Records, in a Dictionary available for all the Activators, <br>
//!           the command title an Activator can process, attached with <br>
//!           its number, proper for this Activator <br>
//!           <mode> allows to distinguish various execution modes <br>
//!             0: default mode; 1 : for xset <br>
static /*instead*/  void Adding(OCNaroWrappers::OCIFSelect_Activator^ actor, Standard_Integer number, System::String^ command, Standard_Integer mode) ;

//! Allows a self-definition by an Activator of the Commands it <br>
//!           processes, call the class method Adding (mode 0) <br>
 /*instead*/  void Add(Standard_Integer number, System::String^ command) ;

//! Same as Add but specifies that this command is candidate for <br>
//!           xset (creation of items, xset : named items; mode 1) <br>
 /*instead*/  void AddSet(Standard_Integer number, System::String^ command) ;

//! Removes a Command, if it is recorded (else, does nothing) <br>
static /*instead*/  void Remove(System::String^ command) ;

//! Records, for a configuration named <conf>, that the command <br>
//!           <command> may be aliased by another command <alias> <br>
//! <br>
//!           To be used by call to Alias (no automatic redirection) <br>
//!           The configuration typically refers to a norm <br>
static /*instead*/  void SetAlias(System::String^ conf, System::String^ command, System::String^ aliasname) ;

//! Sets <conf> as current configuration for aliases <br>
static /*instead*/  void SetCurrentAlias(System::String^ conf) ;

//! Returns, in the current configuration, what alias has been <br>
//!           recorded for <command> <br>
//!           The returned string is empty if no alias is recorded <br>
static /*instead*/  OCTCollection_AsciiString^ Alias(System::String^ command) ;

//! Selects, for a Command given by its title, an actor with its <br>
//!           command number. Returns True if found, False else <br>
static /*instead*/  System::Boolean Select(System::String^ command, Standard_Integer& number, OCNaroWrappers::OCIFSelect_Activator^ actor) ;

//! Returns mode recorded for a command. -1 if not found <br>
static /*instead*/  Standard_Integer Mode(System::String^ command) ;

//! Returns, for a root of command title, the list of possible <br>
//!           commands. <br>
//!           <mode> : -1 (D) for all commands if <commands> is empty <br>
//!           -1 + command : about a Group , >= 0 see Adding <br>
//!           By default, it returns the whole list of known commands. <br>
static /*instead*/  OCTColStd_HSequenceOfAsciiString^ Commands(Standard_Integer mode, System::String^ command) ;

//! Sets the default values <br>
OCIFSelect_Activator();


 /*instead*/  System::String^ Group() ;


 /*instead*/  System::String^ File() ;

//! Group and SetGroup define a "Group of commands" which <br>
//!           correspond to an Activator. Default is "XSTEP" <br>
//!           Also a file may be attached <br>
 /*instead*/  void SetForGroup(System::String^ group, System::String^ file) ;

~OCIFSelect_Activator()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
