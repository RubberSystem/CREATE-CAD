// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_SelectPointed_OCWrappers_HeaderFile
#define _IFSelect_SelectPointed_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_SelectPointed.hxx>
#include "../Converter.h"

#include "IFSelect_SelectBase.h"

#include "../TColStd/TColStd_SequenceOfTransient.h"


namespace OCNaroWrappers
{

ref class OCStandard_Transient;
ref class OCTColStd_HSequenceOfTransient;
ref class OCInterface_CopyControl;
ref class OCIFSelect_Transformer;
ref class OCInterface_EntityIterator;
ref class OCInterface_Graph;
ref class OCTCollection_AsciiString;


//! This type of Selection is intended to describe a direct <br>
//!           selection without an explicit criterium, for instance the <br>
//!           result of picking viewed entities on a graphic screen <br>
//! <br>
//!           It can also be used to provide a list as internal alternate <br>
//!           input : this use implies to clear the list once queried <br>
public ref class OCIFSelect_SelectPointed : OCIFSelect_SelectBase {

protected:
  // dummy constructor;
  OCIFSelect_SelectPointed(OCDummy^) : OCIFSelect_SelectBase((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_SelectPointed(Handle(IFSelect_SelectPointed)* nativeHandle);

// Methods PUBLIC

//! Creates a SelectPointed <br>
OCIFSelect_SelectPointed();

//! Clears the list of selected items <br>
//!           Also says the list is unset <br>
//!           All Add* methods and SetList say the list is set <br>
 /*instead*/  void Clear() ;

//! Tells if the list has been set. Even if empty <br>
 /*instead*/  System::Boolean IsSet() ;

//! As SetList but with only one entity <br>
//!           If <ent> is Null, the list is said as being set but is empty <br>
 /*instead*/  void SetEntity(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Sets a given list to define the list of selected items <br>
//!           <list> can be empty or null : in this case, the list is said <br>
//!           as being set, but it is empty <br>
//! <br>
//!           To use it as an alternate input, one shot : <br>
//!           - SetList or SetEntity to define the input list <br>
//!           - RootResult to get it <br>
//!           - then Clear to drop it <br>
 /*instead*/  void SetList(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list) ;

//! Adds an item. Returns True if Done, False if <item> is already <br>
//!           in the selected list <br>
 /*instead*/  System::Boolean Add(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Removes an item. Returns True if Done, False if <item> was not <br>
//!           in the selected list <br>
 /*instead*/  System::Boolean Remove(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Toggles status of an item : adds it if not pointed or removes <br>
//!           it if already pointed. Returns the new status (Pointed or not) <br>
 /*instead*/  System::Boolean Toggle(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Adds all the items defined in a list. Returns True if at least <br>
//!           one item has been added, False else <br>
 /*instead*/  System::Boolean AddList(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list) ;

//! Removes all the items defined in a list. Returns True if at <br>
//!           least one item has been removed, False else <br>
 /*instead*/  System::Boolean RemoveList(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list) ;

//! Toggles status of all the items defined in a list : adds it if <br>
//!           not pointed or removes it if already pointed. <br>
 /*instead*/  System::Boolean ToggleList(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list) ;

//! Returns the rank of an item in the selected list, or 0. <br>
 /*instead*/  Standard_Integer Rank(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Returns the count of selected items <br>
 /*instead*/  Standard_Integer NbItems() ;

//! Returns an item given its rank, or a Null Handle <br>
 /*instead*/  OCStandard_Transient^ Item(Standard_Integer num) ;

//! Rebuilds the selected list. Any selected entity which has a <br>
//!           bound result is replaced by this result, else it is removed. <br>
 /*instead*/  void Update(OCNaroWrappers::OCInterface_CopyControl^ control) ;

//! Rebuilds the selected list, by querying a Transformer <br>
//!           (same principle as from a CopyControl) <br>
 /*instead*/  void Update(OCNaroWrappers::OCIFSelect_Transformer^ trf) ;

//! Returns the list of selected items. Only the selected entities <br>
//!           which are present in the graph are given (this result assures <br>
//!           uniqueness). <br>
 /*instead*/  OCInterface_EntityIterator^ RootResult(OCNaroWrappers::OCInterface_Graph^ G) ;

//! Returns a text which identifies the type of selection made. <br>
//!           It is "Pointed Entities" <br>
 /*instead*/  OCTCollection_AsciiString^ Label() ;

~OCIFSelect_SelectPointed()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
