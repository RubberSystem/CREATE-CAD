// File generated by CPPExt (MPV)
//
#ifndef _IFSelect_ShareOutResult_OCWrappers_HeaderFile
#define _IFSelect_ShareOutResult_OCWrappers_HeaderFile

// include native header
#include <IFSelect_ShareOutResult.hxx>
#include "../Converter.h"


#include "../TColStd/TColStd_SequenceOfInteger.h"
#include "../Interface/Interface_Graph.h"


namespace OCNaroWrappers
{

ref class OCIFSelect_ShareOut;
ref class OCIFSelect_Dispatch;
ref class OCInterface_InterfaceModel;
ref class OCInterface_Graph;
ref class OCIFSelect_PacketList;
ref class OCInterface_EntityIterator;
ref class OCTCollection_AsciiString;


//! This class gives results computed from a ShareOut : simulation <br>
//!           before transfer, helps to list entities ... <br>
//!           Transfer itself will later be performed, either by a <br>
//!           TransferCopy to simply divide up a file, or a TransferDispatch <br>
//!           which can be parametred with more details <br>
public ref class OCIFSelect_ShareOutResult  {

protected:
  IFSelect_ShareOutResult* nativeHandle;
  OCIFSelect_ShareOutResult(OCDummy^) {};

public:
  property IFSelect_ShareOutResult* Handle
  {
    IFSelect_ShareOutResult* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIFSelect_ShareOutResult(IFSelect_ShareOutResult* nativeHandle);

// Methods PUBLIC

//! Creates a ShareOutResult from a ShareOut, to work on a Model <br>
//!           (without any more precision; uses Active Protocol) <br>
OCIFSelect_ShareOutResult(OCNaroWrappers::OCIFSelect_ShareOut^ sho, OCNaroWrappers::OCInterface_InterfaceModel^ mod);

//! Creates a ShareOutResult from a ShareOut, to work on a Graph <br>
//!           already computed, which defines the Input Model and can <br>
//!           specialize some Entities <br>
OCIFSelect_ShareOutResult(OCNaroWrappers::OCIFSelect_ShareOut^ sho, OCNaroWrappers::OCInterface_Graph^ G);

//! Creates a ShareOutResult from a unique Dispatch, to work on <br>
//!           a Model. As if it was a ShareOut with only one Dispatch <br>
//!           (without any more precision; uses Active Protocol) <br>
//!           Allows to compute the effect of a single Dispatch <br>
OCIFSelect_ShareOutResult(OCNaroWrappers::OCIFSelect_Dispatch^ disp, OCNaroWrappers::OCInterface_InterfaceModel^ mod);

//! Creates a ShareOutResult from a unique Dispatch, to work on <br>
//!           a Graph. As if it was a ShareOut with only one Dispatch <br>
//!           Allows to compute the effect of a single Dispatch <br>
OCIFSelect_ShareOutResult(OCNaroWrappers::OCIFSelect_Dispatch^ disp, OCNaroWrappers::OCInterface_Graph^ G);

//! Returns the ShareOut used to create the ShareOutResult <br>
//!           if creation from a Dispatch, returns a Null Handle <br>
 /*instead*/  OCIFSelect_ShareOut^ ShareOut() ;

//! Returns the Graph used to create theShareOutResult <br>
 /*instead*/  OCInterface_Graph^ Graph() ;

//! Erases computed data, in order to command a new Evaluation <br>
 /*instead*/  void Reset() ;

//! Evaluates the result of a ShareOut : determines Entities to be <br>
//!           forgotten by the ShareOut, Entities to be transferred several <br>
//!           times (duplicated), prepares an iteration on the packets to be <br>
//!           produced <br>
//!           Called the first time anyone question is asked, or after a <br>
//!           call to Reset. Works by calling the method Prepare. <br>
 /*instead*/  void Evaluate() ;

//! Returns the list of recorded Packets, under two modes : <br>
//!           - <complete> = False, the strict definition of Packets, i.e. <br>
//!             for each one, the Root Entities, to be explicitely sent <br>
//!           - <complete> = True (Default), the completely evaluated list, <br>
//!             i.e. which really gives the destination of each entity : <br>
//!             this mode allows to evaluate duplications <br>
//!           Remark that to send packets, iteration remains preferable <br>
//!           (file names are managed) <br>
 /*instead*/  OCIFSelect_PacketList^ Packets(System::Boolean complete) ;

//! Returns the total count of produced non empty packets <br>
//!           (in out : calls Evaluate as necessary) <br>
 /*instead*/  Standard_Integer NbPackets() ;

//! Prepares the iteration on the packets <br>
//!           This method is called by Evaluate, but can be called anytime <br>
//!           The iteration consists in taking each Dispatch of the ShareOut <br>
//!           beginning by the first one, compute its packets, then iterate <br>
//!           on these packets. Once all these packets are iterated, the <br>
//!           iteration passes to the next Dispatch, or stops. <br>
//!           For a creation from a unique Dispatch, same but with only <br>
//!           this Dispatch. <br>
//!           Each packet can be listed, or really transferred (producing <br>
//!           a derived Model, from which a file can be generated) <br>
//! <br>
//!           Prepare sets the iteration to the first Dispatch, first Packet <br>
 /*instead*/  void Prepare() ;

//! Returns True if there is more packets in the current Dispatch, <br>
//!           else if there is more Dispatch in the ShareOut <br>
 /*instead*/  System::Boolean More() ;

//! Passes to the next Packet in the current Dispatch, or if there <br>
//!           is none, to the next Dispatch in the ShareOut <br>
 /*instead*/  void Next() ;

//! Passes to the next Dispatch, regardless about remaining packets <br>
 /*instead*/  void NextDispatch() ;

//! Returns the current Dispatch <br>
 /*instead*/  OCIFSelect_Dispatch^ Dispatch() ;

//! Returns the Rank of the current Dispatch in the ShareOut <br>
//!           Returns Zero if there is none (iteration finished) <br>
 /*instead*/  Standard_Integer DispatchRank() ;

//! Returns Number (rank) of current Packet in current Dispatch, <br>
//!           and total count of Packets in current Dispatch, as arguments <br>
 /*instead*/  void PacketsInDispatch(Standard_Integer& numpack, Standard_Integer& nbpacks) ;

//! Returns the list of Roots of the current Packet (never empty) <br>
//!           (i.e. the Entities to be themselves asked for transfer) <br>
//!           Error if there is none (iteration finished) <br>
 /*instead*/  OCInterface_EntityIterator^ PacketRoot() ;

//! Returns the complete content of the current Packet (i.e. <br>
//!           with shared entities, which will also be put in the file) <br>
 /*instead*/  OCInterface_EntityIterator^ PacketContent() ;

//! Returns the File Name which corresponds to current Packet <br>
//!           (computed by ShareOut) <br>
//!           If current Packet has no associated name (see ShareOut), <br>
//!           the returned value is Null <br>
 /*instead*/  OCTCollection_AsciiString^ FileName() ;

~OCIFSelect_ShareOutResult()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
