// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_SignatureList_OCWrappers_HeaderFile
#define _IFSelect_SignatureList_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_SignatureList.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "IFSelect_PrintCount.h"


namespace OCNaroWrappers
{

ref class OCTCollection_HAsciiString;
ref class OCDico_DictionaryOfInteger;
ref class OCDico_DictionaryOfTransient;
ref class OCStandard_Transient;
ref class OCTColStd_HSequenceOfHAsciiString;
ref class OCTColStd_HSequenceOfTransient;
ref class OCMessage_Messenger;
ref class OCInterface_InterfaceModel;


//! A SignatureList is given as result from a Counter (any kind) <br>
//!           It gives access to a list of signatures, with counts, and <br>
//!           optionally with list of corresponding entities <br>
//! <br>
//!           It can also be used only to give a signature, through SignOnly <br>
//!           Mode. This can be useful for a specific counter (used in a <br>
//!           Selection), while it remains better to use a Signature <br>
//!           whenever possible <br>
public ref class OCIFSelect_SignatureList : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCIFSelect_SignatureList(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_SignatureList(Handle(IFSelect_SignatureList)* nativeHandle);

// Methods PUBLIC

//! Creates a SignatureList. If <withlist> is True, entities will <br>
//!           be not only counted per signature, but also listed. <br>
OCIFSelect_SignatureList(System::Boolean withlist);

//! Changes the record-list status. The list is not cleared but <br>
//!           its use changes <br>
 /*instead*/  void SetList(System::Boolean withlist) ;

//! Returns modifiable the SignOnly Mode <br>
//!           If False (D), the counter normally counts <br>
//!           If True, the counting work is turned off, Add only fills the <br>
//!           LastValue, which can be used as signature, when a counter <br>
//!           works from data which are not available from a Signature <br>
 /*instead*/  System::Boolean ModeSignOnly() ;


virtual /*instead*/  void Clear() ;

//! Adds an entity with its signature, i.e. : <br>
//!           - counts an item more for <sign> <br>
//!           - if record-list status is set, records the entity <br>
//!           Accepts a null entity (the signature is then for the global <br>
//!           model). But if the string is empty, counts a Null item. <br>
//! <br>
//!           If SignOnly Mode is set, this work is replaced by just <br>
//!           setting LastValue <br>
 /*instead*/  void Add(OCNaroWrappers::OCStandard_Transient^ ent, System::String^ sign) ;

//! Returns the last value recorded by Add (only if SignMode set) <br>
//!           Cleared by Clear or Init <br>
 /*instead*/  System::String^ LastValue() ;

//! Aknowledges the list in once. Name identifies the Signature <br>
 /*instead*/  void Init(System::String^ name, OCNaroWrappers::OCDico_DictionaryOfInteger^ count, OCNaroWrappers::OCDico_DictionaryOfTransient^ list, Standard_Integer nbnuls) ;

//! Returns the list of signatures, as a sequence of strings <br>
//!           (but without their respective counts). It is ordered. <br>
//!           By default, for all the signatures. <br>
//!           If <root> is given non empty, for the signatures which <br>
//!           begin by <root> <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ List(System::String^ root) ;

//! Returns True if the list of Entities is aknowledged, else <br>
//!           the method Entities will always return a Null Handle <br>
 /*instead*/  System::Boolean HasEntities() ;

//! Returns the count of null entities <br>
 /*instead*/  Standard_Integer NbNulls() ;

//! Returns the number of times a signature was counted, <br>
//!           0 if it has not been recorded at all <br>
 /*instead*/  Standard_Integer NbTimes(System::String^ sign) ;

//! Returns the list of entities attached to a signature <br>
//!           It is empty if <sign> has not been recorded <br>
//!           It is a Null Handle if the list of entities is not known <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ Entities(System::String^ sign) ;

//! Defines a name for a SignatureList (used to print it) <br>
 /*instead*/  void SetName(System::String^ name) ;

//! Returns the recorded Name. <br>
//!           Remark : default is "..." (no SetName called) <br>
virtual /*instead*/  System::String^ Name() ;

//! Prints the counts of items (not the list) <br>
virtual /*instead*/  void PrintCount(OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Prints the lists of items, if they are present (else, prints <br>
//!           a message "no list available") <br>
//!           Uses <model> to determine for each entity to be listed, its <br>
//!           number, and its specific identifier (by PrintLabel) <br>
//!           <mod> gives a mode for printing : <br>
//!           - CountByItem : just count (as PrintCount) <br>
//!           - ShortByItem : minimum i.e. count plus 5 first entity numbers <br>
//!           - ShortByItem(D) complete list of entity numbers (0: "Global") <br>
//!           - EntitiesByItem : list of (entity number/PrintLabel from the model) <br>
//!           other modes are ignored <br>
virtual /*instead*/  void PrintList(OCNaroWrappers::OCMessage_Messenger^ S, OCNaroWrappers::OCInterface_InterfaceModel^ model, OCIFSelect_PrintCount mod) ;

//! Prints a summary <br>
//!           Item which has the greatest count of entities <br>
//!           For items which are numeric values : their count, maximum, <br>
//!           minimum values, cumul, average <br>
virtual /*instead*/  void PrintSum(OCNaroWrappers::OCMessage_Messenger^ S) ;

~OCIFSelect_SignatureList()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
