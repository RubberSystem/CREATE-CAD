// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_SelectControl_OCWrappers_HeaderFile
#define _IFSelect_SelectControl_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_SelectControl.hxx>
#include "../Converter.h"

#include "IFSelect_Selection.h"



namespace OCNaroWrappers
{

ref class OCIFSelect_Selection;
ref class OCIFSelect_SelectionIterator;


//! A SelectControl kind Selection works with two input Selections <br>
//!           in a dissymmetric way : the Main Input which gives an input <br>
//!           list of Entities, to be processed, and the Second Input which <br>
//!           gives another list, to be used to filter the main input. <br>
//! <br>
//!           e.g. : SelectDiff retains the items of the Main Input which <br>
//!             are not in the Control Input (which acts as Diff Input) <br>
//!           or a specific selection which retains Entities from the Main <br>
//!             Input if and only if they are concerned by an entity from <br>
//!             the Control Input (such as Views in IGES, etc...) <br>
//! <br>
//!           The way RootResult and Label are produced are at charge of <br>
//!           each sub-class <br>
public ref class OCIFSelect_SelectControl : OCIFSelect_Selection {

protected:
  // dummy constructor;
  OCIFSelect_SelectControl(OCDummy^) : OCIFSelect_Selection((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_SelectControl(Handle(IFSelect_SelectControl)* nativeHandle);

// Methods PUBLIC

//! Returns the Main Input Selection <br>
 /*instead*/  OCIFSelect_Selection^ MainInput() ;

//! Returns True if a Control Input is defined <br>
//!           Thus, Result can be computed differently if there is a <br>
//!           Control Input or if there is none <br>
 /*instead*/  System::Boolean HasSecondInput() ;

//! Returns the Control Input Selection, or a Null Handle <br>
 /*instead*/  OCIFSelect_Selection^ SecondInput() ;

//! Sets a Selection to be the Main Input <br>
 /*instead*/  void SetMainInput(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Sets a Selection to be the Control Input <br>
 /*instead*/  void SetSecondInput(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Puts in an Iterator the Selections from which "me" depends <br>
//!           That is to say, the list of Input Selections <br>
 /*instead*/  void FillIterator(OCNaroWrappers::OCIFSelect_SelectionIterator^ iter) ;

~OCIFSelect_SelectControl()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
