// File generated by CPPExt (CPP file)
//

#include "IFSelect_ContextModif.h"
#include "../Converter.h"
#include "../Interface/Interface_Protocol.h"
#include "../Interface/Interface_CopyControl.h"
#include "../Interface/Interface_Graph.h"
#include "../Interface/Interface_CopyTool.h"
#include "../Interface/Interface_EntityIterator.h"
#include "../Interface/Interface_InterfaceModel.h"
#include "../Standard/Standard_Transient.h"
#include "IFSelect_GeneralModifier.h"
#include "../Interface/Interface_Check.h"
#include "../Interface/Interface_CheckIterator.h"


using namespace OCNaroWrappers;

OCIFSelect_ContextModif::OCIFSelect_ContextModif(IFSelect_ContextModif* nativeHandle) 
{
  this->nativeHandle = nativeHandle;
}

OCIFSelect_ContextModif::OCIFSelect_ContextModif(OCNaroWrappers::OCInterface_Graph^ graph, OCNaroWrappers::OCInterface_CopyTool^ TC, System::String^ filename) 
{
  nativeHandle = new IFSelect_ContextModif(*((Interface_Graph*)graph->Handle), *((Interface_CopyTool*)TC->Handle), OCConverter::StringToStandardCString(filename));
}

OCIFSelect_ContextModif::OCIFSelect_ContextModif(OCNaroWrappers::OCInterface_Graph^ graph, System::String^ filename) 
{
  nativeHandle = new IFSelect_ContextModif(*((Interface_Graph*)graph->Handle), OCConverter::StringToStandardCString(filename));
}

 void OCIFSelect_ContextModif::Select(OCNaroWrappers::OCInterface_EntityIterator^ list)
{
  ((IFSelect_ContextModif*)nativeHandle)->Select(*((Interface_EntityIterator*)list->Handle));
}

OCInterface_Graph^ OCIFSelect_ContextModif::OriginalGraph()
{
  Interface_Graph* tmp = new Interface_Graph(123abc, 123abc, 0);
  *tmp = ((IFSelect_ContextModif*)nativeHandle)->OriginalGraph();
  return gcnew OCInterface_Graph(tmp);
}

OCInterface_InterfaceModel^ OCIFSelect_ContextModif::OriginalModel()
{
  Handle(Interface_InterfaceModel) tmp = ((IFSelect_ContextModif*)nativeHandle)->OriginalModel();
  return gcnew OCInterface_InterfaceModel(&tmp);
}

 void OCIFSelect_ContextModif::SetProtocol(OCNaroWrappers::OCInterface_Protocol^ proto)
{
  ((IFSelect_ContextModif*)nativeHandle)->SetProtocol(*((Handle_Interface_Protocol*)proto->Handle));
}

OCInterface_Protocol^ OCIFSelect_ContextModif::Protocol()
{
  Handle(Interface_Protocol) tmp = ((IFSelect_ContextModif*)nativeHandle)->Protocol();
  return gcnew OCInterface_Protocol(&tmp);
}

 System::Boolean OCIFSelect_ContextModif::HasFileName()
{
  return OCConverter::StandardBooleanToBoolean(((IFSelect_ContextModif*)nativeHandle)->HasFileName());
}

 System::String^ OCIFSelect_ContextModif::FileName()
{
  return OCConverter::StandardCStringToString(((IFSelect_ContextModif*)nativeHandle)->FileName());
}

OCInterface_CopyControl^ OCIFSelect_ContextModif::Control()
{
  Handle(Interface_CopyControl) tmp = ((IFSelect_ContextModif*)nativeHandle)->Control();
  return gcnew OCInterface_CopyControl(&tmp);
}

 System::Boolean OCIFSelect_ContextModif::IsForNone()
{
  return OCConverter::StandardBooleanToBoolean(((IFSelect_ContextModif*)nativeHandle)->IsForNone());
}

 System::Boolean OCIFSelect_ContextModif::IsForAll()
{
  return OCConverter::StandardBooleanToBoolean(((IFSelect_ContextModif*)nativeHandle)->IsForAll());
}

 System::Boolean OCIFSelect_ContextModif::IsTransferred(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean(((IFSelect_ContextModif*)nativeHandle)->IsTransferred(*((Handle_Standard_Transient*)ent->Handle)));
}

 System::Boolean OCIFSelect_ContextModif::IsSelected(OCNaroWrappers::OCStandard_Transient^ ent)
{
  return OCConverter::StandardBooleanToBoolean(((IFSelect_ContextModif*)nativeHandle)->IsSelected(*((Handle_Standard_Transient*)ent->Handle)));
}

 System::Boolean OCIFSelect_ContextModif::Search(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Transient^ res)
{
  return OCConverter::StandardBooleanToBoolean(((IFSelect_ContextModif*)nativeHandle)->Search(*((Handle_Standard_Transient*)ent->Handle), *((Handle_Standard_Transient*)res->Handle)));
}

OCInterface_EntityIterator^ OCIFSelect_ContextModif::SelectedOriginal()
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = ((IFSelect_ContextModif*)nativeHandle)->SelectedOriginal();
  return gcnew OCInterface_EntityIterator(tmp);
}

OCInterface_EntityIterator^ OCIFSelect_ContextModif::SelectedResult()
{
  Interface_EntityIterator* tmp = new Interface_EntityIterator();
  *tmp = ((IFSelect_ContextModif*)nativeHandle)->SelectedResult();
  return gcnew OCInterface_EntityIterator(tmp);
}

 Standard_Integer OCIFSelect_ContextModif::SelectedCount()
{
  return ((IFSelect_ContextModif*)nativeHandle)->SelectedCount();
}

 void OCIFSelect_ContextModif::Start()
{
  ((IFSelect_ContextModif*)nativeHandle)->Start();
}

 System::Boolean OCIFSelect_ContextModif::More()
{
  return OCConverter::StandardBooleanToBoolean(((IFSelect_ContextModif*)nativeHandle)->More());
}

 void OCIFSelect_ContextModif::Next()
{
  ((IFSelect_ContextModif*)nativeHandle)->Next();
}

OCStandard_Transient^ OCIFSelect_ContextModif::ValueOriginal()
{
  Handle(Standard_Transient) tmp = ((IFSelect_ContextModif*)nativeHandle)->ValueOriginal();
  return gcnew OCStandard_Transient(&tmp);
}

OCStandard_Transient^ OCIFSelect_ContextModif::ValueResult()
{
  Handle(Standard_Transient) tmp = ((IFSelect_ContextModif*)nativeHandle)->ValueResult();
  return gcnew OCStandard_Transient(&tmp);
}

 void OCIFSelect_ContextModif::TraceModifier(OCNaroWrappers::OCIFSelect_GeneralModifier^ modif)
{
  ((IFSelect_ContextModif*)nativeHandle)->TraceModifier(*((Handle_IFSelect_GeneralModifier*)modif->Handle));
}

 void OCIFSelect_ContextModif::Trace(System::String^ mess)
{
  ((IFSelect_ContextModif*)nativeHandle)->Trace(OCConverter::StringToStandardCString(mess));
}

 void OCIFSelect_ContextModif::AddCheck(OCNaroWrappers::OCInterface_Check^ check)
{
  ((IFSelect_ContextModif*)nativeHandle)->AddCheck(*((Handle_Interface_Check*)check->Handle));
}

 void OCIFSelect_ContextModif::AddWarning(OCNaroWrappers::OCStandard_Transient^ start, System::String^ mess, System::String^ orig)
{
  ((IFSelect_ContextModif*)nativeHandle)->AddWarning(*((Handle_Standard_Transient*)start->Handle), OCConverter::StringToStandardCString(mess), OCConverter::StringToStandardCString(orig));
}

 void OCIFSelect_ContextModif::AddFail(OCNaroWrappers::OCStandard_Transient^ start, System::String^ mess, System::String^ orig)
{
  ((IFSelect_ContextModif*)nativeHandle)->AddFail(*((Handle_Standard_Transient*)start->Handle), OCConverter::StringToStandardCString(mess), OCConverter::StringToStandardCString(orig));
}

OCInterface_Check^ OCIFSelect_ContextModif::CCheck(Standard_Integer num)
{
  Handle(Interface_Check) tmp = ((IFSelect_ContextModif*)nativeHandle)->CCheck(num);
  return gcnew OCInterface_Check(&tmp);
}

OCInterface_Check^ OCIFSelect_ContextModif::CCheck(OCNaroWrappers::OCStandard_Transient^ start)
{
  Handle(Interface_Check) tmp = ((IFSelect_ContextModif*)nativeHandle)->CCheck(*((Handle_Standard_Transient*)start->Handle));
  return gcnew OCInterface_Check(&tmp);
}

OCInterface_CheckIterator^ OCIFSelect_ContextModif::CheckList()
{
  Interface_CheckIterator* tmp = new Interface_CheckIterator();
  *tmp = ((IFSelect_ContextModif*)nativeHandle)->CheckList();
  return gcnew OCInterface_CheckIterator(tmp);
}


