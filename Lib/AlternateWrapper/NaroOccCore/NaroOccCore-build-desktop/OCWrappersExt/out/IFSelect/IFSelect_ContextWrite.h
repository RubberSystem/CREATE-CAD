// File generated by CPPExt (MPV)
//
#ifndef _IFSelect_ContextWrite_OCWrappers_HeaderFile
#define _IFSelect_ContextWrite_OCWrappers_HeaderFile

// include native header
#include <IFSelect_ContextWrite.hxx>
#include "../Converter.h"


#include "../TCollection/TCollection_AsciiString.h"
#include "../Interface/Interface_CheckIterator.h"


namespace OCNaroWrappers
{

ref class OCInterface_InterfaceModel;
ref class OCInterface_Protocol;
ref class OCIFSelect_AppliedModifiers;
ref class OCInterface_HGraph;
ref class OCIFSelect_GeneralModifier;
ref class OCInterface_Graph;
ref class OCStandard_Transient;
ref class OCInterface_Check;
ref class OCInterface_CheckIterator;


//! This class gathers various informations used by File Modifiers <br>
//!           apart from the writer object, which is specific of the norm <br>
//!           and of the physical format <br>
//! <br>
//!           These informations are controlled by an object AppliedModifiers <br>
//!           (if it is not defined, no modification is allowed on writing) <br>
//! <br>
//!           Furthermore, in return, ContextModif can record Checks, either <br>
//!           one for all, or one for each Entity. It supports trace too. <br>
public ref class OCIFSelect_ContextWrite  {

protected:
  IFSelect_ContextWrite* nativeHandle;
  OCIFSelect_ContextWrite(OCDummy^) {};

public:
  property IFSelect_ContextWrite* Handle
  {
    IFSelect_ContextWrite* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIFSelect_ContextWrite(IFSelect_ContextWrite* nativeHandle);

// Methods PUBLIC

//! Prepares a ContextWrite with these informations : <br>
//!           - the model which is to be written <br>
//!           - the protocol to be used <br>
//!           - the filename <br>
//!           - an object AppliedModifiers to work. It gives a list of <br>
//!             FileModifiers to be ran, and for each one it can give <br>
//!             a restricted list of entities (in the model), else all <br>
//!             the model is considered <br>
OCIFSelect_ContextWrite(OCNaroWrappers::OCInterface_InterfaceModel^ model, OCNaroWrappers::OCInterface_Protocol^ proto, OCNaroWrappers::OCIFSelect_AppliedModifiers^ applieds, System::String^ filename);

//! Same as above but with an already computed Graph <br>
OCIFSelect_ContextWrite(OCNaroWrappers::OCInterface_HGraph^ hgraph, OCNaroWrappers::OCInterface_Protocol^ proto, OCNaroWrappers::OCIFSelect_AppliedModifiers^ applieds, System::String^ filename);

//! Returns the Model <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Returns the Protocol; <br>
 /*instead*/  OCInterface_Protocol^ Protocol() ;

//! Returns the File Name <br>
 /*instead*/  System::String^ FileName() ;

//! Returns the object AppliedModifiers <br>
 /*instead*/  OCIFSelect_AppliedModifiers^ AppliedModifiers() ;

//! Returns the Graph, either given when created, else created <br>
//!           the first time it is queried <br>
 /*instead*/  OCInterface_Graph^ Graph() ;

//! Returns the count of recorded File Modifiers <br>
 /*instead*/  Standard_Integer NbModifiers() ;

//! Sets active the File Modifier n0 <numod> <br>
//!           Then, it prepares the list of entities to consider, if any <br>
//!           Returns False if <numod> out of range <br>
 /*instead*/  System::Boolean SetModifier(Standard_Integer numod) ;

//! Returns the currently active File Modifier. Cast to be done <br>
//!           Null if not properly set : must be test IsNull after casting <br>
 /*instead*/  OCIFSelect_GeneralModifier^ FileModifier() ;

//! Returns True if no modifier is currently set <br>
 /*instead*/  System::Boolean IsForNone() ;

//! Returns True if the current modifier is to be applied to <br>
//!           the whole model. Else, a restricted list of selected entities <br>
//!           is defined, it can be exploited by the File Modifier <br>
 /*instead*/  System::Boolean IsForAll() ;

//! Returns the total count of selected entities <br>
 /*instead*/  Standard_Integer NbEntities() ;

//! Starts an iteration on selected items. It takes into account <br>
//!           IsForAll/IsForNone, by really iterating on all selected items. <br>
 /*instead*/  void Start() ;

//! Returns True until the iteration has finished <br>
 /*instead*/  System::Boolean More() ;

//! Advances the iteration <br>
 /*instead*/  void Next() ;

//! Returns the current selected entity in the model <br>
 /*instead*/  OCStandard_Transient^ Value() ;

//! Adds a Check to the CheckList. If it is empty, nothing is done <br>
//!           If it concerns an Entity from the Model (by SetEntity) <br>
//!           to which another Check is attached, it is merged to it. <br>
//!           Else, it is added or merged as to GlobalCheck. <br>
 /*instead*/  void AddCheck(OCNaroWrappers::OCInterface_Check^ check) ;

//! Adds a Warning Message for an Entity from the Model <br>
//!           If <start> is not an Entity from the model (e.g. the <br>
//!           model itself) this message is added to Global Check. <br>
 /*instead*/  void AddWarning(OCNaroWrappers::OCStandard_Transient^ start, System::String^ mess, System::String^ orig) ;

//! Adds a Fail Message for an Entity from the Model <br>
//!           If <start> is not an Entity from the model (e.g. the <br>
//!           model itself) this message is added to Global Check. <br>
 /*instead*/  void AddFail(OCNaroWrappers::OCStandard_Transient^ start, System::String^ mess, System::String^ orig) ;

//! Returns a Check given an Entity number (in the Model) <br>
//!           by default a Global Check. Creates it the first time. <br>
//!           It can then be acknowledged on the spot, in condition that the <br>
//!           caller works by reference ("Interface_Check& check = ...") <br>
 /*instead*/  OCInterface_Check^ CCheck(Standard_Integer num) ;

//! Returns a Check attached to an Entity from the Model <br>
//!           It can then be acknowledged on the spot, in condition that the <br>
//!           caller works by reference ("Interface_Check& check = ...") <br>
 /*instead*/  OCInterface_Check^ CCheck(OCNaroWrappers::OCStandard_Transient^ start) ;

//! Returns the complete CheckList <br>
 /*instead*/  OCInterface_CheckIterator^ CheckList() ;

~OCIFSelect_ContextWrite()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
