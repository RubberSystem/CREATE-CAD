// File generated by CPPExt (MPV)
//
#ifndef _IFSelect_ContextModif_OCWrappers_HeaderFile
#define _IFSelect_ContextModif_OCWrappers_HeaderFile

// include native header
#include <IFSelect_ContextModif.hxx>
#include "../Converter.h"


#include "../Interface/Interface_Graph.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../Interface/Interface_CheckIterator.h"


namespace OCNaroWrappers
{

ref class OCInterface_Protocol;
ref class OCInterface_CopyControl;
ref class OCInterface_Graph;
ref class OCInterface_CopyTool;
ref class OCInterface_EntityIterator;
ref class OCInterface_InterfaceModel;
ref class OCStandard_Transient;
ref class OCIFSelect_GeneralModifier;
ref class OCInterface_Check;
ref class OCInterface_CheckIterator;


//! This class gathers various informations used by Model Modifiers <br>
//!           apart from the target model itself, and the CopyTool which <br>
//!           must be passed directly. <br>
//! <br>
//!           These informations report to original data : model, entities, <br>
//!           and the selection list if there is one : it allows to query <br>
//!           about such or such starting entity, or result entity, or <br>
//!           iterate on selection list ... <br>
//!           Also data useful for file output are available (because some <br>
//!           Modifiers concern models produced for file output). <br>
//! <br>
//!           Furthermore, in return, ContextModif can record Checks, either <br>
//!           one for all, or one for each Entity. It supports trace too. <br>
public ref class OCIFSelect_ContextModif  {

protected:
  IFSelect_ContextModif* nativeHandle;
  OCIFSelect_ContextModif(OCDummy^) {};

public:
  property IFSelect_ContextModif* Handle
  {
    IFSelect_ContextModif* get()
    {
      return nativeHandle;
    }
  }


// constructor from native
OCIFSelect_ContextModif(IFSelect_ContextModif* nativeHandle);

// Methods PUBLIC

//! Prepares a ContextModif with these informations : <br>
//!           - the graph established from original model (target passed <br>
//!             directly to Modifier) <br>
//!           - the CopyTool which detains the CopyControl, which maps <br>
//!             starting (in original) and result (in target) entities <br>
//!           - an optional file name (for file output) <br>
//! <br>
//!           Such a ContextModif is considered to be applied on all <br>
//!           transferred entities (no filter active) <br>
OCIFSelect_ContextModif(OCNaroWrappers::OCInterface_Graph^ graph, OCNaroWrappers::OCInterface_CopyTool^ TC, System::String^ filename);

//! Prepares a ContextModif with these informations : <br>
//!           - the graph established from original model (target passed <br>
//!             directly to Modifier) <br>
//!           - an optional file name (for file output) <br>
//!           Here, no CopyControl, hence all entities are considered equal <br>
//!           as starting and result <br>
//! <br>
//!           Such a ContextModif is considered to be applied on all <br>
//!           transferred entities (no filter active) <br>
OCIFSelect_ContextModif(OCNaroWrappers::OCInterface_Graph^ graph, System::String^ filename);

//! This method requires ContextModif to be applied with a filter. <br>
//!           If a ModelModifier is defined with a Selection criterium, <br>
//!           the result of this Selection is used as a filter : <br>
//!           - if none of its items has been transferred, the modification <br>
//!             does not apply at all <br>
//!           - else, the Modifier can query for what entities were selected <br>
//!             and what are their results <br>
//!           - if this method is not called before working, the Modifier <br>
//!             has to work on the whole Model <br>
 /*instead*/  void Select(OCNaroWrappers::OCInterface_EntityIterator^ list) ;

//! Returns the original Graph (compared to OriginalModel, it <br>
//!           gives more query capabilitites) <br>
 /*instead*/  OCInterface_Graph^ OriginalGraph() ;

//! Returns the original model <br>
 /*instead*/  OCInterface_InterfaceModel^ OriginalModel() ;

//! Allows to transmit a Protocol as part of a ContextModif <br>
 /*instead*/  void SetProtocol(OCNaroWrappers::OCInterface_Protocol^ proto) ;

//! Returns the Protocol (Null if not set) <br>
 /*instead*/  OCInterface_Protocol^ Protocol() ;

//! Returns True if a non empty file name has been defined <br>
 /*instead*/  System::Boolean HasFileName() ;

//! Returns File Name (can be empty) <br>
 /*instead*/  System::String^ FileName() ;

//! Returns the map for a direct use, if required <br>
 /*instead*/  OCInterface_CopyControl^ Control() ;

//! Returns True if Select has determined that a Modifier may not <br>
//!           be run (filter defined and empty) <br>
 /*instead*/  System::Boolean IsForNone() ;

//! Returns True if no filter is defined : a Modifier has to work <br>
//!           on all entities of the resulting (target) model <br>
 /*instead*/  System::Boolean IsForAll() ;

//! Returns True if a starting item has been transferred <br>
 /*instead*/  System::Boolean IsTransferred(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns True if a starting item has been transferred and selected <br>
 /*instead*/  System::Boolean IsSelected(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns True if a starting entity has been transferred, and <br>
//!           the result is in <res>. Returns False else <br>
//!           (direct call to the map) <br>
 /*instead*/  System::Boolean Search(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCStandard_Transient^ res) ;

//! Returns the list of original selected items. <br>
//!           See also the iteration <br>
 /*instead*/  OCInterface_EntityIterator^ SelectedOriginal() ;

//! Returns the list of resulting counterparts of selected items. <br>
//!           See also the iteration <br>
 /*instead*/  OCInterface_EntityIterator^ SelectedResult() ;

//! Returns the count of selected and transferred items <br>
 /*instead*/  Standard_Integer SelectedCount() ;

//! Starts an iteration on selected items. It takes into account <br>
//!           IsForAll/IsForNone, by really iterating on all selected items. <br>
 /*instead*/  void Start() ;

//! Returns True until the iteration has finished <br>
 /*instead*/  System::Boolean More() ;

//! Advances the iteration <br>
 /*instead*/  void Next() ;

//! Returns the current selected item in the original model <br>
 /*instead*/  OCStandard_Transient^ ValueOriginal() ;

//! Returns the result counterpart of current selected item <br>
//!           (in the target model) <br>
 /*instead*/  OCStandard_Transient^ ValueResult() ;

//! Traces the application of a Modifier. Works with default trace <br>
//!           File and Level. Fills the trace if default trace level is at <br>
//!           least 1. Traces the Modifier (its Label) and its Selection if <br>
//!           there is one (its Label). <br>
//!           To be called after Select (because status IsForAll is printed) <br>
//!           Worths to trace a global modification. See also Trace below <br>
 /*instead*/  void TraceModifier(OCNaroWrappers::OCIFSelect_GeneralModifier^ modif) ;

//! Traces the modification of the current entity (see above, <br>
//!           ValueOriginal and ValueResult) for default trace level >= 2. <br>
//!           To be called on each indivudual entity really modified <br>
//!           <mess> is an optionnal additional message <br>
 /*instead*/  void Trace(System::String^ mess) ;

//! Adds a Check to the CheckList. If it is empty, nothing is done <br>
//!           If it concerns an Entity from the Original Model (by SetEntity) <br>
//!           to which another Check is attached, it is merged to it. <br>
//!           Else, it is added or merged as to GlobalCheck. <br>
 /*instead*/  void AddCheck(OCNaroWrappers::OCInterface_Check^ check) ;

//! Adds a Warning Message for an Entity from the original Model <br>
//!           If <start> is not an Entity from the original model (e.g. the <br>
//!           model itself) this message is added to Global Check. <br>
 /*instead*/  void AddWarning(OCNaroWrappers::OCStandard_Transient^ start, System::String^ mess, System::String^ orig) ;

//! Adds a Fail Message for an Entity from the original Model <br>
//!           If <start> is not an Entity from the original model (e.g. the <br>
//!           model itself) this message is added to Global Check. <br>
 /*instead*/  void AddFail(OCNaroWrappers::OCStandard_Transient^ start, System::String^ mess, System::String^ orig) ;

//! Returns a Check given an Entity number (in the original Model) <br>
//!           by default a Global Check. Creates it the first time. <br>
//!           It can then be acknowledged on the spot, in condition that the <br>
//!           caller works by reference ("Interface_Check& check = ...") <br>
 /*instead*/  OCInterface_Check^ CCheck(Standard_Integer num) ;

//! Returns a Check attached to an Entity from the original Model <br>
//!           It can then be acknowledged on the spot, in condition that the <br>
//!           caller works by reference ("Interface_Check& check = ...") <br>
 /*instead*/  OCInterface_Check^ CCheck(OCNaroWrappers::OCStandard_Transient^ start) ;

//! Returns the complete CheckList <br>
 /*instead*/  OCInterface_CheckIterator^ CheckList() ;

~OCIFSelect_ContextModif()
{
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
