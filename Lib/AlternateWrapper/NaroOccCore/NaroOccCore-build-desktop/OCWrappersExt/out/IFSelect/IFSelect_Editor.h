// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_Editor_OCWrappers_HeaderFile
#define _IFSelect_Editor_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_Editor.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TColStd/TColStd_Array1OfTransient.h"
#include "../TColStd/TColStd_Array1OfAsciiString.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "IFSelect_EditValue.h"


namespace OCNaroWrappers
{

ref class OCDico_DictionaryOfInteger;
ref class OCInterface_TypedValue;
ref class OCMessage_Messenger;
ref class OCTCollection_AsciiString;
ref class OCIFSelect_EditForm;
ref class OCTCollection_HAsciiString;
ref class OCIFSelect_ListEditor;
ref class OCTColStd_HSequenceOfHAsciiString;
ref class OCStandard_Transient;
ref class OCInterface_InterfaceModel;


//! An Editor defines a set of values and a way to edit them, on <br>
//!           an entity or on the model (e.g. on its header) <br>
//! <br>
//!           Each Value is controlled by a TypedValue, with a number (it is <br>
//!           an Integer) and a name under two forms (complete and short) <br>
//!           and an edit mode <br>
public ref class OCIFSelect_Editor : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCIFSelect_Editor(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_Editor(Handle(IFSelect_Editor)* nativeHandle);

// Methods PUBLIC

//! Prepares the list of Typed Values (gives its count) <br>
//!           This count can be tuned later, to a LOWER value, this allows <br>
//!           to initialize with a "maximum reservation" then cut the extra <br>
OCIFSelect_Editor(Standard_Integer nbval);

//! Sets a Typed Value for a given ident and short name, with an <br>
//!           Edit Mode <br>
 /*instead*/  void SetValue(Standard_Integer num, OCNaroWrappers::OCInterface_TypedValue^ typval, System::String^ shortname, OCIFSelect_EditValue accessmode) ;

//! Sets a parameter to be a List <br>
//!           max < 0 : not for a list (set when starting) <br>
//!           max = 0 : list with no length limit (default for SetList) <br>
//!           max > 0 : list limited to <max> items <br>
 /*instead*/  void SetList(Standard_Integer num, Standard_Integer max) ;

//! Returns the count of Typed Values <br>
 /*instead*/  Standard_Integer NbValues() ;

//! Returns a Typed Value from its ident <br>
 /*instead*/  OCInterface_TypedValue^ TypedValue(Standard_Integer num) ;

//! Tells if a parameter is a list <br>
 /*instead*/  System::Boolean IsList(Standard_Integer num) ;

//! Returns max length allowed for a list <br>
//!           = 0 means : list with no limit <br>
//!           < 0 means : not a list <br>
 /*instead*/  Standard_Integer MaxList(Standard_Integer num) ;

//! Returns the name of a Value (complete or short) from its ident <br>
//!           Short Name can be empty <br>
 /*instead*/  System::String^ Name(Standard_Integer num, System::Boolean isshort) ;

//! Returns the edit mode of a Value <br>
 /*instead*/  OCIFSelect_EditValue EditMode(Standard_Integer num) ;

//! Returns the number (ident) of a Value, from its name, short or <br>
//!           complete. If not found, returns 0 <br>
 /*instead*/  Standard_Integer NameNumber(System::String^ name) ;


 /*instead*/  void PrintNames(OCNaroWrappers::OCMessage_Messenger^ S) ;


 /*instead*/  void PrintDefs(OCNaroWrappers::OCMessage_Messenger^ S, System::Boolean labels) ;

//! Returns the MaxLength of, according to what : <br>
//!           <what> = -1 : length of short names <br>
//!           <what> =  0 : length of complete names <br>
//!           <what> =  1 : length of values labels <br>
 /*instead*/  Standard_Integer MaxNameLength(Standard_Integer what) ;

//! Builds and Returns an EditForm, empty (no data yet) <br>
//!           Can be redefined to return a specific type of EditForm <br>
virtual /*instead*/  OCIFSelect_EditForm^ Form(System::Boolean readonly, System::Boolean undoable) ;

//! Returns a ListEditor for a parameter which is a List <br>
//!           Default returns a basic ListEditor for a List, a Null Handle <br>
//!           if <num> is not for a List. Can be redefined <br>
virtual /*instead*/  OCIFSelect_ListEditor^ ListEditor(Standard_Integer num) ;

//! Returns the value of an EditForm as a List, for a given item <br>
//!           If not a list, a Null Handle should be returned <br>
//!           Default returns a Null Handle, because many Editors have <br>
//!           no list to edit. To be redefined as required <br>
virtual /*instead*/  OCTColStd_HSequenceOfHAsciiString^ ListValue(OCNaroWrappers::OCIFSelect_EditForm^ form, Standard_Integer num) ;

//! Updates the EditForm when a parameter is modified <br>
//!           I.E.  default does nothing, can be redefined, as follows : <br>
//!           Returns True when done (even if does nothing), False in case <br>
//!           of refuse (for instance, if the new value is not suitable) <br>
//!           <num> is the rank of the parameter for the EDITOR itself <br>
//!           <enforce> True means that protected parameters can be touched <br>
//! <br>
//!           If a parameter commands the value of other ones, when it is <br>
//!           modified, it is necessary to touch them by Touch from EditForm <br>
virtual /*instead*/  System::Boolean Update(OCNaroWrappers::OCIFSelect_EditForm^ form, Standard_Integer num, OCNaroWrappers::OCTCollection_HAsciiString^ newval, System::Boolean enforce) ;

//! Acts as Update, but when the value is a list <br>
virtual /*instead*/  System::Boolean UpdateList(OCNaroWrappers::OCIFSelect_EditForm^ form, Standard_Integer num, OCNaroWrappers::OCTColStd_HSequenceOfHAsciiString^ newlist, System::Boolean enforce) ;

~OCIFSelect_Editor()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
