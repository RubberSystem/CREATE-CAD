// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_EditForm_OCWrappers_HeaderFile
#define _IFSelect_EditForm_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_EditForm.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "../TColStd/TColStd_Array1OfInteger.h"
#include "../TColStd/TColStd_Array1OfTransient.h"


namespace OCNaroWrappers
{

ref class OCIFSelect_Editor;
ref class OCStandard_Transient;
ref class OCInterface_InterfaceModel;
ref class OCTColStd_SequenceOfInteger;
ref class OCIFSelect_ListEditor;
ref class OCTCollection_HAsciiString;
ref class OCTColStd_HSequenceOfHAsciiString;
ref class OCMessage_Messenger;


//! An EditForm is the way to apply an Editor on an Entity or on <br>
//!           the Model <br>
//!           It gives read-only or read-write access, with or without undo <br>
//! <br>
//!           It can be complete (all the values of the Editor are present) <br>
//!           or partial (a sub-list of these value are present) <br>
//!           Anyway, all references to Number (argument <num>) refer to <br>
//!           Number of Value for the Editor <br>
//!           While references to Rank are for rank in the EditForm, which <br>
//!           may differ if it is not Complete <br>
//!           Two methods give the correspondance between this Number and <br>
//!           the Rank in the EditForm : RankFromNumber and NumberFromRank <br>
//! <br>
public ref class OCIFSelect_EditForm : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCIFSelect_EditForm(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_EditForm(Handle(IFSelect_EditForm)* nativeHandle);

// Methods PUBLIC

//! Creates a complete EditForm from an Editor <br>
//!           A specific Label can be given <br>
OCIFSelect_EditForm(OCNaroWrappers::OCIFSelect_Editor^ editor, System::Boolean readonly, System::Boolean undoable, System::String^ label);

//! Creates an extracted EditForm from an Editor, limited to <br>
//!           the values identified in <nums> <br>
//!           A specific Label can be given <br>
OCIFSelect_EditForm(OCNaroWrappers::OCIFSelect_Editor^ editor, OCNaroWrappers::OCTColStd_SequenceOfInteger^ nums, System::Boolean readonly, System::Boolean undoable, System::String^ label);

//! Returns and may change the keep status on modif <br>
//!           It starts as False <br>
//!           If it is True, Apply does not clear modification status <br>
//!           and the EditForm can be loaded again, modified value remain <br>
//!           and may be applied again <br>
//!           Remark that ApplyData does not clear the modification status, <br>
//!           a call to ClearEdit does <br>
 /*instead*/  System::Boolean EditKeepStatus() ;


 /*instead*/  System::String^ Label() ;

//! Tells if the EditForm is loaded now <br>
 /*instead*/  System::Boolean IsLoaded() ;


 /*instead*/  void ClearData() ;


 /*instead*/  void SetData(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_InterfaceModel^ model) ;


 /*instead*/  void SetEntity(OCNaroWrappers::OCStandard_Transient^ ent) ;


 /*instead*/  void SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model) ;


 /*instead*/  OCStandard_Transient^ Entity() ;


 /*instead*/  OCInterface_InterfaceModel^ Model() ;


 /*instead*/  OCIFSelect_Editor^ Editor() ;

//! Tells if an EditForm is complete or is an extract from Editor <br>
 /*instead*/  System::Boolean IsComplete() ;

//! Returns the count of values <br>
//!           <editable> True : count of editable values, i.e. <br>
//!             For a complete EditForm, it is given by the Editor <br>
//!             Else, it is the length of the extraction map <br>
//!           <editable> False : all the values from the Editor <br>
 /*instead*/  Standard_Integer NbValues(System::Boolean editable) ;

//! Returns the Value Number in the Editor from a given Rank in <br>
//!           the EditForm <br>
//!           For a complete EditForm, both are equal <br>
//!           Else, it is given by the extraction map <br>
//!           Returns 0 if <rank> exceeds the count of editable values, <br>
 /*instead*/  Standard_Integer NumberFromRank(Standard_Integer rank) ;

//! Returns the Rank in the EditForm from a given Number of Value <br>
//!           for the Editor <br>
//!           For a complete EditForm, both are equal <br>
//!           Else, it is given by the extraction map <br>
//!           Returns 0 if <number> is not forecast to be edited, or is <br>
//!             out of range <br>
 /*instead*/  Standard_Integer RankFromNumber(Standard_Integer number) ;

//! Returns the Value Number in the Editor for a given Name <br>
//!           i.e. the true ValueNumber which can be used in various methods <br>
//!           of EditForm <br>
//!           If it is not complete, for a recorded (in the Editor) but <br>
//!           non-loaded name, returns negative value (- number) <br>
 /*instead*/  Standard_Integer NameNumber(System::String^ name) ;

//! Returns the Rank of Value in the EditForm for a given Name <br>
//!           i.e. if it is not complete, for a recorded (in the Editor) but <br>
//!           non-loaded name, returns 0 <br>
 /*instead*/  Standard_Integer NameRank(System::String^ name) ;

//! For a read-write undoable EditForm, loads original values <br>
//!           from defaults stored in the Editor <br>
 /*instead*/  void LoadDefault() ;

//! Loads modifications to data <br>
//!           Default uses Editor. Can be redefined <br>
//!           Remark that <ent> and/or <model> may be null, according to the <br>
//!           kind of Editor. Shortcuts are available for these cases, but <br>
//!           they finally call LoadData (hence, just ignore non-used args) <br>
virtual /*instead*/  System::Boolean LoadData(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! Shortcut for LoadData when <model> is not used <br>
 /*instead*/  System::Boolean LoadEntity(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Shortcut for LoadData when only the model is concerned <br>
 /*instead*/  System::Boolean LoadModel(OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! Shortcut when both <ent> and <model> are not used <br>
//!           (when the Editor works on fully static or global data) <br>
 /*instead*/  System::Boolean LoadData() ;

//! Returns a ListEditor to edit the parameter <num> of the <br>
//!           EditForm, if it is a List <br>
//!           The Editor created it (by ListEditor) then loads it (by <br>
//!             ListValue) <br>
//!           For a single parameter, returns a Null Handle ... <br>
 /*instead*/  OCIFSelect_ListEditor^ ListEditor(Standard_Integer num) ;

//! Loads an original value (single). Called by the Editor only <br>
 /*instead*/  void LoadValue(Standard_Integer num, OCNaroWrappers::OCTCollection_HAsciiString^ val) ;

//! Loads an original value as a list. Called by the Editor only <br>
 /*instead*/  void LoadList(Standard_Integer num, OCNaroWrappers::OCTColStd_HSequenceOfHAsciiString^ list) ;

//! From an edited value, returns its ... value (original one) <br>
//!           Null means that this value is not defined <br>
//!           <num> is for the EditForm, not the Editor <br>
//!           It is for a single parameter. For a list, gives a Null Handle <br>
 /*instead*/  OCTCollection_HAsciiString^ OriginalValue(Standard_Integer num) ;

//! Returns an original value, as a list <br>
//!           <num> is for the EditForm, not the Editor <br>
//!           For a single parameter, gives a Null Handle <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ OriginalList(Standard_Integer num) ;

//! Returns the Edited (i.e. Modified) Value (string for single) <br>
//!           <num> reports to the EditForm <br>
//!           If IsModified is False, returns OriginalValue <br>
//!           Null with IsModified True : means that this value is not <br>
//!             defined or has been removed <br>
//!           It is for a single parameter. For a list, gives a Null Handle <br>
 /*instead*/  OCTCollection_HAsciiString^ EditedValue(Standard_Integer num) ;

//! Returns the Edited Value as a list <br>
//!           If IsModified is False, returns OriginalValue <br>
//!           Null with IsModified True : means that this value is not <br>
//!             defined or has been removed <br>
//!           For a single parameter, gives a Null Handle <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ EditedList(Standard_Integer num) ;

//! Tells if a Value (of the EditForm) is modified (directly or <br>
//!           through touching by Update) <br>
 /*instead*/  System::Boolean IsModified(Standard_Integer num) ;

//! Tells if a Value (of the EditForm) has been touched, i.e. <br>
//!           not modified directly but by the modification of another one <br>
//!           (by method Update from the Editor) <br>
 /*instead*/  System::Boolean IsTouched(Standard_Integer num) ;

//! Gives a new value for the item <num> of the EditForm, if <br>
//!           it is a single parameter (for a list, just returns False) <br>
//!           Null means to Remove it <br>
//!           <enforce> True to overpass Protected or Computed Access Mode <br>
//!           Calls the method Update from the Editor, which can touch other <br>
//!           parameters (see NbTouched) <br>
//!           Returns True if well recorded, False if this value is not <br>
//!           allowed <br>
//!  Warning : Does not apply immediately : will be applied by the method <br>
//!           Apply <br>
 /*instead*/  System::Boolean Modify(Standard_Integer num, OCNaroWrappers::OCTCollection_HAsciiString^ newval, System::Boolean enforce) ;

//! Changes the value of an item of the EditForm, if it is a List <br>
//!           (else, just returns False) <br>
//!           The ListEditor contains the edited values of the list <br>
//!           If no edition was recorded, just returns False <br>
//!           Calls the method Update from the Editor, which can touch other <br>
//!           parameters (see NbTouched) <br>
//!           Returns True if well recorded, False if this value is not <br>
//!           allowed <br>
//!  Warning : Does not apply immediately : will be applied by the method <br>
//!           Apply <br>
 /*instead*/  System::Boolean ModifyList(Standard_Integer num, OCNaroWrappers::OCIFSelect_ListEditor^ edited, System::Boolean enforce) ;

//! As ModifyList but the new value is given as such <br>
//!           Creates a ListEditor, Loads it, then calls ModifyList <br>
 /*instead*/  System::Boolean ModifyListValue(Standard_Integer num, OCNaroWrappers::OCTColStd_HSequenceOfHAsciiString^ list, System::Boolean enforce) ;

//! Gives a new value computed by the Editor, if another parameter <br>
//!           commands the value of <num> <br>
//!           It is generally the case for a Computed Parameter for instance <br>
//!           Increments the counter of touched parameters <br>
//!  Warning : it gives no protection for ReadOnly etc... while it is the <br>
//!           internal way of touching parameters <br>
//!           Does not work (returns False) if <num> is for a list <br>
 /*instead*/  System::Boolean Touch(Standard_Integer num, OCNaroWrappers::OCTCollection_HAsciiString^ newval) ;

//! Acts as Touch but for a list <br>
//!           Does not work (returns False) if <num> is for a single param <br>
 /*instead*/  System::Boolean TouchList(Standard_Integer num, OCNaroWrappers::OCTColStd_HSequenceOfHAsciiString^ newlist) ;

//! Returns the count of parameters touched by the last Modify <br>
//!           (apart from the modified parameter itself) <br>
//!           Normally it is zero <br>
 /*instead*/  Standard_Integer NbTouched() ;

//! Clears modification status : by default all, or one by its <br>
//!           numbers (in the Editor) <br>
 /*instead*/  void ClearEdit(Standard_Integer num) ;

//! Prints Definitions, relative to the Editor <br>
 /*instead*/  void PrintDefs(OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Prints Values, according to what and alsolist <br>
//!           <names> True : prints Long Names; False : prints Short Names <br>
//!           <what> < 0 : prints Original Values (+ flag Modified) <br>
//!           <what> > 0 : prints Final Values (+flag Modified) <br>
//!           <what> = 0 : prints Modified Values (Original + Edited) <br>
//!           <alsolist> False (D) : lists are printed only as their count <br>
//!           <alsolist> True : lists are printed for all their items <br>
 /*instead*/  void PrintValues(OCNaroWrappers::OCMessage_Messenger^ S, Standard_Integer what, System::Boolean names, System::Boolean alsolist) ;

//! Applies modifications to own data <br>
//!           Calls ApplyData then Clears Status according EditKeepStatus <br>
 /*instead*/  System::Boolean Apply() ;

//! Tells if this EditForm can work with its Editor and its actual <br>
//!           Data (Entity and Model) <br>
//!           Default uses Editor. Can be redefined <br>
virtual /*instead*/  System::Boolean Recognize() ;

//! Applies modifications to data <br>
//!           Default uses Editor. Can be redefined <br>
virtual /*instead*/  System::Boolean ApplyData(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! For an undoable EditForm, Applies ... origibal values ! <br>
//!           and clears modified ones <br>
//!           Can be run only once <br>
 /*instead*/  System::Boolean Undo() ;

~OCIFSelect_EditForm()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
