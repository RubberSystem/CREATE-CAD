// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_ListEditor_OCWrappers_HeaderFile
#define _IFSelect_ListEditor_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_ListEditor.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"



namespace OCNaroWrappers
{

ref class OCInterface_TypedValue;
ref class OCTColStd_HSequenceOfHAsciiString;
ref class OCTColStd_HSequenceOfInteger;
ref class OCInterface_InterfaceModel;
ref class OCTCollection_HAsciiString;


//! A ListEditor is an auxiliary operator for Editor/EditForm <br>
//!           I.E. it works on parameter values expressed as strings <br>
//! <br>
//!           For a parameter which is a list, it may not be edited in once <br>
//!           by just setting a new value (as a string) <br>
//! <br>
//!           Firstly, a list can be long (and tedious to be accessed flat) <br>
//!           then requires a better way of accessing <br>
//! <br>
//!           Moreover, not only its VALUES may be changed (SetValue), but <br>
//!           also its LENGTH : items may be added or removed ... <br>
//! <br>
//!           Hence, the way of editing a parameter as a list is : <br>
//!           - edit it separately, with the help of a ListEditor <br>
//!           - it remains possible to prepare a new list of values apart <br>
//!           - then give the new list in once to the EditForm <br>
//! <br>
//!           An EditList is produced by the Editor, with a basic definition <br>
//!           This definition (brought by this class) can be redefined <br>
//!           Hence the Editor may produce a specific ListEditor as needed <br>
public ref class OCIFSelect_ListEditor : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCIFSelect_ListEditor(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_ListEditor(Handle(IFSelect_ListEditor)* nativeHandle);

// Methods PUBLIC

//! Creates a ListEditor with absolutely no constraint <br>
OCIFSelect_ListEditor();

//! Creates a ListEditor, for which items of the list to edit are <br>
//!           defined by <def>, and <max> describes max length : <br>
//!           0 (D) means no limit <br>
//!           value > 0 means : no more the <max> items are allowed <br>
OCIFSelect_ListEditor(OCNaroWrappers::OCInterface_TypedValue^ def, Standard_Integer max);

//! Loads a Model. It is used to check items of type Entity(Ident) <br>
 /*instead*/  void LoadModel(OCNaroWrappers::OCInterface_InterfaceModel^ model) ;

//! Loads the original values for the list <br>
//!           Remark : If its length is mor then MaxLength, editions remain <br>
//!           allowed, except Add <br>
 /*instead*/  void LoadValues(OCNaroWrappers::OCTColStd_HSequenceOfHAsciiString^ vals) ;

//! Declares this ListEditor to have been touched (whatever action) <br>
 /*instead*/  void SetTouched() ;

//! Clears all editions already recorded <br>
 /*instead*/  void ClearEdit() ;

//! Loads a new list to replace the older one, in once ! <br>
//!           By default (can be redefined) checks the length of the list <br>
//!           and the value of each item according to the def <br>
//!           Items are all recorded as Modified <br>
//! <br>
//!           If no def has been given at creation time, no check is done <br>
//!           Returns True when done, False if checks have failed ... a <br>
//!           specialisation may also lock it by returning always False ... <br>
virtual /*instead*/  System::Boolean LoadEdited(OCNaroWrappers::OCTColStd_HSequenceOfHAsciiString^ list) ;

//! Sets a new value for the item <num> (in edited list) <br>
//!           <val> may be a Null Handle, then the value will be cleared but <br>
//!           not removed <br>
//!           Returns True when done. False if <num> is out of range or if <br>
//!           <val> does not satisfy the definition <br>
virtual /*instead*/  System::Boolean SetValue(Standard_Integer num, OCNaroWrappers::OCTCollection_HAsciiString^ val) ;

//! Adds a new item. By default appends (at the end of the list) <br>
//!           Can insert before a given rank <num>, if positive <br>
//!           Returns True when done. False if MaxLength may be overpassed <br>
//!           or if <val> does not satisfy the definition <br>
virtual /*instead*/  System::Boolean AddValue(OCNaroWrappers::OCTCollection_HAsciiString^ val, Standard_Integer atnum) ;

//! Removes items from the list <br>
//!           By default removes one item. Else, count given by <howmany> <br>
//!           Remove from rank <num> included. By default, from the end <br>
//!           Returns True when done, False (and does not work) if case of <br>
//!           out of range of if <howmany> is greater than current length <br>
virtual /*instead*/  System::Boolean Remove(Standard_Integer num, Standard_Integer howmany) ;

//! Returns the value from which the edition started <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ OriginalValues() ;

//! Returns the result of the edition <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ EditedValues() ;

//! Returns count of values, edited (D) or original <br>
 /*instead*/  Standard_Integer NbValues(System::Boolean edited) ;

//! Returns a value given its rank. Edited (D) or Original <br>
//!           A Null String means the value is cleared but not removed <br>
 /*instead*/  OCTCollection_HAsciiString^ Value(Standard_Integer num, System::Boolean edited) ;

//! Tells if a value (in edited list) has been changed, i.e. <br>
//!           either modified-value, or added <br>
 /*instead*/  System::Boolean IsChanged(Standard_Integer num) ;

//! Tells if a value (in edited list) has been modified-value <br>
//!           (not added) <br>
 /*instead*/  System::Boolean IsModified(Standard_Integer num) ;

//! Tells if a value (in edited list) has been added (new one) <br>
 /*instead*/  System::Boolean IsAdded(Standard_Integer num) ;

//! Tells if at least one edition (SetValue-AddValue-Remove) has <br>
//!           been recorded <br>
 /*instead*/  System::Boolean IsTouched() ;

~OCIFSelect_ListEditor()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
