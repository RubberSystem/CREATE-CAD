// File generated by CPPExt (CPP file)
//

#include "IFSelect_DispPerCount.h"
#include "../Converter.h"
#include "IFSelect_IntParam.h"
#include "../TCollection/TCollection_AsciiString.h"
#include "../Interface/Interface_Graph.h"


using namespace OCNaroWrappers;

OCIFSelect_DispPerCount::OCIFSelect_DispPerCount(Handle(IFSelect_DispPerCount)* nativeHandle) : OCIFSelect_Dispatch((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_IFSelect_DispPerCount(*nativeHandle);
}

OCIFSelect_DispPerCount::OCIFSelect_DispPerCount() : OCIFSelect_Dispatch((OCDummy^)nullptr)

{
  nativeHandle = new Handle_IFSelect_DispPerCount(new IFSelect_DispPerCount());
}

OCIFSelect_IntParam^ OCIFSelect_DispPerCount::Count()
{
  Handle(IFSelect_IntParam) tmp = (*((Handle_IFSelect_DispPerCount*)nativeHandle))->Count();
  return gcnew OCIFSelect_IntParam(&tmp);
}

 void OCIFSelect_DispPerCount::SetCount(OCNaroWrappers::OCIFSelect_IntParam^ count)
{
  (*((Handle_IFSelect_DispPerCount*)nativeHandle))->SetCount(*((Handle_IFSelect_IntParam*)count->Handle));
}

 Standard_Integer OCIFSelect_DispPerCount::CountValue()
{
  return (*((Handle_IFSelect_DispPerCount*)nativeHandle))->CountValue();
}

OCTCollection_AsciiString^ OCIFSelect_DispPerCount::Label()
{
  TCollection_AsciiString* tmp = new TCollection_AsciiString();
  *tmp = (*((Handle_IFSelect_DispPerCount*)nativeHandle))->Label();
  return gcnew OCTCollection_AsciiString(tmp);
}

 System::Boolean OCIFSelect_DispPerCount::LimitedMax(Standard_Integer nbent, Standard_Integer& max)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_DispPerCount*)nativeHandle))->LimitedMax(nbent, max));
}

 System::Boolean OCIFSelect_DispPerCount::PacketsCount(OCNaroWrappers::OCInterface_Graph^ G, Standard_Integer& count)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_IFSelect_DispPerCount*)nativeHandle))->PacketsCount(*((Interface_Graph*)G->Handle), count));
}

 void OCIFSelect_DispPerCount::Packets(OCNaroWrappers::OCInterface_Graph^ G, )
{
  (*((Handle_IFSelect_DispPerCount*)nativeHandle))->Packets(*((Interface_Graph*)G->Handle), );
}


