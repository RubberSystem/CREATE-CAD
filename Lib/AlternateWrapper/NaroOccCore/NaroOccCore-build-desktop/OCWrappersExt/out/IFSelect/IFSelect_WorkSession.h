// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_WorkSession_OCWrappers_HeaderFile
#define _IFSelect_WorkSession_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_WorkSession.hxx>
#include "../Converter.h"

#include "../MMgt/MMgt_TShared.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "../Interface/Interface_CheckIterator.h"
#include "../TColStd/TColStd_IndexedDataMapOfTransientTransient.h"
#include "IFSelect_ReturnStatus.h"
#include "IFSelect_RemainMode.h"
#include "IFSelect_PrintCount.h"


namespace OCNaroWrappers
{

ref class OCIFSelect_ShareOut;
ref class OCIFSelect_WorkLibrary;
ref class OCInterface_Protocol;
ref class OCInterface_InterfaceModel;
ref class OCInterface_HGraph;
ref class OCInterface_GTool;
ref class OCDico_DictionaryOfTransient;
ref class OCIFSelect_ModelCopier;
ref class OCIFSelect_Signature;
ref class OCStandard_Transient;
ref class OCTCollection_HAsciiString;
ref class OCInterface_Graph;
ref class OCTColStd_HSequenceOfTransient;
ref class OCInterface_CheckIterator;
ref class OCTColStd_HSequenceOfInteger;
ref class OCStandard_Type;
ref class OCTColStd_HSequenceOfHAsciiString;
ref class OCIFSelect_IntParam;
ref class OCTCollection_AsciiString;
ref class OCIFSelect_Selection;
ref class OCInterface_EntityIterator;
ref class OCIFSelect_SelectionIterator;
ref class OCIFSelect_SignCounter;
ref class OCIFSelect_Dispatch;
ref class OCIFSelect_GeneralModifier;
ref class OCIFSelect_Modifier;
ref class OCIFSelect_Transformer;
ref class OCIFSelect_PacketList;
ref class OCTColStd_SequenceOfTransient;
ref class OCTColStd_SequenceOfInteger;
ref class OCMessage_Messenger;
ref class OCIFSelect_SignatureList;


//! This class can be used to simply manage a process such as <br>
//!           splitting a file, extracting a set of Entities ... <br>
//!           It allows to manage different types of Variables : Integer or <br>
//!           Text Parameters, Selections, Dispatches, in addition to a <br>
//!           ShareOut. To each of these variables, a unique Integer <br>
//!           Identifier is attached. A Name can be attached too as desired. <br>
public ref class OCIFSelect_WorkSession : OCMMgt_TShared {

protected:
  // dummy constructor;
  OCIFSelect_WorkSession(OCDummy^) : OCMMgt_TShared((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_WorkSession(Handle(IFSelect_WorkSession)* nativeHandle);

// Methods PUBLIC

//! Creates a Work Session <br>
//!           It provides default, empty ShareOut and ModelCopier, which can <br>
//!           be replaced (if required, should be done just after creation). <br>
OCIFSelect_WorkSession();

//! Changes the Error Handler status (by default, it is not set) <br>
 /*instead*/  void SetErrorHandle(System::Boolean hand) ;

//! Returns the Error Handler status <br>
 /*instead*/  System::Boolean ErrorHandle() ;

//! Returns the ShareOut defined at creation time <br>
 /*instead*/  OCIFSelect_ShareOut^ ShareOut() ;

//! Sets a new ShareOut. Fills Items which its content <br>
//!  Warning : data from the former ShareOut are lost <br>
 /*instead*/  void SetShareOut(OCNaroWrappers::OCIFSelect_ShareOut^ shareout) ;

//! Set value of mode responsible for precence of selections after loading <br>
//! If mode set to true that different selections will be accessible after loading <br>
//! else selections will be not accessible after loading( for economy memory in applicatios) <br>
 /*instead*/  void SetModeStat(System::Boolean theMode) ;

//! Return value of mode defining of filling selection during loading <br>
 /*instead*/  System::Boolean GetModeStat() ;

//! Sets a WorkLibrary, which will be used to Read and Write Files <br>
 /*instead*/  void SetLibrary(OCNaroWrappers::OCIFSelect_WorkLibrary^ lib) ;

//! Returns the WorkLibrary. Null Handle if not yet set <br>
//! should be C++ : return const & <br>
 /*instead*/  OCIFSelect_WorkLibrary^ WorkLibrary() ;

//! Sets a Protocol, which will be used to determine Graphs, to <br>
//!           Read and to Write Files <br>
 /*instead*/  void SetProtocol(OCNaroWrappers::OCInterface_Protocol^ protocol) ;

//! Returns the Protocol. Null Handle if not yet set <br>
//! should be C++ : return const & <br>
 /*instead*/  OCInterface_Protocol^ Protocol() ;

//! Sets a specific Signature to be the SignType, i.e. the <br>
//!           Signature which will determine TypeName from the Model <br>
//!           (basic function). It is recorded in the GTool <br>
//!           This Signature is also set as "xst-sign-type" (reserved name) <br>
//! <br>
 /*instead*/  void SetSignType(OCNaroWrappers::OCIFSelect_Signature^ signtype) ;

//! Returns the current SignType <br>
 /*instead*/  OCIFSelect_Signature^ SignType() ;

//! Returns True is a Model has been set <br>
 /*instead*/  System::Boolean HasModel() ;

//! Sets a Model as input : this will be the Model from which the <br>
//!           ShareOut will work <br>
//!           if <clearpointed> is True (default) all SelectPointed items <br>
//!              are cleared, else they must be managed by the caller <br>
//!           Remark : SetModel clears the Graph, recomputes it if a <br>
//!           Protocol is set and if the Model is not empty, of course <br>
 /*instead*/  void SetModel(OCNaroWrappers::OCInterface_InterfaceModel^ model, System::Boolean clearpointed) ;

//! Returns the Model of the Work Session (Null Handle if none) <br>
//! should be C++ : return const & <br>
 /*instead*/  OCInterface_InterfaceModel^ Model() ;

//! Stores the filename used for read for setting the model <br>
//!           It is cleared by SetModel and ClearData(1) <br>
 /*instead*/  void SetLoadedFile(System::String^ filename) ;

//! Returns the filename used to load current model <br>
//!           empty if unknown <br>
 /*instead*/  System::String^ LoadedFile() ;

//! Reads a file with the WorkLibrary (sets Model and LoadedFile) <br>
//!           Returns a integer status which can be : <br>
//!           RetDone if OK,  RetVoid if no Protocol not defined, <br>
//!           RetError for file not found, RetFail if fail during read <br>
 /*instead*/  OCIFSelect_ReturnStatus ReadFile(System::String^ filename) ;

//! Returns the count of Entities stored in the Model, or 0 <br>
 /*instead*/  Standard_Integer NbStartingEntities() ;

//! Returns an  Entity stored in the Model of the WorkSession <br>
//!           (Null Handle is no Model or num out of range) <br>
 /*instead*/  OCStandard_Transient^ StartingEntity(Standard_Integer num) ;

//! Returns the Number of an Entity in the Model <br>
//!           (0 if no Model set or <ent> not in the Model) <br>
 /*instead*/  Standard_Integer StartingNumber(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! From a given label in Model, returns the corresponding number <br>
//!           Starts from first entity by Default, may start after a given <br>
//!           number : this number may be given negative, its absolute value <br>
//!           is then considered. Hence a loop on NumberFromLabel may be <br>
//!           programmed (stop test is : returned value positive or null) <br>
//! <br>
//!           Returns 0 if not found, < 0 if more than one found (first <br>
//!           found in negative). <br>
//!           If <val> just gives an integer value, returns it <br>
 /*instead*/  Standard_Integer NumberFromLabel(System::String^ val, Standard_Integer afternum) ;

//! Returns the label for <ent>, as the Model does <br>
//!           If <ent> is not in the Model or if no Model is loaded, a Null <br>
//!           Handle is returned <br>
 /*instead*/  OCTCollection_HAsciiString^ EntityLabel(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the Name of an Entity <br>
//!           This Name is computed by the general service Name <br>
//!           Returns a Null Handle if fails <br>
 /*instead*/  OCTCollection_HAsciiString^ EntityName(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the Category Number determined for an entity <br>
//!           it is computed by the class Category <br>
//!           An unknown entity (number 0) gives a value -1 <br>
 /*instead*/  Standard_Integer CategoryNumber(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the Category Name determined for an entity <br>
//!           it is computed by the class Category <br>
//!           Remark : an unknown entity gives an empty string <br>
 /*instead*/  System::String^ CategoryName(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the Validity Name determined for an entity <br>
//!           it is computed by the class SignValidity <br>
//!           Remark : an unknown entity gives an empty string <br>
 /*instead*/  System::String^ ValidityName(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Clears recorded data (not the items) according mode : <br>
//!           1 : all Data : Model, Graph, CheckList, + ClearData 4 <br>
//!           2 : Graph and CheckList (they will then be recomputed later) <br>
//!           3 : CheckList (it will be recomputed by ComputeCheck) <br>
//!           4 : just content of SelectPointed and Counters <br>
//!           Plus 0 : does nothing but called by SetModel <br>
//!           ClearData is virtual, hence it can be redefined to clear <br>
//!             other data of a specialised Work Session <br>
virtual /*instead*/  void ClearData(Standard_Integer mode) ;

//! Computes the Graph used for Selections, Displays ... <br>
//!           If a HGraph is already set, with same model as given by method <br>
//!           Model, does nothing. Else, computes a new Graph. <br>
//!           If <enforce> is given True, computes a new Graph anyway. <br>
//!           Remark that a call to ClearGraph will cause ComputeGraph to <br>
//!           really compute a new Graph <br>
//!           Returns True if Graph is OK, False else (i.e. if no Protocol <br>
//!           is set, or if Model is absent or empty). <br>
 /*instead*/  System::Boolean ComputeGraph(System::Boolean enforce) ;

//! Returns the Computed Graph as HGraph (Null Handle if not set) <br>
 /*instead*/  OCInterface_HGraph^ HGraph() ;

//! Returns the Computed Graph, for Read only <br>
 /*instead*/  OCInterface_Graph^ Graph() ;

//! Returns the list of entities shared by <ent> (can be empty) <br>
//!           Returns a null Handle if <ent> is unknown <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ Shareds(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns the list of entities sharing <ent> (can be empty) <br>
//!           Returns a null Handle if <ent> is unknown <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ Sharings(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns True if a Model is defined and really loaded (not <br>
//!           empty), a Protocol is set and a Graph has been computed. <br>
//!           In this case, the WorkSession can start to work <br>
 /*instead*/  System::Boolean IsLoaded() ;

//! Computes the CheckList for the Model currently loaded <br>
//!           It can then be used for displays, querries ... <br>
//!           Returns True if OK, False else (i.e. no Protocol set, or Model <br>
//!           absent). If <enforce> is False, works only if not already done <br>
//!           or if a new Model has been loaded from last call. <br>
//! Remark : computation is enforced by every call to <br>
//!          SetModel or RunTransformer <br>
 /*instead*/  System::Boolean ComputeCheck(System::Boolean enforce) ;

//! Returns the Check List for the Model currently loaded : <br>
//!           <complete> = True  : complete (syntactic & semantic messages), <br>
//!               computed if not yet done <br>
//!           <complete> = False : only syntactic (check file form) <br>
 /*instead*/  OCInterface_CheckIterator^ ModelCheckList(System::Boolean complete) ;

//! Returns a Check for a single entity, under the form of a <br>
//!           CheckIterator (this gives only one form for the user) <br>
//!           if <ent> is Null or equates the current Model, it gives the <br>
//!           Global Check, else the Check for the given entity <br>
//!           <complete> as for ModelCheckList <br>
 /*instead*/  OCInterface_CheckIterator^ CheckOne(OCNaroWrappers::OCStandard_Transient^ ent, System::Boolean complete) ;

//! Returns the Check List produced by the last execution of <br>
//!           either : EvaluateFile(for Split), SendSplit, SendAll, <br>
//!           SendSelected, RunTransformer-RunModifier <br>
//!           Cleared by SetModel or ClearData(1) <br>
//!           The field is protected, hence a specialized WorkSession may <br>
//!           fill it <br>
 /*instead*/  OCInterface_CheckIterator^ LastRunCheckList() ;

//! Returns the Maximum Value for an Item Identifier. It can be <br>
//!           greater to the count of known Items, because some can have <br>
//!           been removed <br>
 /*instead*/  Standard_Integer MaxIdent() ;

//! Returns an Item, given its Ident. Returns a Null Handle if <br>
//!           no Item corresponds to this Ident. <br>
 /*instead*/  OCStandard_Transient^ Item(Standard_Integer id) ;

//! Returns the Ident attached to an Item in the WorkSession, or <br>
//!           Zero if it is unknown <br>
 /*instead*/  Standard_Integer ItemIdent(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Returns the Item which corresponds to a Variable, given its <br>
//!           Name (whatever the type of this Item). <br>
//!           Returns a Null Handle if this Name is not recorded <br>
 /*instead*/  OCStandard_Transient^ NamedItem(System::String^ name) ;

//! Same as above, but <name> is given through a Handle <br>
//!           Especially Usefull with methods SelectionNames, etc... <br>
 /*instead*/  OCStandard_Transient^ NamedItem(OCNaroWrappers::OCTCollection_HAsciiString^ name) ;

//! Returns the Ident attached to a Name, 0 if name not recorded <br>
 /*instead*/  Standard_Integer NameIdent(System::String^ name) ;

//! Returns True if an Item of the WorkSession has an attached Name <br>
 /*instead*/  System::Boolean HasName(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Returns the Name attached to an Item as a Variable of this <br>
//!           WorkSession. If <item> is Null or not recorded, returns an <br>
//!           empty string. <br>
 /*instead*/  OCTCollection_HAsciiString^ Name(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Adds an Item and returns its attached Ident. Does nothing <br>
//!           if <item> is already recorded (and returns its attached Ident) <br>
//!           <active> if True commands call to SetActive (see below) <br>
//!           Remark : the determined Ident is used if <item> is a Dispatch, <br>
//!           to fill the ShareOut <br>
 /*instead*/  Standard_Integer AddItem(OCNaroWrappers::OCStandard_Transient^ item, System::Boolean active) ;

//! Adds an Item with an attached Name. If the Name is already <br>
//!           known in the WorkSession, the older item losts it <br>
//!           Returns Ident if Done, 0 else, i.e. if <item> is null <br>
//!           If <name> is empty, works as AddItem (i.e. with no name) <br>
//!           If <item> is already known but with no attached Name, this <br>
//!           method tries to attached a Name to it <br>
//!           <active> if True commands call to SetActive (see below) <br>
 /*instead*/  Standard_Integer AddNamedItem(System::String^ name, OCNaroWrappers::OCStandard_Transient^ item, System::Boolean active) ;

//! Following the type of <item> : <br>
//!           - Dispatch : Adds or Removes it in the ShareOut & FileNaming <br>
//!           - GeneralModifier : Adds or Removes it for final sending <br>
//!             (i.e. in the ModelCopier) <br>
//!           Returns True if it did something, False else (state unchanged) <br>
 /*instead*/  System::Boolean SetActive(OCNaroWrappers::OCStandard_Transient^ item, System::Boolean mode) ;

//! Removes an Item from the Session, given its Name <br>
//!           Returns True if Done, False else (Name not recorded) <br>
//!           (Applies only on Item which are Named) <br>
 /*instead*/  System::Boolean RemoveNamedItem(System::String^ name) ;

//! Removes a Name without removing the Item <br>
//!           Returns True if Done, False else (Name not recorded) <br>
 /*instead*/  System::Boolean RemoveName(System::String^ name) ;

//! Removes an Item given its Ident. Returns False if <id> is <br>
//!           attached to no Item in the WorkSession. For a Named Item, <br>
//!           also removes its Name. <br>
 /*instead*/  System::Boolean RemoveItem(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Clears all the recorded Items : Selections, Dispatches, <br>
//!           Modifiers, and Strings & IntParams, with their Idents & Names. <br>
//!           Remark that if a Model has been loaded, it is not cleared. <br>
 /*instead*/  void ClearItems() ;

//! Returns a Label which illustrates the content of an Item, <br>
//!           given its Ident. This Label is : <br>
//!           - for a Text Parameter, "Text:<text value>" <br>
//!           - for an Integer Parameter, "Integer:<integer value>" <br>
//!           - for a Selection, a Dispatch or a Modifier, its Label <br>
//!             (see these classes) <br>
//!           - for any other kind of Variable, its cdl type <br>
 /*instead*/  OCTCollection_HAsciiString^ ItemLabel(Standard_Integer id) ;

//! Fills a Sequence with the List of Idents attached to the Items <br>
//!           of which Type complies with (IsKind) <type> (alphabetic order) <br>
//!           Remark : <type> = TYPE(Standard_Transient) gives all the <br>
//!           Idents which are suitable in the WorkSession <br>
 /*instead*/  OCTColStd_HSequenceOfInteger^ ItemIdents(OCNaroWrappers::OCStandard_Type^ type) ;

//! Fills a Sequence with the list of the Names attached to Items <br>
//!           of which Type complies with (IsKind) <type> (alphabetic order) <br>
//!           Remark : <type> = TYPE(Standard_Transient) gives all the Names <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ ItemNames(OCNaroWrappers::OCStandard_Type^ type) ;

//! Fills a Sequence with the NAMES of the control items, of which <br>
//!           the label matches <label> (contain it) : see NextIdentForLabel <br>
//!           Search mode is fixed to "contained" <br>
//!           If <label> is empty, returns all Names <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ ItemNamesForLabel(System::String^ label) ;

//! For query by Label with possible iterations <br>
//!           Searches the Ident of which Item has a Label which matches a <br>
//!           given one, the search starts from an initial Ident. <br>
//!           Returns the first found Ident which follows <id>, or ZERO <br>
//! <br>
//!           The search must start with <id> = 0, it returns the next Ident <br>
//!           which matches. To iterate, call again this method which this <br>
//!           returned value as <id>. Once an Ident has been returned, the <br>
//!           Item can be obtained by the method Item <br>
//! <br>
//!           <mode> precises the required matching mode : <br>
//!           - 0 (Default) : <label> must match exactly with the Item Label <br>
//!           - 1 : <label> must match the exact beginning (the end is free) <br>
//!           - 2 : <label> must be at least once wherever in the Item Label <br>
//!           - other values are ignored <br>
 /*instead*/  Standard_Integer NextIdentForLabel(System::String^ label, Standard_Integer id, Standard_Integer mode) ;

//! Creates a parameter as being bound to a Static <br>
//!           If the Static is Integer, this creates an IntParam bound to <br>
//!           it by its name. Else this creates a String which is the value <br>
//!           of the Static. <br>
//!           Returns a null handle if <statname> is unknown as a Static <br>
 /*instead*/  OCStandard_Transient^ NewParamFromStatic(System::String^ statname, System::String^ name) ;

//! Returns an IntParam, given its Ident in the Session <br>
//!           Null result if <id> is not suitable for an IntParam <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCIFSelect_IntParam^ IntParam(Standard_Integer id) ;

//! Returns Integer Value of an IntParam <br>
 /*instead*/  Standard_Integer IntValue(OCNaroWrappers::OCIFSelect_IntParam^ it) ;

//! Creates a new IntParam. A Name can be set (Optional) <br>
//!           Returns the created IntParam, or a Null Handle in case of <br>
//!           Failure (see AddItem/AddNamedItem) <br>
 /*instead*/  OCIFSelect_IntParam^ NewIntParam(System::String^ name) ;

//! Changes the Integer Value of an IntParam <br>
//!           Returns True if Done, False if <it> is not in the WorkSession <br>
 /*instead*/  System::Boolean SetIntValue(OCNaroWrappers::OCIFSelect_IntParam^ it, Standard_Integer val) ;

//! Returns a TextParam, given its Ident in the Session <br>
//!           Null result if <id> is not suitable for a TextParam <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCTCollection_HAsciiString^ TextParam(Standard_Integer id) ;

//! Returns Text Value of a TextParam (a String) <br>
//!           or an empty string if <it> is not in the WorkSession <br>
 /*instead*/  OCTCollection_AsciiString^ TextValue(OCNaroWrappers::OCTCollection_HAsciiString^ par) ;

//! Creates a new (empty) TextParam. A Name can be set (Optional) <br>
//!           Returns the created TextParam (as an HAsciiString), or a Null <br>
//!           Handle in case of Failure (see AddItem/AddNamedItem) <br>
 /*instead*/  OCTCollection_HAsciiString^ NewTextParam(System::String^ name) ;

//! Changes the Text Value of a TextParam (an HAsciiString) <br>
//!           Returns True if Done, False if <it> is not in the WorkSession <br>
 /*instead*/  System::Boolean SetTextValue(OCNaroWrappers::OCTCollection_HAsciiString^ par, System::String^ val) ;

//! Returns a Signature, given its Ident in the Session <br>
//!           Null result if <id> is not suitable for a Signature <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCIFSelect_Signature^ Signature(Standard_Integer id) ;

//! Returns the Value computed by a Signature for an Entity <br>
//!           Returns an empty string if the entity does not belong to the <br>
//!           loaded model <br>
 /*instead*/  System::String^ SignValue(OCNaroWrappers::OCIFSelect_Signature^ sign, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Returns a Selection, given its Ident in the Session <br>
//!           Null result if <id> is not suitable for a Selection <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCIFSelect_Selection^ Selection(Standard_Integer id) ;

//! Evaluates the effect of a Selection applied on the input Model <br>
//!           Returned Result remains empty if no input Model has been set <br>
 /*instead*/  OCInterface_EntityIterator^ EvalSelection(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Returns the Selections which are source of Selection, given <br>
//!           its rank in the List of Selections (see SelectionIterator) <br>
//!           Returned value is empty if <num> is out of range or if <br>
//!           <sel> is not in the WorkSession <br>
 /*instead*/  OCIFSelect_SelectionIterator^ Sources(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Returns the result of a Selection, computed by EvalSelection <br>
//!           (see above) under the form of a HSequence (hence, it can be <br>
//!           used by a frontal-engine logic). It can be empty <br>
//!           Returns a Null Handle if <sel> is not in the WorkSession <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ SelectionResult(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Returns the result of a Selection, by forcing its input with <br>
//!           a given list <list> (unless <list> is Null). <br>
//!               RULES : <br>
//!           <list> applies only for a SelectDeduct kind Selection : <br>
//!           its Input is considered : if it is a SelectDeduct kind <br>
//!            Selection, its Input is considered, etc... until an Input <br>
//!           is not a Deduct/Extract : its result is replaced by <list> <br>
//!           and all the chain of deductions is applied <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ SelectionResultFromList(OCNaroWrappers::OCIFSelect_Selection^ sel, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list) ;

//! Sets a Selection as input for an item, according its type : <br>
//!           if <item> is a Dispatch : as Final Selection <br>
//!           if <item> is a GeneralModifier (i.e. any kind of Modifier) : <br>
//!             as Selection used to filter entities to modify <br>
//!           <sel>  Null  causes this Selection to be nullified <br>
//!           Returns False if <item> is not of a suitable type, or <br>
//!             <item> or <sel> is not in the WorkSession <br>
 /*instead*/  System::Boolean SetItemSelection(OCNaroWrappers::OCStandard_Transient^ item, OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Resets input Selection which was set by SetItemSelection <br>
//!           Same conditions as for SetItemSelection <br>
//!           Returns True if done, False if <item> is not in the WorkSession <br>
 /*instead*/  System::Boolean ResetItemSelection(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Returns the Selection of a Dispatch or a GeneralModifier. <br>
//!           Returns a Null Handle if none is defined or <item> not good type <br>
 /*instead*/  OCIFSelect_Selection^ ItemSelection(OCNaroWrappers::OCStandard_Transient^ item) ;

//! Returns a SignCounter from its ident in the Session <br>
//!           Null result if <id> is not suitable for a SignCounter <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCIFSelect_SignCounter^ SignCounter(Standard_Integer id) ;

//! Computes the content of a SignCounter when it is defined with <br>
//!           a Selection, then returns True <br>
//!           Returns False if the SignCounter is not defined with a <br>
//!           Selection, or if its Selection Mode is inhibited <br>
//!           <forced> to work around optimisations <br>
 /*instead*/  System::Boolean ComputeCounter(OCNaroWrappers::OCIFSelect_SignCounter^ counter, System::Boolean forced) ;

//! Computes the content of a SignCounter from an input list <br>
//!           If <list> is Null, uses internal definition of the Counter : <br>
//!             a Selection, else the whole Model (recomputation forced) <br>
//!           If <clear> is True (D), starts from scratch <br>
//!           Else, cumulates computations <br>
 /*instead*/  System::Boolean ComputeCounterFromList(OCNaroWrappers::OCIFSelect_SignCounter^ counter, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, System::Boolean clear) ;

//! Returns the ordered list of dispatches stored by the ShareOut <br>
 /*instead*/  OCTColStd_HSequenceOfInteger^ AppliedDispatches() ;

//! Clears the list of Dispatches recorded by the ShareOut <br>
//!           if <only> disp is True, tha's all. Else, clears also the lists <br>
//!           of Modifiers recorded by the ShareOut <br>
 /*instead*/  void ClearShareOut(System::Boolean onlydisp) ;

//! Returns a Dispatch, given its Ident in the Session <br>
//!           Null result if <id> is not suitable for a Dispatch <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCIFSelect_Dispatch^ Dispatch(Standard_Integer id) ;

//! Returns the rank of a Dispatch in the ShareOut, or 0 if <disp> <br>
//!           is not in the ShareOut or not in the WorkSession <br>
 /*instead*/  Standard_Integer DispatchRank(OCNaroWrappers::OCIFSelect_Dispatch^ disp) ;

//! Gives access to the complete ModelCopier <br>
 /*instead*/  OCIFSelect_ModelCopier^ ModelCopier() ;

//! Sets a new ModelCopier. Fills Items which its content <br>
 /*instead*/  void SetModelCopier(OCNaroWrappers::OCIFSelect_ModelCopier^ copier) ;

//! Returns the count of Modifiers applied to final sending <br>
//!           Model Modifiers if <formodel> is True, File Modifiers else <br>
//!           (i.e. Modifiers which apply once the Models have been filled) <br>
 /*instead*/  Standard_Integer NbFinalModifiers(System::Boolean formodel) ;

//! Fills a Sequence with a list of Idents, those attached to <br>
//!           the Modifiers applied to final sending. <br>
//!           Model Modifiers if <formodel> is True, File Modifiers else <br>
//!           This list is given in the order in which they will be applied <br>
//!           (which takes into account the Changes to Modifier Ranks) <br>
 /*instead*/  OCTColStd_HSequenceOfInteger^ FinalModifierIdents(System::Boolean formodel) ;

//! Returns a Modifier, given its Ident in the Session <br>
//!           Null result if <id> is not suitable for a Modifier <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCIFSelect_GeneralModifier^ GeneralModifier(Standard_Integer id) ;

//! Returns a Model Modifier, given its Ident in the Session, <br>
//!           i.e. typed as a Modifier (not simply a GeneralModifier) <br>
//!           Null result if <id> is not suitable for a Modifier <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCIFSelect_Modifier^ ModelModifier(Standard_Integer id) ;

//! Returns the Rank of a Modifier given its Ident. Model or File <br>
//!           Modifier according its type (ModelModifier or not) <br>
//!           Remember that Modifiers are applied sequencially following <br>
//!           their Rank : first Model Modifiers then File Modifiers <br>
//!           Rank is given by rank of call to AddItem and can be <br>
//!           changed by ChangeModifierRank <br>
 /*instead*/  Standard_Integer ModifierRank(OCNaroWrappers::OCIFSelect_GeneralModifier^ item) ;

//! Changes the Rank of a Modifier in the Session : <br>
//!           Model Modifiers if <formodel> is True, File Modifiers else <br>
//!           the Modifier n0 <before> is put to n0 <after> <br>
//!           Return True if Done, False if <before> or <after> out of range <br>
 /*instead*/  System::Boolean ChangeModifierRank(System::Boolean formodel, Standard_Integer before, Standard_Integer after) ;

//! Removes all the Modifiers active in the ModelCopier : they <br>
//!           become inactive and they are removed from the Session <br>
 /*instead*/  void ClearFinalModifiers() ;

//! Sets a GeneralModifier to be applied to an item : <br>
//!           - item = ShareOut : applies for final sending (all dispatches) <br>
//!           - item is a Dispatch : applies for this dispatch only <br>
//!           Returns True if done, False if <modif> or <item> not in <me> <br>
 /*instead*/  System::Boolean SetAppliedModifier(OCNaroWrappers::OCIFSelect_GeneralModifier^ modif, OCNaroWrappers::OCStandard_Transient^ item) ;

//! Resets a GeneralModifier to be applied <br>
//!           Returns True if done, False if <modif> was not applied <br>
 /*instead*/  System::Boolean ResetAppliedModifier(OCNaroWrappers::OCIFSelect_GeneralModifier^ modif) ;

//! Returns the item on which a GeneralModifier is applied : <br>
//!           the ShareOut, or a given Dispatch <br>
//!           Returns a Null Handle if <modif> is not applied <br>
 /*instead*/  OCStandard_Transient^ UsesAppliedModifier(OCNaroWrappers::OCIFSelect_GeneralModifier^ modif) ;

//! Returns a Transformer, given its Ident in the Session <br>
//!           Null result if <id> is not suitable for a Transformer <br>
//!           (undefined, or defined for another kind of variable) <br>
 /*instead*/  OCIFSelect_Transformer^ Transformer(Standard_Integer id) ;

//! Runs a Transformer on starting Model, which can then be edited <br>
//!           or replaced by a new one. The Protocol can also be changed. <br>
//!           Fills LastRunCheckList <br>
//! <br>
//!           Returned status is 0 if nothing done (<transf> or model <br>
//!             undefined), positive if OK, negative else : <br>
//!           0  : Nothing done <br>
//!           1  : OK, edition on the spot with no change to the graph <br>
//!                of dependances (purely local) <br>
//!           2  : OK, model edited on the spot (graph recomputed, may <br>
//!               have changed), protocol unchanged <br>
//!           3  : OK, new model produced, same protocol <br>
//!           4  : OK, model edited on the spot (graph recomputed), <br>
//!                but protocol has changed <br>
//!           5  : OK, new model produced, protocol has changed <br>
//!           -1 : Error on the spot (slight changes), data may be corrupted <br>
//!                (remark : corruption should not be profound) <br>
//!           -2 : Error on edition the spot, data may be corrupted <br>
//!                (checking them is recommanded) <br>
//!           -3 : Error with a new data set, transformation ignored <br>
//!           -4 : OK as 4, but graph of dependances count not be recomputed <br>
//!                (the former one is kept) : check the protocol <br>
 /*instead*/  Standard_Integer RunTransformer(OCNaroWrappers::OCIFSelect_Transformer^ transf) ;

//! Runs a Modifier on Starting Model. It can modify entities, or <br>
//!           add new ones. But the Model or the Protocol is unchanged. <br>
//!           The Modifier is applied on each entity of the Model. See also <br>
//!             RunModifierSelected <br>
//!           Fills LastRunCheckList <br>
//! <br>
//!           <copy> : if True, a new data set is produced which brings <br>
//!             the modifications (Model + its Entities) <br>
//!           if False, data are modified on the spot <br>
//! <br>
//!           It works through a TransformStandard defined with <modif> <br>
//!           Returned status as RunTransformer : 0 nothing done, >0 OK, <br>
//!           <0 problem, but only between -3 and 3 (protocol unchanged) <br>
//!           Remark : <copy> True will give <effect> = 3 or -3 <br>
 /*instead*/  Standard_Integer RunModifier(OCNaroWrappers::OCIFSelect_Modifier^ modif, System::Boolean copy) ;

//! Acts as RunModifier, but the Modifier is applied on the list <br>
//!           determined by a Selection, rather than on the whole Model <br>
//!           If the selection is a null handle, the whole model is taken <br>
 /*instead*/  Standard_Integer RunModifierSelected(OCNaroWrappers::OCIFSelect_Modifier^ modif, OCNaroWrappers::OCIFSelect_Selection^ sel, System::Boolean copy) ;

//! Creates and returns a TransformStandard, empty, with its <br>
//!           Copy Option (True = Copy, False = On the Spot) and an <br>
//!           optional name. <br>
//!           To a TransformStandard, the method SetAppliedModifier applies <br>
 /*instead*/  OCIFSelect_Transformer^ NewTransformStandard(System::Boolean copy, System::String^ name) ;

//! Defines a new content from the former one <br>
//!           If <keep> is True, it is given by entities selected by <br>
//!              Selection <sel>  (and all shared entities) <br>
//!           Else, it is given by all the former content but entities <br>
//!              selected by the Selection <sel> (and properly shared ones) <br>
//!           Returns True if done. Returns False if the selected list <br>
//!           (from <sel>) is empty, hence nothing is done <br>
 /*instead*/  System::Boolean SetModelContent(OCNaroWrappers::OCIFSelect_Selection^ sel, System::Boolean keep) ;

//! Returns the defined File Prefix. Null Handle if not defined <br>
 /*instead*/  OCTCollection_HAsciiString^ FilePrefix() ;

//! Returns the defined Default File Root. It is used for <br>
//!           Dispatches which have no specific root attached. <br>
//!           Null Handle if not defined <br>
 /*instead*/  OCTCollection_HAsciiString^ DefaultFileRoot() ;

//! Returns the defined File Extension. Null Handle if not defined <br>
 /*instead*/  OCTCollection_HAsciiString^ FileExtension() ;

//! Returns the File Root defined for a Dispatch. Null if no <br>
//!           Root Name is defined for it (hence, no File will be produced) <br>
 /*instead*/  OCTCollection_HAsciiString^ FileRoot(OCNaroWrappers::OCIFSelect_Dispatch^ disp) ;

//! Defines a File Prefix <br>
 /*instead*/  void SetFilePrefix(System::String^ name) ;

//! Defines a Default File Root Name. Clears it is <name> = "" <br>
//!           Returns True if OK, False if <name> already set for a Dispatch <br>
 /*instead*/  System::Boolean SetDefaultFileRoot(System::String^ name) ;

//! Defines a File Extension <br>
 /*instead*/  void SetFileExtension(System::String^ name) ;

//! Defines a Root for a Dispatch <br>
//!           If <name> is empty, clears Root Name <br>
//!           This has as effect to inhibit the production of File by <disp> <br>
//!           Returns False if <disp> is not in the WorkSession or if a <br>
//!           root name is already defined for it <br>
 /*instead*/  System::Boolean SetFileRoot(OCNaroWrappers::OCIFSelect_Dispatch^ disp, System::String^ name) ;

//! Extracts File Root Name from a given complete file name <br>
//!           (uses OSD_Path) <br>
 /*instead*/  System::String^ GiveFileRoot(System::String^ file) ;

//! Completes a file name as required, with Prefix and Extension <br>
//!           (if defined; for a non-defined item, completes nothing) <br>
 /*instead*/  System::String^ GiveFileComplete(System::String^ file) ;

//! Erases all stored data from the File Evaluation <br>
//!           (i.e. ALL former naming informations are lost) <br>
 /*instead*/  void ClearFile() ;

//! Performs and stores a File Evaluation. The Results are a List <br>
//!           of produced Models and a List of names (Strings), in parallel <br>
//!           Fills LastRunCheckList <br>
 /*instead*/  void EvaluateFile() ;

//! Returns the count of produced Models <br>
 /*instead*/  Standard_Integer NbFiles() ;

//! Returns a Model, given its rank in the Evaluation List <br>
 /*instead*/  OCInterface_InterfaceModel^ FileModel(Standard_Integer num) ;

//! Returns the name of a file corresponding to a produced Model, <br>
//!           given its rank in the Evaluation List <br>
 /*instead*/  OCTCollection_AsciiString^ FileName(Standard_Integer num) ;

//! Commands file sending to clear the list of already sent files, <br>
//!           commands to record a new one if <record> is True <br>
//!           This list is managed by the ModelCopier when SendSplit is called <br>
//!           It allows a global exploitation of the set of sent files <br>
 /*instead*/  void BeginSentFiles(System::Boolean record) ;

//! Returns the list of recorded sent files, or a Null Handle is <br>
//!           recording has not been enabled <br>
 /*instead*/  OCTColStd_HSequenceOfHAsciiString^ SentFiles() ;

//! Performs creation of derived files from the input Model <br>
//!           Takes its data (sub-models and names), from result EvaluateFile <br>
//!           if active, else by dynamic Evaluation (not stored) <br>
//!           After SendSplit, result of EvaluateFile is Cleared <br>
//!           Fills LastRunCheckList <br>
//! <br>
//!           Works with the WorkLibrary which acts on specific type of Model <br>
//!           and can work with File Modifiers (managed by the Model Copier) <br>
//!           and a ModelCopier, which can work with Model Modifiers <br>
//!           Returns False if, either WorkLibrary has failed on at least <br>
//!           one sub-file, or the Work Session is badly conditionned <br>
//!           (no Model defined, or FileNaming not in phase with ShareOut) <br>
 /*instead*/  System::Boolean SendSplit() ;

//! Returns an Evaluation of the whole ShareOut definition : i.e. <br>
//!           how the entities of the starting model are forecast to be sent <br>
//!           to various files :  list of packets according the dispatches, <br>
//!           effective lists of roots for each packet (which determine the <br>
//!           content of the corresponding file); plus evaluation of which <br>
//!           entities are : forgotten (sent into no file), duplicated (sent <br>
//!           into more than one file), sent into a given file. <br>
//!           See the class PacketList for more details. <br>
 /*instead*/  OCIFSelect_PacketList^ EvalSplit() ;

//! Returns the list of Entities sent in files, accourding the <br>
//!           count of files each one has been sent (these counts are reset <br>
//!           by SetModel or SetRemaining(Forget) ) stored in Graph Status <br>
//!           <count> = -1 (default) is for ENtities sent at least once <br>
//!           <count> = 0 is for the Remaining List (entities not yet sent) <br>
//!           <count> = 1 is for entities sent in one and only one file <br>
//!             (the ideal case) <br>
//!           Remaining Data are computed on each Sending/Copying output <br>
//!           files (see methods EvaluateFile and SendSplit) <br>
//!           Graph Status is 0 for Remaining Entity, <count> for Sent into <br>
//!           <count> files <br>
//!           This status is set to 0 (not yet sent) for all by SetModel <br>
//!           and by SetRemaining(mode=Forget,Display) <br>
 /*instead*/  OCInterface_EntityIterator^ SentList(Standard_Integer count) ;

//! Returns the greater count of different files in which any of <br>
//!           the starting entities could be sent. <br>
//!           Before any file output, this count is 0. <br>
//!           Ideal count is 1. More than 1 means that duplications occur. <br>
 /*instead*/  Standard_Integer MaxSendingCount() ;

//! Processes Remaining data (after having sent files), mode : <br>
//!           Forget  : forget remaining info (i.e. clear all "Sent" status) <br>
//!           Compute : compute and keep remaining (does nothing if : <br>
//!                 remaining is empty or if no files has been sent) <br>
//!           Display : display entities recorded as remaining <br>
//!           Undo    : restore former state of data (after Remaining(1) ) <br>
//!           Returns True if OK, False else (i.e. mode = 2 and Remaining <br>
//!           List is either empty or takes all the entities, or mode = 3 <br>
//!           and no former computation of remaining data was done) <br>
 /*instead*/  System::Boolean SetRemaining(OCIFSelect_RemainMode mode) ;

//! Sends the starting Model into one file, without splitting, <br>
//!           managing remaining data or anything else. <br>
//!           <computegraph> true commands the Graph to be recomputed before <br>
//!           sending : required when a Model is filled in several steps <br>
//! <br>
//!           The Model and File Modifiers recorded to be applied on sending <br>
//!           files are. <br>
//!           Returns a status of execution : <br>
//!             Done if OK, <br>
//!             Void if no data available, <br>
//!             Error if errors occured (work library is not defined), errors <br>
//!             during translation <br>
//!             Fail if exception during translation is raised <br>
//!             Stop if no disk space or disk, file is write protected <br>
//!           Fills LastRunCheckList <br>
 /*instead*/  OCIFSelect_ReturnStatus SendAll(System::String^ filename, System::Boolean computegraph) ;

//! Sends a part of the starting Model into one file, without <br>
//!           splitting. But remaining data are managed. <br>
//!           <computegraph> true commands the Graph to be recomputed before <br>
//!           sending : required when a Model is filled in several steps <br>
//! <br>
//!           The Model and File Modifiers recorded to be applied on sending <br>
//!           files are. <br>
//!           Returns a status : Done if OK,  Fail if error during send, <br>
//!            Error : WorkLibrary not defined, Void : selection list empty <br>
//!           Fills LastRunCheckList <br>
 /*instead*/  OCIFSelect_ReturnStatus SendSelected(System::String^ filename, OCNaroWrappers::OCIFSelect_Selection^ sel, System::Boolean computegraph) ;

//! Writes the current Interface Model globally to a File, and <br>
//!           returns a write status which can be : <br>
//!             Done OK, Fail file could not be written, Error no norm is selected <br>
//! Remark  : It is a simple, one-file writing, other operations are <br>
//!           available (such as splitting ...) which calls SendAll <br>
 /*instead*/  OCIFSelect_ReturnStatus WriteFile(System::String^ filename) ;

//! Writes a sub-part of the current Interface Model to a File, <br>
//!           as defined by a Selection <sel>, recomputes the Graph, and <br>
//!           returns a write status which can be : <br>
//!             Done OK, Fail file could not be written, Error no norm is selected <br>
//! Remark  : It is a simple, one-file writing, other operations are <br>
//!           available (such as splitting ...) which calls SendSelected <br>
 /*instead*/  OCIFSelect_ReturnStatus WriteFile(System::String^ filename, OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Returns the count of Input Selections known for a Selection, <br>
//!           or 0 if <sel> not in the WorkSession. This count is one for a <br>
//!           SelectDeduct / SelectExtract kind, two for SelectControl kind, <br>
//!           variable for a SelectCombine (Union/Intersection), zero else <br>
 /*instead*/  Standard_Integer NbSources(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Returns the <num>th Input Selection of a Selection <br>
//!           (see NbSources). <br>
//!           Returns a Null Handle if <sel> is not in the WorkSession or if <br>
//!           <num> is out of the range <1-NbSources> <br>
//!           To obtain more details, see the method Sources <br>
 /*instead*/  OCIFSelect_Selection^ Source(OCNaroWrappers::OCIFSelect_Selection^ sel, Standard_Integer num) ;

//! Returns True if <sel> a Reversed SelectExtract, False else <br>
 /*instead*/  System::Boolean IsReversedSelectExtract(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Toggles the Sense (Direct <-> Reversed) of a SelectExtract <br>
//!           Returns True if Done, False if <sel> is not a SelectExtract or <br>
//!           is not in the WorkSession <br>
 /*instead*/  System::Boolean ToggleSelectExtract(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Sets an Input Selection (as <input>) to a SelectExtract or <br>
//!           a SelectDeduct (as <sel>). <br>
//!           Returns True if Done, False if <sel> is neither a <br>
//!           SelectExtract nor a SelectDeduct, or not in the WorkSession <br>
 /*instead*/  System::Boolean SetInputSelection(OCNaroWrappers::OCIFSelect_Selection^ sel, OCNaroWrappers::OCIFSelect_Selection^ input) ;

//! Sets an Input Selection, Main if <formain> is True, Second else <br>
//!           (as <sc>) to a SelectControl (as <sel>). Returns True if Done, <br>
//!           False if <sel> is not a SelectControl, or <sc> or <sel> is not <br>
//!           in the WorkSession <br>
 /*instead*/  System::Boolean SetControl(OCNaroWrappers::OCIFSelect_Selection^ sel, OCNaroWrappers::OCIFSelect_Selection^ sc, System::Boolean formain) ;

//! Adds an input selection to a SelectCombine (Union or Inters.). <br>
//!           Returns new count of inputs for this SelectCombine if Done or <br>
//!           0 if <sel> is not kind of SelectCombine, or if <seladd> or <br>
//!           <sel> is not in the WorkSession <br>
//!           By default, adding is done at the end of the list <br>
//!           Else, it is an insertion to rank <atnum> (usefull for Un-ReDo) <br>
 /*instead*/  Standard_Integer CombineAdd(OCNaroWrappers::OCIFSelect_Selection^ selcomb, OCNaroWrappers::OCIFSelect_Selection^ seladd, Standard_Integer atnum) ;

//! Removes an input selection from a SelectCombine (Union or <br>
//!           Intersection). Returns True if done, False if <selcomb> is not <br>
//!           kind of SelectCombine or <selrem> is not source of <selcomb> <br>
 /*instead*/  System::Boolean CombineRemove(OCNaroWrappers::OCIFSelect_Selection^ selcomb, OCNaroWrappers::OCIFSelect_Selection^ selrem) ;

//! Creates a new Selection, of type SelectPointed, its content <br>
//!           starts with <list>. A name must be given (can be empty) <br>
 /*instead*/  OCIFSelect_Selection^ NewSelectPointed(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, System::String^ name) ;

//! Changes the content of a Selection of type SelectPointed <br>
//!           According <mode> : 0  set <list> as new content (clear former) <br>
//!             1  : adds <list> to actual content <br>
//!            -1  : removes <list> from actual content <br>
//!           Returns True if done, False if <sel> is not a SelectPointed <br>
 /*instead*/  System::Boolean SetSelectPointed(OCNaroWrappers::OCIFSelect_Selection^ sel, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ list, Standard_Integer mode) ;

//! Returns a Selection from a Name : <br>
//!           - the name of a Selection : this Selection <br>
//!           - the name of a Signature + criteria between (..) : a new <br>
//!             Selection from this Signature <br>
//!           - an entity or a list of entities : a new SelectPointed <br>
//!           Else, returns a Null Handle <br>
 /*instead*/  OCIFSelect_Selection^ GiveSelection(System::String^ selname) ;

//! Determines a list of entities from an object : <br>
//!           <obj> already HSequenceOfTransient : returned itself <br>
//!           <obj> Selection : its Result of Evaluation is returned <br>
//!           <obj> an entity of the Model : a HSequence which contains it <br>
//!           else, an empty HSequence <br>
//!           <obj> the Model it self : ALL its content (not only the roots) <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ GiveList(OCNaroWrappers::OCStandard_Transient^ obj) ;

//! Computes a List of entities from two alphanums, <br>
//!           first and second, as follows : <br>
//!           if <first> is a Number or Label of an entity : this entity <br>
//!           if <first> is a list of Numbers/Labels : the list of entities <br>
//!           if <first> is the name of a Selection in <WS>, and <second> <br>
//!             not defined, the standard result of this Selection <br>
//!           else, let's consider "first second" : this whole phrase is <br>
//!           splitted by blanks, as follows (RECURSIVE CALL) : <br>
//!           - the leftest term is the final selection <br>
//!           - the other terms define the result of the selection <br>
//!           - and so on (the "leftest minus one" is a selection, of which <br>
//!             the input is given by the remaining ...) <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ GiveList(System::String^ first, System::String^ second) ;

//! Computes a List of entities from the model as follows <br>
//!           <first> beeing a Selection or a combination of Selections, <br>
//!             <ent> beeing an entity or a list <br>
//!           of entities (as a HSequenceOfTransient) : <br>
//!             the standard result of this selection applied to this list <br>
//!           if <ent> is Null, the standard definition of the selection is <br>
//!             used (which contains a default input selection) <br>
//!           if <selname> is erroneous, a null handle is returned <br>
//! <br>
//!           REMARK : selname is processed as <first second> of preceeding <br>
//!             GiveList <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ GiveListFromList(System::String^ selname, OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Combines two lists and returns the result, according to mode : <br>
//!           <mode> < 0 : entities in <l1> AND NOT in <l2> <br>
//!           <mode> = 0 : entities in <l1> AND in <l2> <br>
//!           <mode> > 0 : entities in <l1> OR  in <l2> <br>
 /*instead*/  OCTColStd_HSequenceOfTransient^ GiveListCombined(OCNaroWrappers::OCTColStd_HSequenceOfTransient^ l1, OCNaroWrappers::OCTColStd_HSequenceOfTransient^ l2, Standard_Integer mode) ;

//! Loads data from a check iterator to query status on it <br>
 /*instead*/  void QueryCheckList(OCNaroWrappers::OCInterface_CheckIterator^ chl) ;

//! Determines check status for an entity regarding last call to <br>
//!           QueryCheckList : <br>
//!           -1 : <ent> unknown in the model, ignored <br>
//!            0 : no check at all, immediate or inherited thru Graph <br>
//!            1 : immediate warning (no fail), no inherited check <br>
//!            2 : immediate fail, no inherited check <br>
//!           +10 : idem but some inherited warning (no fail) <br>
//!           +20 : idem but some inherited fail <br>
 /*instead*/  Standard_Integer QueryCheckStatus(OCNaroWrappers::OCStandard_Transient^ ent) ;

//! Determines if <entdad> is parent of <entson> (in the graph), <br>
//!           returns : -1 if no; 0 if <entdad> = <entson> <br>
//!           1 if immediate parent, > 1 if parent, gives count of steps <br>
 /*instead*/  Standard_Integer QueryParent(OCNaroWrappers::OCStandard_Transient^ entdad, OCNaroWrappers::OCStandard_Transient^ entson) ;

//! Sets a list of Parameters, i.e. TypedValue, to be handled <br>
//!           through an Editor <br>
//!           The two lists are parallel, if <params> is longer than <uses>, <br>
//!           surnumeral parameters are for general use <br>
//! <br>
//!           EditForms are created to handle these parameters (list, edit) <br>
//!           on the basis of a ParamEditor  xst-params-edit <br>
//! <br>
//!           A use number dispatches the parameter to a given EditForm <br>
//!           EditForms are defined as follows <br>
//!           Name                Use   Means <br>
//!           xst-params          all   All Parameters (complete list) <br>
//!           xst-params-general  1     Generals <br>
//!           xst-params-load     2     LoadFile (no Transfer) <br>
//!           xst-params-send     3     SendFile (Write, no Transfer) <br>
//!           xst-params-split    4     Split <br>
//!           xst-param-read      5     Transfer on Reading <br>
//!           xst-param-write     6     Transfer on Writing <br>
 /*instead*/  void SetParams(OCNaroWrappers::OCTColStd_SequenceOfTransient^ params, OCNaroWrappers::OCTColStd_SequenceOfInteger^ uselist) ;

//! Traces the Statics attached to a given use number <br>
//!           If <use> is given positive (normal), the trace is embedded <br>
//!           with a header and a trailer <br>
//!           If <use> is negative, just values are printed <br>
//!             (this allows to make compositions) <br>
//!           Remark : use number  5 commands use -2 to be traced <br>
//!           Remark : use numbers 4 and 6 command use -3 to be traced <br>
 /*instead*/  void TraceStatics(Standard_Integer use, Standard_Integer mode) ;

//! Dumps contents of the ShareOut (on "cout") <br>
 /*instead*/  void DumpShare() ;

//! Lists the Labels of all Items of the WorkSession <br>
//!           If <label> is defined, lists labels which contain it <br>
 /*instead*/  void ListItems(System::String^ label) ;

//! Lists the Modifiers of the session (for each one, displays <br>
//!           its Label). Listing is done following Ranks (Modifiers are <br>
//!           invoked following their ranks) <br>
//!           Model Modifiers if <formodel> is True, File Modifiers else <br>
 /*instead*/  void ListFinalModifiers(System::Boolean formodel) ;

//! Lists a Selection and its Sources (see SelectionIterator), <br>
//!           given its rank in the list <br>
 /*instead*/  void DumpSelection(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Lists the content of the Input Model (if there is one) <br>
//!           According level : 0 -> gives only count of Entities and Roots <br>
//!           1 -> Lists also Roots;  2 -> Lists all Entities (by TraceType) <br>
//!           3 -> Performs a call to CheckList (Fails) and lists the result <br>
//!           4 -> as 3 but all CheckList (Fails + Warnings) <br>
//!           5,6,7  : as 3 but resp. Count,List,Labels by Fail <br>
//!           8,9,10 : as 4 but resp. Count,List,Labels by message <br>
 /*instead*/  void DumpModel(Standard_Integer level, OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Dumps the current Model (as inherited DumpModel), on currently <br>
//!           defined Default Trace File (default is standard output) <br>
 /*instead*/  void TraceDumpModel(Standard_Integer mode) ;

//! Dumps a starting entity according to the current norm. <br>
//!           To do this, it calls DumpEntity from WorkLibrary. <br>
//!           <level> is to be interpreted for each norm : see specific <br>
//!           classes of WorkLibrary for it. Generally, 0 if for very basic <br>
//!           (only type ...), greater values give more and more details. <br>
 /*instead*/  void DumpEntity(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level, OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Prints main informations about an entity : its number, type, <br>
//!           validity (and checks if any), category, shareds and sharings.. <br>
//!           mutable because it can recompute checks as necessary <br>
 /*instead*/  void PrintEntityStatus(OCNaroWrappers::OCStandard_Transient^ ent, OCNaroWrappers::OCMessage_Messenger^ S) ;

//! Dumps an entity from the current Model as inherited DumpEntity <br>
//!           on currently defined Default Trace File <br>
//!           (<level> interpreted according to the Norm, see WorkLibrary) <br>
 /*instead*/  void TraceDumpEntity(OCNaroWrappers::OCStandard_Transient^ ent, Standard_Integer level) ;

//! Prints a CheckIterator to the current Trace File, controlled <br>
//!           with the current Model <br>
//!           complete or fails only, according to <failsonly> <br>
//!           <mode> defines the mode of printing <br>
//!           0 : sequential, according entities; else with a CheckCounter <br>
//!           1 : according messages, count of entities <br>
//!           2 : id but with list of entities, designated by their numbers <br>
//!           3 : as 2 but with labels of entities <br>
 /*instead*/  void PrintCheckList(OCNaroWrappers::OCInterface_CheckIterator^ checklist, System::Boolean failsonly, OCIFSelect_PrintCount mode) ;

//! Prints a SignatureList to the current Trace File, controlled <br>
//!           with the current Model <br>
//!           <mode> defines the mode of printing (see SignatureList) <br>
 /*instead*/  void PrintSignatureList(OCNaroWrappers::OCIFSelect_SignatureList^ signlist, OCIFSelect_PrintCount mode) ;

//! Displays the list of Entities selected by a Selection (i.e. <br>
//!           the result of EvalSelection). <br>
 /*instead*/  void EvaluateSelection(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Displays the result of applying a Dispatch on the input Model <br>
//!           (also shows Remainder if there is) <br>
//!           <mode> = 0 (default), displays nothing else <br>
//!           <mode> = 1 : displays also duplicated entities (because of <br>
//!              this dispatch) <br>
//!           <mode> = 2 : displays the entities of the starting Model <br>
//!              which are not taken by this dispatch (forgotten entities) <br>
//!           <mode> = 3 : displays both duplicated and forgotten entities <br>
//!           Remark : EvaluateComplete displays these data evaluated for <br>
//!           for all the dispatches, if there are several <br>
 /*instead*/  void EvaluateDispatch(OCNaroWrappers::OCIFSelect_Dispatch^ disp, Standard_Integer mode) ;

//! Displays the effect of applying the ShareOut on the input <br>
//!           Model. <br>
//!           <mode> = 0 (default) : displays only roots for each packet, <br>
//!           <mode> = 1 : displays all entities for each packet, plus <br>
//!             duplicated entities <br>
//!           <mode> = 2 : same as <mode> = 1, plus displays forgotten <br>
//!             entities (which are in no packet at all) <br>
 /*instead*/  void EvaluateComplete(Standard_Integer mode) ;

//! Internal method which displays an EntityIterator <br>
//!           <mode> 0 gives short display (only entity numbers) <br>
//!           1 gives a more complete trace (1 line per Entity) <br>
//!           (can be used each time a trace has to be output from a list) <br>
//!           2 gives a form suitable for givelist : (n1,n2,n3...) <br>
 /*instead*/  void ListEntities(OCNaroWrappers::OCInterface_EntityIterator^ iter, Standard_Integer mode) ;

~OCIFSelect_WorkSession()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
