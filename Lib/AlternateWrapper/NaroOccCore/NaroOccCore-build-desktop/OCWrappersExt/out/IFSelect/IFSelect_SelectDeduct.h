// File generated by CPPExt (Transient)
//
#ifndef _IFSelect_SelectDeduct_OCWrappers_HeaderFile
#define _IFSelect_SelectDeduct_OCWrappers_HeaderFile

// include the wrapped class
#include <IFSelect_SelectDeduct.hxx>
#include "../Converter.h"

#include "IFSelect_Selection.h"



namespace OCNaroWrappers
{

ref class OCIFSelect_Selection;
ref class OCIFSelect_SelectPointed;
ref class OCInterface_EntityIterator;
ref class OCInterface_Graph;
ref class OCIFSelect_SelectionIterator;


//! A SelectDeduct determines a list of Entities from an Input <br>
//!           Selection, by a computation : Output list is not obliged to be <br>
//!           a sub-list of Input list <br>
//!           (for more specific, see SelectExtract for filtered sub-lists, <br>
//!            and SelectExplore for recurcive exploration) <br>
//! <br>
//!           A SelectDeduct may use an alternate input for one shot <br>
//!           This allows to use an already existing definition, by <br>
//!           overloading the input selection by an alternate list, <br>
//!           already defined, for one use : <br>
//!           If this alternate list is set, InputResult queries it instead <br>
//!           of calling the input selection, then clears it immediately <br>
public ref class OCIFSelect_SelectDeduct : OCIFSelect_Selection {

protected:
  // dummy constructor;
  OCIFSelect_SelectDeduct(OCDummy^) : OCIFSelect_Selection((OCDummy^)nullptr) {};

public:

// constructor from native
OCIFSelect_SelectDeduct(Handle(IFSelect_SelectDeduct)* nativeHandle);

// Methods PUBLIC

//! Defines or Changes the Input Selection <br>
 /*instead*/  void SetInput(OCNaroWrappers::OCIFSelect_Selection^ sel) ;

//! Returns the Input Selection <br>
 /*instead*/  OCIFSelect_Selection^ Input() ;

//! Returns True if the Input Selection is defined, False else <br>
 /*instead*/  System::Boolean HasInput() ;

//! Tells if an Alternate List has been set, i.e. : the Alternate <br>
//!           Definition is present and set <br>
 /*instead*/  System::Boolean HasAlternate() ;

//! Returns the Alternate Definition <br>
//!           It is returned modifiable, hence an already defined <br>
//!           SelectPointed can be used <br>
//!           But if it was not yet defined, it is created the first time <br>
//! <br>
//!           It is exploited by InputResult <br>
 /*instead*/  OCIFSelect_SelectPointed^ Alternate() ;

//! Returns the Result determined by Input Selection, as Unique <br>
//!           if Input Selection is not defined, returns an empty list. <br>
//! <br>
//!           If Alternate is set, InputResult takes its definition instead <br>
//!           of calling the Input Selection, then clears it <br>
 /*instead*/  OCInterface_EntityIterator^ InputResult(OCNaroWrappers::OCInterface_Graph^ G) ;

//! Puts in an Iterator the Selections from which "me" depends <br>
//!           This list contains one Selection : the InputSelection <br>
 /*instead*/  void FillIterator(OCNaroWrappers::OCIFSelect_SelectionIterator^ iter) ;

~OCIFSelect_SelectDeduct()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
