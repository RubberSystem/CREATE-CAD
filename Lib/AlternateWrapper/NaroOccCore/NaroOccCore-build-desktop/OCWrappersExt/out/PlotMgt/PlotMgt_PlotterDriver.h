// File generated by CPPExt (Transient)
//
#ifndef _PlotMgt_PlotterDriver_OCWrappers_HeaderFile
#define _PlotMgt_PlotterDriver_OCWrappers_HeaderFile

// include the wrapped class
#include <PlotMgt_PlotterDriver.hxx>
#include "../Converter.h"

#include "../Aspect/Aspect_Driver.h"

#include "../TCollection/TCollection_AsciiString.h"
#include "../Aspect/Aspect_TypeOfColorSpace.h"
#include "../Aspect/Aspect_TypeOfPrimitive.h"
#include "../TShort/TShort_Array1OfShortReal.h"
#include "../Aspect/Aspect_PlotMode.h"
#include "../Aspect/Aspect_TypeOfText.h"


namespace OCNaroWrappers
{

ref class OCPlotMgt_Plotter;
ref class OCPlotMgt_HListOfMFTFonts;
ref class OCTShort_HArray1OfShortReal;
ref class OCPlotMgt_TextManager;
ref class OCAspect_ColorMap;
ref class OCAspect_TypeMap;
ref class OCAspect_WidthMap;
ref class OCAspect_MarkMap;
ref class OCAspect_FontMap;
ref class OCStandard_Transient;
ref class OCTShort_Array1OfShortReal;
ref class OCTCollection_ExtendedString;
ref class OCTCollection_AsciiString;



public ref class OCPlotMgt_PlotterDriver : OCAspect_Driver {

protected:
  // dummy constructor;
  OCPlotMgt_PlotterDriver(OCDummy^) : OCAspect_Driver((OCDummy^)nullptr) {};

public:

// constructor from native
OCPlotMgt_PlotterDriver(Handle(PlotMgt_PlotterDriver)* nativeHandle);

// Methods PUBLIC


OCPlotMgt_PlotterDriver(OCNaroWrappers::OCPlotMgt_Plotter^ aPlotter, System::String^ aFileName, System::Boolean fCreateFile);


OCPlotMgt_PlotterDriver(System::String^ aFileName, System::Boolean fCreateFile);


virtual /*instead*/  System::Boolean Spool(OCAspect_PlotMode aPlotMode, System::String^ aReserved1, System::Boolean aReserved2) ;


virtual /*instead*/  void SetLineAttrib(Standard_Integer ColorIndex, Standard_Integer TypeIndex, Standard_Integer WidthIndex) ;


virtual /*instead*/  void SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex) ;


virtual /*instead*/  void SetTextAttrib(Standard_Integer ColorIndex, Standard_Integer FontIndex, Quantity_PlaneAngle aSlant, Quantity_Factor aHScale, Quantity_Factor aWScale, System::Boolean isUnderlined) ;


virtual /*instead*/  void SetPolyAttrib(Standard_Integer ColorIndex, Standard_Integer TileIndex, System::Boolean DrawEdge) ;


virtual /*instead*/  void SetMarkerAttrib(Standard_Integer ColorIndex, Standard_Integer WidthIndex, System::Boolean FillMarker) ;


 /*instead*/  void SetPixelSize(Standard_Real aSize) ;

//! Begin an incremental polyline primitive of <aNumber> of points . <br>
//!  Warning: Points must be added by the the DrawPoint() method. <br>
virtual /*instead*/  void BeginPolyline(Standard_Integer aNumber) ;

//! Begin an incremental polygon primitive of <aNumber> of points . <br>
//!  Warning: Points must be added by the the DrawPoint() method. <br>
virtual /*instead*/  void BeginPolygon(Standard_Integer aNumber) ;

//! Begin a set of segments. <br>
//!  Warning: Segments must be added by the DrawSegment() method. <br>
virtual /*instead*/  void BeginSegments() ;

//! Begin a set of circles or ellipses. <br>
//!  Warning: Arcs must be added by the DrawArc() methods. <br>
virtual /*instead*/  void BeginArcs() ;

//! Begin a set of polygon circles or ellipses. <br>
//!  Warning: Arcs must be added by the DrawPolyArc() methods. <br>
virtual /*instead*/  void BeginPolyArcs() ;

//! Begin a set of markers. <br>
//!  Warning: Markers must be added by the DrawMarker() method. <br>
virtual /*instead*/  void BeginMarkers() ;

//! Begin a set of points. <br>
//!  Warning: Points must be added by the DrawPoint() method. <br>
virtual /*instead*/  void BeginPoints() ;

//! Close the last Begining primitive <br>
virtual /*instead*/  void ClosePrimitive() ;


virtual /*instead*/  System::Boolean IsKnownImage(OCNaroWrappers::OCStandard_Transient^ anImage) ;

//! Returns Standard_True and the Image Size in PIXEL <br>
//!          if the image file exist and can be computed by the driver, <br>
virtual /*instead*/  System::Boolean SizeOfImageFile(System::String^ anImageFile, Standard_Integer& aWidth, Standard_Integer& aHeight) ;


virtual /*instead*/  void ClearImage(OCNaroWrappers::OCStandard_Transient^ anImageId) ;

//! Clears the image associated with the image file . <br>
virtual /*instead*/  void ClearImageFile(System::String^ anImageFile) ;

//! Draws the image  in <me>. <br>
//!          <aX>, <aY> is the center of the image. <br>
//!          Image center must be defined in DPU space. <br>
virtual /*instead*/  void DrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY) ;

//! Draws the image file in <me>. <br>
//!          <aX>, <aY> is the center of the image. <br>
//!          Image center must be defined in DPU space. <br>
virtual /*instead*/  void DrawImageFile(System::String^ anImageFile, Standard_ShortReal aX, Standard_ShortReal aY, Quantity_Factor aScale) ;

//! Draw a complete image . <br>
//!          Image size must be defined in DPU space> <br>
virtual /*instead*/  void FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels) ;

//! Fills a line of the Image . <br>
virtual /*instead*/  void FillAndDrawImage(OCNaroWrappers::OCStandard_Transient^ anImageId, Standard_ShortReal aX, Standard_ShortReal aY, Standard_Integer anIndexOfLine, Standard_Integer aWidth, Standard_Integer aHeight, Standard_Address anArrayOfPixels) ;

//! Draws a 1 PIXEL point depending of the SetMarkerAttrib() <br>
 /*instead*/  void DrawPoint(Standard_ShortReal X, Standard_ShortReal Y) ;

//! Draw a segment depending of the SetLineAttrib() attributes. <br>
 /*instead*/  void DrawSegment(Standard_ShortReal X1, Standard_ShortReal Y1, Standard_ShortReal X2, Standard_ShortReal Y2) ;

//! Draw a rectangle. aX,aY is start point <br>
//!      aDX , aDY are horizontal and vertical dimensions <br>
 /*instead*/  void DrawRectangle(Standard_ShortReal aX, Standard_ShortReal aY, Standard_ShortReal aDX, Standard_ShortReal aDY) ;

//! Draw a polyline depending of the SetLineAttrib() attributes. <br>
 /*instead*/  void DrawPolyline(OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY) ;

//! Draw a polygon depending of the SetPolyAttrib() attributes. <br>
 /*instead*/  void DrawPolygon(OCNaroWrappers::OCTShort_Array1OfShortReal^ aListX, OCNaroWrappers::OCTShort_Array1OfShortReal^ aListY) ;

//! Draws an Ellipsoid arc of center <X,Y> and Radius <br>
 /*instead*/  System::Boolean DrawArc(Standard_ShortReal X, Standard_ShortReal Y, Standard_ShortReal anXradius, Standard_ShortReal anYradius, Standard_ShortReal aStartAngle, Standard_ShortReal anOpenAngle) ;

//! Draws an filled Ellipsoid arc of center <X,Y> and Radius <br>
 /*instead*/  System::Boolean DrawPolyArc(Standard_ShortReal X, Standard_ShortReal Y, Standard_ShortReal anXradius, Standard_ShortReal anYradius, Standard_ShortReal aStartAngle, Standard_ShortReal anOpenAngle) ;

//! Draws the marker <aMarker> <br>
 /*instead*/  void DrawMarker(Standard_Integer aMarker, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Standard_ShortReal Width, Standard_ShortReal Height, Standard_ShortReal Angle) ;

//! Draws a text depending of the SetTextAttrib() attributes. <br>
//!  Warning: Coordinates must be defined in DWU space. <br>
 /*instead*/  void DrawText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Standard_ShortReal anAngle, OCAspect_TypeOfText aType) ;

//! Draws a text depending of the SetTextAttrib() attributes. <br>
//!  Warning: Coordinates must be defined in DWU space. <br>
 /*instead*/  void DrawText(System::String^ aText, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Standard_ShortReal anAngle, OCAspect_TypeOfText aType) ;

//! Draws an framed text depending of the <br>
//! SetTextAttrib() and SetPolyAttrib() attributes. <br>
//!  Warning: Coordinates must be defined in DWU space. <br>
//!          <aMarge> defines the ratio of the space between the <br>
//!          polygon borders and the bounding box of the text and <br>
//!          depending of the height of the text. <br>
 /*instead*/  void DrawPolyText(OCNaroWrappers::OCTCollection_ExtendedString^ aText, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Quantity_Ratio aMargin, Standard_ShortReal anAngle, OCAspect_TypeOfText aType) ;

//! Draws an framed text depending of the <br>
//! SetTextAttrib() and SetPolyAttrib() attributes. <br>
//!  Warning: Coordinates must be defined in DWU space. <br>
//!          <aMarge> defines the ratio of the space between the <br>
//!          polygon borders and the bounding box of the text and <br>
//!          depending of the height of the text. <br>
 /*instead*/  void DrawPolyText(System::String^ aText, Standard_ShortReal Xpos, Standard_ShortReal Ypos, Quantity_Ratio aMargin, Standard_ShortReal anAngle, OCAspect_TypeOfText aType) ;


 /*instead*/  OCPlotMgt_Plotter^ Plotter() ;


 /*instead*/  OCTCollection_AsciiString^ PlotFileName() ;


 /*instead*/  OCTCollection_AsciiString^ DrawingName() ;


 /*instead*/  OCTCollection_AsciiString^ SpoolDirectory() ;

//! Returns the Available WorkSpace in DWU coordinates <br>
virtual /*instead*/  void WorkSpace(Quantity_Length& Width, Quantity_Length& Height) ;

//! Returns the DWU value depending of the PIXEL value. <br>
virtual /*instead*/  Quantity_Length Convert(Standard_Integer PV) ;

//! Returns the PIXEL value depending of the DWU value. <br>
virtual /*instead*/  Standard_Integer Convert(Quantity_Length DV) ;

//! Returns the DWU position depending of the PIXEL position. <br>
virtual /*instead*/  void Convert(Standard_Integer PX, Standard_Integer PY, Quantity_Length& DX, Quantity_Length& DY) ;

//! Returns the PIXEL position depending of the DWU position . <br>
virtual /*instead*/  void Convert(Quantity_Length DX, Quantity_Length DY, Standard_Integer& PX, Standard_Integer& PY) ;


 /*instead*/  void LineAttrib(Standard_Integer& ColorIndex, Standard_Integer& TypeIndex, Standard_Integer& WidthIndex) ;


 /*instead*/  void PolyAttrib(Standard_Integer& ColorIndex, Standard_Integer& TileIndex, System::Boolean& EdgeFlag) ;

~OCPlotMgt_PlotterDriver()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
