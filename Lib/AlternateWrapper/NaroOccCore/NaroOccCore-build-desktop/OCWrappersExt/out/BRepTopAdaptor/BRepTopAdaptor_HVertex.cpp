// File generated by CPPExt (CPP file)
//

#include "BRepTopAdaptor_HVertex.h"
#include "../Converter.h"
#include "../BRepAdaptor/BRepAdaptor_HCurve2d.h"
#include "../TopoDS/TopoDS_Vertex.h"
#include "../gp/gp_Pnt2d.h"
#include "../Adaptor2d/Adaptor2d_HCurve2d.h"
#include "../Adaptor3d/Adaptor3d_HVertex.h"


using namespace OCNaroWrappers;

OCBRepTopAdaptor_HVertex::OCBRepTopAdaptor_HVertex(Handle(BRepTopAdaptor_HVertex)* nativeHandle) : OCAdaptor3d_HVertex((OCDummy^)nullptr)

{
  this->nativeHandle = new Handle_BRepTopAdaptor_HVertex(*nativeHandle);
}

OCBRepTopAdaptor_HVertex::OCBRepTopAdaptor_HVertex(OCNaroWrappers::OCTopoDS_Vertex^ Vtx, OCNaroWrappers::OCBRepAdaptor_HCurve2d^ Curve) : OCAdaptor3d_HVertex((OCDummy^)nullptr)

{
  nativeHandle = new Handle_BRepTopAdaptor_HVertex(new BRepTopAdaptor_HVertex(*((TopoDS_Vertex*)Vtx->Handle), *((Handle_BRepAdaptor_HCurve2d*)Curve->Handle)));
}

OCTopoDS_Vertex^ OCBRepTopAdaptor_HVertex::Vertex()
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = (*((Handle_BRepTopAdaptor_HVertex*)nativeHandle))->Vertex();
  return gcnew OCTopoDS_Vertex(tmp);
}

OCTopoDS_Vertex^ OCBRepTopAdaptor_HVertex::ChangeVertex()
{
  TopoDS_Vertex* tmp = new TopoDS_Vertex();
  *tmp = (*((Handle_BRepTopAdaptor_HVertex*)nativeHandle))->ChangeVertex();
  return gcnew OCTopoDS_Vertex(tmp);
}

OCgp_Pnt2d^ OCBRepTopAdaptor_HVertex::Value()
{
  gp_Pnt2d* tmp = new gp_Pnt2d();
  *tmp = (*((Handle_BRepTopAdaptor_HVertex*)nativeHandle))->Value();
  return gcnew OCgp_Pnt2d(tmp);
}

 Standard_Real OCBRepTopAdaptor_HVertex::Parameter(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C)
{
  return (*((Handle_BRepTopAdaptor_HVertex*)nativeHandle))->Parameter(*((Handle_Adaptor2d_HCurve2d*)C->Handle));
}

 Standard_Real OCBRepTopAdaptor_HVertex::Resolution(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C)
{
  return (*((Handle_BRepTopAdaptor_HVertex*)nativeHandle))->Resolution(*((Handle_Adaptor2d_HCurve2d*)C->Handle));
}

 OCTopAbs_Orientation OCBRepTopAdaptor_HVertex::Orientation()
{
  return (OCTopAbs_Orientation)((*((Handle_BRepTopAdaptor_HVertex*)nativeHandle))->Orientation());
}

 System::Boolean OCBRepTopAdaptor_HVertex::IsSame(OCNaroWrappers::OCAdaptor3d_HVertex^ Other)
{
  return OCConverter::StandardBooleanToBoolean((*((Handle_BRepTopAdaptor_HVertex*)nativeHandle))->IsSame(*((Handle_Adaptor3d_HVertex*)Other->Handle)));
}


