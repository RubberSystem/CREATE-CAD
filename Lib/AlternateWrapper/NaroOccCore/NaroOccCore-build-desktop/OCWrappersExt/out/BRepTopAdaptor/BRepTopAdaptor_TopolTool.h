// File generated by CPPExt (Transient)
//
#ifndef _BRepTopAdaptor_TopolTool_OCWrappers_HeaderFile
#define _BRepTopAdaptor_TopolTool_OCWrappers_HeaderFile

// include the wrapped class
#include <BRepTopAdaptor_TopolTool.hxx>
#include "../Converter.h"

#include "../Adaptor3d/Adaptor3d_TopolTool.h"

#include "../TopExp/TopExp_Explorer.h"
#include "../TopoDS/TopoDS_Face.h"
#include "../TColStd/TColStd_ListOfTransient.h"
#include "../TColStd/TColStd_ListIteratorOfListOfTransient.h"
#include "../TopAbs/TopAbs_State.h"
#include "../TopAbs/TopAbs_Orientation.h"


namespace OCNaroWrappers
{

ref class OCBRepAdaptor_HCurve2d;
ref class OCAdaptor3d_HSurface;
ref class OCAdaptor2d_HCurve2d;
ref class OCAdaptor3d_HVertex;
ref class OCgp_Pnt2d;
ref class OCgp_Pnt;



public ref class OCBRepTopAdaptor_TopolTool : OCAdaptor3d_TopolTool {

protected:
  // dummy constructor;
  OCBRepTopAdaptor_TopolTool(OCDummy^) : OCAdaptor3d_TopolTool((OCDummy^)nullptr) {};

public:

// constructor from native
OCBRepTopAdaptor_TopolTool(Handle(BRepTopAdaptor_TopolTool)* nativeHandle);

// Methods PUBLIC


OCBRepTopAdaptor_TopolTool();


OCBRepTopAdaptor_TopolTool(OCNaroWrappers::OCAdaptor3d_HSurface^ Surface);


virtual /*instead*/  void Initialize() override;


virtual /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor3d_HSurface^ S) override;


virtual /*instead*/  void Initialize(OCNaroWrappers::OCAdaptor2d_HCurve2d^ Curve) override;


virtual /*instead*/  void Init() override;


virtual /*instead*/  System::Boolean More() override;


virtual /*instead*/  OCAdaptor2d_HCurve2d^ Value() override;


virtual /*instead*/  void Next() override;


virtual /*instead*/  Standard_Address Edge() override;


virtual /*instead*/  void InitVertexIterator() override;


virtual /*instead*/  System::Boolean MoreVertex() override;


virtual /*instead*/  OCAdaptor3d_HVertex^ Vertex() override;


virtual /*instead*/  void NextVertex() override;


virtual /*instead*/  OCTopAbs_State Classify(OCNaroWrappers::OCgp_Pnt2d^ P2d, Standard_Real Tol, System::Boolean RecadreOnPeriodic) override;

//! see the code for specifications) <br>
virtual /*instead*/  System::Boolean IsThePointOn(OCNaroWrappers::OCgp_Pnt2d^ P2d, Standard_Real Tol, System::Boolean RecadreOnPeriodic) override;

//! If the function returns the orientation of the arc. <br>
//!          If the orientation is FORWARD or REVERSED, the arc is <br>
//!          a "real" limit of the surface. <br>
//!          If the orientation is INTERNAL or EXTERNAL, the arc is <br>
//!          considered as an arc on the surface. <br>
virtual /*instead*/  OCTopAbs_Orientation Orientation(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) override;

//! If the function returns the orientation of the arc. <br>
//!          If the orientation is FORWARD or REVERSED, the arc is <br>
//!          a "real" limit of the surface. <br>
//!          If the orientation is INTERNAL or EXTERNAL, the arc is <br>
//!          considered as an arc on the surface. <br>
virtual /*instead*/  OCTopAbs_Orientation Orientation(OCNaroWrappers::OCAdaptor3d_HVertex^ C) override;

//! answers if arcs and vertices may have 3d representations, <br>
//!          so that we could use Tol3d and Pnt methods. <br>
virtual /*instead*/  System::Boolean Has3d() override;

//! returns 3d tolerance of the arc C <br>
virtual /*instead*/  Standard_Real Tol3d(OCNaroWrappers::OCAdaptor2d_HCurve2d^ C) override;

//! returns 3d tolerance of the vertex V <br>
virtual /*instead*/  Standard_Real Tol3d(OCNaroWrappers::OCAdaptor3d_HVertex^ V) override;

//! returns 3d point of the vertex V <br>
virtual /*instead*/  OCgp_Pnt^ Pnt(OCNaroWrappers::OCAdaptor3d_HVertex^ V) override;


virtual /*instead*/  void ComputeSamplePoints() override;

//! compute the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamplesU() override;

//! compute the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamplesV() override;

//! compute the sample-points for the intersections algorithms <br>
virtual /*instead*/  Standard_Integer NbSamples() override;


virtual /*instead*/  void SamplePoint(Standard_Integer Index, OCNaroWrappers::OCgp_Pnt2d^ P2d, OCNaroWrappers::OCgp_Pnt^ P3d) override;


virtual /*instead*/  System::Boolean DomainIsInfinite() override;

~OCBRepTopAdaptor_TopolTool()
{
  nativeHandle->Nullify();
  delete nativeHandle;
}

};

}; // OCNaroWrappers

#endif
