-- File:	CPPExt_Template.edl
-- Author:	Kernel (CLE)
-- History:	Tue Sep 19 17:25:59 1995	Kernel	Creation
-- Copyright:	Matra Datavision 1995
-- Purpose:     C++ extractor


@template ManipulateByHandleDef(%Class) is
$
$protected:
$  Handle(%Class)* nativeHandle;
$  OC%Class(OCDummy^) {};
$
$public:
$  property Handle(%Class)* Handle
$  {
$    Handle(%Class)* get()
$    {
$      return nativeHandle;
$    }
$  }
$
@end;

@template ManipulateByValueDef(%Class) is
$
$protected:
$  %Class* nativeHandle;
$  OC%Class(OCDummy^) {};
$
$public:
$  property %Class* Handle
$  {
$    %Class* get()
$    {
$      return nativeHandle;
$    }
$  }
$
@end;

@template DummyCtorDef(%Class, %BaseClass) is
$
$protected:
$  // dummy constructor;
$  OC%Class(OCDummy^) : OC%BaseClass((OCDummy^)nullptr) {};
$
$public:
@end;

@template CallBaseConstructorDef(%BaseClass) is
$: OC%BaseClass((OCDummy^)nullptr)
@end;

@template CtorFromNativeHeader(%Class) is
$OC%Class(%Class* nativeHandle);\^
@end;

@template CtorFromNativeHandleHeader(%Class) is
$OC%Class(Handle(%Class)* nativeHandle);\^
@end;

@template CtorFromNative(%Class, %CallBaseCtor) is
$OC%Class::OC%Class(%Class* nativeHandle) %CallBaseCtor
${
$  this->nativeHandle = nativeHandle;
$}\^
@end;

@template CtorFromNativeHandle(%Class, %CallBaseCtor) is
$OC%Class::OC%Class(Handle(%Class)* nativeHandle) %CallBaseCtor
${
$  this->nativeHandle = new Handle_%Class(*nativeHandle);
$}\^
@end;

-- ================================
-- extraction of the cpp file
-- ================================
@template CppExtraction (%Class,
						 %CppMethods,
						 %CtorFromNative,
						 %CppIncludes) is
$// File generated by CPPExt (CPP file)
$//
$
$#include "%Class.h"
$#include "../Converter.h"
$%CppIncludes
$
$using namespace OCNaroWrappers;
$
$%CtorFromNative
$%CppMethods
$
@end;


-- ================================
-- extraction of a normal c++ class
-- ================================
@template MPVClass (%ClassComment,
                    %Class,
                    %TICIncludes,
                    %Inherits,
                    %IncludeInherits, %IncludeHeaders,
                    %NativeWrapp,
                    %CtorFromNativeHeader,
                    %TICPublicmets) is
$// File generated by CPPExt (MPV)
$//
$#ifndef _%Class_OCWrappers_HeaderFile
$#define _%Class_OCWrappers_HeaderFile
$
$// include native header
$#include <%Class.hxx>
$#include "../Converter.h"
$
$%IncludeInherits
$%IncludeHeaders
$
$namespace OCNaroWrappers
${
$
$%TICIncludes
$
$%ClassComment
$public ref class OC%Class %Inherits {
$%NativeWrapp
$// constructor from native
$%CtorFromNativeHeader
$
$// Methods PUBLIC
$%TICPublicmets
$
$};
$
$}; // OCNaroWrappers
$
$#endif
@end;


-- ================================
-- extraction of a normal c++ class to API
-- ================================
@template API (%ClassComment,
                    %Class,
                    %ApiMethods,
                    %TICIncludes,
                    %Inherits, %IncludeApiInherits,
                    %IncludeInherits, %IncludeHeaders,
                    %NativeWrapp,
                    %CtorFromNativeHeader,
                    %TICPublicmets) is
$ <Class Name="%Class">
$%IncludeApiInherits
$<Methods>
$%ApiMethods
$</Methods>
$</Class>
@end;


-- ================================
-- extraction of a storable class
-- ================================
@template StorableClass  (%ClassComment,
						  %Class,
                          %TICIncludes,
						  %IncludeInherits, %IncludeHeaders,
	                      %Inherits,
	                      %NativeWrapp,
                          %TICPublicmets) is
$// File generated by CPPExt (Storable)
$//
$#ifndef _%Class_OCWrappers_HeaderFile
$#define _%Class_OCWrappers_HeaderFile
$
$// Include the wrapped header
$#include <%Class.hxx>
$#include "../Converter.h"
$
$%IncludeInherits
$%IncludeHeaders
$
$namespace OCNaroWrappers 
${
$
$%TICIncludes
$
$%ClassComment
$public ref class OC%Class %Inherits {
$%NativeWrapp
$// constructor from native
$OC%Class(%Class* nativeHandle);
$
$// Methods PUBLIC
$%TICPublicmets
$
$};
$
$}; // OCNaroWrappers
$
$#endif
@end;


-- ================================
-- extraction of a transient class
-- ================================
@template TransientClass (%ClassComment,
						  %Class,
						  %IncludeInherits, %IncludeHeaders,
                          %TICIncludes,
	                      %Inherits,
	                      %NativeWrapp,
                          %TICPublicmets) is
$// File generated by CPPExt (Transient)
$//
$#ifndef _%Class_OCWrappers_HeaderFile
$#define _%Class_OCWrappers_HeaderFile
$
$// include the wrapped class
$#include <%Class.hxx>
$#include "../Converter.h"
$
$%IncludeInherits
$%IncludeHeaders
$
$namespace OCNaroWrappers
${
$
$%TICIncludes
$
$%ClassComment
$public ref class OC%Class %Inherits {
$%NativeWrapp
$// constructor from native
$OC%Class(Handle(%Class)* nativeHandle);
$
$// Methods PUBLIC
$%TICPublicmets
$
$};
$
$}; // OCNaroWrappers
$
$#endif
@end;


-- ================================
-- extraction of a transient class
-- ================================
@template PersistentClass(%ClassComment,
						  %Class,
						  %IncludeInherits, %IncludeHeaders,
                          %TICIncludes,
	                      %Inherits,
	                      %NativeWrapp,
                          %TICPublicmets) is
$// File generated by CPPExt (Transient)
$//
$#ifndef _%Class_OCWrappers_HeaderFile
$#define _%Class_OCWrappers_HeaderFile
$
$// include the wrapped class
$#include <%Class.hxx>
$
$%IncludeInherits
$%IncludeHeaders
$
$namespace OCNaroWrappers
${
$
$%TICIncludes
$
$%ClassComment
$public ref class OC%Class %Inherits {
$%NativeWrapp
$// constructor from native
$OC%Class(Handle(%Class)* nativeHandle);
$
$// Methods PUBLIC
$%TICPublicmets
$
$};
$
$}; // OCNaroWrappers
$
$#endif
@end;


-- ================================
-- extraction of a package
-- ================================
@template Package(%ClassComment,
                  %Class,
                  %TICIncludes,
                  %Inherits,
                  %TICPublicmets) is
$// File generated by CPPExt (Package)
$//
$
$#ifndef _%Class_OCWrappers_HeaderFile
$#define _%Class_OCWrappers_HeaderFile
$
$// Include the wrapped header
$#include <%Class.hxx>
$
$%TICIncludes
$
$namespace OCNaroWrappers
${
$%ClassComment
$public ref class OC%Class abstract sealed
${
$
$public:
$// Methods
$%TICPublicmets
$
$};
$
$}; // OCNaroWrappers
$
$#endif
@end;

-- ================================
-- extraction of a package to API
-- ================================
@template APIPackage (%ClassComment,
                    %Class,
                    %ApiMethods) is
$ <Class Name="%Class">
$<Methods>
$%ApiMethods
$</Methods>
$</Class>
@end;

-- ================================
-- extraction of a package to API
-- ================================
@template APITransient (%ClassComment,
                    %Class, %IncludeApiInherits,
                    %ApiMethods) is
$ <Class Name="%Class">
$%IncludeApiInherits
$<Methods>
$%ApiMethods
$</Methods>
$</Class>
@end;

-- ===============
-- Enum extraction
-- ===============
@template EnumHXX(%EnumComment, %Class, %Values) is
$// File generated by CPPExt (Enum)
$
$#ifndef _%Class_OCWrappers_HeaderFile
$#define _%Class_OCWrappers_HeaderFile
$
$namespace OCNaroWrappers
${
$
$%EnumComment
$public enum class OC%Class
${ 
$ %Values
$};
$
$}; // OCNaroWrappers
$
$#endif
@end;

-- ===============
-- Enum API extraction
-- ===============
@template EnumAPI(%EnumComment, %Class, %ApiValues) is
$<Enum Name="%Class">
$ %ApiValues
$</Enum>
@end;

-- ================
-- Alias extraction
-- ================
@template AliasHXX(%Class, %Inherits, %HandleTypedef) is
$// File generated by CPPExt (Alias)
$
$#ifndef _%Class_OCWrappers_HeaderFile
$#define _%Class_OCWrappers_HeaderFile
$
$
$typedef %Inherits %Class;
$%HandleTypedef
$
$#define %Class_Type_() %Inherits_Type_()
$#endif
@end;


-- ==================
-- Pointer extraction
-- ==================
@template PointerHXX(%Class,%Inherits) is
$// File generated by CPPExt (Pointer)
$
$#ifndef _%Class_OCWrappers_HeaderFile
$#define _%Class_OCWrappers_HeaderFile
$
$class %Inherits;
$
$typedef %Inherits* %Class;
$
$#endif
@end;


@template MPVIxx (%Class,%Suffix,%Supplement,%Methods) is
$// File generated by CPPExt (Value)
$
$#include <%Class.%Suffix>
$
$%Supplement 
$
$%Methods
@end;

@template StorableIxx(%Class,%Suffix,%Supplement,%Methods) is
$// File generated by CPPExt (Storable)
$
$#include <%Class.%Suffix>
$
$#ifndef _Standard_Type_HeaderFile
$#include <Standard_Type.hxx>
$#endif
$#ifndef _Standard_TypeMismatch_HeaderFile
$#include <Standard_TypeMismatch.hxx>
$#endif
$
$%Supplement 
$
$%Methods
@end;

@template TransientIxx (%Class,%Suffix,%Supplement,%TypeMgt,%Methods) is
$// File generated by CPPExt (Transient3)
$
$#include <%Class.%Suffix>
$
$#ifndef _Standard_TypeMismatch_HeaderFile
$#include <Standard_TypeMismatch.hxx>
$#endif
$
$%Supplement 
$
$%TypeMgt
$
$%Methods
@end;


-- =====================
-- Exceptions extraction
-- =====================
@template ExceptionHXX(%Class,%Inherits) is
$// File generated by CPPExt (Exception)
$
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$#ifndef _Standard_HeaderFile
$#include <Standard.hxx>
$#endif
$#ifndef _Handle_%Class_HeaderFile
$#include <Handle_%Class.hxx>
$#endif
$
$#ifndef _Standard_SStream_HeaderFile
$#include <Standard_SStream.hxx>
$#endif
$
$
$#ifndef _%Inherits_HeaderFile
$#include <%Inherits.hxx>
$#endif
$
$
$#if !defined No_Exception && !defined No_%Class
$#define %Class_Raise_if(CONDITION,MESSAGE) \
$  if (CONDITION) %Class::Raise(MESSAGE);
$#else
$#define %Class_Raise_if(CONDITION,MESSAGE)
$#endif
$
$class %Class : public %Inherits {
$
$#ifndef NO_CXX_EXCEPTION
$ Standard_EXPORT virtual void Throw() const;
$#endif
$public:
$ Standard_EXPORT %Class():%Inherits(){}
$ Standard_EXPORT %Class(const Standard_CString AString):%Inherits(AString){}
$ Standard_EXPORT static void Raise(const Standard_CString aMessage = "");
$ Standard_EXPORT static void Raise(Standard_SStream& aReason);
$ Standard_EXPORT static Handle(%Class) NewInstance(const Standard_CString aMessage); 
$
$// Standard_EXPORT ~%Class();
$
$ // Type methods
$ //
$ Standard_EXPORT friend Handle_Standard_Type& %Class_Type_();
$ Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;			
$// Standard_EXPORT Standard_Boolean             IsKind(const Handle(Standard_Type)&) const;
$};
$
$#endif
@end;

@template ExceptionMethod(%Class) is
$#ifndef _Standard_Macro_HeaderFile
$#include <Standard_Macro.hxx>
$#endif
$//%Class::~%Class(){}
$
$void %Class::Raise(Standard_SStream& aReason) 
${
$  Handle(%Class) _E(new %Class);
$  _E->Reraise (GetSString(aReason));
$}
$
$void %Class::Raise(const Standard_CString AString) 
${
$  Handle(%Class) _E (new %Class);
$  _E->Reraise(AString);
$}
$
$Handle(%Class) %Class::NewInstance(const Standard_CString aMessage)
${
$  return new %Class(aMessage);
$}
$#ifndef NO_CXX_EXCEPTION
$void %Class::Throw() const
${
$  throw *this;
$}
$#endif
@end;

-- ==============
-- misc templates
-- ==============

@template HeaderIncludeDef(%Header) is
$#include "%Header.h"
@end;

@template Include(%IClass,%Suffix) is
$#ifndef _%IClass_HeaderFile
$#include <%IClass.%Suffix>
$#endif
@end; 

@template IncludeNoSafe(%IClass,%Suffix) is
$#include <%IClass.%Suffix>
@end; 

@template Define(%DName,%DValue) is
$#define %DName %DValue
@end;

@template ItemDefine(%DName,%DValue,%DBaseValue) is
$#define %DName %DValue
$#define %DName_hxx <%DBaseValue.hxx>
@end;

@template ItemConstraintHandle(%DName,%DValue) is
$#define Handle_%DName Handle_%DValue
@end;

@template ItemHandleDefine (%DName,%DValue) is
$#define Handle_%DName Handle_%DValue
$#define %DName_Type_() %DValue_Type_()
@end;

@template Undefine(%DName) is
$#undef %DName
@end;

@template ItemUndefine(%DName) is
$#undef %DName
$#undef %DName_hxx
@end;

@template ItemConstraintHandleUndef(%DName) is
$#undef Handle_%DName
@end;

@template ItemHandleUndefine(%DName) is
$#undef Handle_%DName
$#undef %DName_Type_
@end;

@template ShortDec(%IClass, %Suffix) is
--$class %IClass;
$ref class OC%IClass;
@end;

@template CppShortDec(%IClass, %Suffix) is
--$class %IClass;
$#include "%IClass.%Suffix"
@end;

-- ==============================================
-- Methods templates
-- ==============================================

-- =============
-- Constructors
-- =============
@template ConstructorHeader(%Class, %CLIArguments) is
$OC%Class(%CLIArguments)\^
@end;

@template CppConstructor(%Class, %Arguments, %CLIArguments, %CallBaseCtor) is
$OC%Class::OC%Class(%CLIArguments) %CallBaseCtor
${
$  nativeHandle = new %Class(%Arguments);
$}\^
@end;

@template ApiConstructor(%APIArguments) is
$ <Constructor>
$	<Parameters>
$		%APIArguments
$	</Parameters>
$ </Constructor>
@end;

@template CppHandleConstructor(%Class, %Arguments, %CLIArguments, %CallBaseCtor) is
$OC%Class::OC%Class(%CLIArguments) %CallBaseCtor
${
$  nativeHandle = new Handle_%Class(new %Class(%Arguments));
$}\^
@end;

@template CppEmptyConstructor(%Class, %Arguments, %CLIArguments, %CallBaseCtor) is
$OC%Class::OC%Class(%CLIArguments) %CallBaseCtor
${}\^
@end;

@template ApiEmptyConstructor(%Class, %Arguments, %CLIArguments, %CallBaseCtor) is
$ <Constructor>
$	<Parameters />
$ </Constructor>
@end;

-- =============
-- Destructors
-- =============
@template DestructorHeader(%Class) is
$
$~OC%Class()
${
$  delete nativeHandle;
$}\^
@end;

@template DestructorHandleHeader(%Class) is
$
$~OC%Class()
${
$  nativeHandle->Nullify();
$  delete nativeHandle;
$}\^
@end;

-- =============
-- Methods
-- =============
@template MethodCaller(%Class) is
$((%Class*)nativeHandle)->\^
@end;

@template HandleMethodCaller(%Class) is
$(*((Handle_%Class*)nativeHandle))->\^
@end;

@template StaticMethodCaller(%Class) is
$%Class::\^
@end;


@template MethodHeader(%Class, %Virtual, %RetSpec, %Return, %And, %MethodName, %MetSpec, %CLIArguments) is
$%Virtual /*instead*/ %RetSpec %Return%And %MethodName(%CLIArguments) %MetSpec\^
@end;

@template CppMethod(%Class, %RetSpec, %Return, %And, %MethodName, %Arguments, %CLIArguments,
					%DoReturn, %MethodCaller) is
$%RetSpec %Return%And OC%Class::%MethodName(%CLIArguments)
${
$  %DoReturn%MethodCaller%MethodName(%Arguments);
$}\^
@end;

@template ApiMethod(%Class, %Virtual, %RetSpec, %Return, %And, %MethodName, %Arguments, %MetSpec, %APIArguments, %DoReturn, %ApiStatic) is
$ <Method Name="%MethodName" ReturnType="%Return">
$ %ApiStatic
$	<Parameters>
$		%APIArguments
$	</Parameters>
$ </Method>
@end;

@template CppStringMethod(%Class, %RetSpec, %Return, %And, %MethodName, %Arguments, %CLIArguments,
						  %DoReturn, %MethodCaller) is
$%RetSpec %Return%And OC%Class::%MethodName(%CLIArguments)
${
$  %DoReturnOCConverter::StandardCStringToString(%MethodCaller%MethodName(%Arguments));
$}\^
@end;

@template CppExtStringMethod(%Class, %RetSpec, %Return, %And, %MethodName, %Arguments, %CLIArguments,
						  %DoReturn, %MethodCaller) is
$%RetSpec %Return%And OC%Class::%MethodName(%CLIArguments)
${
$  %DoReturnOCConverter::StandardExtStringToString(%MethodCaller%MethodName(%Arguments));
$}\^
@end;

@template CppBooleanMethod(%Class, %RetSpec, %Return, %And, %MethodName, %Arguments, %CLIArguments,
						  %DoReturn, %MethodCaller) is
$%RetSpec %Return%And OC%Class::%MethodName(%CLIArguments)
${
$  %DoReturnOCConverter::StandardBooleanToBoolean(%MethodCaller%MethodName(%Arguments));
$}\^
@end;

@template CppIntPtrMethod(%Class, %RetSpec, %Return, %And, %MethodName, %Arguments, %CLIArguments,
						  %DoReturn, %MethodCaller) is
$%RetSpec %Return%And OC%Class::%MethodName(%CLIArguments)
${
$  %DoReturnSystem::IntPtr(%MethodCaller%MethodName(%Arguments));
$}\^
@end;

@template CppEnumMethod(%Class, %RetSpec, %Return, %And, %MethodName, %Arguments, %CLIArguments,
					    %DoReturn, %MethodCaller) is
$%RetSpec %Return%And OC%Class::%MethodName(%CLIArguments)
${
$  %DoReturn(%Return)(%MethodCaller%MethodName(%Arguments));
$}\^
@end;

@template CppRetTypeMethod(%Class, %Return, %MethodName, %Arguments, %CLIArguments, %RetClass, %MethodCaller, %DmyCtorParams) is
$%Return OC%Class::%MethodName(%CLIArguments)
${
$  %RetClass* tmp = new %RetClass(%DmyCtorParams);
$  *tmp = %MethodCaller%MethodName(%Arguments);
$  return gcnew OC%RetClass(tmp);
$}\^
@end;

@template CppRetTypeHandleMethod(%Class, %Return, %MethodName, %Arguments, %CLIArguments, %RetClass, %MethodCaller) is
$%Return OC%Class::%MethodName(%CLIArguments)
${
$  Handle(%RetClass) tmp = %MethodCaller%MethodName(%Arguments);
$  return gcnew OC%RetClass(&tmp);
$}\^
@end;

@template CppRetTypeNullMethod(%Class, %Return, %MethodName, %Arguments, %CLIArguments, %RetClass, %MethodCaller) is
$%Return OC%Class::%MethodName(%CLIArguments)
${
$  Handle(%RetClass) tmp = %MethodCaller%MethodName(%Arguments);
$  return nullptr;
$}\^
@end;

@template MethodTemplateDec(%MethodComment,%Method) is
$
$%MethodComment
$%Method;
@end;

@template CppMethodTemplateDec(%CppMethod) is
$
$%CppMethod
@end;

@template ApiMethodTemplateDec(%ApiMethod) is
$%ApiMethod
@end;

@template MethodTemplateDef(%Method,%MBody) is
$%Method
${
$  %MBody
$}
@end;


-- ===============
-- current methods
-- ===============

-- type management : BEGIN

@template TypeMgtAncestorType(%Nb) is
$aType%Nb\^
@end;

@template TypeMgtAncestor(%Nb,%Ancestors) is
$  static Handle_Standard_Type %Nb = STANDARD_TYPE(%Ancestors);
@end;

@template TypeMgt(%Class,%Inherits,%Ancestors) is
$
$Standard_EXPORT Handle_Standard_Type& %Class_Type_()
${
$
$  %Inherits 
$
$  static Handle_Standard_Transient _Ancestors[]= {%AncestorsNULL};
$  static Handle_Standard_Type _aType = new Standard_Type("%Class",
$			                                 sizeof(%Class),
$			                                 1,
$			                                 (Standard_Address)_Ancestors,
$			                                 (Standard_Address)NULL);
$
$  return _aType;
$}
@end;

-- type management : END

@template DownCast(%Class,%IClass) is
$// DownCast method
$//   allow safe downcasting
$//
$const Handle(%Class) Handle(%Class)::DownCast(const Handle(%IClass)& AnObject) 
${
$  Handle(%Class) _anOtherObject;
$
$  if (!AnObject.IsNull()) {
$     if (AnObject->IsKind(STANDARD_TYPE(%Class))) {
$       _anOtherObject = Handle(%Class)((Handle(%Class)&)AnObject);
$     }
$  }
$
$  return _anOtherObject ;
$}
@end;

@template DynamicType(%Class) is
$const Handle(Standard_Type)& %Class::DynamicType() const 
${ 
$  return STANDARD_TYPE(%Class) ; 
$}
@end;

@template IsKind(%Class,%IClass) is
$//Standard_Boolean %Class::IsKind(const Handle(Standard_Type)& AType) const 
$//{ 
$//  return (STANDARD_TYPE(%Class) == AType || %IClass::IsKind(AType)); 
$//}
@end;
